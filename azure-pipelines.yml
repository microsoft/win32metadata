trigger:
  branches:
    include:
    - master
pr: none

jobs:
- job: job_calc_nuget_version
  displayName: Calculate published NuGet version
 
  pool:
    name: Package ES Standard Build

  variables:
    System.Debug: true
    MainPatch: $[counter(variables['MainNugetVersion'], 0)]
    MSBuildSDKPatch: $[counter(variables['MSBuildSDKNugetVersion'], 0)]
    BuildNumberSuffix: $(Build.BuildNumber)
  
  steps:
  - checkout: none
  - task: PowerShell@2
    name: echoVersion
    displayName: Update MainNugetVersion, set build number
    inputs:
      pwsh: true
      targetType: 'inline'
      script: |
        $ver = "${env:MainNugetVersion}"
        $parts = $ver.Split(".")
        $parts[2] = ${env:MainPatch}
        $nugetVer = [string]::Join(".", $parts) + "-preview"
        Write-Output "##vso[task.setvariable variable=MainNugetVersion;isOutput=true;]$nugetVer"

        $verSuffix = ${env:BuildNumberSuffix}
        Write-Host "##vso[build.updatebuildnumber]$($nugetVer)_$($verSuffix)"

        $ver = "${env:MSBuildSDKNugetVersion}"
        $parts = $ver.Split(".")
        $parts[2] = ${env:MSBuildSDKPatch}
        $nugetVer = [string]::Join(".", $parts) + "-preview"
        Write-Output "##vso[task.setvariable variable=MSBuildSDKNugetVersion;isOutput=true;]$nugetVer"

  - script: echo MainNugetVersion = $(echoVersion.MainNugetVersion), MSBuildSDKNugetVersion = $(echoVersion.MSBuildSDKNugetVersion)
    displayName: Echo publish nuget versions
- job: scrape_x64
  displayName: "Scrape headers: x64"
  pool:
    name: Package ES Standard Build
    demands:
    - msbuild
    - visualstudio
    - visualstudio -equals C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\
  workspace:
    clean: all
  dependsOn: ['job_calc_nuget_version']
  variables:
    MainNugetVersion: $[ dependencies.job_calc_nuget_version.outputs['echoVersion.MainNugetVersion'] ]

  steps:
  - task: UseDotNet@2
    displayName: Use DotNet 3.x
    inputs:
      packageType: 'sdk'
      version: '3.x'
  
  - task: PowerShell@2
    displayName: GenerateMetadataSource.ps1 - x64
    inputs:
      filePath: 'scripts\GenerateMetadataSource.ps1'
      arguments: '-arch x64'
      errorActionPreference: 'continue'
      pwsh: true
  
  - task: PowerShell@2
    displayName: Scrape constants
    inputs:
      filePath: 'scripts\BuildMetadataBin.ps1'
      arguments: '-assemblyVersion $(MainNugetVersion) -arch crossarch -SkipBinary'
      pwsh: true

  - publish: 'generation\scraper\obj\x64'
    displayName: Publish x64 scraper obj assets
    artifact: 'scraper_obj_x64'

  - publish: 'generation\emitter\generated\x64'
    displayName: Publish x64 emitter assets
    artifact: 'emitter_generated_x64'

- job: scrape_x86
  displayName: "Scrape headers: x86"
  pool:
    name: Package ES Standard Build
    demands:
    - msbuild
    - visualstudio
    - visualstudio -equals C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\
  workspace:
    clean: all
  dependsOn: ['job_calc_nuget_version']
  steps:
  - task: UseDotNet@2
    displayName: Use DotNet 3.x
    inputs:
      packageType: 'sdk'
      version: '3.x'
  
  - task: PowerShell@2
    displayName: GenerateMetadataSource.ps1 - x86
    inputs:
      filePath: 'scripts\GenerateMetadataSource.ps1'
      arguments: '-arch x86'
      errorActionPreference: 'continue'
      pwsh: true
  
  - publish: 'generation\emitter\generated\x86'
    displayName: Publish x86 emitter assets
    artifact: 'emitter_generated_x86'

- job: scrape_arm64
  displayName: "Scrape headers: arm64"
  pool:
    name: Package ES Standard Build
    demands:
    - msbuild
    - visualstudio
    - visualstudio -equals C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\
  workspace:
    clean: all
  dependsOn: ['job_calc_nuget_version']
  steps:
  - task: UseDotNet@2
    displayName: Use DotNet 3.x
    inputs:
      packageType: 'sdk'
      version: '3.x'
  
  - task: PowerShell@2
    displayName: GenerateMetadataSource.ps1 - arm64
    inputs:
      filePath: 'scripts\GenerateMetadataSource.ps1'
      arguments: '-arch arm64'
      errorActionPreference: 'continue'
      pwsh: true
  
  - publish: 'generation\emitter\generated\arm64'
    displayName: Publish arm64 emitter assets
    artifact: 'emitter_generated_arm64'

- job: build_winmd
  displayName: Build, test, sign, package winmd
  workspace:
    clean: all
  dependsOn: ['job_calc_nuget_version','scrape_x64','scrape_x86','scrape_arm64']
  variables:
    MainNugetVersion: $[ dependencies.job_calc_nuget_version.outputs['echoVersion.MainNugetVersion']]
    MSBuildSDKNugetVersion: $[ dependencies.job_calc_nuget_version.outputs['echoVersion.MSBuildSDKNugetVersion']]
    OutputPackagesDir: $(Build.ArtifactStagingDirectory)\CreatedNugetPackages
  pool:
    name: Package ES Standard Build
    demands:
    - msbuild
    - visualstudio
    - visualstudio -equals C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\
  steps:
  - task: UseDotNet@2
    displayName: Use DotNet 3.x
    inputs:
      packageType: 'sdk'
      version: '3.x'

    # ESRP Authenticode sign package DLLs
  - task: UseDotNet@2
    displayName: Install DotNet 2.1.x for signing tasks
    inputs:
      packageType: 'sdk'
      version: '2.1.x'

  - task: DownloadPipelineArtifact@2
    displayName: Download x64 scraper obj assets
    inputs:
      artifact: 'scraper_obj_x64'
      path: 'generation\scraper\obj\x64'

  - task: DownloadPipelineArtifact@2
    displayName: Download x64 emitter assets
    inputs:
      artifact: 'emitter_generated_x64'
      path: 'generation\emitter\generated\x64'

  - task: DownloadPipelineArtifact@2
    displayName: Download x86 emitter assets
    inputs:
      artifact: 'emitter_generated_x86'
      path: 'generation\emitter\generated\x86'

  - task: DownloadPipelineArtifact@2
    displayName: Download arm64 emitter assets
    inputs:
      artifact: 'emitter_generated_arm64'
      path: 'generation\emitter\generated\arm64'

  - task: PowerShell@2
    displayName: Build metadata binary
    inputs:
      filePath: 'scripts\BuildMetadataBin.ps1'
      arguments: '-assemblyVersion $(MainNugetVersion) -arch crossarch -SkipConstants'
      pwsh: true
  
  - publish: 'bin'
    artifact: 'bin'

  - task: PowerShell@2
    displayName: Test metadata binary
    inputs:
      filePath: 'scripts\TestWinmdBinary.ps1'
      pwsh: true

  - task: EsrpCodeSigning@1
    displayName: 'Authenticode Sign Binaries in Metadata package'
    inputs:
      ConnectedServiceName: 'Undocked RegFree Signing Connection'
      FolderPath: '$(Build.SourcesDirectory)\bin'
      Pattern: '*.dll,*.winmd'
      signConfigType: 'inlineSignParams'
      inlineOperation: |
        [
          {
            "keyCode": "CP-230012",
            "operationSetCode": "SigntoolSign",
            "parameters": [
              {
                "parameterName": "OpusName",
                "parameterValue": "Microsoft"
              },
              {
                "parameterName": "OpusInfo",
                "parameterValue": "http://www.microsoft.com"
              },
              {
                "parameterName": "PageHash",
                "parameterValue": "/NPH"
              },
              {
                "parameterName": "FileDigest",
                "parameterValue": "/fd sha256"
              },
              {
                "parameterName": "TimeStamp",
                "parameterValue": "/tr \"http://rfc3161.gtm.corp.microsoft.com/TSS/HttpTspServer\" /td sha256"
              }
            ],
            "toolName": "signtool.exe",
            "toolVersion": "6.2.9304.0"
          }
        ]
      SessionTimeout: '60'
      MaxConcurrency: '50'
      MaxRetryAttempts: '2'
      condition: eq(variables['SignFiles'], 'true')
  
    # There's a problem on microsoft.visualstudio.com that requires the guid instead of NuGetCommand@2

  - task: EsrpCodeSigning@1
    displayName: 'Authenticode Sign Binaries in MSBuild SDK package'
    inputs:
      ConnectedServiceName: 'Undocked RegFree Signing Connection'
      FolderPath: '$(Build.SourcesDirectory)\bin\release\netcoreapp3.1'
      Pattern: 'ClangSharpSourceToWinmd.dll,ConstantsScraper.dll,MetadataTasks.dll,MetadataUtils.dll,WinmdUtils.dll'
      signConfigType: 'inlineSignParams'
      inlineOperation: |
        [
          {
            "keyCode": "CP-230012",
            "operationSetCode": "SigntoolSign",
            "parameters": [
              {
                "parameterName": "OpusName",
                "parameterValue": "Microsoft"
              },
              {
                "parameterName": "OpusInfo",
                "parameterValue": "http://www.microsoft.com"
              },
              {
                "parameterName": "PageHash",
                "parameterValue": "/NPH"
              },
              {
                "parameterName": "FileDigest",
                "parameterValue": "/fd sha256"
              },
              {
                "parameterName": "TimeStamp",
                "parameterValue": "/tr \"http://rfc3161.gtm.corp.microsoft.com/TSS/HttpTspServer\" /td sha256"
              }
            ],
            "toolName": "signtool.exe",
            "toolVersion": "6.2.9304.0"
          }
        ]
      SessionTimeout: '60'
      MaxConcurrency: '50'
      MaxRetryAttempts: '2'
      condition: eq(variables['SignFiles'], 'true')
  
    # There's a problem on microsoft.visualstudio.com that requires the guid instead of NuGetCommand@2
  - task: 333b11bd-d341-40d9-afcf-b32d5ce6f23b@2
    displayName: Pack metadata nuget package
    inputs:
      command: 'pack'
      packagesToPack: 'sources\nuget\Microsoft.Windows.SDK.Win32Metadata\Microsoft.Windows.SDK.Win32Metadata.nuspec'
      packDestination: '$(OutputPackagesDir)'
      versioningScheme: 'byEnvVar'
      versionEnvVar: 'MainNugetVersion'
      basePath: '$(Build.SourcesDirectory)'
  
  - task: PowerShell@2
    displayName: Pack MSBuildSDK package
    inputs:
      targetType: inline
      script: |
        . $(Build.SourcesDirectory)\scripts\CommonUtils.ps1
        [hashtable]$textToReplaceTable = @{ "10.0.19041.202-preview" = "$(MainNugetVersion)" }
        Replace-Text "$(Build.SourcesDirectory)\sources\msbuild\sdk\sdk.props" $textToReplaceTable

        cd $(Build.SourcesDirectory)\sources\msbuild\nuget
        dotnet pack -p:NuspecProperties="version=$(MSBuildSDKNugetVersion)" -o "$(OutputPackagesDir)"
      errorActionPreference: 'continue'
      pwsh: true

  - task: EsrpCodeSigning@1
    displayName: 'Sign nuget packages'
    inputs:
      ConnectedServiceName: 'Undocked RegFree Signing Connection'
      FolderPath: '$(OutputPackagesDir)'
      Pattern: '*.nupkg'
      signConfigType: 'inlineSignParams'
      inlineOperation: |
        [
          {
            "KeyCode" : "CP-401405",
            "OperationCode" : "NuGetSign",
            "Parameters" : {},
            "ToolName" : "sign",
            "ToolVersion" : "1.0"
          },
          {
              "KeyCode" : "CP-401405",
              "OperationCode" : "NuGetVerify",
              "Parameters" : {},
              "ToolName" : "sign",
              "ToolVersion" : "1.0"
          }
        ]
      SessionTimeout: '60'
      MaxConcurrency: '50'
      MaxRetryAttempts: '2'
      condition: eq(variables['SignFiles'], 'true')
  
  - task: PublishPipelineArtifact@1
    displayName: 'Publish NuGet packages to pipeline artifacts'
    inputs:
      targetPath: '$(OutputPackagesDir)'
      artifact: NuGetPackages
  
    # There's a problem on microsoft.visualstudio.com that requires the guid instead of NuGetCommand@2
    # Don't publish if we're using pre-generated source
  - task: 333b11bd-d341-40d9-afcf-b32d5ce6f23b@2
    displayName: 'NuGet push'
    inputs:
      command: push
      packagesToPush: '$(OutputPackagesDir)/**/*.nupkg;!$(OutputPackagesDir)/**/*.symbols.nupkg'
      publishVstsFeed: 'c1408dcb-1833-4ae4-9af5-1a891a12cc3c'
      allowPackageConflicts: true
