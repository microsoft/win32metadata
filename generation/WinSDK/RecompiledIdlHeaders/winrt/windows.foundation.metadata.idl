//
// Copyright (c) Microsoft Corporation. All rights reserved.
// 
//
// File generated by WinMDIDL version 8.00.0021
//

import "inspectable.idl";
import "AsyncInfo.idl";
import "EventToken.idl";
import "windowscontracts.idl";
import "Windows.Foundation.idl";

// Forward Declare
namespace Windows
{
    namespace Foundation
    {
        apicontract FoundationContract;
    }
}
namespace Windows
{
    namespace Foundation
    {
        namespace Metadata
        {
            typedef enum GCPressureAmount GCPressureAmount;

            interface IApiInformationStatics;

            runtimeclass ApiInformation;
        }
    }
}

// Generic instantiations

// Type definition
namespace Windows
{
    namespace Foundation
    {
        namespace Metadata
        {
            [contract(Windows.Foundation.FoundationContract, 1.0)]
            enum GCPressureAmount
            {
                Low    = 0,
                Medium = 1,
                High   = 2
            };

            [contract(Windows.Foundation.FoundationContract, 1.0)]
            [exclusiveto(Windows.Foundation.Metadata.ApiInformation)]
            [uuid(997439FE-F681-4A11-B416-C13A47E8BA36)]
            interface IApiInformationStatics : IInspectable
            {
                HRESULT IsTypePresent([in] HSTRING typeName, [out] [retval] boolean* result);
                [overload("IsMethodPresent")] HRESULT IsMethodPresent([in] HSTRING typeName, [in] HSTRING methodName, [out] [retval] boolean* result);
                [overload("IsMethodPresent")] HRESULT IsMethodPresentWithArity([in] HSTRING typeName, [in] HSTRING methodName, [in] UINT32 inputParameterCount, [out] [retval] boolean* result);
                HRESULT IsEventPresent([in] HSTRING typeName, [in] HSTRING eventName, [out] [retval] boolean* result);
                HRESULT IsPropertyPresent([in] HSTRING typeName, [in] HSTRING propertyName, [out] [retval] boolean* result);
                HRESULT IsReadOnlyPropertyPresent([in] HSTRING typeName, [in] HSTRING propertyName, [out] [retval] boolean* result);
                HRESULT IsWriteablePropertyPresent([in] HSTRING typeName, [in] HSTRING propertyName, [out] [retval] boolean* result);
                HRESULT IsEnumNamedValuePresent([in] HSTRING enumTypeName, [in] HSTRING valueName, [out] [retval] boolean* result);
                [overload("IsApiContractPresent")] HRESULT IsApiContractPresentByMajor([in] HSTRING contractName, [in] UINT16 majorVersion, [out] [retval] boolean* result);
                [overload("IsApiContractPresent")] HRESULT IsApiContractPresentByMajorAndMinor([in] HSTRING contractName, [in] UINT16 majorVersion, [in] UINT16 minorVersion, [out] [retval] boolean* result);
            }

            [contract(Windows.Foundation.FoundationContract, 1.0)]
            [marshaling_behavior(agile)]
            [static(Windows.Foundation.Metadata.IApiInformationStatics, Windows.Foundation.FoundationContract, 1.0)]
            [threading(both)]
            runtimeclass ApiInformation
            {
            }
        }
    }
}
