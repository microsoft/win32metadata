//
// Copyright (c) Microsoft Corporation. All rights reserved.
// 
//
// File generated by WinMDIDL version 8.00.0021
//

import "inspectable.idl";
import "AsyncInfo.idl";
import "EventToken.idl";
import "windowscontracts.idl";
import "Windows.Foundation.idl";
import "Windows.Globalization.idl";
import "Windows.Networking.idl";
import "Windows.Storage.Streams.idl";
import "Windows.Web.Http.idl";

// Forward Declare
namespace Windows
{
    namespace Foundation
    {
        typedef struct DateTime DateTime;

        interface IStringable;

        typedef struct TimeSpan TimeSpan;

        apicontract UniversalApiContract;

        runtimeclass Uri;
    }
}
namespace Windows
{
    namespace Globalization
    {
        runtimeclass Language;
    }
}
namespace Windows
{
    namespace Networking
    {
        runtimeclass HostName;
    }
}
namespace Windows
{
    namespace Storage
    {
        namespace Streams
        {
            interface IBuffer;
        }
    }
}
namespace Windows
{
    namespace Web
    {
        namespace Http
        {
            runtimeclass HttpMethod;
        }
    }
}
namespace Windows
{
    namespace Web
    {
        namespace Http
        {
            namespace Headers
            {
                interface IHttpCacheDirectiveHeaderValueCollection;

                interface IHttpChallengeHeaderValue;

                interface IHttpChallengeHeaderValueCollection;

                interface IHttpChallengeHeaderValueFactory;

                interface IHttpChallengeHeaderValueStatics;

                interface IHttpConnectionOptionHeaderValue;

                interface IHttpConnectionOptionHeaderValueCollection;

                interface IHttpConnectionOptionHeaderValueFactory;

                interface IHttpConnectionOptionHeaderValueStatics;

                interface IHttpContentCodingHeaderValue;

                interface IHttpContentCodingHeaderValueCollection;

                interface IHttpContentCodingHeaderValueFactory;

                interface IHttpContentCodingHeaderValueStatics;

                interface IHttpContentCodingWithQualityHeaderValue;

                interface IHttpContentCodingWithQualityHeaderValueCollection;

                interface IHttpContentCodingWithQualityHeaderValueFactory;

                interface IHttpContentCodingWithQualityHeaderValueStatics;

                interface IHttpContentDispositionHeaderValue;

                interface IHttpContentDispositionHeaderValueFactory;

                interface IHttpContentDispositionHeaderValueStatics;

                interface IHttpContentHeaderCollection;

                interface IHttpContentRangeHeaderValue;

                interface IHttpContentRangeHeaderValueFactory;

                interface IHttpContentRangeHeaderValueStatics;

                interface IHttpCookiePairHeaderValue;

                interface IHttpCookiePairHeaderValueCollection;

                interface IHttpCookiePairHeaderValueFactory;

                interface IHttpCookiePairHeaderValueStatics;

                interface IHttpCredentialsHeaderValue;

                interface IHttpCredentialsHeaderValueFactory;

                interface IHttpCredentialsHeaderValueStatics;

                interface IHttpDateOrDeltaHeaderValue;

                interface IHttpDateOrDeltaHeaderValueStatics;

                interface IHttpExpectationHeaderValue;

                interface IHttpExpectationHeaderValueCollection;

                interface IHttpExpectationHeaderValueFactory;

                interface IHttpExpectationHeaderValueStatics;

                interface IHttpLanguageHeaderValueCollection;

                interface IHttpLanguageRangeWithQualityHeaderValue;

                interface IHttpLanguageRangeWithQualityHeaderValueCollection;

                interface IHttpLanguageRangeWithQualityHeaderValueFactory;

                interface IHttpLanguageRangeWithQualityHeaderValueStatics;

                interface IHttpMediaTypeHeaderValue;

                interface IHttpMediaTypeHeaderValueFactory;

                interface IHttpMediaTypeHeaderValueStatics;

                interface IHttpMediaTypeWithQualityHeaderValue;

                interface IHttpMediaTypeWithQualityHeaderValueCollection;

                interface IHttpMediaTypeWithQualityHeaderValueFactory;

                interface IHttpMediaTypeWithQualityHeaderValueStatics;

                interface IHttpMethodHeaderValueCollection;

                interface IHttpNameValueHeaderValue;

                interface IHttpNameValueHeaderValueFactory;

                interface IHttpNameValueHeaderValueStatics;

                interface IHttpProductHeaderValue;

                interface IHttpProductHeaderValueFactory;

                interface IHttpProductHeaderValueStatics;

                interface IHttpProductInfoHeaderValue;

                interface IHttpProductInfoHeaderValueCollection;

                interface IHttpProductInfoHeaderValueFactory;

                interface IHttpProductInfoHeaderValueStatics;

                interface IHttpRequestHeaderCollection;

                interface IHttpResponseHeaderCollection;

                interface IHttpTransferCodingHeaderValue;

                interface IHttpTransferCodingHeaderValueCollection;

                interface IHttpTransferCodingHeaderValueFactory;

                interface IHttpTransferCodingHeaderValueStatics;

                runtimeclass HttpCacheDirectiveHeaderValueCollection;

                runtimeclass HttpChallengeHeaderValue;

                runtimeclass HttpChallengeHeaderValueCollection;

                runtimeclass HttpConnectionOptionHeaderValue;

                runtimeclass HttpConnectionOptionHeaderValueCollection;

                runtimeclass HttpContentCodingHeaderValue;

                runtimeclass HttpContentCodingHeaderValueCollection;

                runtimeclass HttpContentCodingWithQualityHeaderValue;

                runtimeclass HttpContentCodingWithQualityHeaderValueCollection;

                runtimeclass HttpContentDispositionHeaderValue;

                runtimeclass HttpContentHeaderCollection;

                runtimeclass HttpContentRangeHeaderValue;

                runtimeclass HttpCookiePairHeaderValue;

                runtimeclass HttpCookiePairHeaderValueCollection;

                runtimeclass HttpCredentialsHeaderValue;

                runtimeclass HttpDateOrDeltaHeaderValue;

                runtimeclass HttpExpectationHeaderValue;

                runtimeclass HttpExpectationHeaderValueCollection;

                runtimeclass HttpLanguageHeaderValueCollection;

                runtimeclass HttpLanguageRangeWithQualityHeaderValue;

                runtimeclass HttpLanguageRangeWithQualityHeaderValueCollection;

                runtimeclass HttpMediaTypeHeaderValue;

                runtimeclass HttpMediaTypeWithQualityHeaderValue;

                runtimeclass HttpMediaTypeWithQualityHeaderValueCollection;

                runtimeclass HttpMethodHeaderValueCollection;

                runtimeclass HttpNameValueHeaderValue;

                runtimeclass HttpProductHeaderValue;

                runtimeclass HttpProductInfoHeaderValue;

                runtimeclass HttpProductInfoHeaderValueCollection;

                runtimeclass HttpRequestHeaderCollection;

                runtimeclass HttpResponseHeaderCollection;

                runtimeclass HttpTransferCodingHeaderValue;

                runtimeclass HttpTransferCodingHeaderValueCollection;
            }
        }
    }
}

// Generic instantiations
namespace Windows
{
    namespace Web
    {
        namespace Http
        {
            namespace Headers
            {
                declare
                {
                    interface Windows.Foundation.Collections.IIterable<Windows.Web.Http.Headers.HttpChallengeHeaderValue*>;

                    interface Windows.Foundation.Collections.IIterable<Windows.Web.Http.Headers.HttpConnectionOptionHeaderValue*>;

                    interface Windows.Foundation.Collections.IIterable<Windows.Web.Http.Headers.HttpContentCodingHeaderValue*>;

                    interface Windows.Foundation.Collections.IIterable<Windows.Web.Http.Headers.HttpContentCodingWithQualityHeaderValue*>;

                    interface Windows.Foundation.Collections.IIterable<Windows.Web.Http.Headers.HttpCookiePairHeaderValue*>;

                    interface Windows.Foundation.Collections.IIterable<Windows.Web.Http.Headers.HttpExpectationHeaderValue*>;

                    interface Windows.Foundation.Collections.IIterable<Windows.Web.Http.Headers.HttpLanguageRangeWithQualityHeaderValue*>;

                    interface Windows.Foundation.Collections.IIterable<Windows.Web.Http.Headers.HttpMediaTypeWithQualityHeaderValue*>;

                    interface Windows.Foundation.Collections.IIterable<Windows.Web.Http.Headers.HttpNameValueHeaderValue*>;

                    interface Windows.Foundation.Collections.IIterable<Windows.Web.Http.Headers.HttpProductInfoHeaderValue*>;

                    interface Windows.Foundation.Collections.IIterable<Windows.Web.Http.Headers.HttpTransferCodingHeaderValue*>;

                    interface Windows.Foundation.Collections.IIterator<Windows.Web.Http.Headers.HttpChallengeHeaderValue*>;

                    interface Windows.Foundation.Collections.IIterator<Windows.Web.Http.Headers.HttpConnectionOptionHeaderValue*>;

                    interface Windows.Foundation.Collections.IIterator<Windows.Web.Http.Headers.HttpContentCodingHeaderValue*>;

                    interface Windows.Foundation.Collections.IIterator<Windows.Web.Http.Headers.HttpContentCodingWithQualityHeaderValue*>;

                    interface Windows.Foundation.Collections.IIterator<Windows.Web.Http.Headers.HttpCookiePairHeaderValue*>;

                    interface Windows.Foundation.Collections.IIterator<Windows.Web.Http.Headers.HttpExpectationHeaderValue*>;

                    interface Windows.Foundation.Collections.IIterator<Windows.Web.Http.Headers.HttpLanguageRangeWithQualityHeaderValue*>;

                    interface Windows.Foundation.Collections.IIterator<Windows.Web.Http.Headers.HttpMediaTypeWithQualityHeaderValue*>;

                    interface Windows.Foundation.Collections.IIterator<Windows.Web.Http.Headers.HttpNameValueHeaderValue*>;

                    interface Windows.Foundation.Collections.IIterator<Windows.Web.Http.Headers.HttpProductInfoHeaderValue*>;

                    interface Windows.Foundation.Collections.IIterator<Windows.Web.Http.Headers.HttpTransferCodingHeaderValue*>;

                    interface Windows.Foundation.Collections.IVectorView<Windows.Web.Http.Headers.HttpChallengeHeaderValue*>;

                    interface Windows.Foundation.Collections.IVectorView<Windows.Web.Http.Headers.HttpConnectionOptionHeaderValue*>;

                    interface Windows.Foundation.Collections.IVectorView<Windows.Web.Http.Headers.HttpContentCodingHeaderValue*>;

                    interface Windows.Foundation.Collections.IVectorView<Windows.Web.Http.Headers.HttpContentCodingWithQualityHeaderValue*>;

                    interface Windows.Foundation.Collections.IVectorView<Windows.Web.Http.Headers.HttpCookiePairHeaderValue*>;

                    interface Windows.Foundation.Collections.IVectorView<Windows.Web.Http.Headers.HttpExpectationHeaderValue*>;

                    interface Windows.Foundation.Collections.IVectorView<Windows.Web.Http.Headers.HttpLanguageRangeWithQualityHeaderValue*>;

                    interface Windows.Foundation.Collections.IVectorView<Windows.Web.Http.Headers.HttpMediaTypeWithQualityHeaderValue*>;

                    interface Windows.Foundation.Collections.IVectorView<Windows.Web.Http.Headers.HttpNameValueHeaderValue*>;

                    interface Windows.Foundation.Collections.IVectorView<Windows.Web.Http.Headers.HttpProductInfoHeaderValue*>;

                    interface Windows.Foundation.Collections.IVectorView<Windows.Web.Http.Headers.HttpTransferCodingHeaderValue*>;

                    interface Windows.Foundation.Collections.IVector<Windows.Web.Http.Headers.HttpChallengeHeaderValue*>;

                    interface Windows.Foundation.Collections.IVector<Windows.Web.Http.Headers.HttpConnectionOptionHeaderValue*>;

                    interface Windows.Foundation.Collections.IVector<Windows.Web.Http.Headers.HttpContentCodingHeaderValue*>;

                    interface Windows.Foundation.Collections.IVector<Windows.Web.Http.Headers.HttpContentCodingWithQualityHeaderValue*>;

                    interface Windows.Foundation.Collections.IVector<Windows.Web.Http.Headers.HttpCookiePairHeaderValue*>;

                    interface Windows.Foundation.Collections.IVector<Windows.Web.Http.Headers.HttpExpectationHeaderValue*>;

                    interface Windows.Foundation.Collections.IVector<Windows.Web.Http.Headers.HttpLanguageRangeWithQualityHeaderValue*>;

                    interface Windows.Foundation.Collections.IVector<Windows.Web.Http.Headers.HttpMediaTypeWithQualityHeaderValue*>;

                    interface Windows.Foundation.Collections.IVector<Windows.Web.Http.Headers.HttpNameValueHeaderValue*>;

                    interface Windows.Foundation.Collections.IVector<Windows.Web.Http.Headers.HttpProductInfoHeaderValue*>;

                    interface Windows.Foundation.Collections.IVector<Windows.Web.Http.Headers.HttpTransferCodingHeaderValue*>;
                }
            }
        }
    }
}

// Type definition
namespace Windows
{
    namespace Web
    {
        namespace Http
        {
            namespace Headers
            {
                [contract(Windows.Foundation.UniversalApiContract, 1.0)]
                [exclusiveto(Windows.Web.Http.Headers.HttpCacheDirectiveHeaderValueCollection)]
                [uuid(9A586B89-D5D0-4FBE-BD9D-B5B3636811B4)]
                interface IHttpCacheDirectiveHeaderValueCollection : IInspectable
                {
                    [propget] HRESULT MaxAge([out] [retval] Windows.Foundation.IReference<Windows.Foundation.TimeSpan>** value);
                    [propput] HRESULT MaxAge([in] Windows.Foundation.IReference<Windows.Foundation.TimeSpan>* value);
                    [propget] HRESULT MaxStale([out] [retval] Windows.Foundation.IReference<Windows.Foundation.TimeSpan>** value);
                    [propput] HRESULT MaxStale([in] Windows.Foundation.IReference<Windows.Foundation.TimeSpan>* value);
                    [propget] HRESULT MinFresh([out] [retval] Windows.Foundation.IReference<Windows.Foundation.TimeSpan>** value);
                    [propput] HRESULT MinFresh([in] Windows.Foundation.IReference<Windows.Foundation.TimeSpan>* value);
                    [propget] HRESULT SharedMaxAge([out] [retval] Windows.Foundation.IReference<Windows.Foundation.TimeSpan>** value);
                    [propput] HRESULT SharedMaxAge([in] Windows.Foundation.IReference<Windows.Foundation.TimeSpan>* value);
                    HRESULT ParseAdd([in] HSTRING input);
                    HRESULT TryParseAdd([in] HSTRING input, [out] [retval] boolean* result);
                }

                [contract(Windows.Foundation.UniversalApiContract, 1.0)]
                [exclusiveto(Windows.Web.Http.Headers.HttpChallengeHeaderValue)]
                [uuid(393361AF-0F7D-4820-9FDD-A2B956EEAEAB)]
                interface IHttpChallengeHeaderValue : IInspectable
                {
                    [propget] HRESULT Parameters([out] [retval] Windows.Foundation.Collections.IVector<Windows.Web.Http.Headers.HttpNameValueHeaderValue*>** value);
                    [propget] HRESULT Scheme([out] [retval] HSTRING* value);
                    [propget] HRESULT Token([out] [retval] HSTRING* value);
                }

                [contract(Windows.Foundation.UniversalApiContract, 1.0)]
                [exclusiveto(Windows.Web.Http.Headers.HttpChallengeHeaderValueCollection)]
                [uuid(CA9E5F81-AEE0-4353-A10B-E625BABD64C2)]
                interface IHttpChallengeHeaderValueCollection : IInspectable
                {
                    HRESULT ParseAdd([in] HSTRING input);
                    HRESULT TryParseAdd([in] HSTRING input, [out] [retval] boolean* result);
                }

                [contract(Windows.Foundation.UniversalApiContract, 1.0)]
                [exclusiveto(Windows.Web.Http.Headers.HttpChallengeHeaderValue)]
                [uuid(C452C451-D99C-40AA-9399-90EEB98FC613)]
                interface IHttpChallengeHeaderValueFactory : IInspectable
                {
                    HRESULT CreateFromScheme([in] HSTRING scheme, [out] [retval] Windows.Web.Http.Headers.HttpChallengeHeaderValue** value);
                    HRESULT CreateFromSchemeWithToken([in] HSTRING scheme, [in] HSTRING token, [out] [retval] Windows.Web.Http.Headers.HttpChallengeHeaderValue** value);
                }

                [contract(Windows.Foundation.UniversalApiContract, 1.0)]
                [exclusiveto(Windows.Web.Http.Headers.HttpChallengeHeaderValue)]
                [uuid(F3D38A72-FC01-4D01-A008-FCB7C459D635)]
                interface IHttpChallengeHeaderValueStatics : IInspectable
                {
                    HRESULT Parse([in] HSTRING input, [out] [retval] Windows.Web.Http.Headers.HttpChallengeHeaderValue** result);
                    HRESULT TryParse([in] HSTRING input, [out] Windows.Web.Http.Headers.HttpChallengeHeaderValue** challengeHeaderValue, [out] [retval] boolean* succeeded);
                }

                [contract(Windows.Foundation.UniversalApiContract, 1.0)]
                [exclusiveto(Windows.Web.Http.Headers.HttpConnectionOptionHeaderValue)]
                [uuid(CB4AF27A-4E90-45EB-8DCD-FD1408F4C44F)]
                interface IHttpConnectionOptionHeaderValue : IInspectable
                {
                    [propget] HRESULT Token([out] [retval] HSTRING* value);
                }

                [contract(Windows.Foundation.UniversalApiContract, 1.0)]
                [exclusiveto(Windows.Web.Http.Headers.HttpConnectionOptionHeaderValueCollection)]
                [uuid(E4F56C1D-5142-4E00-8E0F-019509337629)]
                interface IHttpConnectionOptionHeaderValueCollection : IInspectable
                {
                    HRESULT ParseAdd([in] HSTRING input);
                    HRESULT TryParseAdd([in] HSTRING input, [out] [retval] boolean* result);
                }

                [contract(Windows.Foundation.UniversalApiContract, 1.0)]
                [exclusiveto(Windows.Web.Http.Headers.HttpConnectionOptionHeaderValue)]
                [uuid(D93CCC1E-0B7D-4C3F-A58D-A2A1BDEABC0A)]
                interface IHttpConnectionOptionHeaderValueFactory : IInspectable
                {
                    HRESULT Create([in] HSTRING token, [out] [retval] Windows.Web.Http.Headers.HttpConnectionOptionHeaderValue** value);
                }

                [contract(Windows.Foundation.UniversalApiContract, 1.0)]
                [exclusiveto(Windows.Web.Http.Headers.HttpConnectionOptionHeaderValue)]
                [uuid(AAA75D37-A946-4B1F-85AF-48B68B3C50BD)]
                interface IHttpConnectionOptionHeaderValueStatics : IInspectable
                {
                    HRESULT Parse([in] HSTRING input, [out] [retval] Windows.Web.Http.Headers.HttpConnectionOptionHeaderValue** result);
                    HRESULT TryParse([in] HSTRING input, [out] Windows.Web.Http.Headers.HttpConnectionOptionHeaderValue** connectionOptionHeaderValue, [out] [retval] boolean* succeeded);
                }

                [contract(Windows.Foundation.UniversalApiContract, 1.0)]
                [exclusiveto(Windows.Web.Http.Headers.HttpContentCodingHeaderValue)]
                [uuid(BCF7F92A-9376-4D85-BCCC-9F4F9ACAB434)]
                interface IHttpContentCodingHeaderValue : IInspectable
                {
                    [propget] HRESULT ContentCoding([out] [retval] HSTRING* value);
                }

                [contract(Windows.Foundation.UniversalApiContract, 1.0)]
                [exclusiveto(Windows.Web.Http.Headers.HttpContentCodingHeaderValueCollection)]
                [uuid(7D221721-A6DB-436E-8E83-91596192819C)]
                interface IHttpContentCodingHeaderValueCollection : IInspectable
                {
                    HRESULT ParseAdd([in] HSTRING input);
                    HRESULT TryParseAdd([in] HSTRING input, [out] [retval] boolean* result);
                }

                [contract(Windows.Foundation.UniversalApiContract, 1.0)]
                [exclusiveto(Windows.Web.Http.Headers.HttpContentCodingHeaderValue)]
                [uuid(C53D2BD7-332B-4350-8510-2E67A2289A5A)]
                interface IHttpContentCodingHeaderValueFactory : IInspectable
                {
                    HRESULT Create([in] HSTRING contentCoding, [out] [retval] Windows.Web.Http.Headers.HttpContentCodingHeaderValue** value);
                }

                [contract(Windows.Foundation.UniversalApiContract, 1.0)]
                [exclusiveto(Windows.Web.Http.Headers.HttpContentCodingHeaderValue)]
                [uuid(94D8602E-F9BF-42F7-AA46-ED272A41E212)]
                interface IHttpContentCodingHeaderValueStatics : IInspectable
                {
                    HRESULT Parse([in] HSTRING input, [out] [retval] Windows.Web.Http.Headers.HttpContentCodingHeaderValue** result);
                    HRESULT TryParse([in] HSTRING input, [out] Windows.Web.Http.Headers.HttpContentCodingHeaderValue** contentCodingHeaderValue, [out] [retval] boolean* succeeded);
                }

                [contract(Windows.Foundation.UniversalApiContract, 1.0)]
                [exclusiveto(Windows.Web.Http.Headers.HttpContentCodingWithQualityHeaderValue)]
                [uuid(94531CD5-8B13-4D73-8651-F76B38F88495)]
                interface IHttpContentCodingWithQualityHeaderValue : IInspectable
                {
                    [propget] HRESULT ContentCoding([out] [retval] HSTRING* value);
                    [propget] HRESULT Quality([out] [retval] Windows.Foundation.IReference<DOUBLE>** value);
                }

                [contract(Windows.Foundation.UniversalApiContract, 1.0)]
                [exclusiveto(Windows.Web.Http.Headers.HttpContentCodingWithQualityHeaderValueCollection)]
                [uuid(7C0D753E-E899-4378-B5C8-412D820711CC)]
                interface IHttpContentCodingWithQualityHeaderValueCollection : IInspectable
                {
                    HRESULT ParseAdd([in] HSTRING input);
                    HRESULT TryParseAdd([in] HSTRING input, [out] [retval] boolean* result);
                }

                [contract(Windows.Foundation.UniversalApiContract, 1.0)]
                [exclusiveto(Windows.Web.Http.Headers.HttpContentCodingWithQualityHeaderValue)]
                [uuid(C45EEE1A-C553-46FC-ADE2-D75C1D53DF7B)]
                interface IHttpContentCodingWithQualityHeaderValueFactory : IInspectable
                {
                    HRESULT CreateFromValue([in] HSTRING contentCoding, [out] [retval] Windows.Web.Http.Headers.HttpContentCodingWithQualityHeaderValue** value);
                    HRESULT CreateFromValueWithQuality([in] HSTRING contentCoding, [in] DOUBLE quality, [out] [retval] Windows.Web.Http.Headers.HttpContentCodingWithQualityHeaderValue** value);
                }

                [contract(Windows.Foundation.UniversalApiContract, 1.0)]
                [exclusiveto(Windows.Web.Http.Headers.HttpContentCodingWithQualityHeaderValue)]
                [uuid(E8C9357C-8F89-4801-8E75-4C9ABFC3DE71)]
                interface IHttpContentCodingWithQualityHeaderValueStatics : IInspectable
                {
                    HRESULT Parse([in] HSTRING input, [out] [retval] Windows.Web.Http.Headers.HttpContentCodingWithQualityHeaderValue** result);
                    HRESULT TryParse([in] HSTRING input, [out] Windows.Web.Http.Headers.HttpContentCodingWithQualityHeaderValue** contentCodingWithQualityHeaderValue, [out] [retval] boolean* succeeded);
                }

                [contract(Windows.Foundation.UniversalApiContract, 1.0)]
                [exclusiveto(Windows.Web.Http.Headers.HttpContentDispositionHeaderValue)]
                [uuid(F2A2EEDC-2629-4B49-9908-96A168E9365E)]
                interface IHttpContentDispositionHeaderValue : IInspectable
                {
                    [propget] HRESULT DispositionType([out] [retval] HSTRING* value);
                    [propput] HRESULT DispositionType([in] HSTRING value);
                    [propget] HRESULT FileName([out] [retval] HSTRING* value);
                    [propput] HRESULT FileName([in] HSTRING value);
                    [propget] HRESULT FileNameStar([out] [retval] HSTRING* value);
                    [propput] HRESULT FileNameStar([in] HSTRING value);
                    [propget] HRESULT Name([out] [retval] HSTRING* value);
                    [propput] HRESULT Name([in] HSTRING value);
                    [propget] HRESULT Parameters([out] [retval] Windows.Foundation.Collections.IVector<Windows.Web.Http.Headers.HttpNameValueHeaderValue*>** value);
                    [propget] HRESULT Size([out] [retval] Windows.Foundation.IReference<UINT64>** value);
                    [propput] HRESULT Size([in] Windows.Foundation.IReference<UINT64>* value);
                }

                [contract(Windows.Foundation.UniversalApiContract, 1.0)]
                [exclusiveto(Windows.Web.Http.Headers.HttpContentDispositionHeaderValue)]
                [uuid(9915BBC4-456C-4E81-8295-B2AB3CBCF545)]
                interface IHttpContentDispositionHeaderValueFactory : IInspectable
                {
                    HRESULT Create([in] HSTRING dispositionType, [out] [retval] Windows.Web.Http.Headers.HttpContentDispositionHeaderValue** value);
                }

                [contract(Windows.Foundation.UniversalApiContract, 1.0)]
                [exclusiveto(Windows.Web.Http.Headers.HttpContentDispositionHeaderValue)]
                [uuid(29C56067-5A37-46E4-B074-C5177D69CA66)]
                interface IHttpContentDispositionHeaderValueStatics : IInspectable
                {
                    HRESULT Parse([in] HSTRING input, [out] [retval] Windows.Web.Http.Headers.HttpContentDispositionHeaderValue** result);
                    HRESULT TryParse([in] HSTRING input, [out] Windows.Web.Http.Headers.HttpContentDispositionHeaderValue** contentDispositionHeaderValue, [out] [retval] boolean* succeeded);
                }

                [contract(Windows.Foundation.UniversalApiContract, 1.0)]
                [exclusiveto(Windows.Web.Http.Headers.HttpContentHeaderCollection)]
                [uuid(40612A44-47AE-4B7E-9124-69628B64AA18)]
                interface IHttpContentHeaderCollection : IInspectable
                {
                    [propget] HRESULT ContentDisposition([out] [retval] Windows.Web.Http.Headers.HttpContentDispositionHeaderValue** value);
                    [propput] HRESULT ContentDisposition([in] Windows.Web.Http.Headers.HttpContentDispositionHeaderValue* value);
                    [propget] HRESULT ContentEncoding([out] [retval] Windows.Web.Http.Headers.HttpContentCodingHeaderValueCollection** value);
                    [propget] HRESULT ContentLanguage([out] [retval] Windows.Web.Http.Headers.HttpLanguageHeaderValueCollection** value);
                    [propget] HRESULT ContentLength([out] [retval] Windows.Foundation.IReference<UINT64>** value);
                    [propput] HRESULT ContentLength([in] Windows.Foundation.IReference<UINT64>* value);
                    [propget] HRESULT ContentLocation([out] [retval] Windows.Foundation.Uri** value);
                    [propput] HRESULT ContentLocation([in] Windows.Foundation.Uri* value);
                    [propget] HRESULT ContentMD5([out] [retval] Windows.Storage.Streams.IBuffer** value);
                    [propput] HRESULT ContentMD5([in] Windows.Storage.Streams.IBuffer* value);
                    [propget] HRESULT ContentRange([out] [retval] Windows.Web.Http.Headers.HttpContentRangeHeaderValue** value);
                    [propput] HRESULT ContentRange([in] Windows.Web.Http.Headers.HttpContentRangeHeaderValue* value);
                    [propget] HRESULT ContentType([out] [retval] Windows.Web.Http.Headers.HttpMediaTypeHeaderValue** value);
                    [propput] HRESULT ContentType([in] Windows.Web.Http.Headers.HttpMediaTypeHeaderValue* value);
                    [propget] HRESULT Expires([out] [retval] Windows.Foundation.IReference<Windows.Foundation.DateTime>** value);
                    [propput] HRESULT Expires([in] Windows.Foundation.IReference<Windows.Foundation.DateTime>* value);
                    [propget] HRESULT LastModified([out] [retval] Windows.Foundation.IReference<Windows.Foundation.DateTime>** value);
                    [propput] HRESULT LastModified([in] Windows.Foundation.IReference<Windows.Foundation.DateTime>* value);
                    HRESULT Append([in] HSTRING name, [in] HSTRING value);
                    HRESULT TryAppendWithoutValidation([in] HSTRING name, [in] HSTRING value, [out] [retval] boolean* result);
                }

                [contract(Windows.Foundation.UniversalApiContract, 1.0)]
                [exclusiveto(Windows.Web.Http.Headers.HttpContentRangeHeaderValue)]
                [uuid(04D967D3-A4F6-495C-9530-8579FCBA8AA9)]
                interface IHttpContentRangeHeaderValue : IInspectable
                {
                    [propget] HRESULT FirstBytePosition([out] [retval] Windows.Foundation.IReference<UINT64>** value);
                    [propget] HRESULT LastBytePosition([out] [retval] Windows.Foundation.IReference<UINT64>** value);
                    [propget] HRESULT Length([out] [retval] Windows.Foundation.IReference<UINT64>** value);
                    [propget] HRESULT Unit([out] [retval] HSTRING* value);
                    [propput] HRESULT Unit([in] HSTRING value);
                }

                [contract(Windows.Foundation.UniversalApiContract, 1.0)]
                [exclusiveto(Windows.Web.Http.Headers.HttpContentRangeHeaderValue)]
                [uuid(3F5BD691-A03C-4456-9A6F-EF27ECD03CAE)]
                interface IHttpContentRangeHeaderValueFactory : IInspectable
                {
                    HRESULT CreateFromLength([in] UINT64 length, [out] [retval] Windows.Web.Http.Headers.HttpContentRangeHeaderValue** value);
                    HRESULT CreateFromRange([in] UINT64 from, [in] UINT64 to, [out] [retval] Windows.Web.Http.Headers.HttpContentRangeHeaderValue** value);
                    HRESULT CreateFromRangeWithLength([in] UINT64 from, [in] UINT64 to, [in] UINT64 length, [out] [retval] Windows.Web.Http.Headers.HttpContentRangeHeaderValue** value);
                }

                [contract(Windows.Foundation.UniversalApiContract, 1.0)]
                [exclusiveto(Windows.Web.Http.Headers.HttpContentRangeHeaderValue)]
                [uuid(80A346CA-174C-4FAE-821C-134CD294AA38)]
                interface IHttpContentRangeHeaderValueStatics : IInspectable
                {
                    HRESULT Parse([in] HSTRING input, [out] [retval] Windows.Web.Http.Headers.HttpContentRangeHeaderValue** result);
                    HRESULT TryParse([in] HSTRING input, [out] Windows.Web.Http.Headers.HttpContentRangeHeaderValue** contentRangeHeaderValue, [out] [retval] boolean* succeeded);
                }

                [contract(Windows.Foundation.UniversalApiContract, 1.0)]
                [exclusiveto(Windows.Web.Http.Headers.HttpCookiePairHeaderValue)]
                [uuid(CBD46217-4B29-412B-BD90-B3D814AB8E1B)]
                interface IHttpCookiePairHeaderValue : IInspectable
                {
                    [propget] HRESULT Name([out] [retval] HSTRING* value);
                    [propget] HRESULT Value([out] [retval] HSTRING* value);
                    [propput] HRESULT Value([in] HSTRING value);
                }

                [contract(Windows.Foundation.UniversalApiContract, 1.0)]
                [exclusiveto(Windows.Web.Http.Headers.HttpCookiePairHeaderValueCollection)]
                [uuid(F3F44350-581E-4ECC-9F59-E507D04F06E6)]
                interface IHttpCookiePairHeaderValueCollection : IInspectable
                {
                    HRESULT ParseAdd([in] HSTRING input);
                    HRESULT TryParseAdd([in] HSTRING input, [out] [retval] boolean* result);
                }

                [contract(Windows.Foundation.UniversalApiContract, 1.0)]
                [exclusiveto(Windows.Web.Http.Headers.HttpCookiePairHeaderValue)]
                [uuid(635E326F-146F-4F56-AA21-2CB7D6D58B1E)]
                interface IHttpCookiePairHeaderValueFactory : IInspectable
                {
                    HRESULT CreateFromName([in] HSTRING name, [out] [retval] Windows.Web.Http.Headers.HttpCookiePairHeaderValue** value);
                    HRESULT CreateFromNameWithValue([in] HSTRING name, [in] HSTRING value, [out] [retval] Windows.Web.Http.Headers.HttpCookiePairHeaderValue** cookiePairHeaderValue);
                }

                [contract(Windows.Foundation.UniversalApiContract, 1.0)]
                [exclusiveto(Windows.Web.Http.Headers.HttpCookiePairHeaderValue)]
                [uuid(6E866D48-06AF-4462-8158-99388D5DCA81)]
                interface IHttpCookiePairHeaderValueStatics : IInspectable
                {
                    HRESULT Parse([in] HSTRING input, [out] [retval] Windows.Web.Http.Headers.HttpCookiePairHeaderValue** result);
                    HRESULT TryParse([in] HSTRING input, [out] Windows.Web.Http.Headers.HttpCookiePairHeaderValue** cookiePairHeaderValue, [out] [retval] boolean* succeeded);
                }

                [contract(Windows.Foundation.UniversalApiContract, 1.0)]
                [exclusiveto(Windows.Web.Http.Headers.HttpCredentialsHeaderValue)]
                [uuid(C34CC3CB-542E-4177-A6C7-B674CE193FBF)]
                interface IHttpCredentialsHeaderValue : IInspectable
                {
                    [propget] HRESULT Parameters([out] [retval] Windows.Foundation.Collections.IVector<Windows.Web.Http.Headers.HttpNameValueHeaderValue*>** value);
                    [propget] HRESULT Scheme([out] [retval] HSTRING* value);
                    [propget] HRESULT Token([out] [retval] HSTRING* value);
                }

                [contract(Windows.Foundation.UniversalApiContract, 1.0)]
                [exclusiveto(Windows.Web.Http.Headers.HttpCredentialsHeaderValue)]
                [uuid(F21D9E91-4D1C-4182-BFD1-34470A62F950)]
                interface IHttpCredentialsHeaderValueFactory : IInspectable
                {
                    HRESULT CreateFromScheme([in] HSTRING scheme, [out] [retval] Windows.Web.Http.Headers.HttpCredentialsHeaderValue** value);
                    HRESULT CreateFromSchemeWithToken([in] HSTRING scheme, [in] HSTRING token, [out] [retval] Windows.Web.Http.Headers.HttpCredentialsHeaderValue** value);
                }

                [contract(Windows.Foundation.UniversalApiContract, 1.0)]
                [exclusiveto(Windows.Web.Http.Headers.HttpCredentialsHeaderValue)]
                [uuid(A69B2BE6-CE8C-4443-A35A-1B727B131036)]
                interface IHttpCredentialsHeaderValueStatics : IInspectable
                {
                    HRESULT Parse([in] HSTRING input, [out] [retval] Windows.Web.Http.Headers.HttpCredentialsHeaderValue** result);
                    HRESULT TryParse([in] HSTRING input, [out] Windows.Web.Http.Headers.HttpCredentialsHeaderValue** credentialsHeaderValue, [out] [retval] boolean* succeeded);
                }

                [contract(Windows.Foundation.UniversalApiContract, 1.0)]
                [exclusiveto(Windows.Web.Http.Headers.HttpDateOrDeltaHeaderValue)]
                [uuid(EAFCAA6A-C4DC-49E2-A27D-043ADF5867A3)]
                interface IHttpDateOrDeltaHeaderValue : IInspectable
                {
                    [propget] HRESULT Date([out] [retval] Windows.Foundation.IReference<Windows.Foundation.DateTime>** value);
                    [propget] HRESULT Delta([out] [retval] Windows.Foundation.IReference<Windows.Foundation.TimeSpan>** value);
                }

                [contract(Windows.Foundation.UniversalApiContract, 1.0)]
                [exclusiveto(Windows.Web.Http.Headers.HttpDateOrDeltaHeaderValue)]
                [uuid(7C2659A8-6672-4E90-9A9A-F39766F7F576)]
                interface IHttpDateOrDeltaHeaderValueStatics : IInspectable
                {
                    HRESULT Parse([in] HSTRING input, [out] [retval] Windows.Web.Http.Headers.HttpDateOrDeltaHeaderValue** result);
                    HRESULT TryParse([in] HSTRING input, [out] Windows.Web.Http.Headers.HttpDateOrDeltaHeaderValue** dateOrDeltaHeaderValue, [out] [retval] boolean* succeeded);
                }

                [contract(Windows.Foundation.UniversalApiContract, 1.0)]
                [exclusiveto(Windows.Web.Http.Headers.HttpExpectationHeaderValue)]
                [uuid(4CE585CD-3A99-43AF-A2E6-EC232FEA9658)]
                interface IHttpExpectationHeaderValue : IInspectable
                {
                    [propget] HRESULT Name([out] [retval] HSTRING* value);
                    [propget] HRESULT Value([out] [retval] HSTRING* value);
                    [propput] HRESULT Value([in] HSTRING value);
                    [propget] HRESULT Parameters([out] [retval] Windows.Foundation.Collections.IVector<Windows.Web.Http.Headers.HttpNameValueHeaderValue*>** value);
                }

                [contract(Windows.Foundation.UniversalApiContract, 1.0)]
                [exclusiveto(Windows.Web.Http.Headers.HttpExpectationHeaderValueCollection)]
                [uuid(E78521B3-A0E2-4AC4-9E66-79706CB9FD58)]
                interface IHttpExpectationHeaderValueCollection : IInspectable
                {
                    HRESULT ParseAdd([in] HSTRING input);
                    HRESULT TryParseAdd([in] HSTRING input, [out] [retval] boolean* result);
                }

                [contract(Windows.Foundation.UniversalApiContract, 1.0)]
                [exclusiveto(Windows.Web.Http.Headers.HttpExpectationHeaderValue)]
                [uuid(4EA275CB-D53E-4868-8856-1E21A5030DC0)]
                interface IHttpExpectationHeaderValueFactory : IInspectable
                {
                    HRESULT CreateFromName([in] HSTRING name, [out] [retval] Windows.Web.Http.Headers.HttpExpectationHeaderValue** value);
                    HRESULT CreateFromNameWithValue([in] HSTRING name, [in] HSTRING value, [out] [retval] Windows.Web.Http.Headers.HttpExpectationHeaderValue** expectationHeaderValue);
                }

                [contract(Windows.Foundation.UniversalApiContract, 1.0)]
                [exclusiveto(Windows.Web.Http.Headers.HttpExpectationHeaderValue)]
                [uuid(3019ABE2-CFE5-473B-A57F-FBA5B14EB257)]
                interface IHttpExpectationHeaderValueStatics : IInspectable
                {
                    HRESULT Parse([in] HSTRING input, [out] [retval] Windows.Web.Http.Headers.HttpExpectationHeaderValue** result);
                    HRESULT TryParse([in] HSTRING input, [out] Windows.Web.Http.Headers.HttpExpectationHeaderValue** expectationHeaderValue, [out] [retval] boolean* succeeded);
                }

                [contract(Windows.Foundation.UniversalApiContract, 1.0)]
                [exclusiveto(Windows.Web.Http.Headers.HttpLanguageHeaderValueCollection)]
                [uuid(9EBD7CA3-8219-44F6-9902-8C56DFD3340C)]
                interface IHttpLanguageHeaderValueCollection : IInspectable
                {
                    HRESULT ParseAdd([in] HSTRING input);
                    HRESULT TryParseAdd([in] HSTRING input, [out] [retval] boolean* result);
                }

                [contract(Windows.Foundation.UniversalApiContract, 1.0)]
                [exclusiveto(Windows.Web.Http.Headers.HttpLanguageRangeWithQualityHeaderValue)]
                [uuid(7256E102-0080-4DB4-A083-7DE7B2E5BA4C)]
                interface IHttpLanguageRangeWithQualityHeaderValue : IInspectable
                {
                    [propget] HRESULT LanguageRange([out] [retval] HSTRING* value);
                    [propget] HRESULT Quality([out] [retval] Windows.Foundation.IReference<DOUBLE>** value);
                }

                [contract(Windows.Foundation.UniversalApiContract, 1.0)]
                [exclusiveto(Windows.Web.Http.Headers.HttpLanguageRangeWithQualityHeaderValueCollection)]
                [uuid(885D5ABD-4B4F-480A-89CE-8AEDCEE6E3A0)]
                interface IHttpLanguageRangeWithQualityHeaderValueCollection : IInspectable
                {
                    HRESULT ParseAdd([in] HSTRING input);
                    HRESULT TryParseAdd([in] HSTRING input, [out] [retval] boolean* result);
                }

                [contract(Windows.Foundation.UniversalApiContract, 1.0)]
                [exclusiveto(Windows.Web.Http.Headers.HttpLanguageRangeWithQualityHeaderValue)]
                [uuid(7BB83970-780F-4C83-9FE4-DC3087F6BD55)]
                interface IHttpLanguageRangeWithQualityHeaderValueFactory : IInspectable
                {
                    HRESULT CreateFromLanguageRange([in] HSTRING languageRange, [out] [retval] Windows.Web.Http.Headers.HttpLanguageRangeWithQualityHeaderValue** value);
                    HRESULT CreateFromLanguageRangeWithQuality([in] HSTRING languageRange, [in] DOUBLE quality, [out] [retval] Windows.Web.Http.Headers.HttpLanguageRangeWithQualityHeaderValue** value);
                }

                [contract(Windows.Foundation.UniversalApiContract, 1.0)]
                [exclusiveto(Windows.Web.Http.Headers.HttpLanguageRangeWithQualityHeaderValue)]
                [uuid(2541E146-F308-46F5-B695-42F54024EC68)]
                interface IHttpLanguageRangeWithQualityHeaderValueStatics : IInspectable
                {
                    HRESULT Parse([in] HSTRING input, [out] [retval] Windows.Web.Http.Headers.HttpLanguageRangeWithQualityHeaderValue** result);
                    HRESULT TryParse([in] HSTRING input, [out] Windows.Web.Http.Headers.HttpLanguageRangeWithQualityHeaderValue** languageRangeWithQualityHeaderValue, [out] [retval] boolean* succeeded);
                }

                [contract(Windows.Foundation.UniversalApiContract, 1.0)]
                [exclusiveto(Windows.Web.Http.Headers.HttpMediaTypeHeaderValue)]
                [uuid(16B28533-E728-4FCB-BDB0-08A431A14844)]
                interface IHttpMediaTypeHeaderValue : IInspectable
                {
                    [propget] HRESULT CharSet([out] [retval] HSTRING* value);
                    [propput] HRESULT CharSet([in] HSTRING value);
                    [propget] HRESULT MediaType([out] [retval] HSTRING* value);
                    [propput] HRESULT MediaType([in] HSTRING value);
                    [propget] HRESULT Parameters([out] [retval] Windows.Foundation.Collections.IVector<Windows.Web.Http.Headers.HttpNameValueHeaderValue*>** value);
                }

                [contract(Windows.Foundation.UniversalApiContract, 1.0)]
                [exclusiveto(Windows.Web.Http.Headers.HttpMediaTypeHeaderValue)]
                [uuid(BED747A8-CD17-42DD-9367-AB9C5B56DD7D)]
                interface IHttpMediaTypeHeaderValueFactory : IInspectable
                {
                    HRESULT Create([in] HSTRING mediaType, [out] [retval] Windows.Web.Http.Headers.HttpMediaTypeHeaderValue** value);
                }

                [contract(Windows.Foundation.UniversalApiContract, 1.0)]
                [exclusiveto(Windows.Web.Http.Headers.HttpMediaTypeHeaderValue)]
                [uuid(E04D83DF-1D41-4D8C-A2DE-6FD2ED87399B)]
                interface IHttpMediaTypeHeaderValueStatics : IInspectable
                {
                    HRESULT Parse([in] HSTRING input, [out] [retval] Windows.Web.Http.Headers.HttpMediaTypeHeaderValue** result);
                    HRESULT TryParse([in] HSTRING input, [out] Windows.Web.Http.Headers.HttpMediaTypeHeaderValue** mediaTypeHeaderValue, [out] [retval] boolean* succeeded);
                }

                [contract(Windows.Foundation.UniversalApiContract, 1.0)]
                [exclusiveto(Windows.Web.Http.Headers.HttpMediaTypeWithQualityHeaderValue)]
                [uuid(188D5E32-76BE-44A0-B1CD-2074BDED2DDE)]
                interface IHttpMediaTypeWithQualityHeaderValue : IInspectable
                {
                    [propget] HRESULT CharSet([out] [retval] HSTRING* value);
                    [propput] HRESULT CharSet([in] HSTRING value);
                    [propget] HRESULT MediaType([out] [retval] HSTRING* value);
                    [propput] HRESULT MediaType([in] HSTRING value);
                    [propget] HRESULT Parameters([out] [retval] Windows.Foundation.Collections.IVector<Windows.Web.Http.Headers.HttpNameValueHeaderValue*>** value);
                    [propget] HRESULT Quality([out] [retval] Windows.Foundation.IReference<DOUBLE>** value);
                    [propput] HRESULT Quality([in] Windows.Foundation.IReference<DOUBLE>* value);
                }

                [contract(Windows.Foundation.UniversalApiContract, 1.0)]
                [exclusiveto(Windows.Web.Http.Headers.HttpMediaTypeWithQualityHeaderValueCollection)]
                [uuid(3C0C6B73-1342-4587-A056-18D02FF67165)]
                interface IHttpMediaTypeWithQualityHeaderValueCollection : IInspectable
                {
                    HRESULT ParseAdd([in] HSTRING input);
                    HRESULT TryParseAdd([in] HSTRING input, [out] [retval] boolean* result);
                }

                [contract(Windows.Foundation.UniversalApiContract, 1.0)]
                [exclusiveto(Windows.Web.Http.Headers.HttpMediaTypeWithQualityHeaderValue)]
                [uuid(4C6D20F4-9457-44E6-A323-D122B958780B)]
                interface IHttpMediaTypeWithQualityHeaderValueFactory : IInspectable
                {
                    HRESULT CreateFromMediaType([in] HSTRING mediaType, [out] [retval] Windows.Web.Http.Headers.HttpMediaTypeWithQualityHeaderValue** value);
                    HRESULT CreateFromMediaTypeWithQuality([in] HSTRING mediaType, [in] DOUBLE quality, [out] [retval] Windows.Web.Http.Headers.HttpMediaTypeWithQualityHeaderValue** value);
                }

                [contract(Windows.Foundation.UniversalApiContract, 1.0)]
                [exclusiveto(Windows.Web.Http.Headers.HttpMediaTypeWithQualityHeaderValue)]
                [uuid(5B070CD9-B560-4FC8-9835-7E6C0A657B24)]
                interface IHttpMediaTypeWithQualityHeaderValueStatics : IInspectable
                {
                    HRESULT Parse([in] HSTRING input, [out] [retval] Windows.Web.Http.Headers.HttpMediaTypeWithQualityHeaderValue** result);
                    HRESULT TryParse([in] HSTRING input, [out] Windows.Web.Http.Headers.HttpMediaTypeWithQualityHeaderValue** mediaTypeWithQualityHeaderValue, [out] [retval] boolean* succeeded);
                }

                [contract(Windows.Foundation.UniversalApiContract, 1.0)]
                [exclusiveto(Windows.Web.Http.Headers.HttpMethodHeaderValueCollection)]
                [uuid(43BC3FF4-6119-4ADF-938C-34BFFFCF92ED)]
                interface IHttpMethodHeaderValueCollection : IInspectable
                {
                    HRESULT ParseAdd([in] HSTRING input);
                    HRESULT TryParseAdd([in] HSTRING input, [out] [retval] boolean* result);
                }

                [contract(Windows.Foundation.UniversalApiContract, 1.0)]
                [exclusiveto(Windows.Web.Http.Headers.HttpNameValueHeaderValue)]
                [uuid(D8BA7463-5B9A-4D1B-93F9-AA5B44ECFDDF)]
                interface IHttpNameValueHeaderValue : IInspectable
                {
                    [propget] HRESULT Name([out] [retval] HSTRING* value);
                    [propget] HRESULT Value([out] [retval] HSTRING* value);
                    [propput] HRESULT Value([in] HSTRING value);
                }

                [contract(Windows.Foundation.UniversalApiContract, 1.0)]
                [exclusiveto(Windows.Web.Http.Headers.HttpNameValueHeaderValue)]
                [uuid(770E2267-CBF8-4736-A925-93FBE10C7CA8)]
                interface IHttpNameValueHeaderValueFactory : IInspectable
                {
                    HRESULT CreateFromName([in] HSTRING name, [out] [retval] Windows.Web.Http.Headers.HttpNameValueHeaderValue** value);
                    HRESULT CreateFromNameWithValue([in] HSTRING name, [in] HSTRING value, [out] [retval] Windows.Web.Http.Headers.HttpNameValueHeaderValue** nameValueHeaderValue);
                }

                [contract(Windows.Foundation.UniversalApiContract, 1.0)]
                [exclusiveto(Windows.Web.Http.Headers.HttpNameValueHeaderValue)]
                [uuid(FFD4030F-1130-4152-8659-256909A9D115)]
                interface IHttpNameValueHeaderValueStatics : IInspectable
                {
                    HRESULT Parse([in] HSTRING input, [out] [retval] Windows.Web.Http.Headers.HttpNameValueHeaderValue** result);
                    HRESULT TryParse([in] HSTRING input, [out] Windows.Web.Http.Headers.HttpNameValueHeaderValue** nameValueHeaderValue, [out] [retval] boolean* succeeded);
                }

                [contract(Windows.Foundation.UniversalApiContract, 1.0)]
                [exclusiveto(Windows.Web.Http.Headers.HttpProductHeaderValue)]
                [uuid(F4FEEE03-EBD4-4160-B9FF-807C5183B6E6)]
                interface IHttpProductHeaderValue : IInspectable
                {
                    [propget] HRESULT Name([out] [retval] HSTRING* value);
                    [propget] HRESULT Version([out] [retval] HSTRING* value);
                }

                [contract(Windows.Foundation.UniversalApiContract, 1.0)]
                [exclusiveto(Windows.Web.Http.Headers.HttpProductHeaderValue)]
                [uuid(611AA4F5-82BC-42FB-977B-DC00536E5E86)]
                interface IHttpProductHeaderValueFactory : IInspectable
                {
                    HRESULT CreateFromName([in] HSTRING productName, [out] [retval] Windows.Web.Http.Headers.HttpProductHeaderValue** value);
                    HRESULT CreateFromNameWithVersion([in] HSTRING productName, [in] HSTRING productVersion, [out] [retval] Windows.Web.Http.Headers.HttpProductHeaderValue** value);
                }

                [contract(Windows.Foundation.UniversalApiContract, 1.0)]
                [exclusiveto(Windows.Web.Http.Headers.HttpProductHeaderValue)]
                [uuid(90C33E29-BEFC-4337-BE62-49F097975F53)]
                interface IHttpProductHeaderValueStatics : IInspectable
                {
                    HRESULT Parse([in] HSTRING input, [out] [retval] Windows.Web.Http.Headers.HttpProductHeaderValue** result);
                    HRESULT TryParse([in] HSTRING input, [out] Windows.Web.Http.Headers.HttpProductHeaderValue** productHeaderValue, [out] [retval] boolean* succeeded);
                }

                [contract(Windows.Foundation.UniversalApiContract, 1.0)]
                [exclusiveto(Windows.Web.Http.Headers.HttpProductInfoHeaderValue)]
                [uuid(1B1A8732-4C35-486A-966F-646489198E4D)]
                interface IHttpProductInfoHeaderValue : IInspectable
                {
                    [propget] HRESULT Product([out] [retval] Windows.Web.Http.Headers.HttpProductHeaderValue** value);
                    [propget] HRESULT Comment([out] [retval] HSTRING* value);
                }

                [contract(Windows.Foundation.UniversalApiContract, 1.0)]
                [exclusiveto(Windows.Web.Http.Headers.HttpProductInfoHeaderValueCollection)]
                [uuid(877DF74A-D69B-44F8-AD4F-453AF9C42ED0)]
                interface IHttpProductInfoHeaderValueCollection : IInspectable
                {
                    HRESULT ParseAdd([in] HSTRING input);
                    HRESULT TryParseAdd([in] HSTRING input, [out] [retval] boolean* result);
                }

                [contract(Windows.Foundation.UniversalApiContract, 1.0)]
                [exclusiveto(Windows.Web.Http.Headers.HttpProductInfoHeaderValue)]
                [uuid(24220FBE-EABE-4464-B460-EC010B7C41E2)]
                interface IHttpProductInfoHeaderValueFactory : IInspectable
                {
                    HRESULT CreateFromComment([in] HSTRING productComment, [out] [retval] Windows.Web.Http.Headers.HttpProductInfoHeaderValue** value);
                    HRESULT CreateFromNameWithVersion([in] HSTRING productName, [in] HSTRING productVersion, [out] [retval] Windows.Web.Http.Headers.HttpProductInfoHeaderValue** value);
                }

                [contract(Windows.Foundation.UniversalApiContract, 1.0)]
                [exclusiveto(Windows.Web.Http.Headers.HttpProductInfoHeaderValue)]
                [uuid(DB7FD857-327A-4E73-81E5-7059A302B042)]
                interface IHttpProductInfoHeaderValueStatics : IInspectable
                {
                    HRESULT Parse([in] HSTRING input, [out] [retval] Windows.Web.Http.Headers.HttpProductInfoHeaderValue** result);
                    HRESULT TryParse([in] HSTRING input, [out] Windows.Web.Http.Headers.HttpProductInfoHeaderValue** productInfoHeaderValue, [out] [retval] boolean* succeeded);
                }

                [contract(Windows.Foundation.UniversalApiContract, 1.0)]
                [exclusiveto(Windows.Web.Http.Headers.HttpRequestHeaderCollection)]
                [uuid(AF40329B-B544-469B-86B9-AC3D466FEA36)]
                interface IHttpRequestHeaderCollection : IInspectable
                {
                    [propget] HRESULT Accept([out] [retval] Windows.Web.Http.Headers.HttpMediaTypeWithQualityHeaderValueCollection** value);
                    [propget] HRESULT AcceptEncoding([out] [retval] Windows.Web.Http.Headers.HttpContentCodingWithQualityHeaderValueCollection** value);
                    [propget] HRESULT AcceptLanguage([out] [retval] Windows.Web.Http.Headers.HttpLanguageRangeWithQualityHeaderValueCollection** value);
                    [propget] HRESULT Authorization([out] [retval] Windows.Web.Http.Headers.HttpCredentialsHeaderValue** value);
                    [propput] HRESULT Authorization([in] Windows.Web.Http.Headers.HttpCredentialsHeaderValue* value);
                    [propget] HRESULT CacheControl([out] [retval] Windows.Web.Http.Headers.HttpCacheDirectiveHeaderValueCollection** value);
                    [propget] HRESULT Connection([out] [retval] Windows.Web.Http.Headers.HttpConnectionOptionHeaderValueCollection** value);
                    [propget] HRESULT Cookie([out] [retval] Windows.Web.Http.Headers.HttpCookiePairHeaderValueCollection** value);
                    [propget] HRESULT Date([out] [retval] Windows.Foundation.IReference<Windows.Foundation.DateTime>** value);
                    [propput] HRESULT Date([in] Windows.Foundation.IReference<Windows.Foundation.DateTime>* value);
                    [propget] HRESULT Expect([out] [retval] Windows.Web.Http.Headers.HttpExpectationHeaderValueCollection** value);
                    [propget] HRESULT From([out] [retval] HSTRING* value);
                    [propput] HRESULT From([in] HSTRING value);
                    [propget] HRESULT Host([out] [retval] Windows.Networking.HostName** value);
                    [propput] HRESULT Host([in] Windows.Networking.HostName* value);
                    [propget] HRESULT IfModifiedSince([out] [retval] Windows.Foundation.IReference<Windows.Foundation.DateTime>** value);
                    [propput] HRESULT IfModifiedSince([in] Windows.Foundation.IReference<Windows.Foundation.DateTime>* value);
                    [propget] HRESULT IfUnmodifiedSince([out] [retval] Windows.Foundation.IReference<Windows.Foundation.DateTime>** value);
                    [propput] HRESULT IfUnmodifiedSince([in] Windows.Foundation.IReference<Windows.Foundation.DateTime>* value);
                    [propget] HRESULT MaxForwards([out] [retval] Windows.Foundation.IReference<UINT32>** value);
                    [propput] HRESULT MaxForwards([in] Windows.Foundation.IReference<UINT32>* value);
                    [propget] HRESULT ProxyAuthorization([out] [retval] Windows.Web.Http.Headers.HttpCredentialsHeaderValue** value);
                    [propput] HRESULT ProxyAuthorization([in] Windows.Web.Http.Headers.HttpCredentialsHeaderValue* value);
                    [propget] HRESULT Referer([out] [retval] Windows.Foundation.Uri** value);
                    [propput] HRESULT Referer([in] Windows.Foundation.Uri* value);
                    [propget] HRESULT TransferEncoding([out] [retval] Windows.Web.Http.Headers.HttpTransferCodingHeaderValueCollection** value);
                    [propget] HRESULT UserAgent([out] [retval] Windows.Web.Http.Headers.HttpProductInfoHeaderValueCollection** value);
                    HRESULT Append([in] HSTRING name, [in] HSTRING value);
                    HRESULT TryAppendWithoutValidation([in] HSTRING name, [in] HSTRING value, [out] [retval] boolean* result);
                }

                [contract(Windows.Foundation.UniversalApiContract, 1.0)]
                [exclusiveto(Windows.Web.Http.Headers.HttpResponseHeaderCollection)]
                [uuid(7A990969-FA3F-41ED-AAC6-BF957975C16B)]
                interface IHttpResponseHeaderCollection : IInspectable
                {
                    [propget] HRESULT Age([out] [retval] Windows.Foundation.IReference<Windows.Foundation.TimeSpan>** value);
                    [propput] HRESULT Age([in] Windows.Foundation.IReference<Windows.Foundation.TimeSpan>* value);
                    [propget] HRESULT Allow([out] [retval] Windows.Web.Http.Headers.HttpMethodHeaderValueCollection** value);
                    [propget] HRESULT CacheControl([out] [retval] Windows.Web.Http.Headers.HttpCacheDirectiveHeaderValueCollection** value);
                    [propget] HRESULT Connection([out] [retval] Windows.Web.Http.Headers.HttpConnectionOptionHeaderValueCollection** value);
                    [propget] HRESULT Date([out] [retval] Windows.Foundation.IReference<Windows.Foundation.DateTime>** value);
                    [propput] HRESULT Date([in] Windows.Foundation.IReference<Windows.Foundation.DateTime>* value);
                    [propget] HRESULT Location([out] [retval] Windows.Foundation.Uri** value);
                    [propput] HRESULT Location([in] Windows.Foundation.Uri* value);
                    [propget] HRESULT ProxyAuthenticate([out] [retval] Windows.Web.Http.Headers.HttpChallengeHeaderValueCollection** value);
                    [propget] HRESULT RetryAfter([out] [retval] Windows.Web.Http.Headers.HttpDateOrDeltaHeaderValue** value);
                    [propput] HRESULT RetryAfter([in] Windows.Web.Http.Headers.HttpDateOrDeltaHeaderValue* value);
                    [propget] HRESULT TransferEncoding([out] [retval] Windows.Web.Http.Headers.HttpTransferCodingHeaderValueCollection** value);
                    [propget] HRESULT WwwAuthenticate([out] [retval] Windows.Web.Http.Headers.HttpChallengeHeaderValueCollection** value);
                    HRESULT Append([in] HSTRING name, [in] HSTRING value);
                    HRESULT TryAppendWithoutValidation([in] HSTRING name, [in] HSTRING value, [out] [retval] boolean* result);
                }

                [contract(Windows.Foundation.UniversalApiContract, 1.0)]
                [exclusiveto(Windows.Web.Http.Headers.HttpTransferCodingHeaderValue)]
                [uuid(436F32F9-3DED-42BD-B38A-5496A2511CE6)]
                interface IHttpTransferCodingHeaderValue : IInspectable
                {
                    [propget] HRESULT Parameters([out] [retval] Windows.Foundation.Collections.IVector<Windows.Web.Http.Headers.HttpNameValueHeaderValue*>** value);
                    [propget] HRESULT Value([out] [retval] HSTRING* value);
                }

                [contract(Windows.Foundation.UniversalApiContract, 1.0)]
                [exclusiveto(Windows.Web.Http.Headers.HttpTransferCodingHeaderValueCollection)]
                [uuid(202C8C34-2C03-49B8-9665-73E27CB2FC79)]
                interface IHttpTransferCodingHeaderValueCollection : IInspectable
                {
                    HRESULT ParseAdd([in] HSTRING input);
                    HRESULT TryParseAdd([in] HSTRING input, [out] [retval] boolean* result);
                }

                [contract(Windows.Foundation.UniversalApiContract, 1.0)]
                [exclusiveto(Windows.Web.Http.Headers.HttpTransferCodingHeaderValue)]
                [uuid(BB62DFFC-E361-4F08-8E4F-C9E723DE703B)]
                interface IHttpTransferCodingHeaderValueFactory : IInspectable
                {
                    HRESULT Create([in] HSTRING input, [out] [retval] Windows.Web.Http.Headers.HttpTransferCodingHeaderValue** value);
                }

                [contract(Windows.Foundation.UniversalApiContract, 1.0)]
                [exclusiveto(Windows.Web.Http.Headers.HttpTransferCodingHeaderValue)]
                [uuid(6AB8892A-1A98-4D32-A906-7470A9875CE5)]
                interface IHttpTransferCodingHeaderValueStatics : IInspectable
                {
                    HRESULT Parse([in] HSTRING input, [out] [retval] Windows.Web.Http.Headers.HttpTransferCodingHeaderValue** result);
                    HRESULT TryParse([in] HSTRING input, [out] Windows.Web.Http.Headers.HttpTransferCodingHeaderValue** transferCodingHeaderValue, [out] [retval] boolean* succeeded);
                }

                [contract(Windows.Foundation.UniversalApiContract, 1.0)]
                [marshaling_behavior(agile)]
                runtimeclass HttpCacheDirectiveHeaderValueCollection
                {
                    [default] interface Windows.Web.Http.Headers.IHttpCacheDirectiveHeaderValueCollection;
                    interface Windows.Foundation.Collections.IVector<Windows.Web.Http.Headers.HttpNameValueHeaderValue*>;
                    interface Windows.Foundation.Collections.IIterable<Windows.Web.Http.Headers.HttpNameValueHeaderValue*>;
                    interface Windows.Foundation.IStringable;
                }

                [activatable(Windows.Web.Http.Headers.IHttpChallengeHeaderValueFactory, Windows.Foundation.UniversalApiContract, 1.0)]
                [contract(Windows.Foundation.UniversalApiContract, 1.0)]
                [marshaling_behavior(agile)]
                [static(Windows.Web.Http.Headers.IHttpChallengeHeaderValueStatics, Windows.Foundation.UniversalApiContract, 1.0)]
                [threading(both)]
                runtimeclass HttpChallengeHeaderValue
                {
                    [default] interface Windows.Web.Http.Headers.IHttpChallengeHeaderValue;
                    interface Windows.Foundation.IStringable;
                }

                [contract(Windows.Foundation.UniversalApiContract, 1.0)]
                [marshaling_behavior(agile)]
                runtimeclass HttpChallengeHeaderValueCollection
                {
                    [default] interface Windows.Web.Http.Headers.IHttpChallengeHeaderValueCollection;
                    interface Windows.Foundation.Collections.IVector<Windows.Web.Http.Headers.HttpChallengeHeaderValue*>;
                    interface Windows.Foundation.Collections.IIterable<Windows.Web.Http.Headers.HttpChallengeHeaderValue*>;
                    interface Windows.Foundation.IStringable;
                }

                [activatable(Windows.Web.Http.Headers.IHttpConnectionOptionHeaderValueFactory, Windows.Foundation.UniversalApiContract, 1.0)]
                [contract(Windows.Foundation.UniversalApiContract, 1.0)]
                [marshaling_behavior(agile)]
                [static(Windows.Web.Http.Headers.IHttpConnectionOptionHeaderValueStatics, Windows.Foundation.UniversalApiContract, 1.0)]
                [threading(both)]
                runtimeclass HttpConnectionOptionHeaderValue
                {
                    [default] interface Windows.Web.Http.Headers.IHttpConnectionOptionHeaderValue;
                    interface Windows.Foundation.IStringable;
                }

                [contract(Windows.Foundation.UniversalApiContract, 1.0)]
                [marshaling_behavior(agile)]
                runtimeclass HttpConnectionOptionHeaderValueCollection
                {
                    [default] interface Windows.Web.Http.Headers.IHttpConnectionOptionHeaderValueCollection;
                    interface Windows.Foundation.Collections.IVector<Windows.Web.Http.Headers.HttpConnectionOptionHeaderValue*>;
                    interface Windows.Foundation.Collections.IIterable<Windows.Web.Http.Headers.HttpConnectionOptionHeaderValue*>;
                    interface Windows.Foundation.IStringable;
                }

                [activatable(Windows.Web.Http.Headers.IHttpContentCodingHeaderValueFactory, Windows.Foundation.UniversalApiContract, 1.0)]
                [contract(Windows.Foundation.UniversalApiContract, 1.0)]
                [marshaling_behavior(agile)]
                [static(Windows.Web.Http.Headers.IHttpContentCodingHeaderValueStatics, Windows.Foundation.UniversalApiContract, 1.0)]
                [threading(both)]
                runtimeclass HttpContentCodingHeaderValue
                {
                    [default] interface Windows.Web.Http.Headers.IHttpContentCodingHeaderValue;
                    interface Windows.Foundation.IStringable;
                }

                [contract(Windows.Foundation.UniversalApiContract, 1.0)]
                [marshaling_behavior(agile)]
                runtimeclass HttpContentCodingHeaderValueCollection
                {
                    [default] interface Windows.Web.Http.Headers.IHttpContentCodingHeaderValueCollection;
                    interface Windows.Foundation.Collections.IVector<Windows.Web.Http.Headers.HttpContentCodingHeaderValue*>;
                    interface Windows.Foundation.Collections.IIterable<Windows.Web.Http.Headers.HttpContentCodingHeaderValue*>;
                    interface Windows.Foundation.IStringable;
                }

                [activatable(Windows.Web.Http.Headers.IHttpContentCodingWithQualityHeaderValueFactory, Windows.Foundation.UniversalApiContract, 1.0)]
                [contract(Windows.Foundation.UniversalApiContract, 1.0)]
                [marshaling_behavior(agile)]
                [static(Windows.Web.Http.Headers.IHttpContentCodingWithQualityHeaderValueStatics, Windows.Foundation.UniversalApiContract, 1.0)]
                [threading(both)]
                runtimeclass HttpContentCodingWithQualityHeaderValue
                {
                    [default] interface Windows.Web.Http.Headers.IHttpContentCodingWithQualityHeaderValue;
                    interface Windows.Foundation.IStringable;
                }

                [contract(Windows.Foundation.UniversalApiContract, 1.0)]
                [marshaling_behavior(agile)]
                runtimeclass HttpContentCodingWithQualityHeaderValueCollection
                {
                    [default] interface Windows.Web.Http.Headers.IHttpContentCodingWithQualityHeaderValueCollection;
                    interface Windows.Foundation.Collections.IVector<Windows.Web.Http.Headers.HttpContentCodingWithQualityHeaderValue*>;
                    interface Windows.Foundation.Collections.IIterable<Windows.Web.Http.Headers.HttpContentCodingWithQualityHeaderValue*>;
                    interface Windows.Foundation.IStringable;
                }

                [activatable(Windows.Web.Http.Headers.IHttpContentDispositionHeaderValueFactory, Windows.Foundation.UniversalApiContract, 1.0)]
                [contract(Windows.Foundation.UniversalApiContract, 1.0)]
                [marshaling_behavior(agile)]
                [static(Windows.Web.Http.Headers.IHttpContentDispositionHeaderValueStatics, Windows.Foundation.UniversalApiContract, 1.0)]
                [threading(both)]
                runtimeclass HttpContentDispositionHeaderValue
                {
                    [default] interface Windows.Web.Http.Headers.IHttpContentDispositionHeaderValue;
                    interface Windows.Foundation.IStringable;
                }

                [activatable(Windows.Foundation.UniversalApiContract, 1.0)]
                [contract(Windows.Foundation.UniversalApiContract, 1.0)]
                [marshaling_behavior(agile)]
                [threading(both)]
                runtimeclass HttpContentHeaderCollection
                {
                    [default] interface Windows.Web.Http.Headers.IHttpContentHeaderCollection;
                    interface Windows.Foundation.Collections.IMap<HSTRING, HSTRING>;
                    interface Windows.Foundation.Collections.IIterable<Windows.Foundation.Collections.IKeyValuePair<HSTRING, HSTRING>*>;
                    interface Windows.Foundation.IStringable;
                }

                [activatable(Windows.Web.Http.Headers.IHttpContentRangeHeaderValueFactory, Windows.Foundation.UniversalApiContract, 1.0)]
                [contract(Windows.Foundation.UniversalApiContract, 1.0)]
                [marshaling_behavior(agile)]
                [static(Windows.Web.Http.Headers.IHttpContentRangeHeaderValueStatics, Windows.Foundation.UniversalApiContract, 1.0)]
                [threading(both)]
                runtimeclass HttpContentRangeHeaderValue
                {
                    [default] interface Windows.Web.Http.Headers.IHttpContentRangeHeaderValue;
                    interface Windows.Foundation.IStringable;
                }

                [activatable(Windows.Web.Http.Headers.IHttpCookiePairHeaderValueFactory, Windows.Foundation.UniversalApiContract, 1.0)]
                [contract(Windows.Foundation.UniversalApiContract, 1.0)]
                [marshaling_behavior(agile)]
                [static(Windows.Web.Http.Headers.IHttpCookiePairHeaderValueStatics, Windows.Foundation.UniversalApiContract, 1.0)]
                [threading(both)]
                runtimeclass HttpCookiePairHeaderValue
                {
                    [default] interface Windows.Web.Http.Headers.IHttpCookiePairHeaderValue;
                    interface Windows.Foundation.IStringable;
                }

                [contract(Windows.Foundation.UniversalApiContract, 1.0)]
                [marshaling_behavior(agile)]
                runtimeclass HttpCookiePairHeaderValueCollection
                {
                    [default] interface Windows.Web.Http.Headers.IHttpCookiePairHeaderValueCollection;
                    interface Windows.Foundation.Collections.IVector<Windows.Web.Http.Headers.HttpCookiePairHeaderValue*>;
                    interface Windows.Foundation.Collections.IIterable<Windows.Web.Http.Headers.HttpCookiePairHeaderValue*>;
                    interface Windows.Foundation.IStringable;
                }

                [activatable(Windows.Web.Http.Headers.IHttpCredentialsHeaderValueFactory, Windows.Foundation.UniversalApiContract, 1.0)]
                [contract(Windows.Foundation.UniversalApiContract, 1.0)]
                [marshaling_behavior(agile)]
                [static(Windows.Web.Http.Headers.IHttpCredentialsHeaderValueStatics, Windows.Foundation.UniversalApiContract, 1.0)]
                [threading(both)]
                runtimeclass HttpCredentialsHeaderValue
                {
                    [default] interface Windows.Web.Http.Headers.IHttpCredentialsHeaderValue;
                    interface Windows.Foundation.IStringable;
                }

                [contract(Windows.Foundation.UniversalApiContract, 1.0)]
                [marshaling_behavior(agile)]
                [static(Windows.Web.Http.Headers.IHttpDateOrDeltaHeaderValueStatics, Windows.Foundation.UniversalApiContract, 1.0)]
                [threading(both)]
                runtimeclass HttpDateOrDeltaHeaderValue
                {
                    [default] interface Windows.Web.Http.Headers.IHttpDateOrDeltaHeaderValue;
                    interface Windows.Foundation.IStringable;
                }

                [activatable(Windows.Web.Http.Headers.IHttpExpectationHeaderValueFactory, Windows.Foundation.UniversalApiContract, 1.0)]
                [contract(Windows.Foundation.UniversalApiContract, 1.0)]
                [marshaling_behavior(agile)]
                [static(Windows.Web.Http.Headers.IHttpExpectationHeaderValueStatics, Windows.Foundation.UniversalApiContract, 1.0)]
                [threading(both)]
                runtimeclass HttpExpectationHeaderValue
                {
                    [default] interface Windows.Web.Http.Headers.IHttpExpectationHeaderValue;
                    interface Windows.Foundation.IStringable;
                }

                [contract(Windows.Foundation.UniversalApiContract, 1.0)]
                [marshaling_behavior(agile)]
                runtimeclass HttpExpectationHeaderValueCollection
                {
                    [default] interface Windows.Web.Http.Headers.IHttpExpectationHeaderValueCollection;
                    interface Windows.Foundation.Collections.IVector<Windows.Web.Http.Headers.HttpExpectationHeaderValue*>;
                    interface Windows.Foundation.Collections.IIterable<Windows.Web.Http.Headers.HttpExpectationHeaderValue*>;
                    interface Windows.Foundation.IStringable;
                }

                [contract(Windows.Foundation.UniversalApiContract, 1.0)]
                [marshaling_behavior(agile)]
                runtimeclass HttpLanguageHeaderValueCollection
                {
                    [default] interface Windows.Web.Http.Headers.IHttpLanguageHeaderValueCollection;
                    interface Windows.Foundation.Collections.IVector<Windows.Globalization.Language*>;
                    interface Windows.Foundation.Collections.IIterable<Windows.Globalization.Language*>;
                    interface Windows.Foundation.IStringable;
                }

                [activatable(Windows.Web.Http.Headers.IHttpLanguageRangeWithQualityHeaderValueFactory, Windows.Foundation.UniversalApiContract, 1.0)]
                [contract(Windows.Foundation.UniversalApiContract, 1.0)]
                [marshaling_behavior(agile)]
                [static(Windows.Web.Http.Headers.IHttpLanguageRangeWithQualityHeaderValueStatics, Windows.Foundation.UniversalApiContract, 1.0)]
                [threading(both)]
                runtimeclass HttpLanguageRangeWithQualityHeaderValue
                {
                    [default] interface Windows.Web.Http.Headers.IHttpLanguageRangeWithQualityHeaderValue;
                    interface Windows.Foundation.IStringable;
                }

                [contract(Windows.Foundation.UniversalApiContract, 1.0)]
                [marshaling_behavior(agile)]
                runtimeclass HttpLanguageRangeWithQualityHeaderValueCollection
                {
                    [default] interface Windows.Web.Http.Headers.IHttpLanguageRangeWithQualityHeaderValueCollection;
                    interface Windows.Foundation.Collections.IVector<Windows.Web.Http.Headers.HttpLanguageRangeWithQualityHeaderValue*>;
                    interface Windows.Foundation.Collections.IIterable<Windows.Web.Http.Headers.HttpLanguageRangeWithQualityHeaderValue*>;
                    interface Windows.Foundation.IStringable;
                }

                [activatable(Windows.Web.Http.Headers.IHttpMediaTypeHeaderValueFactory, Windows.Foundation.UniversalApiContract, 1.0)]
                [contract(Windows.Foundation.UniversalApiContract, 1.0)]
                [marshaling_behavior(agile)]
                [static(Windows.Web.Http.Headers.IHttpMediaTypeHeaderValueStatics, Windows.Foundation.UniversalApiContract, 1.0)]
                [threading(both)]
                runtimeclass HttpMediaTypeHeaderValue
                {
                    [default] interface Windows.Web.Http.Headers.IHttpMediaTypeHeaderValue;
                    interface Windows.Foundation.IStringable;
                }

                [activatable(Windows.Web.Http.Headers.IHttpMediaTypeWithQualityHeaderValueFactory, Windows.Foundation.UniversalApiContract, 1.0)]
                [contract(Windows.Foundation.UniversalApiContract, 1.0)]
                [marshaling_behavior(agile)]
                [static(Windows.Web.Http.Headers.IHttpMediaTypeWithQualityHeaderValueStatics, Windows.Foundation.UniversalApiContract, 1.0)]
                [threading(both)]
                runtimeclass HttpMediaTypeWithQualityHeaderValue
                {
                    [default] interface Windows.Web.Http.Headers.IHttpMediaTypeWithQualityHeaderValue;
                    interface Windows.Foundation.IStringable;
                }

                [contract(Windows.Foundation.UniversalApiContract, 1.0)]
                [marshaling_behavior(agile)]
                runtimeclass HttpMediaTypeWithQualityHeaderValueCollection
                {
                    [default] interface Windows.Web.Http.Headers.IHttpMediaTypeWithQualityHeaderValueCollection;
                    interface Windows.Foundation.Collections.IVector<Windows.Web.Http.Headers.HttpMediaTypeWithQualityHeaderValue*>;
                    interface Windows.Foundation.Collections.IIterable<Windows.Web.Http.Headers.HttpMediaTypeWithQualityHeaderValue*>;
                    interface Windows.Foundation.IStringable;
                }

                [contract(Windows.Foundation.UniversalApiContract, 1.0)]
                [marshaling_behavior(agile)]
                runtimeclass HttpMethodHeaderValueCollection
                {
                    [default] interface Windows.Web.Http.Headers.IHttpMethodHeaderValueCollection;
                    interface Windows.Foundation.Collections.IVector<Windows.Web.Http.HttpMethod*>;
                    interface Windows.Foundation.Collections.IIterable<Windows.Web.Http.HttpMethod*>;
                    interface Windows.Foundation.IStringable;
                }

                [activatable(Windows.Web.Http.Headers.IHttpNameValueHeaderValueFactory, Windows.Foundation.UniversalApiContract, 1.0)]
                [contract(Windows.Foundation.UniversalApiContract, 1.0)]
                [marshaling_behavior(agile)]
                [static(Windows.Web.Http.Headers.IHttpNameValueHeaderValueStatics, Windows.Foundation.UniversalApiContract, 1.0)]
                [threading(both)]
                runtimeclass HttpNameValueHeaderValue
                {
                    [default] interface Windows.Web.Http.Headers.IHttpNameValueHeaderValue;
                    interface Windows.Foundation.IStringable;
                }

                [activatable(Windows.Web.Http.Headers.IHttpProductHeaderValueFactory, Windows.Foundation.UniversalApiContract, 1.0)]
                [contract(Windows.Foundation.UniversalApiContract, 1.0)]
                [marshaling_behavior(agile)]
                [static(Windows.Web.Http.Headers.IHttpProductHeaderValueStatics, Windows.Foundation.UniversalApiContract, 1.0)]
                [threading(both)]
                runtimeclass HttpProductHeaderValue
                {
                    [default] interface Windows.Web.Http.Headers.IHttpProductHeaderValue;
                    interface Windows.Foundation.IStringable;
                }

                [activatable(Windows.Web.Http.Headers.IHttpProductInfoHeaderValueFactory, Windows.Foundation.UniversalApiContract, 1.0)]
                [contract(Windows.Foundation.UniversalApiContract, 1.0)]
                [marshaling_behavior(agile)]
                [static(Windows.Web.Http.Headers.IHttpProductInfoHeaderValueStatics, Windows.Foundation.UniversalApiContract, 1.0)]
                [threading(both)]
                runtimeclass HttpProductInfoHeaderValue
                {
                    [default] interface Windows.Web.Http.Headers.IHttpProductInfoHeaderValue;
                    interface Windows.Foundation.IStringable;
                }

                [contract(Windows.Foundation.UniversalApiContract, 1.0)]
                [marshaling_behavior(agile)]
                runtimeclass HttpProductInfoHeaderValueCollection
                {
                    [default] interface Windows.Web.Http.Headers.IHttpProductInfoHeaderValueCollection;
                    interface Windows.Foundation.Collections.IVector<Windows.Web.Http.Headers.HttpProductInfoHeaderValue*>;
                    interface Windows.Foundation.Collections.IIterable<Windows.Web.Http.Headers.HttpProductInfoHeaderValue*>;
                    interface Windows.Foundation.IStringable;
                }

                [contract(Windows.Foundation.UniversalApiContract, 1.0)]
                [marshaling_behavior(agile)]
                runtimeclass HttpRequestHeaderCollection
                {
                    [default] interface Windows.Web.Http.Headers.IHttpRequestHeaderCollection;
                    interface Windows.Foundation.Collections.IMap<HSTRING, HSTRING>;
                    interface Windows.Foundation.Collections.IIterable<Windows.Foundation.Collections.IKeyValuePair<HSTRING, HSTRING>*>;
                    interface Windows.Foundation.IStringable;
                }

                [contract(Windows.Foundation.UniversalApiContract, 1.0)]
                [marshaling_behavior(agile)]
                runtimeclass HttpResponseHeaderCollection
                {
                    [default] interface Windows.Web.Http.Headers.IHttpResponseHeaderCollection;
                    interface Windows.Foundation.Collections.IMap<HSTRING, HSTRING>;
                    interface Windows.Foundation.Collections.IIterable<Windows.Foundation.Collections.IKeyValuePair<HSTRING, HSTRING>*>;
                    interface Windows.Foundation.IStringable;
                }

                [activatable(Windows.Web.Http.Headers.IHttpTransferCodingHeaderValueFactory, Windows.Foundation.UniversalApiContract, 1.0)]
                [contract(Windows.Foundation.UniversalApiContract, 1.0)]
                [marshaling_behavior(agile)]
                [static(Windows.Web.Http.Headers.IHttpTransferCodingHeaderValueStatics, Windows.Foundation.UniversalApiContract, 1.0)]
                [threading(both)]
                runtimeclass HttpTransferCodingHeaderValue
                {
                    [default] interface Windows.Web.Http.Headers.IHttpTransferCodingHeaderValue;
                    interface Windows.Foundation.IStringable;
                }

                [contract(Windows.Foundation.UniversalApiContract, 1.0)]
                [marshaling_behavior(agile)]
                runtimeclass HttpTransferCodingHeaderValueCollection
                {
                    [default] interface Windows.Web.Http.Headers.IHttpTransferCodingHeaderValueCollection;
                    interface Windows.Foundation.Collections.IVector<Windows.Web.Http.Headers.HttpTransferCodingHeaderValue*>;
                    interface Windows.Foundation.Collections.IIterable<Windows.Web.Http.Headers.HttpTransferCodingHeaderValue*>;
                    interface Windows.Foundation.IStringable;
                }
            }
        }
    }
}
