//
// Copyright (c) Microsoft Corporation. All rights reserved.
// 
//
// File generated by WinMDIDL version 8.00.0021
//

import "inspectable.idl";
import "AsyncInfo.idl";
import "EventToken.idl";
import "windowscontracts.idl";
import "Windows.Foundation.idl";
import "Windows.AI.Agents.idl";
import "Windows.ApplicationModel.idl";
import "Windows.UI.idl";

// Forward Declare
namespace Windows
{
    namespace AI
    {
        namespace Agents
        {
            apicontract AgentsContract;
        }
    }
}
namespace Windows
{
    namespace ApplicationModel
    {
        runtimeclass Package;
    }
}
namespace Windows
{
    namespace Foundation
    {
        namespace Collections
        {
            runtimeclass ValueSet;
        }
    }
}
namespace Windows
{
    namespace Foundation
    {
        interface IClosable;

        runtimeclass Uri;
    }
}
namespace Windows
{
    namespace UI
    {
        typedef struct WindowId WindowId;
    }
}
namespace Windows
{
    namespace AI
    {
        namespace Agents
        {
            namespace Mcp
            {
                typedef enum McpAuthorizationResponse McpAuthorizationResponse;

                interface IMcpHttpConnectionResult;

                interface IMcpNamedPipeConnectionResult;

                interface IMcpNamedPipeConnectionServer;

                interface IMcpResourcesStatics;

                interface IMcpServerContext;

                interface IMcpServerContextStatics;

                interface IMcpServerInfo;

                interface IMcpServerRegistry;

                interface IMcpServerRegistryStatics;

                interface IMcpSseConnectionServer;

                interface IMcpStdioConnectionInfo;

                runtimeclass McpHttpConnectionResult;

                runtimeclass McpNamedPipeConnectionResult;

                runtimeclass McpResources;

                runtimeclass McpServerContext;

                runtimeclass McpServerInfo;

                runtimeclass McpServerRegistry;

                runtimeclass McpStdioConnectionInfo;
            }
        }
    }
}

// Generic instantiations

// Type definition
namespace Windows
{
    namespace AI
    {
        namespace Agents
        {
            namespace Mcp
            {
                [contract(Windows.AI.Agents.AgentsContract, 1.0)]
                [experimental]
                enum McpAuthorizationResponse
                {
                    Denied   = 0,
                    Approved = 1
                };

                [contract(Windows.AI.Agents.AgentsContract, 1.0)]
                [exclusiveto(Windows.AI.Agents.Mcp.McpHttpConnectionResult)]
                [experimental]
                [uuid(D2C3755F-6D3C-5E90-84DD-3E0973049606)]
                interface IMcpHttpConnectionResult : IInspectable
                {
                    [propget] HRESULT Uri([out] [retval] Windows.Foundation.Uri** value);
                    [propput] HRESULT Uri([in] Windows.Foundation.Uri* value);
                    [propget] HRESULT Headers([out] [retval] Windows.Foundation.Collections.ValueSet** value);
                }

                [contract(Windows.AI.Agents.AgentsContract, 1.0)]
                [exclusiveto(Windows.AI.Agents.Mcp.McpNamedPipeConnectionResult)]
                [experimental]
                [uuid(8A2AEF6F-B4DC-5180-A3E1-47B63DBBB70A)]
                interface IMcpNamedPipeConnectionResult : IInspectable
                {
                }

                [contract(Windows.AI.Agents.AgentsContract, 1.0)]
                [experimental]
                [uuid(52BBBDEA-3858-5E4C-91D2-86DEEBF8ECD0)]
                interface IMcpNamedPipeConnectionServer : IInspectable
                {
                    HRESULT Connect([in] Windows.AI.Agents.Mcp.McpServerContext* hostContext, [in] HSTRING pipeName, [in] Windows.AI.Agents.Mcp.McpNamedPipeConnectionResult* connectionResult);
                }

                [contract(Windows.AI.Agents.AgentsContract, 1.0)]
                [exclusiveto(Windows.AI.Agents.Mcp.McpResources)]
                [experimental]
                [uuid(9B9F451C-73F8-59C0-BBEA-5CEB60B5F26C)]
                interface IMcpResourcesStatics : IInspectable
                {
                    [propget] HRESULT FileSystemRead([out] [retval] HSTRING* value);
                    [propget] HRESULT FileSystemWrite([out] [retval] HSTRING* value);
                    [propget] HRESULT FileSystemDelete([out] [retval] HSTRING* value);
                    [propget] HRESULT FileSystemCreate([out] [retval] HSTRING* value);
                    [propget] HRESULT HttpGet([out] [retval] HSTRING* value);
                    [propget] HRESULT HttpPost([out] [retval] HSTRING* value);
                    [propget] HRESULT HttpPut([out] [retval] HSTRING* value);
                    [propget] HRESULT HttpDelete([out] [retval] HSTRING* value);
                }

                [contract(Windows.AI.Agents.AgentsContract, 1.0)]
                [exclusiveto(Windows.AI.Agents.Mcp.McpServerContext)]
                [experimental]
                [uuid(D92A55B5-5C54-5505-960A-8A1A15180E8B)]
                interface IMcpServerContext : IInspectable
                {
                    [propget] HRESULT AppId([out] [retval] HSTRING* value);
                    HRESULT RequestResourceAccess([in] Windows.Foundation.Uri* resource, [in] HSTRING description, [in] HSTRING reasonForAsking, [out] [retval] Windows.AI.Agents.Mcp.McpAuthorizationResponse* result);
                }

                [contract(Windows.AI.Agents.AgentsContract, 1.0)]
                [exclusiveto(Windows.AI.Agents.Mcp.McpServerContext)]
                [experimental]
                [uuid(1F84B814-9FE8-521D-BF3C-B2F12861B29B)]
                interface IMcpServerContextStatics : IInspectable
                {
                    HRESULT GetContextForCaller([out] [retval] Windows.AI.Agents.Mcp.McpServerContext** result);
                }

                [contract(Windows.AI.Agents.AgentsContract, 1.0)]
                [exclusiveto(Windows.AI.Agents.Mcp.McpServerInfo)]
                [experimental]
                [uuid(96622943-0771-4960-8851-7E3EE690EA7E)]
                interface IMcpServerInfo : IInspectable
                {
                    [propget] HRESULT Id([out] [retval] GUID* value);
                    [propget] HRESULT Name([out] [retval] HSTRING* value);
                    [propget] HRESULT Description([out] [retval] HSTRING* value);
                    [propget] HRESULT Package([out] [retval] Windows.ApplicationModel.Package** value);
                    [propget] HRESULT DisplayName([out] [retval] HSTRING* value);
                    [propget] HRESULT AppUserModelId([out] [retval] HSTRING* value);
                }

                [contract(Windows.AI.Agents.AgentsContract, 1.0)]
                [exclusiveto(Windows.AI.Agents.Mcp.McpServerRegistry)]
                [experimental]
                [uuid(FECE06C6-0AA5-4BD1-8E64-FBC5F328F5DC)]
                interface IMcpServerRegistry : IInspectable
                {
                    HRESULT GetMcpServerInfos([out] UINT32* __resultSize, [out] [retval] [size_is(, *__resultSize)] Windows.AI.Agents.Mcp.McpServerInfo*** result);
                    HRESULT GetMcpConnectionInfo([in] GUID mcpServerId, [in] Windows.UI.WindowId ownerWindowId, [out] [retval] Windows.AI.Agents.Mcp.McpStdioConnectionInfo** result);
                }

                [contract(Windows.AI.Agents.AgentsContract, 1.0)]
                [exclusiveto(Windows.AI.Agents.Mcp.McpServerRegistry)]
                [experimental]
                [uuid(4ACF7FED-D300-55BC-9DDE-9F433CDC903D)]
                interface IMcpServerRegistryStatics : IInspectable
                {
                    HRESULT GetDefault([out] [retval] Windows.AI.Agents.Mcp.McpServerRegistry** result);
                }

                [contract(Windows.AI.Agents.AgentsContract, 1.0)]
                [experimental]
                [uuid(C460EDDA-9200-5ECB-91B3-157EE1D2FDF5)]
                interface IMcpSseConnectionServer : IInspectable
                {
                    HRESULT Connect([in] Windows.AI.Agents.Mcp.McpServerContext* hostContext, [in] Windows.AI.Agents.Mcp.McpHttpConnectionResult* connectionResult);
                }

                [contract(Windows.AI.Agents.AgentsContract, 1.0)]
                [exclusiveto(Windows.AI.Agents.Mcp.McpStdioConnectionInfo)]
                [experimental]
                [uuid(FBC54AAC-590B-526C-A545-B7C731B18C39)]
                interface IMcpStdioConnectionInfo : IInspectable
                {
                    [propget] HRESULT Command([out] [retval] HSTRING* value);
                    HRESULT GetCommandArguments([out] UINT32* __resultSize, [out] [retval] [size_is(, *__resultSize)] HSTRING** result);
                    [propget] HRESULT Info([out] [retval] Windows.AI.Agents.Mcp.McpServerInfo** value);
                }

                [contract(Windows.AI.Agents.AgentsContract, 1.0)]
                [experimental]
                [marshaling_behavior(agile)]
                runtimeclass McpHttpConnectionResult
                {
                    [default] [experimental] interface Windows.AI.Agents.Mcp.IMcpHttpConnectionResult;
                }

                [contract(Windows.AI.Agents.AgentsContract, 1.0)]
                [experimental]
                [marshaling_behavior(agile)]
                runtimeclass McpNamedPipeConnectionResult
                {
                    [default] [experimental] interface Windows.AI.Agents.Mcp.IMcpNamedPipeConnectionResult;
                }

                [contract(Windows.AI.Agents.AgentsContract, 1.0)]
                [experimental]
                [marshaling_behavior(agile)]
                [static(Windows.AI.Agents.Mcp.IMcpResourcesStatics, Windows.AI.Agents.AgentsContract, 1.0)]
                [threading(both)]
                runtimeclass McpResources
                {
                }

                [contract(Windows.AI.Agents.AgentsContract, 1.0)]
                [experimental]
                [marshaling_behavior(agile)]
                [static(Windows.AI.Agents.Mcp.IMcpServerContextStatics, Windows.AI.Agents.AgentsContract, 1.0)]
                [threading(both)]
                runtimeclass McpServerContext
                {
                    [default] [experimental] interface Windows.AI.Agents.Mcp.IMcpServerContext;
                }

                [contract(Windows.AI.Agents.AgentsContract, 1.0)]
                [experimental]
                [marshaling_behavior(agile)]
                runtimeclass McpServerInfo
                {
                    [default] [experimental] interface Windows.AI.Agents.Mcp.IMcpServerInfo;
                }

                [contract(Windows.AI.Agents.AgentsContract, 1.0)]
                [experimental]
                [marshaling_behavior(agile)]
                [static(Windows.AI.Agents.Mcp.IMcpServerRegistryStatics, Windows.AI.Agents.AgentsContract, 1.0)]
                [threading(both)]
                runtimeclass McpServerRegistry
                {
                    [default] [experimental] interface Windows.AI.Agents.Mcp.IMcpServerRegistry;
                }

                [contract(Windows.AI.Agents.AgentsContract, 1.0)]
                [experimental]
                [marshaling_behavior(agile)]
                runtimeclass McpStdioConnectionInfo
                {
                    [default] [experimental] interface Windows.AI.Agents.Mcp.IMcpStdioConnectionInfo;
                    interface Windows.Foundation.IClosable;
                }
            }
        }
    }
}
