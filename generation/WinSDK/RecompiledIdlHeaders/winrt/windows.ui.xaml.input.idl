//
// Copyright (c) Microsoft Corporation. All rights reserved.
// 
//
// File generated by WinMDIDL version 8.00.0021
//

import "inspectable.idl";
import "AsyncInfo.idl";
import "EventToken.idl";
import "windowscontracts.idl";
import "Windows.Foundation.idl";
import "Windows.Devices.Input.idl";
import "Windows.System.idl";
import "Windows.UI.Core.idl";
import "Windows.UI.Input.idl";
import "Windows.UI.Xaml.idl";
import "Windows.UI.Xaml.Controls.idl";
import "Windows.UI.Xaml.Documents.idl";

// Forward Declare
namespace Windows
{
    namespace Devices
    {
        namespace Input
        {
            typedef enum PointerDeviceType PointerDeviceType;
        }
    }
}
namespace Windows
{
    namespace Foundation
    {
        typedef struct Point Point;

        typedef struct Rect Rect;

        apicontract UniversalApiContract;
    }
}
namespace Windows
{
    namespace System
    {
        typedef enum VirtualKey VirtualKey;

        typedef enum VirtualKeyModifiers VirtualKeyModifiers;
    }
}
namespace Windows
{
    namespace UI
    {
        namespace Core
        {
            typedef struct CorePhysicalKeyStatus CorePhysicalKeyStatus;
        }
    }
}
namespace Windows
{
    namespace UI
    {
        namespace Input
        {
            typedef enum HoldingState HoldingState;

            typedef struct ManipulationDelta ManipulationDelta;

            typedef struct ManipulationVelocities ManipulationVelocities;

            runtimeclass PointerPoint;
        }
    }
}
namespace Windows
{
    namespace UI
    {
        namespace Xaml
        {
            namespace Controls
            {
                runtimeclass IconSource;
            }
        }
    }
}
namespace Windows
{
    namespace UI
    {
        namespace Xaml
        {
            runtimeclass DependencyObject;

            runtimeclass DependencyProperty;
        }
    }
}
namespace Windows
{
    namespace UI
    {
        namespace Xaml
        {
            namespace Documents
            {
                runtimeclass TextElement;
            }
        }
    }
}
namespace Windows
{
    namespace UI
    {
        namespace Xaml
        {
            typedef enum FocusState FocusState;

            runtimeclass UIElement;

            runtimeclass XamlRoot;
        }
    }
}
namespace Windows
{
    namespace UI
    {
        namespace Xaml
        {
            namespace Input
            {
                typedef enum FocusInputDeviceKind FocusInputDeviceKind;

                typedef enum FocusNavigationDirection FocusNavigationDirection;

                typedef enum InputScopeNameValue InputScopeNameValue;

                typedef enum KeyTipPlacementMode KeyTipPlacementMode;

                typedef enum KeyboardAcceleratorPlacementMode KeyboardAcceleratorPlacementMode;

                typedef enum KeyboardNavigationMode KeyboardNavigationMode;

                typedef enum ManipulationModes ManipulationModes;

                typedef enum StandardUICommandKind StandardUICommandKind;

                typedef enum XYFocusKeyboardNavigationMode XYFocusKeyboardNavigationMode;

                typedef enum XYFocusNavigationStrategy XYFocusNavigationStrategy;

                typedef enum XYFocusNavigationStrategyOverride XYFocusNavigationStrategyOverride;

                delegate DoubleTappedEventHandler;

                delegate HoldingEventHandler;

                delegate KeyEventHandler;

                delegate ManipulationCompletedEventHandler;

                delegate ManipulationDeltaEventHandler;

                delegate ManipulationInertiaStartingEventHandler;

                delegate ManipulationStartedEventHandler;

                delegate ManipulationStartingEventHandler;

                delegate PointerEventHandler;

                delegate RightTappedEventHandler;

                delegate TappedEventHandler;

                interface IAccessKeyDisplayDismissedEventArgs;

                interface IAccessKeyDisplayRequestedEventArgs;

                interface IAccessKeyInvokedEventArgs;

                interface IAccessKeyManager;

                interface IAccessKeyManagerStatics;

                interface IAccessKeyManagerStatics2;

                interface ICanExecuteRequestedEventArgs;

                interface ICharacterReceivedRoutedEventArgs;

                interface ICommand;

                interface IContextRequestedEventArgs;

                interface IDoubleTappedRoutedEventArgs;

                interface IExecuteRequestedEventArgs;

                interface IFindNextElementOptions;

                interface IFocusManager;

                interface IFocusManagerGotFocusEventArgs;

                interface IFocusManagerLostFocusEventArgs;

                interface IFocusManagerStatics;

                interface IFocusManagerStatics2;

                interface IFocusManagerStatics3;

                interface IFocusManagerStatics4;

                interface IFocusManagerStatics5;

                interface IFocusManagerStatics6;

                interface IFocusManagerStatics7;

                interface IFocusMovementResult;

                interface IGettingFocusEventArgs;

                interface IGettingFocusEventArgs2;

                interface IGettingFocusEventArgs3;

                interface IHoldingRoutedEventArgs;

                interface IInertiaExpansionBehavior;

                interface IInertiaRotationBehavior;

                interface IInertiaTranslationBehavior;

                interface IInputScope;

                interface IInputScopeName;

                interface IInputScopeNameFactory;

                interface IKeyRoutedEventArgs;

                interface IKeyRoutedEventArgs2;

                interface IKeyRoutedEventArgs3;

                interface IKeyboardAccelerator;

                interface IKeyboardAcceleratorFactory;

                interface IKeyboardAcceleratorInvokedEventArgs;

                interface IKeyboardAcceleratorInvokedEventArgs2;

                interface IKeyboardAcceleratorStatics;

                interface ILosingFocusEventArgs;

                interface ILosingFocusEventArgs2;

                interface ILosingFocusEventArgs3;

                interface IManipulationCompletedRoutedEventArgs;

                interface IManipulationDeltaRoutedEventArgs;

                interface IManipulationInertiaStartingRoutedEventArgs;

                interface IManipulationPivot;

                interface IManipulationPivotFactory;

                interface IManipulationStartedRoutedEventArgs;

                interface IManipulationStartedRoutedEventArgsFactory;

                interface IManipulationStartingRoutedEventArgs;

                interface INoFocusCandidateFoundEventArgs;

                interface IPointer;

                interface IPointerRoutedEventArgs;

                interface IPointerRoutedEventArgs2;

                interface IProcessKeyboardAcceleratorEventArgs;

                interface IRightTappedRoutedEventArgs;

                interface IStandardUICommand;

                interface IStandardUICommand2;

                interface IStandardUICommandFactory;

                interface IStandardUICommandStatics;

                interface ITappedRoutedEventArgs;

                interface IXamlUICommand;

                interface IXamlUICommandFactory;

                interface IXamlUICommandStatics;

                runtimeclass AccessKeyDisplayDismissedEventArgs;

                runtimeclass AccessKeyDisplayRequestedEventArgs;

                runtimeclass AccessKeyInvokedEventArgs;

                runtimeclass AccessKeyManager;

                runtimeclass CanExecuteRequestedEventArgs;

                runtimeclass CharacterReceivedRoutedEventArgs;

                runtimeclass ContextRequestedEventArgs;

                runtimeclass DoubleTappedRoutedEventArgs;

                runtimeclass ExecuteRequestedEventArgs;

                runtimeclass FindNextElementOptions;

                runtimeclass FocusManager;

                runtimeclass FocusManagerGotFocusEventArgs;

                runtimeclass FocusManagerLostFocusEventArgs;

                runtimeclass FocusMovementResult;

                runtimeclass GettingFocusEventArgs;

                runtimeclass HoldingRoutedEventArgs;

                runtimeclass InertiaExpansionBehavior;

                runtimeclass InertiaRotationBehavior;

                runtimeclass InertiaTranslationBehavior;

                runtimeclass InputScope;

                runtimeclass InputScopeName;

                runtimeclass KeyRoutedEventArgs;

                runtimeclass KeyboardAccelerator;

                runtimeclass KeyboardAcceleratorInvokedEventArgs;

                runtimeclass LosingFocusEventArgs;

                runtimeclass ManipulationCompletedRoutedEventArgs;

                runtimeclass ManipulationDeltaRoutedEventArgs;

                runtimeclass ManipulationInertiaStartingRoutedEventArgs;

                runtimeclass ManipulationPivot;

                runtimeclass ManipulationStartedRoutedEventArgs;

                runtimeclass ManipulationStartingRoutedEventArgs;

                runtimeclass NoFocusCandidateFoundEventArgs;

                runtimeclass Pointer;

                runtimeclass PointerRoutedEventArgs;

                runtimeclass ProcessKeyboardAcceleratorEventArgs;

                runtimeclass RightTappedRoutedEventArgs;

                runtimeclass StandardUICommand;

                runtimeclass TappedRoutedEventArgs;

                runtimeclass XamlUICommand;
            }
        }
    }
}

// Generic instantiations
namespace Windows
{
    namespace UI
    {
        namespace Xaml
        {
            namespace Input
            {
                declare
                {
                    interface Windows.Foundation.Collections.IIterable<Windows.UI.Xaml.Input.InputScopeName*>;

                    interface Windows.Foundation.Collections.IIterable<Windows.UI.Xaml.Input.KeyboardAccelerator*>;

                    interface Windows.Foundation.Collections.IIterable<Windows.UI.Xaml.Input.Pointer*>;

                    interface Windows.Foundation.Collections.IIterator<Windows.UI.Xaml.Input.InputScopeName*>;

                    interface Windows.Foundation.Collections.IIterator<Windows.UI.Xaml.Input.KeyboardAccelerator*>;

                    interface Windows.Foundation.Collections.IIterator<Windows.UI.Xaml.Input.Pointer*>;

                    interface Windows.Foundation.Collections.IVectorView<Windows.UI.Xaml.Input.InputScopeName*>;

                    interface Windows.Foundation.Collections.IVectorView<Windows.UI.Xaml.Input.KeyboardAccelerator*>;

                    interface Windows.Foundation.Collections.IVectorView<Windows.UI.Xaml.Input.Pointer*>;

                    interface Windows.Foundation.Collections.IVector<Windows.UI.Xaml.Input.InputScopeName*>;

                    interface Windows.Foundation.Collections.IVector<Windows.UI.Xaml.Input.KeyboardAccelerator*>;

                    interface Windows.Foundation.EventHandler<Windows.UI.Xaml.Input.FocusManagerGotFocusEventArgs*>;

                    interface Windows.Foundation.EventHandler<Windows.UI.Xaml.Input.FocusManagerLostFocusEventArgs*>;

                    interface Windows.Foundation.EventHandler<Windows.UI.Xaml.Input.GettingFocusEventArgs*>;

                    interface Windows.Foundation.EventHandler<Windows.UI.Xaml.Input.LosingFocusEventArgs*>;

                    interface Windows.Foundation.IAsyncOperation<Windows.UI.Xaml.Input.FocusMovementResult*>;

                    interface Windows.Foundation.TypedEventHandler<Windows.UI.Xaml.Documents.TextElement*, Windows.UI.Xaml.Input.AccessKeyDisplayDismissedEventArgs*>;

                    interface Windows.Foundation.TypedEventHandler<Windows.UI.Xaml.Documents.TextElement*, Windows.UI.Xaml.Input.AccessKeyDisplayRequestedEventArgs*>;

                    interface Windows.Foundation.TypedEventHandler<Windows.UI.Xaml.Documents.TextElement*, Windows.UI.Xaml.Input.AccessKeyInvokedEventArgs*>;

                    interface Windows.Foundation.TypedEventHandler<Windows.UI.Xaml.Input.KeyboardAccelerator*, Windows.UI.Xaml.Input.KeyboardAcceleratorInvokedEventArgs*>;

                    interface Windows.Foundation.TypedEventHandler<Windows.UI.Xaml.Input.XamlUICommand*, Windows.UI.Xaml.Input.CanExecuteRequestedEventArgs*>;

                    interface Windows.Foundation.TypedEventHandler<Windows.UI.Xaml.Input.XamlUICommand*, Windows.UI.Xaml.Input.ExecuteRequestedEventArgs*>;

                    interface Windows.Foundation.TypedEventHandler<Windows.UI.Xaml.UIElement*, Windows.UI.Xaml.Input.AccessKeyDisplayDismissedEventArgs*>;

                    interface Windows.Foundation.TypedEventHandler<Windows.UI.Xaml.UIElement*, Windows.UI.Xaml.Input.AccessKeyDisplayRequestedEventArgs*>;

                    interface Windows.Foundation.TypedEventHandler<Windows.UI.Xaml.UIElement*, Windows.UI.Xaml.Input.AccessKeyInvokedEventArgs*>;

                    interface Windows.Foundation.TypedEventHandler<Windows.UI.Xaml.UIElement*, Windows.UI.Xaml.Input.CharacterReceivedRoutedEventArgs*>;

                    interface Windows.Foundation.TypedEventHandler<Windows.UI.Xaml.UIElement*, Windows.UI.Xaml.Input.ContextRequestedEventArgs*>;

                    interface Windows.Foundation.TypedEventHandler<Windows.UI.Xaml.UIElement*, Windows.UI.Xaml.Input.GettingFocusEventArgs*>;

                    interface Windows.Foundation.TypedEventHandler<Windows.UI.Xaml.UIElement*, Windows.UI.Xaml.Input.LosingFocusEventArgs*>;

                    interface Windows.Foundation.TypedEventHandler<Windows.UI.Xaml.UIElement*, Windows.UI.Xaml.Input.NoFocusCandidateFoundEventArgs*>;

                    interface Windows.Foundation.TypedEventHandler<Windows.UI.Xaml.UIElement*, Windows.UI.Xaml.Input.ProcessKeyboardAcceleratorEventArgs*>;
                }
            }
        }
    }
}

// Type definition
namespace Windows
{
    namespace UI
    {
        namespace Xaml
        {
            namespace Input
            {
                [contract(Windows.Foundation.UniversalApiContract, 4.0)]
                enum FocusInputDeviceKind
                {
                    None           = 0,
                    Mouse          = 1,
                    Touch          = 2,
                    Pen            = 3,
                    Keyboard       = 4,
                    GameController = 5
                };

                [contract(Windows.Foundation.UniversalApiContract, 1.0)]
                enum FocusNavigationDirection
                {
                    Next     = 0,
                    Previous = 1,
                    [contract(Windows.Foundation.UniversalApiContract, 1.0)]
                    Up       = 2,
                    [contract(Windows.Foundation.UniversalApiContract, 1.0)]
                    Down     = 3,
                    [contract(Windows.Foundation.UniversalApiContract, 1.0)]
                    Left     = 4,
                    [contract(Windows.Foundation.UniversalApiContract, 1.0)]
                    Right    = 5,
                    [contract(Windows.Foundation.UniversalApiContract, 1.0)]
                    None     = 6
                };

                [contract(Windows.Foundation.UniversalApiContract, 1.0)]
                enum InputScopeNameValue
                {
                    Default                 = 0,
                    Url                     = 1,
                    EmailSmtpAddress        = 5,
                    [contract(Windows.Foundation.UniversalApiContract, 1.0)]
                    PersonalFullName        = 7,
                    [contract(Windows.Foundation.UniversalApiContract, 1.0)]
                    CurrencyAmountAndSymbol = 20,
                    [contract(Windows.Foundation.UniversalApiContract, 1.0)]
                    CurrencyAmount          = 21,
                    [contract(Windows.Foundation.UniversalApiContract, 1.0)]
                    DateMonthNumber         = 23,
                    [contract(Windows.Foundation.UniversalApiContract, 1.0)]
                    DateDayNumber           = 24,
                    [contract(Windows.Foundation.UniversalApiContract, 1.0)]
                    DateYear                = 25,
                    [contract(Windows.Foundation.UniversalApiContract, 1.0)]
                    Digits                  = 28,
                    Number                  = 29,
                    [contract(Windows.Foundation.UniversalApiContract, 1.0)]
                    Password                = 31,
                    TelephoneNumber         = 32,
                    [contract(Windows.Foundation.UniversalApiContract, 1.0)]
                    TelephoneCountryCode    = 33,
                    [contract(Windows.Foundation.UniversalApiContract, 1.0)]
                    TelephoneAreaCode       = 34,
                    [contract(Windows.Foundation.UniversalApiContract, 1.0)]
                    TelephoneLocalNumber    = 35,
                    [contract(Windows.Foundation.UniversalApiContract, 1.0)]
                    TimeHour                = 37,
                    [contract(Windows.Foundation.UniversalApiContract, 1.0)]
                    TimeMinutesOrSeconds    = 38,
                    NumberFullWidth         = 39,
                    AlphanumericHalfWidth   = 40,
                    AlphanumericFullWidth   = 41,
                    Hiragana                = 44,
                    KatakanaHalfWidth       = 45,
                    KatakanaFullWidth       = 46,
                    Hanja                   = 47,
                    HangulHalfWidth         = 48,
                    HangulFullWidth         = 49,
                    Search                  = 50,
                    [contract(Windows.Foundation.UniversalApiContract, 1.0)]
                    Formula                 = 51,
                    [contract(Windows.Foundation.UniversalApiContract, 1.0)]
                    SearchIncremental       = 52,
                    ChineseHalfWidth        = 53,
                    ChineseFullWidth        = 54,
                    NativeScript            = 55,
                    [contract(Windows.Foundation.UniversalApiContract, 1.0)]
                    Text                    = 57,
                    [contract(Windows.Foundation.UniversalApiContract, 1.0)]
                    Chat                    = 58,
                    [contract(Windows.Foundation.UniversalApiContract, 1.0)]
                    NameOrPhoneNumber       = 59,
                    [contract(Windows.Foundation.UniversalApiContract, 1.0)]
                    EmailNameOrAddress      = 60,
                    [contract(Windows.Foundation.UniversalApiContract, 1.0)]
                    Maps                    = 62,
                    [contract(Windows.Foundation.UniversalApiContract, 1.0)]
                    NumericPassword         = 63,
                    [contract(Windows.Foundation.UniversalApiContract, 1.0)]
                    NumericPin              = 64,
                    [contract(Windows.Foundation.UniversalApiContract, 1.0)]
                    AlphanumericPin         = 65,
                    [contract(Windows.Foundation.UniversalApiContract, 1.0)]
                    FormulaNumber           = 67,
                    [contract(Windows.Foundation.UniversalApiContract, 3.0)]
                    ChatWithoutEmoji        = 68
                };

                [contract(Windows.Foundation.UniversalApiContract, 4.0)]
                enum KeyTipPlacementMode
                {
                    Auto   = 0,
                    Bottom = 1,
                    Top    = 2,
                    Left   = 3,
                    Right  = 4,
                    Center = 5,
                    Hidden = 6
                };

                [contract(Windows.Foundation.UniversalApiContract, 6.0)]
                enum KeyboardAcceleratorPlacementMode
                {
                    Auto   = 0,
                    Hidden = 1
                };

                [contract(Windows.Foundation.UniversalApiContract, 1.0)]
                enum KeyboardNavigationMode
                {
                    Local = 0,
                    Cycle = 1,
                    Once  = 2
                };

                [contract(Windows.Foundation.UniversalApiContract, 1.0)]
                [flags]
                enum ManipulationModes
                {
                    None             = 0x0,
                    TranslateX       = 0x1,
                    TranslateY       = 0x2,
                    TranslateRailsX  = 0x4,
                    TranslateRailsY  = 0x8,
                    Rotate           = 0x10,
                    Scale            = 0x20,
                    TranslateInertia = 0x40,
                    RotateInertia    = 0x80,
                    ScaleInertia     = 0x100,
                    All              = 0xFFFF,
                    System           = 0x10000
                };

                [contract(Windows.Foundation.UniversalApiContract, 7.0)]
                enum StandardUICommandKind
                {
                    None      = 0,
                    Cut       = 1,
                    Copy      = 2,
                    Paste     = 3,
                    SelectAll = 4,
                    Delete    = 5,
                    Share     = 6,
                    Save      = 7,
                    Open      = 8,
                    Close     = 9,
                    Pause     = 10,
                    Play      = 11,
                    Stop      = 12,
                    Forward   = 13,
                    Backward  = 14,
                    Undo      = 15,
                    Redo      = 16
                };

                [contract(Windows.Foundation.UniversalApiContract, 4.0)]
                enum XYFocusKeyboardNavigationMode
                {
                    Auto     = 0,
                    Enabled  = 1,
                    Disabled = 2
                };

                [contract(Windows.Foundation.UniversalApiContract, 4.0)]
                enum XYFocusNavigationStrategy
                {
                    Auto                        = 0,
                    Projection                  = 1,
                    NavigationDirectionDistance = 2,
                    RectilinearDistance         = 3
                };

                [contract(Windows.Foundation.UniversalApiContract, 4.0)]
                enum XYFocusNavigationStrategyOverride
                {
                    None                        = 0,
                    Auto                        = 1,
                    Projection                  = 2,
                    NavigationDirectionDistance = 3,
                    RectilinearDistance         = 4
                };

                [contract(Windows.Foundation.UniversalApiContract, 1.0)]
                [uuid(3124D025-04A7-4D45-825E-8204A624DBF4)]
                delegate
                    HRESULT DoubleTappedEventHandler([in] IInspectable* sender, [in] Windows.UI.Xaml.Input.DoubleTappedRoutedEventArgs* e);

                [contract(Windows.Foundation.UniversalApiContract, 1.0)]
                [uuid(ECAE8CCD-8E5E-4FBE-9846-30A6370AFCDF)]
                delegate
                    HRESULT HoldingEventHandler([in] IInspectable* sender, [in] Windows.UI.Xaml.Input.HoldingRoutedEventArgs* e);

                [contract(Windows.Foundation.UniversalApiContract, 1.0)]
                [uuid(7C63D2E5-7A0E-4E12-B96A-7715AA6FF1C8)]
                delegate
                    HRESULT KeyEventHandler([in] IInspectable* sender, [in] Windows.UI.Xaml.Input.KeyRoutedEventArgs* e);

                [contract(Windows.Foundation.UniversalApiContract, 1.0)]
                [uuid(38EF4B0F-14F8-42DF-9A1E-A4BCC4AF77F4)]
                delegate
                    HRESULT ManipulationCompletedEventHandler([in] IInspectable* sender, [in] Windows.UI.Xaml.Input.ManipulationCompletedRoutedEventArgs* e);

                [contract(Windows.Foundation.UniversalApiContract, 1.0)]
                [uuid(AA1160CB-DFB9-4C56-ABDC-711B63C8EB94)]
                delegate
                    HRESULT ManipulationDeltaEventHandler([in] IInspectable* sender, [in] Windows.UI.Xaml.Input.ManipulationDeltaRoutedEventArgs* e);

                [contract(Windows.Foundation.UniversalApiContract, 1.0)]
                [uuid(D39D6322-7C9C-481B-827B-C8B2D9BB6FC7)]
                delegate
                    HRESULT ManipulationInertiaStartingEventHandler([in] IInspectable* sender, [in] Windows.UI.Xaml.Input.ManipulationInertiaStartingRoutedEventArgs* e);

                [contract(Windows.Foundation.UniversalApiContract, 1.0)]
                [uuid(F88345F8-E0A3-4BE2-B90C-DC20E6D8BEB0)]
                delegate
                    HRESULT ManipulationStartedEventHandler([in] IInspectable* sender, [in] Windows.UI.Xaml.Input.ManipulationStartedRoutedEventArgs* e);

                [contract(Windows.Foundation.UniversalApiContract, 1.0)]
                [uuid(10D0B04E-BFE4-42CB-823C-3FECD8770EF8)]
                delegate
                    HRESULT ManipulationStartingEventHandler([in] IInspectable* sender, [in] Windows.UI.Xaml.Input.ManipulationStartingRoutedEventArgs* e);

                [contract(Windows.Foundation.UniversalApiContract, 1.0)]
                [uuid(E4385929-C004-4BCF-8970-359486E39F88)]
                delegate
                    HRESULT PointerEventHandler([in] IInspectable* sender, [in] Windows.UI.Xaml.Input.PointerRoutedEventArgs* e);

                [contract(Windows.Foundation.UniversalApiContract, 1.0)]
                [uuid(2532A062-F447-4950-9C46-F1E34A2C2238)]
                delegate
                    HRESULT RightTappedEventHandler([in] IInspectable* sender, [in] Windows.UI.Xaml.Input.RightTappedRoutedEventArgs* e);

                [contract(Windows.Foundation.UniversalApiContract, 1.0)]
                [uuid(68D940CC-9FF0-49CE-B141-3F07EC477B97)]
                delegate
                    HRESULT TappedEventHandler([in] IInspectable* sender, [in] Windows.UI.Xaml.Input.TappedRoutedEventArgs* e);

                [contract(Windows.Foundation.UniversalApiContract, 3.0)]
                [exclusiveto(Windows.UI.Xaml.Input.AccessKeyDisplayDismissedEventArgs)]
                [uuid(8A610DC6-D72D-4CA8-9F66-556F35B513DA)]
                interface IAccessKeyDisplayDismissedEventArgs : IInspectable
                {
                }

                [contract(Windows.Foundation.UniversalApiContract, 3.0)]
                [exclusiveto(Windows.UI.Xaml.Input.AccessKeyDisplayRequestedEventArgs)]
                [uuid(0C079E55-13FE-4D03-A61D-E12F06567286)]
                interface IAccessKeyDisplayRequestedEventArgs : IInspectable
                {
                    [propget] HRESULT PressedKeys([out] [retval] HSTRING* value);
                }

                [contract(Windows.Foundation.UniversalApiContract, 3.0)]
                [exclusiveto(Windows.UI.Xaml.Input.AccessKeyInvokedEventArgs)]
                [uuid(CFE9CD97-C718-4091-B7DD-ADF1C072B1E1)]
                interface IAccessKeyInvokedEventArgs : IInspectable
                {
                    [propget] HRESULT Handled([out] [retval] boolean* value);
                    [propput] HRESULT Handled([in] boolean value);
                }

                [contract(Windows.Foundation.UniversalApiContract, 3.0)]
                [exclusiveto(Windows.UI.Xaml.Input.AccessKeyManager)]
                [uuid(ECC973B0-2EE9-4B1C-98D7-6E0E816D334B)]
                interface IAccessKeyManager : IInspectable
                {
                }

                [contract(Windows.Foundation.UniversalApiContract, 3.0)]
                [exclusiveto(Windows.UI.Xaml.Input.AccessKeyManager)]
                [uuid(4CA0EFE6-D9C8-4EBC-B4C7-30D1838A81F1)]
                interface IAccessKeyManagerStatics : IInspectable
                {
                    [propget] HRESULT IsDisplayModeEnabled([out] [retval] boolean* value);
                    [eventadd] HRESULT IsDisplayModeEnabledChanged([in] Windows.Foundation.TypedEventHandler<IInspectable*, IInspectable*>* handler, [out] [retval] EventRegistrationToken* token);
                    [eventremove] HRESULT IsDisplayModeEnabledChanged([in] EventRegistrationToken token);
                    HRESULT ExitDisplayMode();
                }

                [contract(Windows.Foundation.UniversalApiContract, 4.0)]
                [exclusiveto(Windows.UI.Xaml.Input.AccessKeyManager)]
                [uuid(962BB594-2AB3-47C5-954B-7092F355F797)]
                interface IAccessKeyManagerStatics2 : IInspectable
                {
                    [propget] HRESULT AreKeyTipsEnabled([out] [retval] boolean* value);
                    [propput] HRESULT AreKeyTipsEnabled([in] boolean value);
                }

                [contract(Windows.Foundation.UniversalApiContract, 7.0)]
                [exclusiveto(Windows.UI.Xaml.Input.CanExecuteRequestedEventArgs)]
                [uuid(C8E75256-1950-505D-993B-75907EF96830)]
                interface ICanExecuteRequestedEventArgs : IInspectable
                {
                    [propget] HRESULT Parameter([out] [retval] IInspectable** value);
                    [propget] HRESULT CanExecute([out] [retval] boolean* value);
                    [propput] HRESULT CanExecute([in] boolean value);
                }

                [contract(Windows.Foundation.UniversalApiContract, 5.0)]
                [exclusiveto(Windows.UI.Xaml.Input.CharacterReceivedRoutedEventArgs)]
                [uuid(7849FD82-48E4-444D-9419-93AB8892C107)]
                interface ICharacterReceivedRoutedEventArgs : IInspectable
                {
                    [propget] HRESULT Character([out] [retval] WCHAR* value);
                    [propget] HRESULT KeyStatus([out] [retval] Windows.UI.Core.CorePhysicalKeyStatus* value);
                    [propget] HRESULT Handled([out] [retval] boolean* value);
                    [propput] HRESULT Handled([in] boolean value);
                }

                [contract(Windows.Foundation.UniversalApiContract, 1.0)]
                [uuid(E5AF3542-CA67-4081-995B-709DD13792DF)]
                interface ICommand : IInspectable
                {
                    [eventadd] HRESULT CanExecuteChanged([in] Windows.Foundation.EventHandler<IInspectable*>* handler, [out] [retval] EventRegistrationToken* token);
                    [eventremove] HRESULT CanExecuteChanged([in] EventRegistrationToken token);
                    HRESULT CanExecute([in] IInspectable* parameter, [out] [retval] boolean* result);
                    HRESULT Execute([in] IInspectable* parameter);
                }

                [contract(Windows.Foundation.UniversalApiContract, 3.0)]
                [exclusiveto(Windows.UI.Xaml.Input.ContextRequestedEventArgs)]
                [uuid(42618E0A-1CB6-46FB-8374-0AEC68AA5E51)]
                interface IContextRequestedEventArgs : IInspectable
                {
                    [propget] HRESULT Handled([out] [retval] boolean* value);
                    [propput] HRESULT Handled([in] boolean value);
                    HRESULT TryGetPosition([in] Windows.UI.Xaml.UIElement* relativeTo, [out] Windows.Foundation.Point* point, [out] [retval] boolean* returnValue);
                }

                [contract(Windows.Foundation.UniversalApiContract, 1.0)]
                [exclusiveto(Windows.UI.Xaml.Input.DoubleTappedRoutedEventArgs)]
                [uuid(AF404424-26DF-44F4-8714-9359249B62D3)]
                interface IDoubleTappedRoutedEventArgs : IInspectable
                {
                    [propget] HRESULT PointerDeviceType([out] [retval] Windows.Devices.Input.PointerDeviceType* value);
                    [propget] HRESULT Handled([out] [retval] boolean* value);
                    [propput] HRESULT Handled([in] boolean value);
                    HRESULT GetPosition([in] Windows.UI.Xaml.UIElement* relativeTo, [out] [retval] Windows.Foundation.Point* result);
                }

                [contract(Windows.Foundation.UniversalApiContract, 7.0)]
                [exclusiveto(Windows.UI.Xaml.Input.ExecuteRequestedEventArgs)]
                [uuid(E07FA734-A0B6-5755-9E87-24F54CCA9372)]
                interface IExecuteRequestedEventArgs : IInspectable
                {
                    [propget] HRESULT Parameter([out] [retval] IInspectable** value);
                }

                [contract(Windows.Foundation.UniversalApiContract, 4.0)]
                [exclusiveto(Windows.UI.Xaml.Input.FindNextElementOptions)]
                [uuid(D88AE22B-46C2-41FC-897E-B5961977B89D)]
                interface IFindNextElementOptions : IInspectable
                {
                    [propget] HRESULT SearchRoot([out] [retval] Windows.UI.Xaml.DependencyObject** value);
                    [propput] HRESULT SearchRoot([in] Windows.UI.Xaml.DependencyObject* value);
                    [propget] HRESULT ExclusionRect([out] [retval] Windows.Foundation.Rect* value);
                    [propput] HRESULT ExclusionRect([in] Windows.Foundation.Rect value);
                    [propget] HRESULT HintRect([out] [retval] Windows.Foundation.Rect* value);
                    [propput] HRESULT HintRect([in] Windows.Foundation.Rect value);
                    [propget] HRESULT XYFocusNavigationStrategyOverride([out] [retval] Windows.UI.Xaml.Input.XYFocusNavigationStrategyOverride* value);
                    [propput] HRESULT XYFocusNavigationStrategyOverride([in] Windows.UI.Xaml.Input.XYFocusNavigationStrategyOverride value);
                }

                [contract(Windows.Foundation.UniversalApiContract, 1.0)]
                [exclusiveto(Windows.UI.Xaml.Input.FocusManager)]
                [uuid(C843F50B-3B83-4DA1-9D6F-557C1169F341)]
                interface IFocusManager : IInspectable
                {
                }

                [contract(Windows.Foundation.UniversalApiContract, 7.0)]
                [exclusiveto(Windows.UI.Xaml.Input.FocusManagerGotFocusEventArgs)]
                [uuid(97AA5D83-535B-507A-868E-62B706F06B61)]
                interface IFocusManagerGotFocusEventArgs : IInspectable
                {
                    [propget] HRESULT NewFocusedElement([out] [retval] Windows.UI.Xaml.DependencyObject** value);
                    [propget] HRESULT CorrelationId([out] [retval] GUID* value);
                }

                [contract(Windows.Foundation.UniversalApiContract, 7.0)]
                [exclusiveto(Windows.UI.Xaml.Input.FocusManagerLostFocusEventArgs)]
                [uuid(3E157E7A-9578-5CD3-AAA8-051B3D391978)]
                interface IFocusManagerLostFocusEventArgs : IInspectable
                {
                    [propget] HRESULT OldFocusedElement([out] [retval] Windows.UI.Xaml.DependencyObject** value);
                    [propget] HRESULT CorrelationId([out] [retval] GUID* value);
                }

                [contract(Windows.Foundation.UniversalApiContract, 1.0)]
                [exclusiveto(Windows.UI.Xaml.Input.FocusManager)]
                [uuid(1ECCD326-8182-4482-826A-0918E9ED9AF7)]
                interface IFocusManagerStatics : IInspectable
                {
                    HRESULT GetFocusedElement([out] [retval] IInspectable** result);
                }

                [contract(Windows.Foundation.UniversalApiContract, 1.0)]
                [exclusiveto(Windows.UI.Xaml.Input.FocusManager)]
                [uuid(A920D761-DD87-4F31-BEDA-EF417FE7C04A)]
                interface IFocusManagerStatics2 : IInspectable
                {
                    [overload("TryMoveFocus")] HRESULT TryMoveFocus([in] Windows.UI.Xaml.Input.FocusNavigationDirection focusNavigationDirection, [out] [retval] boolean* result);
                }

                [contract(Windows.Foundation.UniversalApiContract, 1.0)]
                [exclusiveto(Windows.UI.Xaml.Input.FocusManager)]
                [uuid(60805EBF-B149-417D-83F1-BAEB560E2A47)]
                interface IFocusManagerStatics3 : IInspectable
                {
                    [overload("FindNextFocusableElement")] HRESULT FindNextFocusableElement([in] Windows.UI.Xaml.Input.FocusNavigationDirection focusNavigationDirection, [out] [retval] Windows.UI.Xaml.UIElement** result);
                    [overload("FindNextFocusableElement")] HRESULT FindNextFocusableElementWithHint([in] Windows.UI.Xaml.Input.FocusNavigationDirection focusNavigationDirection, [in] Windows.Foundation.Rect hintRect, [out] [retval] Windows.UI.Xaml.UIElement** result);
                }

                [contract(Windows.Foundation.UniversalApiContract, 4.0)]
                [exclusiveto(Windows.UI.Xaml.Input.FocusManager)]
                [uuid(29276E9C-1C6C-414A-BA1C-96EFD5962BCD)]
                interface IFocusManagerStatics4 : IInspectable
                {
                    [overload("TryMoveFocus")] HRESULT TryMoveFocusWithOptions([in] Windows.UI.Xaml.Input.FocusNavigationDirection focusNavigationDirection, [in] Windows.UI.Xaml.Input.FindNextElementOptions* focusNavigationOptions, [out] [retval] boolean* result);
                    [overload("FindNextElement")] HRESULT FindNextElement([in] Windows.UI.Xaml.Input.FocusNavigationDirection focusNavigationDirection, [out] [retval] Windows.UI.Xaml.DependencyObject** result);
                    HRESULT FindFirstFocusableElement([in] Windows.UI.Xaml.DependencyObject* searchScope, [out] [retval] Windows.UI.Xaml.DependencyObject** result);
                    HRESULT FindLastFocusableElement([in] Windows.UI.Xaml.DependencyObject* searchScope, [out] [retval] Windows.UI.Xaml.DependencyObject** result);
                    [overload("FindNextElement")] HRESULT FindNextElementWithOptions([in] Windows.UI.Xaml.Input.FocusNavigationDirection focusNavigationDirection, [in] Windows.UI.Xaml.Input.FindNextElementOptions* focusNavigationOptions, [out] [retval] Windows.UI.Xaml.DependencyObject** result);
                }

                [contract(Windows.Foundation.UniversalApiContract, 6.0)]
                [exclusiveto(Windows.UI.Xaml.Input.FocusManager)]
                [uuid(280EDC61-207A-4D7B-B98F-CE165E1B2015)]
                interface IFocusManagerStatics5 : IInspectable
                {
                    HRESULT TryFocusAsync([in] Windows.UI.Xaml.DependencyObject* element, [in] Windows.UI.Xaml.FocusState value, [out] [retval] Windows.Foundation.IAsyncOperation<Windows.UI.Xaml.Input.FocusMovementResult*>** operation);
                    [overload("TryMoveFocusAsync")] HRESULT TryMoveFocusAsync([in] Windows.UI.Xaml.Input.FocusNavigationDirection focusNavigationDirection, [out] [retval] Windows.Foundation.IAsyncOperation<Windows.UI.Xaml.Input.FocusMovementResult*>** operation);
                    [overload("TryMoveFocusAsync")] HRESULT TryMoveFocusWithOptionsAsync([in] Windows.UI.Xaml.Input.FocusNavigationDirection focusNavigationDirection, [in] Windows.UI.Xaml.Input.FindNextElementOptions* focusNavigationOptions, [out] [retval] Windows.Foundation.IAsyncOperation<Windows.UI.Xaml.Input.FocusMovementResult*>** operation);
                }

                [contract(Windows.Foundation.UniversalApiContract, 7.0)]
                [exclusiveto(Windows.UI.Xaml.Input.FocusManager)]
                [uuid(3546A1B6-20BF-5007-929D-E6D32E16AFE4)]
                interface IFocusManagerStatics6 : IInspectable
                {
                    [eventadd] HRESULT GotFocus([in] Windows.Foundation.EventHandler<Windows.UI.Xaml.Input.FocusManagerGotFocusEventArgs*>* handler, [out] [retval] EventRegistrationToken* token);
                    [eventremove] HRESULT GotFocus([in] EventRegistrationToken token);
                    [eventadd] HRESULT LostFocus([in] Windows.Foundation.EventHandler<Windows.UI.Xaml.Input.FocusManagerLostFocusEventArgs*>* handler, [out] [retval] EventRegistrationToken* token);
                    [eventremove] HRESULT LostFocus([in] EventRegistrationToken token);
                    [eventadd] HRESULT GettingFocus([in] Windows.Foundation.EventHandler<Windows.UI.Xaml.Input.GettingFocusEventArgs*>* handler, [out] [retval] EventRegistrationToken* token);
                    [eventremove] HRESULT GettingFocus([in] EventRegistrationToken token);
                    [eventadd] HRESULT LosingFocus([in] Windows.Foundation.EventHandler<Windows.UI.Xaml.Input.LosingFocusEventArgs*>* handler, [out] [retval] EventRegistrationToken* token);
                    [eventremove] HRESULT LosingFocus([in] EventRegistrationToken token);
                }

                [contract(Windows.Foundation.UniversalApiContract, 8.0)]
                [exclusiveto(Windows.UI.Xaml.Input.FocusManager)]
                [uuid(95D6FA97-F0FC-5C32-B29D-07C04EC966B0)]
                interface IFocusManagerStatics7 : IInspectable
                {
                    [overload("GetFocusedElement")] HRESULT GetFocusedElement([in] Windows.UI.Xaml.XamlRoot* xamlRoot, [out] [retval] IInspectable** result);
                }

                [contract(Windows.Foundation.UniversalApiContract, 6.0)]
                [exclusiveto(Windows.UI.Xaml.Input.FocusMovementResult)]
                [uuid(06DFEAD3-C2AE-44BB-BFAB-9C73DE8407A4)]
                interface IFocusMovementResult : IInspectable
                {
                    [propget] HRESULT Succeeded([out] [retval] boolean* value);
                }

                [contract(Windows.Foundation.UniversalApiContract, 4.0)]
                [exclusiveto(Windows.UI.Xaml.Input.GettingFocusEventArgs)]
                [uuid(FA05B9CE-C67C-4BE8-8FD4-C44D67877E0D)]
                interface IGettingFocusEventArgs : IInspectable
                {
                    [propget] HRESULT OldFocusedElement([out] [retval] Windows.UI.Xaml.DependencyObject** value);
                    [propget] HRESULT NewFocusedElement([out] [retval] Windows.UI.Xaml.DependencyObject** value);
                    [propput] HRESULT NewFocusedElement([in] Windows.UI.Xaml.DependencyObject* value);
                    [propget] HRESULT FocusState([out] [retval] Windows.UI.Xaml.FocusState* value);
                    [propget] HRESULT Direction([out] [retval] Windows.UI.Xaml.Input.FocusNavigationDirection* value);
                    [propget] HRESULT Handled([out] [retval] boolean* value);
                    [propput] HRESULT Handled([in] boolean value);
                    [propget] HRESULT InputDevice([out] [retval] Windows.UI.Xaml.Input.FocusInputDeviceKind* value);
                    [propget] HRESULT Cancel([out] [retval] boolean* value);
                    [propput] HRESULT Cancel([in] boolean value);
                }

                [contract(Windows.Foundation.UniversalApiContract, 6.0)]
                [exclusiveto(Windows.UI.Xaml.Input.GettingFocusEventArgs)]
                [uuid(88754D7B-B4B9-4959-8BCE-89BF212ED4EB)]
                interface IGettingFocusEventArgs2 : IInspectable
                {
                    HRESULT TryCancel([out] [retval] boolean* result);
                    HRESULT TrySetNewFocusedElement([in] Windows.UI.Xaml.DependencyObject* element, [out] [retval] boolean* result);
                }

                [contract(Windows.Foundation.UniversalApiContract, 7.0)]
                [exclusiveto(Windows.UI.Xaml.Input.GettingFocusEventArgs)]
                [uuid(4E024891-DB3F-5E78-B75A-62BFC3510735)]
                interface IGettingFocusEventArgs3 : IInspectable
                {
                    [propget] HRESULT CorrelationId([out] [retval] GUID* value);
                }

                [contract(Windows.Foundation.UniversalApiContract, 1.0)]
                [exclusiveto(Windows.UI.Xaml.Input.HoldingRoutedEventArgs)]
                [uuid(C246FF23-D80D-44DE-8DB9-0D815E269AC0)]
                interface IHoldingRoutedEventArgs : IInspectable
                {
                    [propget] HRESULT PointerDeviceType([out] [retval] Windows.Devices.Input.PointerDeviceType* value);
                    [propget] HRESULT HoldingState([out] [retval] Windows.UI.Input.HoldingState* value);
                    [propget] HRESULT Handled([out] [retval] boolean* value);
                    [propput] HRESULT Handled([in] boolean value);
                    HRESULT GetPosition([in] Windows.UI.Xaml.UIElement* relativeTo, [out] [retval] Windows.Foundation.Point* result);
                }

                [contract(Windows.Foundation.UniversalApiContract, 1.0)]
                [exclusiveto(Windows.UI.Xaml.Input.InertiaExpansionBehavior)]
                [uuid(751D87E5-8D42-44C5-965E-3CD30CC9D6F7)]
                interface IInertiaExpansionBehavior : IInspectable
                {
                    [propget] HRESULT DesiredDeceleration([out] [retval] DOUBLE* value);
                    [propput] HRESULT DesiredDeceleration([in] DOUBLE value);
                    [propget] HRESULT DesiredExpansion([out] [retval] DOUBLE* value);
                    [propput] HRESULT DesiredExpansion([in] DOUBLE value);
                }

                [contract(Windows.Foundation.UniversalApiContract, 1.0)]
                [exclusiveto(Windows.UI.Xaml.Input.InertiaRotationBehavior)]
                [uuid(424CFB2E-BBFD-4625-AE78-20C65BF1EFAF)]
                interface IInertiaRotationBehavior : IInspectable
                {
                    [propget] HRESULT DesiredDeceleration([out] [retval] DOUBLE* value);
                    [propput] HRESULT DesiredDeceleration([in] DOUBLE value);
                    [propget] HRESULT DesiredRotation([out] [retval] DOUBLE* value);
                    [propput] HRESULT DesiredRotation([in] DOUBLE value);
                }

                [contract(Windows.Foundation.UniversalApiContract, 1.0)]
                [exclusiveto(Windows.UI.Xaml.Input.InertiaTranslationBehavior)]
                [uuid(45D3A512-3B32-4882-A4C2-ECFA2D4B6DF0)]
                interface IInertiaTranslationBehavior : IInspectable
                {
                    [propget] HRESULT DesiredDeceleration([out] [retval] DOUBLE* value);
                    [propput] HRESULT DesiredDeceleration([in] DOUBLE value);
                    [propget] HRESULT DesiredDisplacement([out] [retval] DOUBLE* value);
                    [propput] HRESULT DesiredDisplacement([in] DOUBLE value);
                }

                [contract(Windows.Foundation.UniversalApiContract, 1.0)]
                [exclusiveto(Windows.UI.Xaml.Input.InputScope)]
                [uuid(5C0F85F3-F9D8-4220-B666-045D074D9BFA)]
                interface IInputScope : IInspectable
                {
                    [propget] HRESULT Names([out] [retval] Windows.Foundation.Collections.IVector<Windows.UI.Xaml.Input.InputScopeName*>** value);
                }

                [contract(Windows.Foundation.UniversalApiContract, 1.0)]
                [exclusiveto(Windows.UI.Xaml.Input.InputScopeName)]
                [uuid(FD3E6997-08FB-4CBA-A021-792D7589FD5A)]
                interface IInputScopeName : IInspectable
                {
                    [propget] HRESULT NameValue([out] [retval] Windows.UI.Xaml.Input.InputScopeNameValue* value);
                    [propput] HRESULT NameValue([in] Windows.UI.Xaml.Input.InputScopeNameValue value);
                }

                [contract(Windows.Foundation.UniversalApiContract, 1.0)]
                [exclusiveto(Windows.UI.Xaml.Input.InputScopeName)]
                [uuid(4A40BB52-4BD7-4E54-8617-1CDA8A1EDA7F)]
                interface IInputScopeNameFactory : IInspectable
                {
                    HRESULT CreateInstance([in] Windows.UI.Xaml.Input.InputScopeNameValue nameValue, [out] [retval] Windows.UI.Xaml.Input.InputScopeName** value);
                }

                [contract(Windows.Foundation.UniversalApiContract, 1.0)]
                [exclusiveto(Windows.UI.Xaml.Input.KeyRoutedEventArgs)]
                [uuid(D4CD3DFE-4079-42E9-A39A-3095D3F049C6)]
                interface IKeyRoutedEventArgs : IInspectable
                {
                    [propget] HRESULT Key([out] [retval] Windows.System.VirtualKey* value);
                    [propget] HRESULT KeyStatus([out] [retval] Windows.UI.Core.CorePhysicalKeyStatus* value);
                    [propget] HRESULT Handled([out] [retval] boolean* value);
                    [propput] HRESULT Handled([in] boolean value);
                }

                [contract(Windows.Foundation.UniversalApiContract, 1.0)]
                [exclusiveto(Windows.UI.Xaml.Input.KeyRoutedEventArgs)]
                [uuid(1B02D57A-9634-4F14-91B2-133E42FDB3CD)]
                interface IKeyRoutedEventArgs2 : IInspectable
                {
                    [propget] HRESULT OriginalKey([out] [retval] Windows.System.VirtualKey* value);
                }

                [contract(Windows.Foundation.UniversalApiContract, 3.0)]
                [exclusiveto(Windows.UI.Xaml.Input.KeyRoutedEventArgs)]
                [uuid(2779F5B4-CA41-411B-A8EF-F4FC78E78057)]
                interface IKeyRoutedEventArgs3 : IInspectable
                {
                    [propget] HRESULT DeviceId([out] [retval] HSTRING* value);
                }

                [contract(Windows.Foundation.UniversalApiContract, 5.0)]
                [exclusiveto(Windows.UI.Xaml.Input.KeyboardAccelerator)]
                [uuid(92E6181E-19AE-465A-9B3C-A71EE9EA7420)]
                interface IKeyboardAccelerator : IInspectable
                {
                    [propget] HRESULT Key([out] [retval] Windows.System.VirtualKey* value);
                    [propput] HRESULT Key([in] Windows.System.VirtualKey value);
                    [propget] HRESULT Modifiers([out] [retval] Windows.System.VirtualKeyModifiers* value);
                    [propput] HRESULT Modifiers([in] Windows.System.VirtualKeyModifiers value);
                    [propget] HRESULT IsEnabled([out] [retval] boolean* value);
                    [propput] HRESULT IsEnabled([in] boolean value);
                    [propget] HRESULT ScopeOwner([out] [retval] Windows.UI.Xaml.DependencyObject** value);
                    [propput] HRESULT ScopeOwner([in] Windows.UI.Xaml.DependencyObject* value);
                    [eventadd] HRESULT Invoked([in] Windows.Foundation.TypedEventHandler<Windows.UI.Xaml.Input.KeyboardAccelerator*, Windows.UI.Xaml.Input.KeyboardAcceleratorInvokedEventArgs*>* handler, [out] [retval] EventRegistrationToken* token);
                    [eventremove] HRESULT Invoked([in] EventRegistrationToken token);
                }

                [contract(Windows.Foundation.UniversalApiContract, 5.0)]
                [exclusiveto(Windows.UI.Xaml.Input.KeyboardAccelerator)]
                [uuid(44D88A99-4BFD-4A47-A893-515F388623F6)]
                interface IKeyboardAcceleratorFactory : IInspectable
                {
                    HRESULT CreateInstance([in] IInspectable* baseInterface, [out] IInspectable** innerInterface, [out] [retval] Windows.UI.Xaml.Input.KeyboardAccelerator** value);
                }

                [contract(Windows.Foundation.UniversalApiContract, 5.0)]
                [exclusiveto(Windows.UI.Xaml.Input.KeyboardAcceleratorInvokedEventArgs)]
                [uuid(C00B03F2-04E7-4415-B17D-D76B9490DE2B)]
                interface IKeyboardAcceleratorInvokedEventArgs : IInspectable
                {
                    [propget] HRESULT Handled([out] [retval] boolean* value);
                    [propput] HRESULT Handled([in] boolean value);
                    [propget] HRESULT Element([out] [retval] Windows.UI.Xaml.DependencyObject** value);
                }

                [contract(Windows.Foundation.UniversalApiContract, 6.0)]
                [exclusiveto(Windows.UI.Xaml.Input.KeyboardAcceleratorInvokedEventArgs)]
                [uuid(BEFCA4B8-5907-48EE-8E21-9C969078FA11)]
                interface IKeyboardAcceleratorInvokedEventArgs2 : IInspectable
                {
                    [propget] HRESULT KeyboardAccelerator([out] [retval] Windows.UI.Xaml.Input.KeyboardAccelerator** value);
                }

                [contract(Windows.Foundation.UniversalApiContract, 5.0)]
                [exclusiveto(Windows.UI.Xaml.Input.KeyboardAccelerator)]
                [uuid(3BD43D51-9BB3-456D-BF15-804ADFB86261)]
                interface IKeyboardAcceleratorStatics : IInspectable
                {
                    [propget] HRESULT KeyProperty([out] [retval] Windows.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT ModifiersProperty([out] [retval] Windows.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT IsEnabledProperty([out] [retval] Windows.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT ScopeOwnerProperty([out] [retval] Windows.UI.Xaml.DependencyProperty** value);
                }

                [contract(Windows.Foundation.UniversalApiContract, 4.0)]
                [exclusiveto(Windows.UI.Xaml.Input.LosingFocusEventArgs)]
                [uuid(F9F683C7-D789-472B-AA93-6D4105E6DABE)]
                interface ILosingFocusEventArgs : IInspectable
                {
                    [propget] HRESULT OldFocusedElement([out] [retval] Windows.UI.Xaml.DependencyObject** value);
                    [propget] HRESULT NewFocusedElement([out] [retval] Windows.UI.Xaml.DependencyObject** value);
                    [propput] HRESULT NewFocusedElement([in] Windows.UI.Xaml.DependencyObject* value);
                    [propget] HRESULT FocusState([out] [retval] Windows.UI.Xaml.FocusState* value);
                    [propget] HRESULT Direction([out] [retval] Windows.UI.Xaml.Input.FocusNavigationDirection* value);
                    [propget] HRESULT Handled([out] [retval] boolean* value);
                    [propput] HRESULT Handled([in] boolean value);
                    [propget] HRESULT InputDevice([out] [retval] Windows.UI.Xaml.Input.FocusInputDeviceKind* value);
                    [propget] HRESULT Cancel([out] [retval] boolean* value);
                    [propput] HRESULT Cancel([in] boolean value);
                }

                [contract(Windows.Foundation.UniversalApiContract, 6.0)]
                [exclusiveto(Windows.UI.Xaml.Input.LosingFocusEventArgs)]
                [uuid(0493FAD9-C27F-469F-8E62-52B3A4F7CD54)]
                interface ILosingFocusEventArgs2 : IInspectable
                {
                    HRESULT TryCancel([out] [retval] boolean* result);
                    HRESULT TrySetNewFocusedElement([in] Windows.UI.Xaml.DependencyObject* element, [out] [retval] boolean* result);
                }

                [contract(Windows.Foundation.UniversalApiContract, 7.0)]
                [exclusiveto(Windows.UI.Xaml.Input.LosingFocusEventArgs)]
                [uuid(C98900BD-0B79-566E-AD1F-436FA513AE22)]
                interface ILosingFocusEventArgs3 : IInspectable
                {
                    [propget] HRESULT CorrelationId([out] [retval] GUID* value);
                }

                [contract(Windows.Foundation.UniversalApiContract, 1.0)]
                [exclusiveto(Windows.UI.Xaml.Input.ManipulationCompletedRoutedEventArgs)]
                [uuid(B5AD9B23-2F41-498E-8319-015EE8A75346)]
                interface IManipulationCompletedRoutedEventArgs : IInspectable
                {
                    [propget] HRESULT Container([out] [retval] Windows.UI.Xaml.UIElement** value);
                    [propget] HRESULT Position([out] [retval] Windows.Foundation.Point* value);
                    [propget] HRESULT IsInertial([out] [retval] boolean* value);
                    [propget] HRESULT Cumulative([out] [retval] Windows.UI.Input.ManipulationDelta* value);
                    [propget] HRESULT Velocities([out] [retval] Windows.UI.Input.ManipulationVelocities* value);
                    [propget] HRESULT Handled([out] [retval] boolean* value);
                    [propput] HRESULT Handled([in] boolean value);
                    [propget] HRESULT PointerDeviceType([out] [retval] Windows.Devices.Input.PointerDeviceType* value);
                }

                [contract(Windows.Foundation.UniversalApiContract, 1.0)]
                [exclusiveto(Windows.UI.Xaml.Input.ManipulationDeltaRoutedEventArgs)]
                [uuid(400D5794-4C6F-491D-82D6-3517109399C6)]
                interface IManipulationDeltaRoutedEventArgs : IInspectable
                {
                    [propget] HRESULT Container([out] [retval] Windows.UI.Xaml.UIElement** value);
                    [propget] HRESULT Position([out] [retval] Windows.Foundation.Point* value);
                    [propget] HRESULT IsInertial([out] [retval] boolean* value);
                    [propget] HRESULT Delta([out] [retval] Windows.UI.Input.ManipulationDelta* value);
                    [propget] HRESULT Cumulative([out] [retval] Windows.UI.Input.ManipulationDelta* value);
                    [propget] HRESULT Velocities([out] [retval] Windows.UI.Input.ManipulationVelocities* value);
                    [propget] HRESULT Handled([out] [retval] boolean* value);
                    [propput] HRESULT Handled([in] boolean value);
                    [propget] HRESULT PointerDeviceType([out] [retval] Windows.Devices.Input.PointerDeviceType* value);
                    HRESULT Complete();
                }

                [contract(Windows.Foundation.UniversalApiContract, 1.0)]
                [exclusiveto(Windows.UI.Xaml.Input.ManipulationInertiaStartingRoutedEventArgs)]
                [uuid(246A91A9-CA43-4C0B-ACEF-81E8B8147520)]
                interface IManipulationInertiaStartingRoutedEventArgs : IInspectable
                {
                    [propget] HRESULT Container([out] [retval] Windows.UI.Xaml.UIElement** value);
                    [propget] HRESULT ExpansionBehavior([out] [retval] Windows.UI.Xaml.Input.InertiaExpansionBehavior** value);
                    [propput] HRESULT ExpansionBehavior([in] Windows.UI.Xaml.Input.InertiaExpansionBehavior* value);
                    [propget] HRESULT RotationBehavior([out] [retval] Windows.UI.Xaml.Input.InertiaRotationBehavior** value);
                    [propput] HRESULT RotationBehavior([in] Windows.UI.Xaml.Input.InertiaRotationBehavior* value);
                    [propget] HRESULT TranslationBehavior([out] [retval] Windows.UI.Xaml.Input.InertiaTranslationBehavior** value);
                    [propput] HRESULT TranslationBehavior([in] Windows.UI.Xaml.Input.InertiaTranslationBehavior* value);
                    [propget] HRESULT Handled([out] [retval] boolean* value);
                    [propput] HRESULT Handled([in] boolean value);
                    [propget] HRESULT PointerDeviceType([out] [retval] Windows.Devices.Input.PointerDeviceType* value);
                    [propget] HRESULT Delta([out] [retval] Windows.UI.Input.ManipulationDelta* value);
                    [propget] HRESULT Cumulative([out] [retval] Windows.UI.Input.ManipulationDelta* value);
                    [propget] HRESULT Velocities([out] [retval] Windows.UI.Input.ManipulationVelocities* value);
                }

                [contract(Windows.Foundation.UniversalApiContract, 1.0)]
                [exclusiveto(Windows.UI.Xaml.Input.ManipulationPivot)]
                [uuid(2E3838A5-E6C2-4998-82AC-18748B141666)]
                interface IManipulationPivot : IInspectable
                {
                    [propget] HRESULT Center([out] [retval] Windows.Foundation.Point* value);
                    [propput] HRESULT Center([in] Windows.Foundation.Point value);
                    [propget] HRESULT Radius([out] [retval] DOUBLE* value);
                    [propput] HRESULT Radius([in] DOUBLE value);
                }

                [contract(Windows.Foundation.UniversalApiContract, 1.0)]
                [exclusiveto(Windows.UI.Xaml.Input.ManipulationPivot)]
                [uuid(6D05B039-3702-4396-AD9B-A825EFA63A3B)]
                interface IManipulationPivotFactory : IInspectable
                {
                    HRESULT CreateInstanceWithCenterAndRadius([in] Windows.Foundation.Point center, [in] DOUBLE radius, [out] [retval] Windows.UI.Xaml.Input.ManipulationPivot** value);
                }

                [contract(Windows.Foundation.UniversalApiContract, 1.0)]
                [exclusiveto(Windows.UI.Xaml.Input.ManipulationStartedRoutedEventArgs)]
                [uuid(5DB1AA05-9F80-48B6-AE6C-4F119DE8FF13)]
                interface IManipulationStartedRoutedEventArgs : IInspectable
                {
                    [propget] HRESULT Container([out] [retval] Windows.UI.Xaml.UIElement** value);
                    [propget] HRESULT Position([out] [retval] Windows.Foundation.Point* value);
                    [propget] HRESULT Handled([out] [retval] boolean* value);
                    [propput] HRESULT Handled([in] boolean value);
                    [propget] HRESULT PointerDeviceType([out] [retval] Windows.Devices.Input.PointerDeviceType* value);
                    [propget] HRESULT Cumulative([out] [retval] Windows.UI.Input.ManipulationDelta* value);
                    HRESULT Complete();
                }

                [contract(Windows.Foundation.UniversalApiContract, 1.0)]
                [exclusiveto(Windows.UI.Xaml.Input.ManipulationStartedRoutedEventArgs)]
                [uuid(84C1DAA7-7272-4463-B6C3-A40B9BA151FC)]
                interface IManipulationStartedRoutedEventArgsFactory : IInspectable
                {
                    HRESULT CreateInstance([in] IInspectable* baseInterface, [out] IInspectable** innerInterface, [out] [retval] Windows.UI.Xaml.Input.ManipulationStartedRoutedEventArgs** value);
                }

                [contract(Windows.Foundation.UniversalApiContract, 1.0)]
                [exclusiveto(Windows.UI.Xaml.Input.ManipulationStartingRoutedEventArgs)]
                [uuid(18D636B7-53A4-4C15-A498-F3A9CA212A42)]
                interface IManipulationStartingRoutedEventArgs : IInspectable
                {
                    [propget] HRESULT Mode([out] [retval] Windows.UI.Xaml.Input.ManipulationModes* value);
                    [propput] HRESULT Mode([in] Windows.UI.Xaml.Input.ManipulationModes value);
                    [propget] HRESULT Container([out] [retval] Windows.UI.Xaml.UIElement** value);
                    [propput] HRESULT Container([in] Windows.UI.Xaml.UIElement* value);
                    [propget] HRESULT Pivot([out] [retval] Windows.UI.Xaml.Input.ManipulationPivot** value);
                    [propput] HRESULT Pivot([in] Windows.UI.Xaml.Input.ManipulationPivot* value);
                    [propget] HRESULT Handled([out] [retval] boolean* value);
                    [propput] HRESULT Handled([in] boolean value);
                }

                [contract(Windows.Foundation.UniversalApiContract, 4.0)]
                [exclusiveto(Windows.UI.Xaml.Input.NoFocusCandidateFoundEventArgs)]
                [uuid(EC3601A7-1007-48F9-B6B3-ED0BEA53937D)]
                interface INoFocusCandidateFoundEventArgs : IInspectable
                {
                    [propget] HRESULT Direction([out] [retval] Windows.UI.Xaml.Input.FocusNavigationDirection* value);
                    [propget] HRESULT Handled([out] [retval] boolean* value);
                    [propput] HRESULT Handled([in] boolean value);
                    [propget] HRESULT InputDevice([out] [retval] Windows.UI.Xaml.Input.FocusInputDeviceKind* value);
                }

                [contract(Windows.Foundation.UniversalApiContract, 1.0)]
                [exclusiveto(Windows.UI.Xaml.Input.Pointer)]
                [uuid(5EE8F39F-747D-4171-90E6-CD37A9DFFB11)]
                interface IPointer : IInspectable
                {
                    [propget] HRESULT PointerId([out] [retval] UINT32* value);
                    [propget] HRESULT PointerDeviceType([out] [retval] Windows.Devices.Input.PointerDeviceType* value);
                    [propget] HRESULT IsInContact([out] [retval] boolean* value);
                    [propget] HRESULT IsInRange([out] [retval] boolean* value);
                }

                [contract(Windows.Foundation.UniversalApiContract, 1.0)]
                [exclusiveto(Windows.UI.Xaml.Input.PointerRoutedEventArgs)]
                [uuid(DA628F0A-9752-49E2-BDE2-49ECCAB9194D)]
                interface IPointerRoutedEventArgs : IInspectable
                {
                    [propget] HRESULT Pointer([out] [retval] Windows.UI.Xaml.Input.Pointer** value);
                    [propget] HRESULT KeyModifiers([out] [retval] Windows.System.VirtualKeyModifiers* value);
                    [propget] HRESULT Handled([out] [retval] boolean* value);
                    [propput] HRESULT Handled([in] boolean value);
                    HRESULT GetCurrentPoint([in] Windows.UI.Xaml.UIElement* relativeTo, [out] [retval] Windows.UI.Input.PointerPoint** result);
                    HRESULT GetIntermediatePoints([in] Windows.UI.Xaml.UIElement* relativeTo, [out] [retval] Windows.Foundation.Collections.IVector<Windows.UI.Input.PointerPoint*>** result);
                }

                [contract(Windows.Foundation.UniversalApiContract, 5.0)]
                [exclusiveto(Windows.UI.Xaml.Input.PointerRoutedEventArgs)]
                [uuid(0821F294-1DE6-4711-BA7C-8D4B8B0911D0)]
                interface IPointerRoutedEventArgs2 : IInspectable
                {
                    [propget] HRESULT IsGenerated([out] [retval] boolean* value);
                }

                [contract(Windows.Foundation.UniversalApiContract, 5.0)]
                [exclusiveto(Windows.UI.Xaml.Input.ProcessKeyboardAcceleratorEventArgs)]
                [uuid(FB79C216-972B-440C-9B83-2B4198DCF09D)]
                interface IProcessKeyboardAcceleratorEventArgs : IInspectable
                {
                    [propget] HRESULT Key([out] [retval] Windows.System.VirtualKey* value);
                    [propget] HRESULT Modifiers([out] [retval] Windows.System.VirtualKeyModifiers* value);
                    [propget] HRESULT Handled([out] [retval] boolean* value);
                    [propput] HRESULT Handled([in] boolean value);
                }

                [contract(Windows.Foundation.UniversalApiContract, 1.0)]
                [exclusiveto(Windows.UI.Xaml.Input.RightTappedRoutedEventArgs)]
                [uuid(6834869D-7BD5-4033-B237-172F79ABE393)]
                interface IRightTappedRoutedEventArgs : IInspectable
                {
                    [propget] HRESULT PointerDeviceType([out] [retval] Windows.Devices.Input.PointerDeviceType* value);
                    [propget] HRESULT Handled([out] [retval] boolean* value);
                    [propput] HRESULT Handled([in] boolean value);
                    HRESULT GetPosition([in] Windows.UI.Xaml.UIElement* relativeTo, [out] [retval] Windows.Foundation.Point* result);
                }

                [contract(Windows.Foundation.UniversalApiContract, 7.0)]
                [exclusiveto(Windows.UI.Xaml.Input.StandardUICommand)]
                [uuid(D2BF7F43-0504-52D0-8AA6-0CB0F756EB27)]
                interface IStandardUICommand : IInspectable
                {
                    [propget] HRESULT Kind([out] [retval] Windows.UI.Xaml.Input.StandardUICommandKind* value);
                }

                [contract(Windows.Foundation.UniversalApiContract, 8.0)]
                [exclusiveto(Windows.UI.Xaml.Input.StandardUICommand)]
                [uuid(E3666069-F9E4-51EB-885B-7A620A0782EA)]
                interface IStandardUICommand2 : IInspectable
                {
                    [propput] HRESULT Kind([in] Windows.UI.Xaml.Input.StandardUICommandKind value);
                }

                [contract(Windows.Foundation.UniversalApiContract, 7.0)]
                [exclusiveto(Windows.UI.Xaml.Input.StandardUICommand)]
                [uuid(8F1A7590-DCE1-56E4-AB63-F5CE3CE4EBF6)]
                interface IStandardUICommandFactory : IInspectable
                {
                    HRESULT CreateInstance([in] IInspectable* baseInterface, [out] IInspectable** innerInterface, [out] [retval] Windows.UI.Xaml.Input.StandardUICommand** value);
                    HRESULT CreateInstanceWithKind([in] Windows.UI.Xaml.Input.StandardUICommandKind kind, [in] IInspectable* baseInterface, [out] IInspectable** innerInterface, [out] [retval] Windows.UI.Xaml.Input.StandardUICommand** value);
                }

                [contract(Windows.Foundation.UniversalApiContract, 7.0)]
                [exclusiveto(Windows.UI.Xaml.Input.StandardUICommand)]
                [uuid(7EA87ED9-2978-5533-9B2E-6759CE88569F)]
                interface IStandardUICommandStatics : IInspectable
                {
                    [propget] HRESULT KindProperty([out] [retval] Windows.UI.Xaml.DependencyProperty** value);
                }

                [contract(Windows.Foundation.UniversalApiContract, 1.0)]
                [exclusiveto(Windows.UI.Xaml.Input.TappedRoutedEventArgs)]
                [uuid(A099E6BE-E624-459A-BB1D-E05C73E2CC66)]
                interface ITappedRoutedEventArgs : IInspectable
                {
                    [propget] HRESULT PointerDeviceType([out] [retval] Windows.Devices.Input.PointerDeviceType* value);
                    [propget] HRESULT Handled([out] [retval] boolean* value);
                    [propput] HRESULT Handled([in] boolean value);
                    HRESULT GetPosition([in] Windows.UI.Xaml.UIElement* relativeTo, [out] [retval] Windows.Foundation.Point* result);
                }

                [contract(Windows.Foundation.UniversalApiContract, 7.0)]
                [exclusiveto(Windows.UI.Xaml.Input.XamlUICommand)]
                [uuid(8494F8D4-EAD1-5F01-AD2E-A8CAD4F9DC0E)]
                interface IXamlUICommand : IInspectable
                {
                    [propget] HRESULT Label([out] [retval] HSTRING* value);
                    [propput] HRESULT Label([in] HSTRING value);
                    [propget] HRESULT IconSource([out] [retval] Windows.UI.Xaml.Controls.IconSource** value);
                    [propput] HRESULT IconSource([in] Windows.UI.Xaml.Controls.IconSource* value);
                    [propget] HRESULT KeyboardAccelerators([out] [retval] Windows.Foundation.Collections.IVector<Windows.UI.Xaml.Input.KeyboardAccelerator*>** value);
                    [propget] HRESULT AccessKey([out] [retval] HSTRING* value);
                    [propput] HRESULT AccessKey([in] HSTRING value);
                    [propget] HRESULT Description([out] [retval] HSTRING* value);
                    [propput] HRESULT Description([in] HSTRING value);
                    [propget] HRESULT Command([out] [retval] Windows.UI.Xaml.Input.ICommand** value);
                    [propput] HRESULT Command([in] Windows.UI.Xaml.Input.ICommand* value);
                    [eventadd] HRESULT ExecuteRequested([in] Windows.Foundation.TypedEventHandler<Windows.UI.Xaml.Input.XamlUICommand*, Windows.UI.Xaml.Input.ExecuteRequestedEventArgs*>* handler, [out] [retval] EventRegistrationToken* token);
                    [eventremove] HRESULT ExecuteRequested([in] EventRegistrationToken token);
                    [eventadd] HRESULT CanExecuteRequested([in] Windows.Foundation.TypedEventHandler<Windows.UI.Xaml.Input.XamlUICommand*, Windows.UI.Xaml.Input.CanExecuteRequestedEventArgs*>* handler, [out] [retval] EventRegistrationToken* token);
                    [eventremove] HRESULT CanExecuteRequested([in] EventRegistrationToken token);
                    HRESULT NotifyCanExecuteChanged();
                }

                [contract(Windows.Foundation.UniversalApiContract, 7.0)]
                [exclusiveto(Windows.UI.Xaml.Input.XamlUICommand)]
                [uuid(1EEC08C3-E061-5E10-9F2A-2BAA840885C2)]
                interface IXamlUICommandFactory : IInspectable
                {
                    HRESULT CreateInstance([in] IInspectable* baseInterface, [out] IInspectable** innerInterface, [out] [retval] Windows.UI.Xaml.Input.XamlUICommand** value);
                }

                [contract(Windows.Foundation.UniversalApiContract, 7.0)]
                [exclusiveto(Windows.UI.Xaml.Input.XamlUICommand)]
                [uuid(66BC457C-1A0C-58ED-876E-71533F966DB6)]
                interface IXamlUICommandStatics : IInspectable
                {
                    [propget] HRESULT LabelProperty([out] [retval] Windows.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT IconSourceProperty([out] [retval] Windows.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT KeyboardAcceleratorsProperty([out] [retval] Windows.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT AccessKeyProperty([out] [retval] Windows.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT DescriptionProperty([out] [retval] Windows.UI.Xaml.DependencyProperty** value);
                    [propget] HRESULT CommandProperty([out] [retval] Windows.UI.Xaml.DependencyProperty** value);
                }

                [activatable(Windows.Foundation.UniversalApiContract, 3.0)]
                [contract(Windows.Foundation.UniversalApiContract, 3.0)]
                [marshaling_behavior(agile)]
                [threading(both)]
                runtimeclass AccessKeyDisplayDismissedEventArgs
                {
                    [default] interface Windows.UI.Xaml.Input.IAccessKeyDisplayDismissedEventArgs;
                }

                [activatable(Windows.Foundation.UniversalApiContract, 3.0)]
                [contract(Windows.Foundation.UniversalApiContract, 3.0)]
                [marshaling_behavior(agile)]
                [threading(both)]
                runtimeclass AccessKeyDisplayRequestedEventArgs
                {
                    [default] interface Windows.UI.Xaml.Input.IAccessKeyDisplayRequestedEventArgs;
                }

                [activatable(Windows.Foundation.UniversalApiContract, 3.0)]
                [contract(Windows.Foundation.UniversalApiContract, 3.0)]
                [marshaling_behavior(agile)]
                [threading(both)]
                runtimeclass AccessKeyInvokedEventArgs
                {
                    [default] interface Windows.UI.Xaml.Input.IAccessKeyInvokedEventArgs;
                }

                [contract(Windows.Foundation.UniversalApiContract, 3.0)]
                [marshaling_behavior(agile)]
                [static(Windows.UI.Xaml.Input.IAccessKeyManagerStatics, Windows.Foundation.UniversalApiContract, 3.0)]
                [static(Windows.UI.Xaml.Input.IAccessKeyManagerStatics2, Windows.Foundation.UniversalApiContract, 4.0)]
                [threading(both)]
                runtimeclass AccessKeyManager
                {
                    [default] interface Windows.UI.Xaml.Input.IAccessKeyManager;
                }

                [contract(Windows.Foundation.UniversalApiContract, 7.0)]
                [marshaling_behavior(agile)]
                runtimeclass CanExecuteRequestedEventArgs
                {
                    [default] interface Windows.UI.Xaml.Input.ICanExecuteRequestedEventArgs;
                }

                [contract(Windows.Foundation.UniversalApiContract, 5.0)]
                [marshaling_behavior(agile)]
                [threading(both)]
                runtimeclass CharacterReceivedRoutedEventArgs : Windows.UI.Xaml.RoutedEventArgs
                {
                    [default] interface Windows.UI.Xaml.Input.ICharacterReceivedRoutedEventArgs;
                }

                [activatable(Windows.Foundation.UniversalApiContract, 3.0)]
                [contract(Windows.Foundation.UniversalApiContract, 3.0)]
                [marshaling_behavior(agile)]
                [threading(both)]
                runtimeclass ContextRequestedEventArgs : Windows.UI.Xaml.RoutedEventArgs
                {
                    [default] interface Windows.UI.Xaml.Input.IContextRequestedEventArgs;
                }

                [activatable(Windows.Foundation.UniversalApiContract, 1.0)]
                [contract(Windows.Foundation.UniversalApiContract, 1.0)]
                [marshaling_behavior(agile)]
                [threading(both)]
                runtimeclass DoubleTappedRoutedEventArgs : Windows.UI.Xaml.RoutedEventArgs
                {
                    [default] interface Windows.UI.Xaml.Input.IDoubleTappedRoutedEventArgs;
                }

                [contract(Windows.Foundation.UniversalApiContract, 7.0)]
                [marshaling_behavior(agile)]
                runtimeclass ExecuteRequestedEventArgs
                {
                    [default] interface Windows.UI.Xaml.Input.IExecuteRequestedEventArgs;
                }

                [activatable(Windows.Foundation.UniversalApiContract, 4.0)]
                [contract(Windows.Foundation.UniversalApiContract, 4.0)]
                [marshaling_behavior(agile)]
                [threading(both)]
                runtimeclass FindNextElementOptions
                {
                    [default] interface Windows.UI.Xaml.Input.IFindNextElementOptions;
                }

                [contract(Windows.Foundation.UniversalApiContract, 1.0)]
                [marshaling_behavior(agile)]
                [static(Windows.UI.Xaml.Input.IFocusManagerStatics, Windows.Foundation.UniversalApiContract, 1.0)]
                [static(Windows.UI.Xaml.Input.IFocusManagerStatics2, Windows.Foundation.UniversalApiContract, 1.0)]
                [static(Windows.UI.Xaml.Input.IFocusManagerStatics3, Windows.Foundation.UniversalApiContract, 1.0)]
                [static(Windows.UI.Xaml.Input.IFocusManagerStatics4, Windows.Foundation.UniversalApiContract, 4.0)]
                [static(Windows.UI.Xaml.Input.IFocusManagerStatics5, Windows.Foundation.UniversalApiContract, 6.0)]
                [static(Windows.UI.Xaml.Input.IFocusManagerStatics6, Windows.Foundation.UniversalApiContract, 7.0)]
                [static(Windows.UI.Xaml.Input.IFocusManagerStatics7, Windows.Foundation.UniversalApiContract, 8.0)]
                [threading(both)]
                runtimeclass FocusManager
                {
                    [default] interface Windows.UI.Xaml.Input.IFocusManager;
                }

                [contract(Windows.Foundation.UniversalApiContract, 7.0)]
                [marshaling_behavior(agile)]
                runtimeclass FocusManagerGotFocusEventArgs
                {
                    [default] interface Windows.UI.Xaml.Input.IFocusManagerGotFocusEventArgs;
                }

                [contract(Windows.Foundation.UniversalApiContract, 7.0)]
                [marshaling_behavior(agile)]
                runtimeclass FocusManagerLostFocusEventArgs
                {
                    [default] interface Windows.UI.Xaml.Input.IFocusManagerLostFocusEventArgs;
                }

                [contract(Windows.Foundation.UniversalApiContract, 6.0)]
                [marshaling_behavior(agile)]
                runtimeclass FocusMovementResult
                {
                    [default] interface Windows.UI.Xaml.Input.IFocusMovementResult;
                }

                [contract(Windows.Foundation.UniversalApiContract, 4.0)]
                [marshaling_behavior(agile)]
                [threading(both)]
                runtimeclass GettingFocusEventArgs : Windows.UI.Xaml.RoutedEventArgs
                {
                    [default] interface Windows.UI.Xaml.Input.IGettingFocusEventArgs;
                    [contract(Windows.Foundation.UniversalApiContract, 6.0)] interface Windows.UI.Xaml.Input.IGettingFocusEventArgs2;
                    [contract(Windows.Foundation.UniversalApiContract, 7.0)] interface Windows.UI.Xaml.Input.IGettingFocusEventArgs3;
                }

                [activatable(Windows.Foundation.UniversalApiContract, 1.0)]
                [contract(Windows.Foundation.UniversalApiContract, 1.0)]
                [marshaling_behavior(agile)]
                [threading(both)]
                runtimeclass HoldingRoutedEventArgs : Windows.UI.Xaml.RoutedEventArgs
                {
                    [default] interface Windows.UI.Xaml.Input.IHoldingRoutedEventArgs;
                }

                [contract(Windows.Foundation.UniversalApiContract, 1.0)]
                [marshaling_behavior(agile)]
                runtimeclass InertiaExpansionBehavior
                {
                    [default] interface Windows.UI.Xaml.Input.IInertiaExpansionBehavior;
                }

                [contract(Windows.Foundation.UniversalApiContract, 1.0)]
                [marshaling_behavior(agile)]
                runtimeclass InertiaRotationBehavior
                {
                    [default] interface Windows.UI.Xaml.Input.IInertiaRotationBehavior;
                }

                [contract(Windows.Foundation.UniversalApiContract, 1.0)]
                [marshaling_behavior(agile)]
                runtimeclass InertiaTranslationBehavior
                {
                    [default] interface Windows.UI.Xaml.Input.IInertiaTranslationBehavior;
                }

                [activatable(Windows.Foundation.UniversalApiContract, 1.0)]
                [contract(Windows.Foundation.UniversalApiContract, 1.0)]
                [marshaling_behavior(agile)]
                [threading(both)]
                runtimeclass InputScope : Windows.UI.Xaml.DependencyObject
                {
                    [default] interface Windows.UI.Xaml.Input.IInputScope;
                }

                [activatable(Windows.Foundation.UniversalApiContract, 1.0)]
                [activatable(Windows.UI.Xaml.Input.IInputScopeNameFactory, Windows.Foundation.UniversalApiContract, 1.0)]
                [contract(Windows.Foundation.UniversalApiContract, 1.0)]
                [marshaling_behavior(agile)]
                [threading(both)]
                runtimeclass InputScopeName : Windows.UI.Xaml.DependencyObject
                {
                    [default] interface Windows.UI.Xaml.Input.IInputScopeName;
                }

                [contract(Windows.Foundation.UniversalApiContract, 1.0)]
                [marshaling_behavior(agile)]
                [threading(both)]
                runtimeclass KeyRoutedEventArgs : Windows.UI.Xaml.RoutedEventArgs
                {
                    [default] interface Windows.UI.Xaml.Input.IKeyRoutedEventArgs;
                    [contract(Windows.Foundation.UniversalApiContract, 1.0)] interface Windows.UI.Xaml.Input.IKeyRoutedEventArgs2;
                    [contract(Windows.Foundation.UniversalApiContract, 3.0)] interface Windows.UI.Xaml.Input.IKeyRoutedEventArgs3;
                }

                [composable(Windows.UI.Xaml.Input.IKeyboardAcceleratorFactory, public, Windows.Foundation.UniversalApiContract, 5.0)]
                [contract(Windows.Foundation.UniversalApiContract, 5.0)]
                [marshaling_behavior(agile)]
                [static(Windows.UI.Xaml.Input.IKeyboardAcceleratorStatics, Windows.Foundation.UniversalApiContract, 5.0)]
                [threading(both)]
                runtimeclass KeyboardAccelerator : Windows.UI.Xaml.DependencyObject
                {
                    [default] interface Windows.UI.Xaml.Input.IKeyboardAccelerator;
                }

                [contract(Windows.Foundation.UniversalApiContract, 5.0)]
                [marshaling_behavior(agile)]
                runtimeclass KeyboardAcceleratorInvokedEventArgs
                {
                    [default] interface Windows.UI.Xaml.Input.IKeyboardAcceleratorInvokedEventArgs;
                    [contract(Windows.Foundation.UniversalApiContract, 6.0)] interface Windows.UI.Xaml.Input.IKeyboardAcceleratorInvokedEventArgs2;
                }

                [contract(Windows.Foundation.UniversalApiContract, 4.0)]
                [marshaling_behavior(agile)]
                [threading(both)]
                runtimeclass LosingFocusEventArgs : Windows.UI.Xaml.RoutedEventArgs
                {
                    [default] interface Windows.UI.Xaml.Input.ILosingFocusEventArgs;
                    [contract(Windows.Foundation.UniversalApiContract, 6.0)] interface Windows.UI.Xaml.Input.ILosingFocusEventArgs2;
                    [contract(Windows.Foundation.UniversalApiContract, 7.0)] interface Windows.UI.Xaml.Input.ILosingFocusEventArgs3;
                }

                [activatable(Windows.Foundation.UniversalApiContract, 1.0)]
                [contract(Windows.Foundation.UniversalApiContract, 1.0)]
                [marshaling_behavior(agile)]
                [threading(both)]
                runtimeclass ManipulationCompletedRoutedEventArgs : Windows.UI.Xaml.RoutedEventArgs
                {
                    [default] interface Windows.UI.Xaml.Input.IManipulationCompletedRoutedEventArgs;
                }

                [activatable(Windows.Foundation.UniversalApiContract, 1.0)]
                [contract(Windows.Foundation.UniversalApiContract, 1.0)]
                [marshaling_behavior(agile)]
                [threading(both)]
                runtimeclass ManipulationDeltaRoutedEventArgs : Windows.UI.Xaml.RoutedEventArgs
                {
                    [default] interface Windows.UI.Xaml.Input.IManipulationDeltaRoutedEventArgs;
                }

                [activatable(Windows.Foundation.UniversalApiContract, 1.0)]
                [contract(Windows.Foundation.UniversalApiContract, 1.0)]
                [marshaling_behavior(agile)]
                [threading(both)]
                runtimeclass ManipulationInertiaStartingRoutedEventArgs : Windows.UI.Xaml.RoutedEventArgs
                {
                    [default] interface Windows.UI.Xaml.Input.IManipulationInertiaStartingRoutedEventArgs;
                }

                [activatable(Windows.Foundation.UniversalApiContract, 1.0)]
                [activatable(Windows.UI.Xaml.Input.IManipulationPivotFactory, Windows.Foundation.UniversalApiContract, 1.0)]
                [contract(Windows.Foundation.UniversalApiContract, 1.0)]
                [marshaling_behavior(agile)]
                [threading(both)]
                runtimeclass ManipulationPivot
                {
                    [default] interface Windows.UI.Xaml.Input.IManipulationPivot;
                }

                [composable(Windows.UI.Xaml.Input.IManipulationStartedRoutedEventArgsFactory, public, Windows.Foundation.UniversalApiContract, 1.0)]
                [contract(Windows.Foundation.UniversalApiContract, 1.0)]
                [marshaling_behavior(agile)]
                [threading(both)]
                runtimeclass ManipulationStartedRoutedEventArgs : Windows.UI.Xaml.RoutedEventArgs
                {
                    [default] interface Windows.UI.Xaml.Input.IManipulationStartedRoutedEventArgs;
                }

                [activatable(Windows.Foundation.UniversalApiContract, 1.0)]
                [contract(Windows.Foundation.UniversalApiContract, 1.0)]
                [marshaling_behavior(agile)]
                [threading(both)]
                runtimeclass ManipulationStartingRoutedEventArgs : Windows.UI.Xaml.RoutedEventArgs
                {
                    [default] interface Windows.UI.Xaml.Input.IManipulationStartingRoutedEventArgs;
                }

                [contract(Windows.Foundation.UniversalApiContract, 4.0)]
                [marshaling_behavior(agile)]
                [threading(both)]
                runtimeclass NoFocusCandidateFoundEventArgs : Windows.UI.Xaml.RoutedEventArgs
                {
                    [default] interface Windows.UI.Xaml.Input.INoFocusCandidateFoundEventArgs;
                }

                [contract(Windows.Foundation.UniversalApiContract, 1.0)]
                [marshaling_behavior(agile)]
                runtimeclass Pointer
                {
                    [default] interface Windows.UI.Xaml.Input.IPointer;
                }

                [contract(Windows.Foundation.UniversalApiContract, 1.0)]
                [marshaling_behavior(agile)]
                [threading(both)]
                runtimeclass PointerRoutedEventArgs : Windows.UI.Xaml.RoutedEventArgs
                {
                    [default] interface Windows.UI.Xaml.Input.IPointerRoutedEventArgs;
                    [contract(Windows.Foundation.UniversalApiContract, 5.0)] interface Windows.UI.Xaml.Input.IPointerRoutedEventArgs2;
                }

                [contract(Windows.Foundation.UniversalApiContract, 5.0)]
                [marshaling_behavior(agile)]
                runtimeclass ProcessKeyboardAcceleratorEventArgs
                {
                    [default] interface Windows.UI.Xaml.Input.IProcessKeyboardAcceleratorEventArgs;
                }

                [activatable(Windows.Foundation.UniversalApiContract, 1.0)]
                [contract(Windows.Foundation.UniversalApiContract, 1.0)]
                [marshaling_behavior(agile)]
                [threading(both)]
                runtimeclass RightTappedRoutedEventArgs : Windows.UI.Xaml.RoutedEventArgs
                {
                    [default] interface Windows.UI.Xaml.Input.IRightTappedRoutedEventArgs;
                }

                [composable(Windows.UI.Xaml.Input.IStandardUICommandFactory, public, Windows.Foundation.UniversalApiContract, 7.0)]
                [contract(Windows.Foundation.UniversalApiContract, 7.0)]
                [marshaling_behavior(agile)]
                [static(Windows.UI.Xaml.Input.IStandardUICommandStatics, Windows.Foundation.UniversalApiContract, 7.0)]
                [threading(both)]
                runtimeclass StandardUICommand : Windows.UI.Xaml.Input.XamlUICommand
                {
                    [default] interface Windows.UI.Xaml.Input.IStandardUICommand;
                    [contract(Windows.Foundation.UniversalApiContract, 8.0)] interface Windows.UI.Xaml.Input.IStandardUICommand2;
                }

                [activatable(Windows.Foundation.UniversalApiContract, 1.0)]
                [contract(Windows.Foundation.UniversalApiContract, 1.0)]
                [marshaling_behavior(agile)]
                [threading(both)]
                runtimeclass TappedRoutedEventArgs : Windows.UI.Xaml.RoutedEventArgs
                {
                    [default] interface Windows.UI.Xaml.Input.ITappedRoutedEventArgs;
                }

                [composable(Windows.UI.Xaml.Input.IXamlUICommandFactory, public, Windows.Foundation.UniversalApiContract, 7.0)]
                [contract(Windows.Foundation.UniversalApiContract, 7.0)]
                [marshaling_behavior(agile)]
                [static(Windows.UI.Xaml.Input.IXamlUICommandStatics, Windows.Foundation.UniversalApiContract, 7.0)]
                [threading(both)]
                runtimeclass XamlUICommand : Windows.UI.Xaml.DependencyObject
                {
                    [default] interface Windows.UI.Xaml.Input.IXamlUICommand;
                    [contract(Windows.Foundation.UniversalApiContract, 7.0)] interface Windows.UI.Xaml.Input.ICommand;
                }
            }
        }
    }
}
