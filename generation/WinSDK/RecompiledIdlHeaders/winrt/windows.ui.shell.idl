//
// Copyright (c) Microsoft Corporation. All rights reserved.
// 
//
// File generated by WinMDIDL version 8.00.0021
//

import "inspectable.idl";
import "AsyncInfo.idl";
import "EventToken.idl";
import "windowscontracts.idl";
import "Windows.Foundation.idl";
import "Windows.ApplicationModel.Core.idl";
import "Windows.UI.idl";
import "Windows.UI.StartScreen.idl";

// Forward Declare
namespace Windows
{
    namespace ApplicationModel
    {
        namespace Core
        {
            runtimeclass AppListEntry;
        }
    }
}
namespace Windows
{
    namespace Foundation
    {
        typedef struct DateTime DateTime;

        apicontract UniversalApiContract;

        runtimeclass Uri;
    }
}
namespace Windows
{
    namespace UI
    {
        namespace StartScreen
        {
            runtimeclass SecondaryTile;
        }
    }
}
namespace Windows
{
    namespace UI
    {
        typedef struct WindowId WindowId;
    }
}
namespace Windows
{
    namespace UI
    {
        namespace Shell
        {
            apicontract SecurityAppManagerContract;

            typedef enum SecurityAppKind SecurityAppKind;

            typedef enum SecurityAppState SecurityAppState;

            typedef enum SecurityAppSubstatus SecurityAppSubstatus;

            typedef enum ShareWindowCommand ShareWindowCommand;

            interface IAdaptiveCard;

            interface IAdaptiveCardBuilderStatics;

            interface IFocusSession;

            interface IFocusSessionManager;

            interface IFocusSessionManagerStatics;

            interface ISecurityAppManager;

            interface IShareWindowCommandEventArgs;

            interface IShareWindowCommandSource;

            interface IShareWindowCommandSourceStatics;

            interface ITaskbarManager;

            interface ITaskbarManager2;

            interface ITaskbarManagerStatics;

            runtimeclass AdaptiveCardBuilder;

            runtimeclass FocusSession;

            runtimeclass FocusSessionManager;

            runtimeclass SecurityAppManager;

            runtimeclass ShareWindowCommandEventArgs;

            runtimeclass ShareWindowCommandSource;

            runtimeclass TaskbarManager;
        }
    }
}

// Generic instantiations
namespace Windows
{
    namespace UI
    {
        namespace Shell
        {
            declare
            {
                interface Windows.Foundation.TypedEventHandler<Windows.UI.Shell.FocusSessionManager*, IInspectable*>;

                interface Windows.Foundation.TypedEventHandler<Windows.UI.Shell.ShareWindowCommandSource*, Windows.UI.Shell.ShareWindowCommandEventArgs*>;
            }
        }
    }
}

// Type definition
namespace Windows
{
    namespace UI
    {
        namespace Shell
        {
            [contractversion(1.0)]
            apicontract SecurityAppManagerContract
            {
            }

            [contract(Windows.UI.Shell.SecurityAppManagerContract, 1.0)]
            enum SecurityAppKind
            {
                WebProtection = 0
            };

            [contract(Windows.UI.Shell.SecurityAppManagerContract, 1.0)]
            enum SecurityAppState
            {
                Disabled = 0,
                Enabled  = 1
            };

            [contract(Windows.UI.Shell.SecurityAppManagerContract, 1.0)]
            enum SecurityAppSubstatus
            {
                Undetermined      = 0,
                NoActionNeeded    = 1,
                ActionRecommended = 2,
                ActionNeeded      = 3
            };

            [contract(Windows.Foundation.UniversalApiContract, 13.0)]
            enum ShareWindowCommand
            {
                None         = 0,
                StartSharing = 1,
                StopSharing  = 2
            };

            [contract(Windows.Foundation.UniversalApiContract, 5.0)]
            [uuid(72D0568C-A274-41CD-82A8-989D40B9B05E)]
            interface IAdaptiveCard : IInspectable
            {
                HRESULT ToJson([out] [retval] HSTRING* result);
            }

            [contract(Windows.Foundation.UniversalApiContract, 5.0)]
            [uuid(766D8F08-D3FE-4347-A0BC-B9EA9A6DC28E)]
            interface IAdaptiveCardBuilderStatics : IInspectable
            {
                HRESULT CreateAdaptiveCardFromJson([in] HSTRING value, [out] [retval] Windows.UI.Shell.IAdaptiveCard** result);
            }

            [contract(Windows.Foundation.UniversalApiContract, 15.0)]
            [exclusiveto(Windows.UI.Shell.FocusSession)]
            [uuid(069FBAB8-0E84-5F2F-8614-9B6544326277)]
            interface IFocusSession : IInspectable
            {
                [propget] HRESULT Id([out] [retval] HSTRING* value);
                HRESULT End();
            }

            [contract(Windows.Foundation.UniversalApiContract, 15.0)]
            [exclusiveto(Windows.UI.Shell.FocusSessionManager)]
            [uuid(E7FFBAA9-D8BE-5DBF-BAC6-49364842E37E)]
            interface IFocusSessionManager : IInspectable
            {
                [propget] HRESULT IsFocusActive([out] [retval] boolean* value);
                HRESULT GetSession([in] HSTRING id, [out] [retval] Windows.UI.Shell.FocusSession** result);
                [overload("TryStartFocusSession")] HRESULT TryStartFocusSession([out] [retval] Windows.UI.Shell.FocusSession** result);
                [overload("TryStartFocusSession")] HRESULT TryStartFocusSession2([in] Windows.Foundation.DateTime endTime, [out] [retval] Windows.UI.Shell.FocusSession** result);
                HRESULT DeactivateFocus();
                [eventadd] HRESULT IsFocusActiveChanged([in] Windows.Foundation.TypedEventHandler<Windows.UI.Shell.FocusSessionManager*, IInspectable*>* handler, [out] [retval] EventRegistrationToken* token);
                [eventremove] HRESULT IsFocusActiveChanged([in] EventRegistrationToken token);
            }

            [contract(Windows.Foundation.UniversalApiContract, 15.0)]
            [exclusiveto(Windows.UI.Shell.FocusSessionManager)]
            [uuid(834DF764-CB9A-5D0A-AA9F-73DF4F249395)]
            interface IFocusSessionManagerStatics : IInspectable
            {
                HRESULT GetDefault([out] [retval] Windows.UI.Shell.FocusSessionManager** result);
                [propget] HRESULT IsSupported([out] [retval] boolean* value);
            }

            [contract(Windows.UI.Shell.SecurityAppManagerContract, 1.0)]
            [exclusiveto(Windows.UI.Shell.SecurityAppManager)]
            [uuid(96AC500C-AED4-561D-BDE8-953520343A2D)]
            interface ISecurityAppManager : IInspectable
            {
                HRESULT Register([in] Windows.UI.Shell.SecurityAppKind kind, [in] HSTRING displayName, [in] Windows.Foundation.Uri* detailsUri, [in] boolean registerPerUser, [out] [retval] GUID* result);
                HRESULT Unregister([in] Windows.UI.Shell.SecurityAppKind kind, [in] GUID guidRegistration);
                HRESULT UpdateState([in] Windows.UI.Shell.SecurityAppKind kind, [in] GUID guidRegistration, [in] Windows.UI.Shell.SecurityAppState state, [in] Windows.UI.Shell.SecurityAppSubstatus substatus, [in] Windows.Foundation.Uri* detailsUri);
            }

            [contract(Windows.Foundation.UniversalApiContract, 13.0)]
            [exclusiveto(Windows.UI.Shell.ShareWindowCommandEventArgs)]
            [uuid(4578DC09-A523-5756-A995-E4FEB991FFF0)]
            interface IShareWindowCommandEventArgs : IInspectable
            {
                [propget] HRESULT WindowId([out] [retval] Windows.UI.WindowId* value);
                [propget] HRESULT Command([out] [retval] Windows.UI.Shell.ShareWindowCommand* value);
                [propput] HRESULT Command([in] Windows.UI.Shell.ShareWindowCommand value);
            }

            [contract(Windows.Foundation.UniversalApiContract, 13.0)]
            [exclusiveto(Windows.UI.Shell.ShareWindowCommandSource)]
            [uuid(CB3B7AE3-6B9C-561E-BCCC-61E68E0ABFEF)]
            interface IShareWindowCommandSource : IInspectable
            {
                HRESULT Start();
                HRESULT Stop();
                HRESULT ReportCommandChanged();
                [eventadd] HRESULT CommandRequested([in] Windows.Foundation.TypedEventHandler<Windows.UI.Shell.ShareWindowCommandSource*, Windows.UI.Shell.ShareWindowCommandEventArgs*>* handler, [out] [retval] EventRegistrationToken* token);
                [eventremove] HRESULT CommandRequested([in] EventRegistrationToken token);
                [eventadd] HRESULT CommandInvoked([in] Windows.Foundation.TypedEventHandler<Windows.UI.Shell.ShareWindowCommandSource*, Windows.UI.Shell.ShareWindowCommandEventArgs*>* handler, [out] [retval] EventRegistrationToken* token);
                [eventremove] HRESULT CommandInvoked([in] EventRegistrationToken token);
            }

            [contract(Windows.Foundation.UniversalApiContract, 13.0)]
            [exclusiveto(Windows.UI.Shell.ShareWindowCommandSource)]
            [uuid(B0EB6656-9CAC-517C-B6C7-8EF715084295)]
            interface IShareWindowCommandSourceStatics : IInspectable
            {
                HRESULT GetForCurrentView([out] [retval] Windows.UI.Shell.ShareWindowCommandSource** result);
            }

            [contract(Windows.Foundation.UniversalApiContract, 5.0)]
            [exclusiveto(Windows.UI.Shell.TaskbarManager)]
            [uuid(87490A19-1AD9-49F4-B2E8-86738DC5AC40)]
            interface ITaskbarManager : IInspectable
            {
                [propget] HRESULT IsSupported([out] [retval] boolean* value);
                [propget] HRESULT IsPinningAllowed([out] [retval] boolean* value);
                HRESULT IsCurrentAppPinnedAsync([out] [retval] Windows.Foundation.IAsyncOperation<boolean>** operation);
                HRESULT IsAppListEntryPinnedAsync([in] Windows.ApplicationModel.Core.AppListEntry* appListEntry, [out] [retval] Windows.Foundation.IAsyncOperation<boolean>** operation);
                HRESULT RequestPinCurrentAppAsync([out] [retval] Windows.Foundation.IAsyncOperation<boolean>** operation);
                HRESULT RequestPinAppListEntryAsync([in] Windows.ApplicationModel.Core.AppListEntry* appListEntry, [out] [retval] Windows.Foundation.IAsyncOperation<boolean>** operation);
            }

            [contract(Windows.Foundation.UniversalApiContract, 7.0)]
            [exclusiveto(Windows.UI.Shell.TaskbarManager)]
            [uuid(79F0A06E-7B02-4911-918C-DEE0BBD20BA4)]
            interface ITaskbarManager2 : IInspectable
                requires
                    Windows.UI.Shell.ITaskbarManager
            {
                HRESULT IsSecondaryTilePinnedAsync([in] HSTRING tileId, [out] [retval] Windows.Foundation.IAsyncOperation<boolean>** operation);
                HRESULT RequestPinSecondaryTileAsync([in] Windows.UI.StartScreen.SecondaryTile* secondaryTile, [out] [retval] Windows.Foundation.IAsyncOperation<boolean>** operation);
                HRESULT TryUnpinSecondaryTileAsync([in] HSTRING tileId, [out] [retval] Windows.Foundation.IAsyncOperation<boolean>** operation);
            }

            [contract(Windows.Foundation.UniversalApiContract, 5.0)]
            [exclusiveto(Windows.UI.Shell.TaskbarManager)]
            [uuid(DB32AB74-DE52-4FE6-B7B6-95FF9F8395DF)]
            interface ITaskbarManagerStatics : IInspectable
            {
                HRESULT GetDefault([out] [retval] Windows.UI.Shell.TaskbarManager** result);
            }

            [contract(Windows.Foundation.UniversalApiContract, 5.0)]
            [marshaling_behavior(agile)]
            [static(Windows.UI.Shell.IAdaptiveCardBuilderStatics, Windows.Foundation.UniversalApiContract, 5.0)]
            [threading(both)]
            runtimeclass AdaptiveCardBuilder
            {
            }

            [contract(Windows.Foundation.UniversalApiContract, 15.0)]
            [marshaling_behavior(agile)]
            runtimeclass FocusSession
            {
                [default] interface Windows.UI.Shell.IFocusSession;
            }

            [contract(Windows.Foundation.UniversalApiContract, 15.0)]
            [marshaling_behavior(agile)]
            [static(Windows.UI.Shell.IFocusSessionManagerStatics, Windows.Foundation.UniversalApiContract, 15.0)]
            [threading(both)]
            runtimeclass FocusSessionManager
            {
                [default] interface Windows.UI.Shell.IFocusSessionManager;
            }

            [activatable(Windows.UI.Shell.SecurityAppManagerContract, 1.0)]
            [contract(Windows.UI.Shell.SecurityAppManagerContract, 1.0)]
            [marshaling_behavior(agile)]
            [threading(both)]
            runtimeclass SecurityAppManager
            {
                [default] interface Windows.UI.Shell.ISecurityAppManager;
            }

            [contract(Windows.Foundation.UniversalApiContract, 13.0)]
            [marshaling_behavior(agile)]
            runtimeclass ShareWindowCommandEventArgs
            {
                [default] interface Windows.UI.Shell.IShareWindowCommandEventArgs;
            }

            [contract(Windows.Foundation.UniversalApiContract, 13.0)]
            [marshaling_behavior(agile)]
            [static(Windows.UI.Shell.IShareWindowCommandSourceStatics, Windows.Foundation.UniversalApiContract, 13.0)]
            [threading(both)]
            runtimeclass ShareWindowCommandSource
            {
                [default] interface Windows.UI.Shell.IShareWindowCommandSource;
            }

            [contract(Windows.Foundation.UniversalApiContract, 5.0)]
            [marshaling_behavior(agile)]
            [static(Windows.UI.Shell.ITaskbarManagerStatics, Windows.Foundation.UniversalApiContract, 5.0)]
            [threading(both)]
            runtimeclass TaskbarManager
            {
                [default] interface Windows.UI.Shell.ITaskbarManager;
                [contract(Windows.Foundation.UniversalApiContract, 7.0)] interface Windows.UI.Shell.ITaskbarManager2;
            }
        }
    }
}
