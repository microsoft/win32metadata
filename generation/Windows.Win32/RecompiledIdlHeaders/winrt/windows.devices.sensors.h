
#pragma warning( disable: 4049 )  /* more than 64k source lines */

/* verify that the <rpcndr.h> version is high enough to compile this file*/
#ifndef __REQUIRED_RPCNDR_H_VERSION__
#define __REQUIRED_RPCNDR_H_VERSION__ 500
#endif

/* verify that the <rpcsal.h> version is high enough to compile this file*/
#ifndef __REQUIRED_RPCSAL_H_VERSION__
#define __REQUIRED_RPCSAL_H_VERSION__ 100
#endif

#include <rpc.h>
#include <rpcndr.h>

#ifndef __RPCNDR_H_VERSION__
#error this stub requires an updated version of <rpcndr.h>
#endif /* __RPCNDR_H_VERSION__ */

#ifndef COM_NO_WINDOWS_H
#include <windows.h>
#include <ole2.h>
#endif /*COM_NO_WINDOWS_H*/
#ifndef __windows2Edevices2Esensors_h__
#define __windows2Edevices2Esensors_h__
#ifndef __windows2Edevices2Esensors_p_h__
#define __windows2Edevices2Esensors_p_h__


#pragma once

//
// Deprecated attribute support
//

#pragma push_macro("DEPRECATED")
#undef DEPRECATED

#if !defined(DISABLE_WINRT_DEPRECATION)
#if defined(__cplusplus)
#if __cplusplus >= 201402
#define DEPRECATED(x) [[deprecated(x)]]
#define DEPRECATEDENUMERATOR(x) [[deprecated(x)]]
#elif defined(_MSC_VER)
#if _MSC_VER >= 1900
#define DEPRECATED(x) [[deprecated(x)]]
#define DEPRECATEDENUMERATOR(x) [[deprecated(x)]]
#else
#define DEPRECATED(x) __declspec(deprecated(x))
#define DEPRECATEDENUMERATOR(x)
#endif // _MSC_VER >= 1900
#else // Not Standard C++ or MSVC, ignore the construct.
#define DEPRECATED(x)
#define DEPRECATEDENUMERATOR(x)
#endif  // C++ deprecation
#else // C - disable deprecation
#define DEPRECATED(x)
#define DEPRECATEDENUMERATOR(x)
#endif
#else // Deprecation is disabled
#define DEPRECATED(x)
#define DEPRECATEDENUMERATOR(x)
#endif  /* DEPRECATED */

// Disable Deprecation for this header, MIDL verifies that cross-type access is acceptable
#ifdef __clang__
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#else
#pragma warning(push)
#pragma warning(disable: 4996)
#endif

// Ensure that the setting of the /ns_prefix command line switch is consistent for all headers.
// If you get an error from the compiler indicating "warning C4005: 'CHECK_NS_PREFIX_STATE': macro redefinition", this
// indicates that you have included two different headers with different settings for the /ns_prefix MIDL command line switch
#if !defined(DISABLE_NS_PREFIX_CHECKS)
#define CHECK_NS_PREFIX_STATE "always"
#endif // !defined(DISABLE_NS_PREFIX_CHECKS)


#pragma push_macro("MIDL_CONST_ID")
#undef MIDL_CONST_ID
#define MIDL_CONST_ID const __declspec(selectany)


//  API Contract Inclusion Definitions
#if !defined(SPECIFIC_API_CONTRACT_DEFINITIONS)
#if !defined(WINDOWS_FOUNDATION_FOUNDATIONCONTRACT_VERSION)
#define WINDOWS_FOUNDATION_FOUNDATIONCONTRACT_VERSION 0x40000
#endif // defined(WINDOWS_FOUNDATION_FOUNDATIONCONTRACT_VERSION)

#if !defined(WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION)
#define WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION 0xa0000
#endif // defined(WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION)

#endif // defined(SPECIFIC_API_CONTRACT_DEFINITIONS)


// Header files for imported files
#include "inspectable.h"
#include "AsyncInfo.h"
#include "EventToken.h"
#include "windowscontracts.h"
#include "Windows.Foundation.h"
#include "Windows.Graphics.Display.h"
// Importing Collections header
#include <windows.foundation.collections.h>

#if defined(__cplusplus) && !defined(CINTERFACE)
/* Forward Declarations */
#ifndef ____x_ABI_CWindows_CDevices_CSensors_CIAccelerometer_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CIAccelerometer_FWD_DEFINED__
namespace ABI {
    namespace Windows {
        namespace Devices {
            namespace Sensors {
                interface IAccelerometer;
            } /* Sensors */
        } /* Devices */
    } /* Windows */
} /* ABI */
#define __x_ABI_CWindows_CDevices_CSensors_CIAccelerometer ABI::Windows::Devices::Sensors::IAccelerometer

#endif // ____x_ABI_CWindows_CDevices_CSensors_CIAccelerometer_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CDevices_CSensors_CIAccelerometer2_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CIAccelerometer2_FWD_DEFINED__
namespace ABI {
    namespace Windows {
        namespace Devices {
            namespace Sensors {
                interface IAccelerometer2;
            } /* Sensors */
        } /* Devices */
    } /* Windows */
} /* ABI */
#define __x_ABI_CWindows_CDevices_CSensors_CIAccelerometer2 ABI::Windows::Devices::Sensors::IAccelerometer2

#endif // ____x_ABI_CWindows_CDevices_CSensors_CIAccelerometer2_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CDevices_CSensors_CIAccelerometer3_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CIAccelerometer3_FWD_DEFINED__
namespace ABI {
    namespace Windows {
        namespace Devices {
            namespace Sensors {
                interface IAccelerometer3;
            } /* Sensors */
        } /* Devices */
    } /* Windows */
} /* ABI */
#define __x_ABI_CWindows_CDevices_CSensors_CIAccelerometer3 ABI::Windows::Devices::Sensors::IAccelerometer3

#endif // ____x_ABI_CWindows_CDevices_CSensors_CIAccelerometer3_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CDevices_CSensors_CIAccelerometer4_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CIAccelerometer4_FWD_DEFINED__
namespace ABI {
    namespace Windows {
        namespace Devices {
            namespace Sensors {
                interface IAccelerometer4;
            } /* Sensors */
        } /* Devices */
    } /* Windows */
} /* ABI */
#define __x_ABI_CWindows_CDevices_CSensors_CIAccelerometer4 ABI::Windows::Devices::Sensors::IAccelerometer4

#endif // ____x_ABI_CWindows_CDevices_CSensors_CIAccelerometer4_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CDevices_CSensors_CIAccelerometer5_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CIAccelerometer5_FWD_DEFINED__
namespace ABI {
    namespace Windows {
        namespace Devices {
            namespace Sensors {
                interface IAccelerometer5;
            } /* Sensors */
        } /* Devices */
    } /* Windows */
} /* ABI */
#define __x_ABI_CWindows_CDevices_CSensors_CIAccelerometer5 ABI::Windows::Devices::Sensors::IAccelerometer5

#endif // ____x_ABI_CWindows_CDevices_CSensors_CIAccelerometer5_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CDevices_CSensors_CIAccelerometerDataThreshold_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CIAccelerometerDataThreshold_FWD_DEFINED__
namespace ABI {
    namespace Windows {
        namespace Devices {
            namespace Sensors {
                interface IAccelerometerDataThreshold;
            } /* Sensors */
        } /* Devices */
    } /* Windows */
} /* ABI */
#define __x_ABI_CWindows_CDevices_CSensors_CIAccelerometerDataThreshold ABI::Windows::Devices::Sensors::IAccelerometerDataThreshold

#endif // ____x_ABI_CWindows_CDevices_CSensors_CIAccelerometerDataThreshold_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CDevices_CSensors_CIAccelerometerDeviceId_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CIAccelerometerDeviceId_FWD_DEFINED__
namespace ABI {
    namespace Windows {
        namespace Devices {
            namespace Sensors {
                interface IAccelerometerDeviceId;
            } /* Sensors */
        } /* Devices */
    } /* Windows */
} /* ABI */
#define __x_ABI_CWindows_CDevices_CSensors_CIAccelerometerDeviceId ABI::Windows::Devices::Sensors::IAccelerometerDeviceId

#endif // ____x_ABI_CWindows_CDevices_CSensors_CIAccelerometerDeviceId_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CDevices_CSensors_CIAccelerometerReading_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CIAccelerometerReading_FWD_DEFINED__
namespace ABI {
    namespace Windows {
        namespace Devices {
            namespace Sensors {
                interface IAccelerometerReading;
            } /* Sensors */
        } /* Devices */
    } /* Windows */
} /* ABI */
#define __x_ABI_CWindows_CDevices_CSensors_CIAccelerometerReading ABI::Windows::Devices::Sensors::IAccelerometerReading

#endif // ____x_ABI_CWindows_CDevices_CSensors_CIAccelerometerReading_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CDevices_CSensors_CIAccelerometerReading2_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CIAccelerometerReading2_FWD_DEFINED__
namespace ABI {
    namespace Windows {
        namespace Devices {
            namespace Sensors {
                interface IAccelerometerReading2;
            } /* Sensors */
        } /* Devices */
    } /* Windows */
} /* ABI */
#define __x_ABI_CWindows_CDevices_CSensors_CIAccelerometerReading2 ABI::Windows::Devices::Sensors::IAccelerometerReading2

#endif // ____x_ABI_CWindows_CDevices_CSensors_CIAccelerometerReading2_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CDevices_CSensors_CIAccelerometerReadingChangedEventArgs_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CIAccelerometerReadingChangedEventArgs_FWD_DEFINED__
namespace ABI {
    namespace Windows {
        namespace Devices {
            namespace Sensors {
                interface IAccelerometerReadingChangedEventArgs;
            } /* Sensors */
        } /* Devices */
    } /* Windows */
} /* ABI */
#define __x_ABI_CWindows_CDevices_CSensors_CIAccelerometerReadingChangedEventArgs ABI::Windows::Devices::Sensors::IAccelerometerReadingChangedEventArgs

#endif // ____x_ABI_CWindows_CDevices_CSensors_CIAccelerometerReadingChangedEventArgs_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CDevices_CSensors_CIAccelerometerShakenEventArgs_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CIAccelerometerShakenEventArgs_FWD_DEFINED__
namespace ABI {
    namespace Windows {
        namespace Devices {
            namespace Sensors {
                interface IAccelerometerShakenEventArgs;
            } /* Sensors */
        } /* Devices */
    } /* Windows */
} /* ABI */
#define __x_ABI_CWindows_CDevices_CSensors_CIAccelerometerShakenEventArgs ABI::Windows::Devices::Sensors::IAccelerometerShakenEventArgs

#endif // ____x_ABI_CWindows_CDevices_CSensors_CIAccelerometerShakenEventArgs_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CDevices_CSensors_CIAccelerometerStatics_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CIAccelerometerStatics_FWD_DEFINED__
namespace ABI {
    namespace Windows {
        namespace Devices {
            namespace Sensors {
                interface IAccelerometerStatics;
            } /* Sensors */
        } /* Devices */
    } /* Windows */
} /* ABI */
#define __x_ABI_CWindows_CDevices_CSensors_CIAccelerometerStatics ABI::Windows::Devices::Sensors::IAccelerometerStatics

#endif // ____x_ABI_CWindows_CDevices_CSensors_CIAccelerometerStatics_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CDevices_CSensors_CIAccelerometerStatics2_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CIAccelerometerStatics2_FWD_DEFINED__
namespace ABI {
    namespace Windows {
        namespace Devices {
            namespace Sensors {
                interface IAccelerometerStatics2;
            } /* Sensors */
        } /* Devices */
    } /* Windows */
} /* ABI */
#define __x_ABI_CWindows_CDevices_CSensors_CIAccelerometerStatics2 ABI::Windows::Devices::Sensors::IAccelerometerStatics2

#endif // ____x_ABI_CWindows_CDevices_CSensors_CIAccelerometerStatics2_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CDevices_CSensors_CIAccelerometerStatics3_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CIAccelerometerStatics3_FWD_DEFINED__
namespace ABI {
    namespace Windows {
        namespace Devices {
            namespace Sensors {
                interface IAccelerometerStatics3;
            } /* Sensors */
        } /* Devices */
    } /* Windows */
} /* ABI */
#define __x_ABI_CWindows_CDevices_CSensors_CIAccelerometerStatics3 ABI::Windows::Devices::Sensors::IAccelerometerStatics3

#endif // ____x_ABI_CWindows_CDevices_CSensors_CIAccelerometerStatics3_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CDevices_CSensors_CIActivitySensor_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CIActivitySensor_FWD_DEFINED__
namespace ABI {
    namespace Windows {
        namespace Devices {
            namespace Sensors {
                interface IActivitySensor;
            } /* Sensors */
        } /* Devices */
    } /* Windows */
} /* ABI */
#define __x_ABI_CWindows_CDevices_CSensors_CIActivitySensor ABI::Windows::Devices::Sensors::IActivitySensor

#endif // ____x_ABI_CWindows_CDevices_CSensors_CIActivitySensor_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CDevices_CSensors_CIActivitySensorReading_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CIActivitySensorReading_FWD_DEFINED__
namespace ABI {
    namespace Windows {
        namespace Devices {
            namespace Sensors {
                interface IActivitySensorReading;
            } /* Sensors */
        } /* Devices */
    } /* Windows */
} /* ABI */
#define __x_ABI_CWindows_CDevices_CSensors_CIActivitySensorReading ABI::Windows::Devices::Sensors::IActivitySensorReading

#endif // ____x_ABI_CWindows_CDevices_CSensors_CIActivitySensorReading_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CDevices_CSensors_CIActivitySensorReadingChangeReport_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CIActivitySensorReadingChangeReport_FWD_DEFINED__
namespace ABI {
    namespace Windows {
        namespace Devices {
            namespace Sensors {
                interface IActivitySensorReadingChangeReport;
            } /* Sensors */
        } /* Devices */
    } /* Windows */
} /* ABI */
#define __x_ABI_CWindows_CDevices_CSensors_CIActivitySensorReadingChangeReport ABI::Windows::Devices::Sensors::IActivitySensorReadingChangeReport

#endif // ____x_ABI_CWindows_CDevices_CSensors_CIActivitySensorReadingChangeReport_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CDevices_CSensors_CIActivitySensorReadingChangedEventArgs_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CIActivitySensorReadingChangedEventArgs_FWD_DEFINED__
namespace ABI {
    namespace Windows {
        namespace Devices {
            namespace Sensors {
                interface IActivitySensorReadingChangedEventArgs;
            } /* Sensors */
        } /* Devices */
    } /* Windows */
} /* ABI */
#define __x_ABI_CWindows_CDevices_CSensors_CIActivitySensorReadingChangedEventArgs ABI::Windows::Devices::Sensors::IActivitySensorReadingChangedEventArgs

#endif // ____x_ABI_CWindows_CDevices_CSensors_CIActivitySensorReadingChangedEventArgs_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CDevices_CSensors_CIActivitySensorStatics_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CIActivitySensorStatics_FWD_DEFINED__
namespace ABI {
    namespace Windows {
        namespace Devices {
            namespace Sensors {
                interface IActivitySensorStatics;
            } /* Sensors */
        } /* Devices */
    } /* Windows */
} /* ABI */
#define __x_ABI_CWindows_CDevices_CSensors_CIActivitySensorStatics ABI::Windows::Devices::Sensors::IActivitySensorStatics

#endif // ____x_ABI_CWindows_CDevices_CSensors_CIActivitySensorStatics_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CDevices_CSensors_CIActivitySensorTriggerDetails_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CIActivitySensorTriggerDetails_FWD_DEFINED__
namespace ABI {
    namespace Windows {
        namespace Devices {
            namespace Sensors {
                interface IActivitySensorTriggerDetails;
            } /* Sensors */
        } /* Devices */
    } /* Windows */
} /* ABI */
#define __x_ABI_CWindows_CDevices_CSensors_CIActivitySensorTriggerDetails ABI::Windows::Devices::Sensors::IActivitySensorTriggerDetails

#endif // ____x_ABI_CWindows_CDevices_CSensors_CIActivitySensorTriggerDetails_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CDevices_CSensors_CIAltimeter_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CIAltimeter_FWD_DEFINED__
namespace ABI {
    namespace Windows {
        namespace Devices {
            namespace Sensors {
                interface IAltimeter;
            } /* Sensors */
        } /* Devices */
    } /* Windows */
} /* ABI */
#define __x_ABI_CWindows_CDevices_CSensors_CIAltimeter ABI::Windows::Devices::Sensors::IAltimeter

#endif // ____x_ABI_CWindows_CDevices_CSensors_CIAltimeter_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CDevices_CSensors_CIAltimeter2_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CIAltimeter2_FWD_DEFINED__
namespace ABI {
    namespace Windows {
        namespace Devices {
            namespace Sensors {
                interface IAltimeter2;
            } /* Sensors */
        } /* Devices */
    } /* Windows */
} /* ABI */
#define __x_ABI_CWindows_CDevices_CSensors_CIAltimeter2 ABI::Windows::Devices::Sensors::IAltimeter2

#endif // ____x_ABI_CWindows_CDevices_CSensors_CIAltimeter2_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CDevices_CSensors_CIAltimeterReading_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CIAltimeterReading_FWD_DEFINED__
namespace ABI {
    namespace Windows {
        namespace Devices {
            namespace Sensors {
                interface IAltimeterReading;
            } /* Sensors */
        } /* Devices */
    } /* Windows */
} /* ABI */
#define __x_ABI_CWindows_CDevices_CSensors_CIAltimeterReading ABI::Windows::Devices::Sensors::IAltimeterReading

#endif // ____x_ABI_CWindows_CDevices_CSensors_CIAltimeterReading_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CDevices_CSensors_CIAltimeterReading2_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CIAltimeterReading2_FWD_DEFINED__
namespace ABI {
    namespace Windows {
        namespace Devices {
            namespace Sensors {
                interface IAltimeterReading2;
            } /* Sensors */
        } /* Devices */
    } /* Windows */
} /* ABI */
#define __x_ABI_CWindows_CDevices_CSensors_CIAltimeterReading2 ABI::Windows::Devices::Sensors::IAltimeterReading2

#endif // ____x_ABI_CWindows_CDevices_CSensors_CIAltimeterReading2_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CDevices_CSensors_CIAltimeterReadingChangedEventArgs_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CIAltimeterReadingChangedEventArgs_FWD_DEFINED__
namespace ABI {
    namespace Windows {
        namespace Devices {
            namespace Sensors {
                interface IAltimeterReadingChangedEventArgs;
            } /* Sensors */
        } /* Devices */
    } /* Windows */
} /* ABI */
#define __x_ABI_CWindows_CDevices_CSensors_CIAltimeterReadingChangedEventArgs ABI::Windows::Devices::Sensors::IAltimeterReadingChangedEventArgs

#endif // ____x_ABI_CWindows_CDevices_CSensors_CIAltimeterReadingChangedEventArgs_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CDevices_CSensors_CIAltimeterStatics_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CIAltimeterStatics_FWD_DEFINED__
namespace ABI {
    namespace Windows {
        namespace Devices {
            namespace Sensors {
                interface IAltimeterStatics;
            } /* Sensors */
        } /* Devices */
    } /* Windows */
} /* ABI */
#define __x_ABI_CWindows_CDevices_CSensors_CIAltimeterStatics ABI::Windows::Devices::Sensors::IAltimeterStatics

#endif // ____x_ABI_CWindows_CDevices_CSensors_CIAltimeterStatics_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CDevices_CSensors_CIBarometer_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CIBarometer_FWD_DEFINED__
namespace ABI {
    namespace Windows {
        namespace Devices {
            namespace Sensors {
                interface IBarometer;
            } /* Sensors */
        } /* Devices */
    } /* Windows */
} /* ABI */
#define __x_ABI_CWindows_CDevices_CSensors_CIBarometer ABI::Windows::Devices::Sensors::IBarometer

#endif // ____x_ABI_CWindows_CDevices_CSensors_CIBarometer_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CDevices_CSensors_CIBarometer2_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CIBarometer2_FWD_DEFINED__
namespace ABI {
    namespace Windows {
        namespace Devices {
            namespace Sensors {
                interface IBarometer2;
            } /* Sensors */
        } /* Devices */
    } /* Windows */
} /* ABI */
#define __x_ABI_CWindows_CDevices_CSensors_CIBarometer2 ABI::Windows::Devices::Sensors::IBarometer2

#endif // ____x_ABI_CWindows_CDevices_CSensors_CIBarometer2_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CDevices_CSensors_CIBarometer3_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CIBarometer3_FWD_DEFINED__
namespace ABI {
    namespace Windows {
        namespace Devices {
            namespace Sensors {
                interface IBarometer3;
            } /* Sensors */
        } /* Devices */
    } /* Windows */
} /* ABI */
#define __x_ABI_CWindows_CDevices_CSensors_CIBarometer3 ABI::Windows::Devices::Sensors::IBarometer3

#endif // ____x_ABI_CWindows_CDevices_CSensors_CIBarometer3_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CDevices_CSensors_CIBarometerDataThreshold_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CIBarometerDataThreshold_FWD_DEFINED__
namespace ABI {
    namespace Windows {
        namespace Devices {
            namespace Sensors {
                interface IBarometerDataThreshold;
            } /* Sensors */
        } /* Devices */
    } /* Windows */
} /* ABI */
#define __x_ABI_CWindows_CDevices_CSensors_CIBarometerDataThreshold ABI::Windows::Devices::Sensors::IBarometerDataThreshold

#endif // ____x_ABI_CWindows_CDevices_CSensors_CIBarometerDataThreshold_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CDevices_CSensors_CIBarometerReading_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CIBarometerReading_FWD_DEFINED__
namespace ABI {
    namespace Windows {
        namespace Devices {
            namespace Sensors {
                interface IBarometerReading;
            } /* Sensors */
        } /* Devices */
    } /* Windows */
} /* ABI */
#define __x_ABI_CWindows_CDevices_CSensors_CIBarometerReading ABI::Windows::Devices::Sensors::IBarometerReading

#endif // ____x_ABI_CWindows_CDevices_CSensors_CIBarometerReading_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CDevices_CSensors_CIBarometerReading2_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CIBarometerReading2_FWD_DEFINED__
namespace ABI {
    namespace Windows {
        namespace Devices {
            namespace Sensors {
                interface IBarometerReading2;
            } /* Sensors */
        } /* Devices */
    } /* Windows */
} /* ABI */
#define __x_ABI_CWindows_CDevices_CSensors_CIBarometerReading2 ABI::Windows::Devices::Sensors::IBarometerReading2

#endif // ____x_ABI_CWindows_CDevices_CSensors_CIBarometerReading2_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CDevices_CSensors_CIBarometerReadingChangedEventArgs_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CIBarometerReadingChangedEventArgs_FWD_DEFINED__
namespace ABI {
    namespace Windows {
        namespace Devices {
            namespace Sensors {
                interface IBarometerReadingChangedEventArgs;
            } /* Sensors */
        } /* Devices */
    } /* Windows */
} /* ABI */
#define __x_ABI_CWindows_CDevices_CSensors_CIBarometerReadingChangedEventArgs ABI::Windows::Devices::Sensors::IBarometerReadingChangedEventArgs

#endif // ____x_ABI_CWindows_CDevices_CSensors_CIBarometerReadingChangedEventArgs_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CDevices_CSensors_CIBarometerStatics_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CIBarometerStatics_FWD_DEFINED__
namespace ABI {
    namespace Windows {
        namespace Devices {
            namespace Sensors {
                interface IBarometerStatics;
            } /* Sensors */
        } /* Devices */
    } /* Windows */
} /* ABI */
#define __x_ABI_CWindows_CDevices_CSensors_CIBarometerStatics ABI::Windows::Devices::Sensors::IBarometerStatics

#endif // ____x_ABI_CWindows_CDevices_CSensors_CIBarometerStatics_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CDevices_CSensors_CIBarometerStatics2_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CIBarometerStatics2_FWD_DEFINED__
namespace ABI {
    namespace Windows {
        namespace Devices {
            namespace Sensors {
                interface IBarometerStatics2;
            } /* Sensors */
        } /* Devices */
    } /* Windows */
} /* ABI */
#define __x_ABI_CWindows_CDevices_CSensors_CIBarometerStatics2 ABI::Windows::Devices::Sensors::IBarometerStatics2

#endif // ____x_ABI_CWindows_CDevices_CSensors_CIBarometerStatics2_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CDevices_CSensors_CICompass_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CICompass_FWD_DEFINED__
namespace ABI {
    namespace Windows {
        namespace Devices {
            namespace Sensors {
                interface ICompass;
            } /* Sensors */
        } /* Devices */
    } /* Windows */
} /* ABI */
#define __x_ABI_CWindows_CDevices_CSensors_CICompass ABI::Windows::Devices::Sensors::ICompass

#endif // ____x_ABI_CWindows_CDevices_CSensors_CICompass_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CDevices_CSensors_CICompass2_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CICompass2_FWD_DEFINED__
namespace ABI {
    namespace Windows {
        namespace Devices {
            namespace Sensors {
                interface ICompass2;
            } /* Sensors */
        } /* Devices */
    } /* Windows */
} /* ABI */
#define __x_ABI_CWindows_CDevices_CSensors_CICompass2 ABI::Windows::Devices::Sensors::ICompass2

#endif // ____x_ABI_CWindows_CDevices_CSensors_CICompass2_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CDevices_CSensors_CICompass3_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CICompass3_FWD_DEFINED__
namespace ABI {
    namespace Windows {
        namespace Devices {
            namespace Sensors {
                interface ICompass3;
            } /* Sensors */
        } /* Devices */
    } /* Windows */
} /* ABI */
#define __x_ABI_CWindows_CDevices_CSensors_CICompass3 ABI::Windows::Devices::Sensors::ICompass3

#endif // ____x_ABI_CWindows_CDevices_CSensors_CICompass3_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CDevices_CSensors_CICompass4_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CICompass4_FWD_DEFINED__
namespace ABI {
    namespace Windows {
        namespace Devices {
            namespace Sensors {
                interface ICompass4;
            } /* Sensors */
        } /* Devices */
    } /* Windows */
} /* ABI */
#define __x_ABI_CWindows_CDevices_CSensors_CICompass4 ABI::Windows::Devices::Sensors::ICompass4

#endif // ____x_ABI_CWindows_CDevices_CSensors_CICompass4_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CDevices_CSensors_CICompassDataThreshold_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CICompassDataThreshold_FWD_DEFINED__
namespace ABI {
    namespace Windows {
        namespace Devices {
            namespace Sensors {
                interface ICompassDataThreshold;
            } /* Sensors */
        } /* Devices */
    } /* Windows */
} /* ABI */
#define __x_ABI_CWindows_CDevices_CSensors_CICompassDataThreshold ABI::Windows::Devices::Sensors::ICompassDataThreshold

#endif // ____x_ABI_CWindows_CDevices_CSensors_CICompassDataThreshold_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CDevices_CSensors_CICompassDeviceId_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CICompassDeviceId_FWD_DEFINED__
namespace ABI {
    namespace Windows {
        namespace Devices {
            namespace Sensors {
                interface ICompassDeviceId;
            } /* Sensors */
        } /* Devices */
    } /* Windows */
} /* ABI */
#define __x_ABI_CWindows_CDevices_CSensors_CICompassDeviceId ABI::Windows::Devices::Sensors::ICompassDeviceId

#endif // ____x_ABI_CWindows_CDevices_CSensors_CICompassDeviceId_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CDevices_CSensors_CICompassReading_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CICompassReading_FWD_DEFINED__
namespace ABI {
    namespace Windows {
        namespace Devices {
            namespace Sensors {
                interface ICompassReading;
            } /* Sensors */
        } /* Devices */
    } /* Windows */
} /* ABI */
#define __x_ABI_CWindows_CDevices_CSensors_CICompassReading ABI::Windows::Devices::Sensors::ICompassReading

#endif // ____x_ABI_CWindows_CDevices_CSensors_CICompassReading_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CDevices_CSensors_CICompassReading2_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CICompassReading2_FWD_DEFINED__
namespace ABI {
    namespace Windows {
        namespace Devices {
            namespace Sensors {
                interface ICompassReading2;
            } /* Sensors */
        } /* Devices */
    } /* Windows */
} /* ABI */
#define __x_ABI_CWindows_CDevices_CSensors_CICompassReading2 ABI::Windows::Devices::Sensors::ICompassReading2

#endif // ____x_ABI_CWindows_CDevices_CSensors_CICompassReading2_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CDevices_CSensors_CICompassReadingChangedEventArgs_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CICompassReadingChangedEventArgs_FWD_DEFINED__
namespace ABI {
    namespace Windows {
        namespace Devices {
            namespace Sensors {
                interface ICompassReadingChangedEventArgs;
            } /* Sensors */
        } /* Devices */
    } /* Windows */
} /* ABI */
#define __x_ABI_CWindows_CDevices_CSensors_CICompassReadingChangedEventArgs ABI::Windows::Devices::Sensors::ICompassReadingChangedEventArgs

#endif // ____x_ABI_CWindows_CDevices_CSensors_CICompassReadingChangedEventArgs_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CDevices_CSensors_CICompassReadingHeadingAccuracy_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CICompassReadingHeadingAccuracy_FWD_DEFINED__
namespace ABI {
    namespace Windows {
        namespace Devices {
            namespace Sensors {
                interface ICompassReadingHeadingAccuracy;
            } /* Sensors */
        } /* Devices */
    } /* Windows */
} /* ABI */
#define __x_ABI_CWindows_CDevices_CSensors_CICompassReadingHeadingAccuracy ABI::Windows::Devices::Sensors::ICompassReadingHeadingAccuracy

#endif // ____x_ABI_CWindows_CDevices_CSensors_CICompassReadingHeadingAccuracy_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CDevices_CSensors_CICompassStatics_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CICompassStatics_FWD_DEFINED__
namespace ABI {
    namespace Windows {
        namespace Devices {
            namespace Sensors {
                interface ICompassStatics;
            } /* Sensors */
        } /* Devices */
    } /* Windows */
} /* ABI */
#define __x_ABI_CWindows_CDevices_CSensors_CICompassStatics ABI::Windows::Devices::Sensors::ICompassStatics

#endif // ____x_ABI_CWindows_CDevices_CSensors_CICompassStatics_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CDevices_CSensors_CICompassStatics2_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CICompassStatics2_FWD_DEFINED__
namespace ABI {
    namespace Windows {
        namespace Devices {
            namespace Sensors {
                interface ICompassStatics2;
            } /* Sensors */
        } /* Devices */
    } /* Windows */
} /* ABI */
#define __x_ABI_CWindows_CDevices_CSensors_CICompassStatics2 ABI::Windows::Devices::Sensors::ICompassStatics2

#endif // ____x_ABI_CWindows_CDevices_CSensors_CICompassStatics2_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CDevices_CSensors_CIGyrometer_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CIGyrometer_FWD_DEFINED__
namespace ABI {
    namespace Windows {
        namespace Devices {
            namespace Sensors {
                interface IGyrometer;
            } /* Sensors */
        } /* Devices */
    } /* Windows */
} /* ABI */
#define __x_ABI_CWindows_CDevices_CSensors_CIGyrometer ABI::Windows::Devices::Sensors::IGyrometer

#endif // ____x_ABI_CWindows_CDevices_CSensors_CIGyrometer_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CDevices_CSensors_CIGyrometer2_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CIGyrometer2_FWD_DEFINED__
namespace ABI {
    namespace Windows {
        namespace Devices {
            namespace Sensors {
                interface IGyrometer2;
            } /* Sensors */
        } /* Devices */
    } /* Windows */
} /* ABI */
#define __x_ABI_CWindows_CDevices_CSensors_CIGyrometer2 ABI::Windows::Devices::Sensors::IGyrometer2

#endif // ____x_ABI_CWindows_CDevices_CSensors_CIGyrometer2_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CDevices_CSensors_CIGyrometer3_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CIGyrometer3_FWD_DEFINED__
namespace ABI {
    namespace Windows {
        namespace Devices {
            namespace Sensors {
                interface IGyrometer3;
            } /* Sensors */
        } /* Devices */
    } /* Windows */
} /* ABI */
#define __x_ABI_CWindows_CDevices_CSensors_CIGyrometer3 ABI::Windows::Devices::Sensors::IGyrometer3

#endif // ____x_ABI_CWindows_CDevices_CSensors_CIGyrometer3_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CDevices_CSensors_CIGyrometer4_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CIGyrometer4_FWD_DEFINED__
namespace ABI {
    namespace Windows {
        namespace Devices {
            namespace Sensors {
                interface IGyrometer4;
            } /* Sensors */
        } /* Devices */
    } /* Windows */
} /* ABI */
#define __x_ABI_CWindows_CDevices_CSensors_CIGyrometer4 ABI::Windows::Devices::Sensors::IGyrometer4

#endif // ____x_ABI_CWindows_CDevices_CSensors_CIGyrometer4_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CDevices_CSensors_CIGyrometerDataThreshold_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CIGyrometerDataThreshold_FWD_DEFINED__
namespace ABI {
    namespace Windows {
        namespace Devices {
            namespace Sensors {
                interface IGyrometerDataThreshold;
            } /* Sensors */
        } /* Devices */
    } /* Windows */
} /* ABI */
#define __x_ABI_CWindows_CDevices_CSensors_CIGyrometerDataThreshold ABI::Windows::Devices::Sensors::IGyrometerDataThreshold

#endif // ____x_ABI_CWindows_CDevices_CSensors_CIGyrometerDataThreshold_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CDevices_CSensors_CIGyrometerDeviceId_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CIGyrometerDeviceId_FWD_DEFINED__
namespace ABI {
    namespace Windows {
        namespace Devices {
            namespace Sensors {
                interface IGyrometerDeviceId;
            } /* Sensors */
        } /* Devices */
    } /* Windows */
} /* ABI */
#define __x_ABI_CWindows_CDevices_CSensors_CIGyrometerDeviceId ABI::Windows::Devices::Sensors::IGyrometerDeviceId

#endif // ____x_ABI_CWindows_CDevices_CSensors_CIGyrometerDeviceId_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CDevices_CSensors_CIGyrometerReading_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CIGyrometerReading_FWD_DEFINED__
namespace ABI {
    namespace Windows {
        namespace Devices {
            namespace Sensors {
                interface IGyrometerReading;
            } /* Sensors */
        } /* Devices */
    } /* Windows */
} /* ABI */
#define __x_ABI_CWindows_CDevices_CSensors_CIGyrometerReading ABI::Windows::Devices::Sensors::IGyrometerReading

#endif // ____x_ABI_CWindows_CDevices_CSensors_CIGyrometerReading_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CDevices_CSensors_CIGyrometerReading2_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CIGyrometerReading2_FWD_DEFINED__
namespace ABI {
    namespace Windows {
        namespace Devices {
            namespace Sensors {
                interface IGyrometerReading2;
            } /* Sensors */
        } /* Devices */
    } /* Windows */
} /* ABI */
#define __x_ABI_CWindows_CDevices_CSensors_CIGyrometerReading2 ABI::Windows::Devices::Sensors::IGyrometerReading2

#endif // ____x_ABI_CWindows_CDevices_CSensors_CIGyrometerReading2_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CDevices_CSensors_CIGyrometerReadingChangedEventArgs_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CIGyrometerReadingChangedEventArgs_FWD_DEFINED__
namespace ABI {
    namespace Windows {
        namespace Devices {
            namespace Sensors {
                interface IGyrometerReadingChangedEventArgs;
            } /* Sensors */
        } /* Devices */
    } /* Windows */
} /* ABI */
#define __x_ABI_CWindows_CDevices_CSensors_CIGyrometerReadingChangedEventArgs ABI::Windows::Devices::Sensors::IGyrometerReadingChangedEventArgs

#endif // ____x_ABI_CWindows_CDevices_CSensors_CIGyrometerReadingChangedEventArgs_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CDevices_CSensors_CIGyrometerStatics_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CIGyrometerStatics_FWD_DEFINED__
namespace ABI {
    namespace Windows {
        namespace Devices {
            namespace Sensors {
                interface IGyrometerStatics;
            } /* Sensors */
        } /* Devices */
    } /* Windows */
} /* ABI */
#define __x_ABI_CWindows_CDevices_CSensors_CIGyrometerStatics ABI::Windows::Devices::Sensors::IGyrometerStatics

#endif // ____x_ABI_CWindows_CDevices_CSensors_CIGyrometerStatics_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CDevices_CSensors_CIGyrometerStatics2_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CIGyrometerStatics2_FWD_DEFINED__
namespace ABI {
    namespace Windows {
        namespace Devices {
            namespace Sensors {
                interface IGyrometerStatics2;
            } /* Sensors */
        } /* Devices */
    } /* Windows */
} /* ABI */
#define __x_ABI_CWindows_CDevices_CSensors_CIGyrometerStatics2 ABI::Windows::Devices::Sensors::IGyrometerStatics2

#endif // ____x_ABI_CWindows_CDevices_CSensors_CIGyrometerStatics2_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CDevices_CSensors_CIHingeAngleReading_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CIHingeAngleReading_FWD_DEFINED__
namespace ABI {
    namespace Windows {
        namespace Devices {
            namespace Sensors {
                interface IHingeAngleReading;
            } /* Sensors */
        } /* Devices */
    } /* Windows */
} /* ABI */
#define __x_ABI_CWindows_CDevices_CSensors_CIHingeAngleReading ABI::Windows::Devices::Sensors::IHingeAngleReading

#endif // ____x_ABI_CWindows_CDevices_CSensors_CIHingeAngleReading_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CDevices_CSensors_CIHingeAngleSensor_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CIHingeAngleSensor_FWD_DEFINED__
namespace ABI {
    namespace Windows {
        namespace Devices {
            namespace Sensors {
                interface IHingeAngleSensor;
            } /* Sensors */
        } /* Devices */
    } /* Windows */
} /* ABI */
#define __x_ABI_CWindows_CDevices_CSensors_CIHingeAngleSensor ABI::Windows::Devices::Sensors::IHingeAngleSensor

#endif // ____x_ABI_CWindows_CDevices_CSensors_CIHingeAngleSensor_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CDevices_CSensors_CIHingeAngleSensorReadingChangedEventArgs_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CIHingeAngleSensorReadingChangedEventArgs_FWD_DEFINED__
namespace ABI {
    namespace Windows {
        namespace Devices {
            namespace Sensors {
                interface IHingeAngleSensorReadingChangedEventArgs;
            } /* Sensors */
        } /* Devices */
    } /* Windows */
} /* ABI */
#define __x_ABI_CWindows_CDevices_CSensors_CIHingeAngleSensorReadingChangedEventArgs ABI::Windows::Devices::Sensors::IHingeAngleSensorReadingChangedEventArgs

#endif // ____x_ABI_CWindows_CDevices_CSensors_CIHingeAngleSensorReadingChangedEventArgs_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CDevices_CSensors_CIHingeAngleSensorStatics_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CIHingeAngleSensorStatics_FWD_DEFINED__
namespace ABI {
    namespace Windows {
        namespace Devices {
            namespace Sensors {
                interface IHingeAngleSensorStatics;
            } /* Sensors */
        } /* Devices */
    } /* Windows */
} /* ABI */
#define __x_ABI_CWindows_CDevices_CSensors_CIHingeAngleSensorStatics ABI::Windows::Devices::Sensors::IHingeAngleSensorStatics

#endif // ____x_ABI_CWindows_CDevices_CSensors_CIHingeAngleSensorStatics_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CDevices_CSensors_CIInclinometer_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CIInclinometer_FWD_DEFINED__
namespace ABI {
    namespace Windows {
        namespace Devices {
            namespace Sensors {
                interface IInclinometer;
            } /* Sensors */
        } /* Devices */
    } /* Windows */
} /* ABI */
#define __x_ABI_CWindows_CDevices_CSensors_CIInclinometer ABI::Windows::Devices::Sensors::IInclinometer

#endif // ____x_ABI_CWindows_CDevices_CSensors_CIInclinometer_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CDevices_CSensors_CIInclinometer2_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CIInclinometer2_FWD_DEFINED__
namespace ABI {
    namespace Windows {
        namespace Devices {
            namespace Sensors {
                interface IInclinometer2;
            } /* Sensors */
        } /* Devices */
    } /* Windows */
} /* ABI */
#define __x_ABI_CWindows_CDevices_CSensors_CIInclinometer2 ABI::Windows::Devices::Sensors::IInclinometer2

#endif // ____x_ABI_CWindows_CDevices_CSensors_CIInclinometer2_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CDevices_CSensors_CIInclinometer3_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CIInclinometer3_FWD_DEFINED__
namespace ABI {
    namespace Windows {
        namespace Devices {
            namespace Sensors {
                interface IInclinometer3;
            } /* Sensors */
        } /* Devices */
    } /* Windows */
} /* ABI */
#define __x_ABI_CWindows_CDevices_CSensors_CIInclinometer3 ABI::Windows::Devices::Sensors::IInclinometer3

#endif // ____x_ABI_CWindows_CDevices_CSensors_CIInclinometer3_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CDevices_CSensors_CIInclinometer4_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CIInclinometer4_FWD_DEFINED__
namespace ABI {
    namespace Windows {
        namespace Devices {
            namespace Sensors {
                interface IInclinometer4;
            } /* Sensors */
        } /* Devices */
    } /* Windows */
} /* ABI */
#define __x_ABI_CWindows_CDevices_CSensors_CIInclinometer4 ABI::Windows::Devices::Sensors::IInclinometer4

#endif // ____x_ABI_CWindows_CDevices_CSensors_CIInclinometer4_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CDevices_CSensors_CIInclinometerDataThreshold_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CIInclinometerDataThreshold_FWD_DEFINED__
namespace ABI {
    namespace Windows {
        namespace Devices {
            namespace Sensors {
                interface IInclinometerDataThreshold;
            } /* Sensors */
        } /* Devices */
    } /* Windows */
} /* ABI */
#define __x_ABI_CWindows_CDevices_CSensors_CIInclinometerDataThreshold ABI::Windows::Devices::Sensors::IInclinometerDataThreshold

#endif // ____x_ABI_CWindows_CDevices_CSensors_CIInclinometerDataThreshold_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CDevices_CSensors_CIInclinometerDeviceId_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CIInclinometerDeviceId_FWD_DEFINED__
namespace ABI {
    namespace Windows {
        namespace Devices {
            namespace Sensors {
                interface IInclinometerDeviceId;
            } /* Sensors */
        } /* Devices */
    } /* Windows */
} /* ABI */
#define __x_ABI_CWindows_CDevices_CSensors_CIInclinometerDeviceId ABI::Windows::Devices::Sensors::IInclinometerDeviceId

#endif // ____x_ABI_CWindows_CDevices_CSensors_CIInclinometerDeviceId_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CDevices_CSensors_CIInclinometerReading_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CIInclinometerReading_FWD_DEFINED__
namespace ABI {
    namespace Windows {
        namespace Devices {
            namespace Sensors {
                interface IInclinometerReading;
            } /* Sensors */
        } /* Devices */
    } /* Windows */
} /* ABI */
#define __x_ABI_CWindows_CDevices_CSensors_CIInclinometerReading ABI::Windows::Devices::Sensors::IInclinometerReading

#endif // ____x_ABI_CWindows_CDevices_CSensors_CIInclinometerReading_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CDevices_CSensors_CIInclinometerReading2_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CIInclinometerReading2_FWD_DEFINED__
namespace ABI {
    namespace Windows {
        namespace Devices {
            namespace Sensors {
                interface IInclinometerReading2;
            } /* Sensors */
        } /* Devices */
    } /* Windows */
} /* ABI */
#define __x_ABI_CWindows_CDevices_CSensors_CIInclinometerReading2 ABI::Windows::Devices::Sensors::IInclinometerReading2

#endif // ____x_ABI_CWindows_CDevices_CSensors_CIInclinometerReading2_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CDevices_CSensors_CIInclinometerReadingChangedEventArgs_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CIInclinometerReadingChangedEventArgs_FWD_DEFINED__
namespace ABI {
    namespace Windows {
        namespace Devices {
            namespace Sensors {
                interface IInclinometerReadingChangedEventArgs;
            } /* Sensors */
        } /* Devices */
    } /* Windows */
} /* ABI */
#define __x_ABI_CWindows_CDevices_CSensors_CIInclinometerReadingChangedEventArgs ABI::Windows::Devices::Sensors::IInclinometerReadingChangedEventArgs

#endif // ____x_ABI_CWindows_CDevices_CSensors_CIInclinometerReadingChangedEventArgs_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CDevices_CSensors_CIInclinometerReadingYawAccuracy_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CIInclinometerReadingYawAccuracy_FWD_DEFINED__
namespace ABI {
    namespace Windows {
        namespace Devices {
            namespace Sensors {
                interface IInclinometerReadingYawAccuracy;
            } /* Sensors */
        } /* Devices */
    } /* Windows */
} /* ABI */
#define __x_ABI_CWindows_CDevices_CSensors_CIInclinometerReadingYawAccuracy ABI::Windows::Devices::Sensors::IInclinometerReadingYawAccuracy

#endif // ____x_ABI_CWindows_CDevices_CSensors_CIInclinometerReadingYawAccuracy_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CDevices_CSensors_CIInclinometerStatics_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CIInclinometerStatics_FWD_DEFINED__
namespace ABI {
    namespace Windows {
        namespace Devices {
            namespace Sensors {
                interface IInclinometerStatics;
            } /* Sensors */
        } /* Devices */
    } /* Windows */
} /* ABI */
#define __x_ABI_CWindows_CDevices_CSensors_CIInclinometerStatics ABI::Windows::Devices::Sensors::IInclinometerStatics

#endif // ____x_ABI_CWindows_CDevices_CSensors_CIInclinometerStatics_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CDevices_CSensors_CIInclinometerStatics2_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CIInclinometerStatics2_FWD_DEFINED__
namespace ABI {
    namespace Windows {
        namespace Devices {
            namespace Sensors {
                interface IInclinometerStatics2;
            } /* Sensors */
        } /* Devices */
    } /* Windows */
} /* ABI */
#define __x_ABI_CWindows_CDevices_CSensors_CIInclinometerStatics2 ABI::Windows::Devices::Sensors::IInclinometerStatics2

#endif // ____x_ABI_CWindows_CDevices_CSensors_CIInclinometerStatics2_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CDevices_CSensors_CIInclinometerStatics3_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CIInclinometerStatics3_FWD_DEFINED__
namespace ABI {
    namespace Windows {
        namespace Devices {
            namespace Sensors {
                interface IInclinometerStatics3;
            } /* Sensors */
        } /* Devices */
    } /* Windows */
} /* ABI */
#define __x_ABI_CWindows_CDevices_CSensors_CIInclinometerStatics3 ABI::Windows::Devices::Sensors::IInclinometerStatics3

#endif // ____x_ABI_CWindows_CDevices_CSensors_CIInclinometerStatics3_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CDevices_CSensors_CIInclinometerStatics4_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CIInclinometerStatics4_FWD_DEFINED__
namespace ABI {
    namespace Windows {
        namespace Devices {
            namespace Sensors {
                interface IInclinometerStatics4;
            } /* Sensors */
        } /* Devices */
    } /* Windows */
} /* ABI */
#define __x_ABI_CWindows_CDevices_CSensors_CIInclinometerStatics4 ABI::Windows::Devices::Sensors::IInclinometerStatics4

#endif // ____x_ABI_CWindows_CDevices_CSensors_CIInclinometerStatics4_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CDevices_CSensors_CILightSensor_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CILightSensor_FWD_DEFINED__
namespace ABI {
    namespace Windows {
        namespace Devices {
            namespace Sensors {
                interface ILightSensor;
            } /* Sensors */
        } /* Devices */
    } /* Windows */
} /* ABI */
#define __x_ABI_CWindows_CDevices_CSensors_CILightSensor ABI::Windows::Devices::Sensors::ILightSensor

#endif // ____x_ABI_CWindows_CDevices_CSensors_CILightSensor_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CDevices_CSensors_CILightSensor2_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CILightSensor2_FWD_DEFINED__
namespace ABI {
    namespace Windows {
        namespace Devices {
            namespace Sensors {
                interface ILightSensor2;
            } /* Sensors */
        } /* Devices */
    } /* Windows */
} /* ABI */
#define __x_ABI_CWindows_CDevices_CSensors_CILightSensor2 ABI::Windows::Devices::Sensors::ILightSensor2

#endif // ____x_ABI_CWindows_CDevices_CSensors_CILightSensor2_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CDevices_CSensors_CILightSensor3_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CILightSensor3_FWD_DEFINED__
namespace ABI {
    namespace Windows {
        namespace Devices {
            namespace Sensors {
                interface ILightSensor3;
            } /* Sensors */
        } /* Devices */
    } /* Windows */
} /* ABI */
#define __x_ABI_CWindows_CDevices_CSensors_CILightSensor3 ABI::Windows::Devices::Sensors::ILightSensor3

#endif // ____x_ABI_CWindows_CDevices_CSensors_CILightSensor3_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CDevices_CSensors_CILightSensorDataThreshold_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CILightSensorDataThreshold_FWD_DEFINED__
namespace ABI {
    namespace Windows {
        namespace Devices {
            namespace Sensors {
                interface ILightSensorDataThreshold;
            } /* Sensors */
        } /* Devices */
    } /* Windows */
} /* ABI */
#define __x_ABI_CWindows_CDevices_CSensors_CILightSensorDataThreshold ABI::Windows::Devices::Sensors::ILightSensorDataThreshold

#endif // ____x_ABI_CWindows_CDevices_CSensors_CILightSensorDataThreshold_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CDevices_CSensors_CILightSensorDeviceId_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CILightSensorDeviceId_FWD_DEFINED__
namespace ABI {
    namespace Windows {
        namespace Devices {
            namespace Sensors {
                interface ILightSensorDeviceId;
            } /* Sensors */
        } /* Devices */
    } /* Windows */
} /* ABI */
#define __x_ABI_CWindows_CDevices_CSensors_CILightSensorDeviceId ABI::Windows::Devices::Sensors::ILightSensorDeviceId

#endif // ____x_ABI_CWindows_CDevices_CSensors_CILightSensorDeviceId_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CDevices_CSensors_CILightSensorReading_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CILightSensorReading_FWD_DEFINED__
namespace ABI {
    namespace Windows {
        namespace Devices {
            namespace Sensors {
                interface ILightSensorReading;
            } /* Sensors */
        } /* Devices */
    } /* Windows */
} /* ABI */
#define __x_ABI_CWindows_CDevices_CSensors_CILightSensorReading ABI::Windows::Devices::Sensors::ILightSensorReading

#endif // ____x_ABI_CWindows_CDevices_CSensors_CILightSensorReading_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CDevices_CSensors_CILightSensorReading2_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CILightSensorReading2_FWD_DEFINED__
namespace ABI {
    namespace Windows {
        namespace Devices {
            namespace Sensors {
                interface ILightSensorReading2;
            } /* Sensors */
        } /* Devices */
    } /* Windows */
} /* ABI */
#define __x_ABI_CWindows_CDevices_CSensors_CILightSensorReading2 ABI::Windows::Devices::Sensors::ILightSensorReading2

#endif // ____x_ABI_CWindows_CDevices_CSensors_CILightSensorReading2_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CDevices_CSensors_CILightSensorReadingChangedEventArgs_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CILightSensorReadingChangedEventArgs_FWD_DEFINED__
namespace ABI {
    namespace Windows {
        namespace Devices {
            namespace Sensors {
                interface ILightSensorReadingChangedEventArgs;
            } /* Sensors */
        } /* Devices */
    } /* Windows */
} /* ABI */
#define __x_ABI_CWindows_CDevices_CSensors_CILightSensorReadingChangedEventArgs ABI::Windows::Devices::Sensors::ILightSensorReadingChangedEventArgs

#endif // ____x_ABI_CWindows_CDevices_CSensors_CILightSensorReadingChangedEventArgs_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CDevices_CSensors_CILightSensorStatics_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CILightSensorStatics_FWD_DEFINED__
namespace ABI {
    namespace Windows {
        namespace Devices {
            namespace Sensors {
                interface ILightSensorStatics;
            } /* Sensors */
        } /* Devices */
    } /* Windows */
} /* ABI */
#define __x_ABI_CWindows_CDevices_CSensors_CILightSensorStatics ABI::Windows::Devices::Sensors::ILightSensorStatics

#endif // ____x_ABI_CWindows_CDevices_CSensors_CILightSensorStatics_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CDevices_CSensors_CILightSensorStatics2_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CILightSensorStatics2_FWD_DEFINED__
namespace ABI {
    namespace Windows {
        namespace Devices {
            namespace Sensors {
                interface ILightSensorStatics2;
            } /* Sensors */
        } /* Devices */
    } /* Windows */
} /* ABI */
#define __x_ABI_CWindows_CDevices_CSensors_CILightSensorStatics2 ABI::Windows::Devices::Sensors::ILightSensorStatics2

#endif // ____x_ABI_CWindows_CDevices_CSensors_CILightSensorStatics2_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CDevices_CSensors_CIMagnetometer_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CIMagnetometer_FWD_DEFINED__
namespace ABI {
    namespace Windows {
        namespace Devices {
            namespace Sensors {
                interface IMagnetometer;
            } /* Sensors */
        } /* Devices */
    } /* Windows */
} /* ABI */
#define __x_ABI_CWindows_CDevices_CSensors_CIMagnetometer ABI::Windows::Devices::Sensors::IMagnetometer

#endif // ____x_ABI_CWindows_CDevices_CSensors_CIMagnetometer_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CDevices_CSensors_CIMagnetometer2_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CIMagnetometer2_FWD_DEFINED__
namespace ABI {
    namespace Windows {
        namespace Devices {
            namespace Sensors {
                interface IMagnetometer2;
            } /* Sensors */
        } /* Devices */
    } /* Windows */
} /* ABI */
#define __x_ABI_CWindows_CDevices_CSensors_CIMagnetometer2 ABI::Windows::Devices::Sensors::IMagnetometer2

#endif // ____x_ABI_CWindows_CDevices_CSensors_CIMagnetometer2_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CDevices_CSensors_CIMagnetometer3_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CIMagnetometer3_FWD_DEFINED__
namespace ABI {
    namespace Windows {
        namespace Devices {
            namespace Sensors {
                interface IMagnetometer3;
            } /* Sensors */
        } /* Devices */
    } /* Windows */
} /* ABI */
#define __x_ABI_CWindows_CDevices_CSensors_CIMagnetometer3 ABI::Windows::Devices::Sensors::IMagnetometer3

#endif // ____x_ABI_CWindows_CDevices_CSensors_CIMagnetometer3_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CDevices_CSensors_CIMagnetometer4_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CIMagnetometer4_FWD_DEFINED__
namespace ABI {
    namespace Windows {
        namespace Devices {
            namespace Sensors {
                interface IMagnetometer4;
            } /* Sensors */
        } /* Devices */
    } /* Windows */
} /* ABI */
#define __x_ABI_CWindows_CDevices_CSensors_CIMagnetometer4 ABI::Windows::Devices::Sensors::IMagnetometer4

#endif // ____x_ABI_CWindows_CDevices_CSensors_CIMagnetometer4_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CDevices_CSensors_CIMagnetometerDataThreshold_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CIMagnetometerDataThreshold_FWD_DEFINED__
namespace ABI {
    namespace Windows {
        namespace Devices {
            namespace Sensors {
                interface IMagnetometerDataThreshold;
            } /* Sensors */
        } /* Devices */
    } /* Windows */
} /* ABI */
#define __x_ABI_CWindows_CDevices_CSensors_CIMagnetometerDataThreshold ABI::Windows::Devices::Sensors::IMagnetometerDataThreshold

#endif // ____x_ABI_CWindows_CDevices_CSensors_CIMagnetometerDataThreshold_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CDevices_CSensors_CIMagnetometerDeviceId_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CIMagnetometerDeviceId_FWD_DEFINED__
namespace ABI {
    namespace Windows {
        namespace Devices {
            namespace Sensors {
                interface IMagnetometerDeviceId;
            } /* Sensors */
        } /* Devices */
    } /* Windows */
} /* ABI */
#define __x_ABI_CWindows_CDevices_CSensors_CIMagnetometerDeviceId ABI::Windows::Devices::Sensors::IMagnetometerDeviceId

#endif // ____x_ABI_CWindows_CDevices_CSensors_CIMagnetometerDeviceId_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CDevices_CSensors_CIMagnetometerReading_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CIMagnetometerReading_FWD_DEFINED__
namespace ABI {
    namespace Windows {
        namespace Devices {
            namespace Sensors {
                interface IMagnetometerReading;
            } /* Sensors */
        } /* Devices */
    } /* Windows */
} /* ABI */
#define __x_ABI_CWindows_CDevices_CSensors_CIMagnetometerReading ABI::Windows::Devices::Sensors::IMagnetometerReading

#endif // ____x_ABI_CWindows_CDevices_CSensors_CIMagnetometerReading_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CDevices_CSensors_CIMagnetometerReading2_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CIMagnetometerReading2_FWD_DEFINED__
namespace ABI {
    namespace Windows {
        namespace Devices {
            namespace Sensors {
                interface IMagnetometerReading2;
            } /* Sensors */
        } /* Devices */
    } /* Windows */
} /* ABI */
#define __x_ABI_CWindows_CDevices_CSensors_CIMagnetometerReading2 ABI::Windows::Devices::Sensors::IMagnetometerReading2

#endif // ____x_ABI_CWindows_CDevices_CSensors_CIMagnetometerReading2_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CDevices_CSensors_CIMagnetometerReadingChangedEventArgs_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CIMagnetometerReadingChangedEventArgs_FWD_DEFINED__
namespace ABI {
    namespace Windows {
        namespace Devices {
            namespace Sensors {
                interface IMagnetometerReadingChangedEventArgs;
            } /* Sensors */
        } /* Devices */
    } /* Windows */
} /* ABI */
#define __x_ABI_CWindows_CDevices_CSensors_CIMagnetometerReadingChangedEventArgs ABI::Windows::Devices::Sensors::IMagnetometerReadingChangedEventArgs

#endif // ____x_ABI_CWindows_CDevices_CSensors_CIMagnetometerReadingChangedEventArgs_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CDevices_CSensors_CIMagnetometerStatics_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CIMagnetometerStatics_FWD_DEFINED__
namespace ABI {
    namespace Windows {
        namespace Devices {
            namespace Sensors {
                interface IMagnetometerStatics;
            } /* Sensors */
        } /* Devices */
    } /* Windows */
} /* ABI */
#define __x_ABI_CWindows_CDevices_CSensors_CIMagnetometerStatics ABI::Windows::Devices::Sensors::IMagnetometerStatics

#endif // ____x_ABI_CWindows_CDevices_CSensors_CIMagnetometerStatics_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CDevices_CSensors_CIMagnetometerStatics2_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CIMagnetometerStatics2_FWD_DEFINED__
namespace ABI {
    namespace Windows {
        namespace Devices {
            namespace Sensors {
                interface IMagnetometerStatics2;
            } /* Sensors */
        } /* Devices */
    } /* Windows */
} /* ABI */
#define __x_ABI_CWindows_CDevices_CSensors_CIMagnetometerStatics2 ABI::Windows::Devices::Sensors::IMagnetometerStatics2

#endif // ____x_ABI_CWindows_CDevices_CSensors_CIMagnetometerStatics2_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CDevices_CSensors_CIOrientationSensor_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CIOrientationSensor_FWD_DEFINED__
namespace ABI {
    namespace Windows {
        namespace Devices {
            namespace Sensors {
                interface IOrientationSensor;
            } /* Sensors */
        } /* Devices */
    } /* Windows */
} /* ABI */
#define __x_ABI_CWindows_CDevices_CSensors_CIOrientationSensor ABI::Windows::Devices::Sensors::IOrientationSensor

#endif // ____x_ABI_CWindows_CDevices_CSensors_CIOrientationSensor_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CDevices_CSensors_CIOrientationSensor2_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CIOrientationSensor2_FWD_DEFINED__
namespace ABI {
    namespace Windows {
        namespace Devices {
            namespace Sensors {
                interface IOrientationSensor2;
            } /* Sensors */
        } /* Devices */
    } /* Windows */
} /* ABI */
#define __x_ABI_CWindows_CDevices_CSensors_CIOrientationSensor2 ABI::Windows::Devices::Sensors::IOrientationSensor2

#endif // ____x_ABI_CWindows_CDevices_CSensors_CIOrientationSensor2_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CDevices_CSensors_CIOrientationSensor3_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CIOrientationSensor3_FWD_DEFINED__
namespace ABI {
    namespace Windows {
        namespace Devices {
            namespace Sensors {
                interface IOrientationSensor3;
            } /* Sensors */
        } /* Devices */
    } /* Windows */
} /* ABI */
#define __x_ABI_CWindows_CDevices_CSensors_CIOrientationSensor3 ABI::Windows::Devices::Sensors::IOrientationSensor3

#endif // ____x_ABI_CWindows_CDevices_CSensors_CIOrientationSensor3_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorDeviceId_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorDeviceId_FWD_DEFINED__
namespace ABI {
    namespace Windows {
        namespace Devices {
            namespace Sensors {
                interface IOrientationSensorDeviceId;
            } /* Sensors */
        } /* Devices */
    } /* Windows */
} /* ABI */
#define __x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorDeviceId ABI::Windows::Devices::Sensors::IOrientationSensorDeviceId

#endif // ____x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorDeviceId_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorReading_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorReading_FWD_DEFINED__
namespace ABI {
    namespace Windows {
        namespace Devices {
            namespace Sensors {
                interface IOrientationSensorReading;
            } /* Sensors */
        } /* Devices */
    } /* Windows */
} /* ABI */
#define __x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorReading ABI::Windows::Devices::Sensors::IOrientationSensorReading

#endif // ____x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorReading_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorReading2_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorReading2_FWD_DEFINED__
namespace ABI {
    namespace Windows {
        namespace Devices {
            namespace Sensors {
                interface IOrientationSensorReading2;
            } /* Sensors */
        } /* Devices */
    } /* Windows */
} /* ABI */
#define __x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorReading2 ABI::Windows::Devices::Sensors::IOrientationSensorReading2

#endif // ____x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorReading2_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorReadingChangedEventArgs_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorReadingChangedEventArgs_FWD_DEFINED__
namespace ABI {
    namespace Windows {
        namespace Devices {
            namespace Sensors {
                interface IOrientationSensorReadingChangedEventArgs;
            } /* Sensors */
        } /* Devices */
    } /* Windows */
} /* ABI */
#define __x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorReadingChangedEventArgs ABI::Windows::Devices::Sensors::IOrientationSensorReadingChangedEventArgs

#endif // ____x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorReadingChangedEventArgs_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorReadingYawAccuracy_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorReadingYawAccuracy_FWD_DEFINED__
namespace ABI {
    namespace Windows {
        namespace Devices {
            namespace Sensors {
                interface IOrientationSensorReadingYawAccuracy;
            } /* Sensors */
        } /* Devices */
    } /* Windows */
} /* ABI */
#define __x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorReadingYawAccuracy ABI::Windows::Devices::Sensors::IOrientationSensorReadingYawAccuracy

#endif // ____x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorReadingYawAccuracy_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorStatics_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorStatics_FWD_DEFINED__
namespace ABI {
    namespace Windows {
        namespace Devices {
            namespace Sensors {
                interface IOrientationSensorStatics;
            } /* Sensors */
        } /* Devices */
    } /* Windows */
} /* ABI */
#define __x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorStatics ABI::Windows::Devices::Sensors::IOrientationSensorStatics

#endif // ____x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorStatics_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorStatics2_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorStatics2_FWD_DEFINED__
namespace ABI {
    namespace Windows {
        namespace Devices {
            namespace Sensors {
                interface IOrientationSensorStatics2;
            } /* Sensors */
        } /* Devices */
    } /* Windows */
} /* ABI */
#define __x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorStatics2 ABI::Windows::Devices::Sensors::IOrientationSensorStatics2

#endif // ____x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorStatics2_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorStatics3_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorStatics3_FWD_DEFINED__
namespace ABI {
    namespace Windows {
        namespace Devices {
            namespace Sensors {
                interface IOrientationSensorStatics3;
            } /* Sensors */
        } /* Devices */
    } /* Windows */
} /* ABI */
#define __x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorStatics3 ABI::Windows::Devices::Sensors::IOrientationSensorStatics3

#endif // ____x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorStatics3_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorStatics4_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorStatics4_FWD_DEFINED__
namespace ABI {
    namespace Windows {
        namespace Devices {
            namespace Sensors {
                interface IOrientationSensorStatics4;
            } /* Sensors */
        } /* Devices */
    } /* Windows */
} /* ABI */
#define __x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorStatics4 ABI::Windows::Devices::Sensors::IOrientationSensorStatics4

#endif // ____x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorStatics4_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CDevices_CSensors_CIPedometer_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CIPedometer_FWD_DEFINED__
namespace ABI {
    namespace Windows {
        namespace Devices {
            namespace Sensors {
                interface IPedometer;
            } /* Sensors */
        } /* Devices */
    } /* Windows */
} /* ABI */
#define __x_ABI_CWindows_CDevices_CSensors_CIPedometer ABI::Windows::Devices::Sensors::IPedometer

#endif // ____x_ABI_CWindows_CDevices_CSensors_CIPedometer_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CDevices_CSensors_CIPedometer2_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CIPedometer2_FWD_DEFINED__
namespace ABI {
    namespace Windows {
        namespace Devices {
            namespace Sensors {
                interface IPedometer2;
            } /* Sensors */
        } /* Devices */
    } /* Windows */
} /* ABI */
#define __x_ABI_CWindows_CDevices_CSensors_CIPedometer2 ABI::Windows::Devices::Sensors::IPedometer2

#endif // ____x_ABI_CWindows_CDevices_CSensors_CIPedometer2_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CDevices_CSensors_CIPedometerDataThresholdFactory_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CIPedometerDataThresholdFactory_FWD_DEFINED__
namespace ABI {
    namespace Windows {
        namespace Devices {
            namespace Sensors {
                interface IPedometerDataThresholdFactory;
            } /* Sensors */
        } /* Devices */
    } /* Windows */
} /* ABI */
#define __x_ABI_CWindows_CDevices_CSensors_CIPedometerDataThresholdFactory ABI::Windows::Devices::Sensors::IPedometerDataThresholdFactory

#endif // ____x_ABI_CWindows_CDevices_CSensors_CIPedometerDataThresholdFactory_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CDevices_CSensors_CIPedometerReading_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CIPedometerReading_FWD_DEFINED__
namespace ABI {
    namespace Windows {
        namespace Devices {
            namespace Sensors {
                interface IPedometerReading;
            } /* Sensors */
        } /* Devices */
    } /* Windows */
} /* ABI */
#define __x_ABI_CWindows_CDevices_CSensors_CIPedometerReading ABI::Windows::Devices::Sensors::IPedometerReading

#endif // ____x_ABI_CWindows_CDevices_CSensors_CIPedometerReading_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CDevices_CSensors_CIPedometerReadingChangedEventArgs_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CIPedometerReadingChangedEventArgs_FWD_DEFINED__
namespace ABI {
    namespace Windows {
        namespace Devices {
            namespace Sensors {
                interface IPedometerReadingChangedEventArgs;
            } /* Sensors */
        } /* Devices */
    } /* Windows */
} /* ABI */
#define __x_ABI_CWindows_CDevices_CSensors_CIPedometerReadingChangedEventArgs ABI::Windows::Devices::Sensors::IPedometerReadingChangedEventArgs

#endif // ____x_ABI_CWindows_CDevices_CSensors_CIPedometerReadingChangedEventArgs_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CDevices_CSensors_CIPedometerStatics_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CIPedometerStatics_FWD_DEFINED__
namespace ABI {
    namespace Windows {
        namespace Devices {
            namespace Sensors {
                interface IPedometerStatics;
            } /* Sensors */
        } /* Devices */
    } /* Windows */
} /* ABI */
#define __x_ABI_CWindows_CDevices_CSensors_CIPedometerStatics ABI::Windows::Devices::Sensors::IPedometerStatics

#endif // ____x_ABI_CWindows_CDevices_CSensors_CIPedometerStatics_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CDevices_CSensors_CIPedometerStatics2_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CIPedometerStatics2_FWD_DEFINED__
namespace ABI {
    namespace Windows {
        namespace Devices {
            namespace Sensors {
                interface IPedometerStatics2;
            } /* Sensors */
        } /* Devices */
    } /* Windows */
} /* ABI */
#define __x_ABI_CWindows_CDevices_CSensors_CIPedometerStatics2 ABI::Windows::Devices::Sensors::IPedometerStatics2

#endif // ____x_ABI_CWindows_CDevices_CSensors_CIPedometerStatics2_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CDevices_CSensors_CIProximitySensor_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CIProximitySensor_FWD_DEFINED__
namespace ABI {
    namespace Windows {
        namespace Devices {
            namespace Sensors {
                interface IProximitySensor;
            } /* Sensors */
        } /* Devices */
    } /* Windows */
} /* ABI */
#define __x_ABI_CWindows_CDevices_CSensors_CIProximitySensor ABI::Windows::Devices::Sensors::IProximitySensor

#endif // ____x_ABI_CWindows_CDevices_CSensors_CIProximitySensor_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CDevices_CSensors_CIProximitySensorDataThresholdFactory_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CIProximitySensorDataThresholdFactory_FWD_DEFINED__
namespace ABI {
    namespace Windows {
        namespace Devices {
            namespace Sensors {
                interface IProximitySensorDataThresholdFactory;
            } /* Sensors */
        } /* Devices */
    } /* Windows */
} /* ABI */
#define __x_ABI_CWindows_CDevices_CSensors_CIProximitySensorDataThresholdFactory ABI::Windows::Devices::Sensors::IProximitySensorDataThresholdFactory

#endif // ____x_ABI_CWindows_CDevices_CSensors_CIProximitySensorDataThresholdFactory_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CDevices_CSensors_CIProximitySensorReading_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CIProximitySensorReading_FWD_DEFINED__
namespace ABI {
    namespace Windows {
        namespace Devices {
            namespace Sensors {
                interface IProximitySensorReading;
            } /* Sensors */
        } /* Devices */
    } /* Windows */
} /* ABI */
#define __x_ABI_CWindows_CDevices_CSensors_CIProximitySensorReading ABI::Windows::Devices::Sensors::IProximitySensorReading

#endif // ____x_ABI_CWindows_CDevices_CSensors_CIProximitySensorReading_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CDevices_CSensors_CIProximitySensorReadingChangedEventArgs_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CIProximitySensorReadingChangedEventArgs_FWD_DEFINED__
namespace ABI {
    namespace Windows {
        namespace Devices {
            namespace Sensors {
                interface IProximitySensorReadingChangedEventArgs;
            } /* Sensors */
        } /* Devices */
    } /* Windows */
} /* ABI */
#define __x_ABI_CWindows_CDevices_CSensors_CIProximitySensorReadingChangedEventArgs ABI::Windows::Devices::Sensors::IProximitySensorReadingChangedEventArgs

#endif // ____x_ABI_CWindows_CDevices_CSensors_CIProximitySensorReadingChangedEventArgs_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CDevices_CSensors_CIProximitySensorStatics_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CIProximitySensorStatics_FWD_DEFINED__
namespace ABI {
    namespace Windows {
        namespace Devices {
            namespace Sensors {
                interface IProximitySensorStatics;
            } /* Sensors */
        } /* Devices */
    } /* Windows */
} /* ABI */
#define __x_ABI_CWindows_CDevices_CSensors_CIProximitySensorStatics ABI::Windows::Devices::Sensors::IProximitySensorStatics

#endif // ____x_ABI_CWindows_CDevices_CSensors_CIProximitySensorStatics_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CDevices_CSensors_CIProximitySensorStatics2_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CIProximitySensorStatics2_FWD_DEFINED__
namespace ABI {
    namespace Windows {
        namespace Devices {
            namespace Sensors {
                interface IProximitySensorStatics2;
            } /* Sensors */
        } /* Devices */
    } /* Windows */
} /* ABI */
#define __x_ABI_CWindows_CDevices_CSensors_CIProximitySensorStatics2 ABI::Windows::Devices::Sensors::IProximitySensorStatics2

#endif // ____x_ABI_CWindows_CDevices_CSensors_CIProximitySensorStatics2_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CDevices_CSensors_CISensorDataThreshold_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CISensorDataThreshold_FWD_DEFINED__
namespace ABI {
    namespace Windows {
        namespace Devices {
            namespace Sensors {
                interface ISensorDataThreshold;
            } /* Sensors */
        } /* Devices */
    } /* Windows */
} /* ABI */
#define __x_ABI_CWindows_CDevices_CSensors_CISensorDataThreshold ABI::Windows::Devices::Sensors::ISensorDataThreshold

#endif // ____x_ABI_CWindows_CDevices_CSensors_CISensorDataThreshold_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CDevices_CSensors_CISensorDataThresholdTriggerDetails_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CISensorDataThresholdTriggerDetails_FWD_DEFINED__
namespace ABI {
    namespace Windows {
        namespace Devices {
            namespace Sensors {
                interface ISensorDataThresholdTriggerDetails;
            } /* Sensors */
        } /* Devices */
    } /* Windows */
} /* ABI */
#define __x_ABI_CWindows_CDevices_CSensors_CISensorDataThresholdTriggerDetails ABI::Windows::Devices::Sensors::ISensorDataThresholdTriggerDetails

#endif // ____x_ABI_CWindows_CDevices_CSensors_CISensorDataThresholdTriggerDetails_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CDevices_CSensors_CISensorQuaternion_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CISensorQuaternion_FWD_DEFINED__
namespace ABI {
    namespace Windows {
        namespace Devices {
            namespace Sensors {
                interface ISensorQuaternion;
            } /* Sensors */
        } /* Devices */
    } /* Windows */
} /* ABI */
#define __x_ABI_CWindows_CDevices_CSensors_CISensorQuaternion ABI::Windows::Devices::Sensors::ISensorQuaternion

#endif // ____x_ABI_CWindows_CDevices_CSensors_CISensorQuaternion_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CDevices_CSensors_CISensorRotationMatrix_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CISensorRotationMatrix_FWD_DEFINED__
namespace ABI {
    namespace Windows {
        namespace Devices {
            namespace Sensors {
                interface ISensorRotationMatrix;
            } /* Sensors */
        } /* Devices */
    } /* Windows */
} /* ABI */
#define __x_ABI_CWindows_CDevices_CSensors_CISensorRotationMatrix ABI::Windows::Devices::Sensors::ISensorRotationMatrix

#endif // ____x_ABI_CWindows_CDevices_CSensors_CISensorRotationMatrix_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensor_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensor_FWD_DEFINED__
namespace ABI {
    namespace Windows {
        namespace Devices {
            namespace Sensors {
                interface ISimpleOrientationSensor;
            } /* Sensors */
        } /* Devices */
    } /* Windows */
} /* ABI */
#define __x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensor ABI::Windows::Devices::Sensors::ISimpleOrientationSensor

#endif // ____x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensor_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensor2_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensor2_FWD_DEFINED__
namespace ABI {
    namespace Windows {
        namespace Devices {
            namespace Sensors {
                interface ISimpleOrientationSensor2;
            } /* Sensors */
        } /* Devices */
    } /* Windows */
} /* ABI */
#define __x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensor2 ABI::Windows::Devices::Sensors::ISimpleOrientationSensor2

#endif // ____x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensor2_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensorDeviceId_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensorDeviceId_FWD_DEFINED__
namespace ABI {
    namespace Windows {
        namespace Devices {
            namespace Sensors {
                interface ISimpleOrientationSensorDeviceId;
            } /* Sensors */
        } /* Devices */
    } /* Windows */
} /* ABI */
#define __x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensorDeviceId ABI::Windows::Devices::Sensors::ISimpleOrientationSensorDeviceId

#endif // ____x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensorDeviceId_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensorOrientationChangedEventArgs_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensorOrientationChangedEventArgs_FWD_DEFINED__
namespace ABI {
    namespace Windows {
        namespace Devices {
            namespace Sensors {
                interface ISimpleOrientationSensorOrientationChangedEventArgs;
            } /* Sensors */
        } /* Devices */
    } /* Windows */
} /* ABI */
#define __x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensorOrientationChangedEventArgs ABI::Windows::Devices::Sensors::ISimpleOrientationSensorOrientationChangedEventArgs

#endif // ____x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensorOrientationChangedEventArgs_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensorStatics_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensorStatics_FWD_DEFINED__
namespace ABI {
    namespace Windows {
        namespace Devices {
            namespace Sensors {
                interface ISimpleOrientationSensorStatics;
            } /* Sensors */
        } /* Devices */
    } /* Windows */
} /* ABI */
#define __x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensorStatics ABI::Windows::Devices::Sensors::ISimpleOrientationSensorStatics

#endif // ____x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensorStatics_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensorStatics2_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensorStatics2_FWD_DEFINED__
namespace ABI {
    namespace Windows {
        namespace Devices {
            namespace Sensors {
                interface ISimpleOrientationSensorStatics2;
            } /* Sensors */
        } /* Devices */
    } /* Windows */
} /* ABI */
#define __x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensorStatics2 ABI::Windows::Devices::Sensors::ISimpleOrientationSensorStatics2

#endif // ____x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensorStatics2_FWD_DEFINED__

// Parameterized interface forward declarations (C++)

// Collection interface definitions
namespace ABI {
    namespace Windows {
        namespace Devices {
            namespace Sensors {
                class Accelerometer;
            } /* Sensors */
        } /* Devices */
    } /* Windows */
} /* ABI */

#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

#ifndef DEF___FIAsyncOperation_1_Windows__CDevices__CSensors__CAccelerometer_USE
#define DEF___FIAsyncOperation_1_Windows__CDevices__CSensors__CAccelerometer_USE
#if !defined(RO_NO_TEMPLATE_NAME)
namespace ABI { namespace Windows { namespace Foundation {
template <>
struct __declspec(uuid("fc761d3b-5e4d-5148-a618-7b677059d0b8"))
IAsyncOperation<ABI::Windows::Devices::Sensors::Accelerometer*> : IAsyncOperation_impl<ABI::Windows::Foundation::Internal::AggregateType<ABI::Windows::Devices::Sensors::Accelerometer*, ABI::Windows::Devices::Sensors::IAccelerometer*>>
{
    static const wchar_t* z_get_rc_name_impl()
    {
        return L"Windows.Foundation.IAsyncOperation`1<Windows.Devices.Sensors.Accelerometer>";
    }
};
// Define a typedef for the parameterized interface specialization's mangled name.
// This allows code which uses the mangled name for the parameterized interface to access the
// correct parameterized interface specialization.
typedef IAsyncOperation<ABI::Windows::Devices::Sensors::Accelerometer*> __FIAsyncOperation_1_Windows__CDevices__CSensors__CAccelerometer_t;
#define __FIAsyncOperation_1_Windows__CDevices__CSensors__CAccelerometer ABI::Windows::Foundation::__FIAsyncOperation_1_Windows__CDevices__CSensors__CAccelerometer_t
/* Foundation */ } /* Windows */ } /* ABI */ }

#endif // !defined(RO_NO_TEMPLATE_NAME)
#endif /* DEF___FIAsyncOperation_1_Windows__CDevices__CSensors__CAccelerometer_USE */

#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

#ifndef DEF___FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__CAccelerometer_USE
#define DEF___FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__CAccelerometer_USE
#if !defined(RO_NO_TEMPLATE_NAME)
namespace ABI { namespace Windows { namespace Foundation {
template <>
struct __declspec(uuid("c7c339b6-7527-502a-8a4c-cb9befe15840"))
IAsyncOperationCompletedHandler<ABI::Windows::Devices::Sensors::Accelerometer*> : IAsyncOperationCompletedHandler_impl<ABI::Windows::Foundation::Internal::AggregateType<ABI::Windows::Devices::Sensors::Accelerometer*, ABI::Windows::Devices::Sensors::IAccelerometer*>>
{
    static const wchar_t* z_get_rc_name_impl()
    {
        return L"Windows.Foundation.AsyncOperationCompletedHandler`1<Windows.Devices.Sensors.Accelerometer>";
    }
};
// Define a typedef for the parameterized interface specialization's mangled name.
// This allows code which uses the mangled name for the parameterized interface to access the
// correct parameterized interface specialization.
typedef IAsyncOperationCompletedHandler<ABI::Windows::Devices::Sensors::Accelerometer*> __FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__CAccelerometer_t;
#define __FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__CAccelerometer ABI::Windows::Foundation::__FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__CAccelerometer_t
/* Foundation */ } /* Windows */ } /* ABI */ }

#endif // !defined(RO_NO_TEMPLATE_NAME)
#endif /* DEF___FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__CAccelerometer_USE */

#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

namespace ABI {
    namespace Windows {
        namespace Devices {
            namespace Sensors {
                class ActivitySensor;
            } /* Sensors */
        } /* Devices */
    } /* Windows */
} /* ABI */

#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

#ifndef DEF___FIAsyncOperation_1_Windows__CDevices__CSensors__CActivitySensor_USE
#define DEF___FIAsyncOperation_1_Windows__CDevices__CSensors__CActivitySensor_USE
#if !defined(RO_NO_TEMPLATE_NAME)
namespace ABI { namespace Windows { namespace Foundation {
template <>
struct __declspec(uuid("c33003ae-e7ae-572b-8d55-7db197356c30"))
IAsyncOperation<ABI::Windows::Devices::Sensors::ActivitySensor*> : IAsyncOperation_impl<ABI::Windows::Foundation::Internal::AggregateType<ABI::Windows::Devices::Sensors::ActivitySensor*, ABI::Windows::Devices::Sensors::IActivitySensor*>>
{
    static const wchar_t* z_get_rc_name_impl()
    {
        return L"Windows.Foundation.IAsyncOperation`1<Windows.Devices.Sensors.ActivitySensor>";
    }
};
// Define a typedef for the parameterized interface specialization's mangled name.
// This allows code which uses the mangled name for the parameterized interface to access the
// correct parameterized interface specialization.
typedef IAsyncOperation<ABI::Windows::Devices::Sensors::ActivitySensor*> __FIAsyncOperation_1_Windows__CDevices__CSensors__CActivitySensor_t;
#define __FIAsyncOperation_1_Windows__CDevices__CSensors__CActivitySensor ABI::Windows::Foundation::__FIAsyncOperation_1_Windows__CDevices__CSensors__CActivitySensor_t
/* Foundation */ } /* Windows */ } /* ABI */ }

#endif // !defined(RO_NO_TEMPLATE_NAME)
#endif /* DEF___FIAsyncOperation_1_Windows__CDevices__CSensors__CActivitySensor_USE */

#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

#ifndef DEF___FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__CActivitySensor_USE
#define DEF___FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__CActivitySensor_USE
#if !defined(RO_NO_TEMPLATE_NAME)
namespace ABI { namespace Windows { namespace Foundation {
template <>
struct __declspec(uuid("fb0594f4-93d9-5c2f-b8eb-90f1e9258fdc"))
IAsyncOperationCompletedHandler<ABI::Windows::Devices::Sensors::ActivitySensor*> : IAsyncOperationCompletedHandler_impl<ABI::Windows::Foundation::Internal::AggregateType<ABI::Windows::Devices::Sensors::ActivitySensor*, ABI::Windows::Devices::Sensors::IActivitySensor*>>
{
    static const wchar_t* z_get_rc_name_impl()
    {
        return L"Windows.Foundation.AsyncOperationCompletedHandler`1<Windows.Devices.Sensors.ActivitySensor>";
    }
};
// Define a typedef for the parameterized interface specialization's mangled name.
// This allows code which uses the mangled name for the parameterized interface to access the
// correct parameterized interface specialization.
typedef IAsyncOperationCompletedHandler<ABI::Windows::Devices::Sensors::ActivitySensor*> __FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__CActivitySensor_t;
#define __FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__CActivitySensor ABI::Windows::Foundation::__FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__CActivitySensor_t
/* Foundation */ } /* Windows */ } /* ABI */ }

#endif // !defined(RO_NO_TEMPLATE_NAME)
#endif /* DEF___FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__CActivitySensor_USE */

#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

namespace ABI {
    namespace Windows {
        namespace Devices {
            namespace Sensors {
                class ActivitySensorReading;
            } /* Sensors */
        } /* Devices */
    } /* Windows */
} /* ABI */

#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

#ifndef DEF___FIAsyncOperation_1_Windows__CDevices__CSensors__CActivitySensorReading_USE
#define DEF___FIAsyncOperation_1_Windows__CDevices__CSensors__CActivitySensorReading_USE
#if !defined(RO_NO_TEMPLATE_NAME)
namespace ABI { namespace Windows { namespace Foundation {
template <>
struct __declspec(uuid("79a87969-327f-5b7a-a0d3-73eab16de21c"))
IAsyncOperation<ABI::Windows::Devices::Sensors::ActivitySensorReading*> : IAsyncOperation_impl<ABI::Windows::Foundation::Internal::AggregateType<ABI::Windows::Devices::Sensors::ActivitySensorReading*, ABI::Windows::Devices::Sensors::IActivitySensorReading*>>
{
    static const wchar_t* z_get_rc_name_impl()
    {
        return L"Windows.Foundation.IAsyncOperation`1<Windows.Devices.Sensors.ActivitySensorReading>";
    }
};
// Define a typedef for the parameterized interface specialization's mangled name.
// This allows code which uses the mangled name for the parameterized interface to access the
// correct parameterized interface specialization.
typedef IAsyncOperation<ABI::Windows::Devices::Sensors::ActivitySensorReading*> __FIAsyncOperation_1_Windows__CDevices__CSensors__CActivitySensorReading_t;
#define __FIAsyncOperation_1_Windows__CDevices__CSensors__CActivitySensorReading ABI::Windows::Foundation::__FIAsyncOperation_1_Windows__CDevices__CSensors__CActivitySensorReading_t
/* Foundation */ } /* Windows */ } /* ABI */ }

#endif // !defined(RO_NO_TEMPLATE_NAME)
#endif /* DEF___FIAsyncOperation_1_Windows__CDevices__CSensors__CActivitySensorReading_USE */

#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

#ifndef DEF___FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__CActivitySensorReading_USE
#define DEF___FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__CActivitySensorReading_USE
#if !defined(RO_NO_TEMPLATE_NAME)
namespace ABI { namespace Windows { namespace Foundation {
template <>
struct __declspec(uuid("adc48d5d-b343-5a58-8454-6e2bc2e0475c"))
IAsyncOperationCompletedHandler<ABI::Windows::Devices::Sensors::ActivitySensorReading*> : IAsyncOperationCompletedHandler_impl<ABI::Windows::Foundation::Internal::AggregateType<ABI::Windows::Devices::Sensors::ActivitySensorReading*, ABI::Windows::Devices::Sensors::IActivitySensorReading*>>
{
    static const wchar_t* z_get_rc_name_impl()
    {
        return L"Windows.Foundation.AsyncOperationCompletedHandler`1<Windows.Devices.Sensors.ActivitySensorReading>";
    }
};
// Define a typedef for the parameterized interface specialization's mangled name.
// This allows code which uses the mangled name for the parameterized interface to access the
// correct parameterized interface specialization.
typedef IAsyncOperationCompletedHandler<ABI::Windows::Devices::Sensors::ActivitySensorReading*> __FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__CActivitySensorReading_t;
#define __FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__CActivitySensorReading ABI::Windows::Foundation::__FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__CActivitySensorReading_t
/* Foundation */ } /* Windows */ } /* ABI */ }

#endif // !defined(RO_NO_TEMPLATE_NAME)
#endif /* DEF___FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__CActivitySensorReading_USE */

#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

namespace ABI {
    namespace Windows {
        namespace Devices {
            namespace Sensors {
                class Barometer;
            } /* Sensors */
        } /* Devices */
    } /* Windows */
} /* ABI */

#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

#ifndef DEF___FIAsyncOperation_1_Windows__CDevices__CSensors__CBarometer_USE
#define DEF___FIAsyncOperation_1_Windows__CDevices__CSensors__CBarometer_USE
#if !defined(RO_NO_TEMPLATE_NAME)
namespace ABI { namespace Windows { namespace Foundation {
template <>
struct __declspec(uuid("51876037-9f36-5c86-855d-3ddd251df9a8"))
IAsyncOperation<ABI::Windows::Devices::Sensors::Barometer*> : IAsyncOperation_impl<ABI::Windows::Foundation::Internal::AggregateType<ABI::Windows::Devices::Sensors::Barometer*, ABI::Windows::Devices::Sensors::IBarometer*>>
{
    static const wchar_t* z_get_rc_name_impl()
    {
        return L"Windows.Foundation.IAsyncOperation`1<Windows.Devices.Sensors.Barometer>";
    }
};
// Define a typedef for the parameterized interface specialization's mangled name.
// This allows code which uses the mangled name for the parameterized interface to access the
// correct parameterized interface specialization.
typedef IAsyncOperation<ABI::Windows::Devices::Sensors::Barometer*> __FIAsyncOperation_1_Windows__CDevices__CSensors__CBarometer_t;
#define __FIAsyncOperation_1_Windows__CDevices__CSensors__CBarometer ABI::Windows::Foundation::__FIAsyncOperation_1_Windows__CDevices__CSensors__CBarometer_t
/* Foundation */ } /* Windows */ } /* ABI */ }

#endif // !defined(RO_NO_TEMPLATE_NAME)
#endif /* DEF___FIAsyncOperation_1_Windows__CDevices__CSensors__CBarometer_USE */

#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

#ifndef DEF___FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__CBarometer_USE
#define DEF___FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__CBarometer_USE
#if !defined(RO_NO_TEMPLATE_NAME)
namespace ABI { namespace Windows { namespace Foundation {
template <>
struct __declspec(uuid("a15e21d6-5467-590c-afe1-9c8132dcd8a4"))
IAsyncOperationCompletedHandler<ABI::Windows::Devices::Sensors::Barometer*> : IAsyncOperationCompletedHandler_impl<ABI::Windows::Foundation::Internal::AggregateType<ABI::Windows::Devices::Sensors::Barometer*, ABI::Windows::Devices::Sensors::IBarometer*>>
{
    static const wchar_t* z_get_rc_name_impl()
    {
        return L"Windows.Foundation.AsyncOperationCompletedHandler`1<Windows.Devices.Sensors.Barometer>";
    }
};
// Define a typedef for the parameterized interface specialization's mangled name.
// This allows code which uses the mangled name for the parameterized interface to access the
// correct parameterized interface specialization.
typedef IAsyncOperationCompletedHandler<ABI::Windows::Devices::Sensors::Barometer*> __FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__CBarometer_t;
#define __FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__CBarometer ABI::Windows::Foundation::__FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__CBarometer_t
/* Foundation */ } /* Windows */ } /* ABI */ }

#endif // !defined(RO_NO_TEMPLATE_NAME)
#endif /* DEF___FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__CBarometer_USE */

#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

namespace ABI {
    namespace Windows {
        namespace Devices {
            namespace Sensors {
                class Compass;
            } /* Sensors */
        } /* Devices */
    } /* Windows */
} /* ABI */

#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

#ifndef DEF___FIAsyncOperation_1_Windows__CDevices__CSensors__CCompass_USE
#define DEF___FIAsyncOperation_1_Windows__CDevices__CSensors__CCompass_USE
#if !defined(RO_NO_TEMPLATE_NAME)
namespace ABI { namespace Windows { namespace Foundation {
template <>
struct __declspec(uuid("5297c24c-a6fb-5e03-a4f8-ee143c435df8"))
IAsyncOperation<ABI::Windows::Devices::Sensors::Compass*> : IAsyncOperation_impl<ABI::Windows::Foundation::Internal::AggregateType<ABI::Windows::Devices::Sensors::Compass*, ABI::Windows::Devices::Sensors::ICompass*>>
{
    static const wchar_t* z_get_rc_name_impl()
    {
        return L"Windows.Foundation.IAsyncOperation`1<Windows.Devices.Sensors.Compass>";
    }
};
// Define a typedef for the parameterized interface specialization's mangled name.
// This allows code which uses the mangled name for the parameterized interface to access the
// correct parameterized interface specialization.
typedef IAsyncOperation<ABI::Windows::Devices::Sensors::Compass*> __FIAsyncOperation_1_Windows__CDevices__CSensors__CCompass_t;
#define __FIAsyncOperation_1_Windows__CDevices__CSensors__CCompass ABI::Windows::Foundation::__FIAsyncOperation_1_Windows__CDevices__CSensors__CCompass_t
/* Foundation */ } /* Windows */ } /* ABI */ }

#endif // !defined(RO_NO_TEMPLATE_NAME)
#endif /* DEF___FIAsyncOperation_1_Windows__CDevices__CSensors__CCompass_USE */

#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

#ifndef DEF___FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__CCompass_USE
#define DEF___FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__CCompass_USE
#if !defined(RO_NO_TEMPLATE_NAME)
namespace ABI { namespace Windows { namespace Foundation {
template <>
struct __declspec(uuid("0cf1e460-bc2c-587c-9822-420ba04d0551"))
IAsyncOperationCompletedHandler<ABI::Windows::Devices::Sensors::Compass*> : IAsyncOperationCompletedHandler_impl<ABI::Windows::Foundation::Internal::AggregateType<ABI::Windows::Devices::Sensors::Compass*, ABI::Windows::Devices::Sensors::ICompass*>>
{
    static const wchar_t* z_get_rc_name_impl()
    {
        return L"Windows.Foundation.AsyncOperationCompletedHandler`1<Windows.Devices.Sensors.Compass>";
    }
};
// Define a typedef for the parameterized interface specialization's mangled name.
// This allows code which uses the mangled name for the parameterized interface to access the
// correct parameterized interface specialization.
typedef IAsyncOperationCompletedHandler<ABI::Windows::Devices::Sensors::Compass*> __FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__CCompass_t;
#define __FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__CCompass ABI::Windows::Foundation::__FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__CCompass_t
/* Foundation */ } /* Windows */ } /* ABI */ }

#endif // !defined(RO_NO_TEMPLATE_NAME)
#endif /* DEF___FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__CCompass_USE */

#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

namespace ABI {
    namespace Windows {
        namespace Devices {
            namespace Sensors {
                class Gyrometer;
            } /* Sensors */
        } /* Devices */
    } /* Windows */
} /* ABI */

#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

#ifndef DEF___FIAsyncOperation_1_Windows__CDevices__CSensors__CGyrometer_USE
#define DEF___FIAsyncOperation_1_Windows__CDevices__CSensors__CGyrometer_USE
#if !defined(RO_NO_TEMPLATE_NAME)
namespace ABI { namespace Windows { namespace Foundation {
template <>
struct __declspec(uuid("fcee7abf-1dcf-50cc-b91b-7a1f59e0c28b"))
IAsyncOperation<ABI::Windows::Devices::Sensors::Gyrometer*> : IAsyncOperation_impl<ABI::Windows::Foundation::Internal::AggregateType<ABI::Windows::Devices::Sensors::Gyrometer*, ABI::Windows::Devices::Sensors::IGyrometer*>>
{
    static const wchar_t* z_get_rc_name_impl()
    {
        return L"Windows.Foundation.IAsyncOperation`1<Windows.Devices.Sensors.Gyrometer>";
    }
};
// Define a typedef for the parameterized interface specialization's mangled name.
// This allows code which uses the mangled name for the parameterized interface to access the
// correct parameterized interface specialization.
typedef IAsyncOperation<ABI::Windows::Devices::Sensors::Gyrometer*> __FIAsyncOperation_1_Windows__CDevices__CSensors__CGyrometer_t;
#define __FIAsyncOperation_1_Windows__CDevices__CSensors__CGyrometer ABI::Windows::Foundation::__FIAsyncOperation_1_Windows__CDevices__CSensors__CGyrometer_t
/* Foundation */ } /* Windows */ } /* ABI */ }

#endif // !defined(RO_NO_TEMPLATE_NAME)
#endif /* DEF___FIAsyncOperation_1_Windows__CDevices__CSensors__CGyrometer_USE */

#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

#ifndef DEF___FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__CGyrometer_USE
#define DEF___FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__CGyrometer_USE
#if !defined(RO_NO_TEMPLATE_NAME)
namespace ABI { namespace Windows { namespace Foundation {
template <>
struct __declspec(uuid("15799501-958e-5315-a24a-0d7d7acbc79c"))
IAsyncOperationCompletedHandler<ABI::Windows::Devices::Sensors::Gyrometer*> : IAsyncOperationCompletedHandler_impl<ABI::Windows::Foundation::Internal::AggregateType<ABI::Windows::Devices::Sensors::Gyrometer*, ABI::Windows::Devices::Sensors::IGyrometer*>>
{
    static const wchar_t* z_get_rc_name_impl()
    {
        return L"Windows.Foundation.AsyncOperationCompletedHandler`1<Windows.Devices.Sensors.Gyrometer>";
    }
};
// Define a typedef for the parameterized interface specialization's mangled name.
// This allows code which uses the mangled name for the parameterized interface to access the
// correct parameterized interface specialization.
typedef IAsyncOperationCompletedHandler<ABI::Windows::Devices::Sensors::Gyrometer*> __FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__CGyrometer_t;
#define __FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__CGyrometer ABI::Windows::Foundation::__FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__CGyrometer_t
/* Foundation */ } /* Windows */ } /* ABI */ }

#endif // !defined(RO_NO_TEMPLATE_NAME)
#endif /* DEF___FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__CGyrometer_USE */

#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

namespace ABI {
    namespace Windows {
        namespace Devices {
            namespace Sensors {
                class HingeAngleReading;
            } /* Sensors */
        } /* Devices */
    } /* Windows */
} /* ABI */

#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x70000

#ifndef DEF___FIAsyncOperation_1_Windows__CDevices__CSensors__CHingeAngleReading_USE
#define DEF___FIAsyncOperation_1_Windows__CDevices__CSensors__CHingeAngleReading_USE
#if !defined(RO_NO_TEMPLATE_NAME)
namespace ABI { namespace Windows { namespace Foundation {
template <>
struct __declspec(uuid("70c4c5a0-bcca-5227-96f0-17fa53539be8"))
IAsyncOperation<ABI::Windows::Devices::Sensors::HingeAngleReading*> : IAsyncOperation_impl<ABI::Windows::Foundation::Internal::AggregateType<ABI::Windows::Devices::Sensors::HingeAngleReading*, ABI::Windows::Devices::Sensors::IHingeAngleReading*>>
{
    static const wchar_t* z_get_rc_name_impl()
    {
        return L"Windows.Foundation.IAsyncOperation`1<Windows.Devices.Sensors.HingeAngleReading>";
    }
};
// Define a typedef for the parameterized interface specialization's mangled name.
// This allows code which uses the mangled name for the parameterized interface to access the
// correct parameterized interface specialization.
typedef IAsyncOperation<ABI::Windows::Devices::Sensors::HingeAngleReading*> __FIAsyncOperation_1_Windows__CDevices__CSensors__CHingeAngleReading_t;
#define __FIAsyncOperation_1_Windows__CDevices__CSensors__CHingeAngleReading ABI::Windows::Foundation::__FIAsyncOperation_1_Windows__CDevices__CSensors__CHingeAngleReading_t
/* Foundation */ } /* Windows */ } /* ABI */ }

#endif // !defined(RO_NO_TEMPLATE_NAME)
#endif /* DEF___FIAsyncOperation_1_Windows__CDevices__CSensors__CHingeAngleReading_USE */

#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x70000

#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x70000

#ifndef DEF___FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__CHingeAngleReading_USE
#define DEF___FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__CHingeAngleReading_USE
#if !defined(RO_NO_TEMPLATE_NAME)
namespace ABI { namespace Windows { namespace Foundation {
template <>
struct __declspec(uuid("e0b8b19e-9472-5ffd-9bde-eee64def7c4f"))
IAsyncOperationCompletedHandler<ABI::Windows::Devices::Sensors::HingeAngleReading*> : IAsyncOperationCompletedHandler_impl<ABI::Windows::Foundation::Internal::AggregateType<ABI::Windows::Devices::Sensors::HingeAngleReading*, ABI::Windows::Devices::Sensors::IHingeAngleReading*>>
{
    static const wchar_t* z_get_rc_name_impl()
    {
        return L"Windows.Foundation.AsyncOperationCompletedHandler`1<Windows.Devices.Sensors.HingeAngleReading>";
    }
};
// Define a typedef for the parameterized interface specialization's mangled name.
// This allows code which uses the mangled name for the parameterized interface to access the
// correct parameterized interface specialization.
typedef IAsyncOperationCompletedHandler<ABI::Windows::Devices::Sensors::HingeAngleReading*> __FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__CHingeAngleReading_t;
#define __FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__CHingeAngleReading ABI::Windows::Foundation::__FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__CHingeAngleReading_t
/* Foundation */ } /* Windows */ } /* ABI */ }

#endif // !defined(RO_NO_TEMPLATE_NAME)
#endif /* DEF___FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__CHingeAngleReading_USE */

#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x70000

namespace ABI {
    namespace Windows {
        namespace Devices {
            namespace Sensors {
                class HingeAngleSensor;
            } /* Sensors */
        } /* Devices */
    } /* Windows */
} /* ABI */

#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x70000

#ifndef DEF___FIAsyncOperation_1_Windows__CDevices__CSensors__CHingeAngleSensor_USE
#define DEF___FIAsyncOperation_1_Windows__CDevices__CSensors__CHingeAngleSensor_USE
#if !defined(RO_NO_TEMPLATE_NAME)
namespace ABI { namespace Windows { namespace Foundation {
template <>
struct __declspec(uuid("4f998177-4080-56d8-a96f-9d5b55944e55"))
IAsyncOperation<ABI::Windows::Devices::Sensors::HingeAngleSensor*> : IAsyncOperation_impl<ABI::Windows::Foundation::Internal::AggregateType<ABI::Windows::Devices::Sensors::HingeAngleSensor*, ABI::Windows::Devices::Sensors::IHingeAngleSensor*>>
{
    static const wchar_t* z_get_rc_name_impl()
    {
        return L"Windows.Foundation.IAsyncOperation`1<Windows.Devices.Sensors.HingeAngleSensor>";
    }
};
// Define a typedef for the parameterized interface specialization's mangled name.
// This allows code which uses the mangled name for the parameterized interface to access the
// correct parameterized interface specialization.
typedef IAsyncOperation<ABI::Windows::Devices::Sensors::HingeAngleSensor*> __FIAsyncOperation_1_Windows__CDevices__CSensors__CHingeAngleSensor_t;
#define __FIAsyncOperation_1_Windows__CDevices__CSensors__CHingeAngleSensor ABI::Windows::Foundation::__FIAsyncOperation_1_Windows__CDevices__CSensors__CHingeAngleSensor_t
/* Foundation */ } /* Windows */ } /* ABI */ }

#endif // !defined(RO_NO_TEMPLATE_NAME)
#endif /* DEF___FIAsyncOperation_1_Windows__CDevices__CSensors__CHingeAngleSensor_USE */

#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x70000

#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x70000

#ifndef DEF___FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__CHingeAngleSensor_USE
#define DEF___FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__CHingeAngleSensor_USE
#if !defined(RO_NO_TEMPLATE_NAME)
namespace ABI { namespace Windows { namespace Foundation {
template <>
struct __declspec(uuid("ac3218c1-3ab8-5c26-936c-00be405ac68b"))
IAsyncOperationCompletedHandler<ABI::Windows::Devices::Sensors::HingeAngleSensor*> : IAsyncOperationCompletedHandler_impl<ABI::Windows::Foundation::Internal::AggregateType<ABI::Windows::Devices::Sensors::HingeAngleSensor*, ABI::Windows::Devices::Sensors::IHingeAngleSensor*>>
{
    static const wchar_t* z_get_rc_name_impl()
    {
        return L"Windows.Foundation.AsyncOperationCompletedHandler`1<Windows.Devices.Sensors.HingeAngleSensor>";
    }
};
// Define a typedef for the parameterized interface specialization's mangled name.
// This allows code which uses the mangled name for the parameterized interface to access the
// correct parameterized interface specialization.
typedef IAsyncOperationCompletedHandler<ABI::Windows::Devices::Sensors::HingeAngleSensor*> __FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__CHingeAngleSensor_t;
#define __FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__CHingeAngleSensor ABI::Windows::Foundation::__FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__CHingeAngleSensor_t
/* Foundation */ } /* Windows */ } /* ABI */ }

#endif // !defined(RO_NO_TEMPLATE_NAME)
#endif /* DEF___FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__CHingeAngleSensor_USE */

#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x70000

namespace ABI {
    namespace Windows {
        namespace Devices {
            namespace Sensors {
                class Inclinometer;
            } /* Sensors */
        } /* Devices */
    } /* Windows */
} /* ABI */

#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

#ifndef DEF___FIAsyncOperation_1_Windows__CDevices__CSensors__CInclinometer_USE
#define DEF___FIAsyncOperation_1_Windows__CDevices__CSensors__CInclinometer_USE
#if !defined(RO_NO_TEMPLATE_NAME)
namespace ABI { namespace Windows { namespace Foundation {
template <>
struct __declspec(uuid("84ebb496-b69a-53cd-b690-a46189822b01"))
IAsyncOperation<ABI::Windows::Devices::Sensors::Inclinometer*> : IAsyncOperation_impl<ABI::Windows::Foundation::Internal::AggregateType<ABI::Windows::Devices::Sensors::Inclinometer*, ABI::Windows::Devices::Sensors::IInclinometer*>>
{
    static const wchar_t* z_get_rc_name_impl()
    {
        return L"Windows.Foundation.IAsyncOperation`1<Windows.Devices.Sensors.Inclinometer>";
    }
};
// Define a typedef for the parameterized interface specialization's mangled name.
// This allows code which uses the mangled name for the parameterized interface to access the
// correct parameterized interface specialization.
typedef IAsyncOperation<ABI::Windows::Devices::Sensors::Inclinometer*> __FIAsyncOperation_1_Windows__CDevices__CSensors__CInclinometer_t;
#define __FIAsyncOperation_1_Windows__CDevices__CSensors__CInclinometer ABI::Windows::Foundation::__FIAsyncOperation_1_Windows__CDevices__CSensors__CInclinometer_t
/* Foundation */ } /* Windows */ } /* ABI */ }

#endif // !defined(RO_NO_TEMPLATE_NAME)
#endif /* DEF___FIAsyncOperation_1_Windows__CDevices__CSensors__CInclinometer_USE */

#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

#ifndef DEF___FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__CInclinometer_USE
#define DEF___FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__CInclinometer_USE
#if !defined(RO_NO_TEMPLATE_NAME)
namespace ABI { namespace Windows { namespace Foundation {
template <>
struct __declspec(uuid("8f0ede2a-2d0f-55f6-9566-3c21385fae64"))
IAsyncOperationCompletedHandler<ABI::Windows::Devices::Sensors::Inclinometer*> : IAsyncOperationCompletedHandler_impl<ABI::Windows::Foundation::Internal::AggregateType<ABI::Windows::Devices::Sensors::Inclinometer*, ABI::Windows::Devices::Sensors::IInclinometer*>>
{
    static const wchar_t* z_get_rc_name_impl()
    {
        return L"Windows.Foundation.AsyncOperationCompletedHandler`1<Windows.Devices.Sensors.Inclinometer>";
    }
};
// Define a typedef for the parameterized interface specialization's mangled name.
// This allows code which uses the mangled name for the parameterized interface to access the
// correct parameterized interface specialization.
typedef IAsyncOperationCompletedHandler<ABI::Windows::Devices::Sensors::Inclinometer*> __FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__CInclinometer_t;
#define __FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__CInclinometer ABI::Windows::Foundation::__FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__CInclinometer_t
/* Foundation */ } /* Windows */ } /* ABI */ }

#endif // !defined(RO_NO_TEMPLATE_NAME)
#endif /* DEF___FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__CInclinometer_USE */

#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

namespace ABI {
    namespace Windows {
        namespace Devices {
            namespace Sensors {
                class LightSensor;
            } /* Sensors */
        } /* Devices */
    } /* Windows */
} /* ABI */

#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

#ifndef DEF___FIAsyncOperation_1_Windows__CDevices__CSensors__CLightSensor_USE
#define DEF___FIAsyncOperation_1_Windows__CDevices__CSensors__CLightSensor_USE
#if !defined(RO_NO_TEMPLATE_NAME)
namespace ABI { namespace Windows { namespace Foundation {
template <>
struct __declspec(uuid("380e592c-47a0-5df4-8de2-b2eefa9db8ad"))
IAsyncOperation<ABI::Windows::Devices::Sensors::LightSensor*> : IAsyncOperation_impl<ABI::Windows::Foundation::Internal::AggregateType<ABI::Windows::Devices::Sensors::LightSensor*, ABI::Windows::Devices::Sensors::ILightSensor*>>
{
    static const wchar_t* z_get_rc_name_impl()
    {
        return L"Windows.Foundation.IAsyncOperation`1<Windows.Devices.Sensors.LightSensor>";
    }
};
// Define a typedef for the parameterized interface specialization's mangled name.
// This allows code which uses the mangled name for the parameterized interface to access the
// correct parameterized interface specialization.
typedef IAsyncOperation<ABI::Windows::Devices::Sensors::LightSensor*> __FIAsyncOperation_1_Windows__CDevices__CSensors__CLightSensor_t;
#define __FIAsyncOperation_1_Windows__CDevices__CSensors__CLightSensor ABI::Windows::Foundation::__FIAsyncOperation_1_Windows__CDevices__CSensors__CLightSensor_t
/* Foundation */ } /* Windows */ } /* ABI */ }

#endif // !defined(RO_NO_TEMPLATE_NAME)
#endif /* DEF___FIAsyncOperation_1_Windows__CDevices__CSensors__CLightSensor_USE */

#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

#ifndef DEF___FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__CLightSensor_USE
#define DEF___FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__CLightSensor_USE
#if !defined(RO_NO_TEMPLATE_NAME)
namespace ABI { namespace Windows { namespace Foundation {
template <>
struct __declspec(uuid("5d04e2bf-5163-5238-8f23-ce470b30340d"))
IAsyncOperationCompletedHandler<ABI::Windows::Devices::Sensors::LightSensor*> : IAsyncOperationCompletedHandler_impl<ABI::Windows::Foundation::Internal::AggregateType<ABI::Windows::Devices::Sensors::LightSensor*, ABI::Windows::Devices::Sensors::ILightSensor*>>
{
    static const wchar_t* z_get_rc_name_impl()
    {
        return L"Windows.Foundation.AsyncOperationCompletedHandler`1<Windows.Devices.Sensors.LightSensor>";
    }
};
// Define a typedef for the parameterized interface specialization's mangled name.
// This allows code which uses the mangled name for the parameterized interface to access the
// correct parameterized interface specialization.
typedef IAsyncOperationCompletedHandler<ABI::Windows::Devices::Sensors::LightSensor*> __FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__CLightSensor_t;
#define __FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__CLightSensor ABI::Windows::Foundation::__FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__CLightSensor_t
/* Foundation */ } /* Windows */ } /* ABI */ }

#endif // !defined(RO_NO_TEMPLATE_NAME)
#endif /* DEF___FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__CLightSensor_USE */

#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

namespace ABI {
    namespace Windows {
        namespace Devices {
            namespace Sensors {
                class Magnetometer;
            } /* Sensors */
        } /* Devices */
    } /* Windows */
} /* ABI */

#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

#ifndef DEF___FIAsyncOperation_1_Windows__CDevices__CSensors__CMagnetometer_USE
#define DEF___FIAsyncOperation_1_Windows__CDevices__CSensors__CMagnetometer_USE
#if !defined(RO_NO_TEMPLATE_NAME)
namespace ABI { namespace Windows { namespace Foundation {
template <>
struct __declspec(uuid("b0455443-e790-5aa3-8767-4932032274ee"))
IAsyncOperation<ABI::Windows::Devices::Sensors::Magnetometer*> : IAsyncOperation_impl<ABI::Windows::Foundation::Internal::AggregateType<ABI::Windows::Devices::Sensors::Magnetometer*, ABI::Windows::Devices::Sensors::IMagnetometer*>>
{
    static const wchar_t* z_get_rc_name_impl()
    {
        return L"Windows.Foundation.IAsyncOperation`1<Windows.Devices.Sensors.Magnetometer>";
    }
};
// Define a typedef for the parameterized interface specialization's mangled name.
// This allows code which uses the mangled name for the parameterized interface to access the
// correct parameterized interface specialization.
typedef IAsyncOperation<ABI::Windows::Devices::Sensors::Magnetometer*> __FIAsyncOperation_1_Windows__CDevices__CSensors__CMagnetometer_t;
#define __FIAsyncOperation_1_Windows__CDevices__CSensors__CMagnetometer ABI::Windows::Foundation::__FIAsyncOperation_1_Windows__CDevices__CSensors__CMagnetometer_t
/* Foundation */ } /* Windows */ } /* ABI */ }

#endif // !defined(RO_NO_TEMPLATE_NAME)
#endif /* DEF___FIAsyncOperation_1_Windows__CDevices__CSensors__CMagnetometer_USE */

#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

#ifndef DEF___FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__CMagnetometer_USE
#define DEF___FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__CMagnetometer_USE
#if !defined(RO_NO_TEMPLATE_NAME)
namespace ABI { namespace Windows { namespace Foundation {
template <>
struct __declspec(uuid("46e0a768-9645-51a6-b6a7-1e5f4b40e1f3"))
IAsyncOperationCompletedHandler<ABI::Windows::Devices::Sensors::Magnetometer*> : IAsyncOperationCompletedHandler_impl<ABI::Windows::Foundation::Internal::AggregateType<ABI::Windows::Devices::Sensors::Magnetometer*, ABI::Windows::Devices::Sensors::IMagnetometer*>>
{
    static const wchar_t* z_get_rc_name_impl()
    {
        return L"Windows.Foundation.AsyncOperationCompletedHandler`1<Windows.Devices.Sensors.Magnetometer>";
    }
};
// Define a typedef for the parameterized interface specialization's mangled name.
// This allows code which uses the mangled name for the parameterized interface to access the
// correct parameterized interface specialization.
typedef IAsyncOperationCompletedHandler<ABI::Windows::Devices::Sensors::Magnetometer*> __FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__CMagnetometer_t;
#define __FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__CMagnetometer ABI::Windows::Foundation::__FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__CMagnetometer_t
/* Foundation */ } /* Windows */ } /* ABI */ }

#endif // !defined(RO_NO_TEMPLATE_NAME)
#endif /* DEF___FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__CMagnetometer_USE */

#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

namespace ABI {
    namespace Windows {
        namespace Devices {
            namespace Sensors {
                class OrientationSensor;
            } /* Sensors */
        } /* Devices */
    } /* Windows */
} /* ABI */

#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

#ifndef DEF___FIAsyncOperation_1_Windows__CDevices__CSensors__COrientationSensor_USE
#define DEF___FIAsyncOperation_1_Windows__CDevices__CSensors__COrientationSensor_USE
#if !defined(RO_NO_TEMPLATE_NAME)
namespace ABI { namespace Windows { namespace Foundation {
template <>
struct __declspec(uuid("8ef36aa8-6f6d-538b-a42b-37af7369049e"))
IAsyncOperation<ABI::Windows::Devices::Sensors::OrientationSensor*> : IAsyncOperation_impl<ABI::Windows::Foundation::Internal::AggregateType<ABI::Windows::Devices::Sensors::OrientationSensor*, ABI::Windows::Devices::Sensors::IOrientationSensor*>>
{
    static const wchar_t* z_get_rc_name_impl()
    {
        return L"Windows.Foundation.IAsyncOperation`1<Windows.Devices.Sensors.OrientationSensor>";
    }
};
// Define a typedef for the parameterized interface specialization's mangled name.
// This allows code which uses the mangled name for the parameterized interface to access the
// correct parameterized interface specialization.
typedef IAsyncOperation<ABI::Windows::Devices::Sensors::OrientationSensor*> __FIAsyncOperation_1_Windows__CDevices__CSensors__COrientationSensor_t;
#define __FIAsyncOperation_1_Windows__CDevices__CSensors__COrientationSensor ABI::Windows::Foundation::__FIAsyncOperation_1_Windows__CDevices__CSensors__COrientationSensor_t
/* Foundation */ } /* Windows */ } /* ABI */ }

#endif // !defined(RO_NO_TEMPLATE_NAME)
#endif /* DEF___FIAsyncOperation_1_Windows__CDevices__CSensors__COrientationSensor_USE */

#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

#ifndef DEF___FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__COrientationSensor_USE
#define DEF___FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__COrientationSensor_USE
#if !defined(RO_NO_TEMPLATE_NAME)
namespace ABI { namespace Windows { namespace Foundation {
template <>
struct __declspec(uuid("8330b323-6695-53d4-acd7-b60c24c1b879"))
IAsyncOperationCompletedHandler<ABI::Windows::Devices::Sensors::OrientationSensor*> : IAsyncOperationCompletedHandler_impl<ABI::Windows::Foundation::Internal::AggregateType<ABI::Windows::Devices::Sensors::OrientationSensor*, ABI::Windows::Devices::Sensors::IOrientationSensor*>>
{
    static const wchar_t* z_get_rc_name_impl()
    {
        return L"Windows.Foundation.AsyncOperationCompletedHandler`1<Windows.Devices.Sensors.OrientationSensor>";
    }
};
// Define a typedef for the parameterized interface specialization's mangled name.
// This allows code which uses the mangled name for the parameterized interface to access the
// correct parameterized interface specialization.
typedef IAsyncOperationCompletedHandler<ABI::Windows::Devices::Sensors::OrientationSensor*> __FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__COrientationSensor_t;
#define __FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__COrientationSensor ABI::Windows::Foundation::__FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__COrientationSensor_t
/* Foundation */ } /* Windows */ } /* ABI */ }

#endif // !defined(RO_NO_TEMPLATE_NAME)
#endif /* DEF___FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__COrientationSensor_USE */

#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

namespace ABI {
    namespace Windows {
        namespace Devices {
            namespace Sensors {
                class Pedometer;
            } /* Sensors */
        } /* Devices */
    } /* Windows */
} /* ABI */

#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

#ifndef DEF___FIAsyncOperation_1_Windows__CDevices__CSensors__CPedometer_USE
#define DEF___FIAsyncOperation_1_Windows__CDevices__CSensors__CPedometer_USE
#if !defined(RO_NO_TEMPLATE_NAME)
namespace ABI { namespace Windows { namespace Foundation {
template <>
struct __declspec(uuid("9414388f-1b3e-55f5-819b-ab3833646055"))
IAsyncOperation<ABI::Windows::Devices::Sensors::Pedometer*> : IAsyncOperation_impl<ABI::Windows::Foundation::Internal::AggregateType<ABI::Windows::Devices::Sensors::Pedometer*, ABI::Windows::Devices::Sensors::IPedometer*>>
{
    static const wchar_t* z_get_rc_name_impl()
    {
        return L"Windows.Foundation.IAsyncOperation`1<Windows.Devices.Sensors.Pedometer>";
    }
};
// Define a typedef for the parameterized interface specialization's mangled name.
// This allows code which uses the mangled name for the parameterized interface to access the
// correct parameterized interface specialization.
typedef IAsyncOperation<ABI::Windows::Devices::Sensors::Pedometer*> __FIAsyncOperation_1_Windows__CDevices__CSensors__CPedometer_t;
#define __FIAsyncOperation_1_Windows__CDevices__CSensors__CPedometer ABI::Windows::Foundation::__FIAsyncOperation_1_Windows__CDevices__CSensors__CPedometer_t
/* Foundation */ } /* Windows */ } /* ABI */ }

#endif // !defined(RO_NO_TEMPLATE_NAME)
#endif /* DEF___FIAsyncOperation_1_Windows__CDevices__CSensors__CPedometer_USE */

#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

#ifndef DEF___FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__CPedometer_USE
#define DEF___FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__CPedometer_USE
#if !defined(RO_NO_TEMPLATE_NAME)
namespace ABI { namespace Windows { namespace Foundation {
template <>
struct __declspec(uuid("a62dbe4e-51de-5a13-ba21-e76df3bc1396"))
IAsyncOperationCompletedHandler<ABI::Windows::Devices::Sensors::Pedometer*> : IAsyncOperationCompletedHandler_impl<ABI::Windows::Foundation::Internal::AggregateType<ABI::Windows::Devices::Sensors::Pedometer*, ABI::Windows::Devices::Sensors::IPedometer*>>
{
    static const wchar_t* z_get_rc_name_impl()
    {
        return L"Windows.Foundation.AsyncOperationCompletedHandler`1<Windows.Devices.Sensors.Pedometer>";
    }
};
// Define a typedef for the parameterized interface specialization's mangled name.
// This allows code which uses the mangled name for the parameterized interface to access the
// correct parameterized interface specialization.
typedef IAsyncOperationCompletedHandler<ABI::Windows::Devices::Sensors::Pedometer*> __FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__CPedometer_t;
#define __FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__CPedometer ABI::Windows::Foundation::__FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__CPedometer_t
/* Foundation */ } /* Windows */ } /* ABI */ }

#endif // !defined(RO_NO_TEMPLATE_NAME)
#endif /* DEF___FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__CPedometer_USE */

#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

namespace ABI {
    namespace Windows {
        namespace Devices {
            namespace Sensors {
                class SimpleOrientationSensor;
            } /* Sensors */
        } /* Devices */
    } /* Windows */
} /* ABI */

#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

#ifndef DEF___FIAsyncOperation_1_Windows__CDevices__CSensors__CSimpleOrientationSensor_USE
#define DEF___FIAsyncOperation_1_Windows__CDevices__CSensors__CSimpleOrientationSensor_USE
#if !defined(RO_NO_TEMPLATE_NAME)
namespace ABI { namespace Windows { namespace Foundation {
template <>
struct __declspec(uuid("6b77c9f9-dcf7-5647-adc7-f70cf9927044"))
IAsyncOperation<ABI::Windows::Devices::Sensors::SimpleOrientationSensor*> : IAsyncOperation_impl<ABI::Windows::Foundation::Internal::AggregateType<ABI::Windows::Devices::Sensors::SimpleOrientationSensor*, ABI::Windows::Devices::Sensors::ISimpleOrientationSensor*>>
{
    static const wchar_t* z_get_rc_name_impl()
    {
        return L"Windows.Foundation.IAsyncOperation`1<Windows.Devices.Sensors.SimpleOrientationSensor>";
    }
};
// Define a typedef for the parameterized interface specialization's mangled name.
// This allows code which uses the mangled name for the parameterized interface to access the
// correct parameterized interface specialization.
typedef IAsyncOperation<ABI::Windows::Devices::Sensors::SimpleOrientationSensor*> __FIAsyncOperation_1_Windows__CDevices__CSensors__CSimpleOrientationSensor_t;
#define __FIAsyncOperation_1_Windows__CDevices__CSensors__CSimpleOrientationSensor ABI::Windows::Foundation::__FIAsyncOperation_1_Windows__CDevices__CSensors__CSimpleOrientationSensor_t
/* Foundation */ } /* Windows */ } /* ABI */ }

#endif // !defined(RO_NO_TEMPLATE_NAME)
#endif /* DEF___FIAsyncOperation_1_Windows__CDevices__CSensors__CSimpleOrientationSensor_USE */

#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

#ifndef DEF___FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__CSimpleOrientationSensor_USE
#define DEF___FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__CSimpleOrientationSensor_USE
#if !defined(RO_NO_TEMPLATE_NAME)
namespace ABI { namespace Windows { namespace Foundation {
template <>
struct __declspec(uuid("69be8a44-2ccb-5375-a8f8-f894efba33eb"))
IAsyncOperationCompletedHandler<ABI::Windows::Devices::Sensors::SimpleOrientationSensor*> : IAsyncOperationCompletedHandler_impl<ABI::Windows::Foundation::Internal::AggregateType<ABI::Windows::Devices::Sensors::SimpleOrientationSensor*, ABI::Windows::Devices::Sensors::ISimpleOrientationSensor*>>
{
    static const wchar_t* z_get_rc_name_impl()
    {
        return L"Windows.Foundation.AsyncOperationCompletedHandler`1<Windows.Devices.Sensors.SimpleOrientationSensor>";
    }
};
// Define a typedef for the parameterized interface specialization's mangled name.
// This allows code which uses the mangled name for the parameterized interface to access the
// correct parameterized interface specialization.
typedef IAsyncOperationCompletedHandler<ABI::Windows::Devices::Sensors::SimpleOrientationSensor*> __FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__CSimpleOrientationSensor_t;
#define __FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__CSimpleOrientationSensor ABI::Windows::Foundation::__FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__CSimpleOrientationSensor_t
/* Foundation */ } /* Windows */ } /* ABI */ }

#endif // !defined(RO_NO_TEMPLATE_NAME)
#endif /* DEF___FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__CSimpleOrientationSensor_USE */

#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

#ifndef DEF___FIIterator_1_Windows__CDevices__CSensors__CActivitySensorReading_USE
#define DEF___FIIterator_1_Windows__CDevices__CSensors__CActivitySensorReading_USE
#if !defined(RO_NO_TEMPLATE_NAME)
namespace ABI { namespace Windows { namespace Foundation { namespace Collections {
template <>
struct __declspec(uuid("d2dab535-0c94-547e-afe3-5527bcbeb9cc"))
IIterator<ABI::Windows::Devices::Sensors::ActivitySensorReading*> : IIterator_impl<ABI::Windows::Foundation::Internal::AggregateType<ABI::Windows::Devices::Sensors::ActivitySensorReading*, ABI::Windows::Devices::Sensors::IActivitySensorReading*>>
{
    static const wchar_t* z_get_rc_name_impl()
    {
        return L"Windows.Foundation.Collections.IIterator`1<Windows.Devices.Sensors.ActivitySensorReading>";
    }
};
// Define a typedef for the parameterized interface specialization's mangled name.
// This allows code which uses the mangled name for the parameterized interface to access the
// correct parameterized interface specialization.
typedef IIterator<ABI::Windows::Devices::Sensors::ActivitySensorReading*> __FIIterator_1_Windows__CDevices__CSensors__CActivitySensorReading_t;
#define __FIIterator_1_Windows__CDevices__CSensors__CActivitySensorReading ABI::Windows::Foundation::Collections::__FIIterator_1_Windows__CDevices__CSensors__CActivitySensorReading_t
/* Collections */ } /* Foundation */ } /* Windows */ } /* ABI */ }

#endif // !defined(RO_NO_TEMPLATE_NAME)
#endif /* DEF___FIIterator_1_Windows__CDevices__CSensors__CActivitySensorReading_USE */

#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

#ifndef DEF___FIIterable_1_Windows__CDevices__CSensors__CActivitySensorReading_USE
#define DEF___FIIterable_1_Windows__CDevices__CSensors__CActivitySensorReading_USE
#if !defined(RO_NO_TEMPLATE_NAME)
namespace ABI { namespace Windows { namespace Foundation { namespace Collections {
template <>
struct __declspec(uuid("9a34ce03-8c6d-5994-907f-d5c2d19148cb"))
IIterable<ABI::Windows::Devices::Sensors::ActivitySensorReading*> : IIterable_impl<ABI::Windows::Foundation::Internal::AggregateType<ABI::Windows::Devices::Sensors::ActivitySensorReading*, ABI::Windows::Devices::Sensors::IActivitySensorReading*>>
{
    static const wchar_t* z_get_rc_name_impl()
    {
        return L"Windows.Foundation.Collections.IIterable`1<Windows.Devices.Sensors.ActivitySensorReading>";
    }
};
// Define a typedef for the parameterized interface specialization's mangled name.
// This allows code which uses the mangled name for the parameterized interface to access the
// correct parameterized interface specialization.
typedef IIterable<ABI::Windows::Devices::Sensors::ActivitySensorReading*> __FIIterable_1_Windows__CDevices__CSensors__CActivitySensorReading_t;
#define __FIIterable_1_Windows__CDevices__CSensors__CActivitySensorReading ABI::Windows::Foundation::Collections::__FIIterable_1_Windows__CDevices__CSensors__CActivitySensorReading_t
/* Collections */ } /* Foundation */ } /* Windows */ } /* ABI */ }

#endif // !defined(RO_NO_TEMPLATE_NAME)
#endif /* DEF___FIIterable_1_Windows__CDevices__CSensors__CActivitySensorReading_USE */

#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

#ifndef DEF___FIVectorView_1_Windows__CDevices__CSensors__CActivitySensorReading_USE
#define DEF___FIVectorView_1_Windows__CDevices__CSensors__CActivitySensorReading_USE
#if !defined(RO_NO_TEMPLATE_NAME)
namespace ABI { namespace Windows { namespace Foundation { namespace Collections {
template <>
struct __declspec(uuid("726234a9-7137-55c4-a444-352dcdc30d77"))
IVectorView<ABI::Windows::Devices::Sensors::ActivitySensorReading*> : IVectorView_impl<ABI::Windows::Foundation::Internal::AggregateType<ABI::Windows::Devices::Sensors::ActivitySensorReading*, ABI::Windows::Devices::Sensors::IActivitySensorReading*>>
{
    static const wchar_t* z_get_rc_name_impl()
    {
        return L"Windows.Foundation.Collections.IVectorView`1<Windows.Devices.Sensors.ActivitySensorReading>";
    }
};
// Define a typedef for the parameterized interface specialization's mangled name.
// This allows code which uses the mangled name for the parameterized interface to access the
// correct parameterized interface specialization.
typedef IVectorView<ABI::Windows::Devices::Sensors::ActivitySensorReading*> __FIVectorView_1_Windows__CDevices__CSensors__CActivitySensorReading_t;
#define __FIVectorView_1_Windows__CDevices__CSensors__CActivitySensorReading ABI::Windows::Foundation::Collections::__FIVectorView_1_Windows__CDevices__CSensors__CActivitySensorReading_t
/* Collections */ } /* Foundation */ } /* Windows */ } /* ABI */ }

#endif // !defined(RO_NO_TEMPLATE_NAME)
#endif /* DEF___FIVectorView_1_Windows__CDevices__CSensors__CActivitySensorReading_USE */

#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

#ifndef DEF___FIAsyncOperation_1___FIVectorView_1_Windows__CDevices__CSensors__CActivitySensorReading_USE
#define DEF___FIAsyncOperation_1___FIVectorView_1_Windows__CDevices__CSensors__CActivitySensorReading_USE
#if !defined(RO_NO_TEMPLATE_NAME)
namespace ABI { namespace Windows { namespace Foundation {
template <>
struct __declspec(uuid("cd781b82-7900-51a3-80ce-903e2e0a4f0e"))
IAsyncOperation<__FIVectorView_1_Windows__CDevices__CSensors__CActivitySensorReading*> : IAsyncOperation_impl<__FIVectorView_1_Windows__CDevices__CSensors__CActivitySensorReading*>
{
    static const wchar_t* z_get_rc_name_impl()
    {
        return L"Windows.Foundation.IAsyncOperation`1<Windows.Foundation.Collections.IVectorView`1<Windows.Devices.Sensors.ActivitySensorReading>>";
    }
};
// Define a typedef for the parameterized interface specialization's mangled name.
// This allows code which uses the mangled name for the parameterized interface to access the
// correct parameterized interface specialization.
typedef IAsyncOperation<__FIVectorView_1_Windows__CDevices__CSensors__CActivitySensorReading*> __FIAsyncOperation_1___FIVectorView_1_Windows__CDevices__CSensors__CActivitySensorReading_t;
#define __FIAsyncOperation_1___FIVectorView_1_Windows__CDevices__CSensors__CActivitySensorReading ABI::Windows::Foundation::__FIAsyncOperation_1___FIVectorView_1_Windows__CDevices__CSensors__CActivitySensorReading_t
/* Foundation */ } /* Windows */ } /* ABI */ }

#endif // !defined(RO_NO_TEMPLATE_NAME)
#endif /* DEF___FIAsyncOperation_1___FIVectorView_1_Windows__CDevices__CSensors__CActivitySensorReading_USE */

#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

#ifndef DEF___FIAsyncOperationCompletedHandler_1___FIVectorView_1_Windows__CDevices__CSensors__CActivitySensorReading_USE
#define DEF___FIAsyncOperationCompletedHandler_1___FIVectorView_1_Windows__CDevices__CSensors__CActivitySensorReading_USE
#if !defined(RO_NO_TEMPLATE_NAME)
namespace ABI { namespace Windows { namespace Foundation {
template <>
struct __declspec(uuid("179fb953-2d58-5991-8f5b-ac64219a1101"))
IAsyncOperationCompletedHandler<__FIVectorView_1_Windows__CDevices__CSensors__CActivitySensorReading*> : IAsyncOperationCompletedHandler_impl<__FIVectorView_1_Windows__CDevices__CSensors__CActivitySensorReading*>
{
    static const wchar_t* z_get_rc_name_impl()
    {
        return L"Windows.Foundation.AsyncOperationCompletedHandler`1<Windows.Foundation.Collections.IVectorView`1<Windows.Devices.Sensors.ActivitySensorReading>>";
    }
};
// Define a typedef for the parameterized interface specialization's mangled name.
// This allows code which uses the mangled name for the parameterized interface to access the
// correct parameterized interface specialization.
typedef IAsyncOperationCompletedHandler<__FIVectorView_1_Windows__CDevices__CSensors__CActivitySensorReading*> __FIAsyncOperationCompletedHandler_1___FIVectorView_1_Windows__CDevices__CSensors__CActivitySensorReading_t;
#define __FIAsyncOperationCompletedHandler_1___FIVectorView_1_Windows__CDevices__CSensors__CActivitySensorReading ABI::Windows::Foundation::__FIAsyncOperationCompletedHandler_1___FIVectorView_1_Windows__CDevices__CSensors__CActivitySensorReading_t
/* Foundation */ } /* Windows */ } /* ABI */ }

#endif // !defined(RO_NO_TEMPLATE_NAME)
#endif /* DEF___FIAsyncOperationCompletedHandler_1___FIVectorView_1_Windows__CDevices__CSensors__CActivitySensorReading_USE */

#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

namespace ABI {
    namespace Windows {
        namespace Devices {
            namespace Sensors {
                class PedometerReading;
            } /* Sensors */
        } /* Devices */
    } /* Windows */
} /* ABI */

#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

#ifndef DEF___FIIterator_1_Windows__CDevices__CSensors__CPedometerReading_USE
#define DEF___FIIterator_1_Windows__CDevices__CSensors__CPedometerReading_USE
#if !defined(RO_NO_TEMPLATE_NAME)
namespace ABI { namespace Windows { namespace Foundation { namespace Collections {
template <>
struct __declspec(uuid("0ac70ed3-8553-5ef3-92f8-438609623087"))
IIterator<ABI::Windows::Devices::Sensors::PedometerReading*> : IIterator_impl<ABI::Windows::Foundation::Internal::AggregateType<ABI::Windows::Devices::Sensors::PedometerReading*, ABI::Windows::Devices::Sensors::IPedometerReading*>>
{
    static const wchar_t* z_get_rc_name_impl()
    {
        return L"Windows.Foundation.Collections.IIterator`1<Windows.Devices.Sensors.PedometerReading>";
    }
};
// Define a typedef for the parameterized interface specialization's mangled name.
// This allows code which uses the mangled name for the parameterized interface to access the
// correct parameterized interface specialization.
typedef IIterator<ABI::Windows::Devices::Sensors::PedometerReading*> __FIIterator_1_Windows__CDevices__CSensors__CPedometerReading_t;
#define __FIIterator_1_Windows__CDevices__CSensors__CPedometerReading ABI::Windows::Foundation::Collections::__FIIterator_1_Windows__CDevices__CSensors__CPedometerReading_t
/* Collections */ } /* Foundation */ } /* Windows */ } /* ABI */ }

#endif // !defined(RO_NO_TEMPLATE_NAME)
#endif /* DEF___FIIterator_1_Windows__CDevices__CSensors__CPedometerReading_USE */

#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

#ifndef DEF___FIIterable_1_Windows__CDevices__CSensors__CPedometerReading_USE
#define DEF___FIIterable_1_Windows__CDevices__CSensors__CPedometerReading_USE
#if !defined(RO_NO_TEMPLATE_NAME)
namespace ABI { namespace Windows { namespace Foundation { namespace Collections {
template <>
struct __declspec(uuid("bbb61a5c-98c3-5718-88fe-5392a7451e2d"))
IIterable<ABI::Windows::Devices::Sensors::PedometerReading*> : IIterable_impl<ABI::Windows::Foundation::Internal::AggregateType<ABI::Windows::Devices::Sensors::PedometerReading*, ABI::Windows::Devices::Sensors::IPedometerReading*>>
{
    static const wchar_t* z_get_rc_name_impl()
    {
        return L"Windows.Foundation.Collections.IIterable`1<Windows.Devices.Sensors.PedometerReading>";
    }
};
// Define a typedef for the parameterized interface specialization's mangled name.
// This allows code which uses the mangled name for the parameterized interface to access the
// correct parameterized interface specialization.
typedef IIterable<ABI::Windows::Devices::Sensors::PedometerReading*> __FIIterable_1_Windows__CDevices__CSensors__CPedometerReading_t;
#define __FIIterable_1_Windows__CDevices__CSensors__CPedometerReading ABI::Windows::Foundation::Collections::__FIIterable_1_Windows__CDevices__CSensors__CPedometerReading_t
/* Collections */ } /* Foundation */ } /* Windows */ } /* ABI */ }

#endif // !defined(RO_NO_TEMPLATE_NAME)
#endif /* DEF___FIIterable_1_Windows__CDevices__CSensors__CPedometerReading_USE */

#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

#ifndef DEF___FIVectorView_1_Windows__CDevices__CSensors__CPedometerReading_USE
#define DEF___FIVectorView_1_Windows__CDevices__CSensors__CPedometerReading_USE
#if !defined(RO_NO_TEMPLATE_NAME)
namespace ABI { namespace Windows { namespace Foundation { namespace Collections {
template <>
struct __declspec(uuid("52076f5c-7838-54d9-9517-5511eb627952"))
IVectorView<ABI::Windows::Devices::Sensors::PedometerReading*> : IVectorView_impl<ABI::Windows::Foundation::Internal::AggregateType<ABI::Windows::Devices::Sensors::PedometerReading*, ABI::Windows::Devices::Sensors::IPedometerReading*>>
{
    static const wchar_t* z_get_rc_name_impl()
    {
        return L"Windows.Foundation.Collections.IVectorView`1<Windows.Devices.Sensors.PedometerReading>";
    }
};
// Define a typedef for the parameterized interface specialization's mangled name.
// This allows code which uses the mangled name for the parameterized interface to access the
// correct parameterized interface specialization.
typedef IVectorView<ABI::Windows::Devices::Sensors::PedometerReading*> __FIVectorView_1_Windows__CDevices__CSensors__CPedometerReading_t;
#define __FIVectorView_1_Windows__CDevices__CSensors__CPedometerReading ABI::Windows::Foundation::Collections::__FIVectorView_1_Windows__CDevices__CSensors__CPedometerReading_t
/* Collections */ } /* Foundation */ } /* Windows */ } /* ABI */ }

#endif // !defined(RO_NO_TEMPLATE_NAME)
#endif /* DEF___FIVectorView_1_Windows__CDevices__CSensors__CPedometerReading_USE */

#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

#ifndef DEF___FIAsyncOperation_1___FIVectorView_1_Windows__CDevices__CSensors__CPedometerReading_USE
#define DEF___FIAsyncOperation_1___FIVectorView_1_Windows__CDevices__CSensors__CPedometerReading_USE
#if !defined(RO_NO_TEMPLATE_NAME)
namespace ABI { namespace Windows { namespace Foundation {
template <>
struct __declspec(uuid("2aeac503-a3a8-57b3-a8a9-e16b0cd4c0a4"))
IAsyncOperation<__FIVectorView_1_Windows__CDevices__CSensors__CPedometerReading*> : IAsyncOperation_impl<__FIVectorView_1_Windows__CDevices__CSensors__CPedometerReading*>
{
    static const wchar_t* z_get_rc_name_impl()
    {
        return L"Windows.Foundation.IAsyncOperation`1<Windows.Foundation.Collections.IVectorView`1<Windows.Devices.Sensors.PedometerReading>>";
    }
};
// Define a typedef for the parameterized interface specialization's mangled name.
// This allows code which uses the mangled name for the parameterized interface to access the
// correct parameterized interface specialization.
typedef IAsyncOperation<__FIVectorView_1_Windows__CDevices__CSensors__CPedometerReading*> __FIAsyncOperation_1___FIVectorView_1_Windows__CDevices__CSensors__CPedometerReading_t;
#define __FIAsyncOperation_1___FIVectorView_1_Windows__CDevices__CSensors__CPedometerReading ABI::Windows::Foundation::__FIAsyncOperation_1___FIVectorView_1_Windows__CDevices__CSensors__CPedometerReading_t
/* Foundation */ } /* Windows */ } /* ABI */ }

#endif // !defined(RO_NO_TEMPLATE_NAME)
#endif /* DEF___FIAsyncOperation_1___FIVectorView_1_Windows__CDevices__CSensors__CPedometerReading_USE */

#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

#ifndef DEF___FIAsyncOperationCompletedHandler_1___FIVectorView_1_Windows__CDevices__CSensors__CPedometerReading_USE
#define DEF___FIAsyncOperationCompletedHandler_1___FIVectorView_1_Windows__CDevices__CSensors__CPedometerReading_USE
#if !defined(RO_NO_TEMPLATE_NAME)
namespace ABI { namespace Windows { namespace Foundation {
template <>
struct __declspec(uuid("5bbff840-59f2-5108-9205-a0bbf8f9ba68"))
IAsyncOperationCompletedHandler<__FIVectorView_1_Windows__CDevices__CSensors__CPedometerReading*> : IAsyncOperationCompletedHandler_impl<__FIVectorView_1_Windows__CDevices__CSensors__CPedometerReading*>
{
    static const wchar_t* z_get_rc_name_impl()
    {
        return L"Windows.Foundation.AsyncOperationCompletedHandler`1<Windows.Foundation.Collections.IVectorView`1<Windows.Devices.Sensors.PedometerReading>>";
    }
};
// Define a typedef for the parameterized interface specialization's mangled name.
// This allows code which uses the mangled name for the parameterized interface to access the
// correct parameterized interface specialization.
typedef IAsyncOperationCompletedHandler<__FIVectorView_1_Windows__CDevices__CSensors__CPedometerReading*> __FIAsyncOperationCompletedHandler_1___FIVectorView_1_Windows__CDevices__CSensors__CPedometerReading_t;
#define __FIAsyncOperationCompletedHandler_1___FIVectorView_1_Windows__CDevices__CSensors__CPedometerReading ABI::Windows::Foundation::__FIAsyncOperationCompletedHandler_1___FIVectorView_1_Windows__CDevices__CSensors__CPedometerReading_t
/* Foundation */ } /* Windows */ } /* ABI */ }

#endif // !defined(RO_NO_TEMPLATE_NAME)
#endif /* DEF___FIAsyncOperationCompletedHandler_1___FIVectorView_1_Windows__CDevices__CSensors__CPedometerReading_USE */

#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

namespace ABI {
    namespace Windows {
        namespace Devices {
            namespace Sensors {
                class ActivitySensorReadingChangeReport;
            } /* Sensors */
        } /* Devices */
    } /* Windows */
} /* ABI */

#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

#ifndef DEF___FIIterator_1_Windows__CDevices__CSensors__CActivitySensorReadingChangeReport_USE
#define DEF___FIIterator_1_Windows__CDevices__CSensors__CActivitySensorReadingChangeReport_USE
#if !defined(RO_NO_TEMPLATE_NAME)
namespace ABI { namespace Windows { namespace Foundation { namespace Collections {
template <>
struct __declspec(uuid("9c07034e-8333-59d5-8d60-0e3f0438ac12"))
IIterator<ABI::Windows::Devices::Sensors::ActivitySensorReadingChangeReport*> : IIterator_impl<ABI::Windows::Foundation::Internal::AggregateType<ABI::Windows::Devices::Sensors::ActivitySensorReadingChangeReport*, ABI::Windows::Devices::Sensors::IActivitySensorReadingChangeReport*>>
{
    static const wchar_t* z_get_rc_name_impl()
    {
        return L"Windows.Foundation.Collections.IIterator`1<Windows.Devices.Sensors.ActivitySensorReadingChangeReport>";
    }
};
// Define a typedef for the parameterized interface specialization's mangled name.
// This allows code which uses the mangled name for the parameterized interface to access the
// correct parameterized interface specialization.
typedef IIterator<ABI::Windows::Devices::Sensors::ActivitySensorReadingChangeReport*> __FIIterator_1_Windows__CDevices__CSensors__CActivitySensorReadingChangeReport_t;
#define __FIIterator_1_Windows__CDevices__CSensors__CActivitySensorReadingChangeReport ABI::Windows::Foundation::Collections::__FIIterator_1_Windows__CDevices__CSensors__CActivitySensorReadingChangeReport_t
/* Collections */ } /* Foundation */ } /* Windows */ } /* ABI */ }

#endif // !defined(RO_NO_TEMPLATE_NAME)
#endif /* DEF___FIIterator_1_Windows__CDevices__CSensors__CActivitySensorReadingChangeReport_USE */

#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

#ifndef DEF___FIIterable_1_Windows__CDevices__CSensors__CActivitySensorReadingChangeReport_USE
#define DEF___FIIterable_1_Windows__CDevices__CSensors__CActivitySensorReadingChangeReport_USE
#if !defined(RO_NO_TEMPLATE_NAME)
namespace ABI { namespace Windows { namespace Foundation { namespace Collections {
template <>
struct __declspec(uuid("551a4962-9e96-5e6b-8b8a-65ee3d0046f3"))
IIterable<ABI::Windows::Devices::Sensors::ActivitySensorReadingChangeReport*> : IIterable_impl<ABI::Windows::Foundation::Internal::AggregateType<ABI::Windows::Devices::Sensors::ActivitySensorReadingChangeReport*, ABI::Windows::Devices::Sensors::IActivitySensorReadingChangeReport*>>
{
    static const wchar_t* z_get_rc_name_impl()
    {
        return L"Windows.Foundation.Collections.IIterable`1<Windows.Devices.Sensors.ActivitySensorReadingChangeReport>";
    }
};
// Define a typedef for the parameterized interface specialization's mangled name.
// This allows code which uses the mangled name for the parameterized interface to access the
// correct parameterized interface specialization.
typedef IIterable<ABI::Windows::Devices::Sensors::ActivitySensorReadingChangeReport*> __FIIterable_1_Windows__CDevices__CSensors__CActivitySensorReadingChangeReport_t;
#define __FIIterable_1_Windows__CDevices__CSensors__CActivitySensorReadingChangeReport ABI::Windows::Foundation::Collections::__FIIterable_1_Windows__CDevices__CSensors__CActivitySensorReadingChangeReport_t
/* Collections */ } /* Foundation */ } /* Windows */ } /* ABI */ }

#endif // !defined(RO_NO_TEMPLATE_NAME)
#endif /* DEF___FIIterable_1_Windows__CDevices__CSensors__CActivitySensorReadingChangeReport_USE */

#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

namespace ABI {
    namespace Windows {
        namespace Devices {
            namespace Sensors {
                typedef enum ActivityType : int ActivityType;
            } /* Sensors */
        } /* Devices */
    } /* Windows */
} /* ABI */

#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

#ifndef DEF___FIIterator_1_Windows__CDevices__CSensors__CActivityType_USE
#define DEF___FIIterator_1_Windows__CDevices__CSensors__CActivityType_USE
#if !defined(RO_NO_TEMPLATE_NAME)
namespace ABI { namespace Windows { namespace Foundation { namespace Collections {
template <>
struct __declspec(uuid("40524281-a7c6-50b1-b6f5-0baa95d902c2"))
IIterator<enum ABI::Windows::Devices::Sensors::ActivityType> : IIterator_impl<enum ABI::Windows::Devices::Sensors::ActivityType>
{
    static const wchar_t* z_get_rc_name_impl()
    {
        return L"Windows.Foundation.Collections.IIterator`1<Windows.Devices.Sensors.ActivityType>";
    }
};
// Define a typedef for the parameterized interface specialization's mangled name.
// This allows code which uses the mangled name for the parameterized interface to access the
// correct parameterized interface specialization.
typedef IIterator<enum ABI::Windows::Devices::Sensors::ActivityType> __FIIterator_1_Windows__CDevices__CSensors__CActivityType_t;
#define __FIIterator_1_Windows__CDevices__CSensors__CActivityType ABI::Windows::Foundation::Collections::__FIIterator_1_Windows__CDevices__CSensors__CActivityType_t
/* Collections */ } /* Foundation */ } /* Windows */ } /* ABI */ }

#endif // !defined(RO_NO_TEMPLATE_NAME)
#endif /* DEF___FIIterator_1_Windows__CDevices__CSensors__CActivityType_USE */

#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

#ifndef DEF___FIIterable_1_Windows__CDevices__CSensors__CActivityType_USE
#define DEF___FIIterable_1_Windows__CDevices__CSensors__CActivityType_USE
#if !defined(RO_NO_TEMPLATE_NAME)
namespace ABI { namespace Windows { namespace Foundation { namespace Collections {
template <>
struct __declspec(uuid("2a04cdfa-5dfd-5178-8731-ade998e4a7f6"))
IIterable<enum ABI::Windows::Devices::Sensors::ActivityType> : IIterable_impl<enum ABI::Windows::Devices::Sensors::ActivityType>
{
    static const wchar_t* z_get_rc_name_impl()
    {
        return L"Windows.Foundation.Collections.IIterable`1<Windows.Devices.Sensors.ActivityType>";
    }
};
// Define a typedef for the parameterized interface specialization's mangled name.
// This allows code which uses the mangled name for the parameterized interface to access the
// correct parameterized interface specialization.
typedef IIterable<enum ABI::Windows::Devices::Sensors::ActivityType> __FIIterable_1_Windows__CDevices__CSensors__CActivityType_t;
#define __FIIterable_1_Windows__CDevices__CSensors__CActivityType ABI::Windows::Foundation::Collections::__FIIterable_1_Windows__CDevices__CSensors__CActivityType_t
/* Collections */ } /* Foundation */ } /* Windows */ } /* ABI */ }

#endif // !defined(RO_NO_TEMPLATE_NAME)
#endif /* DEF___FIIterable_1_Windows__CDevices__CSensors__CActivityType_USE */

#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

namespace ABI {
    namespace Windows {
        namespace Devices {
            namespace Sensors {
                class ProximitySensorReading;
            } /* Sensors */
        } /* Devices */
    } /* Windows */
} /* ABI */

#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

#ifndef DEF___FIIterator_1_Windows__CDevices__CSensors__CProximitySensorReading_USE
#define DEF___FIIterator_1_Windows__CDevices__CSensors__CProximitySensorReading_USE
#if !defined(RO_NO_TEMPLATE_NAME)
namespace ABI { namespace Windows { namespace Foundation { namespace Collections {
template <>
struct __declspec(uuid("1d4f08df-7f49-573b-936a-6d4d4e610930"))
IIterator<ABI::Windows::Devices::Sensors::ProximitySensorReading*> : IIterator_impl<ABI::Windows::Foundation::Internal::AggregateType<ABI::Windows::Devices::Sensors::ProximitySensorReading*, ABI::Windows::Devices::Sensors::IProximitySensorReading*>>
{
    static const wchar_t* z_get_rc_name_impl()
    {
        return L"Windows.Foundation.Collections.IIterator`1<Windows.Devices.Sensors.ProximitySensorReading>";
    }
};
// Define a typedef for the parameterized interface specialization's mangled name.
// This allows code which uses the mangled name for the parameterized interface to access the
// correct parameterized interface specialization.
typedef IIterator<ABI::Windows::Devices::Sensors::ProximitySensorReading*> __FIIterator_1_Windows__CDevices__CSensors__CProximitySensorReading_t;
#define __FIIterator_1_Windows__CDevices__CSensors__CProximitySensorReading ABI::Windows::Foundation::Collections::__FIIterator_1_Windows__CDevices__CSensors__CProximitySensorReading_t
/* Collections */ } /* Foundation */ } /* Windows */ } /* ABI */ }

#endif // !defined(RO_NO_TEMPLATE_NAME)
#endif /* DEF___FIIterator_1_Windows__CDevices__CSensors__CProximitySensorReading_USE */

#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

#ifndef DEF___FIIterable_1_Windows__CDevices__CSensors__CProximitySensorReading_USE
#define DEF___FIIterable_1_Windows__CDevices__CSensors__CProximitySensorReading_USE
#if !defined(RO_NO_TEMPLATE_NAME)
namespace ABI { namespace Windows { namespace Foundation { namespace Collections {
template <>
struct __declspec(uuid("301ebccf-11ab-5e90-98ee-bd99c0e3bb76"))
IIterable<ABI::Windows::Devices::Sensors::ProximitySensorReading*> : IIterable_impl<ABI::Windows::Foundation::Internal::AggregateType<ABI::Windows::Devices::Sensors::ProximitySensorReading*, ABI::Windows::Devices::Sensors::IProximitySensorReading*>>
{
    static const wchar_t* z_get_rc_name_impl()
    {
        return L"Windows.Foundation.Collections.IIterable`1<Windows.Devices.Sensors.ProximitySensorReading>";
    }
};
// Define a typedef for the parameterized interface specialization's mangled name.
// This allows code which uses the mangled name for the parameterized interface to access the
// correct parameterized interface specialization.
typedef IIterable<ABI::Windows::Devices::Sensors::ProximitySensorReading*> __FIIterable_1_Windows__CDevices__CSensors__CProximitySensorReading_t;
#define __FIIterable_1_Windows__CDevices__CSensors__CProximitySensorReading ABI::Windows::Foundation::Collections::__FIIterable_1_Windows__CDevices__CSensors__CProximitySensorReading_t
/* Collections */ } /* Foundation */ } /* Windows */ } /* ABI */ }

#endif // !defined(RO_NO_TEMPLATE_NAME)
#endif /* DEF___FIIterable_1_Windows__CDevices__CSensors__CProximitySensorReading_USE */

#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000


#ifndef DEF___FIKeyValuePair_2_HSTRING_IInspectable_USE
#define DEF___FIKeyValuePair_2_HSTRING_IInspectable_USE
#if !defined(RO_NO_TEMPLATE_NAME)
namespace ABI { namespace Windows { namespace Foundation { namespace Collections {
template <>
struct __declspec(uuid("09335560-6c6b-5a26-9348-97b781132b20"))
IKeyValuePair<HSTRING, IInspectable*> : IKeyValuePair_impl<HSTRING, IInspectable*>
{
    static const wchar_t* z_get_rc_name_impl()
    {
        return L"Windows.Foundation.Collections.IKeyValuePair`2<String, Object>";
    }
};
// Define a typedef for the parameterized interface specialization's mangled name.
// This allows code which uses the mangled name for the parameterized interface to access the
// correct parameterized interface specialization.
typedef IKeyValuePair<HSTRING, IInspectable*> __FIKeyValuePair_2_HSTRING_IInspectable_t;
#define __FIKeyValuePair_2_HSTRING_IInspectable ABI::Windows::Foundation::Collections::__FIKeyValuePair_2_HSTRING_IInspectable_t
/* Collections */ } /* Foundation */ } /* Windows */ } /* ABI */ }

#endif // !defined(RO_NO_TEMPLATE_NAME)
#endif /* DEF___FIKeyValuePair_2_HSTRING_IInspectable_USE */



#ifndef DEF___FIIterator_1___FIKeyValuePair_2_HSTRING_IInspectable_USE
#define DEF___FIIterator_1___FIKeyValuePair_2_HSTRING_IInspectable_USE
#if !defined(RO_NO_TEMPLATE_NAME)
namespace ABI { namespace Windows { namespace Foundation { namespace Collections {
template <>
struct __declspec(uuid("5db5fa32-707c-5849-a06b-91c8eb9d10e8"))
IIterator<__FIKeyValuePair_2_HSTRING_IInspectable*> : IIterator_impl<__FIKeyValuePair_2_HSTRING_IInspectable*>
{
    static const wchar_t* z_get_rc_name_impl()
    {
        return L"Windows.Foundation.Collections.IIterator`1<Windows.Foundation.Collections.IKeyValuePair`2<String, Object>>";
    }
};
// Define a typedef for the parameterized interface specialization's mangled name.
// This allows code which uses the mangled name for the parameterized interface to access the
// correct parameterized interface specialization.
typedef IIterator<__FIKeyValuePair_2_HSTRING_IInspectable*> __FIIterator_1___FIKeyValuePair_2_HSTRING_IInspectable_t;
#define __FIIterator_1___FIKeyValuePair_2_HSTRING_IInspectable ABI::Windows::Foundation::Collections::__FIIterator_1___FIKeyValuePair_2_HSTRING_IInspectable_t
/* Collections */ } /* Foundation */ } /* Windows */ } /* ABI */ }

#endif // !defined(RO_NO_TEMPLATE_NAME)
#endif /* DEF___FIIterator_1___FIKeyValuePair_2_HSTRING_IInspectable_USE */



#ifndef DEF___FIIterable_1___FIKeyValuePair_2_HSTRING_IInspectable_USE
#define DEF___FIIterable_1___FIKeyValuePair_2_HSTRING_IInspectable_USE
#if !defined(RO_NO_TEMPLATE_NAME)
namespace ABI { namespace Windows { namespace Foundation { namespace Collections {
template <>
struct __declspec(uuid("fe2f3d47-5d47-5499-8374-430c7cda0204"))
IIterable<__FIKeyValuePair_2_HSTRING_IInspectable*> : IIterable_impl<__FIKeyValuePair_2_HSTRING_IInspectable*>
{
    static const wchar_t* z_get_rc_name_impl()
    {
        return L"Windows.Foundation.Collections.IIterable`1<Windows.Foundation.Collections.IKeyValuePair`2<String, Object>>";
    }
};
// Define a typedef for the parameterized interface specialization's mangled name.
// This allows code which uses the mangled name for the parameterized interface to access the
// correct parameterized interface specialization.
typedef IIterable<__FIKeyValuePair_2_HSTRING_IInspectable*> __FIIterable_1___FIKeyValuePair_2_HSTRING_IInspectable_t;
#define __FIIterable_1___FIKeyValuePair_2_HSTRING_IInspectable ABI::Windows::Foundation::Collections::__FIIterable_1___FIKeyValuePair_2_HSTRING_IInspectable_t
/* Collections */ } /* Foundation */ } /* Windows */ } /* ABI */ }

#endif // !defined(RO_NO_TEMPLATE_NAME)
#endif /* DEF___FIIterable_1___FIKeyValuePair_2_HSTRING_IInspectable_USE */


namespace ABI {
    namespace Windows {
        namespace Devices {
            namespace Sensors {
                typedef enum PedometerStepKind : int PedometerStepKind;
            } /* Sensors */
        } /* Devices */
    } /* Windows */
} /* ABI */

#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

#ifndef DEF___FIKeyValuePair_2_Windows__CDevices__CSensors__CPedometerStepKind_Windows__CDevices__CSensors__CPedometerReading_USE
#define DEF___FIKeyValuePair_2_Windows__CDevices__CSensors__CPedometerStepKind_Windows__CDevices__CSensors__CPedometerReading_USE
#if !defined(RO_NO_TEMPLATE_NAME)
namespace ABI { namespace Windows { namespace Foundation { namespace Collections {
template <>
struct __declspec(uuid("b270d3b8-3dd2-599f-a671-2de5035503da"))
IKeyValuePair<enum ABI::Windows::Devices::Sensors::PedometerStepKind, ABI::Windows::Devices::Sensors::PedometerReading*> : IKeyValuePair_impl<enum ABI::Windows::Devices::Sensors::PedometerStepKind, ABI::Windows::Foundation::Internal::AggregateType<ABI::Windows::Devices::Sensors::PedometerReading*, ABI::Windows::Devices::Sensors::IPedometerReading*>>
{
    static const wchar_t* z_get_rc_name_impl()
    {
        return L"Windows.Foundation.Collections.IKeyValuePair`2<Windows.Devices.Sensors.PedometerStepKind, Windows.Devices.Sensors.PedometerReading>";
    }
};
// Define a typedef for the parameterized interface specialization's mangled name.
// This allows code which uses the mangled name for the parameterized interface to access the
// correct parameterized interface specialization.
typedef IKeyValuePair<enum ABI::Windows::Devices::Sensors::PedometerStepKind, ABI::Windows::Devices::Sensors::PedometerReading*> __FIKeyValuePair_2_Windows__CDevices__CSensors__CPedometerStepKind_Windows__CDevices__CSensors__CPedometerReading_t;
#define __FIKeyValuePair_2_Windows__CDevices__CSensors__CPedometerStepKind_Windows__CDevices__CSensors__CPedometerReading ABI::Windows::Foundation::Collections::__FIKeyValuePair_2_Windows__CDevices__CSensors__CPedometerStepKind_Windows__CDevices__CSensors__CPedometerReading_t
/* Collections */ } /* Foundation */ } /* Windows */ } /* ABI */ }

#endif // !defined(RO_NO_TEMPLATE_NAME)
#endif /* DEF___FIKeyValuePair_2_Windows__CDevices__CSensors__CPedometerStepKind_Windows__CDevices__CSensors__CPedometerReading_USE */

#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

#ifndef DEF___FIIterator_1___FIKeyValuePair_2_Windows__CDevices__CSensors__CPedometerStepKind_Windows__CDevices__CSensors__CPedometerReading_USE
#define DEF___FIIterator_1___FIKeyValuePair_2_Windows__CDevices__CSensors__CPedometerStepKind_Windows__CDevices__CSensors__CPedometerReading_USE
#if !defined(RO_NO_TEMPLATE_NAME)
namespace ABI { namespace Windows { namespace Foundation { namespace Collections {
template <>
struct __declspec(uuid("3e88fe66-d4a7-5658-b5cf-1a39e1fc4165"))
IIterator<__FIKeyValuePair_2_Windows__CDevices__CSensors__CPedometerStepKind_Windows__CDevices__CSensors__CPedometerReading*> : IIterator_impl<__FIKeyValuePair_2_Windows__CDevices__CSensors__CPedometerStepKind_Windows__CDevices__CSensors__CPedometerReading*>
{
    static const wchar_t* z_get_rc_name_impl()
    {
        return L"Windows.Foundation.Collections.IIterator`1<Windows.Foundation.Collections.IKeyValuePair`2<Windows.Devices.Sensors.PedometerStepKind, Windows.Devices.Sensors.PedometerReading>>";
    }
};
// Define a typedef for the parameterized interface specialization's mangled name.
// This allows code which uses the mangled name for the parameterized interface to access the
// correct parameterized interface specialization.
typedef IIterator<__FIKeyValuePair_2_Windows__CDevices__CSensors__CPedometerStepKind_Windows__CDevices__CSensors__CPedometerReading*> __FIIterator_1___FIKeyValuePair_2_Windows__CDevices__CSensors__CPedometerStepKind_Windows__CDevices__CSensors__CPedometerReading_t;
#define __FIIterator_1___FIKeyValuePair_2_Windows__CDevices__CSensors__CPedometerStepKind_Windows__CDevices__CSensors__CPedometerReading ABI::Windows::Foundation::Collections::__FIIterator_1___FIKeyValuePair_2_Windows__CDevices__CSensors__CPedometerStepKind_Windows__CDevices__CSensors__CPedometerReading_t
/* Collections */ } /* Foundation */ } /* Windows */ } /* ABI */ }

#endif // !defined(RO_NO_TEMPLATE_NAME)
#endif /* DEF___FIIterator_1___FIKeyValuePair_2_Windows__CDevices__CSensors__CPedometerStepKind_Windows__CDevices__CSensors__CPedometerReading_USE */

#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

#ifndef DEF___FIIterable_1___FIKeyValuePair_2_Windows__CDevices__CSensors__CPedometerStepKind_Windows__CDevices__CSensors__CPedometerReading_USE
#define DEF___FIIterable_1___FIKeyValuePair_2_Windows__CDevices__CSensors__CPedometerStepKind_Windows__CDevices__CSensors__CPedometerReading_USE
#if !defined(RO_NO_TEMPLATE_NAME)
namespace ABI { namespace Windows { namespace Foundation { namespace Collections {
template <>
struct __declspec(uuid("098f29cb-bc91-5639-a541-d5a4811ec35b"))
IIterable<__FIKeyValuePair_2_Windows__CDevices__CSensors__CPedometerStepKind_Windows__CDevices__CSensors__CPedometerReading*> : IIterable_impl<__FIKeyValuePair_2_Windows__CDevices__CSensors__CPedometerStepKind_Windows__CDevices__CSensors__CPedometerReading*>
{
    static const wchar_t* z_get_rc_name_impl()
    {
        return L"Windows.Foundation.Collections.IIterable`1<Windows.Foundation.Collections.IKeyValuePair`2<Windows.Devices.Sensors.PedometerStepKind, Windows.Devices.Sensors.PedometerReading>>";
    }
};
// Define a typedef for the parameterized interface specialization's mangled name.
// This allows code which uses the mangled name for the parameterized interface to access the
// correct parameterized interface specialization.
typedef IIterable<__FIKeyValuePair_2_Windows__CDevices__CSensors__CPedometerStepKind_Windows__CDevices__CSensors__CPedometerReading*> __FIIterable_1___FIKeyValuePair_2_Windows__CDevices__CSensors__CPedometerStepKind_Windows__CDevices__CSensors__CPedometerReading_t;
#define __FIIterable_1___FIKeyValuePair_2_Windows__CDevices__CSensors__CPedometerStepKind_Windows__CDevices__CSensors__CPedometerReading ABI::Windows::Foundation::Collections::__FIIterable_1___FIKeyValuePair_2_Windows__CDevices__CSensors__CPedometerStepKind_Windows__CDevices__CSensors__CPedometerReading_t
/* Collections */ } /* Foundation */ } /* Windows */ } /* ABI */ }

#endif // !defined(RO_NO_TEMPLATE_NAME)
#endif /* DEF___FIIterable_1___FIKeyValuePair_2_Windows__CDevices__CSensors__CPedometerStepKind_Windows__CDevices__CSensors__CPedometerReading_USE */

#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000


#ifndef DEF___FIMapView_2_HSTRING_IInspectable_USE
#define DEF___FIMapView_2_HSTRING_IInspectable_USE
#if !defined(RO_NO_TEMPLATE_NAME)
namespace ABI { namespace Windows { namespace Foundation { namespace Collections {
template <>
struct __declspec(uuid("bb78502a-f79d-54fa-92c9-90c5039fdf7e"))
IMapView<HSTRING, IInspectable*> : IMapView_impl<HSTRING, IInspectable*>
{
    static const wchar_t* z_get_rc_name_impl()
    {
        return L"Windows.Foundation.Collections.IMapView`2<String, Object>";
    }
};
// Define a typedef for the parameterized interface specialization's mangled name.
// This allows code which uses the mangled name for the parameterized interface to access the
// correct parameterized interface specialization.
typedef IMapView<HSTRING, IInspectable*> __FIMapView_2_HSTRING_IInspectable_t;
#define __FIMapView_2_HSTRING_IInspectable ABI::Windows::Foundation::Collections::__FIMapView_2_HSTRING_IInspectable_t
/* Collections */ } /* Foundation */ } /* Windows */ } /* ABI */ }

#endif // !defined(RO_NO_TEMPLATE_NAME)
#endif /* DEF___FIMapView_2_HSTRING_IInspectable_USE */


#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

#ifndef DEF___FIMapView_2_Windows__CDevices__CSensors__CPedometerStepKind_Windows__CDevices__CSensors__CPedometerReading_USE
#define DEF___FIMapView_2_Windows__CDevices__CSensors__CPedometerStepKind_Windows__CDevices__CSensors__CPedometerReading_USE
#if !defined(RO_NO_TEMPLATE_NAME)
namespace ABI { namespace Windows { namespace Foundation { namespace Collections {
template <>
struct __declspec(uuid("64f0c54c-4865-56bd-ac98-64a98451e362"))
IMapView<enum ABI::Windows::Devices::Sensors::PedometerStepKind, ABI::Windows::Devices::Sensors::PedometerReading*> : IMapView_impl<enum ABI::Windows::Devices::Sensors::PedometerStepKind, ABI::Windows::Foundation::Internal::AggregateType<ABI::Windows::Devices::Sensors::PedometerReading*, ABI::Windows::Devices::Sensors::IPedometerReading*>>
{
    static const wchar_t* z_get_rc_name_impl()
    {
        return L"Windows.Foundation.Collections.IMapView`2<Windows.Devices.Sensors.PedometerStepKind, Windows.Devices.Sensors.PedometerReading>";
    }
};
// Define a typedef for the parameterized interface specialization's mangled name.
// This allows code which uses the mangled name for the parameterized interface to access the
// correct parameterized interface specialization.
typedef IMapView<enum ABI::Windows::Devices::Sensors::PedometerStepKind, ABI::Windows::Devices::Sensors::PedometerReading*> __FIMapView_2_Windows__CDevices__CSensors__CPedometerStepKind_Windows__CDevices__CSensors__CPedometerReading_t;
#define __FIMapView_2_Windows__CDevices__CSensors__CPedometerStepKind_Windows__CDevices__CSensors__CPedometerReading ABI::Windows::Foundation::Collections::__FIMapView_2_Windows__CDevices__CSensors__CPedometerStepKind_Windows__CDevices__CSensors__CPedometerReading_t
/* Collections */ } /* Foundation */ } /* Windows */ } /* ABI */ }

#endif // !defined(RO_NO_TEMPLATE_NAME)
#endif /* DEF___FIMapView_2_Windows__CDevices__CSensors__CPedometerStepKind_Windows__CDevices__CSensors__CPedometerReading_USE */

#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

#ifndef DEF___FIVectorView_1_Windows__CDevices__CSensors__CActivitySensorReadingChangeReport_USE
#define DEF___FIVectorView_1_Windows__CDevices__CSensors__CActivitySensorReadingChangeReport_USE
#if !defined(RO_NO_TEMPLATE_NAME)
namespace ABI { namespace Windows { namespace Foundation { namespace Collections {
template <>
struct __declspec(uuid("10e48a80-dd6a-5704-8f3d-3d46111f391e"))
IVectorView<ABI::Windows::Devices::Sensors::ActivitySensorReadingChangeReport*> : IVectorView_impl<ABI::Windows::Foundation::Internal::AggregateType<ABI::Windows::Devices::Sensors::ActivitySensorReadingChangeReport*, ABI::Windows::Devices::Sensors::IActivitySensorReadingChangeReport*>>
{
    static const wchar_t* z_get_rc_name_impl()
    {
        return L"Windows.Foundation.Collections.IVectorView`1<Windows.Devices.Sensors.ActivitySensorReadingChangeReport>";
    }
};
// Define a typedef for the parameterized interface specialization's mangled name.
// This allows code which uses the mangled name for the parameterized interface to access the
// correct parameterized interface specialization.
typedef IVectorView<ABI::Windows::Devices::Sensors::ActivitySensorReadingChangeReport*> __FIVectorView_1_Windows__CDevices__CSensors__CActivitySensorReadingChangeReport_t;
#define __FIVectorView_1_Windows__CDevices__CSensors__CActivitySensorReadingChangeReport ABI::Windows::Foundation::Collections::__FIVectorView_1_Windows__CDevices__CSensors__CActivitySensorReadingChangeReport_t
/* Collections */ } /* Foundation */ } /* Windows */ } /* ABI */ }

#endif // !defined(RO_NO_TEMPLATE_NAME)
#endif /* DEF___FIVectorView_1_Windows__CDevices__CSensors__CActivitySensorReadingChangeReport_USE */

#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

#ifndef DEF___FIVectorView_1_Windows__CDevices__CSensors__CActivityType_USE
#define DEF___FIVectorView_1_Windows__CDevices__CSensors__CActivityType_USE
#if !defined(RO_NO_TEMPLATE_NAME)
namespace ABI { namespace Windows { namespace Foundation { namespace Collections {
template <>
struct __declspec(uuid("fc7a0488-2803-505c-9e62-9200afe416c6"))
IVectorView<enum ABI::Windows::Devices::Sensors::ActivityType> : IVectorView_impl<enum ABI::Windows::Devices::Sensors::ActivityType>
{
    static const wchar_t* z_get_rc_name_impl()
    {
        return L"Windows.Foundation.Collections.IVectorView`1<Windows.Devices.Sensors.ActivityType>";
    }
};
// Define a typedef for the parameterized interface specialization's mangled name.
// This allows code which uses the mangled name for the parameterized interface to access the
// correct parameterized interface specialization.
typedef IVectorView<enum ABI::Windows::Devices::Sensors::ActivityType> __FIVectorView_1_Windows__CDevices__CSensors__CActivityType_t;
#define __FIVectorView_1_Windows__CDevices__CSensors__CActivityType ABI::Windows::Foundation::Collections::__FIVectorView_1_Windows__CDevices__CSensors__CActivityType_t
/* Collections */ } /* Foundation */ } /* Windows */ } /* ABI */ }

#endif // !defined(RO_NO_TEMPLATE_NAME)
#endif /* DEF___FIVectorView_1_Windows__CDevices__CSensors__CActivityType_USE */

#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

#ifndef DEF___FIVectorView_1_Windows__CDevices__CSensors__CProximitySensorReading_USE
#define DEF___FIVectorView_1_Windows__CDevices__CSensors__CProximitySensorReading_USE
#if !defined(RO_NO_TEMPLATE_NAME)
namespace ABI { namespace Windows { namespace Foundation { namespace Collections {
template <>
struct __declspec(uuid("7a09d76c-8ced-5e30-b7fe-1ff74d4d9814"))
IVectorView<ABI::Windows::Devices::Sensors::ProximitySensorReading*> : IVectorView_impl<ABI::Windows::Foundation::Internal::AggregateType<ABI::Windows::Devices::Sensors::ProximitySensorReading*, ABI::Windows::Devices::Sensors::IProximitySensorReading*>>
{
    static const wchar_t* z_get_rc_name_impl()
    {
        return L"Windows.Foundation.Collections.IVectorView`1<Windows.Devices.Sensors.ProximitySensorReading>";
    }
};
// Define a typedef for the parameterized interface specialization's mangled name.
// This allows code which uses the mangled name for the parameterized interface to access the
// correct parameterized interface specialization.
typedef IVectorView<ABI::Windows::Devices::Sensors::ProximitySensorReading*> __FIVectorView_1_Windows__CDevices__CSensors__CProximitySensorReading_t;
#define __FIVectorView_1_Windows__CDevices__CSensors__CProximitySensorReading ABI::Windows::Foundation::Collections::__FIVectorView_1_Windows__CDevices__CSensors__CProximitySensorReading_t
/* Collections */ } /* Foundation */ } /* Windows */ } /* ABI */ }

#endif // !defined(RO_NO_TEMPLATE_NAME)
#endif /* DEF___FIVectorView_1_Windows__CDevices__CSensors__CProximitySensorReading_USE */

#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

#ifndef DEF___FIVector_1_Windows__CDevices__CSensors__CActivityType_USE
#define DEF___FIVector_1_Windows__CDevices__CSensors__CActivityType_USE
#if !defined(RO_NO_TEMPLATE_NAME)
namespace ABI { namespace Windows { namespace Foundation { namespace Collections {
template <>
struct __declspec(uuid("e3e660d6-d041-5ecd-b18b-fa254e4a860f"))
IVector<enum ABI::Windows::Devices::Sensors::ActivityType> : IVector_impl<enum ABI::Windows::Devices::Sensors::ActivityType>
{
    static const wchar_t* z_get_rc_name_impl()
    {
        return L"Windows.Foundation.Collections.IVector`1<Windows.Devices.Sensors.ActivityType>";
    }
};
// Define a typedef for the parameterized interface specialization's mangled name.
// This allows code which uses the mangled name for the parameterized interface to access the
// correct parameterized interface specialization.
typedef IVector<enum ABI::Windows::Devices::Sensors::ActivityType> __FIVector_1_Windows__CDevices__CSensors__CActivityType_t;
#define __FIVector_1_Windows__CDevices__CSensors__CActivityType ABI::Windows::Foundation::Collections::__FIVector_1_Windows__CDevices__CSensors__CActivityType_t
/* Collections */ } /* Foundation */ } /* Windows */ } /* ABI */ }

#endif // !defined(RO_NO_TEMPLATE_NAME)
#endif /* DEF___FIVector_1_Windows__CDevices__CSensors__CActivityType_USE */

#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000


#ifndef DEF___FIReference_1_double_USE
#define DEF___FIReference_1_double_USE
#if !defined(RO_NO_TEMPLATE_NAME)
namespace ABI { namespace Windows { namespace Foundation {
template <>
struct __declspec(uuid("2f2d6c29-5473-5f3e-92e7-96572bb990e2"))
IReference<double> : IReference_impl<double>
{
    static const wchar_t* z_get_rc_name_impl()
    {
        return L"Windows.Foundation.IReference`1<Double>";
    }
};
// Define a typedef for the parameterized interface specialization's mangled name.
// This allows code which uses the mangled name for the parameterized interface to access the
// correct parameterized interface specialization.
typedef IReference<double> __FIReference_1_double_t;
#define __FIReference_1_double ABI::Windows::Foundation::__FIReference_1_double_t
/* Foundation */ } /* Windows */ } /* ABI */ }

#endif // !defined(RO_NO_TEMPLATE_NAME)
#endif /* DEF___FIReference_1_double_USE */



#ifndef DEF___FIReference_1_UINT32_USE
#define DEF___FIReference_1_UINT32_USE
#if !defined(RO_NO_TEMPLATE_NAME)
namespace ABI { namespace Windows { namespace Foundation {
template <>
struct __declspec(uuid("513ef3af-e784-5325-a91e-97c2b8111cf3"))
IReference<UINT32> : IReference_impl<UINT32>
{
    static const wchar_t* z_get_rc_name_impl()
    {
        return L"Windows.Foundation.IReference`1<UInt32>";
    }
};
// Define a typedef for the parameterized interface specialization's mangled name.
// This allows code which uses the mangled name for the parameterized interface to access the
// correct parameterized interface specialization.
typedef IReference<UINT32> __FIReference_1_UINT32_t;
#define __FIReference_1_UINT32 ABI::Windows::Foundation::__FIReference_1_UINT32_t
/* Foundation */ } /* Windows */ } /* ABI */ }

#endif // !defined(RO_NO_TEMPLATE_NAME)
#endif /* DEF___FIReference_1_UINT32_USE */


namespace ABI {
    namespace Windows {
        namespace Foundation {
            typedef struct TimeSpan TimeSpan;
        } /* Foundation */
    } /* Windows */
} /* ABI */

#if WINDOWS_FOUNDATION_FOUNDATIONCONTRACT_VERSION >= 0x10000

#ifndef DEF___FIReference_1_Windows__CFoundation__CTimeSpan_USE
#define DEF___FIReference_1_Windows__CFoundation__CTimeSpan_USE
#if !defined(RO_NO_TEMPLATE_NAME)
namespace ABI { namespace Windows { namespace Foundation {
template <>
struct __declspec(uuid("604d0c4c-91de-5c2a-935f-362f13eaf800"))
IReference<struct ABI::Windows::Foundation::TimeSpan> : IReference_impl<struct ABI::Windows::Foundation::TimeSpan>
{
    static const wchar_t* z_get_rc_name_impl()
    {
        return L"Windows.Foundation.IReference`1<Windows.Foundation.TimeSpan>";
    }
};
// Define a typedef for the parameterized interface specialization's mangled name.
// This allows code which uses the mangled name for the parameterized interface to access the
// correct parameterized interface specialization.
typedef IReference<struct ABI::Windows::Foundation::TimeSpan> __FIReference_1_Windows__CFoundation__CTimeSpan_t;
#define __FIReference_1_Windows__CFoundation__CTimeSpan ABI::Windows::Foundation::__FIReference_1_Windows__CFoundation__CTimeSpan_t
/* Foundation */ } /* Windows */ } /* ABI */ }

#endif // !defined(RO_NO_TEMPLATE_NAME)
#endif /* DEF___FIReference_1_Windows__CFoundation__CTimeSpan_USE */

#endif // WINDOWS_FOUNDATION_FOUNDATIONCONTRACT_VERSION >= 0x10000

namespace ABI {
    namespace Windows {
        namespace Devices {
            namespace Sensors {
                class AccelerometerReadingChangedEventArgs;
            } /* Sensors */
        } /* Devices */
    } /* Windows */
} /* ABI */

#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

#ifndef DEF___FITypedEventHandler_2_Windows__CDevices__CSensors__CAccelerometer_Windows__CDevices__CSensors__CAccelerometerReadingChangedEventArgs_USE
#define DEF___FITypedEventHandler_2_Windows__CDevices__CSensors__CAccelerometer_Windows__CDevices__CSensors__CAccelerometerReadingChangedEventArgs_USE
#if !defined(RO_NO_TEMPLATE_NAME)
namespace ABI { namespace Windows { namespace Foundation {
template <>
struct __declspec(uuid("a5e83e40-b597-5b83-92f5-5bed3926ca80"))
ITypedEventHandler<ABI::Windows::Devices::Sensors::Accelerometer*, ABI::Windows::Devices::Sensors::AccelerometerReadingChangedEventArgs*> : ITypedEventHandler_impl<ABI::Windows::Foundation::Internal::AggregateType<ABI::Windows::Devices::Sensors::Accelerometer*, ABI::Windows::Devices::Sensors::IAccelerometer*>, ABI::Windows::Foundation::Internal::AggregateType<ABI::Windows::Devices::Sensors::AccelerometerReadingChangedEventArgs*, ABI::Windows::Devices::Sensors::IAccelerometerReadingChangedEventArgs*>>
{
    static const wchar_t* z_get_rc_name_impl()
    {
        return L"Windows.Foundation.TypedEventHandler`2<Windows.Devices.Sensors.Accelerometer, Windows.Devices.Sensors.AccelerometerReadingChangedEventArgs>";
    }
};
// Define a typedef for the parameterized interface specialization's mangled name.
// This allows code which uses the mangled name for the parameterized interface to access the
// correct parameterized interface specialization.
typedef ITypedEventHandler<ABI::Windows::Devices::Sensors::Accelerometer*, ABI::Windows::Devices::Sensors::AccelerometerReadingChangedEventArgs*> __FITypedEventHandler_2_Windows__CDevices__CSensors__CAccelerometer_Windows__CDevices__CSensors__CAccelerometerReadingChangedEventArgs_t;
#define __FITypedEventHandler_2_Windows__CDevices__CSensors__CAccelerometer_Windows__CDevices__CSensors__CAccelerometerReadingChangedEventArgs ABI::Windows::Foundation::__FITypedEventHandler_2_Windows__CDevices__CSensors__CAccelerometer_Windows__CDevices__CSensors__CAccelerometerReadingChangedEventArgs_t
/* Foundation */ } /* Windows */ } /* ABI */ }

#endif // !defined(RO_NO_TEMPLATE_NAME)
#endif /* DEF___FITypedEventHandler_2_Windows__CDevices__CSensors__CAccelerometer_Windows__CDevices__CSensors__CAccelerometerReadingChangedEventArgs_USE */

#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

namespace ABI {
    namespace Windows {
        namespace Devices {
            namespace Sensors {
                class AccelerometerShakenEventArgs;
            } /* Sensors */
        } /* Devices */
    } /* Windows */
} /* ABI */

#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

#ifndef DEF___FITypedEventHandler_2_Windows__CDevices__CSensors__CAccelerometer_Windows__CDevices__CSensors__CAccelerometerShakenEventArgs_USE
#define DEF___FITypedEventHandler_2_Windows__CDevices__CSensors__CAccelerometer_Windows__CDevices__CSensors__CAccelerometerShakenEventArgs_USE
#if !defined(RO_NO_TEMPLATE_NAME)
namespace ABI { namespace Windows { namespace Foundation {
template <>
struct __declspec(uuid("3e5d6eaf-f169-5d60-92b0-98cd6bd8f808"))
ITypedEventHandler<ABI::Windows::Devices::Sensors::Accelerometer*, ABI::Windows::Devices::Sensors::AccelerometerShakenEventArgs*> : ITypedEventHandler_impl<ABI::Windows::Foundation::Internal::AggregateType<ABI::Windows::Devices::Sensors::Accelerometer*, ABI::Windows::Devices::Sensors::IAccelerometer*>, ABI::Windows::Foundation::Internal::AggregateType<ABI::Windows::Devices::Sensors::AccelerometerShakenEventArgs*, ABI::Windows::Devices::Sensors::IAccelerometerShakenEventArgs*>>
{
    static const wchar_t* z_get_rc_name_impl()
    {
        return L"Windows.Foundation.TypedEventHandler`2<Windows.Devices.Sensors.Accelerometer, Windows.Devices.Sensors.AccelerometerShakenEventArgs>";
    }
};
// Define a typedef for the parameterized interface specialization's mangled name.
// This allows code which uses the mangled name for the parameterized interface to access the
// correct parameterized interface specialization.
typedef ITypedEventHandler<ABI::Windows::Devices::Sensors::Accelerometer*, ABI::Windows::Devices::Sensors::AccelerometerShakenEventArgs*> __FITypedEventHandler_2_Windows__CDevices__CSensors__CAccelerometer_Windows__CDevices__CSensors__CAccelerometerShakenEventArgs_t;
#define __FITypedEventHandler_2_Windows__CDevices__CSensors__CAccelerometer_Windows__CDevices__CSensors__CAccelerometerShakenEventArgs ABI::Windows::Foundation::__FITypedEventHandler_2_Windows__CDevices__CSensors__CAccelerometer_Windows__CDevices__CSensors__CAccelerometerShakenEventArgs_t
/* Foundation */ } /* Windows */ } /* ABI */ }

#endif // !defined(RO_NO_TEMPLATE_NAME)
#endif /* DEF___FITypedEventHandler_2_Windows__CDevices__CSensors__CAccelerometer_Windows__CDevices__CSensors__CAccelerometerShakenEventArgs_USE */

#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

namespace ABI {
    namespace Windows {
        namespace Devices {
            namespace Sensors {
                class ActivitySensorReadingChangedEventArgs;
            } /* Sensors */
        } /* Devices */
    } /* Windows */
} /* ABI */

#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

#ifndef DEF___FITypedEventHandler_2_Windows__CDevices__CSensors__CActivitySensor_Windows__CDevices__CSensors__CActivitySensorReadingChangedEventArgs_USE
#define DEF___FITypedEventHandler_2_Windows__CDevices__CSensors__CActivitySensor_Windows__CDevices__CSensors__CActivitySensorReadingChangedEventArgs_USE
#if !defined(RO_NO_TEMPLATE_NAME)
namespace ABI { namespace Windows { namespace Foundation {
template <>
struct __declspec(uuid("a5b72e01-546c-5fbb-b847-49200aaaaac5"))
ITypedEventHandler<ABI::Windows::Devices::Sensors::ActivitySensor*, ABI::Windows::Devices::Sensors::ActivitySensorReadingChangedEventArgs*> : ITypedEventHandler_impl<ABI::Windows::Foundation::Internal::AggregateType<ABI::Windows::Devices::Sensors::ActivitySensor*, ABI::Windows::Devices::Sensors::IActivitySensor*>, ABI::Windows::Foundation::Internal::AggregateType<ABI::Windows::Devices::Sensors::ActivitySensorReadingChangedEventArgs*, ABI::Windows::Devices::Sensors::IActivitySensorReadingChangedEventArgs*>>
{
    static const wchar_t* z_get_rc_name_impl()
    {
        return L"Windows.Foundation.TypedEventHandler`2<Windows.Devices.Sensors.ActivitySensor, Windows.Devices.Sensors.ActivitySensorReadingChangedEventArgs>";
    }
};
// Define a typedef for the parameterized interface specialization's mangled name.
// This allows code which uses the mangled name for the parameterized interface to access the
// correct parameterized interface specialization.
typedef ITypedEventHandler<ABI::Windows::Devices::Sensors::ActivitySensor*, ABI::Windows::Devices::Sensors::ActivitySensorReadingChangedEventArgs*> __FITypedEventHandler_2_Windows__CDevices__CSensors__CActivitySensor_Windows__CDevices__CSensors__CActivitySensorReadingChangedEventArgs_t;
#define __FITypedEventHandler_2_Windows__CDevices__CSensors__CActivitySensor_Windows__CDevices__CSensors__CActivitySensorReadingChangedEventArgs ABI::Windows::Foundation::__FITypedEventHandler_2_Windows__CDevices__CSensors__CActivitySensor_Windows__CDevices__CSensors__CActivitySensorReadingChangedEventArgs_t
/* Foundation */ } /* Windows */ } /* ABI */ }

#endif // !defined(RO_NO_TEMPLATE_NAME)
#endif /* DEF___FITypedEventHandler_2_Windows__CDevices__CSensors__CActivitySensor_Windows__CDevices__CSensors__CActivitySensorReadingChangedEventArgs_USE */

#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

namespace ABI {
    namespace Windows {
        namespace Devices {
            namespace Sensors {
                class Altimeter;
            } /* Sensors */
        } /* Devices */
    } /* Windows */
} /* ABI */

namespace ABI {
    namespace Windows {
        namespace Devices {
            namespace Sensors {
                class AltimeterReadingChangedEventArgs;
            } /* Sensors */
        } /* Devices */
    } /* Windows */
} /* ABI */

#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

#ifndef DEF___FITypedEventHandler_2_Windows__CDevices__CSensors__CAltimeter_Windows__CDevices__CSensors__CAltimeterReadingChangedEventArgs_USE
#define DEF___FITypedEventHandler_2_Windows__CDevices__CSensors__CAltimeter_Windows__CDevices__CSensors__CAltimeterReadingChangedEventArgs_USE
#if !defined(RO_NO_TEMPLATE_NAME)
namespace ABI { namespace Windows { namespace Foundation {
template <>
struct __declspec(uuid("d775d699-9d74-5473-9c1b-d51a89db6642"))
ITypedEventHandler<ABI::Windows::Devices::Sensors::Altimeter*, ABI::Windows::Devices::Sensors::AltimeterReadingChangedEventArgs*> : ITypedEventHandler_impl<ABI::Windows::Foundation::Internal::AggregateType<ABI::Windows::Devices::Sensors::Altimeter*, ABI::Windows::Devices::Sensors::IAltimeter*>, ABI::Windows::Foundation::Internal::AggregateType<ABI::Windows::Devices::Sensors::AltimeterReadingChangedEventArgs*, ABI::Windows::Devices::Sensors::IAltimeterReadingChangedEventArgs*>>
{
    static const wchar_t* z_get_rc_name_impl()
    {
        return L"Windows.Foundation.TypedEventHandler`2<Windows.Devices.Sensors.Altimeter, Windows.Devices.Sensors.AltimeterReadingChangedEventArgs>";
    }
};
// Define a typedef for the parameterized interface specialization's mangled name.
// This allows code which uses the mangled name for the parameterized interface to access the
// correct parameterized interface specialization.
typedef ITypedEventHandler<ABI::Windows::Devices::Sensors::Altimeter*, ABI::Windows::Devices::Sensors::AltimeterReadingChangedEventArgs*> __FITypedEventHandler_2_Windows__CDevices__CSensors__CAltimeter_Windows__CDevices__CSensors__CAltimeterReadingChangedEventArgs_t;
#define __FITypedEventHandler_2_Windows__CDevices__CSensors__CAltimeter_Windows__CDevices__CSensors__CAltimeterReadingChangedEventArgs ABI::Windows::Foundation::__FITypedEventHandler_2_Windows__CDevices__CSensors__CAltimeter_Windows__CDevices__CSensors__CAltimeterReadingChangedEventArgs_t
/* Foundation */ } /* Windows */ } /* ABI */ }

#endif // !defined(RO_NO_TEMPLATE_NAME)
#endif /* DEF___FITypedEventHandler_2_Windows__CDevices__CSensors__CAltimeter_Windows__CDevices__CSensors__CAltimeterReadingChangedEventArgs_USE */

#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

namespace ABI {
    namespace Windows {
        namespace Devices {
            namespace Sensors {
                class BarometerReadingChangedEventArgs;
            } /* Sensors */
        } /* Devices */
    } /* Windows */
} /* ABI */

#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

#ifndef DEF___FITypedEventHandler_2_Windows__CDevices__CSensors__CBarometer_Windows__CDevices__CSensors__CBarometerReadingChangedEventArgs_USE
#define DEF___FITypedEventHandler_2_Windows__CDevices__CSensors__CBarometer_Windows__CDevices__CSensors__CBarometerReadingChangedEventArgs_USE
#if !defined(RO_NO_TEMPLATE_NAME)
namespace ABI { namespace Windows { namespace Foundation {
template <>
struct __declspec(uuid("e4caf459-d101-5ca5-a4ea-deb0917ae27e"))
ITypedEventHandler<ABI::Windows::Devices::Sensors::Barometer*, ABI::Windows::Devices::Sensors::BarometerReadingChangedEventArgs*> : ITypedEventHandler_impl<ABI::Windows::Foundation::Internal::AggregateType<ABI::Windows::Devices::Sensors::Barometer*, ABI::Windows::Devices::Sensors::IBarometer*>, ABI::Windows::Foundation::Internal::AggregateType<ABI::Windows::Devices::Sensors::BarometerReadingChangedEventArgs*, ABI::Windows::Devices::Sensors::IBarometerReadingChangedEventArgs*>>
{
    static const wchar_t* z_get_rc_name_impl()
    {
        return L"Windows.Foundation.TypedEventHandler`2<Windows.Devices.Sensors.Barometer, Windows.Devices.Sensors.BarometerReadingChangedEventArgs>";
    }
};
// Define a typedef for the parameterized interface specialization's mangled name.
// This allows code which uses the mangled name for the parameterized interface to access the
// correct parameterized interface specialization.
typedef ITypedEventHandler<ABI::Windows::Devices::Sensors::Barometer*, ABI::Windows::Devices::Sensors::BarometerReadingChangedEventArgs*> __FITypedEventHandler_2_Windows__CDevices__CSensors__CBarometer_Windows__CDevices__CSensors__CBarometerReadingChangedEventArgs_t;
#define __FITypedEventHandler_2_Windows__CDevices__CSensors__CBarometer_Windows__CDevices__CSensors__CBarometerReadingChangedEventArgs ABI::Windows::Foundation::__FITypedEventHandler_2_Windows__CDevices__CSensors__CBarometer_Windows__CDevices__CSensors__CBarometerReadingChangedEventArgs_t
/* Foundation */ } /* Windows */ } /* ABI */ }

#endif // !defined(RO_NO_TEMPLATE_NAME)
#endif /* DEF___FITypedEventHandler_2_Windows__CDevices__CSensors__CBarometer_Windows__CDevices__CSensors__CBarometerReadingChangedEventArgs_USE */

#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

namespace ABI {
    namespace Windows {
        namespace Devices {
            namespace Sensors {
                class CompassReadingChangedEventArgs;
            } /* Sensors */
        } /* Devices */
    } /* Windows */
} /* ABI */

#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

#ifndef DEF___FITypedEventHandler_2_Windows__CDevices__CSensors__CCompass_Windows__CDevices__CSensors__CCompassReadingChangedEventArgs_USE
#define DEF___FITypedEventHandler_2_Windows__CDevices__CSensors__CCompass_Windows__CDevices__CSensors__CCompassReadingChangedEventArgs_USE
#if !defined(RO_NO_TEMPLATE_NAME)
namespace ABI { namespace Windows { namespace Foundation {
template <>
struct __declspec(uuid("e787d73d-a121-5ae6-b497-ab934837e57f"))
ITypedEventHandler<ABI::Windows::Devices::Sensors::Compass*, ABI::Windows::Devices::Sensors::CompassReadingChangedEventArgs*> : ITypedEventHandler_impl<ABI::Windows::Foundation::Internal::AggregateType<ABI::Windows::Devices::Sensors::Compass*, ABI::Windows::Devices::Sensors::ICompass*>, ABI::Windows::Foundation::Internal::AggregateType<ABI::Windows::Devices::Sensors::CompassReadingChangedEventArgs*, ABI::Windows::Devices::Sensors::ICompassReadingChangedEventArgs*>>
{
    static const wchar_t* z_get_rc_name_impl()
    {
        return L"Windows.Foundation.TypedEventHandler`2<Windows.Devices.Sensors.Compass, Windows.Devices.Sensors.CompassReadingChangedEventArgs>";
    }
};
// Define a typedef for the parameterized interface specialization's mangled name.
// This allows code which uses the mangled name for the parameterized interface to access the
// correct parameterized interface specialization.
typedef ITypedEventHandler<ABI::Windows::Devices::Sensors::Compass*, ABI::Windows::Devices::Sensors::CompassReadingChangedEventArgs*> __FITypedEventHandler_2_Windows__CDevices__CSensors__CCompass_Windows__CDevices__CSensors__CCompassReadingChangedEventArgs_t;
#define __FITypedEventHandler_2_Windows__CDevices__CSensors__CCompass_Windows__CDevices__CSensors__CCompassReadingChangedEventArgs ABI::Windows::Foundation::__FITypedEventHandler_2_Windows__CDevices__CSensors__CCompass_Windows__CDevices__CSensors__CCompassReadingChangedEventArgs_t
/* Foundation */ } /* Windows */ } /* ABI */ }

#endif // !defined(RO_NO_TEMPLATE_NAME)
#endif /* DEF___FITypedEventHandler_2_Windows__CDevices__CSensors__CCompass_Windows__CDevices__CSensors__CCompassReadingChangedEventArgs_USE */

#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

namespace ABI {
    namespace Windows {
        namespace Devices {
            namespace Sensors {
                class GyrometerReadingChangedEventArgs;
            } /* Sensors */
        } /* Devices */
    } /* Windows */
} /* ABI */

#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

#ifndef DEF___FITypedEventHandler_2_Windows__CDevices__CSensors__CGyrometer_Windows__CDevices__CSensors__CGyrometerReadingChangedEventArgs_USE
#define DEF___FITypedEventHandler_2_Windows__CDevices__CSensors__CGyrometer_Windows__CDevices__CSensors__CGyrometerReadingChangedEventArgs_USE
#if !defined(RO_NO_TEMPLATE_NAME)
namespace ABI { namespace Windows { namespace Foundation {
template <>
struct __declspec(uuid("15171524-5786-59a5-af5b-a01245726c44"))
ITypedEventHandler<ABI::Windows::Devices::Sensors::Gyrometer*, ABI::Windows::Devices::Sensors::GyrometerReadingChangedEventArgs*> : ITypedEventHandler_impl<ABI::Windows::Foundation::Internal::AggregateType<ABI::Windows::Devices::Sensors::Gyrometer*, ABI::Windows::Devices::Sensors::IGyrometer*>, ABI::Windows::Foundation::Internal::AggregateType<ABI::Windows::Devices::Sensors::GyrometerReadingChangedEventArgs*, ABI::Windows::Devices::Sensors::IGyrometerReadingChangedEventArgs*>>
{
    static const wchar_t* z_get_rc_name_impl()
    {
        return L"Windows.Foundation.TypedEventHandler`2<Windows.Devices.Sensors.Gyrometer, Windows.Devices.Sensors.GyrometerReadingChangedEventArgs>";
    }
};
// Define a typedef for the parameterized interface specialization's mangled name.
// This allows code which uses the mangled name for the parameterized interface to access the
// correct parameterized interface specialization.
typedef ITypedEventHandler<ABI::Windows::Devices::Sensors::Gyrometer*, ABI::Windows::Devices::Sensors::GyrometerReadingChangedEventArgs*> __FITypedEventHandler_2_Windows__CDevices__CSensors__CGyrometer_Windows__CDevices__CSensors__CGyrometerReadingChangedEventArgs_t;
#define __FITypedEventHandler_2_Windows__CDevices__CSensors__CGyrometer_Windows__CDevices__CSensors__CGyrometerReadingChangedEventArgs ABI::Windows::Foundation::__FITypedEventHandler_2_Windows__CDevices__CSensors__CGyrometer_Windows__CDevices__CSensors__CGyrometerReadingChangedEventArgs_t
/* Foundation */ } /* Windows */ } /* ABI */ }

#endif // !defined(RO_NO_TEMPLATE_NAME)
#endif /* DEF___FITypedEventHandler_2_Windows__CDevices__CSensors__CGyrometer_Windows__CDevices__CSensors__CGyrometerReadingChangedEventArgs_USE */

#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

namespace ABI {
    namespace Windows {
        namespace Devices {
            namespace Sensors {
                class HingeAngleSensorReadingChangedEventArgs;
            } /* Sensors */
        } /* Devices */
    } /* Windows */
} /* ABI */

#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x70000
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x70000

#ifndef DEF___FITypedEventHandler_2_Windows__CDevices__CSensors__CHingeAngleSensor_Windows__CDevices__CSensors__CHingeAngleSensorReadingChangedEventArgs_USE
#define DEF___FITypedEventHandler_2_Windows__CDevices__CSensors__CHingeAngleSensor_Windows__CDevices__CSensors__CHingeAngleSensorReadingChangedEventArgs_USE
#if !defined(RO_NO_TEMPLATE_NAME)
namespace ABI { namespace Windows { namespace Foundation {
template <>
struct __declspec(uuid("68de2bf4-243c-5aee-9dd9-d2e5e3165866"))
ITypedEventHandler<ABI::Windows::Devices::Sensors::HingeAngleSensor*, ABI::Windows::Devices::Sensors::HingeAngleSensorReadingChangedEventArgs*> : ITypedEventHandler_impl<ABI::Windows::Foundation::Internal::AggregateType<ABI::Windows::Devices::Sensors::HingeAngleSensor*, ABI::Windows::Devices::Sensors::IHingeAngleSensor*>, ABI::Windows::Foundation::Internal::AggregateType<ABI::Windows::Devices::Sensors::HingeAngleSensorReadingChangedEventArgs*, ABI::Windows::Devices::Sensors::IHingeAngleSensorReadingChangedEventArgs*>>
{
    static const wchar_t* z_get_rc_name_impl()
    {
        return L"Windows.Foundation.TypedEventHandler`2<Windows.Devices.Sensors.HingeAngleSensor, Windows.Devices.Sensors.HingeAngleSensorReadingChangedEventArgs>";
    }
};
// Define a typedef for the parameterized interface specialization's mangled name.
// This allows code which uses the mangled name for the parameterized interface to access the
// correct parameterized interface specialization.
typedef ITypedEventHandler<ABI::Windows::Devices::Sensors::HingeAngleSensor*, ABI::Windows::Devices::Sensors::HingeAngleSensorReadingChangedEventArgs*> __FITypedEventHandler_2_Windows__CDevices__CSensors__CHingeAngleSensor_Windows__CDevices__CSensors__CHingeAngleSensorReadingChangedEventArgs_t;
#define __FITypedEventHandler_2_Windows__CDevices__CSensors__CHingeAngleSensor_Windows__CDevices__CSensors__CHingeAngleSensorReadingChangedEventArgs ABI::Windows::Foundation::__FITypedEventHandler_2_Windows__CDevices__CSensors__CHingeAngleSensor_Windows__CDevices__CSensors__CHingeAngleSensorReadingChangedEventArgs_t
/* Foundation */ } /* Windows */ } /* ABI */ }

#endif // !defined(RO_NO_TEMPLATE_NAME)
#endif /* DEF___FITypedEventHandler_2_Windows__CDevices__CSensors__CHingeAngleSensor_Windows__CDevices__CSensors__CHingeAngleSensorReadingChangedEventArgs_USE */

#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x70000
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x70000

namespace ABI {
    namespace Windows {
        namespace Devices {
            namespace Sensors {
                class InclinometerReadingChangedEventArgs;
            } /* Sensors */
        } /* Devices */
    } /* Windows */
} /* ABI */

#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

#ifndef DEF___FITypedEventHandler_2_Windows__CDevices__CSensors__CInclinometer_Windows__CDevices__CSensors__CInclinometerReadingChangedEventArgs_USE
#define DEF___FITypedEventHandler_2_Windows__CDevices__CSensors__CInclinometer_Windows__CDevices__CSensors__CInclinometerReadingChangedEventArgs_USE
#if !defined(RO_NO_TEMPLATE_NAME)
namespace ABI { namespace Windows { namespace Foundation {
template <>
struct __declspec(uuid("6f3b411f-d147-59f1-bbe4-7bec396c7b6e"))
ITypedEventHandler<ABI::Windows::Devices::Sensors::Inclinometer*, ABI::Windows::Devices::Sensors::InclinometerReadingChangedEventArgs*> : ITypedEventHandler_impl<ABI::Windows::Foundation::Internal::AggregateType<ABI::Windows::Devices::Sensors::Inclinometer*, ABI::Windows::Devices::Sensors::IInclinometer*>, ABI::Windows::Foundation::Internal::AggregateType<ABI::Windows::Devices::Sensors::InclinometerReadingChangedEventArgs*, ABI::Windows::Devices::Sensors::IInclinometerReadingChangedEventArgs*>>
{
    static const wchar_t* z_get_rc_name_impl()
    {
        return L"Windows.Foundation.TypedEventHandler`2<Windows.Devices.Sensors.Inclinometer, Windows.Devices.Sensors.InclinometerReadingChangedEventArgs>";
    }
};
// Define a typedef for the parameterized interface specialization's mangled name.
// This allows code which uses the mangled name for the parameterized interface to access the
// correct parameterized interface specialization.
typedef ITypedEventHandler<ABI::Windows::Devices::Sensors::Inclinometer*, ABI::Windows::Devices::Sensors::InclinometerReadingChangedEventArgs*> __FITypedEventHandler_2_Windows__CDevices__CSensors__CInclinometer_Windows__CDevices__CSensors__CInclinometerReadingChangedEventArgs_t;
#define __FITypedEventHandler_2_Windows__CDevices__CSensors__CInclinometer_Windows__CDevices__CSensors__CInclinometerReadingChangedEventArgs ABI::Windows::Foundation::__FITypedEventHandler_2_Windows__CDevices__CSensors__CInclinometer_Windows__CDevices__CSensors__CInclinometerReadingChangedEventArgs_t
/* Foundation */ } /* Windows */ } /* ABI */ }

#endif // !defined(RO_NO_TEMPLATE_NAME)
#endif /* DEF___FITypedEventHandler_2_Windows__CDevices__CSensors__CInclinometer_Windows__CDevices__CSensors__CInclinometerReadingChangedEventArgs_USE */

#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

namespace ABI {
    namespace Windows {
        namespace Devices {
            namespace Sensors {
                class LightSensorReadingChangedEventArgs;
            } /* Sensors */
        } /* Devices */
    } /* Windows */
} /* ABI */

#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

#ifndef DEF___FITypedEventHandler_2_Windows__CDevices__CSensors__CLightSensor_Windows__CDevices__CSensors__CLightSensorReadingChangedEventArgs_USE
#define DEF___FITypedEventHandler_2_Windows__CDevices__CSensors__CLightSensor_Windows__CDevices__CSensors__CLightSensorReadingChangedEventArgs_USE
#if !defined(RO_NO_TEMPLATE_NAME)
namespace ABI { namespace Windows { namespace Foundation {
template <>
struct __declspec(uuid("1ecf183a-9f0a-5f73-9225-5a33eab5594f"))
ITypedEventHandler<ABI::Windows::Devices::Sensors::LightSensor*, ABI::Windows::Devices::Sensors::LightSensorReadingChangedEventArgs*> : ITypedEventHandler_impl<ABI::Windows::Foundation::Internal::AggregateType<ABI::Windows::Devices::Sensors::LightSensor*, ABI::Windows::Devices::Sensors::ILightSensor*>, ABI::Windows::Foundation::Internal::AggregateType<ABI::Windows::Devices::Sensors::LightSensorReadingChangedEventArgs*, ABI::Windows::Devices::Sensors::ILightSensorReadingChangedEventArgs*>>
{
    static const wchar_t* z_get_rc_name_impl()
    {
        return L"Windows.Foundation.TypedEventHandler`2<Windows.Devices.Sensors.LightSensor, Windows.Devices.Sensors.LightSensorReadingChangedEventArgs>";
    }
};
// Define a typedef for the parameterized interface specialization's mangled name.
// This allows code which uses the mangled name for the parameterized interface to access the
// correct parameterized interface specialization.
typedef ITypedEventHandler<ABI::Windows::Devices::Sensors::LightSensor*, ABI::Windows::Devices::Sensors::LightSensorReadingChangedEventArgs*> __FITypedEventHandler_2_Windows__CDevices__CSensors__CLightSensor_Windows__CDevices__CSensors__CLightSensorReadingChangedEventArgs_t;
#define __FITypedEventHandler_2_Windows__CDevices__CSensors__CLightSensor_Windows__CDevices__CSensors__CLightSensorReadingChangedEventArgs ABI::Windows::Foundation::__FITypedEventHandler_2_Windows__CDevices__CSensors__CLightSensor_Windows__CDevices__CSensors__CLightSensorReadingChangedEventArgs_t
/* Foundation */ } /* Windows */ } /* ABI */ }

#endif // !defined(RO_NO_TEMPLATE_NAME)
#endif /* DEF___FITypedEventHandler_2_Windows__CDevices__CSensors__CLightSensor_Windows__CDevices__CSensors__CLightSensorReadingChangedEventArgs_USE */

#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

namespace ABI {
    namespace Windows {
        namespace Devices {
            namespace Sensors {
                class MagnetometerReadingChangedEventArgs;
            } /* Sensors */
        } /* Devices */
    } /* Windows */
} /* ABI */

#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

#ifndef DEF___FITypedEventHandler_2_Windows__CDevices__CSensors__CMagnetometer_Windows__CDevices__CSensors__CMagnetometerReadingChangedEventArgs_USE
#define DEF___FITypedEventHandler_2_Windows__CDevices__CSensors__CMagnetometer_Windows__CDevices__CSensors__CMagnetometerReadingChangedEventArgs_USE
#if !defined(RO_NO_TEMPLATE_NAME)
namespace ABI { namespace Windows { namespace Foundation {
template <>
struct __declspec(uuid("f9a0da76-c4fd-50ab-98b6-bfd26d6d3d82"))
ITypedEventHandler<ABI::Windows::Devices::Sensors::Magnetometer*, ABI::Windows::Devices::Sensors::MagnetometerReadingChangedEventArgs*> : ITypedEventHandler_impl<ABI::Windows::Foundation::Internal::AggregateType<ABI::Windows::Devices::Sensors::Magnetometer*, ABI::Windows::Devices::Sensors::IMagnetometer*>, ABI::Windows::Foundation::Internal::AggregateType<ABI::Windows::Devices::Sensors::MagnetometerReadingChangedEventArgs*, ABI::Windows::Devices::Sensors::IMagnetometerReadingChangedEventArgs*>>
{
    static const wchar_t* z_get_rc_name_impl()
    {
        return L"Windows.Foundation.TypedEventHandler`2<Windows.Devices.Sensors.Magnetometer, Windows.Devices.Sensors.MagnetometerReadingChangedEventArgs>";
    }
};
// Define a typedef for the parameterized interface specialization's mangled name.
// This allows code which uses the mangled name for the parameterized interface to access the
// correct parameterized interface specialization.
typedef ITypedEventHandler<ABI::Windows::Devices::Sensors::Magnetometer*, ABI::Windows::Devices::Sensors::MagnetometerReadingChangedEventArgs*> __FITypedEventHandler_2_Windows__CDevices__CSensors__CMagnetometer_Windows__CDevices__CSensors__CMagnetometerReadingChangedEventArgs_t;
#define __FITypedEventHandler_2_Windows__CDevices__CSensors__CMagnetometer_Windows__CDevices__CSensors__CMagnetometerReadingChangedEventArgs ABI::Windows::Foundation::__FITypedEventHandler_2_Windows__CDevices__CSensors__CMagnetometer_Windows__CDevices__CSensors__CMagnetometerReadingChangedEventArgs_t
/* Foundation */ } /* Windows */ } /* ABI */ }

#endif // !defined(RO_NO_TEMPLATE_NAME)
#endif /* DEF___FITypedEventHandler_2_Windows__CDevices__CSensors__CMagnetometer_Windows__CDevices__CSensors__CMagnetometerReadingChangedEventArgs_USE */

#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

namespace ABI {
    namespace Windows {
        namespace Devices {
            namespace Sensors {
                class OrientationSensorReadingChangedEventArgs;
            } /* Sensors */
        } /* Devices */
    } /* Windows */
} /* ABI */

#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

#ifndef DEF___FITypedEventHandler_2_Windows__CDevices__CSensors__COrientationSensor_Windows__CDevices__CSensors__COrientationSensorReadingChangedEventArgs_USE
#define DEF___FITypedEventHandler_2_Windows__CDevices__CSensors__COrientationSensor_Windows__CDevices__CSensors__COrientationSensorReadingChangedEventArgs_USE
#if !defined(RO_NO_TEMPLATE_NAME)
namespace ABI { namespace Windows { namespace Foundation {
template <>
struct __declspec(uuid("91ae0c43-e1f7-577d-a161-8aaf275eb927"))
ITypedEventHandler<ABI::Windows::Devices::Sensors::OrientationSensor*, ABI::Windows::Devices::Sensors::OrientationSensorReadingChangedEventArgs*> : ITypedEventHandler_impl<ABI::Windows::Foundation::Internal::AggregateType<ABI::Windows::Devices::Sensors::OrientationSensor*, ABI::Windows::Devices::Sensors::IOrientationSensor*>, ABI::Windows::Foundation::Internal::AggregateType<ABI::Windows::Devices::Sensors::OrientationSensorReadingChangedEventArgs*, ABI::Windows::Devices::Sensors::IOrientationSensorReadingChangedEventArgs*>>
{
    static const wchar_t* z_get_rc_name_impl()
    {
        return L"Windows.Foundation.TypedEventHandler`2<Windows.Devices.Sensors.OrientationSensor, Windows.Devices.Sensors.OrientationSensorReadingChangedEventArgs>";
    }
};
// Define a typedef for the parameterized interface specialization's mangled name.
// This allows code which uses the mangled name for the parameterized interface to access the
// correct parameterized interface specialization.
typedef ITypedEventHandler<ABI::Windows::Devices::Sensors::OrientationSensor*, ABI::Windows::Devices::Sensors::OrientationSensorReadingChangedEventArgs*> __FITypedEventHandler_2_Windows__CDevices__CSensors__COrientationSensor_Windows__CDevices__CSensors__COrientationSensorReadingChangedEventArgs_t;
#define __FITypedEventHandler_2_Windows__CDevices__CSensors__COrientationSensor_Windows__CDevices__CSensors__COrientationSensorReadingChangedEventArgs ABI::Windows::Foundation::__FITypedEventHandler_2_Windows__CDevices__CSensors__COrientationSensor_Windows__CDevices__CSensors__COrientationSensorReadingChangedEventArgs_t
/* Foundation */ } /* Windows */ } /* ABI */ }

#endif // !defined(RO_NO_TEMPLATE_NAME)
#endif /* DEF___FITypedEventHandler_2_Windows__CDevices__CSensors__COrientationSensor_Windows__CDevices__CSensors__COrientationSensorReadingChangedEventArgs_USE */

#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

namespace ABI {
    namespace Windows {
        namespace Devices {
            namespace Sensors {
                class PedometerReadingChangedEventArgs;
            } /* Sensors */
        } /* Devices */
    } /* Windows */
} /* ABI */

#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

#ifndef DEF___FITypedEventHandler_2_Windows__CDevices__CSensors__CPedometer_Windows__CDevices__CSensors__CPedometerReadingChangedEventArgs_USE
#define DEF___FITypedEventHandler_2_Windows__CDevices__CSensors__CPedometer_Windows__CDevices__CSensors__CPedometerReadingChangedEventArgs_USE
#if !defined(RO_NO_TEMPLATE_NAME)
namespace ABI { namespace Windows { namespace Foundation {
template <>
struct __declspec(uuid("dcd47693-aad5-5b3c-9c8d-140b8bc2122b"))
ITypedEventHandler<ABI::Windows::Devices::Sensors::Pedometer*, ABI::Windows::Devices::Sensors::PedometerReadingChangedEventArgs*> : ITypedEventHandler_impl<ABI::Windows::Foundation::Internal::AggregateType<ABI::Windows::Devices::Sensors::Pedometer*, ABI::Windows::Devices::Sensors::IPedometer*>, ABI::Windows::Foundation::Internal::AggregateType<ABI::Windows::Devices::Sensors::PedometerReadingChangedEventArgs*, ABI::Windows::Devices::Sensors::IPedometerReadingChangedEventArgs*>>
{
    static const wchar_t* z_get_rc_name_impl()
    {
        return L"Windows.Foundation.TypedEventHandler`2<Windows.Devices.Sensors.Pedometer, Windows.Devices.Sensors.PedometerReadingChangedEventArgs>";
    }
};
// Define a typedef for the parameterized interface specialization's mangled name.
// This allows code which uses the mangled name for the parameterized interface to access the
// correct parameterized interface specialization.
typedef ITypedEventHandler<ABI::Windows::Devices::Sensors::Pedometer*, ABI::Windows::Devices::Sensors::PedometerReadingChangedEventArgs*> __FITypedEventHandler_2_Windows__CDevices__CSensors__CPedometer_Windows__CDevices__CSensors__CPedometerReadingChangedEventArgs_t;
#define __FITypedEventHandler_2_Windows__CDevices__CSensors__CPedometer_Windows__CDevices__CSensors__CPedometerReadingChangedEventArgs ABI::Windows::Foundation::__FITypedEventHandler_2_Windows__CDevices__CSensors__CPedometer_Windows__CDevices__CSensors__CPedometerReadingChangedEventArgs_t
/* Foundation */ } /* Windows */ } /* ABI */ }

#endif // !defined(RO_NO_TEMPLATE_NAME)
#endif /* DEF___FITypedEventHandler_2_Windows__CDevices__CSensors__CPedometer_Windows__CDevices__CSensors__CPedometerReadingChangedEventArgs_USE */

#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

namespace ABI {
    namespace Windows {
        namespace Devices {
            namespace Sensors {
                class ProximitySensor;
            } /* Sensors */
        } /* Devices */
    } /* Windows */
} /* ABI */

namespace ABI {
    namespace Windows {
        namespace Devices {
            namespace Sensors {
                class ProximitySensorReadingChangedEventArgs;
            } /* Sensors */
        } /* Devices */
    } /* Windows */
} /* ABI */

#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

#ifndef DEF___FITypedEventHandler_2_Windows__CDevices__CSensors__CProximitySensor_Windows__CDevices__CSensors__CProximitySensorReadingChangedEventArgs_USE
#define DEF___FITypedEventHandler_2_Windows__CDevices__CSensors__CProximitySensor_Windows__CDevices__CSensors__CProximitySensorReadingChangedEventArgs_USE
#if !defined(RO_NO_TEMPLATE_NAME)
namespace ABI { namespace Windows { namespace Foundation {
template <>
struct __declspec(uuid("9f7e222b-892a-5e68-b08a-10384b5f92b9"))
ITypedEventHandler<ABI::Windows::Devices::Sensors::ProximitySensor*, ABI::Windows::Devices::Sensors::ProximitySensorReadingChangedEventArgs*> : ITypedEventHandler_impl<ABI::Windows::Foundation::Internal::AggregateType<ABI::Windows::Devices::Sensors::ProximitySensor*, ABI::Windows::Devices::Sensors::IProximitySensor*>, ABI::Windows::Foundation::Internal::AggregateType<ABI::Windows::Devices::Sensors::ProximitySensorReadingChangedEventArgs*, ABI::Windows::Devices::Sensors::IProximitySensorReadingChangedEventArgs*>>
{
    static const wchar_t* z_get_rc_name_impl()
    {
        return L"Windows.Foundation.TypedEventHandler`2<Windows.Devices.Sensors.ProximitySensor, Windows.Devices.Sensors.ProximitySensorReadingChangedEventArgs>";
    }
};
// Define a typedef for the parameterized interface specialization's mangled name.
// This allows code which uses the mangled name for the parameterized interface to access the
// correct parameterized interface specialization.
typedef ITypedEventHandler<ABI::Windows::Devices::Sensors::ProximitySensor*, ABI::Windows::Devices::Sensors::ProximitySensorReadingChangedEventArgs*> __FITypedEventHandler_2_Windows__CDevices__CSensors__CProximitySensor_Windows__CDevices__CSensors__CProximitySensorReadingChangedEventArgs_t;
#define __FITypedEventHandler_2_Windows__CDevices__CSensors__CProximitySensor_Windows__CDevices__CSensors__CProximitySensorReadingChangedEventArgs ABI::Windows::Foundation::__FITypedEventHandler_2_Windows__CDevices__CSensors__CProximitySensor_Windows__CDevices__CSensors__CProximitySensorReadingChangedEventArgs_t
/* Foundation */ } /* Windows */ } /* ABI */ }

#endif // !defined(RO_NO_TEMPLATE_NAME)
#endif /* DEF___FITypedEventHandler_2_Windows__CDevices__CSensors__CProximitySensor_Windows__CDevices__CSensors__CProximitySensorReadingChangedEventArgs_USE */

#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

namespace ABI {
    namespace Windows {
        namespace Devices {
            namespace Sensors {
                class SimpleOrientationSensorOrientationChangedEventArgs;
            } /* Sensors */
        } /* Devices */
    } /* Windows */
} /* ABI */

#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

#ifndef DEF___FITypedEventHandler_2_Windows__CDevices__CSensors__CSimpleOrientationSensor_Windows__CDevices__CSensors__CSimpleOrientationSensorOrientationChangedEventArgs_USE
#define DEF___FITypedEventHandler_2_Windows__CDevices__CSensors__CSimpleOrientationSensor_Windows__CDevices__CSensors__CSimpleOrientationSensorOrientationChangedEventArgs_USE
#if !defined(RO_NO_TEMPLATE_NAME)
namespace ABI { namespace Windows { namespace Foundation {
template <>
struct __declspec(uuid("92437fa7-ea7b-5fc5-8ecf-1b911bea2bfc"))
ITypedEventHandler<ABI::Windows::Devices::Sensors::SimpleOrientationSensor*, ABI::Windows::Devices::Sensors::SimpleOrientationSensorOrientationChangedEventArgs*> : ITypedEventHandler_impl<ABI::Windows::Foundation::Internal::AggregateType<ABI::Windows::Devices::Sensors::SimpleOrientationSensor*, ABI::Windows::Devices::Sensors::ISimpleOrientationSensor*>, ABI::Windows::Foundation::Internal::AggregateType<ABI::Windows::Devices::Sensors::SimpleOrientationSensorOrientationChangedEventArgs*, ABI::Windows::Devices::Sensors::ISimpleOrientationSensorOrientationChangedEventArgs*>>
{
    static const wchar_t* z_get_rc_name_impl()
    {
        return L"Windows.Foundation.TypedEventHandler`2<Windows.Devices.Sensors.SimpleOrientationSensor, Windows.Devices.Sensors.SimpleOrientationSensorOrientationChangedEventArgs>";
    }
};
// Define a typedef for the parameterized interface specialization's mangled name.
// This allows code which uses the mangled name for the parameterized interface to access the
// correct parameterized interface specialization.
typedef ITypedEventHandler<ABI::Windows::Devices::Sensors::SimpleOrientationSensor*, ABI::Windows::Devices::Sensors::SimpleOrientationSensorOrientationChangedEventArgs*> __FITypedEventHandler_2_Windows__CDevices__CSensors__CSimpleOrientationSensor_Windows__CDevices__CSensors__CSimpleOrientationSensorOrientationChangedEventArgs_t;
#define __FITypedEventHandler_2_Windows__CDevices__CSensors__CSimpleOrientationSensor_Windows__CDevices__CSensors__CSimpleOrientationSensorOrientationChangedEventArgs ABI::Windows::Foundation::__FITypedEventHandler_2_Windows__CDevices__CSensors__CSimpleOrientationSensor_Windows__CDevices__CSensors__CSimpleOrientationSensorOrientationChangedEventArgs_t
/* Foundation */ } /* Windows */ } /* ABI */ }

#endif // !defined(RO_NO_TEMPLATE_NAME)
#endif /* DEF___FITypedEventHandler_2_Windows__CDevices__CSensors__CSimpleOrientationSensor_Windows__CDevices__CSensors__CSimpleOrientationSensorOrientationChangedEventArgs_USE */

#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

namespace ABI {
    namespace Windows {
        namespace Foundation {
            typedef struct DateTime DateTime;
        } /* Foundation */
    } /* Windows */
} /* ABI */

#ifndef ____x_ABI_CWindows_CFoundation_CIClosable_FWD_DEFINED__
#define ____x_ABI_CWindows_CFoundation_CIClosable_FWD_DEFINED__
namespace ABI {
    namespace Windows {
        namespace Foundation {
            interface IClosable;
        } /* Foundation */
    } /* Windows */
} /* ABI */
#define __x_ABI_CWindows_CFoundation_CIClosable ABI::Windows::Foundation::IClosable

#endif // ____x_ABI_CWindows_CFoundation_CIClosable_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CFoundation_CIPropertyValue_FWD_DEFINED__
#define ____x_ABI_CWindows_CFoundation_CIPropertyValue_FWD_DEFINED__
namespace ABI {
    namespace Windows {
        namespace Foundation {
            interface IPropertyValue;
        } /* Foundation */
    } /* Windows */
} /* ABI */
#define __x_ABI_CWindows_CFoundation_CIPropertyValue ABI::Windows::Foundation::IPropertyValue

#endif // ____x_ABI_CWindows_CFoundation_CIPropertyValue_FWD_DEFINED__

namespace ABI {
    namespace Windows {
        namespace Graphics {
            namespace Display {
                typedef enum DisplayOrientations : unsigned int DisplayOrientations;
            } /* Display */
        } /* Graphics */
    } /* Windows */
} /* ABI */

namespace ABI {
    namespace Windows {
        namespace Devices {
            namespace Sensors {
                typedef enum AccelerometerReadingType : int AccelerometerReadingType;
            } /* Sensors */
        } /* Devices */
    } /* Windows */
} /* ABI */

namespace ABI {
    namespace Windows {
        namespace Devices {
            namespace Sensors {
                typedef enum ActivitySensorReadingConfidence : int ActivitySensorReadingConfidence;
            } /* Sensors */
        } /* Devices */
    } /* Windows */
} /* ABI */

namespace ABI {
    namespace Windows {
        namespace Devices {
            namespace Sensors {
                typedef enum MagnetometerAccuracy : int MagnetometerAccuracy;
            } /* Sensors */
        } /* Devices */
    } /* Windows */
} /* ABI */

namespace ABI {
    namespace Windows {
        namespace Devices {
            namespace Sensors {
                typedef enum SensorOptimizationGoal : int SensorOptimizationGoal;
            } /* Sensors */
        } /* Devices */
    } /* Windows */
} /* ABI */

namespace ABI {
    namespace Windows {
        namespace Devices {
            namespace Sensors {
                typedef enum SensorReadingType : int SensorReadingType;
            } /* Sensors */
        } /* Devices */
    } /* Windows */
} /* ABI */

namespace ABI {
    namespace Windows {
        namespace Devices {
            namespace Sensors {
                typedef enum SensorType : int SensorType;
            } /* Sensors */
        } /* Devices */
    } /* Windows */
} /* ABI */

namespace ABI {
    namespace Windows {
        namespace Devices {
            namespace Sensors {
                typedef enum SimpleOrientation : int SimpleOrientation;
            } /* Sensors */
        } /* Devices */
    } /* Windows */
} /* ABI */

namespace ABI {
    namespace Windows {
        namespace Devices {
            namespace Sensors {
                class AccelerometerDataThreshold;
            } /* Sensors */
        } /* Devices */
    } /* Windows */
} /* ABI */

namespace ABI {
    namespace Windows {
        namespace Devices {
            namespace Sensors {
                class AccelerometerReading;
            } /* Sensors */
        } /* Devices */
    } /* Windows */
} /* ABI */

namespace ABI {
    namespace Windows {
        namespace Devices {
            namespace Sensors {
                class AltimeterReading;
            } /* Sensors */
        } /* Devices */
    } /* Windows */
} /* ABI */

namespace ABI {
    namespace Windows {
        namespace Devices {
            namespace Sensors {
                class BarometerDataThreshold;
            } /* Sensors */
        } /* Devices */
    } /* Windows */
} /* ABI */

namespace ABI {
    namespace Windows {
        namespace Devices {
            namespace Sensors {
                class BarometerReading;
            } /* Sensors */
        } /* Devices */
    } /* Windows */
} /* ABI */

namespace ABI {
    namespace Windows {
        namespace Devices {
            namespace Sensors {
                class CompassDataThreshold;
            } /* Sensors */
        } /* Devices */
    } /* Windows */
} /* ABI */

namespace ABI {
    namespace Windows {
        namespace Devices {
            namespace Sensors {
                class CompassReading;
            } /* Sensors */
        } /* Devices */
    } /* Windows */
} /* ABI */

namespace ABI {
    namespace Windows {
        namespace Devices {
            namespace Sensors {
                class GyrometerDataThreshold;
            } /* Sensors */
        } /* Devices */
    } /* Windows */
} /* ABI */

namespace ABI {
    namespace Windows {
        namespace Devices {
            namespace Sensors {
                class GyrometerReading;
            } /* Sensors */
        } /* Devices */
    } /* Windows */
} /* ABI */

namespace ABI {
    namespace Windows {
        namespace Devices {
            namespace Sensors {
                class InclinometerDataThreshold;
            } /* Sensors */
        } /* Devices */
    } /* Windows */
} /* ABI */

namespace ABI {
    namespace Windows {
        namespace Devices {
            namespace Sensors {
                class InclinometerReading;
            } /* Sensors */
        } /* Devices */
    } /* Windows */
} /* ABI */

namespace ABI {
    namespace Windows {
        namespace Devices {
            namespace Sensors {
                class LightSensorDataThreshold;
            } /* Sensors */
        } /* Devices */
    } /* Windows */
} /* ABI */

namespace ABI {
    namespace Windows {
        namespace Devices {
            namespace Sensors {
                class LightSensorReading;
            } /* Sensors */
        } /* Devices */
    } /* Windows */
} /* ABI */

namespace ABI {
    namespace Windows {
        namespace Devices {
            namespace Sensors {
                class MagnetometerDataThreshold;
            } /* Sensors */
        } /* Devices */
    } /* Windows */
} /* ABI */

namespace ABI {
    namespace Windows {
        namespace Devices {
            namespace Sensors {
                class MagnetometerReading;
            } /* Sensors */
        } /* Devices */
    } /* Windows */
} /* ABI */

namespace ABI {
    namespace Windows {
        namespace Devices {
            namespace Sensors {
                class OrientationSensorReading;
            } /* Sensors */
        } /* Devices */
    } /* Windows */
} /* ABI */

namespace ABI {
    namespace Windows {
        namespace Devices {
            namespace Sensors {
                class PedometerDataThreshold;
            } /* Sensors */
        } /* Devices */
    } /* Windows */
} /* ABI */

namespace ABI {
    namespace Windows {
        namespace Devices {
            namespace Sensors {
                class ProximitySensorDataThreshold;
            } /* Sensors */
        } /* Devices */
    } /* Windows */
} /* ABI */

namespace ABI {
    namespace Windows {
        namespace Devices {
            namespace Sensors {
                class ProximitySensorDisplayOnOffController;
            } /* Sensors */
        } /* Devices */
    } /* Windows */
} /* ABI */

namespace ABI {
    namespace Windows {
        namespace Devices {
            namespace Sensors {
                class SensorDataThresholdTriggerDetails;
            } /* Sensors */
        } /* Devices */
    } /* Windows */
} /* ABI */

namespace ABI {
    namespace Windows {
        namespace Devices {
            namespace Sensors {
                class SensorQuaternion;
            } /* Sensors */
        } /* Devices */
    } /* Windows */
} /* ABI */

namespace ABI {
    namespace Windows {
        namespace Devices {
            namespace Sensors {
                class SensorRotationMatrix;
            } /* Sensors */
        } /* Devices */
    } /* Windows */
} /* ABI */

/*
 *
 * Struct Windows.Devices.Sensors.AccelerometerReadingType
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 3.0
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x30000
namespace ABI {
    namespace Windows {
        namespace Devices {
            namespace Sensors {
                enum AccelerometerReadingType : int
                {
                    AccelerometerReadingType_Standard = 0,
                    AccelerometerReadingType_Linear = 1,
                    AccelerometerReadingType_Gravity = 2,
                };
            } /* Sensors */
        } /* Devices */
    } /* Windows */
} /* ABI */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x30000

/*
 *
 * Struct Windows.Devices.Sensors.ActivitySensorReadingConfidence
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
namespace ABI {
    namespace Windows {
        namespace Devices {
            namespace Sensors {
                enum ActivitySensorReadingConfidence : int
                {
                    ActivitySensorReadingConfidence_High = 0,
                    ActivitySensorReadingConfidence_Low = 1,
                };
            } /* Sensors */
        } /* Devices */
    } /* Windows */
} /* ABI */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Struct Windows.Devices.Sensors.ActivityType
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
namespace ABI {
    namespace Windows {
        namespace Devices {
            namespace Sensors {
                enum ActivityType : int
                {
                    ActivityType_Unknown = 0,
                    ActivityType_Idle = 1,
                    ActivityType_Stationary = 2,
                    ActivityType_Fidgeting = 3,
                    ActivityType_Walking = 4,
                    ActivityType_Running = 5,
                    ActivityType_InVehicle = 6,
                    ActivityType_Biking = 7,
                };
            } /* Sensors */
        } /* Devices */
    } /* Windows */
} /* ABI */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Struct Windows.Devices.Sensors.MagnetometerAccuracy
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
namespace ABI {
    namespace Windows {
        namespace Devices {
            namespace Sensors {
                enum MagnetometerAccuracy : int
                {
                    MagnetometerAccuracy_Unknown = 0,
                    MagnetometerAccuracy_Unreliable = 1,
                    MagnetometerAccuracy_Approximate = 2,
                    MagnetometerAccuracy_High = 3,
                };
            } /* Sensors */
        } /* Devices */
    } /* Windows */
} /* ABI */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Struct Windows.Devices.Sensors.PedometerStepKind
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
namespace ABI {
    namespace Windows {
        namespace Devices {
            namespace Sensors {
                enum PedometerStepKind : int
                {
                    PedometerStepKind_Unknown = 0,
                    PedometerStepKind_Walking = 1,
                    PedometerStepKind_Running = 2,
                };
            } /* Sensors */
        } /* Devices */
    } /* Windows */
} /* ABI */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Struct Windows.Devices.Sensors.SensorOptimizationGoal
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 3.0
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x30000
namespace ABI {
    namespace Windows {
        namespace Devices {
            namespace Sensors {
                enum SensorOptimizationGoal : int
                {
                    SensorOptimizationGoal_Precision = 0,
                    SensorOptimizationGoal_PowerEfficiency = 1,
                };
            } /* Sensors */
        } /* Devices */
    } /* Windows */
} /* ABI */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x30000

/*
 *
 * Struct Windows.Devices.Sensors.SensorReadingType
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
namespace ABI {
    namespace Windows {
        namespace Devices {
            namespace Sensors {
                enum SensorReadingType : int
                {
                    SensorReadingType_Absolute = 0,
                    SensorReadingType_Relative = 1,
                };
            } /* Sensors */
        } /* Devices */
    } /* Windows */
} /* ABI */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Struct Windows.Devices.Sensors.SensorType
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 2.0
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x20000
namespace ABI {
    namespace Windows {
        namespace Devices {
            namespace Sensors {
                enum SensorType : int
                {
                    SensorType_Accelerometer = 0,
                    SensorType_ActivitySensor = 1,
                    SensorType_Barometer = 2,
                    SensorType_Compass = 3,
                    SensorType_CustomSensor = 4,
                    SensorType_Gyroscope = 5,
                    SensorType_ProximitySensor = 6,
                    SensorType_Inclinometer = 7,
                    SensorType_LightSensor = 8,
                    SensorType_OrientationSensor = 9,
                    SensorType_Pedometer = 10,
                    SensorType_RelativeInclinometer = 11,
                    SensorType_RelativeOrientationSensor = 12,
                    SensorType_SimpleOrientationSensor = 13,
                };
            } /* Sensors */
        } /* Devices */
    } /* Windows */
} /* ABI */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x20000

/*
 *
 * Struct Windows.Devices.Sensors.SimpleOrientation
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
namespace ABI {
    namespace Windows {
        namespace Devices {
            namespace Sensors {
                enum SimpleOrientation : int
                {
                    SimpleOrientation_NotRotated = 0,
                    SimpleOrientation_Rotated90DegreesCounterclockwise = 1,
                    SimpleOrientation_Rotated180DegreesCounterclockwise = 2,
                    SimpleOrientation_Rotated270DegreesCounterclockwise = 3,
                    SimpleOrientation_Faceup = 4,
                    SimpleOrientation_Facedown = 5,
                };
            } /* Sensors */
        } /* Devices */
    } /* Windows */
} /* ABI */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Interface Windows.Devices.Sensors.IAccelerometer
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Interface is a part of the implementation of type Windows.Devices.Sensors.Accelerometer
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____x_ABI_CWindows_CDevices_CSensors_CIAccelerometer_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CDevices_CSensors_CIAccelerometer_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Devices_Sensors_IAccelerometer[] = L"Windows.Devices.Sensors.IAccelerometer";
namespace ABI {
    namespace Windows {
        namespace Devices {
            namespace Sensors {
                MIDL_INTERFACE("df184548-2711-4da7-8098-4b82205d3c7d")
                IAccelerometer : public IInspectable
                {
                public:
                    virtual HRESULT STDMETHODCALLTYPE GetCurrentReading(
                        ABI::Windows::Devices::Sensors::IAccelerometerReading** value
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE get_MinimumReportInterval(
                        UINT32* value
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE put_ReportInterval(
                        UINT32 value
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE get_ReportInterval(
                        UINT32* value
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE add_ReadingChanged(
                        __FITypedEventHandler_2_Windows__CDevices__CSensors__CAccelerometer_Windows__CDevices__CSensors__CAccelerometerReadingChangedEventArgs* handler,
                        EventRegistrationToken* token
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE remove_ReadingChanged(
                        EventRegistrationToken token
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE add_Shaken(
                        __FITypedEventHandler_2_Windows__CDevices__CSensors__CAccelerometer_Windows__CDevices__CSensors__CAccelerometerShakenEventArgs* handler,
                        EventRegistrationToken* token
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE remove_Shaken(
                        EventRegistrationToken token
                        ) = 0;
                };

                extern MIDL_CONST_ID IID& IID_IAccelerometer = _uuidof(IAccelerometer);
            } /* Sensors */
        } /* Devices */
    } /* Windows */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CSensors_CIAccelerometer;
#endif /* !defined(____x_ABI_CWindows_CDevices_CSensors_CIAccelerometer_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Interface Windows.Devices.Sensors.IAccelerometer2
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Interface is a part of the implementation of type Windows.Devices.Sensors.Accelerometer
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____x_ABI_CWindows_CDevices_CSensors_CIAccelerometer2_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CDevices_CSensors_CIAccelerometer2_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Devices_Sensors_IAccelerometer2[] = L"Windows.Devices.Sensors.IAccelerometer2";
namespace ABI {
    namespace Windows {
        namespace Devices {
            namespace Sensors {
                MIDL_INTERFACE("e8f092ee-4964-401a-b602-220d7153c60a")
                IAccelerometer2 : public IInspectable
                {
                public:
                    virtual HRESULT STDMETHODCALLTYPE put_ReadingTransform(
                        ABI::Windows::Graphics::Display::DisplayOrientations value
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE get_ReadingTransform(
                        ABI::Windows::Graphics::Display::DisplayOrientations* value
                        ) = 0;
                };

                extern MIDL_CONST_ID IID& IID_IAccelerometer2 = _uuidof(IAccelerometer2);
            } /* Sensors */
        } /* Devices */
    } /* Windows */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CSensors_CIAccelerometer2;
#endif /* !defined(____x_ABI_CWindows_CDevices_CSensors_CIAccelerometer2_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Interface Windows.Devices.Sensors.IAccelerometer3
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Interface is a part of the implementation of type Windows.Devices.Sensors.Accelerometer
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____x_ABI_CWindows_CDevices_CSensors_CIAccelerometer3_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CDevices_CSensors_CIAccelerometer3_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Devices_Sensors_IAccelerometer3[] = L"Windows.Devices.Sensors.IAccelerometer3";
namespace ABI {
    namespace Windows {
        namespace Devices {
            namespace Sensors {
                MIDL_INTERFACE("87e0022a-ed80-49eb-bf8a-a4ea31e5cd84")
                IAccelerometer3 : public IInspectable
                {
                public:
                    virtual HRESULT STDMETHODCALLTYPE put_ReportLatency(
                        UINT32 value
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE get_ReportLatency(
                        UINT32* value
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE get_MaxBatchSize(
                        UINT32* value
                        ) = 0;
                };

                extern MIDL_CONST_ID IID& IID_IAccelerometer3 = _uuidof(IAccelerometer3);
            } /* Sensors */
        } /* Devices */
    } /* Windows */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CSensors_CIAccelerometer3;
#endif /* !defined(____x_ABI_CWindows_CDevices_CSensors_CIAccelerometer3_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Interface Windows.Devices.Sensors.IAccelerometer4
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 3.0
 *
 * Interface is a part of the implementation of type Windows.Devices.Sensors.Accelerometer
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x30000
#if !defined(____x_ABI_CWindows_CDevices_CSensors_CIAccelerometer4_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CDevices_CSensors_CIAccelerometer4_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Devices_Sensors_IAccelerometer4[] = L"Windows.Devices.Sensors.IAccelerometer4";
namespace ABI {
    namespace Windows {
        namespace Devices {
            namespace Sensors {
                MIDL_INTERFACE("1d373c4f-42d3-45b2-8144-ab7fb665eb59")
                IAccelerometer4 : public IInspectable
                {
                public:
                    virtual HRESULT STDMETHODCALLTYPE get_ReadingType(
                        ABI::Windows::Devices::Sensors::AccelerometerReadingType* type
                        ) = 0;
                };

                extern MIDL_CONST_ID IID& IID_IAccelerometer4 = _uuidof(IAccelerometer4);
            } /* Sensors */
        } /* Devices */
    } /* Windows */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CSensors_CIAccelerometer4;
#endif /* !defined(____x_ABI_CWindows_CDevices_CSensors_CIAccelerometer4_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x30000

/*
 *
 * Interface Windows.Devices.Sensors.IAccelerometer5
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 10.0
 *
 * Interface is a part of the implementation of type Windows.Devices.Sensors.Accelerometer
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0xa0000
#if !defined(____x_ABI_CWindows_CDevices_CSensors_CIAccelerometer5_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CDevices_CSensors_CIAccelerometer5_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Devices_Sensors_IAccelerometer5[] = L"Windows.Devices.Sensors.IAccelerometer5";
namespace ABI {
    namespace Windows {
        namespace Devices {
            namespace Sensors {
                MIDL_INTERFACE("7e7e7021-def4-53a6-af43-806fd538edf6")
                IAccelerometer5 : public IInspectable
                {
                public:
                    virtual HRESULT STDMETHODCALLTYPE get_ReportThreshold(
                        ABI::Windows::Devices::Sensors::IAccelerometerDataThreshold** value
                        ) = 0;
                };

                extern MIDL_CONST_ID IID& IID_IAccelerometer5 = _uuidof(IAccelerometer5);
            } /* Sensors */
        } /* Devices */
    } /* Windows */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CSensors_CIAccelerometer5;
#endif /* !defined(____x_ABI_CWindows_CDevices_CSensors_CIAccelerometer5_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0xa0000

/*
 *
 * Interface Windows.Devices.Sensors.IAccelerometerDataThreshold
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 10.0
 *
 * Interface is a part of the implementation of type Windows.Devices.Sensors.AccelerometerDataThreshold
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0xa0000
#if !defined(____x_ABI_CWindows_CDevices_CSensors_CIAccelerometerDataThreshold_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CDevices_CSensors_CIAccelerometerDataThreshold_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Devices_Sensors_IAccelerometerDataThreshold[] = L"Windows.Devices.Sensors.IAccelerometerDataThreshold";
namespace ABI {
    namespace Windows {
        namespace Devices {
            namespace Sensors {
                MIDL_INTERFACE("f92c1b68-6320-5577-879e-9942621c3dd9")
                IAccelerometerDataThreshold : public IInspectable
                {
                public:
                    virtual HRESULT STDMETHODCALLTYPE get_XAxisInGForce(
                        DOUBLE* value
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE put_XAxisInGForce(
                        DOUBLE value
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE get_YAxisInGForce(
                        DOUBLE* value
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE put_YAxisInGForce(
                        DOUBLE value
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE get_ZAxisInGForce(
                        DOUBLE* value
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE put_ZAxisInGForce(
                        DOUBLE value
                        ) = 0;
                };

                extern MIDL_CONST_ID IID& IID_IAccelerometerDataThreshold = _uuidof(IAccelerometerDataThreshold);
            } /* Sensors */
        } /* Devices */
    } /* Windows */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CSensors_CIAccelerometerDataThreshold;
#endif /* !defined(____x_ABI_CWindows_CDevices_CSensors_CIAccelerometerDataThreshold_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0xa0000

/*
 *
 * Interface Windows.Devices.Sensors.IAccelerometerDeviceId
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Interface is a part of the implementation of type Windows.Devices.Sensors.Accelerometer
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____x_ABI_CWindows_CDevices_CSensors_CIAccelerometerDeviceId_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CDevices_CSensors_CIAccelerometerDeviceId_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Devices_Sensors_IAccelerometerDeviceId[] = L"Windows.Devices.Sensors.IAccelerometerDeviceId";
namespace ABI {
    namespace Windows {
        namespace Devices {
            namespace Sensors {
                MIDL_INTERFACE("7eac64a9-97d5-446d-ab5a-917df9b96a2c")
                IAccelerometerDeviceId : public IInspectable
                {
                public:
                    virtual HRESULT STDMETHODCALLTYPE get_DeviceId(
                        HSTRING* value
                        ) = 0;
                };

                extern MIDL_CONST_ID IID& IID_IAccelerometerDeviceId = _uuidof(IAccelerometerDeviceId);
            } /* Sensors */
        } /* Devices */
    } /* Windows */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CSensors_CIAccelerometerDeviceId;
#endif /* !defined(____x_ABI_CWindows_CDevices_CSensors_CIAccelerometerDeviceId_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Interface Windows.Devices.Sensors.IAccelerometerReading
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Interface is a part of the implementation of type Windows.Devices.Sensors.AccelerometerReading
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____x_ABI_CWindows_CDevices_CSensors_CIAccelerometerReading_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CDevices_CSensors_CIAccelerometerReading_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Devices_Sensors_IAccelerometerReading[] = L"Windows.Devices.Sensors.IAccelerometerReading";
namespace ABI {
    namespace Windows {
        namespace Devices {
            namespace Sensors {
                MIDL_INTERFACE("b9fe7acb-d351-40af-8bb6-7aa9ae641fb7")
                IAccelerometerReading : public IInspectable
                {
                public:
                    virtual HRESULT STDMETHODCALLTYPE get_Timestamp(
                        ABI::Windows::Foundation::DateTime* value
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE get_AccelerationX(
                        DOUBLE* value
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE get_AccelerationY(
                        DOUBLE* value
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE get_AccelerationZ(
                        DOUBLE* value
                        ) = 0;
                };

                extern MIDL_CONST_ID IID& IID_IAccelerometerReading = _uuidof(IAccelerometerReading);
            } /* Sensors */
        } /* Devices */
    } /* Windows */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CSensors_CIAccelerometerReading;
#endif /* !defined(____x_ABI_CWindows_CDevices_CSensors_CIAccelerometerReading_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Interface Windows.Devices.Sensors.IAccelerometerReading2
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 5.0
 *
 * Interface is a part of the implementation of type Windows.Devices.Sensors.AccelerometerReading
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x50000
#if !defined(____x_ABI_CWindows_CDevices_CSensors_CIAccelerometerReading2_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CDevices_CSensors_CIAccelerometerReading2_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Devices_Sensors_IAccelerometerReading2[] = L"Windows.Devices.Sensors.IAccelerometerReading2";
namespace ABI {
    namespace Windows {
        namespace Devices {
            namespace Sensors {
                MIDL_INTERFACE("0a864aa2-15ae-4a40-be55-db58d7de7389")
                IAccelerometerReading2 : public IInspectable
                {
                public:
                    virtual HRESULT STDMETHODCALLTYPE get_PerformanceCount(
                        __FIReference_1_Windows__CFoundation__CTimeSpan** value
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE get_Properties(
                        __FIMapView_2_HSTRING_IInspectable** value
                        ) = 0;
                };

                extern MIDL_CONST_ID IID& IID_IAccelerometerReading2 = _uuidof(IAccelerometerReading2);
            } /* Sensors */
        } /* Devices */
    } /* Windows */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CSensors_CIAccelerometerReading2;
#endif /* !defined(____x_ABI_CWindows_CDevices_CSensors_CIAccelerometerReading2_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x50000

/*
 *
 * Interface Windows.Devices.Sensors.IAccelerometerReadingChangedEventArgs
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Interface is a part of the implementation of type Windows.Devices.Sensors.AccelerometerReadingChangedEventArgs
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____x_ABI_CWindows_CDevices_CSensors_CIAccelerometerReadingChangedEventArgs_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CDevices_CSensors_CIAccelerometerReadingChangedEventArgs_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Devices_Sensors_IAccelerometerReadingChangedEventArgs[] = L"Windows.Devices.Sensors.IAccelerometerReadingChangedEventArgs";
namespace ABI {
    namespace Windows {
        namespace Devices {
            namespace Sensors {
                MIDL_INTERFACE("0095c65b-b6ac-475a-9f44-8b32d35a3f25")
                IAccelerometerReadingChangedEventArgs : public IInspectable
                {
                public:
                    virtual HRESULT STDMETHODCALLTYPE get_Reading(
                        ABI::Windows::Devices::Sensors::IAccelerometerReading** value
                        ) = 0;
                };

                extern MIDL_CONST_ID IID& IID_IAccelerometerReadingChangedEventArgs = _uuidof(IAccelerometerReadingChangedEventArgs);
            } /* Sensors */
        } /* Devices */
    } /* Windows */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CSensors_CIAccelerometerReadingChangedEventArgs;
#endif /* !defined(____x_ABI_CWindows_CDevices_CSensors_CIAccelerometerReadingChangedEventArgs_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Interface Windows.Devices.Sensors.IAccelerometerShakenEventArgs
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Interface is a part of the implementation of type Windows.Devices.Sensors.AccelerometerShakenEventArgs
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____x_ABI_CWindows_CDevices_CSensors_CIAccelerometerShakenEventArgs_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CDevices_CSensors_CIAccelerometerShakenEventArgs_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Devices_Sensors_IAccelerometerShakenEventArgs[] = L"Windows.Devices.Sensors.IAccelerometerShakenEventArgs";
namespace ABI {
    namespace Windows {
        namespace Devices {
            namespace Sensors {
                MIDL_INTERFACE("95ff01d1-4a28-4f35-98e8-8178aae4084a")
                IAccelerometerShakenEventArgs : public IInspectable
                {
                public:
                    virtual HRESULT STDMETHODCALLTYPE get_Timestamp(
                        ABI::Windows::Foundation::DateTime* value
                        ) = 0;
                };

                extern MIDL_CONST_ID IID& IID_IAccelerometerShakenEventArgs = _uuidof(IAccelerometerShakenEventArgs);
            } /* Sensors */
        } /* Devices */
    } /* Windows */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CSensors_CIAccelerometerShakenEventArgs;
#endif /* !defined(____x_ABI_CWindows_CDevices_CSensors_CIAccelerometerShakenEventArgs_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Interface Windows.Devices.Sensors.IAccelerometerStatics
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Interface is a part of the implementation of type Windows.Devices.Sensors.Accelerometer
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____x_ABI_CWindows_CDevices_CSensors_CIAccelerometerStatics_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CDevices_CSensors_CIAccelerometerStatics_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Devices_Sensors_IAccelerometerStatics[] = L"Windows.Devices.Sensors.IAccelerometerStatics";
namespace ABI {
    namespace Windows {
        namespace Devices {
            namespace Sensors {
                MIDL_INTERFACE("a5e28b74-5a87-4a2d-becc-0f906ea061dd")
                IAccelerometerStatics : public IInspectable
                {
                public:
                    virtual HRESULT STDMETHODCALLTYPE GetDefault(
                        ABI::Windows::Devices::Sensors::IAccelerometer** result
                        ) = 0;
                };

                extern MIDL_CONST_ID IID& IID_IAccelerometerStatics = _uuidof(IAccelerometerStatics);
            } /* Sensors */
        } /* Devices */
    } /* Windows */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CSensors_CIAccelerometerStatics;
#endif /* !defined(____x_ABI_CWindows_CDevices_CSensors_CIAccelerometerStatics_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Interface Windows.Devices.Sensors.IAccelerometerStatics2
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 3.0
 *
 * Interface is a part of the implementation of type Windows.Devices.Sensors.Accelerometer
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x30000
#if !defined(____x_ABI_CWindows_CDevices_CSensors_CIAccelerometerStatics2_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CDevices_CSensors_CIAccelerometerStatics2_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Devices_Sensors_IAccelerometerStatics2[] = L"Windows.Devices.Sensors.IAccelerometerStatics2";
namespace ABI {
    namespace Windows {
        namespace Devices {
            namespace Sensors {
                MIDL_INTERFACE("c4c4842f-d86b-4685-b2d7-3396f798d57b")
                IAccelerometerStatics2 : public IInspectable
                {
                public:
                    virtual HRESULT STDMETHODCALLTYPE GetDefaultWithAccelerometerReadingType(
                        ABI::Windows::Devices::Sensors::AccelerometerReadingType readingType,
                        ABI::Windows::Devices::Sensors::IAccelerometer** result
                        ) = 0;
                };

                extern MIDL_CONST_ID IID& IID_IAccelerometerStatics2 = _uuidof(IAccelerometerStatics2);
            } /* Sensors */
        } /* Devices */
    } /* Windows */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CSensors_CIAccelerometerStatics2;
#endif /* !defined(____x_ABI_CWindows_CDevices_CSensors_CIAccelerometerStatics2_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x30000

/*
 *
 * Interface Windows.Devices.Sensors.IAccelerometerStatics3
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 5.0
 *
 * Interface is a part of the implementation of type Windows.Devices.Sensors.Accelerometer
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x50000
#if !defined(____x_ABI_CWindows_CDevices_CSensors_CIAccelerometerStatics3_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CDevices_CSensors_CIAccelerometerStatics3_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Devices_Sensors_IAccelerometerStatics3[] = L"Windows.Devices.Sensors.IAccelerometerStatics3";
namespace ABI {
    namespace Windows {
        namespace Devices {
            namespace Sensors {
                MIDL_INTERFACE("9de218cf-455d-4cf3-8200-70e1410340f8")
                IAccelerometerStatics3 : public IInspectable
                {
                public:
                    virtual HRESULT STDMETHODCALLTYPE FromIdAsync(
                        HSTRING deviceId,
                        __FIAsyncOperation_1_Windows__CDevices__CSensors__CAccelerometer** operation
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE GetDeviceSelector(
                        ABI::Windows::Devices::Sensors::AccelerometerReadingType readingType,
                        HSTRING* result
                        ) = 0;
                };

                extern MIDL_CONST_ID IID& IID_IAccelerometerStatics3 = _uuidof(IAccelerometerStatics3);
            } /* Sensors */
        } /* Devices */
    } /* Windows */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CSensors_CIAccelerometerStatics3;
#endif /* !defined(____x_ABI_CWindows_CDevices_CSensors_CIAccelerometerStatics3_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x50000

/*
 *
 * Interface Windows.Devices.Sensors.IActivitySensor
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Interface is a part of the implementation of type Windows.Devices.Sensors.ActivitySensor
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____x_ABI_CWindows_CDevices_CSensors_CIActivitySensor_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CDevices_CSensors_CIActivitySensor_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Devices_Sensors_IActivitySensor[] = L"Windows.Devices.Sensors.IActivitySensor";
namespace ABI {
    namespace Windows {
        namespace Devices {
            namespace Sensors {
                MIDL_INTERFACE("cd7a630c-fb5f-48eb-b09b-a2708d1c61ef")
                IActivitySensor : public IInspectable
                {
                public:
                    virtual HRESULT STDMETHODCALLTYPE GetCurrentReadingAsync(
                        __FIAsyncOperation_1_Windows__CDevices__CSensors__CActivitySensorReading** result
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE get_SubscribedActivities(
                        __FIVector_1_Windows__CDevices__CSensors__CActivityType** value
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE get_PowerInMilliwatts(
                        DOUBLE* value
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE get_DeviceId(
                        HSTRING* value
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE get_SupportedActivities(
                        __FIVectorView_1_Windows__CDevices__CSensors__CActivityType** value
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE get_MinimumReportInterval(
                        UINT32* value
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE add_ReadingChanged(
                        __FITypedEventHandler_2_Windows__CDevices__CSensors__CActivitySensor_Windows__CDevices__CSensors__CActivitySensorReadingChangedEventArgs* handler,
                        EventRegistrationToken* token
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE remove_ReadingChanged(
                        EventRegistrationToken token
                        ) = 0;
                };

                extern MIDL_CONST_ID IID& IID_IActivitySensor = _uuidof(IActivitySensor);
            } /* Sensors */
        } /* Devices */
    } /* Windows */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CSensors_CIActivitySensor;
#endif /* !defined(____x_ABI_CWindows_CDevices_CSensors_CIActivitySensor_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Interface Windows.Devices.Sensors.IActivitySensorReading
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Interface is a part of the implementation of type Windows.Devices.Sensors.ActivitySensorReading
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____x_ABI_CWindows_CDevices_CSensors_CIActivitySensorReading_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CDevices_CSensors_CIActivitySensorReading_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Devices_Sensors_IActivitySensorReading[] = L"Windows.Devices.Sensors.IActivitySensorReading";
namespace ABI {
    namespace Windows {
        namespace Devices {
            namespace Sensors {
                MIDL_INTERFACE("85125a96-1472-40a2-b2ae-e1ef29226c78")
                IActivitySensorReading : public IInspectable
                {
                public:
                    virtual HRESULT STDMETHODCALLTYPE get_Timestamp(
                        ABI::Windows::Foundation::DateTime* value
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE get_Activity(
                        ABI::Windows::Devices::Sensors::ActivityType* value
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE get_Confidence(
                        ABI::Windows::Devices::Sensors::ActivitySensorReadingConfidence* value
                        ) = 0;
                };

                extern MIDL_CONST_ID IID& IID_IActivitySensorReading = _uuidof(IActivitySensorReading);
            } /* Sensors */
        } /* Devices */
    } /* Windows */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CSensors_CIActivitySensorReading;
#endif /* !defined(____x_ABI_CWindows_CDevices_CSensors_CIActivitySensorReading_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Interface Windows.Devices.Sensors.IActivitySensorReadingChangeReport
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Interface is a part of the implementation of type Windows.Devices.Sensors.ActivitySensorReadingChangeReport
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____x_ABI_CWindows_CDevices_CSensors_CIActivitySensorReadingChangeReport_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CDevices_CSensors_CIActivitySensorReadingChangeReport_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Devices_Sensors_IActivitySensorReadingChangeReport[] = L"Windows.Devices.Sensors.IActivitySensorReadingChangeReport";
namespace ABI {
    namespace Windows {
        namespace Devices {
            namespace Sensors {
                MIDL_INTERFACE("4f3c2915-d93b-47bd-960a-f20fb2f322b9")
                IActivitySensorReadingChangeReport : public IInspectable
                {
                public:
                    virtual HRESULT STDMETHODCALLTYPE get_Reading(
                        ABI::Windows::Devices::Sensors::IActivitySensorReading** value
                        ) = 0;
                };

                extern MIDL_CONST_ID IID& IID_IActivitySensorReadingChangeReport = _uuidof(IActivitySensorReadingChangeReport);
            } /* Sensors */
        } /* Devices */
    } /* Windows */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CSensors_CIActivitySensorReadingChangeReport;
#endif /* !defined(____x_ABI_CWindows_CDevices_CSensors_CIActivitySensorReadingChangeReport_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Interface Windows.Devices.Sensors.IActivitySensorReadingChangedEventArgs
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Interface is a part of the implementation of type Windows.Devices.Sensors.ActivitySensorReadingChangedEventArgs
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____x_ABI_CWindows_CDevices_CSensors_CIActivitySensorReadingChangedEventArgs_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CDevices_CSensors_CIActivitySensorReadingChangedEventArgs_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Devices_Sensors_IActivitySensorReadingChangedEventArgs[] = L"Windows.Devices.Sensors.IActivitySensorReadingChangedEventArgs";
namespace ABI {
    namespace Windows {
        namespace Devices {
            namespace Sensors {
                MIDL_INTERFACE("de386717-aeb6-4ec7-946a-d9cc19b951ec")
                IActivitySensorReadingChangedEventArgs : public IInspectable
                {
                public:
                    virtual HRESULT STDMETHODCALLTYPE get_Reading(
                        ABI::Windows::Devices::Sensors::IActivitySensorReading** value
                        ) = 0;
                };

                extern MIDL_CONST_ID IID& IID_IActivitySensorReadingChangedEventArgs = _uuidof(IActivitySensorReadingChangedEventArgs);
            } /* Sensors */
        } /* Devices */
    } /* Windows */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CSensors_CIActivitySensorReadingChangedEventArgs;
#endif /* !defined(____x_ABI_CWindows_CDevices_CSensors_CIActivitySensorReadingChangedEventArgs_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Interface Windows.Devices.Sensors.IActivitySensorStatics
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Interface is a part of the implementation of type Windows.Devices.Sensors.ActivitySensor
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____x_ABI_CWindows_CDevices_CSensors_CIActivitySensorStatics_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CDevices_CSensors_CIActivitySensorStatics_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Devices_Sensors_IActivitySensorStatics[] = L"Windows.Devices.Sensors.IActivitySensorStatics";
namespace ABI {
    namespace Windows {
        namespace Devices {
            namespace Sensors {
                MIDL_INTERFACE("a71e0e9d-ee8b-45d1-b25b-08cc0df92ab6")
                IActivitySensorStatics : public IInspectable
                {
                public:
                    virtual HRESULT STDMETHODCALLTYPE GetDefaultAsync(
                        __FIAsyncOperation_1_Windows__CDevices__CSensors__CActivitySensor** result
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE GetDeviceSelector(
                        HSTRING* value
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE FromIdAsync(
                        HSTRING deviceId,
                        __FIAsyncOperation_1_Windows__CDevices__CSensors__CActivitySensor** result
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE GetSystemHistoryAsync(
                        ABI::Windows::Foundation::DateTime fromTime,
                        __FIAsyncOperation_1___FIVectorView_1_Windows__CDevices__CSensors__CActivitySensorReading** result
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE GetSystemHistoryWithDurationAsync(
                        ABI::Windows::Foundation::DateTime fromTime,
                        ABI::Windows::Foundation::TimeSpan duration,
                        __FIAsyncOperation_1___FIVectorView_1_Windows__CDevices__CSensors__CActivitySensorReading** result
                        ) = 0;
                };

                extern MIDL_CONST_ID IID& IID_IActivitySensorStatics = _uuidof(IActivitySensorStatics);
            } /* Sensors */
        } /* Devices */
    } /* Windows */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CSensors_CIActivitySensorStatics;
#endif /* !defined(____x_ABI_CWindows_CDevices_CSensors_CIActivitySensorStatics_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Interface Windows.Devices.Sensors.IActivitySensorTriggerDetails
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Interface is a part of the implementation of type Windows.Devices.Sensors.ActivitySensorTriggerDetails
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____x_ABI_CWindows_CDevices_CSensors_CIActivitySensorTriggerDetails_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CDevices_CSensors_CIActivitySensorTriggerDetails_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Devices_Sensors_IActivitySensorTriggerDetails[] = L"Windows.Devices.Sensors.IActivitySensorTriggerDetails";
namespace ABI {
    namespace Windows {
        namespace Devices {
            namespace Sensors {
                MIDL_INTERFACE("2c9e6612-b9ca-4677-b263-243297f79d3a")
                IActivitySensorTriggerDetails : public IInspectable
                {
                public:
                    virtual HRESULT STDMETHODCALLTYPE ReadReports(
                        __FIVectorView_1_Windows__CDevices__CSensors__CActivitySensorReadingChangeReport** value
                        ) = 0;
                };

                extern MIDL_CONST_ID IID& IID_IActivitySensorTriggerDetails = _uuidof(IActivitySensorTriggerDetails);
            } /* Sensors */
        } /* Devices */
    } /* Windows */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CSensors_CIActivitySensorTriggerDetails;
#endif /* !defined(____x_ABI_CWindows_CDevices_CSensors_CIActivitySensorTriggerDetails_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Interface Windows.Devices.Sensors.IAltimeter
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Interface is a part of the implementation of type Windows.Devices.Sensors.Altimeter
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____x_ABI_CWindows_CDevices_CSensors_CIAltimeter_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CDevices_CSensors_CIAltimeter_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Devices_Sensors_IAltimeter[] = L"Windows.Devices.Sensors.IAltimeter";
namespace ABI {
    namespace Windows {
        namespace Devices {
            namespace Sensors {
                MIDL_INTERFACE("72f057fd-8f04-49f1-b4a7-f4e363b701a2")
                IAltimeter : public IInspectable
                {
                public:
                    virtual HRESULT STDMETHODCALLTYPE GetCurrentReading(
                        ABI::Windows::Devices::Sensors::IAltimeterReading** value
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE get_DeviceId(
                        HSTRING* value
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE get_MinimumReportInterval(
                        UINT32* value
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE put_ReportInterval(
                        UINT32 value
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE get_ReportInterval(
                        UINT32* value
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE add_ReadingChanged(
                        __FITypedEventHandler_2_Windows__CDevices__CSensors__CAltimeter_Windows__CDevices__CSensors__CAltimeterReadingChangedEventArgs* handler,
                        EventRegistrationToken* token
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE remove_ReadingChanged(
                        EventRegistrationToken token
                        ) = 0;
                };

                extern MIDL_CONST_ID IID& IID_IAltimeter = _uuidof(IAltimeter);
            } /* Sensors */
        } /* Devices */
    } /* Windows */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CSensors_CIAltimeter;
#endif /* !defined(____x_ABI_CWindows_CDevices_CSensors_CIAltimeter_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Interface Windows.Devices.Sensors.IAltimeter2
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 5.0
 *
 * Interface is a part of the implementation of type Windows.Devices.Sensors.Altimeter
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x50000
#if !defined(____x_ABI_CWindows_CDevices_CSensors_CIAltimeter2_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CDevices_CSensors_CIAltimeter2_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Devices_Sensors_IAltimeter2[] = L"Windows.Devices.Sensors.IAltimeter2";
namespace ABI {
    namespace Windows {
        namespace Devices {
            namespace Sensors {
                MIDL_INTERFACE("c9471bf9-2add-48f5-9f08-3d0c7660d938")
                IAltimeter2 : public IInspectable
                {
                public:
                    virtual HRESULT STDMETHODCALLTYPE put_ReportLatency(
                        UINT32 value
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE get_ReportLatency(
                        UINT32* value
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE get_MaxBatchSize(
                        UINT32* value
                        ) = 0;
                };

                extern MIDL_CONST_ID IID& IID_IAltimeter2 = _uuidof(IAltimeter2);
            } /* Sensors */
        } /* Devices */
    } /* Windows */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CSensors_CIAltimeter2;
#endif /* !defined(____x_ABI_CWindows_CDevices_CSensors_CIAltimeter2_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x50000

/*
 *
 * Interface Windows.Devices.Sensors.IAltimeterReading
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Interface is a part of the implementation of type Windows.Devices.Sensors.AltimeterReading
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____x_ABI_CWindows_CDevices_CSensors_CIAltimeterReading_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CDevices_CSensors_CIAltimeterReading_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Devices_Sensors_IAltimeterReading[] = L"Windows.Devices.Sensors.IAltimeterReading";
namespace ABI {
    namespace Windows {
        namespace Devices {
            namespace Sensors {
                MIDL_INTERFACE("fbe8ef73-7f5e-48c8-aa1a-f1f3befc1144")
                IAltimeterReading : public IInspectable
                {
                public:
                    virtual HRESULT STDMETHODCALLTYPE get_Timestamp(
                        ABI::Windows::Foundation::DateTime* value
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE get_AltitudeChangeInMeters(
                        DOUBLE* value
                        ) = 0;
                };

                extern MIDL_CONST_ID IID& IID_IAltimeterReading = _uuidof(IAltimeterReading);
            } /* Sensors */
        } /* Devices */
    } /* Windows */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CSensors_CIAltimeterReading;
#endif /* !defined(____x_ABI_CWindows_CDevices_CSensors_CIAltimeterReading_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Interface Windows.Devices.Sensors.IAltimeterReading2
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 5.0
 *
 * Interface is a part of the implementation of type Windows.Devices.Sensors.AltimeterReading
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x50000
#if !defined(____x_ABI_CWindows_CDevices_CSensors_CIAltimeterReading2_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CDevices_CSensors_CIAltimeterReading2_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Devices_Sensors_IAltimeterReading2[] = L"Windows.Devices.Sensors.IAltimeterReading2";
namespace ABI {
    namespace Windows {
        namespace Devices {
            namespace Sensors {
                MIDL_INTERFACE("543a1bd9-6d0b-42b2-bd69-bc8fae0f782c")
                IAltimeterReading2 : public IInspectable
                {
                public:
                    virtual HRESULT STDMETHODCALLTYPE get_PerformanceCount(
                        __FIReference_1_Windows__CFoundation__CTimeSpan** value
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE get_Properties(
                        __FIMapView_2_HSTRING_IInspectable** value
                        ) = 0;
                };

                extern MIDL_CONST_ID IID& IID_IAltimeterReading2 = _uuidof(IAltimeterReading2);
            } /* Sensors */
        } /* Devices */
    } /* Windows */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CSensors_CIAltimeterReading2;
#endif /* !defined(____x_ABI_CWindows_CDevices_CSensors_CIAltimeterReading2_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x50000

/*
 *
 * Interface Windows.Devices.Sensors.IAltimeterReadingChangedEventArgs
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Interface is a part of the implementation of type Windows.Devices.Sensors.AltimeterReadingChangedEventArgs
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____x_ABI_CWindows_CDevices_CSensors_CIAltimeterReadingChangedEventArgs_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CDevices_CSensors_CIAltimeterReadingChangedEventArgs_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Devices_Sensors_IAltimeterReadingChangedEventArgs[] = L"Windows.Devices.Sensors.IAltimeterReadingChangedEventArgs";
namespace ABI {
    namespace Windows {
        namespace Devices {
            namespace Sensors {
                MIDL_INTERFACE("7069d077-446d-47f7-998c-ebc23b45e4a2")
                IAltimeterReadingChangedEventArgs : public IInspectable
                {
                public:
                    virtual HRESULT STDMETHODCALLTYPE get_Reading(
                        ABI::Windows::Devices::Sensors::IAltimeterReading** value
                        ) = 0;
                };

                extern MIDL_CONST_ID IID& IID_IAltimeterReadingChangedEventArgs = _uuidof(IAltimeterReadingChangedEventArgs);
            } /* Sensors */
        } /* Devices */
    } /* Windows */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CSensors_CIAltimeterReadingChangedEventArgs;
#endif /* !defined(____x_ABI_CWindows_CDevices_CSensors_CIAltimeterReadingChangedEventArgs_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Interface Windows.Devices.Sensors.IAltimeterStatics
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Interface is a part of the implementation of type Windows.Devices.Sensors.Altimeter
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____x_ABI_CWindows_CDevices_CSensors_CIAltimeterStatics_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CDevices_CSensors_CIAltimeterStatics_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Devices_Sensors_IAltimeterStatics[] = L"Windows.Devices.Sensors.IAltimeterStatics";
namespace ABI {
    namespace Windows {
        namespace Devices {
            namespace Sensors {
                MIDL_INTERFACE("9eb4d7c3-e5ac-47ce-8eef-d3718168c01f")
                IAltimeterStatics : public IInspectable
                {
                public:
                    virtual HRESULT STDMETHODCALLTYPE GetDefault(
                        ABI::Windows::Devices::Sensors::IAltimeter** result
                        ) = 0;
                };

                extern MIDL_CONST_ID IID& IID_IAltimeterStatics = _uuidof(IAltimeterStatics);
            } /* Sensors */
        } /* Devices */
    } /* Windows */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CSensors_CIAltimeterStatics;
#endif /* !defined(____x_ABI_CWindows_CDevices_CSensors_CIAltimeterStatics_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Interface Windows.Devices.Sensors.IBarometer
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Interface is a part of the implementation of type Windows.Devices.Sensors.Barometer
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____x_ABI_CWindows_CDevices_CSensors_CIBarometer_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CDevices_CSensors_CIBarometer_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Devices_Sensors_IBarometer[] = L"Windows.Devices.Sensors.IBarometer";
namespace ABI {
    namespace Windows {
        namespace Devices {
            namespace Sensors {
                MIDL_INTERFACE("934475a8-78bf-452f-b017-f0209ce6dab4")
                IBarometer : public IInspectable
                {
                public:
                    virtual HRESULT STDMETHODCALLTYPE GetCurrentReading(
                        ABI::Windows::Devices::Sensors::IBarometerReading** value
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE get_DeviceId(
                        HSTRING* value
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE get_MinimumReportInterval(
                        UINT32* value
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE put_ReportInterval(
                        UINT32 value
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE get_ReportInterval(
                        UINT32* value
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE add_ReadingChanged(
                        __FITypedEventHandler_2_Windows__CDevices__CSensors__CBarometer_Windows__CDevices__CSensors__CBarometerReadingChangedEventArgs* handler,
                        EventRegistrationToken* token
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE remove_ReadingChanged(
                        EventRegistrationToken token
                        ) = 0;
                };

                extern MIDL_CONST_ID IID& IID_IBarometer = _uuidof(IBarometer);
            } /* Sensors */
        } /* Devices */
    } /* Windows */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CSensors_CIBarometer;
#endif /* !defined(____x_ABI_CWindows_CDevices_CSensors_CIBarometer_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Interface Windows.Devices.Sensors.IBarometer2
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 5.0
 *
 * Interface is a part of the implementation of type Windows.Devices.Sensors.Barometer
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x50000
#if !defined(____x_ABI_CWindows_CDevices_CSensors_CIBarometer2_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CDevices_CSensors_CIBarometer2_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Devices_Sensors_IBarometer2[] = L"Windows.Devices.Sensors.IBarometer2";
namespace ABI {
    namespace Windows {
        namespace Devices {
            namespace Sensors {
                MIDL_INTERFACE("32bcc418-3eeb-4d04-9574-7633a8781f9f")
                IBarometer2 : public IInspectable
                {
                public:
                    virtual HRESULT STDMETHODCALLTYPE put_ReportLatency(
                        UINT32 value
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE get_ReportLatency(
                        UINT32* value
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE get_MaxBatchSize(
                        UINT32* value
                        ) = 0;
                };

                extern MIDL_CONST_ID IID& IID_IBarometer2 = _uuidof(IBarometer2);
            } /* Sensors */
        } /* Devices */
    } /* Windows */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CSensors_CIBarometer2;
#endif /* !defined(____x_ABI_CWindows_CDevices_CSensors_CIBarometer2_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x50000

/*
 *
 * Interface Windows.Devices.Sensors.IBarometer3
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 10.0
 *
 * Interface is a part of the implementation of type Windows.Devices.Sensors.Barometer
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0xa0000
#if !defined(____x_ABI_CWindows_CDevices_CSensors_CIBarometer3_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CDevices_CSensors_CIBarometer3_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Devices_Sensors_IBarometer3[] = L"Windows.Devices.Sensors.IBarometer3";
namespace ABI {
    namespace Windows {
        namespace Devices {
            namespace Sensors {
                MIDL_INTERFACE("0e35f0ea-02b5-5a04-b03d-822084863a54")
                IBarometer3 : public IInspectable
                {
                public:
                    virtual HRESULT STDMETHODCALLTYPE get_ReportThreshold(
                        ABI::Windows::Devices::Sensors::IBarometerDataThreshold** value
                        ) = 0;
                };

                extern MIDL_CONST_ID IID& IID_IBarometer3 = _uuidof(IBarometer3);
            } /* Sensors */
        } /* Devices */
    } /* Windows */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CSensors_CIBarometer3;
#endif /* !defined(____x_ABI_CWindows_CDevices_CSensors_CIBarometer3_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0xa0000

/*
 *
 * Interface Windows.Devices.Sensors.IBarometerDataThreshold
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 10.0
 *
 * Interface is a part of the implementation of type Windows.Devices.Sensors.BarometerDataThreshold
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0xa0000
#if !defined(____x_ABI_CWindows_CDevices_CSensors_CIBarometerDataThreshold_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CDevices_CSensors_CIBarometerDataThreshold_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Devices_Sensors_IBarometerDataThreshold[] = L"Windows.Devices.Sensors.IBarometerDataThreshold";
namespace ABI {
    namespace Windows {
        namespace Devices {
            namespace Sensors {
                MIDL_INTERFACE("076b952c-cb62-5a90-a0d1-f85e4a936394")
                IBarometerDataThreshold : public IInspectable
                {
                public:
                    virtual HRESULT STDMETHODCALLTYPE get_Hectopascals(
                        DOUBLE* value
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE put_Hectopascals(
                        DOUBLE value
                        ) = 0;
                };

                extern MIDL_CONST_ID IID& IID_IBarometerDataThreshold = _uuidof(IBarometerDataThreshold);
            } /* Sensors */
        } /* Devices */
    } /* Windows */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CSensors_CIBarometerDataThreshold;
#endif /* !defined(____x_ABI_CWindows_CDevices_CSensors_CIBarometerDataThreshold_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0xa0000

/*
 *
 * Interface Windows.Devices.Sensors.IBarometerReading
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Interface is a part of the implementation of type Windows.Devices.Sensors.BarometerReading
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____x_ABI_CWindows_CDevices_CSensors_CIBarometerReading_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CDevices_CSensors_CIBarometerReading_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Devices_Sensors_IBarometerReading[] = L"Windows.Devices.Sensors.IBarometerReading";
namespace ABI {
    namespace Windows {
        namespace Devices {
            namespace Sensors {
                MIDL_INTERFACE("f5b9d2e6-1df6-4a1a-a7ad-321d4f5db247")
                IBarometerReading : public IInspectable
                {
                public:
                    virtual HRESULT STDMETHODCALLTYPE get_Timestamp(
                        ABI::Windows::Foundation::DateTime* value
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE get_StationPressureInHectopascals(
                        DOUBLE* value
                        ) = 0;
                };

                extern MIDL_CONST_ID IID& IID_IBarometerReading = _uuidof(IBarometerReading);
            } /* Sensors */
        } /* Devices */
    } /* Windows */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CSensors_CIBarometerReading;
#endif /* !defined(____x_ABI_CWindows_CDevices_CSensors_CIBarometerReading_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Interface Windows.Devices.Sensors.IBarometerReading2
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 5.0
 *
 * Interface is a part of the implementation of type Windows.Devices.Sensors.BarometerReading
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x50000
#if !defined(____x_ABI_CWindows_CDevices_CSensors_CIBarometerReading2_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CDevices_CSensors_CIBarometerReading2_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Devices_Sensors_IBarometerReading2[] = L"Windows.Devices.Sensors.IBarometerReading2";
namespace ABI {
    namespace Windows {
        namespace Devices {
            namespace Sensors {
                MIDL_INTERFACE("85a244eb-90c5-4875-891c-3865b4c357e7")
                IBarometerReading2 : public IInspectable
                {
                public:
                    virtual HRESULT STDMETHODCALLTYPE get_PerformanceCount(
                        __FIReference_1_Windows__CFoundation__CTimeSpan** value
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE get_Properties(
                        __FIMapView_2_HSTRING_IInspectable** value
                        ) = 0;
                };

                extern MIDL_CONST_ID IID& IID_IBarometerReading2 = _uuidof(IBarometerReading2);
            } /* Sensors */
        } /* Devices */
    } /* Windows */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CSensors_CIBarometerReading2;
#endif /* !defined(____x_ABI_CWindows_CDevices_CSensors_CIBarometerReading2_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x50000

/*
 *
 * Interface Windows.Devices.Sensors.IBarometerReadingChangedEventArgs
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Interface is a part of the implementation of type Windows.Devices.Sensors.BarometerReadingChangedEventArgs
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____x_ABI_CWindows_CDevices_CSensors_CIBarometerReadingChangedEventArgs_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CDevices_CSensors_CIBarometerReadingChangedEventArgs_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Devices_Sensors_IBarometerReadingChangedEventArgs[] = L"Windows.Devices.Sensors.IBarometerReadingChangedEventArgs";
namespace ABI {
    namespace Windows {
        namespace Devices {
            namespace Sensors {
                MIDL_INTERFACE("3d84945f-037b-404f-9bbb-6232d69543c3")
                IBarometerReadingChangedEventArgs : public IInspectable
                {
                public:
                    virtual HRESULT STDMETHODCALLTYPE get_Reading(
                        ABI::Windows::Devices::Sensors::IBarometerReading** value
                        ) = 0;
                };

                extern MIDL_CONST_ID IID& IID_IBarometerReadingChangedEventArgs = _uuidof(IBarometerReadingChangedEventArgs);
            } /* Sensors */
        } /* Devices */
    } /* Windows */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CSensors_CIBarometerReadingChangedEventArgs;
#endif /* !defined(____x_ABI_CWindows_CDevices_CSensors_CIBarometerReadingChangedEventArgs_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Interface Windows.Devices.Sensors.IBarometerStatics
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Interface is a part of the implementation of type Windows.Devices.Sensors.Barometer
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____x_ABI_CWindows_CDevices_CSensors_CIBarometerStatics_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CDevices_CSensors_CIBarometerStatics_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Devices_Sensors_IBarometerStatics[] = L"Windows.Devices.Sensors.IBarometerStatics";
namespace ABI {
    namespace Windows {
        namespace Devices {
            namespace Sensors {
                MIDL_INTERFACE("286b270a-02e3-4f86-84fc-fdd892b5940f")
                IBarometerStatics : public IInspectable
                {
                public:
                    virtual HRESULT STDMETHODCALLTYPE GetDefault(
                        ABI::Windows::Devices::Sensors::IBarometer** result
                        ) = 0;
                };

                extern MIDL_CONST_ID IID& IID_IBarometerStatics = _uuidof(IBarometerStatics);
            } /* Sensors */
        } /* Devices */
    } /* Windows */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CSensors_CIBarometerStatics;
#endif /* !defined(____x_ABI_CWindows_CDevices_CSensors_CIBarometerStatics_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Interface Windows.Devices.Sensors.IBarometerStatics2
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 5.0
 *
 * Interface is a part of the implementation of type Windows.Devices.Sensors.Barometer
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x50000
#if !defined(____x_ABI_CWindows_CDevices_CSensors_CIBarometerStatics2_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CDevices_CSensors_CIBarometerStatics2_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Devices_Sensors_IBarometerStatics2[] = L"Windows.Devices.Sensors.IBarometerStatics2";
namespace ABI {
    namespace Windows {
        namespace Devices {
            namespace Sensors {
                MIDL_INTERFACE("8fc6b1e7-95ff-44ac-878e-d65c8308c34c")
                IBarometerStatics2 : public IInspectable
                {
                public:
                    virtual HRESULT STDMETHODCALLTYPE FromIdAsync(
                        HSTRING deviceId,
                        __FIAsyncOperation_1_Windows__CDevices__CSensors__CBarometer** operation
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE GetDeviceSelector(
                        HSTRING* result
                        ) = 0;
                };

                extern MIDL_CONST_ID IID& IID_IBarometerStatics2 = _uuidof(IBarometerStatics2);
            } /* Sensors */
        } /* Devices */
    } /* Windows */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CSensors_CIBarometerStatics2;
#endif /* !defined(____x_ABI_CWindows_CDevices_CSensors_CIBarometerStatics2_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x50000

/*
 *
 * Interface Windows.Devices.Sensors.ICompass
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Interface is a part of the implementation of type Windows.Devices.Sensors.Compass
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____x_ABI_CWindows_CDevices_CSensors_CICompass_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CDevices_CSensors_CICompass_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Devices_Sensors_ICompass[] = L"Windows.Devices.Sensors.ICompass";
namespace ABI {
    namespace Windows {
        namespace Devices {
            namespace Sensors {
                MIDL_INTERFACE("292ffa94-1b45-403c-ba06-b106dba69a64")
                ICompass : public IInspectable
                {
                public:
                    virtual HRESULT STDMETHODCALLTYPE GetCurrentReading(
                        ABI::Windows::Devices::Sensors::ICompassReading** value
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE get_MinimumReportInterval(
                        UINT32* value
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE put_ReportInterval(
                        UINT32 value
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE get_ReportInterval(
                        UINT32* value
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE add_ReadingChanged(
                        __FITypedEventHandler_2_Windows__CDevices__CSensors__CCompass_Windows__CDevices__CSensors__CCompassReadingChangedEventArgs* handler,
                        EventRegistrationToken* token
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE remove_ReadingChanged(
                        EventRegistrationToken token
                        ) = 0;
                };

                extern MIDL_CONST_ID IID& IID_ICompass = _uuidof(ICompass);
            } /* Sensors */
        } /* Devices */
    } /* Windows */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CSensors_CICompass;
#endif /* !defined(____x_ABI_CWindows_CDevices_CSensors_CICompass_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Interface Windows.Devices.Sensors.ICompass2
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Interface is a part of the implementation of type Windows.Devices.Sensors.Compass
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____x_ABI_CWindows_CDevices_CSensors_CICompass2_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CDevices_CSensors_CICompass2_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Devices_Sensors_ICompass2[] = L"Windows.Devices.Sensors.ICompass2";
namespace ABI {
    namespace Windows {
        namespace Devices {
            namespace Sensors {
                MIDL_INTERFACE("36f26d09-c7d7-434f-b461-979ddfc2322f")
                ICompass2 : public IInspectable
                {
                public:
                    virtual HRESULT STDMETHODCALLTYPE put_ReadingTransform(
                        ABI::Windows::Graphics::Display::DisplayOrientations value
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE get_ReadingTransform(
                        ABI::Windows::Graphics::Display::DisplayOrientations* value
                        ) = 0;
                };

                extern MIDL_CONST_ID IID& IID_ICompass2 = _uuidof(ICompass2);
            } /* Sensors */
        } /* Devices */
    } /* Windows */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CSensors_CICompass2;
#endif /* !defined(____x_ABI_CWindows_CDevices_CSensors_CICompass2_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Interface Windows.Devices.Sensors.ICompass3
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 5.0
 *
 * Interface is a part of the implementation of type Windows.Devices.Sensors.Compass
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x50000
#if !defined(____x_ABI_CWindows_CDevices_CSensors_CICompass3_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CDevices_CSensors_CICompass3_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Devices_Sensors_ICompass3[] = L"Windows.Devices.Sensors.ICompass3";
namespace ABI {
    namespace Windows {
        namespace Devices {
            namespace Sensors {
                MIDL_INTERFACE("a424801b-c5ea-4d45-a0ec-4b791f041a89")
                ICompass3 : public IInspectable
                {
                public:
                    virtual HRESULT STDMETHODCALLTYPE put_ReportLatency(
                        UINT32 value
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE get_ReportLatency(
                        UINT32* value
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE get_MaxBatchSize(
                        UINT32* value
                        ) = 0;
                };

                extern MIDL_CONST_ID IID& IID_ICompass3 = _uuidof(ICompass3);
            } /* Sensors */
        } /* Devices */
    } /* Windows */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CSensors_CICompass3;
#endif /* !defined(____x_ABI_CWindows_CDevices_CSensors_CICompass3_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x50000

/*
 *
 * Interface Windows.Devices.Sensors.ICompass4
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 10.0
 *
 * Interface is a part of the implementation of type Windows.Devices.Sensors.Compass
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0xa0000
#if !defined(____x_ABI_CWindows_CDevices_CSensors_CICompass4_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CDevices_CSensors_CICompass4_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Devices_Sensors_ICompass4[] = L"Windows.Devices.Sensors.ICompass4";
namespace ABI {
    namespace Windows {
        namespace Devices {
            namespace Sensors {
                MIDL_INTERFACE("291e7f11-ec32-5dcc-bfcb-0bb39eba5774")
                ICompass4 : public IInspectable
                {
                public:
                    virtual HRESULT STDMETHODCALLTYPE get_ReportThreshold(
                        ABI::Windows::Devices::Sensors::ICompassDataThreshold** value
                        ) = 0;
                };

                extern MIDL_CONST_ID IID& IID_ICompass4 = _uuidof(ICompass4);
            } /* Sensors */
        } /* Devices */
    } /* Windows */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CSensors_CICompass4;
#endif /* !defined(____x_ABI_CWindows_CDevices_CSensors_CICompass4_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0xa0000

/*
 *
 * Interface Windows.Devices.Sensors.ICompassDataThreshold
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 10.0
 *
 * Interface is a part of the implementation of type Windows.Devices.Sensors.CompassDataThreshold
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0xa0000
#if !defined(____x_ABI_CWindows_CDevices_CSensors_CICompassDataThreshold_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CDevices_CSensors_CICompassDataThreshold_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Devices_Sensors_ICompassDataThreshold[] = L"Windows.Devices.Sensors.ICompassDataThreshold";
namespace ABI {
    namespace Windows {
        namespace Devices {
            namespace Sensors {
                MIDL_INTERFACE("d15b52b3-d39d-5ec8-b2e4-f193e6ab34ed")
                ICompassDataThreshold : public IInspectable
                {
                public:
                    virtual HRESULT STDMETHODCALLTYPE get_Degrees(
                        DOUBLE* value
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE put_Degrees(
                        DOUBLE value
                        ) = 0;
                };

                extern MIDL_CONST_ID IID& IID_ICompassDataThreshold = _uuidof(ICompassDataThreshold);
            } /* Sensors */
        } /* Devices */
    } /* Windows */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CSensors_CICompassDataThreshold;
#endif /* !defined(____x_ABI_CWindows_CDevices_CSensors_CICompassDataThreshold_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0xa0000

/*
 *
 * Interface Windows.Devices.Sensors.ICompassDeviceId
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Interface is a part of the implementation of type Windows.Devices.Sensors.Compass
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____x_ABI_CWindows_CDevices_CSensors_CICompassDeviceId_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CDevices_CSensors_CICompassDeviceId_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Devices_Sensors_ICompassDeviceId[] = L"Windows.Devices.Sensors.ICompassDeviceId";
namespace ABI {
    namespace Windows {
        namespace Devices {
            namespace Sensors {
                MIDL_INTERFACE("d181ca29-b085-4b1d-870a-4ff57ba74fd4")
                ICompassDeviceId : public IInspectable
                {
                public:
                    virtual HRESULT STDMETHODCALLTYPE get_DeviceId(
                        HSTRING* value
                        ) = 0;
                };

                extern MIDL_CONST_ID IID& IID_ICompassDeviceId = _uuidof(ICompassDeviceId);
            } /* Sensors */
        } /* Devices */
    } /* Windows */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CSensors_CICompassDeviceId;
#endif /* !defined(____x_ABI_CWindows_CDevices_CSensors_CICompassDeviceId_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Interface Windows.Devices.Sensors.ICompassReading
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Interface is a part of the implementation of type Windows.Devices.Sensors.CompassReading
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____x_ABI_CWindows_CDevices_CSensors_CICompassReading_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CDevices_CSensors_CICompassReading_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Devices_Sensors_ICompassReading[] = L"Windows.Devices.Sensors.ICompassReading";
namespace ABI {
    namespace Windows {
        namespace Devices {
            namespace Sensors {
                MIDL_INTERFACE("82911128-513d-4dc9-b781-5eedfbf02d0c")
                ICompassReading : public IInspectable
                {
                public:
                    virtual HRESULT STDMETHODCALLTYPE get_Timestamp(
                        ABI::Windows::Foundation::DateTime* value
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE get_HeadingMagneticNorth(
                        DOUBLE* value
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE get_HeadingTrueNorth(
                        __FIReference_1_double** value
                        ) = 0;
                };

                extern MIDL_CONST_ID IID& IID_ICompassReading = _uuidof(ICompassReading);
            } /* Sensors */
        } /* Devices */
    } /* Windows */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CSensors_CICompassReading;
#endif /* !defined(____x_ABI_CWindows_CDevices_CSensors_CICompassReading_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Interface Windows.Devices.Sensors.ICompassReading2
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 5.0
 *
 * Interface is a part of the implementation of type Windows.Devices.Sensors.CompassReading
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x50000
#if !defined(____x_ABI_CWindows_CDevices_CSensors_CICompassReading2_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CDevices_CSensors_CICompassReading2_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Devices_Sensors_ICompassReading2[] = L"Windows.Devices.Sensors.ICompassReading2";
namespace ABI {
    namespace Windows {
        namespace Devices {
            namespace Sensors {
                MIDL_INTERFACE("b13a661e-51bb-4a12-bedd-ad47ff87d2e8")
                ICompassReading2 : public IInspectable
                {
                public:
                    virtual HRESULT STDMETHODCALLTYPE get_PerformanceCount(
                        __FIReference_1_Windows__CFoundation__CTimeSpan** value
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE get_Properties(
                        __FIMapView_2_HSTRING_IInspectable** value
                        ) = 0;
                };

                extern MIDL_CONST_ID IID& IID_ICompassReading2 = _uuidof(ICompassReading2);
            } /* Sensors */
        } /* Devices */
    } /* Windows */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CSensors_CICompassReading2;
#endif /* !defined(____x_ABI_CWindows_CDevices_CSensors_CICompassReading2_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x50000

/*
 *
 * Interface Windows.Devices.Sensors.ICompassReadingChangedEventArgs
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Interface is a part of the implementation of type Windows.Devices.Sensors.CompassReadingChangedEventArgs
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____x_ABI_CWindows_CDevices_CSensors_CICompassReadingChangedEventArgs_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CDevices_CSensors_CICompassReadingChangedEventArgs_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Devices_Sensors_ICompassReadingChangedEventArgs[] = L"Windows.Devices.Sensors.ICompassReadingChangedEventArgs";
namespace ABI {
    namespace Windows {
        namespace Devices {
            namespace Sensors {
                MIDL_INTERFACE("8f1549b0-e8bc-4c7e-b009-4e41df137072")
                ICompassReadingChangedEventArgs : public IInspectable
                {
                public:
                    virtual HRESULT STDMETHODCALLTYPE get_Reading(
                        ABI::Windows::Devices::Sensors::ICompassReading** value
                        ) = 0;
                };

                extern MIDL_CONST_ID IID& IID_ICompassReadingChangedEventArgs = _uuidof(ICompassReadingChangedEventArgs);
            } /* Sensors */
        } /* Devices */
    } /* Windows */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CSensors_CICompassReadingChangedEventArgs;
#endif /* !defined(____x_ABI_CWindows_CDevices_CSensors_CICompassReadingChangedEventArgs_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Interface Windows.Devices.Sensors.ICompassReadingHeadingAccuracy
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Interface is a part of the implementation of type Windows.Devices.Sensors.CompassReading
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____x_ABI_CWindows_CDevices_CSensors_CICompassReadingHeadingAccuracy_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CDevices_CSensors_CICompassReadingHeadingAccuracy_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Devices_Sensors_ICompassReadingHeadingAccuracy[] = L"Windows.Devices.Sensors.ICompassReadingHeadingAccuracy";
namespace ABI {
    namespace Windows {
        namespace Devices {
            namespace Sensors {
                MIDL_INTERFACE("e761354e-8911-40f7-9e16-6ecc7daec5de")
                ICompassReadingHeadingAccuracy : public IInspectable
                {
                public:
                    virtual HRESULT STDMETHODCALLTYPE get_HeadingAccuracy(
                        ABI::Windows::Devices::Sensors::MagnetometerAccuracy* value
                        ) = 0;
                };

                extern MIDL_CONST_ID IID& IID_ICompassReadingHeadingAccuracy = _uuidof(ICompassReadingHeadingAccuracy);
            } /* Sensors */
        } /* Devices */
    } /* Windows */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CSensors_CICompassReadingHeadingAccuracy;
#endif /* !defined(____x_ABI_CWindows_CDevices_CSensors_CICompassReadingHeadingAccuracy_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Interface Windows.Devices.Sensors.ICompassStatics
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Interface is a part of the implementation of type Windows.Devices.Sensors.Compass
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____x_ABI_CWindows_CDevices_CSensors_CICompassStatics_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CDevices_CSensors_CICompassStatics_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Devices_Sensors_ICompassStatics[] = L"Windows.Devices.Sensors.ICompassStatics";
namespace ABI {
    namespace Windows {
        namespace Devices {
            namespace Sensors {
                MIDL_INTERFACE("9abc97df-56ec-4c25-b54d-40a68bb5b269")
                ICompassStatics : public IInspectable
                {
                public:
                    virtual HRESULT STDMETHODCALLTYPE GetDefault(
                        ABI::Windows::Devices::Sensors::ICompass** result
                        ) = 0;
                };

                extern MIDL_CONST_ID IID& IID_ICompassStatics = _uuidof(ICompassStatics);
            } /* Sensors */
        } /* Devices */
    } /* Windows */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CSensors_CICompassStatics;
#endif /* !defined(____x_ABI_CWindows_CDevices_CSensors_CICompassStatics_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Interface Windows.Devices.Sensors.ICompassStatics2
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 5.0
 *
 * Interface is a part of the implementation of type Windows.Devices.Sensors.Compass
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x50000
#if !defined(____x_ABI_CWindows_CDevices_CSensors_CICompassStatics2_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CDevices_CSensors_CICompassStatics2_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Devices_Sensors_ICompassStatics2[] = L"Windows.Devices.Sensors.ICompassStatics2";
namespace ABI {
    namespace Windows {
        namespace Devices {
            namespace Sensors {
                MIDL_INTERFACE("0ace0ead-3baa-4990-9ce4-be0913754ed2")
                ICompassStatics2 : public IInspectable
                {
                public:
                    virtual HRESULT STDMETHODCALLTYPE GetDeviceSelector(
                        HSTRING* result
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE FromIdAsync(
                        HSTRING deviceId,
                        __FIAsyncOperation_1_Windows__CDevices__CSensors__CCompass** operation
                        ) = 0;
                };

                extern MIDL_CONST_ID IID& IID_ICompassStatics2 = _uuidof(ICompassStatics2);
            } /* Sensors */
        } /* Devices */
    } /* Windows */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CSensors_CICompassStatics2;
#endif /* !defined(____x_ABI_CWindows_CDevices_CSensors_CICompassStatics2_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x50000

/*
 *
 * Interface Windows.Devices.Sensors.IGyrometer
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Interface is a part of the implementation of type Windows.Devices.Sensors.Gyrometer
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____x_ABI_CWindows_CDevices_CSensors_CIGyrometer_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CDevices_CSensors_CIGyrometer_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Devices_Sensors_IGyrometer[] = L"Windows.Devices.Sensors.IGyrometer";
namespace ABI {
    namespace Windows {
        namespace Devices {
            namespace Sensors {
                MIDL_INTERFACE("fdb9a9c4-84b1-4ca2-9763-9b589506c70c")
                IGyrometer : public IInspectable
                {
                public:
                    virtual HRESULT STDMETHODCALLTYPE GetCurrentReading(
                        ABI::Windows::Devices::Sensors::IGyrometerReading** value
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE get_MinimumReportInterval(
                        UINT32* value
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE put_ReportInterval(
                        UINT32 value
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE get_ReportInterval(
                        UINT32* value
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE add_ReadingChanged(
                        __FITypedEventHandler_2_Windows__CDevices__CSensors__CGyrometer_Windows__CDevices__CSensors__CGyrometerReadingChangedEventArgs* handler,
                        EventRegistrationToken* token
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE remove_ReadingChanged(
                        EventRegistrationToken token
                        ) = 0;
                };

                extern MIDL_CONST_ID IID& IID_IGyrometer = _uuidof(IGyrometer);
            } /* Sensors */
        } /* Devices */
    } /* Windows */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CSensors_CIGyrometer;
#endif /* !defined(____x_ABI_CWindows_CDevices_CSensors_CIGyrometer_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Interface Windows.Devices.Sensors.IGyrometer2
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Interface is a part of the implementation of type Windows.Devices.Sensors.Gyrometer
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____x_ABI_CWindows_CDevices_CSensors_CIGyrometer2_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CDevices_CSensors_CIGyrometer2_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Devices_Sensors_IGyrometer2[] = L"Windows.Devices.Sensors.IGyrometer2";
namespace ABI {
    namespace Windows {
        namespace Devices {
            namespace Sensors {
                MIDL_INTERFACE("63df2443-8ce8-41c3-ac44-8698810b557f")
                IGyrometer2 : public IInspectable
                {
                public:
                    virtual HRESULT STDMETHODCALLTYPE put_ReadingTransform(
                        ABI::Windows::Graphics::Display::DisplayOrientations value
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE get_ReadingTransform(
                        ABI::Windows::Graphics::Display::DisplayOrientations* value
                        ) = 0;
                };

                extern MIDL_CONST_ID IID& IID_IGyrometer2 = _uuidof(IGyrometer2);
            } /* Sensors */
        } /* Devices */
    } /* Windows */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CSensors_CIGyrometer2;
#endif /* !defined(____x_ABI_CWindows_CDevices_CSensors_CIGyrometer2_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Interface Windows.Devices.Sensors.IGyrometer3
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 5.0
 *
 * Interface is a part of the implementation of type Windows.Devices.Sensors.Gyrometer
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x50000
#if !defined(____x_ABI_CWindows_CDevices_CSensors_CIGyrometer3_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CDevices_CSensors_CIGyrometer3_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Devices_Sensors_IGyrometer3[] = L"Windows.Devices.Sensors.IGyrometer3";
namespace ABI {
    namespace Windows {
        namespace Devices {
            namespace Sensors {
                MIDL_INTERFACE("5d6f88d5-8fbc-4484-914b-528adfd947b1")
                IGyrometer3 : public IInspectable
                {
                public:
                    virtual HRESULT STDMETHODCALLTYPE put_ReportLatency(
                        UINT32 value
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE get_ReportLatency(
                        UINT32* value
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE get_MaxBatchSize(
                        UINT32* value
                        ) = 0;
                };

                extern MIDL_CONST_ID IID& IID_IGyrometer3 = _uuidof(IGyrometer3);
            } /* Sensors */
        } /* Devices */
    } /* Windows */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CSensors_CIGyrometer3;
#endif /* !defined(____x_ABI_CWindows_CDevices_CSensors_CIGyrometer3_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x50000

/*
 *
 * Interface Windows.Devices.Sensors.IGyrometer4
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 10.0
 *
 * Interface is a part of the implementation of type Windows.Devices.Sensors.Gyrometer
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0xa0000
#if !defined(____x_ABI_CWindows_CDevices_CSensors_CIGyrometer4_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CDevices_CSensors_CIGyrometer4_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Devices_Sensors_IGyrometer4[] = L"Windows.Devices.Sensors.IGyrometer4";
namespace ABI {
    namespace Windows {
        namespace Devices {
            namespace Sensors {
                MIDL_INTERFACE("0628a60c-4c4b-5096-94e6-c356df68bef7")
                IGyrometer4 : public IInspectable
                {
                public:
                    virtual HRESULT STDMETHODCALLTYPE get_ReportThreshold(
                        ABI::Windows::Devices::Sensors::IGyrometerDataThreshold** value
                        ) = 0;
                };

                extern MIDL_CONST_ID IID& IID_IGyrometer4 = _uuidof(IGyrometer4);
            } /* Sensors */
        } /* Devices */
    } /* Windows */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CSensors_CIGyrometer4;
#endif /* !defined(____x_ABI_CWindows_CDevices_CSensors_CIGyrometer4_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0xa0000

/*
 *
 * Interface Windows.Devices.Sensors.IGyrometerDataThreshold
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 10.0
 *
 * Interface is a part of the implementation of type Windows.Devices.Sensors.GyrometerDataThreshold
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0xa0000
#if !defined(____x_ABI_CWindows_CDevices_CSensors_CIGyrometerDataThreshold_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CDevices_CSensors_CIGyrometerDataThreshold_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Devices_Sensors_IGyrometerDataThreshold[] = L"Windows.Devices.Sensors.IGyrometerDataThreshold";
namespace ABI {
    namespace Windows {
        namespace Devices {
            namespace Sensors {
                MIDL_INTERFACE("8648b31e-6e52-5259-bbad-242a69dc38c8")
                IGyrometerDataThreshold : public IInspectable
                {
                public:
                    virtual HRESULT STDMETHODCALLTYPE get_XAxisInDegreesPerSecond(
                        DOUBLE* value
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE put_XAxisInDegreesPerSecond(
                        DOUBLE value
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE get_YAxisInDegreesPerSecond(
                        DOUBLE* value
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE put_YAxisInDegreesPerSecond(
                        DOUBLE value
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE get_ZAxisInDegreesPerSecond(
                        DOUBLE* value
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE put_ZAxisInDegreesPerSecond(
                        DOUBLE value
                        ) = 0;
                };

                extern MIDL_CONST_ID IID& IID_IGyrometerDataThreshold = _uuidof(IGyrometerDataThreshold);
            } /* Sensors */
        } /* Devices */
    } /* Windows */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CSensors_CIGyrometerDataThreshold;
#endif /* !defined(____x_ABI_CWindows_CDevices_CSensors_CIGyrometerDataThreshold_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0xa0000

/*
 *
 * Interface Windows.Devices.Sensors.IGyrometerDeviceId
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Interface is a part of the implementation of type Windows.Devices.Sensors.Gyrometer
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____x_ABI_CWindows_CDevices_CSensors_CIGyrometerDeviceId_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CDevices_CSensors_CIGyrometerDeviceId_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Devices_Sensors_IGyrometerDeviceId[] = L"Windows.Devices.Sensors.IGyrometerDeviceId";
namespace ABI {
    namespace Windows {
        namespace Devices {
            namespace Sensors {
                MIDL_INTERFACE("1ee5e978-89a2-4275-9e95-7126f4708760")
                IGyrometerDeviceId : public IInspectable
                {
                public:
                    virtual HRESULT STDMETHODCALLTYPE get_DeviceId(
                        HSTRING* value
                        ) = 0;
                };

                extern MIDL_CONST_ID IID& IID_IGyrometerDeviceId = _uuidof(IGyrometerDeviceId);
            } /* Sensors */
        } /* Devices */
    } /* Windows */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CSensors_CIGyrometerDeviceId;
#endif /* !defined(____x_ABI_CWindows_CDevices_CSensors_CIGyrometerDeviceId_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Interface Windows.Devices.Sensors.IGyrometerReading
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Interface is a part of the implementation of type Windows.Devices.Sensors.GyrometerReading
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____x_ABI_CWindows_CDevices_CSensors_CIGyrometerReading_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CDevices_CSensors_CIGyrometerReading_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Devices_Sensors_IGyrometerReading[] = L"Windows.Devices.Sensors.IGyrometerReading";
namespace ABI {
    namespace Windows {
        namespace Devices {
            namespace Sensors {
                MIDL_INTERFACE("b3d6de5c-1ee4-456f-9de7-e2493b5c8e03")
                IGyrometerReading : public IInspectable
                {
                public:
                    virtual HRESULT STDMETHODCALLTYPE get_Timestamp(
                        ABI::Windows::Foundation::DateTime* value
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE get_AngularVelocityX(
                        DOUBLE* value
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE get_AngularVelocityY(
                        DOUBLE* value
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE get_AngularVelocityZ(
                        DOUBLE* value
                        ) = 0;
                };

                extern MIDL_CONST_ID IID& IID_IGyrometerReading = _uuidof(IGyrometerReading);
            } /* Sensors */
        } /* Devices */
    } /* Windows */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CSensors_CIGyrometerReading;
#endif /* !defined(____x_ABI_CWindows_CDevices_CSensors_CIGyrometerReading_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Interface Windows.Devices.Sensors.IGyrometerReading2
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 5.0
 *
 * Interface is a part of the implementation of type Windows.Devices.Sensors.GyrometerReading
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x50000
#if !defined(____x_ABI_CWindows_CDevices_CSensors_CIGyrometerReading2_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CDevices_CSensors_CIGyrometerReading2_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Devices_Sensors_IGyrometerReading2[] = L"Windows.Devices.Sensors.IGyrometerReading2";
namespace ABI {
    namespace Windows {
        namespace Devices {
            namespace Sensors {
                MIDL_INTERFACE("16afe13c-2b89-44bb-822b-d1e1556ff09b")
                IGyrometerReading2 : public IInspectable
                {
                public:
                    virtual HRESULT STDMETHODCALLTYPE get_PerformanceCount(
                        __FIReference_1_Windows__CFoundation__CTimeSpan** value
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE get_Properties(
                        __FIMapView_2_HSTRING_IInspectable** value
                        ) = 0;
                };

                extern MIDL_CONST_ID IID& IID_IGyrometerReading2 = _uuidof(IGyrometerReading2);
            } /* Sensors */
        } /* Devices */
    } /* Windows */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CSensors_CIGyrometerReading2;
#endif /* !defined(____x_ABI_CWindows_CDevices_CSensors_CIGyrometerReading2_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x50000

/*
 *
 * Interface Windows.Devices.Sensors.IGyrometerReadingChangedEventArgs
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Interface is a part of the implementation of type Windows.Devices.Sensors.GyrometerReadingChangedEventArgs
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____x_ABI_CWindows_CDevices_CSensors_CIGyrometerReadingChangedEventArgs_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CDevices_CSensors_CIGyrometerReadingChangedEventArgs_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Devices_Sensors_IGyrometerReadingChangedEventArgs[] = L"Windows.Devices.Sensors.IGyrometerReadingChangedEventArgs";
namespace ABI {
    namespace Windows {
        namespace Devices {
            namespace Sensors {
                MIDL_INTERFACE("0fdf1895-6f9e-42ce-8d58-388c0ab8356d")
                IGyrometerReadingChangedEventArgs : public IInspectable
                {
                public:
                    virtual HRESULT STDMETHODCALLTYPE get_Reading(
                        ABI::Windows::Devices::Sensors::IGyrometerReading** value
                        ) = 0;
                };

                extern MIDL_CONST_ID IID& IID_IGyrometerReadingChangedEventArgs = _uuidof(IGyrometerReadingChangedEventArgs);
            } /* Sensors */
        } /* Devices */
    } /* Windows */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CSensors_CIGyrometerReadingChangedEventArgs;
#endif /* !defined(____x_ABI_CWindows_CDevices_CSensors_CIGyrometerReadingChangedEventArgs_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Interface Windows.Devices.Sensors.IGyrometerStatics
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Interface is a part of the implementation of type Windows.Devices.Sensors.Gyrometer
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____x_ABI_CWindows_CDevices_CSensors_CIGyrometerStatics_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CDevices_CSensors_CIGyrometerStatics_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Devices_Sensors_IGyrometerStatics[] = L"Windows.Devices.Sensors.IGyrometerStatics";
namespace ABI {
    namespace Windows {
        namespace Devices {
            namespace Sensors {
                MIDL_INTERFACE("83b6e7c9-e49d-4b39-86e6-cd554be4c5c1")
                IGyrometerStatics : public IInspectable
                {
                public:
                    virtual HRESULT STDMETHODCALLTYPE GetDefault(
                        ABI::Windows::Devices::Sensors::IGyrometer** result
                        ) = 0;
                };

                extern MIDL_CONST_ID IID& IID_IGyrometerStatics = _uuidof(IGyrometerStatics);
            } /* Sensors */
        } /* Devices */
    } /* Windows */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CSensors_CIGyrometerStatics;
#endif /* !defined(____x_ABI_CWindows_CDevices_CSensors_CIGyrometerStatics_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Interface Windows.Devices.Sensors.IGyrometerStatics2
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 5.0
 *
 * Interface is a part of the implementation of type Windows.Devices.Sensors.Gyrometer
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x50000
#if !defined(____x_ABI_CWindows_CDevices_CSensors_CIGyrometerStatics2_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CDevices_CSensors_CIGyrometerStatics2_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Devices_Sensors_IGyrometerStatics2[] = L"Windows.Devices.Sensors.IGyrometerStatics2";
namespace ABI {
    namespace Windows {
        namespace Devices {
            namespace Sensors {
                MIDL_INTERFACE("ef83f7a1-d700-4204-9613-79c6b161df4e")
                IGyrometerStatics2 : public IInspectable
                {
                public:
                    virtual HRESULT STDMETHODCALLTYPE GetDeviceSelector(
                        HSTRING* result
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE FromIdAsync(
                        HSTRING deviceId,
                        __FIAsyncOperation_1_Windows__CDevices__CSensors__CGyrometer** operation
                        ) = 0;
                };

                extern MIDL_CONST_ID IID& IID_IGyrometerStatics2 = _uuidof(IGyrometerStatics2);
            } /* Sensors */
        } /* Devices */
    } /* Windows */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CSensors_CIGyrometerStatics2;
#endif /* !defined(____x_ABI_CWindows_CDevices_CSensors_CIGyrometerStatics2_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x50000

/*
 *
 * Interface Windows.Devices.Sensors.IHingeAngleReading
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 7.0
 *
 * Interface is a part of the implementation of type Windows.Devices.Sensors.HingeAngleReading
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x70000
#if !defined(____x_ABI_CWindows_CDevices_CSensors_CIHingeAngleReading_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CDevices_CSensors_CIHingeAngleReading_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Devices_Sensors_IHingeAngleReading[] = L"Windows.Devices.Sensors.IHingeAngleReading";
namespace ABI {
    namespace Windows {
        namespace Devices {
            namespace Sensors {
                MIDL_INTERFACE("a3cd45b9-1bf1-4f65-a704-e2da04f182c0")
                IHingeAngleReading : public IInspectable
                {
                public:
                    virtual HRESULT STDMETHODCALLTYPE get_Timestamp(
                        ABI::Windows::Foundation::DateTime* value
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE get_AngleInDegrees(
                        DOUBLE* value
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE get_Properties(
                        __FIMapView_2_HSTRING_IInspectable** value
                        ) = 0;
                };

                extern MIDL_CONST_ID IID& IID_IHingeAngleReading = _uuidof(IHingeAngleReading);
            } /* Sensors */
        } /* Devices */
    } /* Windows */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CSensors_CIHingeAngleReading;
#endif /* !defined(____x_ABI_CWindows_CDevices_CSensors_CIHingeAngleReading_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x70000

/*
 *
 * Interface Windows.Devices.Sensors.IHingeAngleSensor
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 7.0
 *
 * Interface is a part of the implementation of type Windows.Devices.Sensors.HingeAngleSensor
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x70000
#if !defined(____x_ABI_CWindows_CDevices_CSensors_CIHingeAngleSensor_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CDevices_CSensors_CIHingeAngleSensor_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Devices_Sensors_IHingeAngleSensor[] = L"Windows.Devices.Sensors.IHingeAngleSensor";
namespace ABI {
    namespace Windows {
        namespace Devices {
            namespace Sensors {
                MIDL_INTERFACE("e9d3be02-bfdf-437f-8c29-88c77393d309")
                IHingeAngleSensor : public IInspectable
                {
                public:
                    virtual HRESULT STDMETHODCALLTYPE GetCurrentReadingAsync(
                        __FIAsyncOperation_1_Windows__CDevices__CSensors__CHingeAngleReading** value
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE get_DeviceId(
                        HSTRING* value
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE get_MinReportThresholdInDegrees(
                        DOUBLE* value
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE get_ReportThresholdInDegrees(
                        DOUBLE* value
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE put_ReportThresholdInDegrees(
                        DOUBLE value
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE add_ReadingChanged(
                        __FITypedEventHandler_2_Windows__CDevices__CSensors__CHingeAngleSensor_Windows__CDevices__CSensors__CHingeAngleSensorReadingChangedEventArgs* handler,
                        EventRegistrationToken* token
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE remove_ReadingChanged(
                        EventRegistrationToken token
                        ) = 0;
                };

                extern MIDL_CONST_ID IID& IID_IHingeAngleSensor = _uuidof(IHingeAngleSensor);
            } /* Sensors */
        } /* Devices */
    } /* Windows */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CSensors_CIHingeAngleSensor;
#endif /* !defined(____x_ABI_CWindows_CDevices_CSensors_CIHingeAngleSensor_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x70000

/*
 *
 * Interface Windows.Devices.Sensors.IHingeAngleSensorReadingChangedEventArgs
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 7.0
 *
 * Interface is a part of the implementation of type Windows.Devices.Sensors.HingeAngleSensorReadingChangedEventArgs
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x70000
#if !defined(____x_ABI_CWindows_CDevices_CSensors_CIHingeAngleSensorReadingChangedEventArgs_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CDevices_CSensors_CIHingeAngleSensorReadingChangedEventArgs_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Devices_Sensors_IHingeAngleSensorReadingChangedEventArgs[] = L"Windows.Devices.Sensors.IHingeAngleSensorReadingChangedEventArgs";
namespace ABI {
    namespace Windows {
        namespace Devices {
            namespace Sensors {
                MIDL_INTERFACE("24d9558b-fad0-42b8-a854-78923049a1ba")
                IHingeAngleSensorReadingChangedEventArgs : public IInspectable
                {
                public:
                    virtual HRESULT STDMETHODCALLTYPE get_Reading(
                        ABI::Windows::Devices::Sensors::IHingeAngleReading** value
                        ) = 0;
                };

                extern MIDL_CONST_ID IID& IID_IHingeAngleSensorReadingChangedEventArgs = _uuidof(IHingeAngleSensorReadingChangedEventArgs);
            } /* Sensors */
        } /* Devices */
    } /* Windows */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CSensors_CIHingeAngleSensorReadingChangedEventArgs;
#endif /* !defined(____x_ABI_CWindows_CDevices_CSensors_CIHingeAngleSensorReadingChangedEventArgs_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x70000

/*
 *
 * Interface Windows.Devices.Sensors.IHingeAngleSensorStatics
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 7.0
 *
 * Interface is a part of the implementation of type Windows.Devices.Sensors.HingeAngleSensor
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x70000
#if !defined(____x_ABI_CWindows_CDevices_CSensors_CIHingeAngleSensorStatics_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CDevices_CSensors_CIHingeAngleSensorStatics_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Devices_Sensors_IHingeAngleSensorStatics[] = L"Windows.Devices.Sensors.IHingeAngleSensorStatics";
namespace ABI {
    namespace Windows {
        namespace Devices {
            namespace Sensors {
                MIDL_INTERFACE("b7b63910-fbb1-4123-89ce-4ea34eb0dfca")
                IHingeAngleSensorStatics : public IInspectable
                {
                public:
                    virtual HRESULT STDMETHODCALLTYPE GetDeviceSelector(
                        HSTRING* result
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE GetDefaultAsync(
                        __FIAsyncOperation_1_Windows__CDevices__CSensors__CHingeAngleSensor** result
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE GetRelatedToAdjacentPanelsAsync(
                        HSTRING firstPanelId,
                        HSTRING secondPanelId,
                        __FIAsyncOperation_1_Windows__CDevices__CSensors__CHingeAngleSensor** result
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE FromIdAsync(
                        HSTRING deviceId,
                        __FIAsyncOperation_1_Windows__CDevices__CSensors__CHingeAngleSensor** result
                        ) = 0;
                };

                extern MIDL_CONST_ID IID& IID_IHingeAngleSensorStatics = _uuidof(IHingeAngleSensorStatics);
            } /* Sensors */
        } /* Devices */
    } /* Windows */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CSensors_CIHingeAngleSensorStatics;
#endif /* !defined(____x_ABI_CWindows_CDevices_CSensors_CIHingeAngleSensorStatics_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x70000

/*
 *
 * Interface Windows.Devices.Sensors.IInclinometer
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Interface is a part of the implementation of type Windows.Devices.Sensors.Inclinometer
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____x_ABI_CWindows_CDevices_CSensors_CIInclinometer_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CDevices_CSensors_CIInclinometer_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Devices_Sensors_IInclinometer[] = L"Windows.Devices.Sensors.IInclinometer";
namespace ABI {
    namespace Windows {
        namespace Devices {
            namespace Sensors {
                MIDL_INTERFACE("2648ca6f-2286-406f-9161-f0c4bd806ebf")
                IInclinometer : public IInspectable
                {
                public:
                    virtual HRESULT STDMETHODCALLTYPE GetCurrentReading(
                        ABI::Windows::Devices::Sensors::IInclinometerReading** value
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE get_MinimumReportInterval(
                        UINT32* value
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE put_ReportInterval(
                        UINT32 value
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE get_ReportInterval(
                        UINT32* value
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE add_ReadingChanged(
                        __FITypedEventHandler_2_Windows__CDevices__CSensors__CInclinometer_Windows__CDevices__CSensors__CInclinometerReadingChangedEventArgs* handler,
                        EventRegistrationToken* token
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE remove_ReadingChanged(
                        EventRegistrationToken token
                        ) = 0;
                };

                extern MIDL_CONST_ID IID& IID_IInclinometer = _uuidof(IInclinometer);
            } /* Sensors */
        } /* Devices */
    } /* Windows */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CSensors_CIInclinometer;
#endif /* !defined(____x_ABI_CWindows_CDevices_CSensors_CIInclinometer_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Interface Windows.Devices.Sensors.IInclinometer2
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Interface is a part of the implementation of type Windows.Devices.Sensors.Inclinometer
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____x_ABI_CWindows_CDevices_CSensors_CIInclinometer2_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CDevices_CSensors_CIInclinometer2_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Devices_Sensors_IInclinometer2[] = L"Windows.Devices.Sensors.IInclinometer2";
namespace ABI {
    namespace Windows {
        namespace Devices {
            namespace Sensors {
                MIDL_INTERFACE("029f3393-28b2-45f8-bb16-61e86a7fae6e")
                IInclinometer2 : public IInspectable
                {
                public:
                    virtual HRESULT STDMETHODCALLTYPE put_ReadingTransform(
                        ABI::Windows::Graphics::Display::DisplayOrientations value
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE get_ReadingTransform(
                        ABI::Windows::Graphics::Display::DisplayOrientations* value
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE get_ReadingType(
                        ABI::Windows::Devices::Sensors::SensorReadingType* type
                        ) = 0;
                };

                extern MIDL_CONST_ID IID& IID_IInclinometer2 = _uuidof(IInclinometer2);
            } /* Sensors */
        } /* Devices */
    } /* Windows */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CSensors_CIInclinometer2;
#endif /* !defined(____x_ABI_CWindows_CDevices_CSensors_CIInclinometer2_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Interface Windows.Devices.Sensors.IInclinometer3
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 5.0
 *
 * Interface is a part of the implementation of type Windows.Devices.Sensors.Inclinometer
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x50000
#if !defined(____x_ABI_CWindows_CDevices_CSensors_CIInclinometer3_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CDevices_CSensors_CIInclinometer3_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Devices_Sensors_IInclinometer3[] = L"Windows.Devices.Sensors.IInclinometer3";
namespace ABI {
    namespace Windows {
        namespace Devices {
            namespace Sensors {
                MIDL_INTERFACE("3a095004-d765-4384-a3d7-0283f3abe6ae")
                IInclinometer3 : public IInspectable
                {
                public:
                    virtual HRESULT STDMETHODCALLTYPE put_ReportLatency(
                        UINT32 value
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE get_ReportLatency(
                        UINT32* value
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE get_MaxBatchSize(
                        UINT32* value
                        ) = 0;
                };

                extern MIDL_CONST_ID IID& IID_IInclinometer3 = _uuidof(IInclinometer3);
            } /* Sensors */
        } /* Devices */
    } /* Windows */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CSensors_CIInclinometer3;
#endif /* !defined(____x_ABI_CWindows_CDevices_CSensors_CIInclinometer3_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x50000

/*
 *
 * Interface Windows.Devices.Sensors.IInclinometer4
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 10.0
 *
 * Interface is a part of the implementation of type Windows.Devices.Sensors.Inclinometer
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0xa0000
#if !defined(____x_ABI_CWindows_CDevices_CSensors_CIInclinometer4_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CDevices_CSensors_CIInclinometer4_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Devices_Sensors_IInclinometer4[] = L"Windows.Devices.Sensors.IInclinometer4";
namespace ABI {
    namespace Windows {
        namespace Devices {
            namespace Sensors {
                MIDL_INTERFACE("43852618-8fca-548e-bbf5-5c50412b6aa4")
                IInclinometer4 : public IInspectable
                {
                public:
                    virtual HRESULT STDMETHODCALLTYPE get_ReportThreshold(
                        ABI::Windows::Devices::Sensors::IInclinometerDataThreshold** value
                        ) = 0;
                };

                extern MIDL_CONST_ID IID& IID_IInclinometer4 = _uuidof(IInclinometer4);
            } /* Sensors */
        } /* Devices */
    } /* Windows */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CSensors_CIInclinometer4;
#endif /* !defined(____x_ABI_CWindows_CDevices_CSensors_CIInclinometer4_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0xa0000

/*
 *
 * Interface Windows.Devices.Sensors.IInclinometerDataThreshold
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 10.0
 *
 * Interface is a part of the implementation of type Windows.Devices.Sensors.InclinometerDataThreshold
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0xa0000
#if !defined(____x_ABI_CWindows_CDevices_CSensors_CIInclinometerDataThreshold_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CDevices_CSensors_CIInclinometerDataThreshold_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Devices_Sensors_IInclinometerDataThreshold[] = L"Windows.Devices.Sensors.IInclinometerDataThreshold";
namespace ABI {
    namespace Windows {
        namespace Devices {
            namespace Sensors {
                MIDL_INTERFACE("f80a4783-7bfe-545e-bb60-a0ebc47bd2fb")
                IInclinometerDataThreshold : public IInspectable
                {
                public:
                    virtual HRESULT STDMETHODCALLTYPE get_PitchInDegrees(
                        FLOAT* value
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE put_PitchInDegrees(
                        FLOAT value
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE get_RollInDegrees(
                        FLOAT* value
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE put_RollInDegrees(
                        FLOAT value
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE get_YawInDegrees(
                        FLOAT* value
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE put_YawInDegrees(
                        FLOAT value
                        ) = 0;
                };

                extern MIDL_CONST_ID IID& IID_IInclinometerDataThreshold = _uuidof(IInclinometerDataThreshold);
            } /* Sensors */
        } /* Devices */
    } /* Windows */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CSensors_CIInclinometerDataThreshold;
#endif /* !defined(____x_ABI_CWindows_CDevices_CSensors_CIInclinometerDataThreshold_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0xa0000

/*
 *
 * Interface Windows.Devices.Sensors.IInclinometerDeviceId
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Interface is a part of the implementation of type Windows.Devices.Sensors.Inclinometer
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____x_ABI_CWindows_CDevices_CSensors_CIInclinometerDeviceId_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CDevices_CSensors_CIInclinometerDeviceId_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Devices_Sensors_IInclinometerDeviceId[] = L"Windows.Devices.Sensors.IInclinometerDeviceId";
namespace ABI {
    namespace Windows {
        namespace Devices {
            namespace Sensors {
                MIDL_INTERFACE("01e91982-41ff-4406-ae83-62210ff16fe3")
                IInclinometerDeviceId : public IInspectable
                {
                public:
                    virtual HRESULT STDMETHODCALLTYPE get_DeviceId(
                        HSTRING* value
                        ) = 0;
                };

                extern MIDL_CONST_ID IID& IID_IInclinometerDeviceId = _uuidof(IInclinometerDeviceId);
            } /* Sensors */
        } /* Devices */
    } /* Windows */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CSensors_CIInclinometerDeviceId;
#endif /* !defined(____x_ABI_CWindows_CDevices_CSensors_CIInclinometerDeviceId_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Interface Windows.Devices.Sensors.IInclinometerReading
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Interface is a part of the implementation of type Windows.Devices.Sensors.InclinometerReading
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____x_ABI_CWindows_CDevices_CSensors_CIInclinometerReading_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CDevices_CSensors_CIInclinometerReading_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Devices_Sensors_IInclinometerReading[] = L"Windows.Devices.Sensors.IInclinometerReading";
namespace ABI {
    namespace Windows {
        namespace Devices {
            namespace Sensors {
                MIDL_INTERFACE("9f44f055-b6f6-497f-b127-1a775e501458")
                IInclinometerReading : public IInspectable
                {
                public:
                    virtual HRESULT STDMETHODCALLTYPE get_Timestamp(
                        ABI::Windows::Foundation::DateTime* value
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE get_PitchDegrees(
                        FLOAT* value
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE get_RollDegrees(
                        FLOAT* value
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE get_YawDegrees(
                        FLOAT* value
                        ) = 0;
                };

                extern MIDL_CONST_ID IID& IID_IInclinometerReading = _uuidof(IInclinometerReading);
            } /* Sensors */
        } /* Devices */
    } /* Windows */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CSensors_CIInclinometerReading;
#endif /* !defined(____x_ABI_CWindows_CDevices_CSensors_CIInclinometerReading_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Interface Windows.Devices.Sensors.IInclinometerReading2
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 5.0
 *
 * Interface is a part of the implementation of type Windows.Devices.Sensors.InclinometerReading
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x50000
#if !defined(____x_ABI_CWindows_CDevices_CSensors_CIInclinometerReading2_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CDevices_CSensors_CIInclinometerReading2_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Devices_Sensors_IInclinometerReading2[] = L"Windows.Devices.Sensors.IInclinometerReading2";
namespace ABI {
    namespace Windows {
        namespace Devices {
            namespace Sensors {
                MIDL_INTERFACE("4f164781-e90b-4658-8915-0103e08a805a")
                IInclinometerReading2 : public IInspectable
                {
                public:
                    virtual HRESULT STDMETHODCALLTYPE get_PerformanceCount(
                        __FIReference_1_Windows__CFoundation__CTimeSpan** value
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE get_Properties(
                        __FIMapView_2_HSTRING_IInspectable** value
                        ) = 0;
                };

                extern MIDL_CONST_ID IID& IID_IInclinometerReading2 = _uuidof(IInclinometerReading2);
            } /* Sensors */
        } /* Devices */
    } /* Windows */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CSensors_CIInclinometerReading2;
#endif /* !defined(____x_ABI_CWindows_CDevices_CSensors_CIInclinometerReading2_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x50000

/*
 *
 * Interface Windows.Devices.Sensors.IInclinometerReadingChangedEventArgs
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Interface is a part of the implementation of type Windows.Devices.Sensors.InclinometerReadingChangedEventArgs
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____x_ABI_CWindows_CDevices_CSensors_CIInclinometerReadingChangedEventArgs_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CDevices_CSensors_CIInclinometerReadingChangedEventArgs_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Devices_Sensors_IInclinometerReadingChangedEventArgs[] = L"Windows.Devices.Sensors.IInclinometerReadingChangedEventArgs";
namespace ABI {
    namespace Windows {
        namespace Devices {
            namespace Sensors {
                MIDL_INTERFACE("4ae91dc1-e7eb-4938-8511-ae0d6b440438")
                IInclinometerReadingChangedEventArgs : public IInspectable
                {
                public:
                    virtual HRESULT STDMETHODCALLTYPE get_Reading(
                        ABI::Windows::Devices::Sensors::IInclinometerReading** value
                        ) = 0;
                };

                extern MIDL_CONST_ID IID& IID_IInclinometerReadingChangedEventArgs = _uuidof(IInclinometerReadingChangedEventArgs);
            } /* Sensors */
        } /* Devices */
    } /* Windows */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CSensors_CIInclinometerReadingChangedEventArgs;
#endif /* !defined(____x_ABI_CWindows_CDevices_CSensors_CIInclinometerReadingChangedEventArgs_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Interface Windows.Devices.Sensors.IInclinometerReadingYawAccuracy
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Interface is a part of the implementation of type Windows.Devices.Sensors.InclinometerReading
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____x_ABI_CWindows_CDevices_CSensors_CIInclinometerReadingYawAccuracy_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CDevices_CSensors_CIInclinometerReadingYawAccuracy_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Devices_Sensors_IInclinometerReadingYawAccuracy[] = L"Windows.Devices.Sensors.IInclinometerReadingYawAccuracy";
namespace ABI {
    namespace Windows {
        namespace Devices {
            namespace Sensors {
                MIDL_INTERFACE("b453e880-1fe3-4986-a257-e6ece2723949")
                IInclinometerReadingYawAccuracy : public IInspectable
                {
                public:
                    virtual HRESULT STDMETHODCALLTYPE get_YawAccuracy(
                        ABI::Windows::Devices::Sensors::MagnetometerAccuracy* value
                        ) = 0;
                };

                extern MIDL_CONST_ID IID& IID_IInclinometerReadingYawAccuracy = _uuidof(IInclinometerReadingYawAccuracy);
            } /* Sensors */
        } /* Devices */
    } /* Windows */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CSensors_CIInclinometerReadingYawAccuracy;
#endif /* !defined(____x_ABI_CWindows_CDevices_CSensors_CIInclinometerReadingYawAccuracy_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Interface Windows.Devices.Sensors.IInclinometerStatics
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Interface is a part of the implementation of type Windows.Devices.Sensors.Inclinometer
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____x_ABI_CWindows_CDevices_CSensors_CIInclinometerStatics_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CDevices_CSensors_CIInclinometerStatics_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Devices_Sensors_IInclinometerStatics[] = L"Windows.Devices.Sensors.IInclinometerStatics";
namespace ABI {
    namespace Windows {
        namespace Devices {
            namespace Sensors {
                MIDL_INTERFACE("f22ec551-9c30-453a-8b49-3c3eeb33cb61")
                IInclinometerStatics : public IInspectable
                {
                public:
                    virtual HRESULT STDMETHODCALLTYPE GetDefault(
                        ABI::Windows::Devices::Sensors::IInclinometer** result
                        ) = 0;
                };

                extern MIDL_CONST_ID IID& IID_IInclinometerStatics = _uuidof(IInclinometerStatics);
            } /* Sensors */
        } /* Devices */
    } /* Windows */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CSensors_CIInclinometerStatics;
#endif /* !defined(____x_ABI_CWindows_CDevices_CSensors_CIInclinometerStatics_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Interface Windows.Devices.Sensors.IInclinometerStatics2
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Interface is a part of the implementation of type Windows.Devices.Sensors.Inclinometer
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____x_ABI_CWindows_CDevices_CSensors_CIInclinometerStatics2_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CDevices_CSensors_CIInclinometerStatics2_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Devices_Sensors_IInclinometerStatics2[] = L"Windows.Devices.Sensors.IInclinometerStatics2";
namespace ABI {
    namespace Windows {
        namespace Devices {
            namespace Sensors {
                MIDL_INTERFACE("043f9775-6a1e-499c-86e0-638c1a864b00")
                IInclinometerStatics2 : public IInspectable
                {
                public:
                    virtual HRESULT STDMETHODCALLTYPE GetDefaultForRelativeReadings(
                        ABI::Windows::Devices::Sensors::IInclinometer** result
                        ) = 0;
                };

                extern MIDL_CONST_ID IID& IID_IInclinometerStatics2 = _uuidof(IInclinometerStatics2);
            } /* Sensors */
        } /* Devices */
    } /* Windows */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CSensors_CIInclinometerStatics2;
#endif /* !defined(____x_ABI_CWindows_CDevices_CSensors_CIInclinometerStatics2_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Interface Windows.Devices.Sensors.IInclinometerStatics3
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 3.0
 *
 * Interface is a part of the implementation of type Windows.Devices.Sensors.Inclinometer
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x30000
#if !defined(____x_ABI_CWindows_CDevices_CSensors_CIInclinometerStatics3_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CDevices_CSensors_CIInclinometerStatics3_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Devices_Sensors_IInclinometerStatics3[] = L"Windows.Devices.Sensors.IInclinometerStatics3";
namespace ABI {
    namespace Windows {
        namespace Devices {
            namespace Sensors {
                MIDL_INTERFACE("bd9a4280-b91a-4829-9392-abc0b6bdf2b4")
                IInclinometerStatics3 : public IInspectable
                {
                public:
                    virtual HRESULT STDMETHODCALLTYPE GetDefaultWithSensorReadingType(
                        ABI::Windows::Devices::Sensors::SensorReadingType sensorReadingtype,
                        ABI::Windows::Devices::Sensors::IInclinometer** result
                        ) = 0;
                };

                extern MIDL_CONST_ID IID& IID_IInclinometerStatics3 = _uuidof(IInclinometerStatics3);
            } /* Sensors */
        } /* Devices */
    } /* Windows */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CSensors_CIInclinometerStatics3;
#endif /* !defined(____x_ABI_CWindows_CDevices_CSensors_CIInclinometerStatics3_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x30000

/*
 *
 * Interface Windows.Devices.Sensors.IInclinometerStatics4
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 5.0
 *
 * Interface is a part of the implementation of type Windows.Devices.Sensors.Inclinometer
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x50000
#if !defined(____x_ABI_CWindows_CDevices_CSensors_CIInclinometerStatics4_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CDevices_CSensors_CIInclinometerStatics4_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Devices_Sensors_IInclinometerStatics4[] = L"Windows.Devices.Sensors.IInclinometerStatics4";
namespace ABI {
    namespace Windows {
        namespace Devices {
            namespace Sensors {
                MIDL_INTERFACE("e8ba96f9-6e85-4a83-aed0-d7cdcc9856c8")
                IInclinometerStatics4 : public IInspectable
                {
                public:
                    virtual HRESULT STDMETHODCALLTYPE GetDeviceSelector(
                        ABI::Windows::Devices::Sensors::SensorReadingType readingType,
                        HSTRING* result
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE FromIdAsync(
                        HSTRING deviceId,
                        __FIAsyncOperation_1_Windows__CDevices__CSensors__CInclinometer** operation
                        ) = 0;
                };

                extern MIDL_CONST_ID IID& IID_IInclinometerStatics4 = _uuidof(IInclinometerStatics4);
            } /* Sensors */
        } /* Devices */
    } /* Windows */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CSensors_CIInclinometerStatics4;
#endif /* !defined(____x_ABI_CWindows_CDevices_CSensors_CIInclinometerStatics4_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x50000

/*
 *
 * Interface Windows.Devices.Sensors.ILightSensor
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Interface is a part of the implementation of type Windows.Devices.Sensors.LightSensor
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____x_ABI_CWindows_CDevices_CSensors_CILightSensor_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CDevices_CSensors_CILightSensor_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Devices_Sensors_ILightSensor[] = L"Windows.Devices.Sensors.ILightSensor";
namespace ABI {
    namespace Windows {
        namespace Devices {
            namespace Sensors {
                MIDL_INTERFACE("f84c0718-0c54-47ae-922e-789f57fb03a0")
                ILightSensor : public IInspectable
                {
                public:
                    virtual HRESULT STDMETHODCALLTYPE GetCurrentReading(
                        ABI::Windows::Devices::Sensors::ILightSensorReading** value
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE get_MinimumReportInterval(
                        UINT32* value
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE put_ReportInterval(
                        UINT32 value
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE get_ReportInterval(
                        UINT32* value
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE add_ReadingChanged(
                        __FITypedEventHandler_2_Windows__CDevices__CSensors__CLightSensor_Windows__CDevices__CSensors__CLightSensorReadingChangedEventArgs* handler,
                        EventRegistrationToken* token
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE remove_ReadingChanged(
                        EventRegistrationToken token
                        ) = 0;
                };

                extern MIDL_CONST_ID IID& IID_ILightSensor = _uuidof(ILightSensor);
            } /* Sensors */
        } /* Devices */
    } /* Windows */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CSensors_CILightSensor;
#endif /* !defined(____x_ABI_CWindows_CDevices_CSensors_CILightSensor_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Interface Windows.Devices.Sensors.ILightSensor2
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 5.0
 *
 * Interface is a part of the implementation of type Windows.Devices.Sensors.LightSensor
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x50000
#if !defined(____x_ABI_CWindows_CDevices_CSensors_CILightSensor2_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CDevices_CSensors_CILightSensor2_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Devices_Sensors_ILightSensor2[] = L"Windows.Devices.Sensors.ILightSensor2";
namespace ABI {
    namespace Windows {
        namespace Devices {
            namespace Sensors {
                MIDL_INTERFACE("486b24e8-a94c-4090-8f48-09f782a9f7d5")
                ILightSensor2 : public IInspectable
                {
                public:
                    virtual HRESULT STDMETHODCALLTYPE put_ReportLatency(
                        UINT32 value
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE get_ReportLatency(
                        UINT32* value
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE get_MaxBatchSize(
                        UINT32* value
                        ) = 0;
                };

                extern MIDL_CONST_ID IID& IID_ILightSensor2 = _uuidof(ILightSensor2);
            } /* Sensors */
        } /* Devices */
    } /* Windows */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CSensors_CILightSensor2;
#endif /* !defined(____x_ABI_CWindows_CDevices_CSensors_CILightSensor2_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x50000

/*
 *
 * Interface Windows.Devices.Sensors.ILightSensor3
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 10.0
 *
 * Interface is a part of the implementation of type Windows.Devices.Sensors.LightSensor
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0xa0000
#if !defined(____x_ABI_CWindows_CDevices_CSensors_CILightSensor3_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CDevices_CSensors_CILightSensor3_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Devices_Sensors_ILightSensor3[] = L"Windows.Devices.Sensors.ILightSensor3";
namespace ABI {
    namespace Windows {
        namespace Devices {
            namespace Sensors {
                MIDL_INTERFACE("4876d0ff-9f4c-5f72-adbd-a3471b063c00")
                ILightSensor3 : public IInspectable
                {
                public:
                    virtual HRESULT STDMETHODCALLTYPE get_ReportThreshold(
                        ABI::Windows::Devices::Sensors::ILightSensorDataThreshold** value
                        ) = 0;
                };

                extern MIDL_CONST_ID IID& IID_ILightSensor3 = _uuidof(ILightSensor3);
            } /* Sensors */
        } /* Devices */
    } /* Windows */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CSensors_CILightSensor3;
#endif /* !defined(____x_ABI_CWindows_CDevices_CSensors_CILightSensor3_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0xa0000

/*
 *
 * Interface Windows.Devices.Sensors.ILightSensorDataThreshold
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 10.0
 *
 * Interface is a part of the implementation of type Windows.Devices.Sensors.LightSensorDataThreshold
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0xa0000
#if !defined(____x_ABI_CWindows_CDevices_CSensors_CILightSensorDataThreshold_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CDevices_CSensors_CILightSensorDataThreshold_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Devices_Sensors_ILightSensorDataThreshold[] = L"Windows.Devices.Sensors.ILightSensorDataThreshold";
namespace ABI {
    namespace Windows {
        namespace Devices {
            namespace Sensors {
                MIDL_INTERFACE("b160afd1-878f-5492-9f2c-33dc3ae584a3")
                ILightSensorDataThreshold : public IInspectable
                {
                public:
                    virtual HRESULT STDMETHODCALLTYPE get_LuxPercentage(
                        FLOAT* value
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE put_LuxPercentage(
                        FLOAT value
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE get_AbsoluteLux(
                        FLOAT* value
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE put_AbsoluteLux(
                        FLOAT value
                        ) = 0;
                };

                extern MIDL_CONST_ID IID& IID_ILightSensorDataThreshold = _uuidof(ILightSensorDataThreshold);
            } /* Sensors */
        } /* Devices */
    } /* Windows */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CSensors_CILightSensorDataThreshold;
#endif /* !defined(____x_ABI_CWindows_CDevices_CSensors_CILightSensorDataThreshold_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0xa0000

/*
 *
 * Interface Windows.Devices.Sensors.ILightSensorDeviceId
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Interface is a part of the implementation of type Windows.Devices.Sensors.LightSensor
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____x_ABI_CWindows_CDevices_CSensors_CILightSensorDeviceId_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CDevices_CSensors_CILightSensorDeviceId_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Devices_Sensors_ILightSensorDeviceId[] = L"Windows.Devices.Sensors.ILightSensorDeviceId";
namespace ABI {
    namespace Windows {
        namespace Devices {
            namespace Sensors {
                MIDL_INTERFACE("7fee49f8-0afb-4f51-87f0-6c26375ce94f")
                ILightSensorDeviceId : public IInspectable
                {
                public:
                    virtual HRESULT STDMETHODCALLTYPE get_DeviceId(
                        HSTRING* value
                        ) = 0;
                };

                extern MIDL_CONST_ID IID& IID_ILightSensorDeviceId = _uuidof(ILightSensorDeviceId);
            } /* Sensors */
        } /* Devices */
    } /* Windows */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CSensors_CILightSensorDeviceId;
#endif /* !defined(____x_ABI_CWindows_CDevices_CSensors_CILightSensorDeviceId_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Interface Windows.Devices.Sensors.ILightSensorReading
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Interface is a part of the implementation of type Windows.Devices.Sensors.LightSensorReading
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____x_ABI_CWindows_CDevices_CSensors_CILightSensorReading_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CDevices_CSensors_CILightSensorReading_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Devices_Sensors_ILightSensorReading[] = L"Windows.Devices.Sensors.ILightSensorReading";
namespace ABI {
    namespace Windows {
        namespace Devices {
            namespace Sensors {
                MIDL_INTERFACE("ffdf6300-227c-4d2b-b302-fc0142485c68")
                ILightSensorReading : public IInspectable
                {
                public:
                    virtual HRESULT STDMETHODCALLTYPE get_Timestamp(
                        ABI::Windows::Foundation::DateTime* value
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE get_IlluminanceInLux(
                        FLOAT* value
                        ) = 0;
                };

                extern MIDL_CONST_ID IID& IID_ILightSensorReading = _uuidof(ILightSensorReading);
            } /* Sensors */
        } /* Devices */
    } /* Windows */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CSensors_CILightSensorReading;
#endif /* !defined(____x_ABI_CWindows_CDevices_CSensors_CILightSensorReading_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Interface Windows.Devices.Sensors.ILightSensorReading2
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 5.0
 *
 * Interface is a part of the implementation of type Windows.Devices.Sensors.LightSensorReading
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x50000
#if !defined(____x_ABI_CWindows_CDevices_CSensors_CILightSensorReading2_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CDevices_CSensors_CILightSensorReading2_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Devices_Sensors_ILightSensorReading2[] = L"Windows.Devices.Sensors.ILightSensorReading2";
namespace ABI {
    namespace Windows {
        namespace Devices {
            namespace Sensors {
                MIDL_INTERFACE("b7512185-44a3-44c9-8190-9ef6de0a8a74")
                ILightSensorReading2 : public IInspectable
                {
                public:
                    virtual HRESULT STDMETHODCALLTYPE get_PerformanceCount(
                        __FIReference_1_Windows__CFoundation__CTimeSpan** value
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE get_Properties(
                        __FIMapView_2_HSTRING_IInspectable** value
                        ) = 0;
                };

                extern MIDL_CONST_ID IID& IID_ILightSensorReading2 = _uuidof(ILightSensorReading2);
            } /* Sensors */
        } /* Devices */
    } /* Windows */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CSensors_CILightSensorReading2;
#endif /* !defined(____x_ABI_CWindows_CDevices_CSensors_CILightSensorReading2_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x50000

/*
 *
 * Interface Windows.Devices.Sensors.ILightSensorReadingChangedEventArgs
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Interface is a part of the implementation of type Windows.Devices.Sensors.LightSensorReadingChangedEventArgs
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____x_ABI_CWindows_CDevices_CSensors_CILightSensorReadingChangedEventArgs_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CDevices_CSensors_CILightSensorReadingChangedEventArgs_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Devices_Sensors_ILightSensorReadingChangedEventArgs[] = L"Windows.Devices.Sensors.ILightSensorReadingChangedEventArgs";
namespace ABI {
    namespace Windows {
        namespace Devices {
            namespace Sensors {
                MIDL_INTERFACE("a3a2f4cf-258b-420c-b8ab-8edd601ecf50")
                ILightSensorReadingChangedEventArgs : public IInspectable
                {
                public:
                    virtual HRESULT STDMETHODCALLTYPE get_Reading(
                        ABI::Windows::Devices::Sensors::ILightSensorReading** value
                        ) = 0;
                };

                extern MIDL_CONST_ID IID& IID_ILightSensorReadingChangedEventArgs = _uuidof(ILightSensorReadingChangedEventArgs);
            } /* Sensors */
        } /* Devices */
    } /* Windows */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CSensors_CILightSensorReadingChangedEventArgs;
#endif /* !defined(____x_ABI_CWindows_CDevices_CSensors_CILightSensorReadingChangedEventArgs_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Interface Windows.Devices.Sensors.ILightSensorStatics
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Interface is a part of the implementation of type Windows.Devices.Sensors.LightSensor
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____x_ABI_CWindows_CDevices_CSensors_CILightSensorStatics_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CDevices_CSensors_CILightSensorStatics_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Devices_Sensors_ILightSensorStatics[] = L"Windows.Devices.Sensors.ILightSensorStatics";
namespace ABI {
    namespace Windows {
        namespace Devices {
            namespace Sensors {
                MIDL_INTERFACE("45db8c84-c3a8-471e-9a53-6457fad87c0e")
                ILightSensorStatics : public IInspectable
                {
                public:
                    virtual HRESULT STDMETHODCALLTYPE GetDefault(
                        ABI::Windows::Devices::Sensors::ILightSensor** result
                        ) = 0;
                };

                extern MIDL_CONST_ID IID& IID_ILightSensorStatics = _uuidof(ILightSensorStatics);
            } /* Sensors */
        } /* Devices */
    } /* Windows */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CSensors_CILightSensorStatics;
#endif /* !defined(____x_ABI_CWindows_CDevices_CSensors_CILightSensorStatics_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Interface Windows.Devices.Sensors.ILightSensorStatics2
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 5.0
 *
 * Interface is a part of the implementation of type Windows.Devices.Sensors.LightSensor
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x50000
#if !defined(____x_ABI_CWindows_CDevices_CSensors_CILightSensorStatics2_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CDevices_CSensors_CILightSensorStatics2_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Devices_Sensors_ILightSensorStatics2[] = L"Windows.Devices.Sensors.ILightSensorStatics2";
namespace ABI {
    namespace Windows {
        namespace Devices {
            namespace Sensors {
                MIDL_INTERFACE("0ec0a650-ddc6-40ab-ace3-ec3359d42c51")
                ILightSensorStatics2 : public IInspectable
                {
                public:
                    virtual HRESULT STDMETHODCALLTYPE GetDeviceSelector(
                        HSTRING* result
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE FromIdAsync(
                        HSTRING deviceId,
                        __FIAsyncOperation_1_Windows__CDevices__CSensors__CLightSensor** operation
                        ) = 0;
                };

                extern MIDL_CONST_ID IID& IID_ILightSensorStatics2 = _uuidof(ILightSensorStatics2);
            } /* Sensors */
        } /* Devices */
    } /* Windows */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CSensors_CILightSensorStatics2;
#endif /* !defined(____x_ABI_CWindows_CDevices_CSensors_CILightSensorStatics2_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x50000

/*
 *
 * Interface Windows.Devices.Sensors.IMagnetometer
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Interface is a part of the implementation of type Windows.Devices.Sensors.Magnetometer
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____x_ABI_CWindows_CDevices_CSensors_CIMagnetometer_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CDevices_CSensors_CIMagnetometer_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Devices_Sensors_IMagnetometer[] = L"Windows.Devices.Sensors.IMagnetometer";
namespace ABI {
    namespace Windows {
        namespace Devices {
            namespace Sensors {
                MIDL_INTERFACE("484f626e-d3c9-4111-b3f6-2cf1faa418d5")
                IMagnetometer : public IInspectable
                {
                public:
                    virtual HRESULT STDMETHODCALLTYPE GetCurrentReading(
                        ABI::Windows::Devices::Sensors::IMagnetometerReading** value
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE get_MinimumReportInterval(
                        UINT32* value
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE put_ReportInterval(
                        UINT32 value
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE get_ReportInterval(
                        UINT32* value
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE add_ReadingChanged(
                        __FITypedEventHandler_2_Windows__CDevices__CSensors__CMagnetometer_Windows__CDevices__CSensors__CMagnetometerReadingChangedEventArgs* handler,
                        EventRegistrationToken* token
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE remove_ReadingChanged(
                        EventRegistrationToken token
                        ) = 0;
                };

                extern MIDL_CONST_ID IID& IID_IMagnetometer = _uuidof(IMagnetometer);
            } /* Sensors */
        } /* Devices */
    } /* Windows */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CSensors_CIMagnetometer;
#endif /* !defined(____x_ABI_CWindows_CDevices_CSensors_CIMagnetometer_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Interface Windows.Devices.Sensors.IMagnetometer2
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Interface is a part of the implementation of type Windows.Devices.Sensors.Magnetometer
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____x_ABI_CWindows_CDevices_CSensors_CIMagnetometer2_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CDevices_CSensors_CIMagnetometer2_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Devices_Sensors_IMagnetometer2[] = L"Windows.Devices.Sensors.IMagnetometer2";
namespace ABI {
    namespace Windows {
        namespace Devices {
            namespace Sensors {
                MIDL_INTERFACE("b4656c85-26f6-444b-a9e2-a23f966cd368")
                IMagnetometer2 : public IInspectable
                {
                public:
                    virtual HRESULT STDMETHODCALLTYPE put_ReadingTransform(
                        ABI::Windows::Graphics::Display::DisplayOrientations value
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE get_ReadingTransform(
                        ABI::Windows::Graphics::Display::DisplayOrientations* value
                        ) = 0;
                };

                extern MIDL_CONST_ID IID& IID_IMagnetometer2 = _uuidof(IMagnetometer2);
            } /* Sensors */
        } /* Devices */
    } /* Windows */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CSensors_CIMagnetometer2;
#endif /* !defined(____x_ABI_CWindows_CDevices_CSensors_CIMagnetometer2_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Interface Windows.Devices.Sensors.IMagnetometer3
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 5.0
 *
 * Interface is a part of the implementation of type Windows.Devices.Sensors.Magnetometer
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x50000
#if !defined(____x_ABI_CWindows_CDevices_CSensors_CIMagnetometer3_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CDevices_CSensors_CIMagnetometer3_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Devices_Sensors_IMagnetometer3[] = L"Windows.Devices.Sensors.IMagnetometer3";
namespace ABI {
    namespace Windows {
        namespace Devices {
            namespace Sensors {
                MIDL_INTERFACE("be93db7c-a625-48ef-acf7-fac104832671")
                IMagnetometer3 : public IInspectable
                {
                public:
                    virtual HRESULT STDMETHODCALLTYPE put_ReportLatency(
                        UINT32 value
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE get_ReportLatency(
                        UINT32* value
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE get_MaxBatchSize(
                        UINT32* value
                        ) = 0;
                };

                extern MIDL_CONST_ID IID& IID_IMagnetometer3 = _uuidof(IMagnetometer3);
            } /* Sensors */
        } /* Devices */
    } /* Windows */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CSensors_CIMagnetometer3;
#endif /* !defined(____x_ABI_CWindows_CDevices_CSensors_CIMagnetometer3_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x50000

/*
 *
 * Interface Windows.Devices.Sensors.IMagnetometer4
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 10.0
 *
 * Interface is a part of the implementation of type Windows.Devices.Sensors.Magnetometer
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0xa0000
#if !defined(____x_ABI_CWindows_CDevices_CSensors_CIMagnetometer4_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CDevices_CSensors_CIMagnetometer4_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Devices_Sensors_IMagnetometer4[] = L"Windows.Devices.Sensors.IMagnetometer4";
namespace ABI {
    namespace Windows {
        namespace Devices {
            namespace Sensors {
                MIDL_INTERFACE("dfb17901-3e0f-508f-b24b-f2bb75015f40")
                IMagnetometer4 : public IInspectable
                {
                public:
                    virtual HRESULT STDMETHODCALLTYPE get_ReportThreshold(
                        ABI::Windows::Devices::Sensors::IMagnetometerDataThreshold** value
                        ) = 0;
                };

                extern MIDL_CONST_ID IID& IID_IMagnetometer4 = _uuidof(IMagnetometer4);
            } /* Sensors */
        } /* Devices */
    } /* Windows */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CSensors_CIMagnetometer4;
#endif /* !defined(____x_ABI_CWindows_CDevices_CSensors_CIMagnetometer4_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0xa0000

/*
 *
 * Interface Windows.Devices.Sensors.IMagnetometerDataThreshold
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 10.0
 *
 * Interface is a part of the implementation of type Windows.Devices.Sensors.MagnetometerDataThreshold
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0xa0000
#if !defined(____x_ABI_CWindows_CDevices_CSensors_CIMagnetometerDataThreshold_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CDevices_CSensors_CIMagnetometerDataThreshold_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Devices_Sensors_IMagnetometerDataThreshold[] = L"Windows.Devices.Sensors.IMagnetometerDataThreshold";
namespace ABI {
    namespace Windows {
        namespace Devices {
            namespace Sensors {
                MIDL_INTERFACE("d177cb01-9063-5fa5-b596-b445e9dc3401")
                IMagnetometerDataThreshold : public IInspectable
                {
                public:
                    virtual HRESULT STDMETHODCALLTYPE get_XAxisMicroteslas(
                        FLOAT* value
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE put_XAxisMicroteslas(
                        FLOAT value
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE get_YAxisMicroteslas(
                        FLOAT* value
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE put_YAxisMicroteslas(
                        FLOAT value
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE get_ZAxisMicroteslas(
                        FLOAT* value
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE put_ZAxisMicroteslas(
                        FLOAT value
                        ) = 0;
                };

                extern MIDL_CONST_ID IID& IID_IMagnetometerDataThreshold = _uuidof(IMagnetometerDataThreshold);
            } /* Sensors */
        } /* Devices */
    } /* Windows */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CSensors_CIMagnetometerDataThreshold;
#endif /* !defined(____x_ABI_CWindows_CDevices_CSensors_CIMagnetometerDataThreshold_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0xa0000

/*
 *
 * Interface Windows.Devices.Sensors.IMagnetometerDeviceId
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Interface is a part of the implementation of type Windows.Devices.Sensors.Magnetometer
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____x_ABI_CWindows_CDevices_CSensors_CIMagnetometerDeviceId_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CDevices_CSensors_CIMagnetometerDeviceId_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Devices_Sensors_IMagnetometerDeviceId[] = L"Windows.Devices.Sensors.IMagnetometerDeviceId";
namespace ABI {
    namespace Windows {
        namespace Devices {
            namespace Sensors {
                MIDL_INTERFACE("58b498c2-7e4b-404c-9fc5-5de8b40ebae3")
                IMagnetometerDeviceId : public IInspectable
                {
                public:
                    virtual HRESULT STDMETHODCALLTYPE get_DeviceId(
                        HSTRING* value
                        ) = 0;
                };

                extern MIDL_CONST_ID IID& IID_IMagnetometerDeviceId = _uuidof(IMagnetometerDeviceId);
            } /* Sensors */
        } /* Devices */
    } /* Windows */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CSensors_CIMagnetometerDeviceId;
#endif /* !defined(____x_ABI_CWindows_CDevices_CSensors_CIMagnetometerDeviceId_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Interface Windows.Devices.Sensors.IMagnetometerReading
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Interface is a part of the implementation of type Windows.Devices.Sensors.MagnetometerReading
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____x_ABI_CWindows_CDevices_CSensors_CIMagnetometerReading_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CDevices_CSensors_CIMagnetometerReading_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Devices_Sensors_IMagnetometerReading[] = L"Windows.Devices.Sensors.IMagnetometerReading";
namespace ABI {
    namespace Windows {
        namespace Devices {
            namespace Sensors {
                MIDL_INTERFACE("0c2cc40d-ebfd-4e5c-bb11-afc29b3cae61")
                IMagnetometerReading : public IInspectable
                {
                public:
                    virtual HRESULT STDMETHODCALLTYPE get_Timestamp(
                        ABI::Windows::Foundation::DateTime* value
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE get_MagneticFieldX(
                        FLOAT* value
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE get_MagneticFieldY(
                        FLOAT* value
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE get_MagneticFieldZ(
                        FLOAT* value
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE get_DirectionalAccuracy(
                        ABI::Windows::Devices::Sensors::MagnetometerAccuracy* value
                        ) = 0;
                };

                extern MIDL_CONST_ID IID& IID_IMagnetometerReading = _uuidof(IMagnetometerReading);
            } /* Sensors */
        } /* Devices */
    } /* Windows */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CSensors_CIMagnetometerReading;
#endif /* !defined(____x_ABI_CWindows_CDevices_CSensors_CIMagnetometerReading_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Interface Windows.Devices.Sensors.IMagnetometerReading2
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 5.0
 *
 * Interface is a part of the implementation of type Windows.Devices.Sensors.MagnetometerReading
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x50000
#if !defined(____x_ABI_CWindows_CDevices_CSensors_CIMagnetometerReading2_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CDevices_CSensors_CIMagnetometerReading2_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Devices_Sensors_IMagnetometerReading2[] = L"Windows.Devices.Sensors.IMagnetometerReading2";
namespace ABI {
    namespace Windows {
        namespace Devices {
            namespace Sensors {
                MIDL_INTERFACE("d4c95c61-61d9-404b-a328-066f177a1409")
                IMagnetometerReading2 : public IInspectable
                {
                public:
                    virtual HRESULT STDMETHODCALLTYPE get_PerformanceCount(
                        __FIReference_1_Windows__CFoundation__CTimeSpan** value
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE get_Properties(
                        __FIMapView_2_HSTRING_IInspectable** value
                        ) = 0;
                };

                extern MIDL_CONST_ID IID& IID_IMagnetometerReading2 = _uuidof(IMagnetometerReading2);
            } /* Sensors */
        } /* Devices */
    } /* Windows */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CSensors_CIMagnetometerReading2;
#endif /* !defined(____x_ABI_CWindows_CDevices_CSensors_CIMagnetometerReading2_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x50000

/*
 *
 * Interface Windows.Devices.Sensors.IMagnetometerReadingChangedEventArgs
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Interface is a part of the implementation of type Windows.Devices.Sensors.MagnetometerReadingChangedEventArgs
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____x_ABI_CWindows_CDevices_CSensors_CIMagnetometerReadingChangedEventArgs_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CDevices_CSensors_CIMagnetometerReadingChangedEventArgs_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Devices_Sensors_IMagnetometerReadingChangedEventArgs[] = L"Windows.Devices.Sensors.IMagnetometerReadingChangedEventArgs";
namespace ABI {
    namespace Windows {
        namespace Devices {
            namespace Sensors {
                MIDL_INTERFACE("17eae872-2eb9-4ee7-8ad0-3127537d949b")
                IMagnetometerReadingChangedEventArgs : public IInspectable
                {
                public:
                    virtual HRESULT STDMETHODCALLTYPE get_Reading(
                        ABI::Windows::Devices::Sensors::IMagnetometerReading** value
                        ) = 0;
                };

                extern MIDL_CONST_ID IID& IID_IMagnetometerReadingChangedEventArgs = _uuidof(IMagnetometerReadingChangedEventArgs);
            } /* Sensors */
        } /* Devices */
    } /* Windows */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CSensors_CIMagnetometerReadingChangedEventArgs;
#endif /* !defined(____x_ABI_CWindows_CDevices_CSensors_CIMagnetometerReadingChangedEventArgs_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Interface Windows.Devices.Sensors.IMagnetometerStatics
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Interface is a part of the implementation of type Windows.Devices.Sensors.Magnetometer
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____x_ABI_CWindows_CDevices_CSensors_CIMagnetometerStatics_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CDevices_CSensors_CIMagnetometerStatics_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Devices_Sensors_IMagnetometerStatics[] = L"Windows.Devices.Sensors.IMagnetometerStatics";
namespace ABI {
    namespace Windows {
        namespace Devices {
            namespace Sensors {
                MIDL_INTERFACE("853c64cc-0698-4dda-a6df-9cb9cc4ab40a")
                IMagnetometerStatics : public IInspectable
                {
                public:
                    virtual HRESULT STDMETHODCALLTYPE GetDefault(
                        ABI::Windows::Devices::Sensors::IMagnetometer** result
                        ) = 0;
                };

                extern MIDL_CONST_ID IID& IID_IMagnetometerStatics = _uuidof(IMagnetometerStatics);
            } /* Sensors */
        } /* Devices */
    } /* Windows */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CSensors_CIMagnetometerStatics;
#endif /* !defined(____x_ABI_CWindows_CDevices_CSensors_CIMagnetometerStatics_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Interface Windows.Devices.Sensors.IMagnetometerStatics2
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 5.0
 *
 * Interface is a part of the implementation of type Windows.Devices.Sensors.Magnetometer
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x50000
#if !defined(____x_ABI_CWindows_CDevices_CSensors_CIMagnetometerStatics2_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CDevices_CSensors_CIMagnetometerStatics2_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Devices_Sensors_IMagnetometerStatics2[] = L"Windows.Devices.Sensors.IMagnetometerStatics2";
namespace ABI {
    namespace Windows {
        namespace Devices {
            namespace Sensors {
                MIDL_INTERFACE("2c0819f0-ffc6-4f89-a06f-18fa10792933")
                IMagnetometerStatics2 : public IInspectable
                {
                public:
                    virtual HRESULT STDMETHODCALLTYPE GetDeviceSelector(
                        HSTRING* result
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE FromIdAsync(
                        HSTRING deviceId,
                        __FIAsyncOperation_1_Windows__CDevices__CSensors__CMagnetometer** operation
                        ) = 0;
                };

                extern MIDL_CONST_ID IID& IID_IMagnetometerStatics2 = _uuidof(IMagnetometerStatics2);
            } /* Sensors */
        } /* Devices */
    } /* Windows */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CSensors_CIMagnetometerStatics2;
#endif /* !defined(____x_ABI_CWindows_CDevices_CSensors_CIMagnetometerStatics2_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x50000

/*
 *
 * Interface Windows.Devices.Sensors.IOrientationSensor
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Interface is a part of the implementation of type Windows.Devices.Sensors.OrientationSensor
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____x_ABI_CWindows_CDevices_CSensors_CIOrientationSensor_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CDevices_CSensors_CIOrientationSensor_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Devices_Sensors_IOrientationSensor[] = L"Windows.Devices.Sensors.IOrientationSensor";
namespace ABI {
    namespace Windows {
        namespace Devices {
            namespace Sensors {
                MIDL_INTERFACE("5e354635-cf6b-4c63-abd8-10252b0bf6ec")
                IOrientationSensor : public IInspectable
                {
                public:
                    virtual HRESULT STDMETHODCALLTYPE GetCurrentReading(
                        ABI::Windows::Devices::Sensors::IOrientationSensorReading** value
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE get_MinimumReportInterval(
                        UINT32* value
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE put_ReportInterval(
                        UINT32 value
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE get_ReportInterval(
                        UINT32* value
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE add_ReadingChanged(
                        __FITypedEventHandler_2_Windows__CDevices__CSensors__COrientationSensor_Windows__CDevices__CSensors__COrientationSensorReadingChangedEventArgs* handler,
                        EventRegistrationToken* token
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE remove_ReadingChanged(
                        EventRegistrationToken token
                        ) = 0;
                };

                extern MIDL_CONST_ID IID& IID_IOrientationSensor = _uuidof(IOrientationSensor);
            } /* Sensors */
        } /* Devices */
    } /* Windows */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CSensors_CIOrientationSensor;
#endif /* !defined(____x_ABI_CWindows_CDevices_CSensors_CIOrientationSensor_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Interface Windows.Devices.Sensors.IOrientationSensor2
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Interface is a part of the implementation of type Windows.Devices.Sensors.OrientationSensor
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____x_ABI_CWindows_CDevices_CSensors_CIOrientationSensor2_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CDevices_CSensors_CIOrientationSensor2_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Devices_Sensors_IOrientationSensor2[] = L"Windows.Devices.Sensors.IOrientationSensor2";
namespace ABI {
    namespace Windows {
        namespace Devices {
            namespace Sensors {
                MIDL_INTERFACE("0d924cf9-2f1f-49c9-8042-4a1813d67760")
                IOrientationSensor2 : public IInspectable
                {
                public:
                    virtual HRESULT STDMETHODCALLTYPE put_ReadingTransform(
                        ABI::Windows::Graphics::Display::DisplayOrientations value
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE get_ReadingTransform(
                        ABI::Windows::Graphics::Display::DisplayOrientations* value
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE get_ReadingType(
                        ABI::Windows::Devices::Sensors::SensorReadingType* type
                        ) = 0;
                };

                extern MIDL_CONST_ID IID& IID_IOrientationSensor2 = _uuidof(IOrientationSensor2);
            } /* Sensors */
        } /* Devices */
    } /* Windows */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CSensors_CIOrientationSensor2;
#endif /* !defined(____x_ABI_CWindows_CDevices_CSensors_CIOrientationSensor2_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Interface Windows.Devices.Sensors.IOrientationSensor3
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 5.0
 *
 * Interface is a part of the implementation of type Windows.Devices.Sensors.OrientationSensor
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x50000
#if !defined(____x_ABI_CWindows_CDevices_CSensors_CIOrientationSensor3_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CDevices_CSensors_CIOrientationSensor3_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Devices_Sensors_IOrientationSensor3[] = L"Windows.Devices.Sensors.IOrientationSensor3";
namespace ABI {
    namespace Windows {
        namespace Devices {
            namespace Sensors {
                MIDL_INTERFACE("2cce578d-646b-48c5-b7ee-44fdc4c6aafd")
                IOrientationSensor3 : public IInspectable
                {
                public:
                    virtual HRESULT STDMETHODCALLTYPE put_ReportLatency(
                        UINT32 value
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE get_ReportLatency(
                        UINT32* value
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE get_MaxBatchSize(
                        UINT32* value
                        ) = 0;
                };

                extern MIDL_CONST_ID IID& IID_IOrientationSensor3 = _uuidof(IOrientationSensor3);
            } /* Sensors */
        } /* Devices */
    } /* Windows */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CSensors_CIOrientationSensor3;
#endif /* !defined(____x_ABI_CWindows_CDevices_CSensors_CIOrientationSensor3_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x50000

/*
 *
 * Interface Windows.Devices.Sensors.IOrientationSensorDeviceId
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Interface is a part of the implementation of type Windows.Devices.Sensors.OrientationSensor
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorDeviceId_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorDeviceId_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Devices_Sensors_IOrientationSensorDeviceId[] = L"Windows.Devices.Sensors.IOrientationSensorDeviceId";
namespace ABI {
    namespace Windows {
        namespace Devices {
            namespace Sensors {
                MIDL_INTERFACE("5a69b648-4c29-49ec-b28f-ea1d117b66f0")
                IOrientationSensorDeviceId : public IInspectable
                {
                public:
                    virtual HRESULT STDMETHODCALLTYPE get_DeviceId(
                        HSTRING* value
                        ) = 0;
                };

                extern MIDL_CONST_ID IID& IID_IOrientationSensorDeviceId = _uuidof(IOrientationSensorDeviceId);
            } /* Sensors */
        } /* Devices */
    } /* Windows */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorDeviceId;
#endif /* !defined(____x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorDeviceId_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Interface Windows.Devices.Sensors.IOrientationSensorReading
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Interface is a part of the implementation of type Windows.Devices.Sensors.OrientationSensorReading
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorReading_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorReading_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Devices_Sensors_IOrientationSensorReading[] = L"Windows.Devices.Sensors.IOrientationSensorReading";
namespace ABI {
    namespace Windows {
        namespace Devices {
            namespace Sensors {
                MIDL_INTERFACE("4756c993-6595-4897-bcc6-d537ee757564")
                IOrientationSensorReading : public IInspectable
                {
                public:
                    virtual HRESULT STDMETHODCALLTYPE get_Timestamp(
                        ABI::Windows::Foundation::DateTime* value
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE get_RotationMatrix(
                        ABI::Windows::Devices::Sensors::ISensorRotationMatrix** value
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE get_Quaternion(
                        ABI::Windows::Devices::Sensors::ISensorQuaternion** value
                        ) = 0;
                };

                extern MIDL_CONST_ID IID& IID_IOrientationSensorReading = _uuidof(IOrientationSensorReading);
            } /* Sensors */
        } /* Devices */
    } /* Windows */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorReading;
#endif /* !defined(____x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorReading_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Interface Windows.Devices.Sensors.IOrientationSensorReading2
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 5.0
 *
 * Interface is a part of the implementation of type Windows.Devices.Sensors.OrientationSensorReading
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x50000
#if !defined(____x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorReading2_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorReading2_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Devices_Sensors_IOrientationSensorReading2[] = L"Windows.Devices.Sensors.IOrientationSensorReading2";
namespace ABI {
    namespace Windows {
        namespace Devices {
            namespace Sensors {
                MIDL_INTERFACE("00576e5f-49f8-4c05-9e07-24fac79408c3")
                IOrientationSensorReading2 : public IInspectable
                {
                public:
                    virtual HRESULT STDMETHODCALLTYPE get_PerformanceCount(
                        __FIReference_1_Windows__CFoundation__CTimeSpan** value
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE get_Properties(
                        __FIMapView_2_HSTRING_IInspectable** value
                        ) = 0;
                };

                extern MIDL_CONST_ID IID& IID_IOrientationSensorReading2 = _uuidof(IOrientationSensorReading2);
            } /* Sensors */
        } /* Devices */
    } /* Windows */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorReading2;
#endif /* !defined(____x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorReading2_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x50000

/*
 *
 * Interface Windows.Devices.Sensors.IOrientationSensorReadingChangedEventArgs
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Interface is a part of the implementation of type Windows.Devices.Sensors.OrientationSensorReadingChangedEventArgs
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorReadingChangedEventArgs_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorReadingChangedEventArgs_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Devices_Sensors_IOrientationSensorReadingChangedEventArgs[] = L"Windows.Devices.Sensors.IOrientationSensorReadingChangedEventArgs";
namespace ABI {
    namespace Windows {
        namespace Devices {
            namespace Sensors {
                MIDL_INTERFACE("012c1186-c3ba-46bc-ae65-7a98996cbfb8")
                IOrientationSensorReadingChangedEventArgs : public IInspectable
                {
                public:
                    virtual HRESULT STDMETHODCALLTYPE get_Reading(
                        ABI::Windows::Devices::Sensors::IOrientationSensorReading** value
                        ) = 0;
                };

                extern MIDL_CONST_ID IID& IID_IOrientationSensorReadingChangedEventArgs = _uuidof(IOrientationSensorReadingChangedEventArgs);
            } /* Sensors */
        } /* Devices */
    } /* Windows */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorReadingChangedEventArgs;
#endif /* !defined(____x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorReadingChangedEventArgs_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Interface Windows.Devices.Sensors.IOrientationSensorReadingYawAccuracy
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Interface is a part of the implementation of type Windows.Devices.Sensors.OrientationSensorReading
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorReadingYawAccuracy_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorReadingYawAccuracy_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Devices_Sensors_IOrientationSensorReadingYawAccuracy[] = L"Windows.Devices.Sensors.IOrientationSensorReadingYawAccuracy";
namespace ABI {
    namespace Windows {
        namespace Devices {
            namespace Sensors {
                MIDL_INTERFACE("d1ac9824-3f5a-49a2-bc7b-1180bc38cd2b")
                IOrientationSensorReadingYawAccuracy : public IInspectable
                {
                public:
                    virtual HRESULT STDMETHODCALLTYPE get_YawAccuracy(
                        ABI::Windows::Devices::Sensors::MagnetometerAccuracy* value
                        ) = 0;
                };

                extern MIDL_CONST_ID IID& IID_IOrientationSensorReadingYawAccuracy = _uuidof(IOrientationSensorReadingYawAccuracy);
            } /* Sensors */
        } /* Devices */
    } /* Windows */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorReadingYawAccuracy;
#endif /* !defined(____x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorReadingYawAccuracy_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Interface Windows.Devices.Sensors.IOrientationSensorStatics
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Interface is a part of the implementation of type Windows.Devices.Sensors.OrientationSensor
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorStatics_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorStatics_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Devices_Sensors_IOrientationSensorStatics[] = L"Windows.Devices.Sensors.IOrientationSensorStatics";
namespace ABI {
    namespace Windows {
        namespace Devices {
            namespace Sensors {
                MIDL_INTERFACE("10ef8712-fb4c-428a-898b-2765e409e669")
                IOrientationSensorStatics : public IInspectable
                {
                public:
                    virtual HRESULT STDMETHODCALLTYPE GetDefault(
                        ABI::Windows::Devices::Sensors::IOrientationSensor** result
                        ) = 0;
                };

                extern MIDL_CONST_ID IID& IID_IOrientationSensorStatics = _uuidof(IOrientationSensorStatics);
            } /* Sensors */
        } /* Devices */
    } /* Windows */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorStatics;
#endif /* !defined(____x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorStatics_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Interface Windows.Devices.Sensors.IOrientationSensorStatics2
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Interface is a part of the implementation of type Windows.Devices.Sensors.OrientationSensor
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorStatics2_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorStatics2_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Devices_Sensors_IOrientationSensorStatics2[] = L"Windows.Devices.Sensors.IOrientationSensorStatics2";
namespace ABI {
    namespace Windows {
        namespace Devices {
            namespace Sensors {
                MIDL_INTERFACE("59da0d0b-d40a-4c71-9276-8a272a0a6619")
                IOrientationSensorStatics2 : public IInspectable
                {
                public:
                    virtual HRESULT STDMETHODCALLTYPE GetDefaultForRelativeReadings(
                        ABI::Windows::Devices::Sensors::IOrientationSensor** result
                        ) = 0;
                };

                extern MIDL_CONST_ID IID& IID_IOrientationSensorStatics2 = _uuidof(IOrientationSensorStatics2);
            } /* Sensors */
        } /* Devices */
    } /* Windows */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorStatics2;
#endif /* !defined(____x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorStatics2_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Interface Windows.Devices.Sensors.IOrientationSensorStatics3
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 3.0
 *
 * Interface is a part of the implementation of type Windows.Devices.Sensors.OrientationSensor
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x30000
#if !defined(____x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorStatics3_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorStatics3_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Devices_Sensors_IOrientationSensorStatics3[] = L"Windows.Devices.Sensors.IOrientationSensorStatics3";
namespace ABI {
    namespace Windows {
        namespace Devices {
            namespace Sensors {
                MIDL_INTERFACE("d82ce920-2777-40ff-9f59-d654b085f12f")
                IOrientationSensorStatics3 : public IInspectable
                {
                public:
                    virtual HRESULT STDMETHODCALLTYPE GetDefaultWithSensorReadingType(
                        ABI::Windows::Devices::Sensors::SensorReadingType sensorReadingtype,
                        ABI::Windows::Devices::Sensors::IOrientationSensor** result
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE GetDefaultWithSensorReadingTypeAndSensorOptimizationGoal(
                        ABI::Windows::Devices::Sensors::SensorReadingType sensorReadingType,
                        ABI::Windows::Devices::Sensors::SensorOptimizationGoal optimizationGoal,
                        ABI::Windows::Devices::Sensors::IOrientationSensor** result
                        ) = 0;
                };

                extern MIDL_CONST_ID IID& IID_IOrientationSensorStatics3 = _uuidof(IOrientationSensorStatics3);
            } /* Sensors */
        } /* Devices */
    } /* Windows */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorStatics3;
#endif /* !defined(____x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorStatics3_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x30000

/*
 *
 * Interface Windows.Devices.Sensors.IOrientationSensorStatics4
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 5.0
 *
 * Interface is a part of the implementation of type Windows.Devices.Sensors.OrientationSensor
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x50000
#if !defined(____x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorStatics4_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorStatics4_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Devices_Sensors_IOrientationSensorStatics4[] = L"Windows.Devices.Sensors.IOrientationSensorStatics4";
namespace ABI {
    namespace Windows {
        namespace Devices {
            namespace Sensors {
                MIDL_INTERFACE("a67feb55-2c85-4b28-a0fe-58c4b20495f5")
                IOrientationSensorStatics4 : public IInspectable
                {
                public:
                    virtual HRESULT STDMETHODCALLTYPE GetDeviceSelector(
                        ABI::Windows::Devices::Sensors::SensorReadingType readingType,
                        HSTRING* result
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE GetDeviceSelectorWithSensorReadingTypeAndSensorOptimizationGoal(
                        ABI::Windows::Devices::Sensors::SensorReadingType readingType,
                        ABI::Windows::Devices::Sensors::SensorOptimizationGoal optimizationGoal,
                        HSTRING* result
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE FromIdAsync(
                        HSTRING deviceId,
                        __FIAsyncOperation_1_Windows__CDevices__CSensors__COrientationSensor** operation
                        ) = 0;
                };

                extern MIDL_CONST_ID IID& IID_IOrientationSensorStatics4 = _uuidof(IOrientationSensorStatics4);
            } /* Sensors */
        } /* Devices */
    } /* Windows */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorStatics4;
#endif /* !defined(____x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorStatics4_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x50000

/*
 *
 * Interface Windows.Devices.Sensors.IPedometer
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Interface is a part of the implementation of type Windows.Devices.Sensors.Pedometer
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____x_ABI_CWindows_CDevices_CSensors_CIPedometer_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CDevices_CSensors_CIPedometer_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Devices_Sensors_IPedometer[] = L"Windows.Devices.Sensors.IPedometer";
namespace ABI {
    namespace Windows {
        namespace Devices {
            namespace Sensors {
                MIDL_INTERFACE("9a1e013d-3d98-45f8-8920-8e4ecaca5f97")
                IPedometer : public IInspectable
                {
                public:
                    virtual HRESULT STDMETHODCALLTYPE get_DeviceId(
                        HSTRING* value
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE get_PowerInMilliwatts(
                        DOUBLE* value
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE get_MinimumReportInterval(
                        UINT32* value
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE put_ReportInterval(
                        UINT32 value
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE get_ReportInterval(
                        UINT32* value
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE add_ReadingChanged(
                        __FITypedEventHandler_2_Windows__CDevices__CSensors__CPedometer_Windows__CDevices__CSensors__CPedometerReadingChangedEventArgs* handler,
                        EventRegistrationToken* token
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE remove_ReadingChanged(
                        EventRegistrationToken token
                        ) = 0;
                };

                extern MIDL_CONST_ID IID& IID_IPedometer = _uuidof(IPedometer);
            } /* Sensors */
        } /* Devices */
    } /* Windows */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CSensors_CIPedometer;
#endif /* !defined(____x_ABI_CWindows_CDevices_CSensors_CIPedometer_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Interface Windows.Devices.Sensors.IPedometer2
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 2.0
 *
 * Interface is a part of the implementation of type Windows.Devices.Sensors.Pedometer
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x20000
#if !defined(____x_ABI_CWindows_CDevices_CSensors_CIPedometer2_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CDevices_CSensors_CIPedometer2_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Devices_Sensors_IPedometer2[] = L"Windows.Devices.Sensors.IPedometer2";
namespace ABI {
    namespace Windows {
        namespace Devices {
            namespace Sensors {
                MIDL_INTERFACE("e5a406df-2b81-4add-b2ff-77ab6c98ba19")
                IPedometer2 : public IInspectable
                {
                public:
                    virtual HRESULT STDMETHODCALLTYPE GetCurrentReadings(
                        __FIMapView_2_Windows__CDevices__CSensors__CPedometerStepKind_Windows__CDevices__CSensors__CPedometerReading** value
                        ) = 0;
                };

                extern MIDL_CONST_ID IID& IID_IPedometer2 = _uuidof(IPedometer2);
            } /* Sensors */
        } /* Devices */
    } /* Windows */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CSensors_CIPedometer2;
#endif /* !defined(____x_ABI_CWindows_CDevices_CSensors_CIPedometer2_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x20000

/*
 *
 * Interface Windows.Devices.Sensors.IPedometerDataThresholdFactory
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 2.0
 *
 * Interface is a part of the implementation of type Windows.Devices.Sensors.PedometerDataThreshold
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x20000
#if !defined(____x_ABI_CWindows_CDevices_CSensors_CIPedometerDataThresholdFactory_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CDevices_CSensors_CIPedometerDataThresholdFactory_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Devices_Sensors_IPedometerDataThresholdFactory[] = L"Windows.Devices.Sensors.IPedometerDataThresholdFactory";
namespace ABI {
    namespace Windows {
        namespace Devices {
            namespace Sensors {
                MIDL_INTERFACE("cbad8f50-7a54-466b-9010-77a162fca5d7")
                IPedometerDataThresholdFactory : public IInspectable
                {
                public:
                    virtual HRESULT STDMETHODCALLTYPE Create(
                        ABI::Windows::Devices::Sensors::IPedometer* sensor,
                        INT32 stepGoal,
                        ABI::Windows::Devices::Sensors::ISensorDataThreshold** threshold
                        ) = 0;
                };

                extern MIDL_CONST_ID IID& IID_IPedometerDataThresholdFactory = _uuidof(IPedometerDataThresholdFactory);
            } /* Sensors */
        } /* Devices */
    } /* Windows */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CSensors_CIPedometerDataThresholdFactory;
#endif /* !defined(____x_ABI_CWindows_CDevices_CSensors_CIPedometerDataThresholdFactory_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x20000

/*
 *
 * Interface Windows.Devices.Sensors.IPedometerReading
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Interface is a part of the implementation of type Windows.Devices.Sensors.PedometerReading
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____x_ABI_CWindows_CDevices_CSensors_CIPedometerReading_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CDevices_CSensors_CIPedometerReading_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Devices_Sensors_IPedometerReading[] = L"Windows.Devices.Sensors.IPedometerReading";
namespace ABI {
    namespace Windows {
        namespace Devices {
            namespace Sensors {
                MIDL_INTERFACE("2245dcf4-a8e1-432f-896a-be0dd9b02d24")
                IPedometerReading : public IInspectable
                {
                public:
                    virtual HRESULT STDMETHODCALLTYPE get_StepKind(
                        ABI::Windows::Devices::Sensors::PedometerStepKind* value
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE get_CumulativeSteps(
                        INT32* value
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE get_Timestamp(
                        ABI::Windows::Foundation::DateTime* value
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE get_CumulativeStepsDuration(
                        ABI::Windows::Foundation::TimeSpan* value
                        ) = 0;
                };

                extern MIDL_CONST_ID IID& IID_IPedometerReading = _uuidof(IPedometerReading);
            } /* Sensors */
        } /* Devices */
    } /* Windows */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CSensors_CIPedometerReading;
#endif /* !defined(____x_ABI_CWindows_CDevices_CSensors_CIPedometerReading_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Interface Windows.Devices.Sensors.IPedometerReadingChangedEventArgs
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Interface is a part of the implementation of type Windows.Devices.Sensors.PedometerReadingChangedEventArgs
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____x_ABI_CWindows_CDevices_CSensors_CIPedometerReadingChangedEventArgs_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CDevices_CSensors_CIPedometerReadingChangedEventArgs_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Devices_Sensors_IPedometerReadingChangedEventArgs[] = L"Windows.Devices.Sensors.IPedometerReadingChangedEventArgs";
namespace ABI {
    namespace Windows {
        namespace Devices {
            namespace Sensors {
                MIDL_INTERFACE("f855e47e-abbc-4456-86a8-25cf2b333742")
                IPedometerReadingChangedEventArgs : public IInspectable
                {
                public:
                    virtual HRESULT STDMETHODCALLTYPE get_Reading(
                        ABI::Windows::Devices::Sensors::IPedometerReading** value
                        ) = 0;
                };

                extern MIDL_CONST_ID IID& IID_IPedometerReadingChangedEventArgs = _uuidof(IPedometerReadingChangedEventArgs);
            } /* Sensors */
        } /* Devices */
    } /* Windows */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CSensors_CIPedometerReadingChangedEventArgs;
#endif /* !defined(____x_ABI_CWindows_CDevices_CSensors_CIPedometerReadingChangedEventArgs_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Interface Windows.Devices.Sensors.IPedometerStatics
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Interface is a part of the implementation of type Windows.Devices.Sensors.Pedometer
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____x_ABI_CWindows_CDevices_CSensors_CIPedometerStatics_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CDevices_CSensors_CIPedometerStatics_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Devices_Sensors_IPedometerStatics[] = L"Windows.Devices.Sensors.IPedometerStatics";
namespace ABI {
    namespace Windows {
        namespace Devices {
            namespace Sensors {
                MIDL_INTERFACE("82980a2f-4083-4dfb-b411-938ea0f4b946")
                IPedometerStatics : public IInspectable
                {
                public:
                    virtual HRESULT STDMETHODCALLTYPE FromIdAsync(
                        HSTRING deviceId,
                        __FIAsyncOperation_1_Windows__CDevices__CSensors__CPedometer** operation
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE GetDefaultAsync(
                        __FIAsyncOperation_1_Windows__CDevices__CSensors__CPedometer** operation
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE GetDeviceSelector(
                        HSTRING* result
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE GetSystemHistoryAsync(
                        ABI::Windows::Foundation::DateTime fromTime,
                        __FIAsyncOperation_1___FIVectorView_1_Windows__CDevices__CSensors__CPedometerReading** operation
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE GetSystemHistoryWithDurationAsync(
                        ABI::Windows::Foundation::DateTime fromTime,
                        ABI::Windows::Foundation::TimeSpan duration,
                        __FIAsyncOperation_1___FIVectorView_1_Windows__CDevices__CSensors__CPedometerReading** operation
                        ) = 0;
                };

                extern MIDL_CONST_ID IID& IID_IPedometerStatics = _uuidof(IPedometerStatics);
            } /* Sensors */
        } /* Devices */
    } /* Windows */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CSensors_CIPedometerStatics;
#endif /* !defined(____x_ABI_CWindows_CDevices_CSensors_CIPedometerStatics_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Interface Windows.Devices.Sensors.IPedometerStatics2
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 2.0
 *
 * Interface is a part of the implementation of type Windows.Devices.Sensors.Pedometer
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x20000
#if !defined(____x_ABI_CWindows_CDevices_CSensors_CIPedometerStatics2_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CDevices_CSensors_CIPedometerStatics2_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Devices_Sensors_IPedometerStatics2[] = L"Windows.Devices.Sensors.IPedometerStatics2";
namespace ABI {
    namespace Windows {
        namespace Devices {
            namespace Sensors {
                MIDL_INTERFACE("79f5c6bb-ce0e-4133-b47e-8627ea72f677")
                IPedometerStatics2 : public IInspectable
                {
                public:
                    virtual HRESULT STDMETHODCALLTYPE GetReadingsFromTriggerDetails(
                        ABI::Windows::Devices::Sensors::ISensorDataThresholdTriggerDetails* triggerDetails,
                        __FIVectorView_1_Windows__CDevices__CSensors__CPedometerReading** result
                        ) = 0;
                };

                extern MIDL_CONST_ID IID& IID_IPedometerStatics2 = _uuidof(IPedometerStatics2);
            } /* Sensors */
        } /* Devices */
    } /* Windows */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CSensors_CIPedometerStatics2;
#endif /* !defined(____x_ABI_CWindows_CDevices_CSensors_CIPedometerStatics2_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x20000

/*
 *
 * Interface Windows.Devices.Sensors.IProximitySensor
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Interface is a part of the implementation of type Windows.Devices.Sensors.ProximitySensor
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____x_ABI_CWindows_CDevices_CSensors_CIProximitySensor_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CDevices_CSensors_CIProximitySensor_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Devices_Sensors_IProximitySensor[] = L"Windows.Devices.Sensors.IProximitySensor";
namespace ABI {
    namespace Windows {
        namespace Devices {
            namespace Sensors {
                MIDL_INTERFACE("54c076b8-ecfb-4944-b928-74fc504d47ee")
                IProximitySensor : public IInspectable
                {
                public:
                    virtual HRESULT STDMETHODCALLTYPE get_DeviceId(
                        HSTRING* value
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE get_MaxDistanceInMillimeters(
                        __FIReference_1_UINT32** value
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE get_MinDistanceInMillimeters(
                        __FIReference_1_UINT32** value
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE GetCurrentReading(
                        ABI::Windows::Devices::Sensors::IProximitySensorReading** value
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE add_ReadingChanged(
                        __FITypedEventHandler_2_Windows__CDevices__CSensors__CProximitySensor_Windows__CDevices__CSensors__CProximitySensorReadingChangedEventArgs* handler,
                        EventRegistrationToken* token
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE remove_ReadingChanged(
                        EventRegistrationToken token
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE CreateDisplayOnOffController(
                        ABI::Windows::Foundation::IClosable** controller
                        ) = 0;
                };

                extern MIDL_CONST_ID IID& IID_IProximitySensor = _uuidof(IProximitySensor);
            } /* Sensors */
        } /* Devices */
    } /* Windows */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CSensors_CIProximitySensor;
#endif /* !defined(____x_ABI_CWindows_CDevices_CSensors_CIProximitySensor_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Interface Windows.Devices.Sensors.IProximitySensorDataThresholdFactory
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 2.0
 *
 * Interface is a part of the implementation of type Windows.Devices.Sensors.ProximitySensorDataThreshold
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x20000
#if !defined(____x_ABI_CWindows_CDevices_CSensors_CIProximitySensorDataThresholdFactory_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CDevices_CSensors_CIProximitySensorDataThresholdFactory_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Devices_Sensors_IProximitySensorDataThresholdFactory[] = L"Windows.Devices.Sensors.IProximitySensorDataThresholdFactory";
namespace ABI {
    namespace Windows {
        namespace Devices {
            namespace Sensors {
                MIDL_INTERFACE("905ac121-6d27-4ad3-9db5-6467f2a5ad9d")
                IProximitySensorDataThresholdFactory : public IInspectable
                {
                public:
                    virtual HRESULT STDMETHODCALLTYPE Create(
                        ABI::Windows::Devices::Sensors::IProximitySensor* sensor,
                        ABI::Windows::Devices::Sensors::ISensorDataThreshold** threshold
                        ) = 0;
                };

                extern MIDL_CONST_ID IID& IID_IProximitySensorDataThresholdFactory = _uuidof(IProximitySensorDataThresholdFactory);
            } /* Sensors */
        } /* Devices */
    } /* Windows */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CSensors_CIProximitySensorDataThresholdFactory;
#endif /* !defined(____x_ABI_CWindows_CDevices_CSensors_CIProximitySensorDataThresholdFactory_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x20000

/*
 *
 * Interface Windows.Devices.Sensors.IProximitySensorReading
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Interface is a part of the implementation of type Windows.Devices.Sensors.ProximitySensorReading
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____x_ABI_CWindows_CDevices_CSensors_CIProximitySensorReading_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CDevices_CSensors_CIProximitySensorReading_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Devices_Sensors_IProximitySensorReading[] = L"Windows.Devices.Sensors.IProximitySensorReading";
namespace ABI {
    namespace Windows {
        namespace Devices {
            namespace Sensors {
                MIDL_INTERFACE("71228d59-132d-4d5f-8ff9-2f0db8751ced")
                IProximitySensorReading : public IInspectable
                {
                public:
                    virtual HRESULT STDMETHODCALLTYPE get_Timestamp(
                        ABI::Windows::Foundation::DateTime* value
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE get_IsDetected(
                        boolean* value
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE get_DistanceInMillimeters(
                        __FIReference_1_UINT32** value
                        ) = 0;
                };

                extern MIDL_CONST_ID IID& IID_IProximitySensorReading = _uuidof(IProximitySensorReading);
            } /* Sensors */
        } /* Devices */
    } /* Windows */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CSensors_CIProximitySensorReading;
#endif /* !defined(____x_ABI_CWindows_CDevices_CSensors_CIProximitySensorReading_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Interface Windows.Devices.Sensors.IProximitySensorReadingChangedEventArgs
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Interface is a part of the implementation of type Windows.Devices.Sensors.ProximitySensorReadingChangedEventArgs
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____x_ABI_CWindows_CDevices_CSensors_CIProximitySensorReadingChangedEventArgs_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CDevices_CSensors_CIProximitySensorReadingChangedEventArgs_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Devices_Sensors_IProximitySensorReadingChangedEventArgs[] = L"Windows.Devices.Sensors.IProximitySensorReadingChangedEventArgs";
namespace ABI {
    namespace Windows {
        namespace Devices {
            namespace Sensors {
                MIDL_INTERFACE("cfc2f366-c3e8-40fd-8cc3-67e289004938")
                IProximitySensorReadingChangedEventArgs : public IInspectable
                {
                public:
                    virtual HRESULT STDMETHODCALLTYPE get_Reading(
                        ABI::Windows::Devices::Sensors::IProximitySensorReading** value
                        ) = 0;
                };

                extern MIDL_CONST_ID IID& IID_IProximitySensorReadingChangedEventArgs = _uuidof(IProximitySensorReadingChangedEventArgs);
            } /* Sensors */
        } /* Devices */
    } /* Windows */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CSensors_CIProximitySensorReadingChangedEventArgs;
#endif /* !defined(____x_ABI_CWindows_CDevices_CSensors_CIProximitySensorReadingChangedEventArgs_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Interface Windows.Devices.Sensors.IProximitySensorStatics
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Interface is a part of the implementation of type Windows.Devices.Sensors.ProximitySensor
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____x_ABI_CWindows_CDevices_CSensors_CIProximitySensorStatics_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CDevices_CSensors_CIProximitySensorStatics_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Devices_Sensors_IProximitySensorStatics[] = L"Windows.Devices.Sensors.IProximitySensorStatics";
namespace ABI {
    namespace Windows {
        namespace Devices {
            namespace Sensors {
                MIDL_INTERFACE("29186649-6269-4e57-a5ad-82be80813392")
                IProximitySensorStatics : public IInspectable
                {
                public:
                    virtual HRESULT STDMETHODCALLTYPE GetDeviceSelector(
                        HSTRING* value
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE FromId(
                        HSTRING sensorId,
                        ABI::Windows::Devices::Sensors::IProximitySensor** result
                        ) = 0;
                };

                extern MIDL_CONST_ID IID& IID_IProximitySensorStatics = _uuidof(IProximitySensorStatics);
            } /* Sensors */
        } /* Devices */
    } /* Windows */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CSensors_CIProximitySensorStatics;
#endif /* !defined(____x_ABI_CWindows_CDevices_CSensors_CIProximitySensorStatics_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Interface Windows.Devices.Sensors.IProximitySensorStatics2
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 2.0
 *
 * Interface is a part of the implementation of type Windows.Devices.Sensors.ProximitySensor
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x20000
#if !defined(____x_ABI_CWindows_CDevices_CSensors_CIProximitySensorStatics2_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CDevices_CSensors_CIProximitySensorStatics2_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Devices_Sensors_IProximitySensorStatics2[] = L"Windows.Devices.Sensors.IProximitySensorStatics2";
namespace ABI {
    namespace Windows {
        namespace Devices {
            namespace Sensors {
                MIDL_INTERFACE("cbf473ae-e9ca-422f-ad67-4c3d25df350c")
                IProximitySensorStatics2 : public IInspectable
                {
                public:
                    virtual HRESULT STDMETHODCALLTYPE GetReadingsFromTriggerDetails(
                        ABI::Windows::Devices::Sensors::ISensorDataThresholdTriggerDetails* triggerDetails,
                        __FIVectorView_1_Windows__CDevices__CSensors__CProximitySensorReading** result
                        ) = 0;
                };

                extern MIDL_CONST_ID IID& IID_IProximitySensorStatics2 = _uuidof(IProximitySensorStatics2);
            } /* Sensors */
        } /* Devices */
    } /* Windows */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CSensors_CIProximitySensorStatics2;
#endif /* !defined(____x_ABI_CWindows_CDevices_CSensors_CIProximitySensorStatics2_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x20000

/*
 *
 * Interface Windows.Devices.Sensors.ISensorDataThreshold
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 2.0
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x20000
#if !defined(____x_ABI_CWindows_CDevices_CSensors_CISensorDataThreshold_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CDevices_CSensors_CISensorDataThreshold_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Devices_Sensors_ISensorDataThreshold[] = L"Windows.Devices.Sensors.ISensorDataThreshold";
namespace ABI {
    namespace Windows {
        namespace Devices {
            namespace Sensors {
                MIDL_INTERFACE("54daec61-fe4b-4e07-b260-3a4cdfbe396e")
                ISensorDataThreshold : public IInspectable
                {
                public:
                };

                extern MIDL_CONST_ID IID& IID_ISensorDataThreshold = _uuidof(ISensorDataThreshold);
            } /* Sensors */
        } /* Devices */
    } /* Windows */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CSensors_CISensorDataThreshold;
#endif /* !defined(____x_ABI_CWindows_CDevices_CSensors_CISensorDataThreshold_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x20000

/*
 *
 * Interface Windows.Devices.Sensors.ISensorDataThresholdTriggerDetails
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 2.0
 *
 * Interface is a part of the implementation of type Windows.Devices.Sensors.SensorDataThresholdTriggerDetails
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x20000
#if !defined(____x_ABI_CWindows_CDevices_CSensors_CISensorDataThresholdTriggerDetails_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CDevices_CSensors_CISensorDataThresholdTriggerDetails_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Devices_Sensors_ISensorDataThresholdTriggerDetails[] = L"Windows.Devices.Sensors.ISensorDataThresholdTriggerDetails";
namespace ABI {
    namespace Windows {
        namespace Devices {
            namespace Sensors {
                MIDL_INTERFACE("9106f1b7-e88d-48b1-bc90-619c7b349391")
                ISensorDataThresholdTriggerDetails : public IInspectable
                {
                public:
                    virtual HRESULT STDMETHODCALLTYPE get_DeviceId(
                        HSTRING* value
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE get_SensorType(
                        ABI::Windows::Devices::Sensors::SensorType* value
                        ) = 0;
                };

                extern MIDL_CONST_ID IID& IID_ISensorDataThresholdTriggerDetails = _uuidof(ISensorDataThresholdTriggerDetails);
            } /* Sensors */
        } /* Devices */
    } /* Windows */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CSensors_CISensorDataThresholdTriggerDetails;
#endif /* !defined(____x_ABI_CWindows_CDevices_CSensors_CISensorDataThresholdTriggerDetails_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x20000

/*
 *
 * Interface Windows.Devices.Sensors.ISensorQuaternion
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Interface is a part of the implementation of type Windows.Devices.Sensors.SensorQuaternion
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____x_ABI_CWindows_CDevices_CSensors_CISensorQuaternion_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CDevices_CSensors_CISensorQuaternion_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Devices_Sensors_ISensorQuaternion[] = L"Windows.Devices.Sensors.ISensorQuaternion";
namespace ABI {
    namespace Windows {
        namespace Devices {
            namespace Sensors {
                MIDL_INTERFACE("c9c5c827-c71c-46e7-9da3-36a193b232bc")
                ISensorQuaternion : public IInspectable
                {
                public:
                    virtual HRESULT STDMETHODCALLTYPE get_W(
                        FLOAT* value
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE get_X(
                        FLOAT* value
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE get_Y(
                        FLOAT* value
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE get_Z(
                        FLOAT* value
                        ) = 0;
                };

                extern MIDL_CONST_ID IID& IID_ISensorQuaternion = _uuidof(ISensorQuaternion);
            } /* Sensors */
        } /* Devices */
    } /* Windows */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CSensors_CISensorQuaternion;
#endif /* !defined(____x_ABI_CWindows_CDevices_CSensors_CISensorQuaternion_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Interface Windows.Devices.Sensors.ISensorRotationMatrix
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Interface is a part of the implementation of type Windows.Devices.Sensors.SensorRotationMatrix
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____x_ABI_CWindows_CDevices_CSensors_CISensorRotationMatrix_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CDevices_CSensors_CISensorRotationMatrix_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Devices_Sensors_ISensorRotationMatrix[] = L"Windows.Devices.Sensors.ISensorRotationMatrix";
namespace ABI {
    namespace Windows {
        namespace Devices {
            namespace Sensors {
                MIDL_INTERFACE("0a3d5a67-22f4-4392-9538-65d0bd064aa6")
                ISensorRotationMatrix : public IInspectable
                {
                public:
                    virtual HRESULT STDMETHODCALLTYPE get_M11(
                        FLOAT* value
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE get_M12(
                        FLOAT* value
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE get_M13(
                        FLOAT* value
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE get_M21(
                        FLOAT* value
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE get_M22(
                        FLOAT* value
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE get_M23(
                        FLOAT* value
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE get_M31(
                        FLOAT* value
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE get_M32(
                        FLOAT* value
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE get_M33(
                        FLOAT* value
                        ) = 0;
                };

                extern MIDL_CONST_ID IID& IID_ISensorRotationMatrix = _uuidof(ISensorRotationMatrix);
            } /* Sensors */
        } /* Devices */
    } /* Windows */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CSensors_CISensorRotationMatrix;
#endif /* !defined(____x_ABI_CWindows_CDevices_CSensors_CISensorRotationMatrix_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Interface Windows.Devices.Sensors.ISimpleOrientationSensor
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Interface is a part of the implementation of type Windows.Devices.Sensors.SimpleOrientationSensor
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensor_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensor_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Devices_Sensors_ISimpleOrientationSensor[] = L"Windows.Devices.Sensors.ISimpleOrientationSensor";
namespace ABI {
    namespace Windows {
        namespace Devices {
            namespace Sensors {
                MIDL_INTERFACE("5ff53856-214a-4dee-a3f9-616f1ab06ffd")
                ISimpleOrientationSensor : public IInspectable
                {
                public:
                    virtual HRESULT STDMETHODCALLTYPE GetCurrentOrientation(
                        ABI::Windows::Devices::Sensors::SimpleOrientation* value
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE add_OrientationChanged(
                        __FITypedEventHandler_2_Windows__CDevices__CSensors__CSimpleOrientationSensor_Windows__CDevices__CSensors__CSimpleOrientationSensorOrientationChangedEventArgs* handler,
                        EventRegistrationToken* token
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE remove_OrientationChanged(
                        EventRegistrationToken token
                        ) = 0;
                };

                extern MIDL_CONST_ID IID& IID_ISimpleOrientationSensor = _uuidof(ISimpleOrientationSensor);
            } /* Sensors */
        } /* Devices */
    } /* Windows */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensor;
#endif /* !defined(____x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensor_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Interface Windows.Devices.Sensors.ISimpleOrientationSensor2
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Interface is a part of the implementation of type Windows.Devices.Sensors.SimpleOrientationSensor
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensor2_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensor2_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Devices_Sensors_ISimpleOrientationSensor2[] = L"Windows.Devices.Sensors.ISimpleOrientationSensor2";
namespace ABI {
    namespace Windows {
        namespace Devices {
            namespace Sensors {
                MIDL_INTERFACE("a277a798-8870-453e-8bd6-b8f5d8d7941b")
                ISimpleOrientationSensor2 : public IInspectable
                {
                public:
                    virtual HRESULT STDMETHODCALLTYPE put_ReadingTransform(
                        ABI::Windows::Graphics::Display::DisplayOrientations value
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE get_ReadingTransform(
                        ABI::Windows::Graphics::Display::DisplayOrientations* value
                        ) = 0;
                };

                extern MIDL_CONST_ID IID& IID_ISimpleOrientationSensor2 = _uuidof(ISimpleOrientationSensor2);
            } /* Sensors */
        } /* Devices */
    } /* Windows */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensor2;
#endif /* !defined(____x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensor2_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Interface Windows.Devices.Sensors.ISimpleOrientationSensorDeviceId
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Interface is a part of the implementation of type Windows.Devices.Sensors.SimpleOrientationSensor
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensorDeviceId_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensorDeviceId_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Devices_Sensors_ISimpleOrientationSensorDeviceId[] = L"Windows.Devices.Sensors.ISimpleOrientationSensorDeviceId";
namespace ABI {
    namespace Windows {
        namespace Devices {
            namespace Sensors {
                MIDL_INTERFACE("fbc00acb-3b76-41f6-8091-30efe646d3cf")
                ISimpleOrientationSensorDeviceId : public IInspectable
                {
                public:
                    virtual HRESULT STDMETHODCALLTYPE get_DeviceId(
                        HSTRING* value
                        ) = 0;
                };

                extern MIDL_CONST_ID IID& IID_ISimpleOrientationSensorDeviceId = _uuidof(ISimpleOrientationSensorDeviceId);
            } /* Sensors */
        } /* Devices */
    } /* Windows */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensorDeviceId;
#endif /* !defined(____x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensorDeviceId_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Interface Windows.Devices.Sensors.ISimpleOrientationSensorOrientationChangedEventArgs
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Interface is a part of the implementation of type Windows.Devices.Sensors.SimpleOrientationSensorOrientationChangedEventArgs
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensorOrientationChangedEventArgs_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensorOrientationChangedEventArgs_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Devices_Sensors_ISimpleOrientationSensorOrientationChangedEventArgs[] = L"Windows.Devices.Sensors.ISimpleOrientationSensorOrientationChangedEventArgs";
namespace ABI {
    namespace Windows {
        namespace Devices {
            namespace Sensors {
                MIDL_INTERFACE("bcd5c660-23d4-4b4c-a22e-ba81ade0c601")
                ISimpleOrientationSensorOrientationChangedEventArgs : public IInspectable
                {
                public:
                    virtual HRESULT STDMETHODCALLTYPE get_Timestamp(
                        ABI::Windows::Foundation::DateTime* value
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE get_Orientation(
                        ABI::Windows::Devices::Sensors::SimpleOrientation* value
                        ) = 0;
                };

                extern MIDL_CONST_ID IID& IID_ISimpleOrientationSensorOrientationChangedEventArgs = _uuidof(ISimpleOrientationSensorOrientationChangedEventArgs);
            } /* Sensors */
        } /* Devices */
    } /* Windows */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensorOrientationChangedEventArgs;
#endif /* !defined(____x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensorOrientationChangedEventArgs_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Interface Windows.Devices.Sensors.ISimpleOrientationSensorStatics
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Interface is a part of the implementation of type Windows.Devices.Sensors.SimpleOrientationSensor
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensorStatics_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensorStatics_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Devices_Sensors_ISimpleOrientationSensorStatics[] = L"Windows.Devices.Sensors.ISimpleOrientationSensorStatics";
namespace ABI {
    namespace Windows {
        namespace Devices {
            namespace Sensors {
                MIDL_INTERFACE("72ed066f-70aa-40c6-9b1b-3433f7459b4e")
                ISimpleOrientationSensorStatics : public IInspectable
                {
                public:
                    virtual HRESULT STDMETHODCALLTYPE GetDefault(
                        ABI::Windows::Devices::Sensors::ISimpleOrientationSensor** result
                        ) = 0;
                };

                extern MIDL_CONST_ID IID& IID_ISimpleOrientationSensorStatics = _uuidof(ISimpleOrientationSensorStatics);
            } /* Sensors */
        } /* Devices */
    } /* Windows */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensorStatics;
#endif /* !defined(____x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensorStatics_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Interface Windows.Devices.Sensors.ISimpleOrientationSensorStatics2
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 7.0
 *
 * Interface is a part of the implementation of type Windows.Devices.Sensors.SimpleOrientationSensor
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x70000
#if !defined(____x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensorStatics2_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensorStatics2_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Devices_Sensors_ISimpleOrientationSensorStatics2[] = L"Windows.Devices.Sensors.ISimpleOrientationSensorStatics2";
namespace ABI {
    namespace Windows {
        namespace Devices {
            namespace Sensors {
                MIDL_INTERFACE("848f9c7f-b138-4e11-8910-a2a2a3b56d83")
                ISimpleOrientationSensorStatics2 : public IInspectable
                {
                public:
                    virtual HRESULT STDMETHODCALLTYPE GetDeviceSelector(
                        HSTRING* value
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE FromIdAsync(
                        HSTRING deviceId,
                        __FIAsyncOperation_1_Windows__CDevices__CSensors__CSimpleOrientationSensor** result
                        ) = 0;
                };

                extern MIDL_CONST_ID IID& IID_ISimpleOrientationSensorStatics2 = _uuidof(ISimpleOrientationSensorStatics2);
            } /* Sensors */
        } /* Devices */
    } /* Windows */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensorStatics2;
#endif /* !defined(____x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensorStatics2_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x70000

/*
 *
 * Class Windows.Devices.Sensors.Accelerometer
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * RuntimeClass contains static methods.
 *   Static Methods exist on the Windows.Devices.Sensors.IAccelerometerStatics interface starting with version 1.0 of the Windows.Foundation.UniversalApiContract API contract
 *   Static Methods exist on the Windows.Devices.Sensors.IAccelerometerStatics2 interface starting with version 3.0 of the Windows.Foundation.UniversalApiContract API contract
 *   Static Methods exist on the Windows.Devices.Sensors.IAccelerometerStatics3 interface starting with version 5.0 of the Windows.Foundation.UniversalApiContract API contract
 *
 * Class implements the following interfaces:
 *    Windows.Devices.Sensors.IAccelerometer ** Default Interface **
 *    Windows.Devices.Sensors.IAccelerometerDeviceId
 *    Windows.Devices.Sensors.IAccelerometer2
 *    Windows.Devices.Sensors.IAccelerometer3
 *    Windows.Devices.Sensors.IAccelerometer4
 *    Windows.Devices.Sensors.IAccelerometer5
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#ifndef RUNTIMECLASS_Windows_Devices_Sensors_Accelerometer_DEFINED
#define RUNTIMECLASS_Windows_Devices_Sensors_Accelerometer_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Windows_Devices_Sensors_Accelerometer[] = L"Windows.Devices.Sensors.Accelerometer";
#endif
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Class Windows.Devices.Sensors.AccelerometerDataThreshold
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 10.0
 *
 * Class implements the following interfaces:
 *    Windows.Devices.Sensors.IAccelerometerDataThreshold ** Default Interface **
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0xa0000
#ifndef RUNTIMECLASS_Windows_Devices_Sensors_AccelerometerDataThreshold_DEFINED
#define RUNTIMECLASS_Windows_Devices_Sensors_AccelerometerDataThreshold_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Windows_Devices_Sensors_AccelerometerDataThreshold[] = L"Windows.Devices.Sensors.AccelerometerDataThreshold";
#endif
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0xa0000

/*
 *
 * Class Windows.Devices.Sensors.AccelerometerReading
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Class implements the following interfaces:
 *    Windows.Devices.Sensors.IAccelerometerReading ** Default Interface **
 *    Windows.Devices.Sensors.IAccelerometerReading2
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#ifndef RUNTIMECLASS_Windows_Devices_Sensors_AccelerometerReading_DEFINED
#define RUNTIMECLASS_Windows_Devices_Sensors_AccelerometerReading_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Windows_Devices_Sensors_AccelerometerReading[] = L"Windows.Devices.Sensors.AccelerometerReading";
#endif
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Class Windows.Devices.Sensors.AccelerometerReadingChangedEventArgs
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Class implements the following interfaces:
 *    Windows.Devices.Sensors.IAccelerometerReadingChangedEventArgs ** Default Interface **
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#ifndef RUNTIMECLASS_Windows_Devices_Sensors_AccelerometerReadingChangedEventArgs_DEFINED
#define RUNTIMECLASS_Windows_Devices_Sensors_AccelerometerReadingChangedEventArgs_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Windows_Devices_Sensors_AccelerometerReadingChangedEventArgs[] = L"Windows.Devices.Sensors.AccelerometerReadingChangedEventArgs";
#endif
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Class Windows.Devices.Sensors.AccelerometerShakenEventArgs
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Class implements the following interfaces:
 *    Windows.Devices.Sensors.IAccelerometerShakenEventArgs ** Default Interface **
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#ifndef RUNTIMECLASS_Windows_Devices_Sensors_AccelerometerShakenEventArgs_DEFINED
#define RUNTIMECLASS_Windows_Devices_Sensors_AccelerometerShakenEventArgs_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Windows_Devices_Sensors_AccelerometerShakenEventArgs[] = L"Windows.Devices.Sensors.AccelerometerShakenEventArgs";
#endif
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Class Windows.Devices.Sensors.ActivitySensor
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * RuntimeClass contains static methods.
 *   Static Methods exist on the Windows.Devices.Sensors.IActivitySensorStatics interface starting with version 1.0 of the Windows.Foundation.UniversalApiContract API contract
 *
 * Class implements the following interfaces:
 *    Windows.Devices.Sensors.IActivitySensor ** Default Interface **
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#ifndef RUNTIMECLASS_Windows_Devices_Sensors_ActivitySensor_DEFINED
#define RUNTIMECLASS_Windows_Devices_Sensors_ActivitySensor_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Windows_Devices_Sensors_ActivitySensor[] = L"Windows.Devices.Sensors.ActivitySensor";
#endif
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Class Windows.Devices.Sensors.ActivitySensorReading
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Class implements the following interfaces:
 *    Windows.Devices.Sensors.IActivitySensorReading ** Default Interface **
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#ifndef RUNTIMECLASS_Windows_Devices_Sensors_ActivitySensorReading_DEFINED
#define RUNTIMECLASS_Windows_Devices_Sensors_ActivitySensorReading_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Windows_Devices_Sensors_ActivitySensorReading[] = L"Windows.Devices.Sensors.ActivitySensorReading";
#endif
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Class Windows.Devices.Sensors.ActivitySensorReadingChangeReport
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Class implements the following interfaces:
 *    Windows.Devices.Sensors.IActivitySensorReadingChangeReport ** Default Interface **
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#ifndef RUNTIMECLASS_Windows_Devices_Sensors_ActivitySensorReadingChangeReport_DEFINED
#define RUNTIMECLASS_Windows_Devices_Sensors_ActivitySensorReadingChangeReport_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Windows_Devices_Sensors_ActivitySensorReadingChangeReport[] = L"Windows.Devices.Sensors.ActivitySensorReadingChangeReport";
#endif
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Class Windows.Devices.Sensors.ActivitySensorReadingChangedEventArgs
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Class implements the following interfaces:
 *    Windows.Devices.Sensors.IActivitySensorReadingChangedEventArgs ** Default Interface **
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#ifndef RUNTIMECLASS_Windows_Devices_Sensors_ActivitySensorReadingChangedEventArgs_DEFINED
#define RUNTIMECLASS_Windows_Devices_Sensors_ActivitySensorReadingChangedEventArgs_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Windows_Devices_Sensors_ActivitySensorReadingChangedEventArgs[] = L"Windows.Devices.Sensors.ActivitySensorReadingChangedEventArgs";
#endif
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Class Windows.Devices.Sensors.ActivitySensorTriggerDetails
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Class implements the following interfaces:
 *    Windows.Devices.Sensors.IActivitySensorTriggerDetails ** Default Interface **
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#ifndef RUNTIMECLASS_Windows_Devices_Sensors_ActivitySensorTriggerDetails_DEFINED
#define RUNTIMECLASS_Windows_Devices_Sensors_ActivitySensorTriggerDetails_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Windows_Devices_Sensors_ActivitySensorTriggerDetails[] = L"Windows.Devices.Sensors.ActivitySensorTriggerDetails";
#endif
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Class Windows.Devices.Sensors.Altimeter
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * RuntimeClass contains static methods.
 *   Static Methods exist on the Windows.Devices.Sensors.IAltimeterStatics interface starting with version 1.0 of the Windows.Foundation.UniversalApiContract API contract
 *
 * Class implements the following interfaces:
 *    Windows.Devices.Sensors.IAltimeter ** Default Interface **
 *    Windows.Devices.Sensors.IAltimeter2
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#ifndef RUNTIMECLASS_Windows_Devices_Sensors_Altimeter_DEFINED
#define RUNTIMECLASS_Windows_Devices_Sensors_Altimeter_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Windows_Devices_Sensors_Altimeter[] = L"Windows.Devices.Sensors.Altimeter";
#endif
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Class Windows.Devices.Sensors.AltimeterReading
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Class implements the following interfaces:
 *    Windows.Devices.Sensors.IAltimeterReading ** Default Interface **
 *    Windows.Devices.Sensors.IAltimeterReading2
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#ifndef RUNTIMECLASS_Windows_Devices_Sensors_AltimeterReading_DEFINED
#define RUNTIMECLASS_Windows_Devices_Sensors_AltimeterReading_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Windows_Devices_Sensors_AltimeterReading[] = L"Windows.Devices.Sensors.AltimeterReading";
#endif
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Class Windows.Devices.Sensors.AltimeterReadingChangedEventArgs
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Class implements the following interfaces:
 *    Windows.Devices.Sensors.IAltimeterReadingChangedEventArgs ** Default Interface **
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#ifndef RUNTIMECLASS_Windows_Devices_Sensors_AltimeterReadingChangedEventArgs_DEFINED
#define RUNTIMECLASS_Windows_Devices_Sensors_AltimeterReadingChangedEventArgs_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Windows_Devices_Sensors_AltimeterReadingChangedEventArgs[] = L"Windows.Devices.Sensors.AltimeterReadingChangedEventArgs";
#endif
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Class Windows.Devices.Sensors.Barometer
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * RuntimeClass contains static methods.
 *   Static Methods exist on the Windows.Devices.Sensors.IBarometerStatics interface starting with version 1.0 of the Windows.Foundation.UniversalApiContract API contract
 *   Static Methods exist on the Windows.Devices.Sensors.IBarometerStatics2 interface starting with version 5.0 of the Windows.Foundation.UniversalApiContract API contract
 *
 * Class implements the following interfaces:
 *    Windows.Devices.Sensors.IBarometer ** Default Interface **
 *    Windows.Devices.Sensors.IBarometer2
 *    Windows.Devices.Sensors.IBarometer3
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#ifndef RUNTIMECLASS_Windows_Devices_Sensors_Barometer_DEFINED
#define RUNTIMECLASS_Windows_Devices_Sensors_Barometer_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Windows_Devices_Sensors_Barometer[] = L"Windows.Devices.Sensors.Barometer";
#endif
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Class Windows.Devices.Sensors.BarometerDataThreshold
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 10.0
 *
 * Class implements the following interfaces:
 *    Windows.Devices.Sensors.IBarometerDataThreshold ** Default Interface **
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0xa0000
#ifndef RUNTIMECLASS_Windows_Devices_Sensors_BarometerDataThreshold_DEFINED
#define RUNTIMECLASS_Windows_Devices_Sensors_BarometerDataThreshold_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Windows_Devices_Sensors_BarometerDataThreshold[] = L"Windows.Devices.Sensors.BarometerDataThreshold";
#endif
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0xa0000

/*
 *
 * Class Windows.Devices.Sensors.BarometerReading
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Class implements the following interfaces:
 *    Windows.Devices.Sensors.IBarometerReading ** Default Interface **
 *    Windows.Devices.Sensors.IBarometerReading2
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#ifndef RUNTIMECLASS_Windows_Devices_Sensors_BarometerReading_DEFINED
#define RUNTIMECLASS_Windows_Devices_Sensors_BarometerReading_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Windows_Devices_Sensors_BarometerReading[] = L"Windows.Devices.Sensors.BarometerReading";
#endif
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Class Windows.Devices.Sensors.BarometerReadingChangedEventArgs
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Class implements the following interfaces:
 *    Windows.Devices.Sensors.IBarometerReadingChangedEventArgs ** Default Interface **
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#ifndef RUNTIMECLASS_Windows_Devices_Sensors_BarometerReadingChangedEventArgs_DEFINED
#define RUNTIMECLASS_Windows_Devices_Sensors_BarometerReadingChangedEventArgs_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Windows_Devices_Sensors_BarometerReadingChangedEventArgs[] = L"Windows.Devices.Sensors.BarometerReadingChangedEventArgs";
#endif
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Class Windows.Devices.Sensors.Compass
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * RuntimeClass contains static methods.
 *   Static Methods exist on the Windows.Devices.Sensors.ICompassStatics interface starting with version 1.0 of the Windows.Foundation.UniversalApiContract API contract
 *   Static Methods exist on the Windows.Devices.Sensors.ICompassStatics2 interface starting with version 5.0 of the Windows.Foundation.UniversalApiContract API contract
 *
 * Class implements the following interfaces:
 *    Windows.Devices.Sensors.ICompass ** Default Interface **
 *    Windows.Devices.Sensors.ICompassDeviceId
 *    Windows.Devices.Sensors.ICompass2
 *    Windows.Devices.Sensors.ICompass3
 *    Windows.Devices.Sensors.ICompass4
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#ifndef RUNTIMECLASS_Windows_Devices_Sensors_Compass_DEFINED
#define RUNTIMECLASS_Windows_Devices_Sensors_Compass_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Windows_Devices_Sensors_Compass[] = L"Windows.Devices.Sensors.Compass";
#endif
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Class Windows.Devices.Sensors.CompassDataThreshold
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 10.0
 *
 * Class implements the following interfaces:
 *    Windows.Devices.Sensors.ICompassDataThreshold ** Default Interface **
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0xa0000
#ifndef RUNTIMECLASS_Windows_Devices_Sensors_CompassDataThreshold_DEFINED
#define RUNTIMECLASS_Windows_Devices_Sensors_CompassDataThreshold_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Windows_Devices_Sensors_CompassDataThreshold[] = L"Windows.Devices.Sensors.CompassDataThreshold";
#endif
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0xa0000

/*
 *
 * Class Windows.Devices.Sensors.CompassReading
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Class implements the following interfaces:
 *    Windows.Devices.Sensors.ICompassReading ** Default Interface **
 *    Windows.Devices.Sensors.ICompassReadingHeadingAccuracy
 *    Windows.Devices.Sensors.ICompassReading2
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#ifndef RUNTIMECLASS_Windows_Devices_Sensors_CompassReading_DEFINED
#define RUNTIMECLASS_Windows_Devices_Sensors_CompassReading_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Windows_Devices_Sensors_CompassReading[] = L"Windows.Devices.Sensors.CompassReading";
#endif
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Class Windows.Devices.Sensors.CompassReadingChangedEventArgs
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Class implements the following interfaces:
 *    Windows.Devices.Sensors.ICompassReadingChangedEventArgs ** Default Interface **
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#ifndef RUNTIMECLASS_Windows_Devices_Sensors_CompassReadingChangedEventArgs_DEFINED
#define RUNTIMECLASS_Windows_Devices_Sensors_CompassReadingChangedEventArgs_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Windows_Devices_Sensors_CompassReadingChangedEventArgs[] = L"Windows.Devices.Sensors.CompassReadingChangedEventArgs";
#endif
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Class Windows.Devices.Sensors.Gyrometer
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * RuntimeClass contains static methods.
 *   Static Methods exist on the Windows.Devices.Sensors.IGyrometerStatics interface starting with version 1.0 of the Windows.Foundation.UniversalApiContract API contract
 *   Static Methods exist on the Windows.Devices.Sensors.IGyrometerStatics2 interface starting with version 5.0 of the Windows.Foundation.UniversalApiContract API contract
 *
 * Class implements the following interfaces:
 *    Windows.Devices.Sensors.IGyrometer ** Default Interface **
 *    Windows.Devices.Sensors.IGyrometerDeviceId
 *    Windows.Devices.Sensors.IGyrometer2
 *    Windows.Devices.Sensors.IGyrometer3
 *    Windows.Devices.Sensors.IGyrometer4
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#ifndef RUNTIMECLASS_Windows_Devices_Sensors_Gyrometer_DEFINED
#define RUNTIMECLASS_Windows_Devices_Sensors_Gyrometer_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Windows_Devices_Sensors_Gyrometer[] = L"Windows.Devices.Sensors.Gyrometer";
#endif
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Class Windows.Devices.Sensors.GyrometerDataThreshold
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 10.0
 *
 * Class implements the following interfaces:
 *    Windows.Devices.Sensors.IGyrometerDataThreshold ** Default Interface **
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0xa0000
#ifndef RUNTIMECLASS_Windows_Devices_Sensors_GyrometerDataThreshold_DEFINED
#define RUNTIMECLASS_Windows_Devices_Sensors_GyrometerDataThreshold_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Windows_Devices_Sensors_GyrometerDataThreshold[] = L"Windows.Devices.Sensors.GyrometerDataThreshold";
#endif
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0xa0000

/*
 *
 * Class Windows.Devices.Sensors.GyrometerReading
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Class implements the following interfaces:
 *    Windows.Devices.Sensors.IGyrometerReading ** Default Interface **
 *    Windows.Devices.Sensors.IGyrometerReading2
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#ifndef RUNTIMECLASS_Windows_Devices_Sensors_GyrometerReading_DEFINED
#define RUNTIMECLASS_Windows_Devices_Sensors_GyrometerReading_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Windows_Devices_Sensors_GyrometerReading[] = L"Windows.Devices.Sensors.GyrometerReading";
#endif
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Class Windows.Devices.Sensors.GyrometerReadingChangedEventArgs
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Class implements the following interfaces:
 *    Windows.Devices.Sensors.IGyrometerReadingChangedEventArgs ** Default Interface **
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#ifndef RUNTIMECLASS_Windows_Devices_Sensors_GyrometerReadingChangedEventArgs_DEFINED
#define RUNTIMECLASS_Windows_Devices_Sensors_GyrometerReadingChangedEventArgs_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Windows_Devices_Sensors_GyrometerReadingChangedEventArgs[] = L"Windows.Devices.Sensors.GyrometerReadingChangedEventArgs";
#endif
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Class Windows.Devices.Sensors.HingeAngleReading
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 7.0
 *
 * Class implements the following interfaces:
 *    Windows.Devices.Sensors.IHingeAngleReading ** Default Interface **
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x70000
#ifndef RUNTIMECLASS_Windows_Devices_Sensors_HingeAngleReading_DEFINED
#define RUNTIMECLASS_Windows_Devices_Sensors_HingeAngleReading_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Windows_Devices_Sensors_HingeAngleReading[] = L"Windows.Devices.Sensors.HingeAngleReading";
#endif
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x70000

/*
 *
 * Class Windows.Devices.Sensors.HingeAngleSensor
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 7.0
 *
 * RuntimeClass contains static methods.
 *   Static Methods exist on the Windows.Devices.Sensors.IHingeAngleSensorStatics interface starting with version 7.0 of the Windows.Foundation.UniversalApiContract API contract
 *
 * Class implements the following interfaces:
 *    Windows.Devices.Sensors.IHingeAngleSensor ** Default Interface **
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x70000
#ifndef RUNTIMECLASS_Windows_Devices_Sensors_HingeAngleSensor_DEFINED
#define RUNTIMECLASS_Windows_Devices_Sensors_HingeAngleSensor_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Windows_Devices_Sensors_HingeAngleSensor[] = L"Windows.Devices.Sensors.HingeAngleSensor";
#endif
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x70000

/*
 *
 * Class Windows.Devices.Sensors.HingeAngleSensorReadingChangedEventArgs
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 7.0
 *
 * Class implements the following interfaces:
 *    Windows.Devices.Sensors.IHingeAngleSensorReadingChangedEventArgs ** Default Interface **
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x70000
#ifndef RUNTIMECLASS_Windows_Devices_Sensors_HingeAngleSensorReadingChangedEventArgs_DEFINED
#define RUNTIMECLASS_Windows_Devices_Sensors_HingeAngleSensorReadingChangedEventArgs_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Windows_Devices_Sensors_HingeAngleSensorReadingChangedEventArgs[] = L"Windows.Devices.Sensors.HingeAngleSensorReadingChangedEventArgs";
#endif
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x70000

/*
 *
 * Class Windows.Devices.Sensors.Inclinometer
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * RuntimeClass contains static methods.
 *   Static Methods exist on the Windows.Devices.Sensors.IInclinometerStatics4 interface starting with version 5.0 of the Windows.Foundation.UniversalApiContract API contract
 *   Static Methods exist on the Windows.Devices.Sensors.IInclinometerStatics interface starting with version 1.0 of the Windows.Foundation.UniversalApiContract API contract
 *   Static Methods exist on the Windows.Devices.Sensors.IInclinometerStatics2 interface starting with version 1.0 of the Windows.Foundation.UniversalApiContract API contract
 *   Static Methods exist on the Windows.Devices.Sensors.IInclinometerStatics3 interface starting with version 3.0 of the Windows.Foundation.UniversalApiContract API contract
 *
 * Class implements the following interfaces:
 *    Windows.Devices.Sensors.IInclinometer ** Default Interface **
 *    Windows.Devices.Sensors.IInclinometerDeviceId
 *    Windows.Devices.Sensors.IInclinometer2
 *    Windows.Devices.Sensors.IInclinometer3
 *    Windows.Devices.Sensors.IInclinometer4
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#ifndef RUNTIMECLASS_Windows_Devices_Sensors_Inclinometer_DEFINED
#define RUNTIMECLASS_Windows_Devices_Sensors_Inclinometer_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Windows_Devices_Sensors_Inclinometer[] = L"Windows.Devices.Sensors.Inclinometer";
#endif
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Class Windows.Devices.Sensors.InclinometerDataThreshold
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 10.0
 *
 * Class implements the following interfaces:
 *    Windows.Devices.Sensors.IInclinometerDataThreshold ** Default Interface **
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0xa0000
#ifndef RUNTIMECLASS_Windows_Devices_Sensors_InclinometerDataThreshold_DEFINED
#define RUNTIMECLASS_Windows_Devices_Sensors_InclinometerDataThreshold_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Windows_Devices_Sensors_InclinometerDataThreshold[] = L"Windows.Devices.Sensors.InclinometerDataThreshold";
#endif
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0xa0000

/*
 *
 * Class Windows.Devices.Sensors.InclinometerReading
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Class implements the following interfaces:
 *    Windows.Devices.Sensors.IInclinometerReading ** Default Interface **
 *    Windows.Devices.Sensors.IInclinometerReadingYawAccuracy
 *    Windows.Devices.Sensors.IInclinometerReading2
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#ifndef RUNTIMECLASS_Windows_Devices_Sensors_InclinometerReading_DEFINED
#define RUNTIMECLASS_Windows_Devices_Sensors_InclinometerReading_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Windows_Devices_Sensors_InclinometerReading[] = L"Windows.Devices.Sensors.InclinometerReading";
#endif
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Class Windows.Devices.Sensors.InclinometerReadingChangedEventArgs
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Class implements the following interfaces:
 *    Windows.Devices.Sensors.IInclinometerReadingChangedEventArgs ** Default Interface **
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#ifndef RUNTIMECLASS_Windows_Devices_Sensors_InclinometerReadingChangedEventArgs_DEFINED
#define RUNTIMECLASS_Windows_Devices_Sensors_InclinometerReadingChangedEventArgs_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Windows_Devices_Sensors_InclinometerReadingChangedEventArgs[] = L"Windows.Devices.Sensors.InclinometerReadingChangedEventArgs";
#endif
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Class Windows.Devices.Sensors.LightSensor
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * RuntimeClass contains static methods.
 *   Static Methods exist on the Windows.Devices.Sensors.ILightSensorStatics2 interface starting with version 5.0 of the Windows.Foundation.UniversalApiContract API contract
 *   Static Methods exist on the Windows.Devices.Sensors.ILightSensorStatics interface starting with version 1.0 of the Windows.Foundation.UniversalApiContract API contract
 *
 * Class implements the following interfaces:
 *    Windows.Devices.Sensors.ILightSensor ** Default Interface **
 *    Windows.Devices.Sensors.ILightSensorDeviceId
 *    Windows.Devices.Sensors.ILightSensor2
 *    Windows.Devices.Sensors.ILightSensor3
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#ifndef RUNTIMECLASS_Windows_Devices_Sensors_LightSensor_DEFINED
#define RUNTIMECLASS_Windows_Devices_Sensors_LightSensor_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Windows_Devices_Sensors_LightSensor[] = L"Windows.Devices.Sensors.LightSensor";
#endif
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Class Windows.Devices.Sensors.LightSensorDataThreshold
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 10.0
 *
 * Class implements the following interfaces:
 *    Windows.Devices.Sensors.ILightSensorDataThreshold ** Default Interface **
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0xa0000
#ifndef RUNTIMECLASS_Windows_Devices_Sensors_LightSensorDataThreshold_DEFINED
#define RUNTIMECLASS_Windows_Devices_Sensors_LightSensorDataThreshold_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Windows_Devices_Sensors_LightSensorDataThreshold[] = L"Windows.Devices.Sensors.LightSensorDataThreshold";
#endif
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0xa0000

/*
 *
 * Class Windows.Devices.Sensors.LightSensorReading
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Class implements the following interfaces:
 *    Windows.Devices.Sensors.ILightSensorReading ** Default Interface **
 *    Windows.Devices.Sensors.ILightSensorReading2
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#ifndef RUNTIMECLASS_Windows_Devices_Sensors_LightSensorReading_DEFINED
#define RUNTIMECLASS_Windows_Devices_Sensors_LightSensorReading_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Windows_Devices_Sensors_LightSensorReading[] = L"Windows.Devices.Sensors.LightSensorReading";
#endif
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Class Windows.Devices.Sensors.LightSensorReadingChangedEventArgs
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Class implements the following interfaces:
 *    Windows.Devices.Sensors.ILightSensorReadingChangedEventArgs ** Default Interface **
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#ifndef RUNTIMECLASS_Windows_Devices_Sensors_LightSensorReadingChangedEventArgs_DEFINED
#define RUNTIMECLASS_Windows_Devices_Sensors_LightSensorReadingChangedEventArgs_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Windows_Devices_Sensors_LightSensorReadingChangedEventArgs[] = L"Windows.Devices.Sensors.LightSensorReadingChangedEventArgs";
#endif
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Class Windows.Devices.Sensors.Magnetometer
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * RuntimeClass contains static methods.
 *   Static Methods exist on the Windows.Devices.Sensors.IMagnetometerStatics interface starting with version 1.0 of the Windows.Foundation.UniversalApiContract API contract
 *   Static Methods exist on the Windows.Devices.Sensors.IMagnetometerStatics2 interface starting with version 5.0 of the Windows.Foundation.UniversalApiContract API contract
 *
 * Class implements the following interfaces:
 *    Windows.Devices.Sensors.IMagnetometer ** Default Interface **
 *    Windows.Devices.Sensors.IMagnetometerDeviceId
 *    Windows.Devices.Sensors.IMagnetometer2
 *    Windows.Devices.Sensors.IMagnetometer3
 *    Windows.Devices.Sensors.IMagnetometer4
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#ifndef RUNTIMECLASS_Windows_Devices_Sensors_Magnetometer_DEFINED
#define RUNTIMECLASS_Windows_Devices_Sensors_Magnetometer_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Windows_Devices_Sensors_Magnetometer[] = L"Windows.Devices.Sensors.Magnetometer";
#endif
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Class Windows.Devices.Sensors.MagnetometerDataThreshold
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 10.0
 *
 * Class implements the following interfaces:
 *    Windows.Devices.Sensors.IMagnetometerDataThreshold ** Default Interface **
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0xa0000
#ifndef RUNTIMECLASS_Windows_Devices_Sensors_MagnetometerDataThreshold_DEFINED
#define RUNTIMECLASS_Windows_Devices_Sensors_MagnetometerDataThreshold_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Windows_Devices_Sensors_MagnetometerDataThreshold[] = L"Windows.Devices.Sensors.MagnetometerDataThreshold";
#endif
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0xa0000

/*
 *
 * Class Windows.Devices.Sensors.MagnetometerReading
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Class implements the following interfaces:
 *    Windows.Devices.Sensors.IMagnetometerReading ** Default Interface **
 *    Windows.Devices.Sensors.IMagnetometerReading2
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#ifndef RUNTIMECLASS_Windows_Devices_Sensors_MagnetometerReading_DEFINED
#define RUNTIMECLASS_Windows_Devices_Sensors_MagnetometerReading_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Windows_Devices_Sensors_MagnetometerReading[] = L"Windows.Devices.Sensors.MagnetometerReading";
#endif
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Class Windows.Devices.Sensors.MagnetometerReadingChangedEventArgs
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Class implements the following interfaces:
 *    Windows.Devices.Sensors.IMagnetometerReadingChangedEventArgs ** Default Interface **
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#ifndef RUNTIMECLASS_Windows_Devices_Sensors_MagnetometerReadingChangedEventArgs_DEFINED
#define RUNTIMECLASS_Windows_Devices_Sensors_MagnetometerReadingChangedEventArgs_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Windows_Devices_Sensors_MagnetometerReadingChangedEventArgs[] = L"Windows.Devices.Sensors.MagnetometerReadingChangedEventArgs";
#endif
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Class Windows.Devices.Sensors.OrientationSensor
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * RuntimeClass contains static methods.
 *   Static Methods exist on the Windows.Devices.Sensors.IOrientationSensorStatics4 interface starting with version 5.0 of the Windows.Foundation.UniversalApiContract API contract
 *   Static Methods exist on the Windows.Devices.Sensors.IOrientationSensorStatics3 interface starting with version 3.0 of the Windows.Foundation.UniversalApiContract API contract
 *   Static Methods exist on the Windows.Devices.Sensors.IOrientationSensorStatics2 interface starting with version 1.0 of the Windows.Foundation.UniversalApiContract API contract
 *   Static Methods exist on the Windows.Devices.Sensors.IOrientationSensorStatics interface starting with version 1.0 of the Windows.Foundation.UniversalApiContract API contract
 *
 * Class implements the following interfaces:
 *    Windows.Devices.Sensors.IOrientationSensor ** Default Interface **
 *    Windows.Devices.Sensors.IOrientationSensorDeviceId
 *    Windows.Devices.Sensors.IOrientationSensor2
 *    Windows.Devices.Sensors.IOrientationSensor3
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#ifndef RUNTIMECLASS_Windows_Devices_Sensors_OrientationSensor_DEFINED
#define RUNTIMECLASS_Windows_Devices_Sensors_OrientationSensor_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Windows_Devices_Sensors_OrientationSensor[] = L"Windows.Devices.Sensors.OrientationSensor";
#endif
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Class Windows.Devices.Sensors.OrientationSensorReading
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Class implements the following interfaces:
 *    Windows.Devices.Sensors.IOrientationSensorReading ** Default Interface **
 *    Windows.Devices.Sensors.IOrientationSensorReadingYawAccuracy
 *    Windows.Devices.Sensors.IOrientationSensorReading2
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#ifndef RUNTIMECLASS_Windows_Devices_Sensors_OrientationSensorReading_DEFINED
#define RUNTIMECLASS_Windows_Devices_Sensors_OrientationSensorReading_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Windows_Devices_Sensors_OrientationSensorReading[] = L"Windows.Devices.Sensors.OrientationSensorReading";
#endif
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Class Windows.Devices.Sensors.OrientationSensorReadingChangedEventArgs
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Class implements the following interfaces:
 *    Windows.Devices.Sensors.IOrientationSensorReadingChangedEventArgs ** Default Interface **
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#ifndef RUNTIMECLASS_Windows_Devices_Sensors_OrientationSensorReadingChangedEventArgs_DEFINED
#define RUNTIMECLASS_Windows_Devices_Sensors_OrientationSensorReadingChangedEventArgs_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Windows_Devices_Sensors_OrientationSensorReadingChangedEventArgs[] = L"Windows.Devices.Sensors.OrientationSensorReadingChangedEventArgs";
#endif
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Class Windows.Devices.Sensors.Pedometer
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * RuntimeClass contains static methods.
 *   Static Methods exist on the Windows.Devices.Sensors.IPedometerStatics interface starting with version 1.0 of the Windows.Foundation.UniversalApiContract API contract
 *   Static Methods exist on the Windows.Devices.Sensors.IPedometerStatics2 interface starting with version 2.0 of the Windows.Foundation.UniversalApiContract API contract
 *
 * Class implements the following interfaces:
 *    Windows.Devices.Sensors.IPedometer ** Default Interface **
 *    Windows.Devices.Sensors.IPedometer2
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#ifndef RUNTIMECLASS_Windows_Devices_Sensors_Pedometer_DEFINED
#define RUNTIMECLASS_Windows_Devices_Sensors_Pedometer_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Windows_Devices_Sensors_Pedometer[] = L"Windows.Devices.Sensors.Pedometer";
#endif
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Class Windows.Devices.Sensors.PedometerDataThreshold
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 2.0
 *
 * RuntimeClass can be activated.
 *   Type can be activated via the Windows.Devices.Sensors.IPedometerDataThresholdFactory interface starting with version 2.0 of the Windows.Foundation.UniversalApiContract API contract
 *
 * Class implements the following interfaces:
 *    Windows.Devices.Sensors.ISensorDataThreshold ** Default Interface **
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x20000
#ifndef RUNTIMECLASS_Windows_Devices_Sensors_PedometerDataThreshold_DEFINED
#define RUNTIMECLASS_Windows_Devices_Sensors_PedometerDataThreshold_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Windows_Devices_Sensors_PedometerDataThreshold[] = L"Windows.Devices.Sensors.PedometerDataThreshold";
#endif
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x20000

/*
 *
 * Class Windows.Devices.Sensors.PedometerReading
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Class implements the following interfaces:
 *    Windows.Devices.Sensors.IPedometerReading ** Default Interface **
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#ifndef RUNTIMECLASS_Windows_Devices_Sensors_PedometerReading_DEFINED
#define RUNTIMECLASS_Windows_Devices_Sensors_PedometerReading_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Windows_Devices_Sensors_PedometerReading[] = L"Windows.Devices.Sensors.PedometerReading";
#endif
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Class Windows.Devices.Sensors.PedometerReadingChangedEventArgs
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Class implements the following interfaces:
 *    Windows.Devices.Sensors.IPedometerReadingChangedEventArgs ** Default Interface **
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#ifndef RUNTIMECLASS_Windows_Devices_Sensors_PedometerReadingChangedEventArgs_DEFINED
#define RUNTIMECLASS_Windows_Devices_Sensors_PedometerReadingChangedEventArgs_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Windows_Devices_Sensors_PedometerReadingChangedEventArgs[] = L"Windows.Devices.Sensors.PedometerReadingChangedEventArgs";
#endif
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Class Windows.Devices.Sensors.ProximitySensor
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * RuntimeClass contains static methods.
 *   Static Methods exist on the Windows.Devices.Sensors.IProximitySensorStatics interface starting with version 1.0 of the Windows.Foundation.UniversalApiContract API contract
 *   Static Methods exist on the Windows.Devices.Sensors.IProximitySensorStatics2 interface starting with version 2.0 of the Windows.Foundation.UniversalApiContract API contract
 *
 * Class implements the following interfaces:
 *    Windows.Devices.Sensors.IProximitySensor ** Default Interface **
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#ifndef RUNTIMECLASS_Windows_Devices_Sensors_ProximitySensor_DEFINED
#define RUNTIMECLASS_Windows_Devices_Sensors_ProximitySensor_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Windows_Devices_Sensors_ProximitySensor[] = L"Windows.Devices.Sensors.ProximitySensor";
#endif
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Class Windows.Devices.Sensors.ProximitySensorDataThreshold
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 2.0
 *
 * RuntimeClass can be activated.
 *   Type can be activated via the Windows.Devices.Sensors.IProximitySensorDataThresholdFactory interface starting with version 2.0 of the Windows.Foundation.UniversalApiContract API contract
 *
 * Class implements the following interfaces:
 *    Windows.Devices.Sensors.ISensorDataThreshold ** Default Interface **
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x20000
#ifndef RUNTIMECLASS_Windows_Devices_Sensors_ProximitySensorDataThreshold_DEFINED
#define RUNTIMECLASS_Windows_Devices_Sensors_ProximitySensorDataThreshold_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Windows_Devices_Sensors_ProximitySensorDataThreshold[] = L"Windows.Devices.Sensors.ProximitySensorDataThreshold";
#endif
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x20000

/*
 *
 * Class Windows.Devices.Sensors.ProximitySensorDisplayOnOffController
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Class implements the following interfaces:
 *    Windows.Foundation.IClosable ** Default Interface **
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#ifndef RUNTIMECLASS_Windows_Devices_Sensors_ProximitySensorDisplayOnOffController_DEFINED
#define RUNTIMECLASS_Windows_Devices_Sensors_ProximitySensorDisplayOnOffController_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Windows_Devices_Sensors_ProximitySensorDisplayOnOffController[] = L"Windows.Devices.Sensors.ProximitySensorDisplayOnOffController";
#endif
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Class Windows.Devices.Sensors.ProximitySensorReading
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Class implements the following interfaces:
 *    Windows.Devices.Sensors.IProximitySensorReading ** Default Interface **
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#ifndef RUNTIMECLASS_Windows_Devices_Sensors_ProximitySensorReading_DEFINED
#define RUNTIMECLASS_Windows_Devices_Sensors_ProximitySensorReading_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Windows_Devices_Sensors_ProximitySensorReading[] = L"Windows.Devices.Sensors.ProximitySensorReading";
#endif
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Class Windows.Devices.Sensors.ProximitySensorReadingChangedEventArgs
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Class implements the following interfaces:
 *    Windows.Devices.Sensors.IProximitySensorReadingChangedEventArgs ** Default Interface **
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#ifndef RUNTIMECLASS_Windows_Devices_Sensors_ProximitySensorReadingChangedEventArgs_DEFINED
#define RUNTIMECLASS_Windows_Devices_Sensors_ProximitySensorReadingChangedEventArgs_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Windows_Devices_Sensors_ProximitySensorReadingChangedEventArgs[] = L"Windows.Devices.Sensors.ProximitySensorReadingChangedEventArgs";
#endif
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Class Windows.Devices.Sensors.SensorDataThresholdTriggerDetails
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 2.0
 *
 * Class implements the following interfaces:
 *    Windows.Devices.Sensors.ISensorDataThresholdTriggerDetails ** Default Interface **
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x20000
#ifndef RUNTIMECLASS_Windows_Devices_Sensors_SensorDataThresholdTriggerDetails_DEFINED
#define RUNTIMECLASS_Windows_Devices_Sensors_SensorDataThresholdTriggerDetails_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Windows_Devices_Sensors_SensorDataThresholdTriggerDetails[] = L"Windows.Devices.Sensors.SensorDataThresholdTriggerDetails";
#endif
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x20000

/*
 *
 * Class Windows.Devices.Sensors.SensorQuaternion
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Class implements the following interfaces:
 *    Windows.Devices.Sensors.ISensorQuaternion ** Default Interface **
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#ifndef RUNTIMECLASS_Windows_Devices_Sensors_SensorQuaternion_DEFINED
#define RUNTIMECLASS_Windows_Devices_Sensors_SensorQuaternion_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Windows_Devices_Sensors_SensorQuaternion[] = L"Windows.Devices.Sensors.SensorQuaternion";
#endif
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Class Windows.Devices.Sensors.SensorRotationMatrix
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Class implements the following interfaces:
 *    Windows.Devices.Sensors.ISensorRotationMatrix ** Default Interface **
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#ifndef RUNTIMECLASS_Windows_Devices_Sensors_SensorRotationMatrix_DEFINED
#define RUNTIMECLASS_Windows_Devices_Sensors_SensorRotationMatrix_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Windows_Devices_Sensors_SensorRotationMatrix[] = L"Windows.Devices.Sensors.SensorRotationMatrix";
#endif
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Class Windows.Devices.Sensors.SimpleOrientationSensor
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * RuntimeClass contains static methods.
 *   Static Methods exist on the Windows.Devices.Sensors.ISimpleOrientationSensorStatics2 interface starting with version 7.0 of the Windows.Foundation.UniversalApiContract API contract
 *   Static Methods exist on the Windows.Devices.Sensors.ISimpleOrientationSensorStatics interface starting with version 1.0 of the Windows.Foundation.UniversalApiContract API contract
 *
 * Class implements the following interfaces:
 *    Windows.Devices.Sensors.ISimpleOrientationSensor ** Default Interface **
 *    Windows.Devices.Sensors.ISimpleOrientationSensorDeviceId
 *    Windows.Devices.Sensors.ISimpleOrientationSensor2
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#ifndef RUNTIMECLASS_Windows_Devices_Sensors_SimpleOrientationSensor_DEFINED
#define RUNTIMECLASS_Windows_Devices_Sensors_SimpleOrientationSensor_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Windows_Devices_Sensors_SimpleOrientationSensor[] = L"Windows.Devices.Sensors.SimpleOrientationSensor";
#endif
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Class Windows.Devices.Sensors.SimpleOrientationSensorOrientationChangedEventArgs
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Class implements the following interfaces:
 *    Windows.Devices.Sensors.ISimpleOrientationSensorOrientationChangedEventArgs ** Default Interface **
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#ifndef RUNTIMECLASS_Windows_Devices_Sensors_SimpleOrientationSensorOrientationChangedEventArgs_DEFINED
#define RUNTIMECLASS_Windows_Devices_Sensors_SimpleOrientationSensorOrientationChangedEventArgs_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Windows_Devices_Sensors_SimpleOrientationSensorOrientationChangedEventArgs[] = L"Windows.Devices.Sensors.SimpleOrientationSensorOrientationChangedEventArgs";
#endif
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

#else // !defined(__cplusplus)
/* Forward Declarations */
#ifndef ____x_ABI_CWindows_CDevices_CSensors_CIAccelerometer_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CIAccelerometer_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CDevices_CSensors_CIAccelerometer __x_ABI_CWindows_CDevices_CSensors_CIAccelerometer;

#endif // ____x_ABI_CWindows_CDevices_CSensors_CIAccelerometer_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CDevices_CSensors_CIAccelerometer2_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CIAccelerometer2_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CDevices_CSensors_CIAccelerometer2 __x_ABI_CWindows_CDevices_CSensors_CIAccelerometer2;

#endif // ____x_ABI_CWindows_CDevices_CSensors_CIAccelerometer2_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CDevices_CSensors_CIAccelerometer3_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CIAccelerometer3_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CDevices_CSensors_CIAccelerometer3 __x_ABI_CWindows_CDevices_CSensors_CIAccelerometer3;

#endif // ____x_ABI_CWindows_CDevices_CSensors_CIAccelerometer3_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CDevices_CSensors_CIAccelerometer4_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CIAccelerometer4_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CDevices_CSensors_CIAccelerometer4 __x_ABI_CWindows_CDevices_CSensors_CIAccelerometer4;

#endif // ____x_ABI_CWindows_CDevices_CSensors_CIAccelerometer4_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CDevices_CSensors_CIAccelerometer5_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CIAccelerometer5_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CDevices_CSensors_CIAccelerometer5 __x_ABI_CWindows_CDevices_CSensors_CIAccelerometer5;

#endif // ____x_ABI_CWindows_CDevices_CSensors_CIAccelerometer5_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CDevices_CSensors_CIAccelerometerDataThreshold_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CIAccelerometerDataThreshold_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CDevices_CSensors_CIAccelerometerDataThreshold __x_ABI_CWindows_CDevices_CSensors_CIAccelerometerDataThreshold;

#endif // ____x_ABI_CWindows_CDevices_CSensors_CIAccelerometerDataThreshold_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CDevices_CSensors_CIAccelerometerDeviceId_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CIAccelerometerDeviceId_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CDevices_CSensors_CIAccelerometerDeviceId __x_ABI_CWindows_CDevices_CSensors_CIAccelerometerDeviceId;

#endif // ____x_ABI_CWindows_CDevices_CSensors_CIAccelerometerDeviceId_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CDevices_CSensors_CIAccelerometerReading_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CIAccelerometerReading_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CDevices_CSensors_CIAccelerometerReading __x_ABI_CWindows_CDevices_CSensors_CIAccelerometerReading;

#endif // ____x_ABI_CWindows_CDevices_CSensors_CIAccelerometerReading_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CDevices_CSensors_CIAccelerometerReading2_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CIAccelerometerReading2_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CDevices_CSensors_CIAccelerometerReading2 __x_ABI_CWindows_CDevices_CSensors_CIAccelerometerReading2;

#endif // ____x_ABI_CWindows_CDevices_CSensors_CIAccelerometerReading2_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CDevices_CSensors_CIAccelerometerReadingChangedEventArgs_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CIAccelerometerReadingChangedEventArgs_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CDevices_CSensors_CIAccelerometerReadingChangedEventArgs __x_ABI_CWindows_CDevices_CSensors_CIAccelerometerReadingChangedEventArgs;

#endif // ____x_ABI_CWindows_CDevices_CSensors_CIAccelerometerReadingChangedEventArgs_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CDevices_CSensors_CIAccelerometerShakenEventArgs_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CIAccelerometerShakenEventArgs_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CDevices_CSensors_CIAccelerometerShakenEventArgs __x_ABI_CWindows_CDevices_CSensors_CIAccelerometerShakenEventArgs;

#endif // ____x_ABI_CWindows_CDevices_CSensors_CIAccelerometerShakenEventArgs_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CDevices_CSensors_CIAccelerometerStatics_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CIAccelerometerStatics_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CDevices_CSensors_CIAccelerometerStatics __x_ABI_CWindows_CDevices_CSensors_CIAccelerometerStatics;

#endif // ____x_ABI_CWindows_CDevices_CSensors_CIAccelerometerStatics_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CDevices_CSensors_CIAccelerometerStatics2_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CIAccelerometerStatics2_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CDevices_CSensors_CIAccelerometerStatics2 __x_ABI_CWindows_CDevices_CSensors_CIAccelerometerStatics2;

#endif // ____x_ABI_CWindows_CDevices_CSensors_CIAccelerometerStatics2_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CDevices_CSensors_CIAccelerometerStatics3_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CIAccelerometerStatics3_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CDevices_CSensors_CIAccelerometerStatics3 __x_ABI_CWindows_CDevices_CSensors_CIAccelerometerStatics3;

#endif // ____x_ABI_CWindows_CDevices_CSensors_CIAccelerometerStatics3_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CDevices_CSensors_CIActivitySensor_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CIActivitySensor_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CDevices_CSensors_CIActivitySensor __x_ABI_CWindows_CDevices_CSensors_CIActivitySensor;

#endif // ____x_ABI_CWindows_CDevices_CSensors_CIActivitySensor_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CDevices_CSensors_CIActivitySensorReading_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CIActivitySensorReading_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CDevices_CSensors_CIActivitySensorReading __x_ABI_CWindows_CDevices_CSensors_CIActivitySensorReading;

#endif // ____x_ABI_CWindows_CDevices_CSensors_CIActivitySensorReading_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CDevices_CSensors_CIActivitySensorReadingChangeReport_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CIActivitySensorReadingChangeReport_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CDevices_CSensors_CIActivitySensorReadingChangeReport __x_ABI_CWindows_CDevices_CSensors_CIActivitySensorReadingChangeReport;

#endif // ____x_ABI_CWindows_CDevices_CSensors_CIActivitySensorReadingChangeReport_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CDevices_CSensors_CIActivitySensorReadingChangedEventArgs_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CIActivitySensorReadingChangedEventArgs_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CDevices_CSensors_CIActivitySensorReadingChangedEventArgs __x_ABI_CWindows_CDevices_CSensors_CIActivitySensorReadingChangedEventArgs;

#endif // ____x_ABI_CWindows_CDevices_CSensors_CIActivitySensorReadingChangedEventArgs_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CDevices_CSensors_CIActivitySensorStatics_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CIActivitySensorStatics_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CDevices_CSensors_CIActivitySensorStatics __x_ABI_CWindows_CDevices_CSensors_CIActivitySensorStatics;

#endif // ____x_ABI_CWindows_CDevices_CSensors_CIActivitySensorStatics_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CDevices_CSensors_CIActivitySensorTriggerDetails_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CIActivitySensorTriggerDetails_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CDevices_CSensors_CIActivitySensorTriggerDetails __x_ABI_CWindows_CDevices_CSensors_CIActivitySensorTriggerDetails;

#endif // ____x_ABI_CWindows_CDevices_CSensors_CIActivitySensorTriggerDetails_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CDevices_CSensors_CIAltimeter_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CIAltimeter_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CDevices_CSensors_CIAltimeter __x_ABI_CWindows_CDevices_CSensors_CIAltimeter;

#endif // ____x_ABI_CWindows_CDevices_CSensors_CIAltimeter_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CDevices_CSensors_CIAltimeter2_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CIAltimeter2_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CDevices_CSensors_CIAltimeter2 __x_ABI_CWindows_CDevices_CSensors_CIAltimeter2;

#endif // ____x_ABI_CWindows_CDevices_CSensors_CIAltimeter2_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CDevices_CSensors_CIAltimeterReading_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CIAltimeterReading_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CDevices_CSensors_CIAltimeterReading __x_ABI_CWindows_CDevices_CSensors_CIAltimeterReading;

#endif // ____x_ABI_CWindows_CDevices_CSensors_CIAltimeterReading_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CDevices_CSensors_CIAltimeterReading2_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CIAltimeterReading2_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CDevices_CSensors_CIAltimeterReading2 __x_ABI_CWindows_CDevices_CSensors_CIAltimeterReading2;

#endif // ____x_ABI_CWindows_CDevices_CSensors_CIAltimeterReading2_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CDevices_CSensors_CIAltimeterReadingChangedEventArgs_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CIAltimeterReadingChangedEventArgs_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CDevices_CSensors_CIAltimeterReadingChangedEventArgs __x_ABI_CWindows_CDevices_CSensors_CIAltimeterReadingChangedEventArgs;

#endif // ____x_ABI_CWindows_CDevices_CSensors_CIAltimeterReadingChangedEventArgs_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CDevices_CSensors_CIAltimeterStatics_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CIAltimeterStatics_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CDevices_CSensors_CIAltimeterStatics __x_ABI_CWindows_CDevices_CSensors_CIAltimeterStatics;

#endif // ____x_ABI_CWindows_CDevices_CSensors_CIAltimeterStatics_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CDevices_CSensors_CIBarometer_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CIBarometer_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CDevices_CSensors_CIBarometer __x_ABI_CWindows_CDevices_CSensors_CIBarometer;

#endif // ____x_ABI_CWindows_CDevices_CSensors_CIBarometer_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CDevices_CSensors_CIBarometer2_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CIBarometer2_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CDevices_CSensors_CIBarometer2 __x_ABI_CWindows_CDevices_CSensors_CIBarometer2;

#endif // ____x_ABI_CWindows_CDevices_CSensors_CIBarometer2_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CDevices_CSensors_CIBarometer3_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CIBarometer3_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CDevices_CSensors_CIBarometer3 __x_ABI_CWindows_CDevices_CSensors_CIBarometer3;

#endif // ____x_ABI_CWindows_CDevices_CSensors_CIBarometer3_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CDevices_CSensors_CIBarometerDataThreshold_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CIBarometerDataThreshold_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CDevices_CSensors_CIBarometerDataThreshold __x_ABI_CWindows_CDevices_CSensors_CIBarometerDataThreshold;

#endif // ____x_ABI_CWindows_CDevices_CSensors_CIBarometerDataThreshold_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CDevices_CSensors_CIBarometerReading_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CIBarometerReading_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CDevices_CSensors_CIBarometerReading __x_ABI_CWindows_CDevices_CSensors_CIBarometerReading;

#endif // ____x_ABI_CWindows_CDevices_CSensors_CIBarometerReading_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CDevices_CSensors_CIBarometerReading2_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CIBarometerReading2_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CDevices_CSensors_CIBarometerReading2 __x_ABI_CWindows_CDevices_CSensors_CIBarometerReading2;

#endif // ____x_ABI_CWindows_CDevices_CSensors_CIBarometerReading2_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CDevices_CSensors_CIBarometerReadingChangedEventArgs_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CIBarometerReadingChangedEventArgs_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CDevices_CSensors_CIBarometerReadingChangedEventArgs __x_ABI_CWindows_CDevices_CSensors_CIBarometerReadingChangedEventArgs;

#endif // ____x_ABI_CWindows_CDevices_CSensors_CIBarometerReadingChangedEventArgs_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CDevices_CSensors_CIBarometerStatics_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CIBarometerStatics_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CDevices_CSensors_CIBarometerStatics __x_ABI_CWindows_CDevices_CSensors_CIBarometerStatics;

#endif // ____x_ABI_CWindows_CDevices_CSensors_CIBarometerStatics_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CDevices_CSensors_CIBarometerStatics2_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CIBarometerStatics2_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CDevices_CSensors_CIBarometerStatics2 __x_ABI_CWindows_CDevices_CSensors_CIBarometerStatics2;

#endif // ____x_ABI_CWindows_CDevices_CSensors_CIBarometerStatics2_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CDevices_CSensors_CICompass_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CICompass_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CDevices_CSensors_CICompass __x_ABI_CWindows_CDevices_CSensors_CICompass;

#endif // ____x_ABI_CWindows_CDevices_CSensors_CICompass_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CDevices_CSensors_CICompass2_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CICompass2_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CDevices_CSensors_CICompass2 __x_ABI_CWindows_CDevices_CSensors_CICompass2;

#endif // ____x_ABI_CWindows_CDevices_CSensors_CICompass2_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CDevices_CSensors_CICompass3_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CICompass3_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CDevices_CSensors_CICompass3 __x_ABI_CWindows_CDevices_CSensors_CICompass3;

#endif // ____x_ABI_CWindows_CDevices_CSensors_CICompass3_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CDevices_CSensors_CICompass4_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CICompass4_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CDevices_CSensors_CICompass4 __x_ABI_CWindows_CDevices_CSensors_CICompass4;

#endif // ____x_ABI_CWindows_CDevices_CSensors_CICompass4_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CDevices_CSensors_CICompassDataThreshold_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CICompassDataThreshold_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CDevices_CSensors_CICompassDataThreshold __x_ABI_CWindows_CDevices_CSensors_CICompassDataThreshold;

#endif // ____x_ABI_CWindows_CDevices_CSensors_CICompassDataThreshold_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CDevices_CSensors_CICompassDeviceId_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CICompassDeviceId_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CDevices_CSensors_CICompassDeviceId __x_ABI_CWindows_CDevices_CSensors_CICompassDeviceId;

#endif // ____x_ABI_CWindows_CDevices_CSensors_CICompassDeviceId_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CDevices_CSensors_CICompassReading_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CICompassReading_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CDevices_CSensors_CICompassReading __x_ABI_CWindows_CDevices_CSensors_CICompassReading;

#endif // ____x_ABI_CWindows_CDevices_CSensors_CICompassReading_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CDevices_CSensors_CICompassReading2_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CICompassReading2_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CDevices_CSensors_CICompassReading2 __x_ABI_CWindows_CDevices_CSensors_CICompassReading2;

#endif // ____x_ABI_CWindows_CDevices_CSensors_CICompassReading2_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CDevices_CSensors_CICompassReadingChangedEventArgs_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CICompassReadingChangedEventArgs_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CDevices_CSensors_CICompassReadingChangedEventArgs __x_ABI_CWindows_CDevices_CSensors_CICompassReadingChangedEventArgs;

#endif // ____x_ABI_CWindows_CDevices_CSensors_CICompassReadingChangedEventArgs_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CDevices_CSensors_CICompassReadingHeadingAccuracy_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CICompassReadingHeadingAccuracy_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CDevices_CSensors_CICompassReadingHeadingAccuracy __x_ABI_CWindows_CDevices_CSensors_CICompassReadingHeadingAccuracy;

#endif // ____x_ABI_CWindows_CDevices_CSensors_CICompassReadingHeadingAccuracy_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CDevices_CSensors_CICompassStatics_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CICompassStatics_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CDevices_CSensors_CICompassStatics __x_ABI_CWindows_CDevices_CSensors_CICompassStatics;

#endif // ____x_ABI_CWindows_CDevices_CSensors_CICompassStatics_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CDevices_CSensors_CICompassStatics2_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CICompassStatics2_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CDevices_CSensors_CICompassStatics2 __x_ABI_CWindows_CDevices_CSensors_CICompassStatics2;

#endif // ____x_ABI_CWindows_CDevices_CSensors_CICompassStatics2_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CDevices_CSensors_CIGyrometer_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CIGyrometer_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CDevices_CSensors_CIGyrometer __x_ABI_CWindows_CDevices_CSensors_CIGyrometer;

#endif // ____x_ABI_CWindows_CDevices_CSensors_CIGyrometer_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CDevices_CSensors_CIGyrometer2_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CIGyrometer2_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CDevices_CSensors_CIGyrometer2 __x_ABI_CWindows_CDevices_CSensors_CIGyrometer2;

#endif // ____x_ABI_CWindows_CDevices_CSensors_CIGyrometer2_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CDevices_CSensors_CIGyrometer3_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CIGyrometer3_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CDevices_CSensors_CIGyrometer3 __x_ABI_CWindows_CDevices_CSensors_CIGyrometer3;

#endif // ____x_ABI_CWindows_CDevices_CSensors_CIGyrometer3_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CDevices_CSensors_CIGyrometer4_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CIGyrometer4_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CDevices_CSensors_CIGyrometer4 __x_ABI_CWindows_CDevices_CSensors_CIGyrometer4;

#endif // ____x_ABI_CWindows_CDevices_CSensors_CIGyrometer4_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CDevices_CSensors_CIGyrometerDataThreshold_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CIGyrometerDataThreshold_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CDevices_CSensors_CIGyrometerDataThreshold __x_ABI_CWindows_CDevices_CSensors_CIGyrometerDataThreshold;

#endif // ____x_ABI_CWindows_CDevices_CSensors_CIGyrometerDataThreshold_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CDevices_CSensors_CIGyrometerDeviceId_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CIGyrometerDeviceId_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CDevices_CSensors_CIGyrometerDeviceId __x_ABI_CWindows_CDevices_CSensors_CIGyrometerDeviceId;

#endif // ____x_ABI_CWindows_CDevices_CSensors_CIGyrometerDeviceId_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CDevices_CSensors_CIGyrometerReading_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CIGyrometerReading_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CDevices_CSensors_CIGyrometerReading __x_ABI_CWindows_CDevices_CSensors_CIGyrometerReading;

#endif // ____x_ABI_CWindows_CDevices_CSensors_CIGyrometerReading_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CDevices_CSensors_CIGyrometerReading2_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CIGyrometerReading2_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CDevices_CSensors_CIGyrometerReading2 __x_ABI_CWindows_CDevices_CSensors_CIGyrometerReading2;

#endif // ____x_ABI_CWindows_CDevices_CSensors_CIGyrometerReading2_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CDevices_CSensors_CIGyrometerReadingChangedEventArgs_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CIGyrometerReadingChangedEventArgs_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CDevices_CSensors_CIGyrometerReadingChangedEventArgs __x_ABI_CWindows_CDevices_CSensors_CIGyrometerReadingChangedEventArgs;

#endif // ____x_ABI_CWindows_CDevices_CSensors_CIGyrometerReadingChangedEventArgs_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CDevices_CSensors_CIGyrometerStatics_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CIGyrometerStatics_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CDevices_CSensors_CIGyrometerStatics __x_ABI_CWindows_CDevices_CSensors_CIGyrometerStatics;

#endif // ____x_ABI_CWindows_CDevices_CSensors_CIGyrometerStatics_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CDevices_CSensors_CIGyrometerStatics2_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CIGyrometerStatics2_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CDevices_CSensors_CIGyrometerStatics2 __x_ABI_CWindows_CDevices_CSensors_CIGyrometerStatics2;

#endif // ____x_ABI_CWindows_CDevices_CSensors_CIGyrometerStatics2_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CDevices_CSensors_CIHingeAngleReading_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CIHingeAngleReading_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CDevices_CSensors_CIHingeAngleReading __x_ABI_CWindows_CDevices_CSensors_CIHingeAngleReading;

#endif // ____x_ABI_CWindows_CDevices_CSensors_CIHingeAngleReading_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CDevices_CSensors_CIHingeAngleSensor_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CIHingeAngleSensor_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CDevices_CSensors_CIHingeAngleSensor __x_ABI_CWindows_CDevices_CSensors_CIHingeAngleSensor;

#endif // ____x_ABI_CWindows_CDevices_CSensors_CIHingeAngleSensor_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CDevices_CSensors_CIHingeAngleSensorReadingChangedEventArgs_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CIHingeAngleSensorReadingChangedEventArgs_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CDevices_CSensors_CIHingeAngleSensorReadingChangedEventArgs __x_ABI_CWindows_CDevices_CSensors_CIHingeAngleSensorReadingChangedEventArgs;

#endif // ____x_ABI_CWindows_CDevices_CSensors_CIHingeAngleSensorReadingChangedEventArgs_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CDevices_CSensors_CIHingeAngleSensorStatics_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CIHingeAngleSensorStatics_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CDevices_CSensors_CIHingeAngleSensorStatics __x_ABI_CWindows_CDevices_CSensors_CIHingeAngleSensorStatics;

#endif // ____x_ABI_CWindows_CDevices_CSensors_CIHingeAngleSensorStatics_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CDevices_CSensors_CIInclinometer_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CIInclinometer_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CDevices_CSensors_CIInclinometer __x_ABI_CWindows_CDevices_CSensors_CIInclinometer;

#endif // ____x_ABI_CWindows_CDevices_CSensors_CIInclinometer_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CDevices_CSensors_CIInclinometer2_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CIInclinometer2_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CDevices_CSensors_CIInclinometer2 __x_ABI_CWindows_CDevices_CSensors_CIInclinometer2;

#endif // ____x_ABI_CWindows_CDevices_CSensors_CIInclinometer2_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CDevices_CSensors_CIInclinometer3_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CIInclinometer3_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CDevices_CSensors_CIInclinometer3 __x_ABI_CWindows_CDevices_CSensors_CIInclinometer3;

#endif // ____x_ABI_CWindows_CDevices_CSensors_CIInclinometer3_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CDevices_CSensors_CIInclinometer4_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CIInclinometer4_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CDevices_CSensors_CIInclinometer4 __x_ABI_CWindows_CDevices_CSensors_CIInclinometer4;

#endif // ____x_ABI_CWindows_CDevices_CSensors_CIInclinometer4_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CDevices_CSensors_CIInclinometerDataThreshold_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CIInclinometerDataThreshold_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CDevices_CSensors_CIInclinometerDataThreshold __x_ABI_CWindows_CDevices_CSensors_CIInclinometerDataThreshold;

#endif // ____x_ABI_CWindows_CDevices_CSensors_CIInclinometerDataThreshold_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CDevices_CSensors_CIInclinometerDeviceId_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CIInclinometerDeviceId_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CDevices_CSensors_CIInclinometerDeviceId __x_ABI_CWindows_CDevices_CSensors_CIInclinometerDeviceId;

#endif // ____x_ABI_CWindows_CDevices_CSensors_CIInclinometerDeviceId_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CDevices_CSensors_CIInclinometerReading_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CIInclinometerReading_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CDevices_CSensors_CIInclinometerReading __x_ABI_CWindows_CDevices_CSensors_CIInclinometerReading;

#endif // ____x_ABI_CWindows_CDevices_CSensors_CIInclinometerReading_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CDevices_CSensors_CIInclinometerReading2_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CIInclinometerReading2_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CDevices_CSensors_CIInclinometerReading2 __x_ABI_CWindows_CDevices_CSensors_CIInclinometerReading2;

#endif // ____x_ABI_CWindows_CDevices_CSensors_CIInclinometerReading2_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CDevices_CSensors_CIInclinometerReadingChangedEventArgs_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CIInclinometerReadingChangedEventArgs_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CDevices_CSensors_CIInclinometerReadingChangedEventArgs __x_ABI_CWindows_CDevices_CSensors_CIInclinometerReadingChangedEventArgs;

#endif // ____x_ABI_CWindows_CDevices_CSensors_CIInclinometerReadingChangedEventArgs_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CDevices_CSensors_CIInclinometerReadingYawAccuracy_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CIInclinometerReadingYawAccuracy_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CDevices_CSensors_CIInclinometerReadingYawAccuracy __x_ABI_CWindows_CDevices_CSensors_CIInclinometerReadingYawAccuracy;

#endif // ____x_ABI_CWindows_CDevices_CSensors_CIInclinometerReadingYawAccuracy_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CDevices_CSensors_CIInclinometerStatics_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CIInclinometerStatics_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CDevices_CSensors_CIInclinometerStatics __x_ABI_CWindows_CDevices_CSensors_CIInclinometerStatics;

#endif // ____x_ABI_CWindows_CDevices_CSensors_CIInclinometerStatics_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CDevices_CSensors_CIInclinometerStatics2_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CIInclinometerStatics2_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CDevices_CSensors_CIInclinometerStatics2 __x_ABI_CWindows_CDevices_CSensors_CIInclinometerStatics2;

#endif // ____x_ABI_CWindows_CDevices_CSensors_CIInclinometerStatics2_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CDevices_CSensors_CIInclinometerStatics3_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CIInclinometerStatics3_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CDevices_CSensors_CIInclinometerStatics3 __x_ABI_CWindows_CDevices_CSensors_CIInclinometerStatics3;

#endif // ____x_ABI_CWindows_CDevices_CSensors_CIInclinometerStatics3_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CDevices_CSensors_CIInclinometerStatics4_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CIInclinometerStatics4_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CDevices_CSensors_CIInclinometerStatics4 __x_ABI_CWindows_CDevices_CSensors_CIInclinometerStatics4;

#endif // ____x_ABI_CWindows_CDevices_CSensors_CIInclinometerStatics4_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CDevices_CSensors_CILightSensor_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CILightSensor_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CDevices_CSensors_CILightSensor __x_ABI_CWindows_CDevices_CSensors_CILightSensor;

#endif // ____x_ABI_CWindows_CDevices_CSensors_CILightSensor_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CDevices_CSensors_CILightSensor2_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CILightSensor2_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CDevices_CSensors_CILightSensor2 __x_ABI_CWindows_CDevices_CSensors_CILightSensor2;

#endif // ____x_ABI_CWindows_CDevices_CSensors_CILightSensor2_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CDevices_CSensors_CILightSensor3_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CILightSensor3_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CDevices_CSensors_CILightSensor3 __x_ABI_CWindows_CDevices_CSensors_CILightSensor3;

#endif // ____x_ABI_CWindows_CDevices_CSensors_CILightSensor3_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CDevices_CSensors_CILightSensorDataThreshold_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CILightSensorDataThreshold_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CDevices_CSensors_CILightSensorDataThreshold __x_ABI_CWindows_CDevices_CSensors_CILightSensorDataThreshold;

#endif // ____x_ABI_CWindows_CDevices_CSensors_CILightSensorDataThreshold_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CDevices_CSensors_CILightSensorDeviceId_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CILightSensorDeviceId_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CDevices_CSensors_CILightSensorDeviceId __x_ABI_CWindows_CDevices_CSensors_CILightSensorDeviceId;

#endif // ____x_ABI_CWindows_CDevices_CSensors_CILightSensorDeviceId_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CDevices_CSensors_CILightSensorReading_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CILightSensorReading_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CDevices_CSensors_CILightSensorReading __x_ABI_CWindows_CDevices_CSensors_CILightSensorReading;

#endif // ____x_ABI_CWindows_CDevices_CSensors_CILightSensorReading_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CDevices_CSensors_CILightSensorReading2_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CILightSensorReading2_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CDevices_CSensors_CILightSensorReading2 __x_ABI_CWindows_CDevices_CSensors_CILightSensorReading2;

#endif // ____x_ABI_CWindows_CDevices_CSensors_CILightSensorReading2_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CDevices_CSensors_CILightSensorReadingChangedEventArgs_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CILightSensorReadingChangedEventArgs_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CDevices_CSensors_CILightSensorReadingChangedEventArgs __x_ABI_CWindows_CDevices_CSensors_CILightSensorReadingChangedEventArgs;

#endif // ____x_ABI_CWindows_CDevices_CSensors_CILightSensorReadingChangedEventArgs_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CDevices_CSensors_CILightSensorStatics_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CILightSensorStatics_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CDevices_CSensors_CILightSensorStatics __x_ABI_CWindows_CDevices_CSensors_CILightSensorStatics;

#endif // ____x_ABI_CWindows_CDevices_CSensors_CILightSensorStatics_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CDevices_CSensors_CILightSensorStatics2_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CILightSensorStatics2_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CDevices_CSensors_CILightSensorStatics2 __x_ABI_CWindows_CDevices_CSensors_CILightSensorStatics2;

#endif // ____x_ABI_CWindows_CDevices_CSensors_CILightSensorStatics2_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CDevices_CSensors_CIMagnetometer_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CIMagnetometer_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CDevices_CSensors_CIMagnetometer __x_ABI_CWindows_CDevices_CSensors_CIMagnetometer;

#endif // ____x_ABI_CWindows_CDevices_CSensors_CIMagnetometer_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CDevices_CSensors_CIMagnetometer2_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CIMagnetometer2_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CDevices_CSensors_CIMagnetometer2 __x_ABI_CWindows_CDevices_CSensors_CIMagnetometer2;

#endif // ____x_ABI_CWindows_CDevices_CSensors_CIMagnetometer2_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CDevices_CSensors_CIMagnetometer3_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CIMagnetometer3_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CDevices_CSensors_CIMagnetometer3 __x_ABI_CWindows_CDevices_CSensors_CIMagnetometer3;

#endif // ____x_ABI_CWindows_CDevices_CSensors_CIMagnetometer3_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CDevices_CSensors_CIMagnetometer4_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CIMagnetometer4_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CDevices_CSensors_CIMagnetometer4 __x_ABI_CWindows_CDevices_CSensors_CIMagnetometer4;

#endif // ____x_ABI_CWindows_CDevices_CSensors_CIMagnetometer4_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CDevices_CSensors_CIMagnetometerDataThreshold_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CIMagnetometerDataThreshold_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CDevices_CSensors_CIMagnetometerDataThreshold __x_ABI_CWindows_CDevices_CSensors_CIMagnetometerDataThreshold;

#endif // ____x_ABI_CWindows_CDevices_CSensors_CIMagnetometerDataThreshold_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CDevices_CSensors_CIMagnetometerDeviceId_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CIMagnetometerDeviceId_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CDevices_CSensors_CIMagnetometerDeviceId __x_ABI_CWindows_CDevices_CSensors_CIMagnetometerDeviceId;

#endif // ____x_ABI_CWindows_CDevices_CSensors_CIMagnetometerDeviceId_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CDevices_CSensors_CIMagnetometerReading_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CIMagnetometerReading_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CDevices_CSensors_CIMagnetometerReading __x_ABI_CWindows_CDevices_CSensors_CIMagnetometerReading;

#endif // ____x_ABI_CWindows_CDevices_CSensors_CIMagnetometerReading_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CDevices_CSensors_CIMagnetometerReading2_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CIMagnetometerReading2_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CDevices_CSensors_CIMagnetometerReading2 __x_ABI_CWindows_CDevices_CSensors_CIMagnetometerReading2;

#endif // ____x_ABI_CWindows_CDevices_CSensors_CIMagnetometerReading2_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CDevices_CSensors_CIMagnetometerReadingChangedEventArgs_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CIMagnetometerReadingChangedEventArgs_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CDevices_CSensors_CIMagnetometerReadingChangedEventArgs __x_ABI_CWindows_CDevices_CSensors_CIMagnetometerReadingChangedEventArgs;

#endif // ____x_ABI_CWindows_CDevices_CSensors_CIMagnetometerReadingChangedEventArgs_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CDevices_CSensors_CIMagnetometerStatics_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CIMagnetometerStatics_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CDevices_CSensors_CIMagnetometerStatics __x_ABI_CWindows_CDevices_CSensors_CIMagnetometerStatics;

#endif // ____x_ABI_CWindows_CDevices_CSensors_CIMagnetometerStatics_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CDevices_CSensors_CIMagnetometerStatics2_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CIMagnetometerStatics2_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CDevices_CSensors_CIMagnetometerStatics2 __x_ABI_CWindows_CDevices_CSensors_CIMagnetometerStatics2;

#endif // ____x_ABI_CWindows_CDevices_CSensors_CIMagnetometerStatics2_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CDevices_CSensors_CIOrientationSensor_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CIOrientationSensor_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CDevices_CSensors_CIOrientationSensor __x_ABI_CWindows_CDevices_CSensors_CIOrientationSensor;

#endif // ____x_ABI_CWindows_CDevices_CSensors_CIOrientationSensor_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CDevices_CSensors_CIOrientationSensor2_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CIOrientationSensor2_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CDevices_CSensors_CIOrientationSensor2 __x_ABI_CWindows_CDevices_CSensors_CIOrientationSensor2;

#endif // ____x_ABI_CWindows_CDevices_CSensors_CIOrientationSensor2_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CDevices_CSensors_CIOrientationSensor3_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CIOrientationSensor3_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CDevices_CSensors_CIOrientationSensor3 __x_ABI_CWindows_CDevices_CSensors_CIOrientationSensor3;

#endif // ____x_ABI_CWindows_CDevices_CSensors_CIOrientationSensor3_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorDeviceId_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorDeviceId_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorDeviceId __x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorDeviceId;

#endif // ____x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorDeviceId_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorReading_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorReading_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorReading __x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorReading;

#endif // ____x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorReading_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorReading2_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorReading2_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorReading2 __x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorReading2;

#endif // ____x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorReading2_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorReadingChangedEventArgs_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorReadingChangedEventArgs_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorReadingChangedEventArgs __x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorReadingChangedEventArgs;

#endif // ____x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorReadingChangedEventArgs_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorReadingYawAccuracy_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorReadingYawAccuracy_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorReadingYawAccuracy __x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorReadingYawAccuracy;

#endif // ____x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorReadingYawAccuracy_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorStatics_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorStatics_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorStatics __x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorStatics;

#endif // ____x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorStatics_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorStatics2_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorStatics2_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorStatics2 __x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorStatics2;

#endif // ____x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorStatics2_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorStatics3_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorStatics3_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorStatics3 __x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorStatics3;

#endif // ____x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorStatics3_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorStatics4_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorStatics4_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorStatics4 __x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorStatics4;

#endif // ____x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorStatics4_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CDevices_CSensors_CIPedometer_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CIPedometer_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CDevices_CSensors_CIPedometer __x_ABI_CWindows_CDevices_CSensors_CIPedometer;

#endif // ____x_ABI_CWindows_CDevices_CSensors_CIPedometer_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CDevices_CSensors_CIPedometer2_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CIPedometer2_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CDevices_CSensors_CIPedometer2 __x_ABI_CWindows_CDevices_CSensors_CIPedometer2;

#endif // ____x_ABI_CWindows_CDevices_CSensors_CIPedometer2_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CDevices_CSensors_CIPedometerDataThresholdFactory_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CIPedometerDataThresholdFactory_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CDevices_CSensors_CIPedometerDataThresholdFactory __x_ABI_CWindows_CDevices_CSensors_CIPedometerDataThresholdFactory;

#endif // ____x_ABI_CWindows_CDevices_CSensors_CIPedometerDataThresholdFactory_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CDevices_CSensors_CIPedometerReading_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CIPedometerReading_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CDevices_CSensors_CIPedometerReading __x_ABI_CWindows_CDevices_CSensors_CIPedometerReading;

#endif // ____x_ABI_CWindows_CDevices_CSensors_CIPedometerReading_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CDevices_CSensors_CIPedometerReadingChangedEventArgs_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CIPedometerReadingChangedEventArgs_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CDevices_CSensors_CIPedometerReadingChangedEventArgs __x_ABI_CWindows_CDevices_CSensors_CIPedometerReadingChangedEventArgs;

#endif // ____x_ABI_CWindows_CDevices_CSensors_CIPedometerReadingChangedEventArgs_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CDevices_CSensors_CIPedometerStatics_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CIPedometerStatics_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CDevices_CSensors_CIPedometerStatics __x_ABI_CWindows_CDevices_CSensors_CIPedometerStatics;

#endif // ____x_ABI_CWindows_CDevices_CSensors_CIPedometerStatics_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CDevices_CSensors_CIPedometerStatics2_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CIPedometerStatics2_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CDevices_CSensors_CIPedometerStatics2 __x_ABI_CWindows_CDevices_CSensors_CIPedometerStatics2;

#endif // ____x_ABI_CWindows_CDevices_CSensors_CIPedometerStatics2_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CDevices_CSensors_CIProximitySensor_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CIProximitySensor_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CDevices_CSensors_CIProximitySensor __x_ABI_CWindows_CDevices_CSensors_CIProximitySensor;

#endif // ____x_ABI_CWindows_CDevices_CSensors_CIProximitySensor_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CDevices_CSensors_CIProximitySensorDataThresholdFactory_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CIProximitySensorDataThresholdFactory_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CDevices_CSensors_CIProximitySensorDataThresholdFactory __x_ABI_CWindows_CDevices_CSensors_CIProximitySensorDataThresholdFactory;

#endif // ____x_ABI_CWindows_CDevices_CSensors_CIProximitySensorDataThresholdFactory_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CDevices_CSensors_CIProximitySensorReading_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CIProximitySensorReading_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CDevices_CSensors_CIProximitySensorReading __x_ABI_CWindows_CDevices_CSensors_CIProximitySensorReading;

#endif // ____x_ABI_CWindows_CDevices_CSensors_CIProximitySensorReading_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CDevices_CSensors_CIProximitySensorReadingChangedEventArgs_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CIProximitySensorReadingChangedEventArgs_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CDevices_CSensors_CIProximitySensorReadingChangedEventArgs __x_ABI_CWindows_CDevices_CSensors_CIProximitySensorReadingChangedEventArgs;

#endif // ____x_ABI_CWindows_CDevices_CSensors_CIProximitySensorReadingChangedEventArgs_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CDevices_CSensors_CIProximitySensorStatics_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CIProximitySensorStatics_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CDevices_CSensors_CIProximitySensorStatics __x_ABI_CWindows_CDevices_CSensors_CIProximitySensorStatics;

#endif // ____x_ABI_CWindows_CDevices_CSensors_CIProximitySensorStatics_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CDevices_CSensors_CIProximitySensorStatics2_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CIProximitySensorStatics2_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CDevices_CSensors_CIProximitySensorStatics2 __x_ABI_CWindows_CDevices_CSensors_CIProximitySensorStatics2;

#endif // ____x_ABI_CWindows_CDevices_CSensors_CIProximitySensorStatics2_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CDevices_CSensors_CISensorDataThreshold_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CISensorDataThreshold_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CDevices_CSensors_CISensorDataThreshold __x_ABI_CWindows_CDevices_CSensors_CISensorDataThreshold;

#endif // ____x_ABI_CWindows_CDevices_CSensors_CISensorDataThreshold_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CDevices_CSensors_CISensorDataThresholdTriggerDetails_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CISensorDataThresholdTriggerDetails_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CDevices_CSensors_CISensorDataThresholdTriggerDetails __x_ABI_CWindows_CDevices_CSensors_CISensorDataThresholdTriggerDetails;

#endif // ____x_ABI_CWindows_CDevices_CSensors_CISensorDataThresholdTriggerDetails_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CDevices_CSensors_CISensorQuaternion_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CISensorQuaternion_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CDevices_CSensors_CISensorQuaternion __x_ABI_CWindows_CDevices_CSensors_CISensorQuaternion;

#endif // ____x_ABI_CWindows_CDevices_CSensors_CISensorQuaternion_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CDevices_CSensors_CISensorRotationMatrix_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CISensorRotationMatrix_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CDevices_CSensors_CISensorRotationMatrix __x_ABI_CWindows_CDevices_CSensors_CISensorRotationMatrix;

#endif // ____x_ABI_CWindows_CDevices_CSensors_CISensorRotationMatrix_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensor_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensor_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensor __x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensor;

#endif // ____x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensor_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensor2_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensor2_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensor2 __x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensor2;

#endif // ____x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensor2_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensorDeviceId_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensorDeviceId_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensorDeviceId __x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensorDeviceId;

#endif // ____x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensorDeviceId_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensorOrientationChangedEventArgs_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensorOrientationChangedEventArgs_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensorOrientationChangedEventArgs __x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensorOrientationChangedEventArgs;

#endif // ____x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensorOrientationChangedEventArgs_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensorStatics_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensorStatics_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensorStatics __x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensorStatics;

#endif // ____x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensorStatics_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensorStatics2_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensorStatics2_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensorStatics2 __x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensorStatics2;

#endif // ____x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensorStatics2_FWD_DEFINED__

// Parameterized interface forward declarations (C)

// Collection interface definitions

typedef interface __FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__CAccelerometer __FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__CAccelerometer;

#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____FIAsyncOperation_1_Windows__CDevices__CSensors__CAccelerometer_INTERFACE_DEFINED__)
#define ____FIAsyncOperation_1_Windows__CDevices__CSensors__CAccelerometer_INTERFACE_DEFINED__

typedef interface __FIAsyncOperation_1_Windows__CDevices__CSensors__CAccelerometer __FIAsyncOperation_1_Windows__CDevices__CSensors__CAccelerometer;

//  Declare the parameterized interface IID.
EXTERN_C const IID IID___FIAsyncOperation_1_Windows__CDevices__CSensors__CAccelerometer;

typedef struct __FIAsyncOperation_1_Windows__CDevices__CSensors__CAccelerometerVtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__FIAsyncOperation_1_Windows__CDevices__CSensors__CAccelerometer* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__FIAsyncOperation_1_Windows__CDevices__CSensors__CAccelerometer* This);
    ULONG (STDMETHODCALLTYPE* Release)(__FIAsyncOperation_1_Windows__CDevices__CSensors__CAccelerometer* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__FIAsyncOperation_1_Windows__CDevices__CSensors__CAccelerometer* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__FIAsyncOperation_1_Windows__CDevices__CSensors__CAccelerometer* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__FIAsyncOperation_1_Windows__CDevices__CSensors__CAccelerometer* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* put_Completed)(__FIAsyncOperation_1_Windows__CDevices__CSensors__CAccelerometer* This,
        __FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__CAccelerometer* handler);
    HRESULT (STDMETHODCALLTYPE* get_Completed)(__FIAsyncOperation_1_Windows__CDevices__CSensors__CAccelerometer* This,
        __FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__CAccelerometer** result);
    HRESULT (STDMETHODCALLTYPE* GetResults)(__FIAsyncOperation_1_Windows__CDevices__CSensors__CAccelerometer* This,
        __x_ABI_CWindows_CDevices_CSensors_CIAccelerometer** result);

    END_INTERFACE
} __FIAsyncOperation_1_Windows__CDevices__CSensors__CAccelerometerVtbl;

interface __FIAsyncOperation_1_Windows__CDevices__CSensors__CAccelerometer
{
    CONST_VTBL struct __FIAsyncOperation_1_Windows__CDevices__CSensors__CAccelerometerVtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __FIAsyncOperation_1_Windows__CDevices__CSensors__CAccelerometer_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __FIAsyncOperation_1_Windows__CDevices__CSensors__CAccelerometer_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __FIAsyncOperation_1_Windows__CDevices__CSensors__CAccelerometer_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __FIAsyncOperation_1_Windows__CDevices__CSensors__CAccelerometer_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __FIAsyncOperation_1_Windows__CDevices__CSensors__CAccelerometer_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __FIAsyncOperation_1_Windows__CDevices__CSensors__CAccelerometer_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __FIAsyncOperation_1_Windows__CDevices__CSensors__CAccelerometer_put_Completed(This, handler) \
    ((This)->lpVtbl->put_Completed(This, handler))

#define __FIAsyncOperation_1_Windows__CDevices__CSensors__CAccelerometer_get_Completed(This, result) \
    ((This)->lpVtbl->get_Completed(This, result))

#define __FIAsyncOperation_1_Windows__CDevices__CSensors__CAccelerometer_GetResults(This, result) \
    ((This)->lpVtbl->GetResults(This, result))

#endif /* COBJMACROS */

#endif // ____FIAsyncOperation_1_Windows__CDevices__CSensors__CAccelerometer_INTERFACE_DEFINED__
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__CAccelerometer_INTERFACE_DEFINED__)
#define ____FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__CAccelerometer_INTERFACE_DEFINED__

typedef interface __FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__CAccelerometer __FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__CAccelerometer;

//  Declare the parameterized interface IID.
EXTERN_C const IID IID___FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__CAccelerometer;

typedef struct __FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__CAccelerometerVtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__CAccelerometer* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__CAccelerometer* This);
    ULONG (STDMETHODCALLTYPE* Release)(__FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__CAccelerometer* This);
    HRESULT (STDMETHODCALLTYPE* Invoke)(__FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__CAccelerometer* This,
        __FIAsyncOperation_1_Windows__CDevices__CSensors__CAccelerometer* asyncInfo,
        AsyncStatus asyncStatus);

    END_INTERFACE
} __FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__CAccelerometerVtbl;

interface __FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__CAccelerometer
{
    CONST_VTBL struct __FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__CAccelerometerVtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__CAccelerometer_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__CAccelerometer_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__CAccelerometer_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__CAccelerometer_Invoke(This, asyncInfo, asyncStatus) \
    ((This)->lpVtbl->Invoke(This, asyncInfo, asyncStatus))

#endif /* COBJMACROS */

#endif // ____FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__CAccelerometer_INTERFACE_DEFINED__
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

typedef interface __FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__CActivitySensor __FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__CActivitySensor;

#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____FIAsyncOperation_1_Windows__CDevices__CSensors__CActivitySensor_INTERFACE_DEFINED__)
#define ____FIAsyncOperation_1_Windows__CDevices__CSensors__CActivitySensor_INTERFACE_DEFINED__

typedef interface __FIAsyncOperation_1_Windows__CDevices__CSensors__CActivitySensor __FIAsyncOperation_1_Windows__CDevices__CSensors__CActivitySensor;

//  Declare the parameterized interface IID.
EXTERN_C const IID IID___FIAsyncOperation_1_Windows__CDevices__CSensors__CActivitySensor;

typedef struct __FIAsyncOperation_1_Windows__CDevices__CSensors__CActivitySensorVtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__FIAsyncOperation_1_Windows__CDevices__CSensors__CActivitySensor* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__FIAsyncOperation_1_Windows__CDevices__CSensors__CActivitySensor* This);
    ULONG (STDMETHODCALLTYPE* Release)(__FIAsyncOperation_1_Windows__CDevices__CSensors__CActivitySensor* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__FIAsyncOperation_1_Windows__CDevices__CSensors__CActivitySensor* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__FIAsyncOperation_1_Windows__CDevices__CSensors__CActivitySensor* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__FIAsyncOperation_1_Windows__CDevices__CSensors__CActivitySensor* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* put_Completed)(__FIAsyncOperation_1_Windows__CDevices__CSensors__CActivitySensor* This,
        __FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__CActivitySensor* handler);
    HRESULT (STDMETHODCALLTYPE* get_Completed)(__FIAsyncOperation_1_Windows__CDevices__CSensors__CActivitySensor* This,
        __FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__CActivitySensor** result);
    HRESULT (STDMETHODCALLTYPE* GetResults)(__FIAsyncOperation_1_Windows__CDevices__CSensors__CActivitySensor* This,
        __x_ABI_CWindows_CDevices_CSensors_CIActivitySensor** result);

    END_INTERFACE
} __FIAsyncOperation_1_Windows__CDevices__CSensors__CActivitySensorVtbl;

interface __FIAsyncOperation_1_Windows__CDevices__CSensors__CActivitySensor
{
    CONST_VTBL struct __FIAsyncOperation_1_Windows__CDevices__CSensors__CActivitySensorVtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __FIAsyncOperation_1_Windows__CDevices__CSensors__CActivitySensor_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __FIAsyncOperation_1_Windows__CDevices__CSensors__CActivitySensor_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __FIAsyncOperation_1_Windows__CDevices__CSensors__CActivitySensor_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __FIAsyncOperation_1_Windows__CDevices__CSensors__CActivitySensor_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __FIAsyncOperation_1_Windows__CDevices__CSensors__CActivitySensor_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __FIAsyncOperation_1_Windows__CDevices__CSensors__CActivitySensor_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __FIAsyncOperation_1_Windows__CDevices__CSensors__CActivitySensor_put_Completed(This, handler) \
    ((This)->lpVtbl->put_Completed(This, handler))

#define __FIAsyncOperation_1_Windows__CDevices__CSensors__CActivitySensor_get_Completed(This, result) \
    ((This)->lpVtbl->get_Completed(This, result))

#define __FIAsyncOperation_1_Windows__CDevices__CSensors__CActivitySensor_GetResults(This, result) \
    ((This)->lpVtbl->GetResults(This, result))

#endif /* COBJMACROS */

#endif // ____FIAsyncOperation_1_Windows__CDevices__CSensors__CActivitySensor_INTERFACE_DEFINED__
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__CActivitySensor_INTERFACE_DEFINED__)
#define ____FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__CActivitySensor_INTERFACE_DEFINED__

typedef interface __FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__CActivitySensor __FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__CActivitySensor;

//  Declare the parameterized interface IID.
EXTERN_C const IID IID___FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__CActivitySensor;

typedef struct __FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__CActivitySensorVtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__CActivitySensor* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__CActivitySensor* This);
    ULONG (STDMETHODCALLTYPE* Release)(__FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__CActivitySensor* This);
    HRESULT (STDMETHODCALLTYPE* Invoke)(__FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__CActivitySensor* This,
        __FIAsyncOperation_1_Windows__CDevices__CSensors__CActivitySensor* asyncInfo,
        AsyncStatus asyncStatus);

    END_INTERFACE
} __FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__CActivitySensorVtbl;

interface __FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__CActivitySensor
{
    CONST_VTBL struct __FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__CActivitySensorVtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__CActivitySensor_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__CActivitySensor_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__CActivitySensor_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__CActivitySensor_Invoke(This, asyncInfo, asyncStatus) \
    ((This)->lpVtbl->Invoke(This, asyncInfo, asyncStatus))

#endif /* COBJMACROS */

#endif // ____FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__CActivitySensor_INTERFACE_DEFINED__
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

typedef interface __FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__CActivitySensorReading __FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__CActivitySensorReading;

#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____FIAsyncOperation_1_Windows__CDevices__CSensors__CActivitySensorReading_INTERFACE_DEFINED__)
#define ____FIAsyncOperation_1_Windows__CDevices__CSensors__CActivitySensorReading_INTERFACE_DEFINED__

typedef interface __FIAsyncOperation_1_Windows__CDevices__CSensors__CActivitySensorReading __FIAsyncOperation_1_Windows__CDevices__CSensors__CActivitySensorReading;

//  Declare the parameterized interface IID.
EXTERN_C const IID IID___FIAsyncOperation_1_Windows__CDevices__CSensors__CActivitySensorReading;

typedef struct __FIAsyncOperation_1_Windows__CDevices__CSensors__CActivitySensorReadingVtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__FIAsyncOperation_1_Windows__CDevices__CSensors__CActivitySensorReading* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__FIAsyncOperation_1_Windows__CDevices__CSensors__CActivitySensorReading* This);
    ULONG (STDMETHODCALLTYPE* Release)(__FIAsyncOperation_1_Windows__CDevices__CSensors__CActivitySensorReading* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__FIAsyncOperation_1_Windows__CDevices__CSensors__CActivitySensorReading* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__FIAsyncOperation_1_Windows__CDevices__CSensors__CActivitySensorReading* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__FIAsyncOperation_1_Windows__CDevices__CSensors__CActivitySensorReading* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* put_Completed)(__FIAsyncOperation_1_Windows__CDevices__CSensors__CActivitySensorReading* This,
        __FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__CActivitySensorReading* handler);
    HRESULT (STDMETHODCALLTYPE* get_Completed)(__FIAsyncOperation_1_Windows__CDevices__CSensors__CActivitySensorReading* This,
        __FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__CActivitySensorReading** result);
    HRESULT (STDMETHODCALLTYPE* GetResults)(__FIAsyncOperation_1_Windows__CDevices__CSensors__CActivitySensorReading* This,
        __x_ABI_CWindows_CDevices_CSensors_CIActivitySensorReading** result);

    END_INTERFACE
} __FIAsyncOperation_1_Windows__CDevices__CSensors__CActivitySensorReadingVtbl;

interface __FIAsyncOperation_1_Windows__CDevices__CSensors__CActivitySensorReading
{
    CONST_VTBL struct __FIAsyncOperation_1_Windows__CDevices__CSensors__CActivitySensorReadingVtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __FIAsyncOperation_1_Windows__CDevices__CSensors__CActivitySensorReading_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __FIAsyncOperation_1_Windows__CDevices__CSensors__CActivitySensorReading_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __FIAsyncOperation_1_Windows__CDevices__CSensors__CActivitySensorReading_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __FIAsyncOperation_1_Windows__CDevices__CSensors__CActivitySensorReading_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __FIAsyncOperation_1_Windows__CDevices__CSensors__CActivitySensorReading_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __FIAsyncOperation_1_Windows__CDevices__CSensors__CActivitySensorReading_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __FIAsyncOperation_1_Windows__CDevices__CSensors__CActivitySensorReading_put_Completed(This, handler) \
    ((This)->lpVtbl->put_Completed(This, handler))

#define __FIAsyncOperation_1_Windows__CDevices__CSensors__CActivitySensorReading_get_Completed(This, result) \
    ((This)->lpVtbl->get_Completed(This, result))

#define __FIAsyncOperation_1_Windows__CDevices__CSensors__CActivitySensorReading_GetResults(This, result) \
    ((This)->lpVtbl->GetResults(This, result))

#endif /* COBJMACROS */

#endif // ____FIAsyncOperation_1_Windows__CDevices__CSensors__CActivitySensorReading_INTERFACE_DEFINED__
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__CActivitySensorReading_INTERFACE_DEFINED__)
#define ____FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__CActivitySensorReading_INTERFACE_DEFINED__

typedef interface __FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__CActivitySensorReading __FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__CActivitySensorReading;

//  Declare the parameterized interface IID.
EXTERN_C const IID IID___FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__CActivitySensorReading;

typedef struct __FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__CActivitySensorReadingVtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__CActivitySensorReading* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__CActivitySensorReading* This);
    ULONG (STDMETHODCALLTYPE* Release)(__FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__CActivitySensorReading* This);
    HRESULT (STDMETHODCALLTYPE* Invoke)(__FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__CActivitySensorReading* This,
        __FIAsyncOperation_1_Windows__CDevices__CSensors__CActivitySensorReading* asyncInfo,
        AsyncStatus asyncStatus);

    END_INTERFACE
} __FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__CActivitySensorReadingVtbl;

interface __FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__CActivitySensorReading
{
    CONST_VTBL struct __FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__CActivitySensorReadingVtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__CActivitySensorReading_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__CActivitySensorReading_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__CActivitySensorReading_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__CActivitySensorReading_Invoke(This, asyncInfo, asyncStatus) \
    ((This)->lpVtbl->Invoke(This, asyncInfo, asyncStatus))

#endif /* COBJMACROS */

#endif // ____FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__CActivitySensorReading_INTERFACE_DEFINED__
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

typedef interface __FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__CBarometer __FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__CBarometer;

#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____FIAsyncOperation_1_Windows__CDevices__CSensors__CBarometer_INTERFACE_DEFINED__)
#define ____FIAsyncOperation_1_Windows__CDevices__CSensors__CBarometer_INTERFACE_DEFINED__

typedef interface __FIAsyncOperation_1_Windows__CDevices__CSensors__CBarometer __FIAsyncOperation_1_Windows__CDevices__CSensors__CBarometer;

//  Declare the parameterized interface IID.
EXTERN_C const IID IID___FIAsyncOperation_1_Windows__CDevices__CSensors__CBarometer;

typedef struct __FIAsyncOperation_1_Windows__CDevices__CSensors__CBarometerVtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__FIAsyncOperation_1_Windows__CDevices__CSensors__CBarometer* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__FIAsyncOperation_1_Windows__CDevices__CSensors__CBarometer* This);
    ULONG (STDMETHODCALLTYPE* Release)(__FIAsyncOperation_1_Windows__CDevices__CSensors__CBarometer* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__FIAsyncOperation_1_Windows__CDevices__CSensors__CBarometer* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__FIAsyncOperation_1_Windows__CDevices__CSensors__CBarometer* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__FIAsyncOperation_1_Windows__CDevices__CSensors__CBarometer* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* put_Completed)(__FIAsyncOperation_1_Windows__CDevices__CSensors__CBarometer* This,
        __FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__CBarometer* handler);
    HRESULT (STDMETHODCALLTYPE* get_Completed)(__FIAsyncOperation_1_Windows__CDevices__CSensors__CBarometer* This,
        __FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__CBarometer** result);
    HRESULT (STDMETHODCALLTYPE* GetResults)(__FIAsyncOperation_1_Windows__CDevices__CSensors__CBarometer* This,
        __x_ABI_CWindows_CDevices_CSensors_CIBarometer** result);

    END_INTERFACE
} __FIAsyncOperation_1_Windows__CDevices__CSensors__CBarometerVtbl;

interface __FIAsyncOperation_1_Windows__CDevices__CSensors__CBarometer
{
    CONST_VTBL struct __FIAsyncOperation_1_Windows__CDevices__CSensors__CBarometerVtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __FIAsyncOperation_1_Windows__CDevices__CSensors__CBarometer_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __FIAsyncOperation_1_Windows__CDevices__CSensors__CBarometer_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __FIAsyncOperation_1_Windows__CDevices__CSensors__CBarometer_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __FIAsyncOperation_1_Windows__CDevices__CSensors__CBarometer_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __FIAsyncOperation_1_Windows__CDevices__CSensors__CBarometer_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __FIAsyncOperation_1_Windows__CDevices__CSensors__CBarometer_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __FIAsyncOperation_1_Windows__CDevices__CSensors__CBarometer_put_Completed(This, handler) \
    ((This)->lpVtbl->put_Completed(This, handler))

#define __FIAsyncOperation_1_Windows__CDevices__CSensors__CBarometer_get_Completed(This, result) \
    ((This)->lpVtbl->get_Completed(This, result))

#define __FIAsyncOperation_1_Windows__CDevices__CSensors__CBarometer_GetResults(This, result) \
    ((This)->lpVtbl->GetResults(This, result))

#endif /* COBJMACROS */

#endif // ____FIAsyncOperation_1_Windows__CDevices__CSensors__CBarometer_INTERFACE_DEFINED__
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__CBarometer_INTERFACE_DEFINED__)
#define ____FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__CBarometer_INTERFACE_DEFINED__

typedef interface __FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__CBarometer __FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__CBarometer;

//  Declare the parameterized interface IID.
EXTERN_C const IID IID___FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__CBarometer;

typedef struct __FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__CBarometerVtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__CBarometer* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__CBarometer* This);
    ULONG (STDMETHODCALLTYPE* Release)(__FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__CBarometer* This);
    HRESULT (STDMETHODCALLTYPE* Invoke)(__FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__CBarometer* This,
        __FIAsyncOperation_1_Windows__CDevices__CSensors__CBarometer* asyncInfo,
        AsyncStatus asyncStatus);

    END_INTERFACE
} __FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__CBarometerVtbl;

interface __FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__CBarometer
{
    CONST_VTBL struct __FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__CBarometerVtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__CBarometer_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__CBarometer_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__CBarometer_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__CBarometer_Invoke(This, asyncInfo, asyncStatus) \
    ((This)->lpVtbl->Invoke(This, asyncInfo, asyncStatus))

#endif /* COBJMACROS */

#endif // ____FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__CBarometer_INTERFACE_DEFINED__
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

typedef interface __FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__CCompass __FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__CCompass;

#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____FIAsyncOperation_1_Windows__CDevices__CSensors__CCompass_INTERFACE_DEFINED__)
#define ____FIAsyncOperation_1_Windows__CDevices__CSensors__CCompass_INTERFACE_DEFINED__

typedef interface __FIAsyncOperation_1_Windows__CDevices__CSensors__CCompass __FIAsyncOperation_1_Windows__CDevices__CSensors__CCompass;

//  Declare the parameterized interface IID.
EXTERN_C const IID IID___FIAsyncOperation_1_Windows__CDevices__CSensors__CCompass;

typedef struct __FIAsyncOperation_1_Windows__CDevices__CSensors__CCompassVtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__FIAsyncOperation_1_Windows__CDevices__CSensors__CCompass* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__FIAsyncOperation_1_Windows__CDevices__CSensors__CCompass* This);
    ULONG (STDMETHODCALLTYPE* Release)(__FIAsyncOperation_1_Windows__CDevices__CSensors__CCompass* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__FIAsyncOperation_1_Windows__CDevices__CSensors__CCompass* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__FIAsyncOperation_1_Windows__CDevices__CSensors__CCompass* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__FIAsyncOperation_1_Windows__CDevices__CSensors__CCompass* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* put_Completed)(__FIAsyncOperation_1_Windows__CDevices__CSensors__CCompass* This,
        __FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__CCompass* handler);
    HRESULT (STDMETHODCALLTYPE* get_Completed)(__FIAsyncOperation_1_Windows__CDevices__CSensors__CCompass* This,
        __FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__CCompass** result);
    HRESULT (STDMETHODCALLTYPE* GetResults)(__FIAsyncOperation_1_Windows__CDevices__CSensors__CCompass* This,
        __x_ABI_CWindows_CDevices_CSensors_CICompass** result);

    END_INTERFACE
} __FIAsyncOperation_1_Windows__CDevices__CSensors__CCompassVtbl;

interface __FIAsyncOperation_1_Windows__CDevices__CSensors__CCompass
{
    CONST_VTBL struct __FIAsyncOperation_1_Windows__CDevices__CSensors__CCompassVtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __FIAsyncOperation_1_Windows__CDevices__CSensors__CCompass_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __FIAsyncOperation_1_Windows__CDevices__CSensors__CCompass_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __FIAsyncOperation_1_Windows__CDevices__CSensors__CCompass_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __FIAsyncOperation_1_Windows__CDevices__CSensors__CCompass_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __FIAsyncOperation_1_Windows__CDevices__CSensors__CCompass_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __FIAsyncOperation_1_Windows__CDevices__CSensors__CCompass_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __FIAsyncOperation_1_Windows__CDevices__CSensors__CCompass_put_Completed(This, handler) \
    ((This)->lpVtbl->put_Completed(This, handler))

#define __FIAsyncOperation_1_Windows__CDevices__CSensors__CCompass_get_Completed(This, result) \
    ((This)->lpVtbl->get_Completed(This, result))

#define __FIAsyncOperation_1_Windows__CDevices__CSensors__CCompass_GetResults(This, result) \
    ((This)->lpVtbl->GetResults(This, result))

#endif /* COBJMACROS */

#endif // ____FIAsyncOperation_1_Windows__CDevices__CSensors__CCompass_INTERFACE_DEFINED__
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__CCompass_INTERFACE_DEFINED__)
#define ____FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__CCompass_INTERFACE_DEFINED__

typedef interface __FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__CCompass __FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__CCompass;

//  Declare the parameterized interface IID.
EXTERN_C const IID IID___FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__CCompass;

typedef struct __FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__CCompassVtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__CCompass* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__CCompass* This);
    ULONG (STDMETHODCALLTYPE* Release)(__FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__CCompass* This);
    HRESULT (STDMETHODCALLTYPE* Invoke)(__FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__CCompass* This,
        __FIAsyncOperation_1_Windows__CDevices__CSensors__CCompass* asyncInfo,
        AsyncStatus asyncStatus);

    END_INTERFACE
} __FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__CCompassVtbl;

interface __FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__CCompass
{
    CONST_VTBL struct __FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__CCompassVtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__CCompass_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__CCompass_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__CCompass_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__CCompass_Invoke(This, asyncInfo, asyncStatus) \
    ((This)->lpVtbl->Invoke(This, asyncInfo, asyncStatus))

#endif /* COBJMACROS */

#endif // ____FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__CCompass_INTERFACE_DEFINED__
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

typedef interface __FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__CGyrometer __FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__CGyrometer;

#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____FIAsyncOperation_1_Windows__CDevices__CSensors__CGyrometer_INTERFACE_DEFINED__)
#define ____FIAsyncOperation_1_Windows__CDevices__CSensors__CGyrometer_INTERFACE_DEFINED__

typedef interface __FIAsyncOperation_1_Windows__CDevices__CSensors__CGyrometer __FIAsyncOperation_1_Windows__CDevices__CSensors__CGyrometer;

//  Declare the parameterized interface IID.
EXTERN_C const IID IID___FIAsyncOperation_1_Windows__CDevices__CSensors__CGyrometer;

typedef struct __FIAsyncOperation_1_Windows__CDevices__CSensors__CGyrometerVtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__FIAsyncOperation_1_Windows__CDevices__CSensors__CGyrometer* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__FIAsyncOperation_1_Windows__CDevices__CSensors__CGyrometer* This);
    ULONG (STDMETHODCALLTYPE* Release)(__FIAsyncOperation_1_Windows__CDevices__CSensors__CGyrometer* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__FIAsyncOperation_1_Windows__CDevices__CSensors__CGyrometer* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__FIAsyncOperation_1_Windows__CDevices__CSensors__CGyrometer* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__FIAsyncOperation_1_Windows__CDevices__CSensors__CGyrometer* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* put_Completed)(__FIAsyncOperation_1_Windows__CDevices__CSensors__CGyrometer* This,
        __FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__CGyrometer* handler);
    HRESULT (STDMETHODCALLTYPE* get_Completed)(__FIAsyncOperation_1_Windows__CDevices__CSensors__CGyrometer* This,
        __FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__CGyrometer** result);
    HRESULT (STDMETHODCALLTYPE* GetResults)(__FIAsyncOperation_1_Windows__CDevices__CSensors__CGyrometer* This,
        __x_ABI_CWindows_CDevices_CSensors_CIGyrometer** result);

    END_INTERFACE
} __FIAsyncOperation_1_Windows__CDevices__CSensors__CGyrometerVtbl;

interface __FIAsyncOperation_1_Windows__CDevices__CSensors__CGyrometer
{
    CONST_VTBL struct __FIAsyncOperation_1_Windows__CDevices__CSensors__CGyrometerVtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __FIAsyncOperation_1_Windows__CDevices__CSensors__CGyrometer_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __FIAsyncOperation_1_Windows__CDevices__CSensors__CGyrometer_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __FIAsyncOperation_1_Windows__CDevices__CSensors__CGyrometer_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __FIAsyncOperation_1_Windows__CDevices__CSensors__CGyrometer_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __FIAsyncOperation_1_Windows__CDevices__CSensors__CGyrometer_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __FIAsyncOperation_1_Windows__CDevices__CSensors__CGyrometer_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __FIAsyncOperation_1_Windows__CDevices__CSensors__CGyrometer_put_Completed(This, handler) \
    ((This)->lpVtbl->put_Completed(This, handler))

#define __FIAsyncOperation_1_Windows__CDevices__CSensors__CGyrometer_get_Completed(This, result) \
    ((This)->lpVtbl->get_Completed(This, result))

#define __FIAsyncOperation_1_Windows__CDevices__CSensors__CGyrometer_GetResults(This, result) \
    ((This)->lpVtbl->GetResults(This, result))

#endif /* COBJMACROS */

#endif // ____FIAsyncOperation_1_Windows__CDevices__CSensors__CGyrometer_INTERFACE_DEFINED__
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__CGyrometer_INTERFACE_DEFINED__)
#define ____FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__CGyrometer_INTERFACE_DEFINED__

typedef interface __FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__CGyrometer __FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__CGyrometer;

//  Declare the parameterized interface IID.
EXTERN_C const IID IID___FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__CGyrometer;

typedef struct __FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__CGyrometerVtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__CGyrometer* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__CGyrometer* This);
    ULONG (STDMETHODCALLTYPE* Release)(__FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__CGyrometer* This);
    HRESULT (STDMETHODCALLTYPE* Invoke)(__FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__CGyrometer* This,
        __FIAsyncOperation_1_Windows__CDevices__CSensors__CGyrometer* asyncInfo,
        AsyncStatus asyncStatus);

    END_INTERFACE
} __FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__CGyrometerVtbl;

interface __FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__CGyrometer
{
    CONST_VTBL struct __FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__CGyrometerVtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__CGyrometer_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__CGyrometer_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__CGyrometer_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__CGyrometer_Invoke(This, asyncInfo, asyncStatus) \
    ((This)->lpVtbl->Invoke(This, asyncInfo, asyncStatus))

#endif /* COBJMACROS */

#endif // ____FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__CGyrometer_INTERFACE_DEFINED__
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

typedef interface __FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__CHingeAngleReading __FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__CHingeAngleReading;

#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x70000
#if !defined(____FIAsyncOperation_1_Windows__CDevices__CSensors__CHingeAngleReading_INTERFACE_DEFINED__)
#define ____FIAsyncOperation_1_Windows__CDevices__CSensors__CHingeAngleReading_INTERFACE_DEFINED__

typedef interface __FIAsyncOperation_1_Windows__CDevices__CSensors__CHingeAngleReading __FIAsyncOperation_1_Windows__CDevices__CSensors__CHingeAngleReading;

//  Declare the parameterized interface IID.
EXTERN_C const IID IID___FIAsyncOperation_1_Windows__CDevices__CSensors__CHingeAngleReading;

typedef struct __FIAsyncOperation_1_Windows__CDevices__CSensors__CHingeAngleReadingVtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__FIAsyncOperation_1_Windows__CDevices__CSensors__CHingeAngleReading* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__FIAsyncOperation_1_Windows__CDevices__CSensors__CHingeAngleReading* This);
    ULONG (STDMETHODCALLTYPE* Release)(__FIAsyncOperation_1_Windows__CDevices__CSensors__CHingeAngleReading* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__FIAsyncOperation_1_Windows__CDevices__CSensors__CHingeAngleReading* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__FIAsyncOperation_1_Windows__CDevices__CSensors__CHingeAngleReading* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__FIAsyncOperation_1_Windows__CDevices__CSensors__CHingeAngleReading* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* put_Completed)(__FIAsyncOperation_1_Windows__CDevices__CSensors__CHingeAngleReading* This,
        __FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__CHingeAngleReading* handler);
    HRESULT (STDMETHODCALLTYPE* get_Completed)(__FIAsyncOperation_1_Windows__CDevices__CSensors__CHingeAngleReading* This,
        __FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__CHingeAngleReading** result);
    HRESULT (STDMETHODCALLTYPE* GetResults)(__FIAsyncOperation_1_Windows__CDevices__CSensors__CHingeAngleReading* This,
        __x_ABI_CWindows_CDevices_CSensors_CIHingeAngleReading** result);

    END_INTERFACE
} __FIAsyncOperation_1_Windows__CDevices__CSensors__CHingeAngleReadingVtbl;

interface __FIAsyncOperation_1_Windows__CDevices__CSensors__CHingeAngleReading
{
    CONST_VTBL struct __FIAsyncOperation_1_Windows__CDevices__CSensors__CHingeAngleReadingVtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __FIAsyncOperation_1_Windows__CDevices__CSensors__CHingeAngleReading_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __FIAsyncOperation_1_Windows__CDevices__CSensors__CHingeAngleReading_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __FIAsyncOperation_1_Windows__CDevices__CSensors__CHingeAngleReading_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __FIAsyncOperation_1_Windows__CDevices__CSensors__CHingeAngleReading_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __FIAsyncOperation_1_Windows__CDevices__CSensors__CHingeAngleReading_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __FIAsyncOperation_1_Windows__CDevices__CSensors__CHingeAngleReading_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __FIAsyncOperation_1_Windows__CDevices__CSensors__CHingeAngleReading_put_Completed(This, handler) \
    ((This)->lpVtbl->put_Completed(This, handler))

#define __FIAsyncOperation_1_Windows__CDevices__CSensors__CHingeAngleReading_get_Completed(This, result) \
    ((This)->lpVtbl->get_Completed(This, result))

#define __FIAsyncOperation_1_Windows__CDevices__CSensors__CHingeAngleReading_GetResults(This, result) \
    ((This)->lpVtbl->GetResults(This, result))

#endif /* COBJMACROS */

#endif // ____FIAsyncOperation_1_Windows__CDevices__CSensors__CHingeAngleReading_INTERFACE_DEFINED__
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x70000

#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x70000
#if !defined(____FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__CHingeAngleReading_INTERFACE_DEFINED__)
#define ____FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__CHingeAngleReading_INTERFACE_DEFINED__

typedef interface __FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__CHingeAngleReading __FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__CHingeAngleReading;

//  Declare the parameterized interface IID.
EXTERN_C const IID IID___FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__CHingeAngleReading;

typedef struct __FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__CHingeAngleReadingVtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__CHingeAngleReading* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__CHingeAngleReading* This);
    ULONG (STDMETHODCALLTYPE* Release)(__FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__CHingeAngleReading* This);
    HRESULT (STDMETHODCALLTYPE* Invoke)(__FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__CHingeAngleReading* This,
        __FIAsyncOperation_1_Windows__CDevices__CSensors__CHingeAngleReading* asyncInfo,
        AsyncStatus asyncStatus);

    END_INTERFACE
} __FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__CHingeAngleReadingVtbl;

interface __FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__CHingeAngleReading
{
    CONST_VTBL struct __FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__CHingeAngleReadingVtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__CHingeAngleReading_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__CHingeAngleReading_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__CHingeAngleReading_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__CHingeAngleReading_Invoke(This, asyncInfo, asyncStatus) \
    ((This)->lpVtbl->Invoke(This, asyncInfo, asyncStatus))

#endif /* COBJMACROS */

#endif // ____FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__CHingeAngleReading_INTERFACE_DEFINED__
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x70000

typedef interface __FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__CHingeAngleSensor __FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__CHingeAngleSensor;

#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x70000
#if !defined(____FIAsyncOperation_1_Windows__CDevices__CSensors__CHingeAngleSensor_INTERFACE_DEFINED__)
#define ____FIAsyncOperation_1_Windows__CDevices__CSensors__CHingeAngleSensor_INTERFACE_DEFINED__

typedef interface __FIAsyncOperation_1_Windows__CDevices__CSensors__CHingeAngleSensor __FIAsyncOperation_1_Windows__CDevices__CSensors__CHingeAngleSensor;

//  Declare the parameterized interface IID.
EXTERN_C const IID IID___FIAsyncOperation_1_Windows__CDevices__CSensors__CHingeAngleSensor;

typedef struct __FIAsyncOperation_1_Windows__CDevices__CSensors__CHingeAngleSensorVtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__FIAsyncOperation_1_Windows__CDevices__CSensors__CHingeAngleSensor* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__FIAsyncOperation_1_Windows__CDevices__CSensors__CHingeAngleSensor* This);
    ULONG (STDMETHODCALLTYPE* Release)(__FIAsyncOperation_1_Windows__CDevices__CSensors__CHingeAngleSensor* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__FIAsyncOperation_1_Windows__CDevices__CSensors__CHingeAngleSensor* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__FIAsyncOperation_1_Windows__CDevices__CSensors__CHingeAngleSensor* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__FIAsyncOperation_1_Windows__CDevices__CSensors__CHingeAngleSensor* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* put_Completed)(__FIAsyncOperation_1_Windows__CDevices__CSensors__CHingeAngleSensor* This,
        __FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__CHingeAngleSensor* handler);
    HRESULT (STDMETHODCALLTYPE* get_Completed)(__FIAsyncOperation_1_Windows__CDevices__CSensors__CHingeAngleSensor* This,
        __FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__CHingeAngleSensor** result);
    HRESULT (STDMETHODCALLTYPE* GetResults)(__FIAsyncOperation_1_Windows__CDevices__CSensors__CHingeAngleSensor* This,
        __x_ABI_CWindows_CDevices_CSensors_CIHingeAngleSensor** result);

    END_INTERFACE
} __FIAsyncOperation_1_Windows__CDevices__CSensors__CHingeAngleSensorVtbl;

interface __FIAsyncOperation_1_Windows__CDevices__CSensors__CHingeAngleSensor
{
    CONST_VTBL struct __FIAsyncOperation_1_Windows__CDevices__CSensors__CHingeAngleSensorVtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __FIAsyncOperation_1_Windows__CDevices__CSensors__CHingeAngleSensor_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __FIAsyncOperation_1_Windows__CDevices__CSensors__CHingeAngleSensor_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __FIAsyncOperation_1_Windows__CDevices__CSensors__CHingeAngleSensor_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __FIAsyncOperation_1_Windows__CDevices__CSensors__CHingeAngleSensor_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __FIAsyncOperation_1_Windows__CDevices__CSensors__CHingeAngleSensor_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __FIAsyncOperation_1_Windows__CDevices__CSensors__CHingeAngleSensor_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __FIAsyncOperation_1_Windows__CDevices__CSensors__CHingeAngleSensor_put_Completed(This, handler) \
    ((This)->lpVtbl->put_Completed(This, handler))

#define __FIAsyncOperation_1_Windows__CDevices__CSensors__CHingeAngleSensor_get_Completed(This, result) \
    ((This)->lpVtbl->get_Completed(This, result))

#define __FIAsyncOperation_1_Windows__CDevices__CSensors__CHingeAngleSensor_GetResults(This, result) \
    ((This)->lpVtbl->GetResults(This, result))

#endif /* COBJMACROS */

#endif // ____FIAsyncOperation_1_Windows__CDevices__CSensors__CHingeAngleSensor_INTERFACE_DEFINED__
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x70000

#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x70000
#if !defined(____FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__CHingeAngleSensor_INTERFACE_DEFINED__)
#define ____FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__CHingeAngleSensor_INTERFACE_DEFINED__

typedef interface __FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__CHingeAngleSensor __FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__CHingeAngleSensor;

//  Declare the parameterized interface IID.
EXTERN_C const IID IID___FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__CHingeAngleSensor;

typedef struct __FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__CHingeAngleSensorVtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__CHingeAngleSensor* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__CHingeAngleSensor* This);
    ULONG (STDMETHODCALLTYPE* Release)(__FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__CHingeAngleSensor* This);
    HRESULT (STDMETHODCALLTYPE* Invoke)(__FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__CHingeAngleSensor* This,
        __FIAsyncOperation_1_Windows__CDevices__CSensors__CHingeAngleSensor* asyncInfo,
        AsyncStatus asyncStatus);

    END_INTERFACE
} __FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__CHingeAngleSensorVtbl;

interface __FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__CHingeAngleSensor
{
    CONST_VTBL struct __FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__CHingeAngleSensorVtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__CHingeAngleSensor_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__CHingeAngleSensor_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__CHingeAngleSensor_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__CHingeAngleSensor_Invoke(This, asyncInfo, asyncStatus) \
    ((This)->lpVtbl->Invoke(This, asyncInfo, asyncStatus))

#endif /* COBJMACROS */

#endif // ____FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__CHingeAngleSensor_INTERFACE_DEFINED__
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x70000

typedef interface __FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__CInclinometer __FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__CInclinometer;

#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____FIAsyncOperation_1_Windows__CDevices__CSensors__CInclinometer_INTERFACE_DEFINED__)
#define ____FIAsyncOperation_1_Windows__CDevices__CSensors__CInclinometer_INTERFACE_DEFINED__

typedef interface __FIAsyncOperation_1_Windows__CDevices__CSensors__CInclinometer __FIAsyncOperation_1_Windows__CDevices__CSensors__CInclinometer;

//  Declare the parameterized interface IID.
EXTERN_C const IID IID___FIAsyncOperation_1_Windows__CDevices__CSensors__CInclinometer;

typedef struct __FIAsyncOperation_1_Windows__CDevices__CSensors__CInclinometerVtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__FIAsyncOperation_1_Windows__CDevices__CSensors__CInclinometer* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__FIAsyncOperation_1_Windows__CDevices__CSensors__CInclinometer* This);
    ULONG (STDMETHODCALLTYPE* Release)(__FIAsyncOperation_1_Windows__CDevices__CSensors__CInclinometer* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__FIAsyncOperation_1_Windows__CDevices__CSensors__CInclinometer* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__FIAsyncOperation_1_Windows__CDevices__CSensors__CInclinometer* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__FIAsyncOperation_1_Windows__CDevices__CSensors__CInclinometer* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* put_Completed)(__FIAsyncOperation_1_Windows__CDevices__CSensors__CInclinometer* This,
        __FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__CInclinometer* handler);
    HRESULT (STDMETHODCALLTYPE* get_Completed)(__FIAsyncOperation_1_Windows__CDevices__CSensors__CInclinometer* This,
        __FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__CInclinometer** result);
    HRESULT (STDMETHODCALLTYPE* GetResults)(__FIAsyncOperation_1_Windows__CDevices__CSensors__CInclinometer* This,
        __x_ABI_CWindows_CDevices_CSensors_CIInclinometer** result);

    END_INTERFACE
} __FIAsyncOperation_1_Windows__CDevices__CSensors__CInclinometerVtbl;

interface __FIAsyncOperation_1_Windows__CDevices__CSensors__CInclinometer
{
    CONST_VTBL struct __FIAsyncOperation_1_Windows__CDevices__CSensors__CInclinometerVtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __FIAsyncOperation_1_Windows__CDevices__CSensors__CInclinometer_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __FIAsyncOperation_1_Windows__CDevices__CSensors__CInclinometer_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __FIAsyncOperation_1_Windows__CDevices__CSensors__CInclinometer_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __FIAsyncOperation_1_Windows__CDevices__CSensors__CInclinometer_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __FIAsyncOperation_1_Windows__CDevices__CSensors__CInclinometer_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __FIAsyncOperation_1_Windows__CDevices__CSensors__CInclinometer_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __FIAsyncOperation_1_Windows__CDevices__CSensors__CInclinometer_put_Completed(This, handler) \
    ((This)->lpVtbl->put_Completed(This, handler))

#define __FIAsyncOperation_1_Windows__CDevices__CSensors__CInclinometer_get_Completed(This, result) \
    ((This)->lpVtbl->get_Completed(This, result))

#define __FIAsyncOperation_1_Windows__CDevices__CSensors__CInclinometer_GetResults(This, result) \
    ((This)->lpVtbl->GetResults(This, result))

#endif /* COBJMACROS */

#endif // ____FIAsyncOperation_1_Windows__CDevices__CSensors__CInclinometer_INTERFACE_DEFINED__
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__CInclinometer_INTERFACE_DEFINED__)
#define ____FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__CInclinometer_INTERFACE_DEFINED__

typedef interface __FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__CInclinometer __FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__CInclinometer;

//  Declare the parameterized interface IID.
EXTERN_C const IID IID___FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__CInclinometer;

typedef struct __FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__CInclinometerVtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__CInclinometer* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__CInclinometer* This);
    ULONG (STDMETHODCALLTYPE* Release)(__FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__CInclinometer* This);
    HRESULT (STDMETHODCALLTYPE* Invoke)(__FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__CInclinometer* This,
        __FIAsyncOperation_1_Windows__CDevices__CSensors__CInclinometer* asyncInfo,
        AsyncStatus asyncStatus);

    END_INTERFACE
} __FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__CInclinometerVtbl;

interface __FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__CInclinometer
{
    CONST_VTBL struct __FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__CInclinometerVtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__CInclinometer_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__CInclinometer_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__CInclinometer_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__CInclinometer_Invoke(This, asyncInfo, asyncStatus) \
    ((This)->lpVtbl->Invoke(This, asyncInfo, asyncStatus))

#endif /* COBJMACROS */

#endif // ____FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__CInclinometer_INTERFACE_DEFINED__
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

typedef interface __FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__CLightSensor __FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__CLightSensor;

#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____FIAsyncOperation_1_Windows__CDevices__CSensors__CLightSensor_INTERFACE_DEFINED__)
#define ____FIAsyncOperation_1_Windows__CDevices__CSensors__CLightSensor_INTERFACE_DEFINED__

typedef interface __FIAsyncOperation_1_Windows__CDevices__CSensors__CLightSensor __FIAsyncOperation_1_Windows__CDevices__CSensors__CLightSensor;

//  Declare the parameterized interface IID.
EXTERN_C const IID IID___FIAsyncOperation_1_Windows__CDevices__CSensors__CLightSensor;

typedef struct __FIAsyncOperation_1_Windows__CDevices__CSensors__CLightSensorVtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__FIAsyncOperation_1_Windows__CDevices__CSensors__CLightSensor* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__FIAsyncOperation_1_Windows__CDevices__CSensors__CLightSensor* This);
    ULONG (STDMETHODCALLTYPE* Release)(__FIAsyncOperation_1_Windows__CDevices__CSensors__CLightSensor* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__FIAsyncOperation_1_Windows__CDevices__CSensors__CLightSensor* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__FIAsyncOperation_1_Windows__CDevices__CSensors__CLightSensor* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__FIAsyncOperation_1_Windows__CDevices__CSensors__CLightSensor* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* put_Completed)(__FIAsyncOperation_1_Windows__CDevices__CSensors__CLightSensor* This,
        __FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__CLightSensor* handler);
    HRESULT (STDMETHODCALLTYPE* get_Completed)(__FIAsyncOperation_1_Windows__CDevices__CSensors__CLightSensor* This,
        __FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__CLightSensor** result);
    HRESULT (STDMETHODCALLTYPE* GetResults)(__FIAsyncOperation_1_Windows__CDevices__CSensors__CLightSensor* This,
        __x_ABI_CWindows_CDevices_CSensors_CILightSensor** result);

    END_INTERFACE
} __FIAsyncOperation_1_Windows__CDevices__CSensors__CLightSensorVtbl;

interface __FIAsyncOperation_1_Windows__CDevices__CSensors__CLightSensor
{
    CONST_VTBL struct __FIAsyncOperation_1_Windows__CDevices__CSensors__CLightSensorVtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __FIAsyncOperation_1_Windows__CDevices__CSensors__CLightSensor_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __FIAsyncOperation_1_Windows__CDevices__CSensors__CLightSensor_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __FIAsyncOperation_1_Windows__CDevices__CSensors__CLightSensor_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __FIAsyncOperation_1_Windows__CDevices__CSensors__CLightSensor_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __FIAsyncOperation_1_Windows__CDevices__CSensors__CLightSensor_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __FIAsyncOperation_1_Windows__CDevices__CSensors__CLightSensor_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __FIAsyncOperation_1_Windows__CDevices__CSensors__CLightSensor_put_Completed(This, handler) \
    ((This)->lpVtbl->put_Completed(This, handler))

#define __FIAsyncOperation_1_Windows__CDevices__CSensors__CLightSensor_get_Completed(This, result) \
    ((This)->lpVtbl->get_Completed(This, result))

#define __FIAsyncOperation_1_Windows__CDevices__CSensors__CLightSensor_GetResults(This, result) \
    ((This)->lpVtbl->GetResults(This, result))

#endif /* COBJMACROS */

#endif // ____FIAsyncOperation_1_Windows__CDevices__CSensors__CLightSensor_INTERFACE_DEFINED__
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__CLightSensor_INTERFACE_DEFINED__)
#define ____FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__CLightSensor_INTERFACE_DEFINED__

typedef interface __FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__CLightSensor __FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__CLightSensor;

//  Declare the parameterized interface IID.
EXTERN_C const IID IID___FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__CLightSensor;

typedef struct __FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__CLightSensorVtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__CLightSensor* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__CLightSensor* This);
    ULONG (STDMETHODCALLTYPE* Release)(__FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__CLightSensor* This);
    HRESULT (STDMETHODCALLTYPE* Invoke)(__FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__CLightSensor* This,
        __FIAsyncOperation_1_Windows__CDevices__CSensors__CLightSensor* asyncInfo,
        AsyncStatus asyncStatus);

    END_INTERFACE
} __FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__CLightSensorVtbl;

interface __FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__CLightSensor
{
    CONST_VTBL struct __FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__CLightSensorVtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__CLightSensor_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__CLightSensor_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__CLightSensor_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__CLightSensor_Invoke(This, asyncInfo, asyncStatus) \
    ((This)->lpVtbl->Invoke(This, asyncInfo, asyncStatus))

#endif /* COBJMACROS */

#endif // ____FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__CLightSensor_INTERFACE_DEFINED__
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

typedef interface __FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__CMagnetometer __FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__CMagnetometer;

#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____FIAsyncOperation_1_Windows__CDevices__CSensors__CMagnetometer_INTERFACE_DEFINED__)
#define ____FIAsyncOperation_1_Windows__CDevices__CSensors__CMagnetometer_INTERFACE_DEFINED__

typedef interface __FIAsyncOperation_1_Windows__CDevices__CSensors__CMagnetometer __FIAsyncOperation_1_Windows__CDevices__CSensors__CMagnetometer;

//  Declare the parameterized interface IID.
EXTERN_C const IID IID___FIAsyncOperation_1_Windows__CDevices__CSensors__CMagnetometer;

typedef struct __FIAsyncOperation_1_Windows__CDevices__CSensors__CMagnetometerVtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__FIAsyncOperation_1_Windows__CDevices__CSensors__CMagnetometer* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__FIAsyncOperation_1_Windows__CDevices__CSensors__CMagnetometer* This);
    ULONG (STDMETHODCALLTYPE* Release)(__FIAsyncOperation_1_Windows__CDevices__CSensors__CMagnetometer* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__FIAsyncOperation_1_Windows__CDevices__CSensors__CMagnetometer* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__FIAsyncOperation_1_Windows__CDevices__CSensors__CMagnetometer* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__FIAsyncOperation_1_Windows__CDevices__CSensors__CMagnetometer* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* put_Completed)(__FIAsyncOperation_1_Windows__CDevices__CSensors__CMagnetometer* This,
        __FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__CMagnetometer* handler);
    HRESULT (STDMETHODCALLTYPE* get_Completed)(__FIAsyncOperation_1_Windows__CDevices__CSensors__CMagnetometer* This,
        __FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__CMagnetometer** result);
    HRESULT (STDMETHODCALLTYPE* GetResults)(__FIAsyncOperation_1_Windows__CDevices__CSensors__CMagnetometer* This,
        __x_ABI_CWindows_CDevices_CSensors_CIMagnetometer** result);

    END_INTERFACE
} __FIAsyncOperation_1_Windows__CDevices__CSensors__CMagnetometerVtbl;

interface __FIAsyncOperation_1_Windows__CDevices__CSensors__CMagnetometer
{
    CONST_VTBL struct __FIAsyncOperation_1_Windows__CDevices__CSensors__CMagnetometerVtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __FIAsyncOperation_1_Windows__CDevices__CSensors__CMagnetometer_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __FIAsyncOperation_1_Windows__CDevices__CSensors__CMagnetometer_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __FIAsyncOperation_1_Windows__CDevices__CSensors__CMagnetometer_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __FIAsyncOperation_1_Windows__CDevices__CSensors__CMagnetometer_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __FIAsyncOperation_1_Windows__CDevices__CSensors__CMagnetometer_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __FIAsyncOperation_1_Windows__CDevices__CSensors__CMagnetometer_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __FIAsyncOperation_1_Windows__CDevices__CSensors__CMagnetometer_put_Completed(This, handler) \
    ((This)->lpVtbl->put_Completed(This, handler))

#define __FIAsyncOperation_1_Windows__CDevices__CSensors__CMagnetometer_get_Completed(This, result) \
    ((This)->lpVtbl->get_Completed(This, result))

#define __FIAsyncOperation_1_Windows__CDevices__CSensors__CMagnetometer_GetResults(This, result) \
    ((This)->lpVtbl->GetResults(This, result))

#endif /* COBJMACROS */

#endif // ____FIAsyncOperation_1_Windows__CDevices__CSensors__CMagnetometer_INTERFACE_DEFINED__
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__CMagnetometer_INTERFACE_DEFINED__)
#define ____FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__CMagnetometer_INTERFACE_DEFINED__

typedef interface __FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__CMagnetometer __FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__CMagnetometer;

//  Declare the parameterized interface IID.
EXTERN_C const IID IID___FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__CMagnetometer;

typedef struct __FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__CMagnetometerVtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__CMagnetometer* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__CMagnetometer* This);
    ULONG (STDMETHODCALLTYPE* Release)(__FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__CMagnetometer* This);
    HRESULT (STDMETHODCALLTYPE* Invoke)(__FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__CMagnetometer* This,
        __FIAsyncOperation_1_Windows__CDevices__CSensors__CMagnetometer* asyncInfo,
        AsyncStatus asyncStatus);

    END_INTERFACE
} __FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__CMagnetometerVtbl;

interface __FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__CMagnetometer
{
    CONST_VTBL struct __FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__CMagnetometerVtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__CMagnetometer_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__CMagnetometer_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__CMagnetometer_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__CMagnetometer_Invoke(This, asyncInfo, asyncStatus) \
    ((This)->lpVtbl->Invoke(This, asyncInfo, asyncStatus))

#endif /* COBJMACROS */

#endif // ____FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__CMagnetometer_INTERFACE_DEFINED__
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

typedef interface __FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__COrientationSensor __FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__COrientationSensor;

#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____FIAsyncOperation_1_Windows__CDevices__CSensors__COrientationSensor_INTERFACE_DEFINED__)
#define ____FIAsyncOperation_1_Windows__CDevices__CSensors__COrientationSensor_INTERFACE_DEFINED__

typedef interface __FIAsyncOperation_1_Windows__CDevices__CSensors__COrientationSensor __FIAsyncOperation_1_Windows__CDevices__CSensors__COrientationSensor;

//  Declare the parameterized interface IID.
EXTERN_C const IID IID___FIAsyncOperation_1_Windows__CDevices__CSensors__COrientationSensor;

typedef struct __FIAsyncOperation_1_Windows__CDevices__CSensors__COrientationSensorVtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__FIAsyncOperation_1_Windows__CDevices__CSensors__COrientationSensor* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__FIAsyncOperation_1_Windows__CDevices__CSensors__COrientationSensor* This);
    ULONG (STDMETHODCALLTYPE* Release)(__FIAsyncOperation_1_Windows__CDevices__CSensors__COrientationSensor* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__FIAsyncOperation_1_Windows__CDevices__CSensors__COrientationSensor* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__FIAsyncOperation_1_Windows__CDevices__CSensors__COrientationSensor* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__FIAsyncOperation_1_Windows__CDevices__CSensors__COrientationSensor* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* put_Completed)(__FIAsyncOperation_1_Windows__CDevices__CSensors__COrientationSensor* This,
        __FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__COrientationSensor* handler);
    HRESULT (STDMETHODCALLTYPE* get_Completed)(__FIAsyncOperation_1_Windows__CDevices__CSensors__COrientationSensor* This,
        __FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__COrientationSensor** result);
    HRESULT (STDMETHODCALLTYPE* GetResults)(__FIAsyncOperation_1_Windows__CDevices__CSensors__COrientationSensor* This,
        __x_ABI_CWindows_CDevices_CSensors_CIOrientationSensor** result);

    END_INTERFACE
} __FIAsyncOperation_1_Windows__CDevices__CSensors__COrientationSensorVtbl;

interface __FIAsyncOperation_1_Windows__CDevices__CSensors__COrientationSensor
{
    CONST_VTBL struct __FIAsyncOperation_1_Windows__CDevices__CSensors__COrientationSensorVtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __FIAsyncOperation_1_Windows__CDevices__CSensors__COrientationSensor_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __FIAsyncOperation_1_Windows__CDevices__CSensors__COrientationSensor_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __FIAsyncOperation_1_Windows__CDevices__CSensors__COrientationSensor_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __FIAsyncOperation_1_Windows__CDevices__CSensors__COrientationSensor_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __FIAsyncOperation_1_Windows__CDevices__CSensors__COrientationSensor_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __FIAsyncOperation_1_Windows__CDevices__CSensors__COrientationSensor_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __FIAsyncOperation_1_Windows__CDevices__CSensors__COrientationSensor_put_Completed(This, handler) \
    ((This)->lpVtbl->put_Completed(This, handler))

#define __FIAsyncOperation_1_Windows__CDevices__CSensors__COrientationSensor_get_Completed(This, result) \
    ((This)->lpVtbl->get_Completed(This, result))

#define __FIAsyncOperation_1_Windows__CDevices__CSensors__COrientationSensor_GetResults(This, result) \
    ((This)->lpVtbl->GetResults(This, result))

#endif /* COBJMACROS */

#endif // ____FIAsyncOperation_1_Windows__CDevices__CSensors__COrientationSensor_INTERFACE_DEFINED__
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__COrientationSensor_INTERFACE_DEFINED__)
#define ____FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__COrientationSensor_INTERFACE_DEFINED__

typedef interface __FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__COrientationSensor __FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__COrientationSensor;

//  Declare the parameterized interface IID.
EXTERN_C const IID IID___FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__COrientationSensor;

typedef struct __FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__COrientationSensorVtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__COrientationSensor* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__COrientationSensor* This);
    ULONG (STDMETHODCALLTYPE* Release)(__FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__COrientationSensor* This);
    HRESULT (STDMETHODCALLTYPE* Invoke)(__FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__COrientationSensor* This,
        __FIAsyncOperation_1_Windows__CDevices__CSensors__COrientationSensor* asyncInfo,
        AsyncStatus asyncStatus);

    END_INTERFACE
} __FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__COrientationSensorVtbl;

interface __FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__COrientationSensor
{
    CONST_VTBL struct __FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__COrientationSensorVtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__COrientationSensor_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__COrientationSensor_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__COrientationSensor_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__COrientationSensor_Invoke(This, asyncInfo, asyncStatus) \
    ((This)->lpVtbl->Invoke(This, asyncInfo, asyncStatus))

#endif /* COBJMACROS */

#endif // ____FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__COrientationSensor_INTERFACE_DEFINED__
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

typedef interface __FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__CPedometer __FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__CPedometer;

#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____FIAsyncOperation_1_Windows__CDevices__CSensors__CPedometer_INTERFACE_DEFINED__)
#define ____FIAsyncOperation_1_Windows__CDevices__CSensors__CPedometer_INTERFACE_DEFINED__

typedef interface __FIAsyncOperation_1_Windows__CDevices__CSensors__CPedometer __FIAsyncOperation_1_Windows__CDevices__CSensors__CPedometer;

//  Declare the parameterized interface IID.
EXTERN_C const IID IID___FIAsyncOperation_1_Windows__CDevices__CSensors__CPedometer;

typedef struct __FIAsyncOperation_1_Windows__CDevices__CSensors__CPedometerVtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__FIAsyncOperation_1_Windows__CDevices__CSensors__CPedometer* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__FIAsyncOperation_1_Windows__CDevices__CSensors__CPedometer* This);
    ULONG (STDMETHODCALLTYPE* Release)(__FIAsyncOperation_1_Windows__CDevices__CSensors__CPedometer* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__FIAsyncOperation_1_Windows__CDevices__CSensors__CPedometer* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__FIAsyncOperation_1_Windows__CDevices__CSensors__CPedometer* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__FIAsyncOperation_1_Windows__CDevices__CSensors__CPedometer* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* put_Completed)(__FIAsyncOperation_1_Windows__CDevices__CSensors__CPedometer* This,
        __FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__CPedometer* handler);
    HRESULT (STDMETHODCALLTYPE* get_Completed)(__FIAsyncOperation_1_Windows__CDevices__CSensors__CPedometer* This,
        __FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__CPedometer** result);
    HRESULT (STDMETHODCALLTYPE* GetResults)(__FIAsyncOperation_1_Windows__CDevices__CSensors__CPedometer* This,
        __x_ABI_CWindows_CDevices_CSensors_CIPedometer** result);

    END_INTERFACE
} __FIAsyncOperation_1_Windows__CDevices__CSensors__CPedometerVtbl;

interface __FIAsyncOperation_1_Windows__CDevices__CSensors__CPedometer
{
    CONST_VTBL struct __FIAsyncOperation_1_Windows__CDevices__CSensors__CPedometerVtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __FIAsyncOperation_1_Windows__CDevices__CSensors__CPedometer_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __FIAsyncOperation_1_Windows__CDevices__CSensors__CPedometer_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __FIAsyncOperation_1_Windows__CDevices__CSensors__CPedometer_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __FIAsyncOperation_1_Windows__CDevices__CSensors__CPedometer_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __FIAsyncOperation_1_Windows__CDevices__CSensors__CPedometer_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __FIAsyncOperation_1_Windows__CDevices__CSensors__CPedometer_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __FIAsyncOperation_1_Windows__CDevices__CSensors__CPedometer_put_Completed(This, handler) \
    ((This)->lpVtbl->put_Completed(This, handler))

#define __FIAsyncOperation_1_Windows__CDevices__CSensors__CPedometer_get_Completed(This, result) \
    ((This)->lpVtbl->get_Completed(This, result))

#define __FIAsyncOperation_1_Windows__CDevices__CSensors__CPedometer_GetResults(This, result) \
    ((This)->lpVtbl->GetResults(This, result))

#endif /* COBJMACROS */

#endif // ____FIAsyncOperation_1_Windows__CDevices__CSensors__CPedometer_INTERFACE_DEFINED__
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__CPedometer_INTERFACE_DEFINED__)
#define ____FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__CPedometer_INTERFACE_DEFINED__

typedef interface __FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__CPedometer __FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__CPedometer;

//  Declare the parameterized interface IID.
EXTERN_C const IID IID___FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__CPedometer;

typedef struct __FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__CPedometerVtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__CPedometer* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__CPedometer* This);
    ULONG (STDMETHODCALLTYPE* Release)(__FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__CPedometer* This);
    HRESULT (STDMETHODCALLTYPE* Invoke)(__FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__CPedometer* This,
        __FIAsyncOperation_1_Windows__CDevices__CSensors__CPedometer* asyncInfo,
        AsyncStatus asyncStatus);

    END_INTERFACE
} __FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__CPedometerVtbl;

interface __FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__CPedometer
{
    CONST_VTBL struct __FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__CPedometerVtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__CPedometer_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__CPedometer_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__CPedometer_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__CPedometer_Invoke(This, asyncInfo, asyncStatus) \
    ((This)->lpVtbl->Invoke(This, asyncInfo, asyncStatus))

#endif /* COBJMACROS */

#endif // ____FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__CPedometer_INTERFACE_DEFINED__
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

typedef interface __FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__CSimpleOrientationSensor __FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__CSimpleOrientationSensor;

#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____FIAsyncOperation_1_Windows__CDevices__CSensors__CSimpleOrientationSensor_INTERFACE_DEFINED__)
#define ____FIAsyncOperation_1_Windows__CDevices__CSensors__CSimpleOrientationSensor_INTERFACE_DEFINED__

typedef interface __FIAsyncOperation_1_Windows__CDevices__CSensors__CSimpleOrientationSensor __FIAsyncOperation_1_Windows__CDevices__CSensors__CSimpleOrientationSensor;

//  Declare the parameterized interface IID.
EXTERN_C const IID IID___FIAsyncOperation_1_Windows__CDevices__CSensors__CSimpleOrientationSensor;

typedef struct __FIAsyncOperation_1_Windows__CDevices__CSensors__CSimpleOrientationSensorVtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__FIAsyncOperation_1_Windows__CDevices__CSensors__CSimpleOrientationSensor* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__FIAsyncOperation_1_Windows__CDevices__CSensors__CSimpleOrientationSensor* This);
    ULONG (STDMETHODCALLTYPE* Release)(__FIAsyncOperation_1_Windows__CDevices__CSensors__CSimpleOrientationSensor* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__FIAsyncOperation_1_Windows__CDevices__CSensors__CSimpleOrientationSensor* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__FIAsyncOperation_1_Windows__CDevices__CSensors__CSimpleOrientationSensor* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__FIAsyncOperation_1_Windows__CDevices__CSensors__CSimpleOrientationSensor* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* put_Completed)(__FIAsyncOperation_1_Windows__CDevices__CSensors__CSimpleOrientationSensor* This,
        __FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__CSimpleOrientationSensor* handler);
    HRESULT (STDMETHODCALLTYPE* get_Completed)(__FIAsyncOperation_1_Windows__CDevices__CSensors__CSimpleOrientationSensor* This,
        __FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__CSimpleOrientationSensor** result);
    HRESULT (STDMETHODCALLTYPE* GetResults)(__FIAsyncOperation_1_Windows__CDevices__CSensors__CSimpleOrientationSensor* This,
        __x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensor** result);

    END_INTERFACE
} __FIAsyncOperation_1_Windows__CDevices__CSensors__CSimpleOrientationSensorVtbl;

interface __FIAsyncOperation_1_Windows__CDevices__CSensors__CSimpleOrientationSensor
{
    CONST_VTBL struct __FIAsyncOperation_1_Windows__CDevices__CSensors__CSimpleOrientationSensorVtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __FIAsyncOperation_1_Windows__CDevices__CSensors__CSimpleOrientationSensor_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __FIAsyncOperation_1_Windows__CDevices__CSensors__CSimpleOrientationSensor_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __FIAsyncOperation_1_Windows__CDevices__CSensors__CSimpleOrientationSensor_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __FIAsyncOperation_1_Windows__CDevices__CSensors__CSimpleOrientationSensor_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __FIAsyncOperation_1_Windows__CDevices__CSensors__CSimpleOrientationSensor_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __FIAsyncOperation_1_Windows__CDevices__CSensors__CSimpleOrientationSensor_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __FIAsyncOperation_1_Windows__CDevices__CSensors__CSimpleOrientationSensor_put_Completed(This, handler) \
    ((This)->lpVtbl->put_Completed(This, handler))

#define __FIAsyncOperation_1_Windows__CDevices__CSensors__CSimpleOrientationSensor_get_Completed(This, result) \
    ((This)->lpVtbl->get_Completed(This, result))

#define __FIAsyncOperation_1_Windows__CDevices__CSensors__CSimpleOrientationSensor_GetResults(This, result) \
    ((This)->lpVtbl->GetResults(This, result))

#endif /* COBJMACROS */

#endif // ____FIAsyncOperation_1_Windows__CDevices__CSensors__CSimpleOrientationSensor_INTERFACE_DEFINED__
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__CSimpleOrientationSensor_INTERFACE_DEFINED__)
#define ____FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__CSimpleOrientationSensor_INTERFACE_DEFINED__

typedef interface __FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__CSimpleOrientationSensor __FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__CSimpleOrientationSensor;

//  Declare the parameterized interface IID.
EXTERN_C const IID IID___FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__CSimpleOrientationSensor;

typedef struct __FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__CSimpleOrientationSensorVtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__CSimpleOrientationSensor* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__CSimpleOrientationSensor* This);
    ULONG (STDMETHODCALLTYPE* Release)(__FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__CSimpleOrientationSensor* This);
    HRESULT (STDMETHODCALLTYPE* Invoke)(__FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__CSimpleOrientationSensor* This,
        __FIAsyncOperation_1_Windows__CDevices__CSensors__CSimpleOrientationSensor* asyncInfo,
        AsyncStatus asyncStatus);

    END_INTERFACE
} __FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__CSimpleOrientationSensorVtbl;

interface __FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__CSimpleOrientationSensor
{
    CONST_VTBL struct __FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__CSimpleOrientationSensorVtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__CSimpleOrientationSensor_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__CSimpleOrientationSensor_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__CSimpleOrientationSensor_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__CSimpleOrientationSensor_Invoke(This, asyncInfo, asyncStatus) \
    ((This)->lpVtbl->Invoke(This, asyncInfo, asyncStatus))

#endif /* COBJMACROS */

#endif // ____FIAsyncOperationCompletedHandler_1_Windows__CDevices__CSensors__CSimpleOrientationSensor_INTERFACE_DEFINED__
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____FIIterator_1_Windows__CDevices__CSensors__CActivitySensorReading_INTERFACE_DEFINED__)
#define ____FIIterator_1_Windows__CDevices__CSensors__CActivitySensorReading_INTERFACE_DEFINED__

typedef interface __FIIterator_1_Windows__CDevices__CSensors__CActivitySensorReading __FIIterator_1_Windows__CDevices__CSensors__CActivitySensorReading;

//  Declare the parameterized interface IID.
EXTERN_C const IID IID___FIIterator_1_Windows__CDevices__CSensors__CActivitySensorReading;

typedef struct __FIIterator_1_Windows__CDevices__CSensors__CActivitySensorReadingVtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__FIIterator_1_Windows__CDevices__CSensors__CActivitySensorReading* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__FIIterator_1_Windows__CDevices__CSensors__CActivitySensorReading* This);
    ULONG (STDMETHODCALLTYPE* Release)(__FIIterator_1_Windows__CDevices__CSensors__CActivitySensorReading* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__FIIterator_1_Windows__CDevices__CSensors__CActivitySensorReading* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__FIIterator_1_Windows__CDevices__CSensors__CActivitySensorReading* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__FIIterator_1_Windows__CDevices__CSensors__CActivitySensorReading* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* get_Current)(__FIIterator_1_Windows__CDevices__CSensors__CActivitySensorReading* This,
        __x_ABI_CWindows_CDevices_CSensors_CIActivitySensorReading** result);
    HRESULT (STDMETHODCALLTYPE* get_HasCurrent)(__FIIterator_1_Windows__CDevices__CSensors__CActivitySensorReading* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* MoveNext)(__FIIterator_1_Windows__CDevices__CSensors__CActivitySensorReading* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__FIIterator_1_Windows__CDevices__CSensors__CActivitySensorReading* This,
        UINT32 itemsLength,
        __x_ABI_CWindows_CDevices_CSensors_CIActivitySensorReading** items,
        UINT32* result);

    END_INTERFACE
} __FIIterator_1_Windows__CDevices__CSensors__CActivitySensorReadingVtbl;

interface __FIIterator_1_Windows__CDevices__CSensors__CActivitySensorReading
{
    CONST_VTBL struct __FIIterator_1_Windows__CDevices__CSensors__CActivitySensorReadingVtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __FIIterator_1_Windows__CDevices__CSensors__CActivitySensorReading_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __FIIterator_1_Windows__CDevices__CSensors__CActivitySensorReading_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __FIIterator_1_Windows__CDevices__CSensors__CActivitySensorReading_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __FIIterator_1_Windows__CDevices__CSensors__CActivitySensorReading_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __FIIterator_1_Windows__CDevices__CSensors__CActivitySensorReading_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __FIIterator_1_Windows__CDevices__CSensors__CActivitySensorReading_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __FIIterator_1_Windows__CDevices__CSensors__CActivitySensorReading_get_Current(This, result) \
    ((This)->lpVtbl->get_Current(This, result))

#define __FIIterator_1_Windows__CDevices__CSensors__CActivitySensorReading_get_HasCurrent(This, result) \
    ((This)->lpVtbl->get_HasCurrent(This, result))

#define __FIIterator_1_Windows__CDevices__CSensors__CActivitySensorReading_MoveNext(This, result) \
    ((This)->lpVtbl->MoveNext(This, result))

#define __FIIterator_1_Windows__CDevices__CSensors__CActivitySensorReading_GetMany(This, itemsLength, items, result) \
    ((This)->lpVtbl->GetMany(This, itemsLength, items, result))

#endif /* COBJMACROS */

#endif // ____FIIterator_1_Windows__CDevices__CSensors__CActivitySensorReading_INTERFACE_DEFINED__
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____FIIterable_1_Windows__CDevices__CSensors__CActivitySensorReading_INTERFACE_DEFINED__)
#define ____FIIterable_1_Windows__CDevices__CSensors__CActivitySensorReading_INTERFACE_DEFINED__

typedef interface __FIIterable_1_Windows__CDevices__CSensors__CActivitySensorReading __FIIterable_1_Windows__CDevices__CSensors__CActivitySensorReading;

//  Declare the parameterized interface IID.
EXTERN_C const IID IID___FIIterable_1_Windows__CDevices__CSensors__CActivitySensorReading;

typedef struct __FIIterable_1_Windows__CDevices__CSensors__CActivitySensorReadingVtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__FIIterable_1_Windows__CDevices__CSensors__CActivitySensorReading* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__FIIterable_1_Windows__CDevices__CSensors__CActivitySensorReading* This);
    ULONG (STDMETHODCALLTYPE* Release)(__FIIterable_1_Windows__CDevices__CSensors__CActivitySensorReading* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__FIIterable_1_Windows__CDevices__CSensors__CActivitySensorReading* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__FIIterable_1_Windows__CDevices__CSensors__CActivitySensorReading* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__FIIterable_1_Windows__CDevices__CSensors__CActivitySensorReading* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* First)(__FIIterable_1_Windows__CDevices__CSensors__CActivitySensorReading* This,
        __FIIterator_1_Windows__CDevices__CSensors__CActivitySensorReading** result);

    END_INTERFACE
} __FIIterable_1_Windows__CDevices__CSensors__CActivitySensorReadingVtbl;

interface __FIIterable_1_Windows__CDevices__CSensors__CActivitySensorReading
{
    CONST_VTBL struct __FIIterable_1_Windows__CDevices__CSensors__CActivitySensorReadingVtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __FIIterable_1_Windows__CDevices__CSensors__CActivitySensorReading_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __FIIterable_1_Windows__CDevices__CSensors__CActivitySensorReading_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __FIIterable_1_Windows__CDevices__CSensors__CActivitySensorReading_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __FIIterable_1_Windows__CDevices__CSensors__CActivitySensorReading_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __FIIterable_1_Windows__CDevices__CSensors__CActivitySensorReading_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __FIIterable_1_Windows__CDevices__CSensors__CActivitySensorReading_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __FIIterable_1_Windows__CDevices__CSensors__CActivitySensorReading_First(This, result) \
    ((This)->lpVtbl->First(This, result))

#endif /* COBJMACROS */

#endif // ____FIIterable_1_Windows__CDevices__CSensors__CActivitySensorReading_INTERFACE_DEFINED__
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____FIVectorView_1_Windows__CDevices__CSensors__CActivitySensorReading_INTERFACE_DEFINED__)
#define ____FIVectorView_1_Windows__CDevices__CSensors__CActivitySensorReading_INTERFACE_DEFINED__

typedef interface __FIVectorView_1_Windows__CDevices__CSensors__CActivitySensorReading __FIVectorView_1_Windows__CDevices__CSensors__CActivitySensorReading;

//  Declare the parameterized interface IID.
EXTERN_C const IID IID___FIVectorView_1_Windows__CDevices__CSensors__CActivitySensorReading;

typedef struct __FIVectorView_1_Windows__CDevices__CSensors__CActivitySensorReadingVtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__FIVectorView_1_Windows__CDevices__CSensors__CActivitySensorReading* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__FIVectorView_1_Windows__CDevices__CSensors__CActivitySensorReading* This);
    ULONG (STDMETHODCALLTYPE* Release)(__FIVectorView_1_Windows__CDevices__CSensors__CActivitySensorReading* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__FIVectorView_1_Windows__CDevices__CSensors__CActivitySensorReading* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__FIVectorView_1_Windows__CDevices__CSensors__CActivitySensorReading* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__FIVectorView_1_Windows__CDevices__CSensors__CActivitySensorReading* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* GetAt)(__FIVectorView_1_Windows__CDevices__CSensors__CActivitySensorReading* This,
        UINT32 index,
        __x_ABI_CWindows_CDevices_CSensors_CIActivitySensorReading** result);
    HRESULT (STDMETHODCALLTYPE* get_Size)(__FIVectorView_1_Windows__CDevices__CSensors__CActivitySensorReading* This,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* IndexOf)(__FIVectorView_1_Windows__CDevices__CSensors__CActivitySensorReading* This,
        __x_ABI_CWindows_CDevices_CSensors_CIActivitySensorReading* value,
        UINT32* index,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__FIVectorView_1_Windows__CDevices__CSensors__CActivitySensorReading* This,
        UINT32 startIndex,
        UINT32 itemsLength,
        __x_ABI_CWindows_CDevices_CSensors_CIActivitySensorReading** items,
        UINT32* result);

    END_INTERFACE
} __FIVectorView_1_Windows__CDevices__CSensors__CActivitySensorReadingVtbl;

interface __FIVectorView_1_Windows__CDevices__CSensors__CActivitySensorReading
{
    CONST_VTBL struct __FIVectorView_1_Windows__CDevices__CSensors__CActivitySensorReadingVtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __FIVectorView_1_Windows__CDevices__CSensors__CActivitySensorReading_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __FIVectorView_1_Windows__CDevices__CSensors__CActivitySensorReading_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __FIVectorView_1_Windows__CDevices__CSensors__CActivitySensorReading_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __FIVectorView_1_Windows__CDevices__CSensors__CActivitySensorReading_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __FIVectorView_1_Windows__CDevices__CSensors__CActivitySensorReading_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __FIVectorView_1_Windows__CDevices__CSensors__CActivitySensorReading_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __FIVectorView_1_Windows__CDevices__CSensors__CActivitySensorReading_GetAt(This, index, result) \
    ((This)->lpVtbl->GetAt(This, index, result))

#define __FIVectorView_1_Windows__CDevices__CSensors__CActivitySensorReading_get_Size(This, result) \
    ((This)->lpVtbl->get_Size(This, result))

#define __FIVectorView_1_Windows__CDevices__CSensors__CActivitySensorReading_IndexOf(This, value, index, result) \
    ((This)->lpVtbl->IndexOf(This, value, index, result))

#define __FIVectorView_1_Windows__CDevices__CSensors__CActivitySensorReading_GetMany(This, startIndex, itemsLength, items, result) \
    ((This)->lpVtbl->GetMany(This, startIndex, itemsLength, items, result))

#endif /* COBJMACROS */

#endif // ____FIVectorView_1_Windows__CDevices__CSensors__CActivitySensorReading_INTERFACE_DEFINED__
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

typedef interface __FIAsyncOperationCompletedHandler_1___FIVectorView_1_Windows__CDevices__CSensors__CActivitySensorReading __FIAsyncOperationCompletedHandler_1___FIVectorView_1_Windows__CDevices__CSensors__CActivitySensorReading;

#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____FIAsyncOperation_1___FIVectorView_1_Windows__CDevices__CSensors__CActivitySensorReading_INTERFACE_DEFINED__)
#define ____FIAsyncOperation_1___FIVectorView_1_Windows__CDevices__CSensors__CActivitySensorReading_INTERFACE_DEFINED__

typedef interface __FIAsyncOperation_1___FIVectorView_1_Windows__CDevices__CSensors__CActivitySensorReading __FIAsyncOperation_1___FIVectorView_1_Windows__CDevices__CSensors__CActivitySensorReading;

//  Declare the parameterized interface IID.
EXTERN_C const IID IID___FIAsyncOperation_1___FIVectorView_1_Windows__CDevices__CSensors__CActivitySensorReading;

typedef struct __FIAsyncOperation_1___FIVectorView_1_Windows__CDevices__CSensors__CActivitySensorReadingVtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__FIAsyncOperation_1___FIVectorView_1_Windows__CDevices__CSensors__CActivitySensorReading* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__FIAsyncOperation_1___FIVectorView_1_Windows__CDevices__CSensors__CActivitySensorReading* This);
    ULONG (STDMETHODCALLTYPE* Release)(__FIAsyncOperation_1___FIVectorView_1_Windows__CDevices__CSensors__CActivitySensorReading* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__FIAsyncOperation_1___FIVectorView_1_Windows__CDevices__CSensors__CActivitySensorReading* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__FIAsyncOperation_1___FIVectorView_1_Windows__CDevices__CSensors__CActivitySensorReading* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__FIAsyncOperation_1___FIVectorView_1_Windows__CDevices__CSensors__CActivitySensorReading* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* put_Completed)(__FIAsyncOperation_1___FIVectorView_1_Windows__CDevices__CSensors__CActivitySensorReading* This,
        __FIAsyncOperationCompletedHandler_1___FIVectorView_1_Windows__CDevices__CSensors__CActivitySensorReading* handler);
    HRESULT (STDMETHODCALLTYPE* get_Completed)(__FIAsyncOperation_1___FIVectorView_1_Windows__CDevices__CSensors__CActivitySensorReading* This,
        __FIAsyncOperationCompletedHandler_1___FIVectorView_1_Windows__CDevices__CSensors__CActivitySensorReading** result);
    HRESULT (STDMETHODCALLTYPE* GetResults)(__FIAsyncOperation_1___FIVectorView_1_Windows__CDevices__CSensors__CActivitySensorReading* This,
        __FIVectorView_1_Windows__CDevices__CSensors__CActivitySensorReading** result);

    END_INTERFACE
} __FIAsyncOperation_1___FIVectorView_1_Windows__CDevices__CSensors__CActivitySensorReadingVtbl;

interface __FIAsyncOperation_1___FIVectorView_1_Windows__CDevices__CSensors__CActivitySensorReading
{
    CONST_VTBL struct __FIAsyncOperation_1___FIVectorView_1_Windows__CDevices__CSensors__CActivitySensorReadingVtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __FIAsyncOperation_1___FIVectorView_1_Windows__CDevices__CSensors__CActivitySensorReading_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __FIAsyncOperation_1___FIVectorView_1_Windows__CDevices__CSensors__CActivitySensorReading_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __FIAsyncOperation_1___FIVectorView_1_Windows__CDevices__CSensors__CActivitySensorReading_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __FIAsyncOperation_1___FIVectorView_1_Windows__CDevices__CSensors__CActivitySensorReading_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __FIAsyncOperation_1___FIVectorView_1_Windows__CDevices__CSensors__CActivitySensorReading_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __FIAsyncOperation_1___FIVectorView_1_Windows__CDevices__CSensors__CActivitySensorReading_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __FIAsyncOperation_1___FIVectorView_1_Windows__CDevices__CSensors__CActivitySensorReading_put_Completed(This, handler) \
    ((This)->lpVtbl->put_Completed(This, handler))

#define __FIAsyncOperation_1___FIVectorView_1_Windows__CDevices__CSensors__CActivitySensorReading_get_Completed(This, result) \
    ((This)->lpVtbl->get_Completed(This, result))

#define __FIAsyncOperation_1___FIVectorView_1_Windows__CDevices__CSensors__CActivitySensorReading_GetResults(This, result) \
    ((This)->lpVtbl->GetResults(This, result))

#endif /* COBJMACROS */

#endif // ____FIAsyncOperation_1___FIVectorView_1_Windows__CDevices__CSensors__CActivitySensorReading_INTERFACE_DEFINED__
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____FIAsyncOperationCompletedHandler_1___FIVectorView_1_Windows__CDevices__CSensors__CActivitySensorReading_INTERFACE_DEFINED__)
#define ____FIAsyncOperationCompletedHandler_1___FIVectorView_1_Windows__CDevices__CSensors__CActivitySensorReading_INTERFACE_DEFINED__

typedef interface __FIAsyncOperationCompletedHandler_1___FIVectorView_1_Windows__CDevices__CSensors__CActivitySensorReading __FIAsyncOperationCompletedHandler_1___FIVectorView_1_Windows__CDevices__CSensors__CActivitySensorReading;

//  Declare the parameterized interface IID.
EXTERN_C const IID IID___FIAsyncOperationCompletedHandler_1___FIVectorView_1_Windows__CDevices__CSensors__CActivitySensorReading;

typedef struct __FIAsyncOperationCompletedHandler_1___FIVectorView_1_Windows__CDevices__CSensors__CActivitySensorReadingVtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__FIAsyncOperationCompletedHandler_1___FIVectorView_1_Windows__CDevices__CSensors__CActivitySensorReading* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__FIAsyncOperationCompletedHandler_1___FIVectorView_1_Windows__CDevices__CSensors__CActivitySensorReading* This);
    ULONG (STDMETHODCALLTYPE* Release)(__FIAsyncOperationCompletedHandler_1___FIVectorView_1_Windows__CDevices__CSensors__CActivitySensorReading* This);
    HRESULT (STDMETHODCALLTYPE* Invoke)(__FIAsyncOperationCompletedHandler_1___FIVectorView_1_Windows__CDevices__CSensors__CActivitySensorReading* This,
        __FIAsyncOperation_1___FIVectorView_1_Windows__CDevices__CSensors__CActivitySensorReading* asyncInfo,
        AsyncStatus asyncStatus);

    END_INTERFACE
} __FIAsyncOperationCompletedHandler_1___FIVectorView_1_Windows__CDevices__CSensors__CActivitySensorReadingVtbl;

interface __FIAsyncOperationCompletedHandler_1___FIVectorView_1_Windows__CDevices__CSensors__CActivitySensorReading
{
    CONST_VTBL struct __FIAsyncOperationCompletedHandler_1___FIVectorView_1_Windows__CDevices__CSensors__CActivitySensorReadingVtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __FIAsyncOperationCompletedHandler_1___FIVectorView_1_Windows__CDevices__CSensors__CActivitySensorReading_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __FIAsyncOperationCompletedHandler_1___FIVectorView_1_Windows__CDevices__CSensors__CActivitySensorReading_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __FIAsyncOperationCompletedHandler_1___FIVectorView_1_Windows__CDevices__CSensors__CActivitySensorReading_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __FIAsyncOperationCompletedHandler_1___FIVectorView_1_Windows__CDevices__CSensors__CActivitySensorReading_Invoke(This, asyncInfo, asyncStatus) \
    ((This)->lpVtbl->Invoke(This, asyncInfo, asyncStatus))

#endif /* COBJMACROS */

#endif // ____FIAsyncOperationCompletedHandler_1___FIVectorView_1_Windows__CDevices__CSensors__CActivitySensorReading_INTERFACE_DEFINED__
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____FIIterator_1_Windows__CDevices__CSensors__CPedometerReading_INTERFACE_DEFINED__)
#define ____FIIterator_1_Windows__CDevices__CSensors__CPedometerReading_INTERFACE_DEFINED__

typedef interface __FIIterator_1_Windows__CDevices__CSensors__CPedometerReading __FIIterator_1_Windows__CDevices__CSensors__CPedometerReading;

//  Declare the parameterized interface IID.
EXTERN_C const IID IID___FIIterator_1_Windows__CDevices__CSensors__CPedometerReading;

typedef struct __FIIterator_1_Windows__CDevices__CSensors__CPedometerReadingVtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__FIIterator_1_Windows__CDevices__CSensors__CPedometerReading* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__FIIterator_1_Windows__CDevices__CSensors__CPedometerReading* This);
    ULONG (STDMETHODCALLTYPE* Release)(__FIIterator_1_Windows__CDevices__CSensors__CPedometerReading* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__FIIterator_1_Windows__CDevices__CSensors__CPedometerReading* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__FIIterator_1_Windows__CDevices__CSensors__CPedometerReading* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__FIIterator_1_Windows__CDevices__CSensors__CPedometerReading* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* get_Current)(__FIIterator_1_Windows__CDevices__CSensors__CPedometerReading* This,
        __x_ABI_CWindows_CDevices_CSensors_CIPedometerReading** result);
    HRESULT (STDMETHODCALLTYPE* get_HasCurrent)(__FIIterator_1_Windows__CDevices__CSensors__CPedometerReading* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* MoveNext)(__FIIterator_1_Windows__CDevices__CSensors__CPedometerReading* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__FIIterator_1_Windows__CDevices__CSensors__CPedometerReading* This,
        UINT32 itemsLength,
        __x_ABI_CWindows_CDevices_CSensors_CIPedometerReading** items,
        UINT32* result);

    END_INTERFACE
} __FIIterator_1_Windows__CDevices__CSensors__CPedometerReadingVtbl;

interface __FIIterator_1_Windows__CDevices__CSensors__CPedometerReading
{
    CONST_VTBL struct __FIIterator_1_Windows__CDevices__CSensors__CPedometerReadingVtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __FIIterator_1_Windows__CDevices__CSensors__CPedometerReading_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __FIIterator_1_Windows__CDevices__CSensors__CPedometerReading_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __FIIterator_1_Windows__CDevices__CSensors__CPedometerReading_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __FIIterator_1_Windows__CDevices__CSensors__CPedometerReading_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __FIIterator_1_Windows__CDevices__CSensors__CPedometerReading_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __FIIterator_1_Windows__CDevices__CSensors__CPedometerReading_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __FIIterator_1_Windows__CDevices__CSensors__CPedometerReading_get_Current(This, result) \
    ((This)->lpVtbl->get_Current(This, result))

#define __FIIterator_1_Windows__CDevices__CSensors__CPedometerReading_get_HasCurrent(This, result) \
    ((This)->lpVtbl->get_HasCurrent(This, result))

#define __FIIterator_1_Windows__CDevices__CSensors__CPedometerReading_MoveNext(This, result) \
    ((This)->lpVtbl->MoveNext(This, result))

#define __FIIterator_1_Windows__CDevices__CSensors__CPedometerReading_GetMany(This, itemsLength, items, result) \
    ((This)->lpVtbl->GetMany(This, itemsLength, items, result))

#endif /* COBJMACROS */

#endif // ____FIIterator_1_Windows__CDevices__CSensors__CPedometerReading_INTERFACE_DEFINED__
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____FIIterable_1_Windows__CDevices__CSensors__CPedometerReading_INTERFACE_DEFINED__)
#define ____FIIterable_1_Windows__CDevices__CSensors__CPedometerReading_INTERFACE_DEFINED__

typedef interface __FIIterable_1_Windows__CDevices__CSensors__CPedometerReading __FIIterable_1_Windows__CDevices__CSensors__CPedometerReading;

//  Declare the parameterized interface IID.
EXTERN_C const IID IID___FIIterable_1_Windows__CDevices__CSensors__CPedometerReading;

typedef struct __FIIterable_1_Windows__CDevices__CSensors__CPedometerReadingVtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__FIIterable_1_Windows__CDevices__CSensors__CPedometerReading* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__FIIterable_1_Windows__CDevices__CSensors__CPedometerReading* This);
    ULONG (STDMETHODCALLTYPE* Release)(__FIIterable_1_Windows__CDevices__CSensors__CPedometerReading* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__FIIterable_1_Windows__CDevices__CSensors__CPedometerReading* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__FIIterable_1_Windows__CDevices__CSensors__CPedometerReading* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__FIIterable_1_Windows__CDevices__CSensors__CPedometerReading* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* First)(__FIIterable_1_Windows__CDevices__CSensors__CPedometerReading* This,
        __FIIterator_1_Windows__CDevices__CSensors__CPedometerReading** result);

    END_INTERFACE
} __FIIterable_1_Windows__CDevices__CSensors__CPedometerReadingVtbl;

interface __FIIterable_1_Windows__CDevices__CSensors__CPedometerReading
{
    CONST_VTBL struct __FIIterable_1_Windows__CDevices__CSensors__CPedometerReadingVtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __FIIterable_1_Windows__CDevices__CSensors__CPedometerReading_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __FIIterable_1_Windows__CDevices__CSensors__CPedometerReading_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __FIIterable_1_Windows__CDevices__CSensors__CPedometerReading_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __FIIterable_1_Windows__CDevices__CSensors__CPedometerReading_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __FIIterable_1_Windows__CDevices__CSensors__CPedometerReading_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __FIIterable_1_Windows__CDevices__CSensors__CPedometerReading_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __FIIterable_1_Windows__CDevices__CSensors__CPedometerReading_First(This, result) \
    ((This)->lpVtbl->First(This, result))

#endif /* COBJMACROS */

#endif // ____FIIterable_1_Windows__CDevices__CSensors__CPedometerReading_INTERFACE_DEFINED__
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____FIVectorView_1_Windows__CDevices__CSensors__CPedometerReading_INTERFACE_DEFINED__)
#define ____FIVectorView_1_Windows__CDevices__CSensors__CPedometerReading_INTERFACE_DEFINED__

typedef interface __FIVectorView_1_Windows__CDevices__CSensors__CPedometerReading __FIVectorView_1_Windows__CDevices__CSensors__CPedometerReading;

//  Declare the parameterized interface IID.
EXTERN_C const IID IID___FIVectorView_1_Windows__CDevices__CSensors__CPedometerReading;

typedef struct __FIVectorView_1_Windows__CDevices__CSensors__CPedometerReadingVtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__FIVectorView_1_Windows__CDevices__CSensors__CPedometerReading* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__FIVectorView_1_Windows__CDevices__CSensors__CPedometerReading* This);
    ULONG (STDMETHODCALLTYPE* Release)(__FIVectorView_1_Windows__CDevices__CSensors__CPedometerReading* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__FIVectorView_1_Windows__CDevices__CSensors__CPedometerReading* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__FIVectorView_1_Windows__CDevices__CSensors__CPedometerReading* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__FIVectorView_1_Windows__CDevices__CSensors__CPedometerReading* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* GetAt)(__FIVectorView_1_Windows__CDevices__CSensors__CPedometerReading* This,
        UINT32 index,
        __x_ABI_CWindows_CDevices_CSensors_CIPedometerReading** result);
    HRESULT (STDMETHODCALLTYPE* get_Size)(__FIVectorView_1_Windows__CDevices__CSensors__CPedometerReading* This,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* IndexOf)(__FIVectorView_1_Windows__CDevices__CSensors__CPedometerReading* This,
        __x_ABI_CWindows_CDevices_CSensors_CIPedometerReading* value,
        UINT32* index,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__FIVectorView_1_Windows__CDevices__CSensors__CPedometerReading* This,
        UINT32 startIndex,
        UINT32 itemsLength,
        __x_ABI_CWindows_CDevices_CSensors_CIPedometerReading** items,
        UINT32* result);

    END_INTERFACE
} __FIVectorView_1_Windows__CDevices__CSensors__CPedometerReadingVtbl;

interface __FIVectorView_1_Windows__CDevices__CSensors__CPedometerReading
{
    CONST_VTBL struct __FIVectorView_1_Windows__CDevices__CSensors__CPedometerReadingVtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __FIVectorView_1_Windows__CDevices__CSensors__CPedometerReading_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __FIVectorView_1_Windows__CDevices__CSensors__CPedometerReading_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __FIVectorView_1_Windows__CDevices__CSensors__CPedometerReading_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __FIVectorView_1_Windows__CDevices__CSensors__CPedometerReading_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __FIVectorView_1_Windows__CDevices__CSensors__CPedometerReading_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __FIVectorView_1_Windows__CDevices__CSensors__CPedometerReading_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __FIVectorView_1_Windows__CDevices__CSensors__CPedometerReading_GetAt(This, index, result) \
    ((This)->lpVtbl->GetAt(This, index, result))

#define __FIVectorView_1_Windows__CDevices__CSensors__CPedometerReading_get_Size(This, result) \
    ((This)->lpVtbl->get_Size(This, result))

#define __FIVectorView_1_Windows__CDevices__CSensors__CPedometerReading_IndexOf(This, value, index, result) \
    ((This)->lpVtbl->IndexOf(This, value, index, result))

#define __FIVectorView_1_Windows__CDevices__CSensors__CPedometerReading_GetMany(This, startIndex, itemsLength, items, result) \
    ((This)->lpVtbl->GetMany(This, startIndex, itemsLength, items, result))

#endif /* COBJMACROS */

#endif // ____FIVectorView_1_Windows__CDevices__CSensors__CPedometerReading_INTERFACE_DEFINED__
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

typedef interface __FIAsyncOperationCompletedHandler_1___FIVectorView_1_Windows__CDevices__CSensors__CPedometerReading __FIAsyncOperationCompletedHandler_1___FIVectorView_1_Windows__CDevices__CSensors__CPedometerReading;

#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____FIAsyncOperation_1___FIVectorView_1_Windows__CDevices__CSensors__CPedometerReading_INTERFACE_DEFINED__)
#define ____FIAsyncOperation_1___FIVectorView_1_Windows__CDevices__CSensors__CPedometerReading_INTERFACE_DEFINED__

typedef interface __FIAsyncOperation_1___FIVectorView_1_Windows__CDevices__CSensors__CPedometerReading __FIAsyncOperation_1___FIVectorView_1_Windows__CDevices__CSensors__CPedometerReading;

//  Declare the parameterized interface IID.
EXTERN_C const IID IID___FIAsyncOperation_1___FIVectorView_1_Windows__CDevices__CSensors__CPedometerReading;

typedef struct __FIAsyncOperation_1___FIVectorView_1_Windows__CDevices__CSensors__CPedometerReadingVtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__FIAsyncOperation_1___FIVectorView_1_Windows__CDevices__CSensors__CPedometerReading* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__FIAsyncOperation_1___FIVectorView_1_Windows__CDevices__CSensors__CPedometerReading* This);
    ULONG (STDMETHODCALLTYPE* Release)(__FIAsyncOperation_1___FIVectorView_1_Windows__CDevices__CSensors__CPedometerReading* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__FIAsyncOperation_1___FIVectorView_1_Windows__CDevices__CSensors__CPedometerReading* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__FIAsyncOperation_1___FIVectorView_1_Windows__CDevices__CSensors__CPedometerReading* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__FIAsyncOperation_1___FIVectorView_1_Windows__CDevices__CSensors__CPedometerReading* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* put_Completed)(__FIAsyncOperation_1___FIVectorView_1_Windows__CDevices__CSensors__CPedometerReading* This,
        __FIAsyncOperationCompletedHandler_1___FIVectorView_1_Windows__CDevices__CSensors__CPedometerReading* handler);
    HRESULT (STDMETHODCALLTYPE* get_Completed)(__FIAsyncOperation_1___FIVectorView_1_Windows__CDevices__CSensors__CPedometerReading* This,
        __FIAsyncOperationCompletedHandler_1___FIVectorView_1_Windows__CDevices__CSensors__CPedometerReading** result);
    HRESULT (STDMETHODCALLTYPE* GetResults)(__FIAsyncOperation_1___FIVectorView_1_Windows__CDevices__CSensors__CPedometerReading* This,
        __FIVectorView_1_Windows__CDevices__CSensors__CPedometerReading** result);

    END_INTERFACE
} __FIAsyncOperation_1___FIVectorView_1_Windows__CDevices__CSensors__CPedometerReadingVtbl;

interface __FIAsyncOperation_1___FIVectorView_1_Windows__CDevices__CSensors__CPedometerReading
{
    CONST_VTBL struct __FIAsyncOperation_1___FIVectorView_1_Windows__CDevices__CSensors__CPedometerReadingVtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __FIAsyncOperation_1___FIVectorView_1_Windows__CDevices__CSensors__CPedometerReading_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __FIAsyncOperation_1___FIVectorView_1_Windows__CDevices__CSensors__CPedometerReading_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __FIAsyncOperation_1___FIVectorView_1_Windows__CDevices__CSensors__CPedometerReading_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __FIAsyncOperation_1___FIVectorView_1_Windows__CDevices__CSensors__CPedometerReading_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __FIAsyncOperation_1___FIVectorView_1_Windows__CDevices__CSensors__CPedometerReading_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __FIAsyncOperation_1___FIVectorView_1_Windows__CDevices__CSensors__CPedometerReading_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __FIAsyncOperation_1___FIVectorView_1_Windows__CDevices__CSensors__CPedometerReading_put_Completed(This, handler) \
    ((This)->lpVtbl->put_Completed(This, handler))

#define __FIAsyncOperation_1___FIVectorView_1_Windows__CDevices__CSensors__CPedometerReading_get_Completed(This, result) \
    ((This)->lpVtbl->get_Completed(This, result))

#define __FIAsyncOperation_1___FIVectorView_1_Windows__CDevices__CSensors__CPedometerReading_GetResults(This, result) \
    ((This)->lpVtbl->GetResults(This, result))

#endif /* COBJMACROS */

#endif // ____FIAsyncOperation_1___FIVectorView_1_Windows__CDevices__CSensors__CPedometerReading_INTERFACE_DEFINED__
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____FIAsyncOperationCompletedHandler_1___FIVectorView_1_Windows__CDevices__CSensors__CPedometerReading_INTERFACE_DEFINED__)
#define ____FIAsyncOperationCompletedHandler_1___FIVectorView_1_Windows__CDevices__CSensors__CPedometerReading_INTERFACE_DEFINED__

typedef interface __FIAsyncOperationCompletedHandler_1___FIVectorView_1_Windows__CDevices__CSensors__CPedometerReading __FIAsyncOperationCompletedHandler_1___FIVectorView_1_Windows__CDevices__CSensors__CPedometerReading;

//  Declare the parameterized interface IID.
EXTERN_C const IID IID___FIAsyncOperationCompletedHandler_1___FIVectorView_1_Windows__CDevices__CSensors__CPedometerReading;

typedef struct __FIAsyncOperationCompletedHandler_1___FIVectorView_1_Windows__CDevices__CSensors__CPedometerReadingVtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__FIAsyncOperationCompletedHandler_1___FIVectorView_1_Windows__CDevices__CSensors__CPedometerReading* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__FIAsyncOperationCompletedHandler_1___FIVectorView_1_Windows__CDevices__CSensors__CPedometerReading* This);
    ULONG (STDMETHODCALLTYPE* Release)(__FIAsyncOperationCompletedHandler_1___FIVectorView_1_Windows__CDevices__CSensors__CPedometerReading* This);
    HRESULT (STDMETHODCALLTYPE* Invoke)(__FIAsyncOperationCompletedHandler_1___FIVectorView_1_Windows__CDevices__CSensors__CPedometerReading* This,
        __FIAsyncOperation_1___FIVectorView_1_Windows__CDevices__CSensors__CPedometerReading* asyncInfo,
        AsyncStatus asyncStatus);

    END_INTERFACE
} __FIAsyncOperationCompletedHandler_1___FIVectorView_1_Windows__CDevices__CSensors__CPedometerReadingVtbl;

interface __FIAsyncOperationCompletedHandler_1___FIVectorView_1_Windows__CDevices__CSensors__CPedometerReading
{
    CONST_VTBL struct __FIAsyncOperationCompletedHandler_1___FIVectorView_1_Windows__CDevices__CSensors__CPedometerReadingVtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __FIAsyncOperationCompletedHandler_1___FIVectorView_1_Windows__CDevices__CSensors__CPedometerReading_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __FIAsyncOperationCompletedHandler_1___FIVectorView_1_Windows__CDevices__CSensors__CPedometerReading_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __FIAsyncOperationCompletedHandler_1___FIVectorView_1_Windows__CDevices__CSensors__CPedometerReading_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __FIAsyncOperationCompletedHandler_1___FIVectorView_1_Windows__CDevices__CSensors__CPedometerReading_Invoke(This, asyncInfo, asyncStatus) \
    ((This)->lpVtbl->Invoke(This, asyncInfo, asyncStatus))

#endif /* COBJMACROS */

#endif // ____FIAsyncOperationCompletedHandler_1___FIVectorView_1_Windows__CDevices__CSensors__CPedometerReading_INTERFACE_DEFINED__
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____FIIterator_1_Windows__CDevices__CSensors__CActivitySensorReadingChangeReport_INTERFACE_DEFINED__)
#define ____FIIterator_1_Windows__CDevices__CSensors__CActivitySensorReadingChangeReport_INTERFACE_DEFINED__

typedef interface __FIIterator_1_Windows__CDevices__CSensors__CActivitySensorReadingChangeReport __FIIterator_1_Windows__CDevices__CSensors__CActivitySensorReadingChangeReport;

//  Declare the parameterized interface IID.
EXTERN_C const IID IID___FIIterator_1_Windows__CDevices__CSensors__CActivitySensorReadingChangeReport;

typedef struct __FIIterator_1_Windows__CDevices__CSensors__CActivitySensorReadingChangeReportVtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__FIIterator_1_Windows__CDevices__CSensors__CActivitySensorReadingChangeReport* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__FIIterator_1_Windows__CDevices__CSensors__CActivitySensorReadingChangeReport* This);
    ULONG (STDMETHODCALLTYPE* Release)(__FIIterator_1_Windows__CDevices__CSensors__CActivitySensorReadingChangeReport* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__FIIterator_1_Windows__CDevices__CSensors__CActivitySensorReadingChangeReport* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__FIIterator_1_Windows__CDevices__CSensors__CActivitySensorReadingChangeReport* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__FIIterator_1_Windows__CDevices__CSensors__CActivitySensorReadingChangeReport* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* get_Current)(__FIIterator_1_Windows__CDevices__CSensors__CActivitySensorReadingChangeReport* This,
        __x_ABI_CWindows_CDevices_CSensors_CIActivitySensorReadingChangeReport** result);
    HRESULT (STDMETHODCALLTYPE* get_HasCurrent)(__FIIterator_1_Windows__CDevices__CSensors__CActivitySensorReadingChangeReport* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* MoveNext)(__FIIterator_1_Windows__CDevices__CSensors__CActivitySensorReadingChangeReport* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__FIIterator_1_Windows__CDevices__CSensors__CActivitySensorReadingChangeReport* This,
        UINT32 itemsLength,
        __x_ABI_CWindows_CDevices_CSensors_CIActivitySensorReadingChangeReport** items,
        UINT32* result);

    END_INTERFACE
} __FIIterator_1_Windows__CDevices__CSensors__CActivitySensorReadingChangeReportVtbl;

interface __FIIterator_1_Windows__CDevices__CSensors__CActivitySensorReadingChangeReport
{
    CONST_VTBL struct __FIIterator_1_Windows__CDevices__CSensors__CActivitySensorReadingChangeReportVtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __FIIterator_1_Windows__CDevices__CSensors__CActivitySensorReadingChangeReport_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __FIIterator_1_Windows__CDevices__CSensors__CActivitySensorReadingChangeReport_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __FIIterator_1_Windows__CDevices__CSensors__CActivitySensorReadingChangeReport_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __FIIterator_1_Windows__CDevices__CSensors__CActivitySensorReadingChangeReport_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __FIIterator_1_Windows__CDevices__CSensors__CActivitySensorReadingChangeReport_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __FIIterator_1_Windows__CDevices__CSensors__CActivitySensorReadingChangeReport_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __FIIterator_1_Windows__CDevices__CSensors__CActivitySensorReadingChangeReport_get_Current(This, result) \
    ((This)->lpVtbl->get_Current(This, result))

#define __FIIterator_1_Windows__CDevices__CSensors__CActivitySensorReadingChangeReport_get_HasCurrent(This, result) \
    ((This)->lpVtbl->get_HasCurrent(This, result))

#define __FIIterator_1_Windows__CDevices__CSensors__CActivitySensorReadingChangeReport_MoveNext(This, result) \
    ((This)->lpVtbl->MoveNext(This, result))

#define __FIIterator_1_Windows__CDevices__CSensors__CActivitySensorReadingChangeReport_GetMany(This, itemsLength, items, result) \
    ((This)->lpVtbl->GetMany(This, itemsLength, items, result))

#endif /* COBJMACROS */

#endif // ____FIIterator_1_Windows__CDevices__CSensors__CActivitySensorReadingChangeReport_INTERFACE_DEFINED__
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____FIIterable_1_Windows__CDevices__CSensors__CActivitySensorReadingChangeReport_INTERFACE_DEFINED__)
#define ____FIIterable_1_Windows__CDevices__CSensors__CActivitySensorReadingChangeReport_INTERFACE_DEFINED__

typedef interface __FIIterable_1_Windows__CDevices__CSensors__CActivitySensorReadingChangeReport __FIIterable_1_Windows__CDevices__CSensors__CActivitySensorReadingChangeReport;

//  Declare the parameterized interface IID.
EXTERN_C const IID IID___FIIterable_1_Windows__CDevices__CSensors__CActivitySensorReadingChangeReport;

typedef struct __FIIterable_1_Windows__CDevices__CSensors__CActivitySensorReadingChangeReportVtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__FIIterable_1_Windows__CDevices__CSensors__CActivitySensorReadingChangeReport* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__FIIterable_1_Windows__CDevices__CSensors__CActivitySensorReadingChangeReport* This);
    ULONG (STDMETHODCALLTYPE* Release)(__FIIterable_1_Windows__CDevices__CSensors__CActivitySensorReadingChangeReport* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__FIIterable_1_Windows__CDevices__CSensors__CActivitySensorReadingChangeReport* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__FIIterable_1_Windows__CDevices__CSensors__CActivitySensorReadingChangeReport* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__FIIterable_1_Windows__CDevices__CSensors__CActivitySensorReadingChangeReport* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* First)(__FIIterable_1_Windows__CDevices__CSensors__CActivitySensorReadingChangeReport* This,
        __FIIterator_1_Windows__CDevices__CSensors__CActivitySensorReadingChangeReport** result);

    END_INTERFACE
} __FIIterable_1_Windows__CDevices__CSensors__CActivitySensorReadingChangeReportVtbl;

interface __FIIterable_1_Windows__CDevices__CSensors__CActivitySensorReadingChangeReport
{
    CONST_VTBL struct __FIIterable_1_Windows__CDevices__CSensors__CActivitySensorReadingChangeReportVtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __FIIterable_1_Windows__CDevices__CSensors__CActivitySensorReadingChangeReport_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __FIIterable_1_Windows__CDevices__CSensors__CActivitySensorReadingChangeReport_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __FIIterable_1_Windows__CDevices__CSensors__CActivitySensorReadingChangeReport_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __FIIterable_1_Windows__CDevices__CSensors__CActivitySensorReadingChangeReport_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __FIIterable_1_Windows__CDevices__CSensors__CActivitySensorReadingChangeReport_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __FIIterable_1_Windows__CDevices__CSensors__CActivitySensorReadingChangeReport_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __FIIterable_1_Windows__CDevices__CSensors__CActivitySensorReadingChangeReport_First(This, result) \
    ((This)->lpVtbl->First(This, result))

#endif /* COBJMACROS */

#endif // ____FIIterable_1_Windows__CDevices__CSensors__CActivitySensorReadingChangeReport_INTERFACE_DEFINED__
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

typedef enum __x_ABI_CWindows_CDevices_CSensors_CActivityType __x_ABI_CWindows_CDevices_CSensors_CActivityType;

#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____FIIterator_1_Windows__CDevices__CSensors__CActivityType_INTERFACE_DEFINED__)
#define ____FIIterator_1_Windows__CDevices__CSensors__CActivityType_INTERFACE_DEFINED__

typedef interface __FIIterator_1_Windows__CDevices__CSensors__CActivityType __FIIterator_1_Windows__CDevices__CSensors__CActivityType;

//  Declare the parameterized interface IID.
EXTERN_C const IID IID___FIIterator_1_Windows__CDevices__CSensors__CActivityType;

typedef struct __FIIterator_1_Windows__CDevices__CSensors__CActivityTypeVtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__FIIterator_1_Windows__CDevices__CSensors__CActivityType* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__FIIterator_1_Windows__CDevices__CSensors__CActivityType* This);
    ULONG (STDMETHODCALLTYPE* Release)(__FIIterator_1_Windows__CDevices__CSensors__CActivityType* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__FIIterator_1_Windows__CDevices__CSensors__CActivityType* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__FIIterator_1_Windows__CDevices__CSensors__CActivityType* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__FIIterator_1_Windows__CDevices__CSensors__CActivityType* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* get_Current)(__FIIterator_1_Windows__CDevices__CSensors__CActivityType* This,
        enum __x_ABI_CWindows_CDevices_CSensors_CActivityType* result);
    HRESULT (STDMETHODCALLTYPE* get_HasCurrent)(__FIIterator_1_Windows__CDevices__CSensors__CActivityType* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* MoveNext)(__FIIterator_1_Windows__CDevices__CSensors__CActivityType* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__FIIterator_1_Windows__CDevices__CSensors__CActivityType* This,
        UINT32 itemsLength,
        enum __x_ABI_CWindows_CDevices_CSensors_CActivityType* items,
        UINT32* result);

    END_INTERFACE
} __FIIterator_1_Windows__CDevices__CSensors__CActivityTypeVtbl;

interface __FIIterator_1_Windows__CDevices__CSensors__CActivityType
{
    CONST_VTBL struct __FIIterator_1_Windows__CDevices__CSensors__CActivityTypeVtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __FIIterator_1_Windows__CDevices__CSensors__CActivityType_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __FIIterator_1_Windows__CDevices__CSensors__CActivityType_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __FIIterator_1_Windows__CDevices__CSensors__CActivityType_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __FIIterator_1_Windows__CDevices__CSensors__CActivityType_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __FIIterator_1_Windows__CDevices__CSensors__CActivityType_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __FIIterator_1_Windows__CDevices__CSensors__CActivityType_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __FIIterator_1_Windows__CDevices__CSensors__CActivityType_get_Current(This, result) \
    ((This)->lpVtbl->get_Current(This, result))

#define __FIIterator_1_Windows__CDevices__CSensors__CActivityType_get_HasCurrent(This, result) \
    ((This)->lpVtbl->get_HasCurrent(This, result))

#define __FIIterator_1_Windows__CDevices__CSensors__CActivityType_MoveNext(This, result) \
    ((This)->lpVtbl->MoveNext(This, result))

#define __FIIterator_1_Windows__CDevices__CSensors__CActivityType_GetMany(This, itemsLength, items, result) \
    ((This)->lpVtbl->GetMany(This, itemsLength, items, result))

#endif /* COBJMACROS */

#endif // ____FIIterator_1_Windows__CDevices__CSensors__CActivityType_INTERFACE_DEFINED__
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____FIIterable_1_Windows__CDevices__CSensors__CActivityType_INTERFACE_DEFINED__)
#define ____FIIterable_1_Windows__CDevices__CSensors__CActivityType_INTERFACE_DEFINED__

typedef interface __FIIterable_1_Windows__CDevices__CSensors__CActivityType __FIIterable_1_Windows__CDevices__CSensors__CActivityType;

//  Declare the parameterized interface IID.
EXTERN_C const IID IID___FIIterable_1_Windows__CDevices__CSensors__CActivityType;

typedef struct __FIIterable_1_Windows__CDevices__CSensors__CActivityTypeVtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__FIIterable_1_Windows__CDevices__CSensors__CActivityType* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__FIIterable_1_Windows__CDevices__CSensors__CActivityType* This);
    ULONG (STDMETHODCALLTYPE* Release)(__FIIterable_1_Windows__CDevices__CSensors__CActivityType* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__FIIterable_1_Windows__CDevices__CSensors__CActivityType* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__FIIterable_1_Windows__CDevices__CSensors__CActivityType* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__FIIterable_1_Windows__CDevices__CSensors__CActivityType* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* First)(__FIIterable_1_Windows__CDevices__CSensors__CActivityType* This,
        __FIIterator_1_Windows__CDevices__CSensors__CActivityType** result);

    END_INTERFACE
} __FIIterable_1_Windows__CDevices__CSensors__CActivityTypeVtbl;

interface __FIIterable_1_Windows__CDevices__CSensors__CActivityType
{
    CONST_VTBL struct __FIIterable_1_Windows__CDevices__CSensors__CActivityTypeVtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __FIIterable_1_Windows__CDevices__CSensors__CActivityType_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __FIIterable_1_Windows__CDevices__CSensors__CActivityType_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __FIIterable_1_Windows__CDevices__CSensors__CActivityType_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __FIIterable_1_Windows__CDevices__CSensors__CActivityType_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __FIIterable_1_Windows__CDevices__CSensors__CActivityType_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __FIIterable_1_Windows__CDevices__CSensors__CActivityType_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __FIIterable_1_Windows__CDevices__CSensors__CActivityType_First(This, result) \
    ((This)->lpVtbl->First(This, result))

#endif /* COBJMACROS */

#endif // ____FIIterable_1_Windows__CDevices__CSensors__CActivityType_INTERFACE_DEFINED__
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____FIIterator_1_Windows__CDevices__CSensors__CProximitySensorReading_INTERFACE_DEFINED__)
#define ____FIIterator_1_Windows__CDevices__CSensors__CProximitySensorReading_INTERFACE_DEFINED__

typedef interface __FIIterator_1_Windows__CDevices__CSensors__CProximitySensorReading __FIIterator_1_Windows__CDevices__CSensors__CProximitySensorReading;

//  Declare the parameterized interface IID.
EXTERN_C const IID IID___FIIterator_1_Windows__CDevices__CSensors__CProximitySensorReading;

typedef struct __FIIterator_1_Windows__CDevices__CSensors__CProximitySensorReadingVtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__FIIterator_1_Windows__CDevices__CSensors__CProximitySensorReading* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__FIIterator_1_Windows__CDevices__CSensors__CProximitySensorReading* This);
    ULONG (STDMETHODCALLTYPE* Release)(__FIIterator_1_Windows__CDevices__CSensors__CProximitySensorReading* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__FIIterator_1_Windows__CDevices__CSensors__CProximitySensorReading* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__FIIterator_1_Windows__CDevices__CSensors__CProximitySensorReading* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__FIIterator_1_Windows__CDevices__CSensors__CProximitySensorReading* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* get_Current)(__FIIterator_1_Windows__CDevices__CSensors__CProximitySensorReading* This,
        __x_ABI_CWindows_CDevices_CSensors_CIProximitySensorReading** result);
    HRESULT (STDMETHODCALLTYPE* get_HasCurrent)(__FIIterator_1_Windows__CDevices__CSensors__CProximitySensorReading* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* MoveNext)(__FIIterator_1_Windows__CDevices__CSensors__CProximitySensorReading* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__FIIterator_1_Windows__CDevices__CSensors__CProximitySensorReading* This,
        UINT32 itemsLength,
        __x_ABI_CWindows_CDevices_CSensors_CIProximitySensorReading** items,
        UINT32* result);

    END_INTERFACE
} __FIIterator_1_Windows__CDevices__CSensors__CProximitySensorReadingVtbl;

interface __FIIterator_1_Windows__CDevices__CSensors__CProximitySensorReading
{
    CONST_VTBL struct __FIIterator_1_Windows__CDevices__CSensors__CProximitySensorReadingVtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __FIIterator_1_Windows__CDevices__CSensors__CProximitySensorReading_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __FIIterator_1_Windows__CDevices__CSensors__CProximitySensorReading_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __FIIterator_1_Windows__CDevices__CSensors__CProximitySensorReading_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __FIIterator_1_Windows__CDevices__CSensors__CProximitySensorReading_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __FIIterator_1_Windows__CDevices__CSensors__CProximitySensorReading_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __FIIterator_1_Windows__CDevices__CSensors__CProximitySensorReading_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __FIIterator_1_Windows__CDevices__CSensors__CProximitySensorReading_get_Current(This, result) \
    ((This)->lpVtbl->get_Current(This, result))

#define __FIIterator_1_Windows__CDevices__CSensors__CProximitySensorReading_get_HasCurrent(This, result) \
    ((This)->lpVtbl->get_HasCurrent(This, result))

#define __FIIterator_1_Windows__CDevices__CSensors__CProximitySensorReading_MoveNext(This, result) \
    ((This)->lpVtbl->MoveNext(This, result))

#define __FIIterator_1_Windows__CDevices__CSensors__CProximitySensorReading_GetMany(This, itemsLength, items, result) \
    ((This)->lpVtbl->GetMany(This, itemsLength, items, result))

#endif /* COBJMACROS */

#endif // ____FIIterator_1_Windows__CDevices__CSensors__CProximitySensorReading_INTERFACE_DEFINED__
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____FIIterable_1_Windows__CDevices__CSensors__CProximitySensorReading_INTERFACE_DEFINED__)
#define ____FIIterable_1_Windows__CDevices__CSensors__CProximitySensorReading_INTERFACE_DEFINED__

typedef interface __FIIterable_1_Windows__CDevices__CSensors__CProximitySensorReading __FIIterable_1_Windows__CDevices__CSensors__CProximitySensorReading;

//  Declare the parameterized interface IID.
EXTERN_C const IID IID___FIIterable_1_Windows__CDevices__CSensors__CProximitySensorReading;

typedef struct __FIIterable_1_Windows__CDevices__CSensors__CProximitySensorReadingVtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__FIIterable_1_Windows__CDevices__CSensors__CProximitySensorReading* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__FIIterable_1_Windows__CDevices__CSensors__CProximitySensorReading* This);
    ULONG (STDMETHODCALLTYPE* Release)(__FIIterable_1_Windows__CDevices__CSensors__CProximitySensorReading* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__FIIterable_1_Windows__CDevices__CSensors__CProximitySensorReading* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__FIIterable_1_Windows__CDevices__CSensors__CProximitySensorReading* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__FIIterable_1_Windows__CDevices__CSensors__CProximitySensorReading* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* First)(__FIIterable_1_Windows__CDevices__CSensors__CProximitySensorReading* This,
        __FIIterator_1_Windows__CDevices__CSensors__CProximitySensorReading** result);

    END_INTERFACE
} __FIIterable_1_Windows__CDevices__CSensors__CProximitySensorReadingVtbl;

interface __FIIterable_1_Windows__CDevices__CSensors__CProximitySensorReading
{
    CONST_VTBL struct __FIIterable_1_Windows__CDevices__CSensors__CProximitySensorReadingVtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __FIIterable_1_Windows__CDevices__CSensors__CProximitySensorReading_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __FIIterable_1_Windows__CDevices__CSensors__CProximitySensorReading_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __FIIterable_1_Windows__CDevices__CSensors__CProximitySensorReading_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __FIIterable_1_Windows__CDevices__CSensors__CProximitySensorReading_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __FIIterable_1_Windows__CDevices__CSensors__CProximitySensorReading_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __FIIterable_1_Windows__CDevices__CSensors__CProximitySensorReading_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __FIIterable_1_Windows__CDevices__CSensors__CProximitySensorReading_First(This, result) \
    ((This)->lpVtbl->First(This, result))

#endif /* COBJMACROS */

#endif // ____FIIterable_1_Windows__CDevices__CSensors__CProximitySensorReading_INTERFACE_DEFINED__
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

#if !defined(____FIKeyValuePair_2_HSTRING_IInspectable_INTERFACE_DEFINED__)
#define ____FIKeyValuePair_2_HSTRING_IInspectable_INTERFACE_DEFINED__

typedef interface __FIKeyValuePair_2_HSTRING_IInspectable __FIKeyValuePair_2_HSTRING_IInspectable;

//  Declare the parameterized interface IID.
EXTERN_C const IID IID___FIKeyValuePair_2_HSTRING_IInspectable;

typedef struct __FIKeyValuePair_2_HSTRING_IInspectableVtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__FIKeyValuePair_2_HSTRING_IInspectable* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__FIKeyValuePair_2_HSTRING_IInspectable* This);
    ULONG (STDMETHODCALLTYPE* Release)(__FIKeyValuePair_2_HSTRING_IInspectable* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__FIKeyValuePair_2_HSTRING_IInspectable* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__FIKeyValuePair_2_HSTRING_IInspectable* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__FIKeyValuePair_2_HSTRING_IInspectable* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* get_Key)(__FIKeyValuePair_2_HSTRING_IInspectable* This,
        HSTRING* result);
    HRESULT (STDMETHODCALLTYPE* get_Value)(__FIKeyValuePair_2_HSTRING_IInspectable* This,
        IInspectable** result);

    END_INTERFACE
} __FIKeyValuePair_2_HSTRING_IInspectableVtbl;

interface __FIKeyValuePair_2_HSTRING_IInspectable
{
    CONST_VTBL struct __FIKeyValuePair_2_HSTRING_IInspectableVtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __FIKeyValuePair_2_HSTRING_IInspectable_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __FIKeyValuePair_2_HSTRING_IInspectable_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __FIKeyValuePair_2_HSTRING_IInspectable_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __FIKeyValuePair_2_HSTRING_IInspectable_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __FIKeyValuePair_2_HSTRING_IInspectable_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __FIKeyValuePair_2_HSTRING_IInspectable_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __FIKeyValuePair_2_HSTRING_IInspectable_get_Key(This, result) \
    ((This)->lpVtbl->get_Key(This, result))

#define __FIKeyValuePair_2_HSTRING_IInspectable_get_Value(This, result) \
    ((This)->lpVtbl->get_Value(This, result))

#endif /* COBJMACROS */

#endif // ____FIKeyValuePair_2_HSTRING_IInspectable_INTERFACE_DEFINED__

#if !defined(____FIIterator_1___FIKeyValuePair_2_HSTRING_IInspectable_INTERFACE_DEFINED__)
#define ____FIIterator_1___FIKeyValuePair_2_HSTRING_IInspectable_INTERFACE_DEFINED__

typedef interface __FIIterator_1___FIKeyValuePair_2_HSTRING_IInspectable __FIIterator_1___FIKeyValuePair_2_HSTRING_IInspectable;

//  Declare the parameterized interface IID.
EXTERN_C const IID IID___FIIterator_1___FIKeyValuePair_2_HSTRING_IInspectable;

typedef struct __FIIterator_1___FIKeyValuePair_2_HSTRING_IInspectableVtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__FIIterator_1___FIKeyValuePair_2_HSTRING_IInspectable* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__FIIterator_1___FIKeyValuePair_2_HSTRING_IInspectable* This);
    ULONG (STDMETHODCALLTYPE* Release)(__FIIterator_1___FIKeyValuePair_2_HSTRING_IInspectable* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__FIIterator_1___FIKeyValuePair_2_HSTRING_IInspectable* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__FIIterator_1___FIKeyValuePair_2_HSTRING_IInspectable* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__FIIterator_1___FIKeyValuePair_2_HSTRING_IInspectable* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* get_Current)(__FIIterator_1___FIKeyValuePair_2_HSTRING_IInspectable* This,
        __FIKeyValuePair_2_HSTRING_IInspectable** result);
    HRESULT (STDMETHODCALLTYPE* get_HasCurrent)(__FIIterator_1___FIKeyValuePair_2_HSTRING_IInspectable* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* MoveNext)(__FIIterator_1___FIKeyValuePair_2_HSTRING_IInspectable* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__FIIterator_1___FIKeyValuePair_2_HSTRING_IInspectable* This,
        UINT32 itemsLength,
        __FIKeyValuePair_2_HSTRING_IInspectable** items,
        UINT32* result);

    END_INTERFACE
} __FIIterator_1___FIKeyValuePair_2_HSTRING_IInspectableVtbl;

interface __FIIterator_1___FIKeyValuePair_2_HSTRING_IInspectable
{
    CONST_VTBL struct __FIIterator_1___FIKeyValuePair_2_HSTRING_IInspectableVtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __FIIterator_1___FIKeyValuePair_2_HSTRING_IInspectable_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __FIIterator_1___FIKeyValuePair_2_HSTRING_IInspectable_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __FIIterator_1___FIKeyValuePair_2_HSTRING_IInspectable_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __FIIterator_1___FIKeyValuePair_2_HSTRING_IInspectable_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __FIIterator_1___FIKeyValuePair_2_HSTRING_IInspectable_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __FIIterator_1___FIKeyValuePair_2_HSTRING_IInspectable_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __FIIterator_1___FIKeyValuePair_2_HSTRING_IInspectable_get_Current(This, result) \
    ((This)->lpVtbl->get_Current(This, result))

#define __FIIterator_1___FIKeyValuePair_2_HSTRING_IInspectable_get_HasCurrent(This, result) \
    ((This)->lpVtbl->get_HasCurrent(This, result))

#define __FIIterator_1___FIKeyValuePair_2_HSTRING_IInspectable_MoveNext(This, result) \
    ((This)->lpVtbl->MoveNext(This, result))

#define __FIIterator_1___FIKeyValuePair_2_HSTRING_IInspectable_GetMany(This, itemsLength, items, result) \
    ((This)->lpVtbl->GetMany(This, itemsLength, items, result))

#endif /* COBJMACROS */

#endif // ____FIIterator_1___FIKeyValuePair_2_HSTRING_IInspectable_INTERFACE_DEFINED__

#if !defined(____FIIterable_1___FIKeyValuePair_2_HSTRING_IInspectable_INTERFACE_DEFINED__)
#define ____FIIterable_1___FIKeyValuePair_2_HSTRING_IInspectable_INTERFACE_DEFINED__

typedef interface __FIIterable_1___FIKeyValuePair_2_HSTRING_IInspectable __FIIterable_1___FIKeyValuePair_2_HSTRING_IInspectable;

//  Declare the parameterized interface IID.
EXTERN_C const IID IID___FIIterable_1___FIKeyValuePair_2_HSTRING_IInspectable;

typedef struct __FIIterable_1___FIKeyValuePair_2_HSTRING_IInspectableVtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__FIIterable_1___FIKeyValuePair_2_HSTRING_IInspectable* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__FIIterable_1___FIKeyValuePair_2_HSTRING_IInspectable* This);
    ULONG (STDMETHODCALLTYPE* Release)(__FIIterable_1___FIKeyValuePair_2_HSTRING_IInspectable* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__FIIterable_1___FIKeyValuePair_2_HSTRING_IInspectable* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__FIIterable_1___FIKeyValuePair_2_HSTRING_IInspectable* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__FIIterable_1___FIKeyValuePair_2_HSTRING_IInspectable* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* First)(__FIIterable_1___FIKeyValuePair_2_HSTRING_IInspectable* This,
        __FIIterator_1___FIKeyValuePair_2_HSTRING_IInspectable** result);

    END_INTERFACE
} __FIIterable_1___FIKeyValuePair_2_HSTRING_IInspectableVtbl;

interface __FIIterable_1___FIKeyValuePair_2_HSTRING_IInspectable
{
    CONST_VTBL struct __FIIterable_1___FIKeyValuePair_2_HSTRING_IInspectableVtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __FIIterable_1___FIKeyValuePair_2_HSTRING_IInspectable_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __FIIterable_1___FIKeyValuePair_2_HSTRING_IInspectable_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __FIIterable_1___FIKeyValuePair_2_HSTRING_IInspectable_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __FIIterable_1___FIKeyValuePair_2_HSTRING_IInspectable_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __FIIterable_1___FIKeyValuePair_2_HSTRING_IInspectable_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __FIIterable_1___FIKeyValuePair_2_HSTRING_IInspectable_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __FIIterable_1___FIKeyValuePair_2_HSTRING_IInspectable_First(This, result) \
    ((This)->lpVtbl->First(This, result))

#endif /* COBJMACROS */

#endif // ____FIIterable_1___FIKeyValuePair_2_HSTRING_IInspectable_INTERFACE_DEFINED__

typedef enum __x_ABI_CWindows_CDevices_CSensors_CPedometerStepKind __x_ABI_CWindows_CDevices_CSensors_CPedometerStepKind;

#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____FIKeyValuePair_2_Windows__CDevices__CSensors__CPedometerStepKind_Windows__CDevices__CSensors__CPedometerReading_INTERFACE_DEFINED__)
#define ____FIKeyValuePair_2_Windows__CDevices__CSensors__CPedometerStepKind_Windows__CDevices__CSensors__CPedometerReading_INTERFACE_DEFINED__

typedef interface __FIKeyValuePair_2_Windows__CDevices__CSensors__CPedometerStepKind_Windows__CDevices__CSensors__CPedometerReading __FIKeyValuePair_2_Windows__CDevices__CSensors__CPedometerStepKind_Windows__CDevices__CSensors__CPedometerReading;

//  Declare the parameterized interface IID.
EXTERN_C const IID IID___FIKeyValuePair_2_Windows__CDevices__CSensors__CPedometerStepKind_Windows__CDevices__CSensors__CPedometerReading;

typedef struct __FIKeyValuePair_2_Windows__CDevices__CSensors__CPedometerStepKind_Windows__CDevices__CSensors__CPedometerReadingVtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__FIKeyValuePair_2_Windows__CDevices__CSensors__CPedometerStepKind_Windows__CDevices__CSensors__CPedometerReading* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__FIKeyValuePair_2_Windows__CDevices__CSensors__CPedometerStepKind_Windows__CDevices__CSensors__CPedometerReading* This);
    ULONG (STDMETHODCALLTYPE* Release)(__FIKeyValuePair_2_Windows__CDevices__CSensors__CPedometerStepKind_Windows__CDevices__CSensors__CPedometerReading* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__FIKeyValuePair_2_Windows__CDevices__CSensors__CPedometerStepKind_Windows__CDevices__CSensors__CPedometerReading* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__FIKeyValuePair_2_Windows__CDevices__CSensors__CPedometerStepKind_Windows__CDevices__CSensors__CPedometerReading* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__FIKeyValuePair_2_Windows__CDevices__CSensors__CPedometerStepKind_Windows__CDevices__CSensors__CPedometerReading* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* get_Key)(__FIKeyValuePair_2_Windows__CDevices__CSensors__CPedometerStepKind_Windows__CDevices__CSensors__CPedometerReading* This,
        enum __x_ABI_CWindows_CDevices_CSensors_CPedometerStepKind* result);
    HRESULT (STDMETHODCALLTYPE* get_Value)(__FIKeyValuePair_2_Windows__CDevices__CSensors__CPedometerStepKind_Windows__CDevices__CSensors__CPedometerReading* This,
        __x_ABI_CWindows_CDevices_CSensors_CIPedometerReading** result);

    END_INTERFACE
} __FIKeyValuePair_2_Windows__CDevices__CSensors__CPedometerStepKind_Windows__CDevices__CSensors__CPedometerReadingVtbl;

interface __FIKeyValuePair_2_Windows__CDevices__CSensors__CPedometerStepKind_Windows__CDevices__CSensors__CPedometerReading
{
    CONST_VTBL struct __FIKeyValuePair_2_Windows__CDevices__CSensors__CPedometerStepKind_Windows__CDevices__CSensors__CPedometerReadingVtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __FIKeyValuePair_2_Windows__CDevices__CSensors__CPedometerStepKind_Windows__CDevices__CSensors__CPedometerReading_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __FIKeyValuePair_2_Windows__CDevices__CSensors__CPedometerStepKind_Windows__CDevices__CSensors__CPedometerReading_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __FIKeyValuePair_2_Windows__CDevices__CSensors__CPedometerStepKind_Windows__CDevices__CSensors__CPedometerReading_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __FIKeyValuePair_2_Windows__CDevices__CSensors__CPedometerStepKind_Windows__CDevices__CSensors__CPedometerReading_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __FIKeyValuePair_2_Windows__CDevices__CSensors__CPedometerStepKind_Windows__CDevices__CSensors__CPedometerReading_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __FIKeyValuePair_2_Windows__CDevices__CSensors__CPedometerStepKind_Windows__CDevices__CSensors__CPedometerReading_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __FIKeyValuePair_2_Windows__CDevices__CSensors__CPedometerStepKind_Windows__CDevices__CSensors__CPedometerReading_get_Key(This, result) \
    ((This)->lpVtbl->get_Key(This, result))

#define __FIKeyValuePair_2_Windows__CDevices__CSensors__CPedometerStepKind_Windows__CDevices__CSensors__CPedometerReading_get_Value(This, result) \
    ((This)->lpVtbl->get_Value(This, result))

#endif /* COBJMACROS */

#endif // ____FIKeyValuePair_2_Windows__CDevices__CSensors__CPedometerStepKind_Windows__CDevices__CSensors__CPedometerReading_INTERFACE_DEFINED__
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____FIIterator_1___FIKeyValuePair_2_Windows__CDevices__CSensors__CPedometerStepKind_Windows__CDevices__CSensors__CPedometerReading_INTERFACE_DEFINED__)
#define ____FIIterator_1___FIKeyValuePair_2_Windows__CDevices__CSensors__CPedometerStepKind_Windows__CDevices__CSensors__CPedometerReading_INTERFACE_DEFINED__

typedef interface __FIIterator_1___FIKeyValuePair_2_Windows__CDevices__CSensors__CPedometerStepKind_Windows__CDevices__CSensors__CPedometerReading __FIIterator_1___FIKeyValuePair_2_Windows__CDevices__CSensors__CPedometerStepKind_Windows__CDevices__CSensors__CPedometerReading;

//  Declare the parameterized interface IID.
EXTERN_C const IID IID___FIIterator_1___FIKeyValuePair_2_Windows__CDevices__CSensors__CPedometerStepKind_Windows__CDevices__CSensors__CPedometerReading;

typedef struct __FIIterator_1___FIKeyValuePair_2_Windows__CDevices__CSensors__CPedometerStepKind_Windows__CDevices__CSensors__CPedometerReadingVtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__FIIterator_1___FIKeyValuePair_2_Windows__CDevices__CSensors__CPedometerStepKind_Windows__CDevices__CSensors__CPedometerReading* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__FIIterator_1___FIKeyValuePair_2_Windows__CDevices__CSensors__CPedometerStepKind_Windows__CDevices__CSensors__CPedometerReading* This);
    ULONG (STDMETHODCALLTYPE* Release)(__FIIterator_1___FIKeyValuePair_2_Windows__CDevices__CSensors__CPedometerStepKind_Windows__CDevices__CSensors__CPedometerReading* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__FIIterator_1___FIKeyValuePair_2_Windows__CDevices__CSensors__CPedometerStepKind_Windows__CDevices__CSensors__CPedometerReading* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__FIIterator_1___FIKeyValuePair_2_Windows__CDevices__CSensors__CPedometerStepKind_Windows__CDevices__CSensors__CPedometerReading* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__FIIterator_1___FIKeyValuePair_2_Windows__CDevices__CSensors__CPedometerStepKind_Windows__CDevices__CSensors__CPedometerReading* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* get_Current)(__FIIterator_1___FIKeyValuePair_2_Windows__CDevices__CSensors__CPedometerStepKind_Windows__CDevices__CSensors__CPedometerReading* This,
        __FIKeyValuePair_2_Windows__CDevices__CSensors__CPedometerStepKind_Windows__CDevices__CSensors__CPedometerReading** result);
    HRESULT (STDMETHODCALLTYPE* get_HasCurrent)(__FIIterator_1___FIKeyValuePair_2_Windows__CDevices__CSensors__CPedometerStepKind_Windows__CDevices__CSensors__CPedometerReading* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* MoveNext)(__FIIterator_1___FIKeyValuePair_2_Windows__CDevices__CSensors__CPedometerStepKind_Windows__CDevices__CSensors__CPedometerReading* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__FIIterator_1___FIKeyValuePair_2_Windows__CDevices__CSensors__CPedometerStepKind_Windows__CDevices__CSensors__CPedometerReading* This,
        UINT32 itemsLength,
        __FIKeyValuePair_2_Windows__CDevices__CSensors__CPedometerStepKind_Windows__CDevices__CSensors__CPedometerReading** items,
        UINT32* result);

    END_INTERFACE
} __FIIterator_1___FIKeyValuePair_2_Windows__CDevices__CSensors__CPedometerStepKind_Windows__CDevices__CSensors__CPedometerReadingVtbl;

interface __FIIterator_1___FIKeyValuePair_2_Windows__CDevices__CSensors__CPedometerStepKind_Windows__CDevices__CSensors__CPedometerReading
{
    CONST_VTBL struct __FIIterator_1___FIKeyValuePair_2_Windows__CDevices__CSensors__CPedometerStepKind_Windows__CDevices__CSensors__CPedometerReadingVtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __FIIterator_1___FIKeyValuePair_2_Windows__CDevices__CSensors__CPedometerStepKind_Windows__CDevices__CSensors__CPedometerReading_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __FIIterator_1___FIKeyValuePair_2_Windows__CDevices__CSensors__CPedometerStepKind_Windows__CDevices__CSensors__CPedometerReading_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __FIIterator_1___FIKeyValuePair_2_Windows__CDevices__CSensors__CPedometerStepKind_Windows__CDevices__CSensors__CPedometerReading_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __FIIterator_1___FIKeyValuePair_2_Windows__CDevices__CSensors__CPedometerStepKind_Windows__CDevices__CSensors__CPedometerReading_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __FIIterator_1___FIKeyValuePair_2_Windows__CDevices__CSensors__CPedometerStepKind_Windows__CDevices__CSensors__CPedometerReading_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __FIIterator_1___FIKeyValuePair_2_Windows__CDevices__CSensors__CPedometerStepKind_Windows__CDevices__CSensors__CPedometerReading_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __FIIterator_1___FIKeyValuePair_2_Windows__CDevices__CSensors__CPedometerStepKind_Windows__CDevices__CSensors__CPedometerReading_get_Current(This, result) \
    ((This)->lpVtbl->get_Current(This, result))

#define __FIIterator_1___FIKeyValuePair_2_Windows__CDevices__CSensors__CPedometerStepKind_Windows__CDevices__CSensors__CPedometerReading_get_HasCurrent(This, result) \
    ((This)->lpVtbl->get_HasCurrent(This, result))

#define __FIIterator_1___FIKeyValuePair_2_Windows__CDevices__CSensors__CPedometerStepKind_Windows__CDevices__CSensors__CPedometerReading_MoveNext(This, result) \
    ((This)->lpVtbl->MoveNext(This, result))

#define __FIIterator_1___FIKeyValuePair_2_Windows__CDevices__CSensors__CPedometerStepKind_Windows__CDevices__CSensors__CPedometerReading_GetMany(This, itemsLength, items, result) \
    ((This)->lpVtbl->GetMany(This, itemsLength, items, result))

#endif /* COBJMACROS */

#endif // ____FIIterator_1___FIKeyValuePair_2_Windows__CDevices__CSensors__CPedometerStepKind_Windows__CDevices__CSensors__CPedometerReading_INTERFACE_DEFINED__
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____FIIterable_1___FIKeyValuePair_2_Windows__CDevices__CSensors__CPedometerStepKind_Windows__CDevices__CSensors__CPedometerReading_INTERFACE_DEFINED__)
#define ____FIIterable_1___FIKeyValuePair_2_Windows__CDevices__CSensors__CPedometerStepKind_Windows__CDevices__CSensors__CPedometerReading_INTERFACE_DEFINED__

typedef interface __FIIterable_1___FIKeyValuePair_2_Windows__CDevices__CSensors__CPedometerStepKind_Windows__CDevices__CSensors__CPedometerReading __FIIterable_1___FIKeyValuePair_2_Windows__CDevices__CSensors__CPedometerStepKind_Windows__CDevices__CSensors__CPedometerReading;

//  Declare the parameterized interface IID.
EXTERN_C const IID IID___FIIterable_1___FIKeyValuePair_2_Windows__CDevices__CSensors__CPedometerStepKind_Windows__CDevices__CSensors__CPedometerReading;

typedef struct __FIIterable_1___FIKeyValuePair_2_Windows__CDevices__CSensors__CPedometerStepKind_Windows__CDevices__CSensors__CPedometerReadingVtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__FIIterable_1___FIKeyValuePair_2_Windows__CDevices__CSensors__CPedometerStepKind_Windows__CDevices__CSensors__CPedometerReading* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__FIIterable_1___FIKeyValuePair_2_Windows__CDevices__CSensors__CPedometerStepKind_Windows__CDevices__CSensors__CPedometerReading* This);
    ULONG (STDMETHODCALLTYPE* Release)(__FIIterable_1___FIKeyValuePair_2_Windows__CDevices__CSensors__CPedometerStepKind_Windows__CDevices__CSensors__CPedometerReading* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__FIIterable_1___FIKeyValuePair_2_Windows__CDevices__CSensors__CPedometerStepKind_Windows__CDevices__CSensors__CPedometerReading* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__FIIterable_1___FIKeyValuePair_2_Windows__CDevices__CSensors__CPedometerStepKind_Windows__CDevices__CSensors__CPedometerReading* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__FIIterable_1___FIKeyValuePair_2_Windows__CDevices__CSensors__CPedometerStepKind_Windows__CDevices__CSensors__CPedometerReading* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* First)(__FIIterable_1___FIKeyValuePair_2_Windows__CDevices__CSensors__CPedometerStepKind_Windows__CDevices__CSensors__CPedometerReading* This,
        __FIIterator_1___FIKeyValuePair_2_Windows__CDevices__CSensors__CPedometerStepKind_Windows__CDevices__CSensors__CPedometerReading** result);

    END_INTERFACE
} __FIIterable_1___FIKeyValuePair_2_Windows__CDevices__CSensors__CPedometerStepKind_Windows__CDevices__CSensors__CPedometerReadingVtbl;

interface __FIIterable_1___FIKeyValuePair_2_Windows__CDevices__CSensors__CPedometerStepKind_Windows__CDevices__CSensors__CPedometerReading
{
    CONST_VTBL struct __FIIterable_1___FIKeyValuePair_2_Windows__CDevices__CSensors__CPedometerStepKind_Windows__CDevices__CSensors__CPedometerReadingVtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __FIIterable_1___FIKeyValuePair_2_Windows__CDevices__CSensors__CPedometerStepKind_Windows__CDevices__CSensors__CPedometerReading_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __FIIterable_1___FIKeyValuePair_2_Windows__CDevices__CSensors__CPedometerStepKind_Windows__CDevices__CSensors__CPedometerReading_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __FIIterable_1___FIKeyValuePair_2_Windows__CDevices__CSensors__CPedometerStepKind_Windows__CDevices__CSensors__CPedometerReading_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __FIIterable_1___FIKeyValuePair_2_Windows__CDevices__CSensors__CPedometerStepKind_Windows__CDevices__CSensors__CPedometerReading_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __FIIterable_1___FIKeyValuePair_2_Windows__CDevices__CSensors__CPedometerStepKind_Windows__CDevices__CSensors__CPedometerReading_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __FIIterable_1___FIKeyValuePair_2_Windows__CDevices__CSensors__CPedometerStepKind_Windows__CDevices__CSensors__CPedometerReading_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __FIIterable_1___FIKeyValuePair_2_Windows__CDevices__CSensors__CPedometerStepKind_Windows__CDevices__CSensors__CPedometerReading_First(This, result) \
    ((This)->lpVtbl->First(This, result))

#endif /* COBJMACROS */

#endif // ____FIIterable_1___FIKeyValuePair_2_Windows__CDevices__CSensors__CPedometerStepKind_Windows__CDevices__CSensors__CPedometerReading_INTERFACE_DEFINED__
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

typedef interface __FIMapView_2_HSTRING_IInspectable __FIMapView_2_HSTRING_IInspectable;

#if !defined(____FIMapView_2_HSTRING_IInspectable_INTERFACE_DEFINED__)
#define ____FIMapView_2_HSTRING_IInspectable_INTERFACE_DEFINED__

typedef interface __FIMapView_2_HSTRING_IInspectable __FIMapView_2_HSTRING_IInspectable;

//  Declare the parameterized interface IID.
EXTERN_C const IID IID___FIMapView_2_HSTRING_IInspectable;

typedef struct __FIMapView_2_HSTRING_IInspectableVtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__FIMapView_2_HSTRING_IInspectable* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__FIMapView_2_HSTRING_IInspectable* This);
    ULONG (STDMETHODCALLTYPE* Release)(__FIMapView_2_HSTRING_IInspectable* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__FIMapView_2_HSTRING_IInspectable* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__FIMapView_2_HSTRING_IInspectable* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__FIMapView_2_HSTRING_IInspectable* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* Lookup)(__FIMapView_2_HSTRING_IInspectable* This,
        HSTRING key,
        IInspectable** result);
    HRESULT (STDMETHODCALLTYPE* get_Size)(__FIMapView_2_HSTRING_IInspectable* This,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* HasKey)(__FIMapView_2_HSTRING_IInspectable* This,
        HSTRING key,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* Split)(__FIMapView_2_HSTRING_IInspectable* This,
        __FIMapView_2_HSTRING_IInspectable** first,
        __FIMapView_2_HSTRING_IInspectable** second);

    END_INTERFACE
} __FIMapView_2_HSTRING_IInspectableVtbl;

interface __FIMapView_2_HSTRING_IInspectable
{
    CONST_VTBL struct __FIMapView_2_HSTRING_IInspectableVtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __FIMapView_2_HSTRING_IInspectable_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __FIMapView_2_HSTRING_IInspectable_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __FIMapView_2_HSTRING_IInspectable_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __FIMapView_2_HSTRING_IInspectable_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __FIMapView_2_HSTRING_IInspectable_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __FIMapView_2_HSTRING_IInspectable_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __FIMapView_2_HSTRING_IInspectable_Lookup(This, key, result) \
    ((This)->lpVtbl->Lookup(This, key, result))

#define __FIMapView_2_HSTRING_IInspectable_get_Size(This, result) \
    ((This)->lpVtbl->get_Size(This, result))

#define __FIMapView_2_HSTRING_IInspectable_HasKey(This, key, result) \
    ((This)->lpVtbl->HasKey(This, key, result))

#define __FIMapView_2_HSTRING_IInspectable_Split(This, first, second) \
    ((This)->lpVtbl->Split(This, first, second))

#endif /* COBJMACROS */

#endif // ____FIMapView_2_HSTRING_IInspectable_INTERFACE_DEFINED__

typedef interface __FIMapView_2_Windows__CDevices__CSensors__CPedometerStepKind_Windows__CDevices__CSensors__CPedometerReading __FIMapView_2_Windows__CDevices__CSensors__CPedometerStepKind_Windows__CDevices__CSensors__CPedometerReading;

#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____FIMapView_2_Windows__CDevices__CSensors__CPedometerStepKind_Windows__CDevices__CSensors__CPedometerReading_INTERFACE_DEFINED__)
#define ____FIMapView_2_Windows__CDevices__CSensors__CPedometerStepKind_Windows__CDevices__CSensors__CPedometerReading_INTERFACE_DEFINED__

typedef interface __FIMapView_2_Windows__CDevices__CSensors__CPedometerStepKind_Windows__CDevices__CSensors__CPedometerReading __FIMapView_2_Windows__CDevices__CSensors__CPedometerStepKind_Windows__CDevices__CSensors__CPedometerReading;

//  Declare the parameterized interface IID.
EXTERN_C const IID IID___FIMapView_2_Windows__CDevices__CSensors__CPedometerStepKind_Windows__CDevices__CSensors__CPedometerReading;

typedef struct __FIMapView_2_Windows__CDevices__CSensors__CPedometerStepKind_Windows__CDevices__CSensors__CPedometerReadingVtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__FIMapView_2_Windows__CDevices__CSensors__CPedometerStepKind_Windows__CDevices__CSensors__CPedometerReading* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__FIMapView_2_Windows__CDevices__CSensors__CPedometerStepKind_Windows__CDevices__CSensors__CPedometerReading* This);
    ULONG (STDMETHODCALLTYPE* Release)(__FIMapView_2_Windows__CDevices__CSensors__CPedometerStepKind_Windows__CDevices__CSensors__CPedometerReading* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__FIMapView_2_Windows__CDevices__CSensors__CPedometerStepKind_Windows__CDevices__CSensors__CPedometerReading* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__FIMapView_2_Windows__CDevices__CSensors__CPedometerStepKind_Windows__CDevices__CSensors__CPedometerReading* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__FIMapView_2_Windows__CDevices__CSensors__CPedometerStepKind_Windows__CDevices__CSensors__CPedometerReading* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* Lookup)(__FIMapView_2_Windows__CDevices__CSensors__CPedometerStepKind_Windows__CDevices__CSensors__CPedometerReading* This,
        enum __x_ABI_CWindows_CDevices_CSensors_CPedometerStepKind key,
        __x_ABI_CWindows_CDevices_CSensors_CIPedometerReading** result);
    HRESULT (STDMETHODCALLTYPE* get_Size)(__FIMapView_2_Windows__CDevices__CSensors__CPedometerStepKind_Windows__CDevices__CSensors__CPedometerReading* This,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* HasKey)(__FIMapView_2_Windows__CDevices__CSensors__CPedometerStepKind_Windows__CDevices__CSensors__CPedometerReading* This,
        enum __x_ABI_CWindows_CDevices_CSensors_CPedometerStepKind key,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* Split)(__FIMapView_2_Windows__CDevices__CSensors__CPedometerStepKind_Windows__CDevices__CSensors__CPedometerReading* This,
        __FIMapView_2_Windows__CDevices__CSensors__CPedometerStepKind_Windows__CDevices__CSensors__CPedometerReading** first,
        __FIMapView_2_Windows__CDevices__CSensors__CPedometerStepKind_Windows__CDevices__CSensors__CPedometerReading** second);

    END_INTERFACE
} __FIMapView_2_Windows__CDevices__CSensors__CPedometerStepKind_Windows__CDevices__CSensors__CPedometerReadingVtbl;

interface __FIMapView_2_Windows__CDevices__CSensors__CPedometerStepKind_Windows__CDevices__CSensors__CPedometerReading
{
    CONST_VTBL struct __FIMapView_2_Windows__CDevices__CSensors__CPedometerStepKind_Windows__CDevices__CSensors__CPedometerReadingVtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __FIMapView_2_Windows__CDevices__CSensors__CPedometerStepKind_Windows__CDevices__CSensors__CPedometerReading_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __FIMapView_2_Windows__CDevices__CSensors__CPedometerStepKind_Windows__CDevices__CSensors__CPedometerReading_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __FIMapView_2_Windows__CDevices__CSensors__CPedometerStepKind_Windows__CDevices__CSensors__CPedometerReading_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __FIMapView_2_Windows__CDevices__CSensors__CPedometerStepKind_Windows__CDevices__CSensors__CPedometerReading_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __FIMapView_2_Windows__CDevices__CSensors__CPedometerStepKind_Windows__CDevices__CSensors__CPedometerReading_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __FIMapView_2_Windows__CDevices__CSensors__CPedometerStepKind_Windows__CDevices__CSensors__CPedometerReading_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __FIMapView_2_Windows__CDevices__CSensors__CPedometerStepKind_Windows__CDevices__CSensors__CPedometerReading_Lookup(This, key, result) \
    ((This)->lpVtbl->Lookup(This, key, result))

#define __FIMapView_2_Windows__CDevices__CSensors__CPedometerStepKind_Windows__CDevices__CSensors__CPedometerReading_get_Size(This, result) \
    ((This)->lpVtbl->get_Size(This, result))

#define __FIMapView_2_Windows__CDevices__CSensors__CPedometerStepKind_Windows__CDevices__CSensors__CPedometerReading_HasKey(This, key, result) \
    ((This)->lpVtbl->HasKey(This, key, result))

#define __FIMapView_2_Windows__CDevices__CSensors__CPedometerStepKind_Windows__CDevices__CSensors__CPedometerReading_Split(This, first, second) \
    ((This)->lpVtbl->Split(This, first, second))

#endif /* COBJMACROS */

#endif // ____FIMapView_2_Windows__CDevices__CSensors__CPedometerStepKind_Windows__CDevices__CSensors__CPedometerReading_INTERFACE_DEFINED__
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____FIVectorView_1_Windows__CDevices__CSensors__CActivitySensorReadingChangeReport_INTERFACE_DEFINED__)
#define ____FIVectorView_1_Windows__CDevices__CSensors__CActivitySensorReadingChangeReport_INTERFACE_DEFINED__

typedef interface __FIVectorView_1_Windows__CDevices__CSensors__CActivitySensorReadingChangeReport __FIVectorView_1_Windows__CDevices__CSensors__CActivitySensorReadingChangeReport;

//  Declare the parameterized interface IID.
EXTERN_C const IID IID___FIVectorView_1_Windows__CDevices__CSensors__CActivitySensorReadingChangeReport;

typedef struct __FIVectorView_1_Windows__CDevices__CSensors__CActivitySensorReadingChangeReportVtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__FIVectorView_1_Windows__CDevices__CSensors__CActivitySensorReadingChangeReport* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__FIVectorView_1_Windows__CDevices__CSensors__CActivitySensorReadingChangeReport* This);
    ULONG (STDMETHODCALLTYPE* Release)(__FIVectorView_1_Windows__CDevices__CSensors__CActivitySensorReadingChangeReport* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__FIVectorView_1_Windows__CDevices__CSensors__CActivitySensorReadingChangeReport* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__FIVectorView_1_Windows__CDevices__CSensors__CActivitySensorReadingChangeReport* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__FIVectorView_1_Windows__CDevices__CSensors__CActivitySensorReadingChangeReport* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* GetAt)(__FIVectorView_1_Windows__CDevices__CSensors__CActivitySensorReadingChangeReport* This,
        UINT32 index,
        __x_ABI_CWindows_CDevices_CSensors_CIActivitySensorReadingChangeReport** result);
    HRESULT (STDMETHODCALLTYPE* get_Size)(__FIVectorView_1_Windows__CDevices__CSensors__CActivitySensorReadingChangeReport* This,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* IndexOf)(__FIVectorView_1_Windows__CDevices__CSensors__CActivitySensorReadingChangeReport* This,
        __x_ABI_CWindows_CDevices_CSensors_CIActivitySensorReadingChangeReport* value,
        UINT32* index,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__FIVectorView_1_Windows__CDevices__CSensors__CActivitySensorReadingChangeReport* This,
        UINT32 startIndex,
        UINT32 itemsLength,
        __x_ABI_CWindows_CDevices_CSensors_CIActivitySensorReadingChangeReport** items,
        UINT32* result);

    END_INTERFACE
} __FIVectorView_1_Windows__CDevices__CSensors__CActivitySensorReadingChangeReportVtbl;

interface __FIVectorView_1_Windows__CDevices__CSensors__CActivitySensorReadingChangeReport
{
    CONST_VTBL struct __FIVectorView_1_Windows__CDevices__CSensors__CActivitySensorReadingChangeReportVtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __FIVectorView_1_Windows__CDevices__CSensors__CActivitySensorReadingChangeReport_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __FIVectorView_1_Windows__CDevices__CSensors__CActivitySensorReadingChangeReport_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __FIVectorView_1_Windows__CDevices__CSensors__CActivitySensorReadingChangeReport_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __FIVectorView_1_Windows__CDevices__CSensors__CActivitySensorReadingChangeReport_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __FIVectorView_1_Windows__CDevices__CSensors__CActivitySensorReadingChangeReport_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __FIVectorView_1_Windows__CDevices__CSensors__CActivitySensorReadingChangeReport_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __FIVectorView_1_Windows__CDevices__CSensors__CActivitySensorReadingChangeReport_GetAt(This, index, result) \
    ((This)->lpVtbl->GetAt(This, index, result))

#define __FIVectorView_1_Windows__CDevices__CSensors__CActivitySensorReadingChangeReport_get_Size(This, result) \
    ((This)->lpVtbl->get_Size(This, result))

#define __FIVectorView_1_Windows__CDevices__CSensors__CActivitySensorReadingChangeReport_IndexOf(This, value, index, result) \
    ((This)->lpVtbl->IndexOf(This, value, index, result))

#define __FIVectorView_1_Windows__CDevices__CSensors__CActivitySensorReadingChangeReport_GetMany(This, startIndex, itemsLength, items, result) \
    ((This)->lpVtbl->GetMany(This, startIndex, itemsLength, items, result))

#endif /* COBJMACROS */

#endif // ____FIVectorView_1_Windows__CDevices__CSensors__CActivitySensorReadingChangeReport_INTERFACE_DEFINED__
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____FIVectorView_1_Windows__CDevices__CSensors__CActivityType_INTERFACE_DEFINED__)
#define ____FIVectorView_1_Windows__CDevices__CSensors__CActivityType_INTERFACE_DEFINED__

typedef interface __FIVectorView_1_Windows__CDevices__CSensors__CActivityType __FIVectorView_1_Windows__CDevices__CSensors__CActivityType;

//  Declare the parameterized interface IID.
EXTERN_C const IID IID___FIVectorView_1_Windows__CDevices__CSensors__CActivityType;

typedef struct __FIVectorView_1_Windows__CDevices__CSensors__CActivityTypeVtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__FIVectorView_1_Windows__CDevices__CSensors__CActivityType* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__FIVectorView_1_Windows__CDevices__CSensors__CActivityType* This);
    ULONG (STDMETHODCALLTYPE* Release)(__FIVectorView_1_Windows__CDevices__CSensors__CActivityType* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__FIVectorView_1_Windows__CDevices__CSensors__CActivityType* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__FIVectorView_1_Windows__CDevices__CSensors__CActivityType* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__FIVectorView_1_Windows__CDevices__CSensors__CActivityType* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* GetAt)(__FIVectorView_1_Windows__CDevices__CSensors__CActivityType* This,
        UINT32 index,
        enum __x_ABI_CWindows_CDevices_CSensors_CActivityType* result);
    HRESULT (STDMETHODCALLTYPE* get_Size)(__FIVectorView_1_Windows__CDevices__CSensors__CActivityType* This,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* IndexOf)(__FIVectorView_1_Windows__CDevices__CSensors__CActivityType* This,
        enum __x_ABI_CWindows_CDevices_CSensors_CActivityType value,
        UINT32* index,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__FIVectorView_1_Windows__CDevices__CSensors__CActivityType* This,
        UINT32 startIndex,
        UINT32 itemsLength,
        enum __x_ABI_CWindows_CDevices_CSensors_CActivityType* items,
        UINT32* result);

    END_INTERFACE
} __FIVectorView_1_Windows__CDevices__CSensors__CActivityTypeVtbl;

interface __FIVectorView_1_Windows__CDevices__CSensors__CActivityType
{
    CONST_VTBL struct __FIVectorView_1_Windows__CDevices__CSensors__CActivityTypeVtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __FIVectorView_1_Windows__CDevices__CSensors__CActivityType_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __FIVectorView_1_Windows__CDevices__CSensors__CActivityType_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __FIVectorView_1_Windows__CDevices__CSensors__CActivityType_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __FIVectorView_1_Windows__CDevices__CSensors__CActivityType_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __FIVectorView_1_Windows__CDevices__CSensors__CActivityType_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __FIVectorView_1_Windows__CDevices__CSensors__CActivityType_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __FIVectorView_1_Windows__CDevices__CSensors__CActivityType_GetAt(This, index, result) \
    ((This)->lpVtbl->GetAt(This, index, result))

#define __FIVectorView_1_Windows__CDevices__CSensors__CActivityType_get_Size(This, result) \
    ((This)->lpVtbl->get_Size(This, result))

#define __FIVectorView_1_Windows__CDevices__CSensors__CActivityType_IndexOf(This, value, index, result) \
    ((This)->lpVtbl->IndexOf(This, value, index, result))

#define __FIVectorView_1_Windows__CDevices__CSensors__CActivityType_GetMany(This, startIndex, itemsLength, items, result) \
    ((This)->lpVtbl->GetMany(This, startIndex, itemsLength, items, result))

#endif /* COBJMACROS */

#endif // ____FIVectorView_1_Windows__CDevices__CSensors__CActivityType_INTERFACE_DEFINED__
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____FIVectorView_1_Windows__CDevices__CSensors__CProximitySensorReading_INTERFACE_DEFINED__)
#define ____FIVectorView_1_Windows__CDevices__CSensors__CProximitySensorReading_INTERFACE_DEFINED__

typedef interface __FIVectorView_1_Windows__CDevices__CSensors__CProximitySensorReading __FIVectorView_1_Windows__CDevices__CSensors__CProximitySensorReading;

//  Declare the parameterized interface IID.
EXTERN_C const IID IID___FIVectorView_1_Windows__CDevices__CSensors__CProximitySensorReading;

typedef struct __FIVectorView_1_Windows__CDevices__CSensors__CProximitySensorReadingVtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__FIVectorView_1_Windows__CDevices__CSensors__CProximitySensorReading* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__FIVectorView_1_Windows__CDevices__CSensors__CProximitySensorReading* This);
    ULONG (STDMETHODCALLTYPE* Release)(__FIVectorView_1_Windows__CDevices__CSensors__CProximitySensorReading* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__FIVectorView_1_Windows__CDevices__CSensors__CProximitySensorReading* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__FIVectorView_1_Windows__CDevices__CSensors__CProximitySensorReading* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__FIVectorView_1_Windows__CDevices__CSensors__CProximitySensorReading* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* GetAt)(__FIVectorView_1_Windows__CDevices__CSensors__CProximitySensorReading* This,
        UINT32 index,
        __x_ABI_CWindows_CDevices_CSensors_CIProximitySensorReading** result);
    HRESULT (STDMETHODCALLTYPE* get_Size)(__FIVectorView_1_Windows__CDevices__CSensors__CProximitySensorReading* This,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* IndexOf)(__FIVectorView_1_Windows__CDevices__CSensors__CProximitySensorReading* This,
        __x_ABI_CWindows_CDevices_CSensors_CIProximitySensorReading* value,
        UINT32* index,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__FIVectorView_1_Windows__CDevices__CSensors__CProximitySensorReading* This,
        UINT32 startIndex,
        UINT32 itemsLength,
        __x_ABI_CWindows_CDevices_CSensors_CIProximitySensorReading** items,
        UINT32* result);

    END_INTERFACE
} __FIVectorView_1_Windows__CDevices__CSensors__CProximitySensorReadingVtbl;

interface __FIVectorView_1_Windows__CDevices__CSensors__CProximitySensorReading
{
    CONST_VTBL struct __FIVectorView_1_Windows__CDevices__CSensors__CProximitySensorReadingVtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __FIVectorView_1_Windows__CDevices__CSensors__CProximitySensorReading_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __FIVectorView_1_Windows__CDevices__CSensors__CProximitySensorReading_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __FIVectorView_1_Windows__CDevices__CSensors__CProximitySensorReading_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __FIVectorView_1_Windows__CDevices__CSensors__CProximitySensorReading_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __FIVectorView_1_Windows__CDevices__CSensors__CProximitySensorReading_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __FIVectorView_1_Windows__CDevices__CSensors__CProximitySensorReading_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __FIVectorView_1_Windows__CDevices__CSensors__CProximitySensorReading_GetAt(This, index, result) \
    ((This)->lpVtbl->GetAt(This, index, result))

#define __FIVectorView_1_Windows__CDevices__CSensors__CProximitySensorReading_get_Size(This, result) \
    ((This)->lpVtbl->get_Size(This, result))

#define __FIVectorView_1_Windows__CDevices__CSensors__CProximitySensorReading_IndexOf(This, value, index, result) \
    ((This)->lpVtbl->IndexOf(This, value, index, result))

#define __FIVectorView_1_Windows__CDevices__CSensors__CProximitySensorReading_GetMany(This, startIndex, itemsLength, items, result) \
    ((This)->lpVtbl->GetMany(This, startIndex, itemsLength, items, result))

#endif /* COBJMACROS */

#endif // ____FIVectorView_1_Windows__CDevices__CSensors__CProximitySensorReading_INTERFACE_DEFINED__
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____FIVector_1_Windows__CDevices__CSensors__CActivityType_INTERFACE_DEFINED__)
#define ____FIVector_1_Windows__CDevices__CSensors__CActivityType_INTERFACE_DEFINED__

typedef interface __FIVector_1_Windows__CDevices__CSensors__CActivityType __FIVector_1_Windows__CDevices__CSensors__CActivityType;

//  Declare the parameterized interface IID.
EXTERN_C const IID IID___FIVector_1_Windows__CDevices__CSensors__CActivityType;

typedef struct __FIVector_1_Windows__CDevices__CSensors__CActivityTypeVtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__FIVector_1_Windows__CDevices__CSensors__CActivityType* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__FIVector_1_Windows__CDevices__CSensors__CActivityType* This);
    ULONG (STDMETHODCALLTYPE* Release)(__FIVector_1_Windows__CDevices__CSensors__CActivityType* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__FIVector_1_Windows__CDevices__CSensors__CActivityType* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__FIVector_1_Windows__CDevices__CSensors__CActivityType* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__FIVector_1_Windows__CDevices__CSensors__CActivityType* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* GetAt)(__FIVector_1_Windows__CDevices__CSensors__CActivityType* This,
        UINT32 index,
        enum __x_ABI_CWindows_CDevices_CSensors_CActivityType* result);
    HRESULT (STDMETHODCALLTYPE* get_Size)(__FIVector_1_Windows__CDevices__CSensors__CActivityType* This,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* GetView)(__FIVector_1_Windows__CDevices__CSensors__CActivityType* This,
        __FIVectorView_1_Windows__CDevices__CSensors__CActivityType** result);
    HRESULT (STDMETHODCALLTYPE* IndexOf)(__FIVector_1_Windows__CDevices__CSensors__CActivityType* This,
        enum __x_ABI_CWindows_CDevices_CSensors_CActivityType value,
        UINT32* index,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* SetAt)(__FIVector_1_Windows__CDevices__CSensors__CActivityType* This,
        UINT32 index,
        enum __x_ABI_CWindows_CDevices_CSensors_CActivityType value);
    HRESULT (STDMETHODCALLTYPE* InsertAt)(__FIVector_1_Windows__CDevices__CSensors__CActivityType* This,
        UINT32 index,
        enum __x_ABI_CWindows_CDevices_CSensors_CActivityType value);
    HRESULT (STDMETHODCALLTYPE* RemoveAt)(__FIVector_1_Windows__CDevices__CSensors__CActivityType* This,
        UINT32 index);
    HRESULT (STDMETHODCALLTYPE* Append)(__FIVector_1_Windows__CDevices__CSensors__CActivityType* This,
        enum __x_ABI_CWindows_CDevices_CSensors_CActivityType value);
    HRESULT (STDMETHODCALLTYPE* RemoveAtEnd)(__FIVector_1_Windows__CDevices__CSensors__CActivityType* This);
    HRESULT (STDMETHODCALLTYPE* Clear)(__FIVector_1_Windows__CDevices__CSensors__CActivityType* This);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__FIVector_1_Windows__CDevices__CSensors__CActivityType* This,
        UINT32 startIndex,
        UINT32 itemsLength,
        enum __x_ABI_CWindows_CDevices_CSensors_CActivityType* items,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* ReplaceAll)(__FIVector_1_Windows__CDevices__CSensors__CActivityType* This,
        UINT32 itemsLength,
        enum __x_ABI_CWindows_CDevices_CSensors_CActivityType* items);

    END_INTERFACE
} __FIVector_1_Windows__CDevices__CSensors__CActivityTypeVtbl;

interface __FIVector_1_Windows__CDevices__CSensors__CActivityType
{
    CONST_VTBL struct __FIVector_1_Windows__CDevices__CSensors__CActivityTypeVtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __FIVector_1_Windows__CDevices__CSensors__CActivityType_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __FIVector_1_Windows__CDevices__CSensors__CActivityType_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __FIVector_1_Windows__CDevices__CSensors__CActivityType_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __FIVector_1_Windows__CDevices__CSensors__CActivityType_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __FIVector_1_Windows__CDevices__CSensors__CActivityType_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __FIVector_1_Windows__CDevices__CSensors__CActivityType_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __FIVector_1_Windows__CDevices__CSensors__CActivityType_GetAt(This, index, result) \
    ((This)->lpVtbl->GetAt(This, index, result))

#define __FIVector_1_Windows__CDevices__CSensors__CActivityType_get_Size(This, result) \
    ((This)->lpVtbl->get_Size(This, result))

#define __FIVector_1_Windows__CDevices__CSensors__CActivityType_GetView(This, result) \
    ((This)->lpVtbl->GetView(This, result))

#define __FIVector_1_Windows__CDevices__CSensors__CActivityType_IndexOf(This, value, index, result) \
    ((This)->lpVtbl->IndexOf(This, value, index, result))

#define __FIVector_1_Windows__CDevices__CSensors__CActivityType_SetAt(This, index, value) \
    ((This)->lpVtbl->SetAt(This, index, value))

#define __FIVector_1_Windows__CDevices__CSensors__CActivityType_InsertAt(This, index, value) \
    ((This)->lpVtbl->InsertAt(This, index, value))

#define __FIVector_1_Windows__CDevices__CSensors__CActivityType_RemoveAt(This, index) \
    ((This)->lpVtbl->RemoveAt(This, index))

#define __FIVector_1_Windows__CDevices__CSensors__CActivityType_Append(This, value) \
    ((This)->lpVtbl->Append(This, value))

#define __FIVector_1_Windows__CDevices__CSensors__CActivityType_RemoveAtEnd(This) \
    ((This)->lpVtbl->RemoveAtEnd(This))

#define __FIVector_1_Windows__CDevices__CSensors__CActivityType_Clear(This) \
    ((This)->lpVtbl->Clear(This))

#define __FIVector_1_Windows__CDevices__CSensors__CActivityType_GetMany(This, startIndex, itemsLength, items, result) \
    ((This)->lpVtbl->GetMany(This, startIndex, itemsLength, items, result))

#define __FIVector_1_Windows__CDevices__CSensors__CActivityType_ReplaceAll(This, itemsLength, items) \
    ((This)->lpVtbl->ReplaceAll(This, itemsLength, items))

#endif /* COBJMACROS */

#endif // ____FIVector_1_Windows__CDevices__CSensors__CActivityType_INTERFACE_DEFINED__
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

#if !defined(____FIReference_1_double_INTERFACE_DEFINED__)
#define ____FIReference_1_double_INTERFACE_DEFINED__

typedef interface __FIReference_1_double __FIReference_1_double;

//  Declare the parameterized interface IID.
EXTERN_C const IID IID___FIReference_1_double;

typedef struct __FIReference_1_doubleVtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__FIReference_1_double* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__FIReference_1_double* This);
    ULONG (STDMETHODCALLTYPE* Release)(__FIReference_1_double* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__FIReference_1_double* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__FIReference_1_double* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__FIReference_1_double* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* get_Value)(__FIReference_1_double* This,
        DOUBLE* result);

    END_INTERFACE
} __FIReference_1_doubleVtbl;

interface __FIReference_1_double
{
    CONST_VTBL struct __FIReference_1_doubleVtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __FIReference_1_double_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __FIReference_1_double_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __FIReference_1_double_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __FIReference_1_double_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __FIReference_1_double_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __FIReference_1_double_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __FIReference_1_double_get_Value(This, result) \
    ((This)->lpVtbl->get_Value(This, result))

#endif /* COBJMACROS */

#endif // ____FIReference_1_double_INTERFACE_DEFINED__

#if !defined(____FIReference_1_UINT32_INTERFACE_DEFINED__)
#define ____FIReference_1_UINT32_INTERFACE_DEFINED__

typedef interface __FIReference_1_UINT32 __FIReference_1_UINT32;

//  Declare the parameterized interface IID.
EXTERN_C const IID IID___FIReference_1_UINT32;

typedef struct __FIReference_1_UINT32Vtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__FIReference_1_UINT32* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__FIReference_1_UINT32* This);
    ULONG (STDMETHODCALLTYPE* Release)(__FIReference_1_UINT32* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__FIReference_1_UINT32* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__FIReference_1_UINT32* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__FIReference_1_UINT32* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* get_Value)(__FIReference_1_UINT32* This,
        UINT32* result);

    END_INTERFACE
} __FIReference_1_UINT32Vtbl;

interface __FIReference_1_UINT32
{
    CONST_VTBL struct __FIReference_1_UINT32Vtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __FIReference_1_UINT32_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __FIReference_1_UINT32_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __FIReference_1_UINT32_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __FIReference_1_UINT32_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __FIReference_1_UINT32_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __FIReference_1_UINT32_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __FIReference_1_UINT32_get_Value(This, result) \
    ((This)->lpVtbl->get_Value(This, result))

#endif /* COBJMACROS */

#endif // ____FIReference_1_UINT32_INTERFACE_DEFINED__

typedef struct __x_ABI_CWindows_CFoundation_CTimeSpan __x_ABI_CWindows_CFoundation_CTimeSpan;

#if WINDOWS_FOUNDATION_FOUNDATIONCONTRACT_VERSION >= 0x10000
#if !defined(____FIReference_1_Windows__CFoundation__CTimeSpan_INTERFACE_DEFINED__)
#define ____FIReference_1_Windows__CFoundation__CTimeSpan_INTERFACE_DEFINED__

typedef interface __FIReference_1_Windows__CFoundation__CTimeSpan __FIReference_1_Windows__CFoundation__CTimeSpan;

//  Declare the parameterized interface IID.
EXTERN_C const IID IID___FIReference_1_Windows__CFoundation__CTimeSpan;

typedef struct __FIReference_1_Windows__CFoundation__CTimeSpanVtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__FIReference_1_Windows__CFoundation__CTimeSpan* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__FIReference_1_Windows__CFoundation__CTimeSpan* This);
    ULONG (STDMETHODCALLTYPE* Release)(__FIReference_1_Windows__CFoundation__CTimeSpan* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__FIReference_1_Windows__CFoundation__CTimeSpan* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__FIReference_1_Windows__CFoundation__CTimeSpan* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__FIReference_1_Windows__CFoundation__CTimeSpan* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* get_Value)(__FIReference_1_Windows__CFoundation__CTimeSpan* This,
        struct __x_ABI_CWindows_CFoundation_CTimeSpan* result);

    END_INTERFACE
} __FIReference_1_Windows__CFoundation__CTimeSpanVtbl;

interface __FIReference_1_Windows__CFoundation__CTimeSpan
{
    CONST_VTBL struct __FIReference_1_Windows__CFoundation__CTimeSpanVtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __FIReference_1_Windows__CFoundation__CTimeSpan_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __FIReference_1_Windows__CFoundation__CTimeSpan_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __FIReference_1_Windows__CFoundation__CTimeSpan_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __FIReference_1_Windows__CFoundation__CTimeSpan_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __FIReference_1_Windows__CFoundation__CTimeSpan_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __FIReference_1_Windows__CFoundation__CTimeSpan_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __FIReference_1_Windows__CFoundation__CTimeSpan_get_Value(This, result) \
    ((This)->lpVtbl->get_Value(This, result))

#endif /* COBJMACROS */

#endif // ____FIReference_1_Windows__CFoundation__CTimeSpan_INTERFACE_DEFINED__
#endif // WINDOWS_FOUNDATION_FOUNDATIONCONTRACT_VERSION >= 0x10000

#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____FITypedEventHandler_2_Windows__CDevices__CSensors__CAccelerometer_Windows__CDevices__CSensors__CAccelerometerReadingChangedEventArgs_INTERFACE_DEFINED__)
#define ____FITypedEventHandler_2_Windows__CDevices__CSensors__CAccelerometer_Windows__CDevices__CSensors__CAccelerometerReadingChangedEventArgs_INTERFACE_DEFINED__

typedef interface __FITypedEventHandler_2_Windows__CDevices__CSensors__CAccelerometer_Windows__CDevices__CSensors__CAccelerometerReadingChangedEventArgs __FITypedEventHandler_2_Windows__CDevices__CSensors__CAccelerometer_Windows__CDevices__CSensors__CAccelerometerReadingChangedEventArgs;

//  Declare the parameterized interface IID.
EXTERN_C const IID IID___FITypedEventHandler_2_Windows__CDevices__CSensors__CAccelerometer_Windows__CDevices__CSensors__CAccelerometerReadingChangedEventArgs;

typedef struct __FITypedEventHandler_2_Windows__CDevices__CSensors__CAccelerometer_Windows__CDevices__CSensors__CAccelerometerReadingChangedEventArgsVtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__FITypedEventHandler_2_Windows__CDevices__CSensors__CAccelerometer_Windows__CDevices__CSensors__CAccelerometerReadingChangedEventArgs* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__FITypedEventHandler_2_Windows__CDevices__CSensors__CAccelerometer_Windows__CDevices__CSensors__CAccelerometerReadingChangedEventArgs* This);
    ULONG (STDMETHODCALLTYPE* Release)(__FITypedEventHandler_2_Windows__CDevices__CSensors__CAccelerometer_Windows__CDevices__CSensors__CAccelerometerReadingChangedEventArgs* This);
    HRESULT (STDMETHODCALLTYPE* Invoke)(__FITypedEventHandler_2_Windows__CDevices__CSensors__CAccelerometer_Windows__CDevices__CSensors__CAccelerometerReadingChangedEventArgs* This,
        __x_ABI_CWindows_CDevices_CSensors_CIAccelerometer* sender,
        __x_ABI_CWindows_CDevices_CSensors_CIAccelerometerReadingChangedEventArgs* args);

    END_INTERFACE
} __FITypedEventHandler_2_Windows__CDevices__CSensors__CAccelerometer_Windows__CDevices__CSensors__CAccelerometerReadingChangedEventArgsVtbl;

interface __FITypedEventHandler_2_Windows__CDevices__CSensors__CAccelerometer_Windows__CDevices__CSensors__CAccelerometerReadingChangedEventArgs
{
    CONST_VTBL struct __FITypedEventHandler_2_Windows__CDevices__CSensors__CAccelerometer_Windows__CDevices__CSensors__CAccelerometerReadingChangedEventArgsVtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __FITypedEventHandler_2_Windows__CDevices__CSensors__CAccelerometer_Windows__CDevices__CSensors__CAccelerometerReadingChangedEventArgs_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __FITypedEventHandler_2_Windows__CDevices__CSensors__CAccelerometer_Windows__CDevices__CSensors__CAccelerometerReadingChangedEventArgs_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __FITypedEventHandler_2_Windows__CDevices__CSensors__CAccelerometer_Windows__CDevices__CSensors__CAccelerometerReadingChangedEventArgs_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __FITypedEventHandler_2_Windows__CDevices__CSensors__CAccelerometer_Windows__CDevices__CSensors__CAccelerometerReadingChangedEventArgs_Invoke(This, sender, args) \
    ((This)->lpVtbl->Invoke(This, sender, args))

#endif /* COBJMACROS */

#endif // ____FITypedEventHandler_2_Windows__CDevices__CSensors__CAccelerometer_Windows__CDevices__CSensors__CAccelerometerReadingChangedEventArgs_INTERFACE_DEFINED__
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____FITypedEventHandler_2_Windows__CDevices__CSensors__CAccelerometer_Windows__CDevices__CSensors__CAccelerometerShakenEventArgs_INTERFACE_DEFINED__)
#define ____FITypedEventHandler_2_Windows__CDevices__CSensors__CAccelerometer_Windows__CDevices__CSensors__CAccelerometerShakenEventArgs_INTERFACE_DEFINED__

typedef interface __FITypedEventHandler_2_Windows__CDevices__CSensors__CAccelerometer_Windows__CDevices__CSensors__CAccelerometerShakenEventArgs __FITypedEventHandler_2_Windows__CDevices__CSensors__CAccelerometer_Windows__CDevices__CSensors__CAccelerometerShakenEventArgs;

//  Declare the parameterized interface IID.
EXTERN_C const IID IID___FITypedEventHandler_2_Windows__CDevices__CSensors__CAccelerometer_Windows__CDevices__CSensors__CAccelerometerShakenEventArgs;

typedef struct __FITypedEventHandler_2_Windows__CDevices__CSensors__CAccelerometer_Windows__CDevices__CSensors__CAccelerometerShakenEventArgsVtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__FITypedEventHandler_2_Windows__CDevices__CSensors__CAccelerometer_Windows__CDevices__CSensors__CAccelerometerShakenEventArgs* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__FITypedEventHandler_2_Windows__CDevices__CSensors__CAccelerometer_Windows__CDevices__CSensors__CAccelerometerShakenEventArgs* This);
    ULONG (STDMETHODCALLTYPE* Release)(__FITypedEventHandler_2_Windows__CDevices__CSensors__CAccelerometer_Windows__CDevices__CSensors__CAccelerometerShakenEventArgs* This);
    HRESULT (STDMETHODCALLTYPE* Invoke)(__FITypedEventHandler_2_Windows__CDevices__CSensors__CAccelerometer_Windows__CDevices__CSensors__CAccelerometerShakenEventArgs* This,
        __x_ABI_CWindows_CDevices_CSensors_CIAccelerometer* sender,
        __x_ABI_CWindows_CDevices_CSensors_CIAccelerometerShakenEventArgs* args);

    END_INTERFACE
} __FITypedEventHandler_2_Windows__CDevices__CSensors__CAccelerometer_Windows__CDevices__CSensors__CAccelerometerShakenEventArgsVtbl;

interface __FITypedEventHandler_2_Windows__CDevices__CSensors__CAccelerometer_Windows__CDevices__CSensors__CAccelerometerShakenEventArgs
{
    CONST_VTBL struct __FITypedEventHandler_2_Windows__CDevices__CSensors__CAccelerometer_Windows__CDevices__CSensors__CAccelerometerShakenEventArgsVtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __FITypedEventHandler_2_Windows__CDevices__CSensors__CAccelerometer_Windows__CDevices__CSensors__CAccelerometerShakenEventArgs_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __FITypedEventHandler_2_Windows__CDevices__CSensors__CAccelerometer_Windows__CDevices__CSensors__CAccelerometerShakenEventArgs_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __FITypedEventHandler_2_Windows__CDevices__CSensors__CAccelerometer_Windows__CDevices__CSensors__CAccelerometerShakenEventArgs_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __FITypedEventHandler_2_Windows__CDevices__CSensors__CAccelerometer_Windows__CDevices__CSensors__CAccelerometerShakenEventArgs_Invoke(This, sender, args) \
    ((This)->lpVtbl->Invoke(This, sender, args))

#endif /* COBJMACROS */

#endif // ____FITypedEventHandler_2_Windows__CDevices__CSensors__CAccelerometer_Windows__CDevices__CSensors__CAccelerometerShakenEventArgs_INTERFACE_DEFINED__
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____FITypedEventHandler_2_Windows__CDevices__CSensors__CActivitySensor_Windows__CDevices__CSensors__CActivitySensorReadingChangedEventArgs_INTERFACE_DEFINED__)
#define ____FITypedEventHandler_2_Windows__CDevices__CSensors__CActivitySensor_Windows__CDevices__CSensors__CActivitySensorReadingChangedEventArgs_INTERFACE_DEFINED__

typedef interface __FITypedEventHandler_2_Windows__CDevices__CSensors__CActivitySensor_Windows__CDevices__CSensors__CActivitySensorReadingChangedEventArgs __FITypedEventHandler_2_Windows__CDevices__CSensors__CActivitySensor_Windows__CDevices__CSensors__CActivitySensorReadingChangedEventArgs;

//  Declare the parameterized interface IID.
EXTERN_C const IID IID___FITypedEventHandler_2_Windows__CDevices__CSensors__CActivitySensor_Windows__CDevices__CSensors__CActivitySensorReadingChangedEventArgs;

typedef struct __FITypedEventHandler_2_Windows__CDevices__CSensors__CActivitySensor_Windows__CDevices__CSensors__CActivitySensorReadingChangedEventArgsVtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__FITypedEventHandler_2_Windows__CDevices__CSensors__CActivitySensor_Windows__CDevices__CSensors__CActivitySensorReadingChangedEventArgs* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__FITypedEventHandler_2_Windows__CDevices__CSensors__CActivitySensor_Windows__CDevices__CSensors__CActivitySensorReadingChangedEventArgs* This);
    ULONG (STDMETHODCALLTYPE* Release)(__FITypedEventHandler_2_Windows__CDevices__CSensors__CActivitySensor_Windows__CDevices__CSensors__CActivitySensorReadingChangedEventArgs* This);
    HRESULT (STDMETHODCALLTYPE* Invoke)(__FITypedEventHandler_2_Windows__CDevices__CSensors__CActivitySensor_Windows__CDevices__CSensors__CActivitySensorReadingChangedEventArgs* This,
        __x_ABI_CWindows_CDevices_CSensors_CIActivitySensor* sender,
        __x_ABI_CWindows_CDevices_CSensors_CIActivitySensorReadingChangedEventArgs* args);

    END_INTERFACE
} __FITypedEventHandler_2_Windows__CDevices__CSensors__CActivitySensor_Windows__CDevices__CSensors__CActivitySensorReadingChangedEventArgsVtbl;

interface __FITypedEventHandler_2_Windows__CDevices__CSensors__CActivitySensor_Windows__CDevices__CSensors__CActivitySensorReadingChangedEventArgs
{
    CONST_VTBL struct __FITypedEventHandler_2_Windows__CDevices__CSensors__CActivitySensor_Windows__CDevices__CSensors__CActivitySensorReadingChangedEventArgsVtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __FITypedEventHandler_2_Windows__CDevices__CSensors__CActivitySensor_Windows__CDevices__CSensors__CActivitySensorReadingChangedEventArgs_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __FITypedEventHandler_2_Windows__CDevices__CSensors__CActivitySensor_Windows__CDevices__CSensors__CActivitySensorReadingChangedEventArgs_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __FITypedEventHandler_2_Windows__CDevices__CSensors__CActivitySensor_Windows__CDevices__CSensors__CActivitySensorReadingChangedEventArgs_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __FITypedEventHandler_2_Windows__CDevices__CSensors__CActivitySensor_Windows__CDevices__CSensors__CActivitySensorReadingChangedEventArgs_Invoke(This, sender, args) \
    ((This)->lpVtbl->Invoke(This, sender, args))

#endif /* COBJMACROS */

#endif // ____FITypedEventHandler_2_Windows__CDevices__CSensors__CActivitySensor_Windows__CDevices__CSensors__CActivitySensorReadingChangedEventArgs_INTERFACE_DEFINED__
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____FITypedEventHandler_2_Windows__CDevices__CSensors__CAltimeter_Windows__CDevices__CSensors__CAltimeterReadingChangedEventArgs_INTERFACE_DEFINED__)
#define ____FITypedEventHandler_2_Windows__CDevices__CSensors__CAltimeter_Windows__CDevices__CSensors__CAltimeterReadingChangedEventArgs_INTERFACE_DEFINED__

typedef interface __FITypedEventHandler_2_Windows__CDevices__CSensors__CAltimeter_Windows__CDevices__CSensors__CAltimeterReadingChangedEventArgs __FITypedEventHandler_2_Windows__CDevices__CSensors__CAltimeter_Windows__CDevices__CSensors__CAltimeterReadingChangedEventArgs;

//  Declare the parameterized interface IID.
EXTERN_C const IID IID___FITypedEventHandler_2_Windows__CDevices__CSensors__CAltimeter_Windows__CDevices__CSensors__CAltimeterReadingChangedEventArgs;

typedef struct __FITypedEventHandler_2_Windows__CDevices__CSensors__CAltimeter_Windows__CDevices__CSensors__CAltimeterReadingChangedEventArgsVtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__FITypedEventHandler_2_Windows__CDevices__CSensors__CAltimeter_Windows__CDevices__CSensors__CAltimeterReadingChangedEventArgs* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__FITypedEventHandler_2_Windows__CDevices__CSensors__CAltimeter_Windows__CDevices__CSensors__CAltimeterReadingChangedEventArgs* This);
    ULONG (STDMETHODCALLTYPE* Release)(__FITypedEventHandler_2_Windows__CDevices__CSensors__CAltimeter_Windows__CDevices__CSensors__CAltimeterReadingChangedEventArgs* This);
    HRESULT (STDMETHODCALLTYPE* Invoke)(__FITypedEventHandler_2_Windows__CDevices__CSensors__CAltimeter_Windows__CDevices__CSensors__CAltimeterReadingChangedEventArgs* This,
        __x_ABI_CWindows_CDevices_CSensors_CIAltimeter* sender,
        __x_ABI_CWindows_CDevices_CSensors_CIAltimeterReadingChangedEventArgs* args);

    END_INTERFACE
} __FITypedEventHandler_2_Windows__CDevices__CSensors__CAltimeter_Windows__CDevices__CSensors__CAltimeterReadingChangedEventArgsVtbl;

interface __FITypedEventHandler_2_Windows__CDevices__CSensors__CAltimeter_Windows__CDevices__CSensors__CAltimeterReadingChangedEventArgs
{
    CONST_VTBL struct __FITypedEventHandler_2_Windows__CDevices__CSensors__CAltimeter_Windows__CDevices__CSensors__CAltimeterReadingChangedEventArgsVtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __FITypedEventHandler_2_Windows__CDevices__CSensors__CAltimeter_Windows__CDevices__CSensors__CAltimeterReadingChangedEventArgs_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __FITypedEventHandler_2_Windows__CDevices__CSensors__CAltimeter_Windows__CDevices__CSensors__CAltimeterReadingChangedEventArgs_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __FITypedEventHandler_2_Windows__CDevices__CSensors__CAltimeter_Windows__CDevices__CSensors__CAltimeterReadingChangedEventArgs_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __FITypedEventHandler_2_Windows__CDevices__CSensors__CAltimeter_Windows__CDevices__CSensors__CAltimeterReadingChangedEventArgs_Invoke(This, sender, args) \
    ((This)->lpVtbl->Invoke(This, sender, args))

#endif /* COBJMACROS */

#endif // ____FITypedEventHandler_2_Windows__CDevices__CSensors__CAltimeter_Windows__CDevices__CSensors__CAltimeterReadingChangedEventArgs_INTERFACE_DEFINED__
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____FITypedEventHandler_2_Windows__CDevices__CSensors__CBarometer_Windows__CDevices__CSensors__CBarometerReadingChangedEventArgs_INTERFACE_DEFINED__)
#define ____FITypedEventHandler_2_Windows__CDevices__CSensors__CBarometer_Windows__CDevices__CSensors__CBarometerReadingChangedEventArgs_INTERFACE_DEFINED__

typedef interface __FITypedEventHandler_2_Windows__CDevices__CSensors__CBarometer_Windows__CDevices__CSensors__CBarometerReadingChangedEventArgs __FITypedEventHandler_2_Windows__CDevices__CSensors__CBarometer_Windows__CDevices__CSensors__CBarometerReadingChangedEventArgs;

//  Declare the parameterized interface IID.
EXTERN_C const IID IID___FITypedEventHandler_2_Windows__CDevices__CSensors__CBarometer_Windows__CDevices__CSensors__CBarometerReadingChangedEventArgs;

typedef struct __FITypedEventHandler_2_Windows__CDevices__CSensors__CBarometer_Windows__CDevices__CSensors__CBarometerReadingChangedEventArgsVtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__FITypedEventHandler_2_Windows__CDevices__CSensors__CBarometer_Windows__CDevices__CSensors__CBarometerReadingChangedEventArgs* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__FITypedEventHandler_2_Windows__CDevices__CSensors__CBarometer_Windows__CDevices__CSensors__CBarometerReadingChangedEventArgs* This);
    ULONG (STDMETHODCALLTYPE* Release)(__FITypedEventHandler_2_Windows__CDevices__CSensors__CBarometer_Windows__CDevices__CSensors__CBarometerReadingChangedEventArgs* This);
    HRESULT (STDMETHODCALLTYPE* Invoke)(__FITypedEventHandler_2_Windows__CDevices__CSensors__CBarometer_Windows__CDevices__CSensors__CBarometerReadingChangedEventArgs* This,
        __x_ABI_CWindows_CDevices_CSensors_CIBarometer* sender,
        __x_ABI_CWindows_CDevices_CSensors_CIBarometerReadingChangedEventArgs* args);

    END_INTERFACE
} __FITypedEventHandler_2_Windows__CDevices__CSensors__CBarometer_Windows__CDevices__CSensors__CBarometerReadingChangedEventArgsVtbl;

interface __FITypedEventHandler_2_Windows__CDevices__CSensors__CBarometer_Windows__CDevices__CSensors__CBarometerReadingChangedEventArgs
{
    CONST_VTBL struct __FITypedEventHandler_2_Windows__CDevices__CSensors__CBarometer_Windows__CDevices__CSensors__CBarometerReadingChangedEventArgsVtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __FITypedEventHandler_2_Windows__CDevices__CSensors__CBarometer_Windows__CDevices__CSensors__CBarometerReadingChangedEventArgs_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __FITypedEventHandler_2_Windows__CDevices__CSensors__CBarometer_Windows__CDevices__CSensors__CBarometerReadingChangedEventArgs_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __FITypedEventHandler_2_Windows__CDevices__CSensors__CBarometer_Windows__CDevices__CSensors__CBarometerReadingChangedEventArgs_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __FITypedEventHandler_2_Windows__CDevices__CSensors__CBarometer_Windows__CDevices__CSensors__CBarometerReadingChangedEventArgs_Invoke(This, sender, args) \
    ((This)->lpVtbl->Invoke(This, sender, args))

#endif /* COBJMACROS */

#endif // ____FITypedEventHandler_2_Windows__CDevices__CSensors__CBarometer_Windows__CDevices__CSensors__CBarometerReadingChangedEventArgs_INTERFACE_DEFINED__
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____FITypedEventHandler_2_Windows__CDevices__CSensors__CCompass_Windows__CDevices__CSensors__CCompassReadingChangedEventArgs_INTERFACE_DEFINED__)
#define ____FITypedEventHandler_2_Windows__CDevices__CSensors__CCompass_Windows__CDevices__CSensors__CCompassReadingChangedEventArgs_INTERFACE_DEFINED__

typedef interface __FITypedEventHandler_2_Windows__CDevices__CSensors__CCompass_Windows__CDevices__CSensors__CCompassReadingChangedEventArgs __FITypedEventHandler_2_Windows__CDevices__CSensors__CCompass_Windows__CDevices__CSensors__CCompassReadingChangedEventArgs;

//  Declare the parameterized interface IID.
EXTERN_C const IID IID___FITypedEventHandler_2_Windows__CDevices__CSensors__CCompass_Windows__CDevices__CSensors__CCompassReadingChangedEventArgs;

typedef struct __FITypedEventHandler_2_Windows__CDevices__CSensors__CCompass_Windows__CDevices__CSensors__CCompassReadingChangedEventArgsVtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__FITypedEventHandler_2_Windows__CDevices__CSensors__CCompass_Windows__CDevices__CSensors__CCompassReadingChangedEventArgs* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__FITypedEventHandler_2_Windows__CDevices__CSensors__CCompass_Windows__CDevices__CSensors__CCompassReadingChangedEventArgs* This);
    ULONG (STDMETHODCALLTYPE* Release)(__FITypedEventHandler_2_Windows__CDevices__CSensors__CCompass_Windows__CDevices__CSensors__CCompassReadingChangedEventArgs* This);
    HRESULT (STDMETHODCALLTYPE* Invoke)(__FITypedEventHandler_2_Windows__CDevices__CSensors__CCompass_Windows__CDevices__CSensors__CCompassReadingChangedEventArgs* This,
        __x_ABI_CWindows_CDevices_CSensors_CICompass* sender,
        __x_ABI_CWindows_CDevices_CSensors_CICompassReadingChangedEventArgs* args);

    END_INTERFACE
} __FITypedEventHandler_2_Windows__CDevices__CSensors__CCompass_Windows__CDevices__CSensors__CCompassReadingChangedEventArgsVtbl;

interface __FITypedEventHandler_2_Windows__CDevices__CSensors__CCompass_Windows__CDevices__CSensors__CCompassReadingChangedEventArgs
{
    CONST_VTBL struct __FITypedEventHandler_2_Windows__CDevices__CSensors__CCompass_Windows__CDevices__CSensors__CCompassReadingChangedEventArgsVtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __FITypedEventHandler_2_Windows__CDevices__CSensors__CCompass_Windows__CDevices__CSensors__CCompassReadingChangedEventArgs_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __FITypedEventHandler_2_Windows__CDevices__CSensors__CCompass_Windows__CDevices__CSensors__CCompassReadingChangedEventArgs_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __FITypedEventHandler_2_Windows__CDevices__CSensors__CCompass_Windows__CDevices__CSensors__CCompassReadingChangedEventArgs_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __FITypedEventHandler_2_Windows__CDevices__CSensors__CCompass_Windows__CDevices__CSensors__CCompassReadingChangedEventArgs_Invoke(This, sender, args) \
    ((This)->lpVtbl->Invoke(This, sender, args))

#endif /* COBJMACROS */

#endif // ____FITypedEventHandler_2_Windows__CDevices__CSensors__CCompass_Windows__CDevices__CSensors__CCompassReadingChangedEventArgs_INTERFACE_DEFINED__
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____FITypedEventHandler_2_Windows__CDevices__CSensors__CGyrometer_Windows__CDevices__CSensors__CGyrometerReadingChangedEventArgs_INTERFACE_DEFINED__)
#define ____FITypedEventHandler_2_Windows__CDevices__CSensors__CGyrometer_Windows__CDevices__CSensors__CGyrometerReadingChangedEventArgs_INTERFACE_DEFINED__

typedef interface __FITypedEventHandler_2_Windows__CDevices__CSensors__CGyrometer_Windows__CDevices__CSensors__CGyrometerReadingChangedEventArgs __FITypedEventHandler_2_Windows__CDevices__CSensors__CGyrometer_Windows__CDevices__CSensors__CGyrometerReadingChangedEventArgs;

//  Declare the parameterized interface IID.
EXTERN_C const IID IID___FITypedEventHandler_2_Windows__CDevices__CSensors__CGyrometer_Windows__CDevices__CSensors__CGyrometerReadingChangedEventArgs;

typedef struct __FITypedEventHandler_2_Windows__CDevices__CSensors__CGyrometer_Windows__CDevices__CSensors__CGyrometerReadingChangedEventArgsVtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__FITypedEventHandler_2_Windows__CDevices__CSensors__CGyrometer_Windows__CDevices__CSensors__CGyrometerReadingChangedEventArgs* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__FITypedEventHandler_2_Windows__CDevices__CSensors__CGyrometer_Windows__CDevices__CSensors__CGyrometerReadingChangedEventArgs* This);
    ULONG (STDMETHODCALLTYPE* Release)(__FITypedEventHandler_2_Windows__CDevices__CSensors__CGyrometer_Windows__CDevices__CSensors__CGyrometerReadingChangedEventArgs* This);
    HRESULT (STDMETHODCALLTYPE* Invoke)(__FITypedEventHandler_2_Windows__CDevices__CSensors__CGyrometer_Windows__CDevices__CSensors__CGyrometerReadingChangedEventArgs* This,
        __x_ABI_CWindows_CDevices_CSensors_CIGyrometer* sender,
        __x_ABI_CWindows_CDevices_CSensors_CIGyrometerReadingChangedEventArgs* args);

    END_INTERFACE
} __FITypedEventHandler_2_Windows__CDevices__CSensors__CGyrometer_Windows__CDevices__CSensors__CGyrometerReadingChangedEventArgsVtbl;

interface __FITypedEventHandler_2_Windows__CDevices__CSensors__CGyrometer_Windows__CDevices__CSensors__CGyrometerReadingChangedEventArgs
{
    CONST_VTBL struct __FITypedEventHandler_2_Windows__CDevices__CSensors__CGyrometer_Windows__CDevices__CSensors__CGyrometerReadingChangedEventArgsVtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __FITypedEventHandler_2_Windows__CDevices__CSensors__CGyrometer_Windows__CDevices__CSensors__CGyrometerReadingChangedEventArgs_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __FITypedEventHandler_2_Windows__CDevices__CSensors__CGyrometer_Windows__CDevices__CSensors__CGyrometerReadingChangedEventArgs_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __FITypedEventHandler_2_Windows__CDevices__CSensors__CGyrometer_Windows__CDevices__CSensors__CGyrometerReadingChangedEventArgs_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __FITypedEventHandler_2_Windows__CDevices__CSensors__CGyrometer_Windows__CDevices__CSensors__CGyrometerReadingChangedEventArgs_Invoke(This, sender, args) \
    ((This)->lpVtbl->Invoke(This, sender, args))

#endif /* COBJMACROS */

#endif // ____FITypedEventHandler_2_Windows__CDevices__CSensors__CGyrometer_Windows__CDevices__CSensors__CGyrometerReadingChangedEventArgs_INTERFACE_DEFINED__
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x70000
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x70000
#if !defined(____FITypedEventHandler_2_Windows__CDevices__CSensors__CHingeAngleSensor_Windows__CDevices__CSensors__CHingeAngleSensorReadingChangedEventArgs_INTERFACE_DEFINED__)
#define ____FITypedEventHandler_2_Windows__CDevices__CSensors__CHingeAngleSensor_Windows__CDevices__CSensors__CHingeAngleSensorReadingChangedEventArgs_INTERFACE_DEFINED__

typedef interface __FITypedEventHandler_2_Windows__CDevices__CSensors__CHingeAngleSensor_Windows__CDevices__CSensors__CHingeAngleSensorReadingChangedEventArgs __FITypedEventHandler_2_Windows__CDevices__CSensors__CHingeAngleSensor_Windows__CDevices__CSensors__CHingeAngleSensorReadingChangedEventArgs;

//  Declare the parameterized interface IID.
EXTERN_C const IID IID___FITypedEventHandler_2_Windows__CDevices__CSensors__CHingeAngleSensor_Windows__CDevices__CSensors__CHingeAngleSensorReadingChangedEventArgs;

typedef struct __FITypedEventHandler_2_Windows__CDevices__CSensors__CHingeAngleSensor_Windows__CDevices__CSensors__CHingeAngleSensorReadingChangedEventArgsVtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__FITypedEventHandler_2_Windows__CDevices__CSensors__CHingeAngleSensor_Windows__CDevices__CSensors__CHingeAngleSensorReadingChangedEventArgs* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__FITypedEventHandler_2_Windows__CDevices__CSensors__CHingeAngleSensor_Windows__CDevices__CSensors__CHingeAngleSensorReadingChangedEventArgs* This);
    ULONG (STDMETHODCALLTYPE* Release)(__FITypedEventHandler_2_Windows__CDevices__CSensors__CHingeAngleSensor_Windows__CDevices__CSensors__CHingeAngleSensorReadingChangedEventArgs* This);
    HRESULT (STDMETHODCALLTYPE* Invoke)(__FITypedEventHandler_2_Windows__CDevices__CSensors__CHingeAngleSensor_Windows__CDevices__CSensors__CHingeAngleSensorReadingChangedEventArgs* This,
        __x_ABI_CWindows_CDevices_CSensors_CIHingeAngleSensor* sender,
        __x_ABI_CWindows_CDevices_CSensors_CIHingeAngleSensorReadingChangedEventArgs* args);

    END_INTERFACE
} __FITypedEventHandler_2_Windows__CDevices__CSensors__CHingeAngleSensor_Windows__CDevices__CSensors__CHingeAngleSensorReadingChangedEventArgsVtbl;

interface __FITypedEventHandler_2_Windows__CDevices__CSensors__CHingeAngleSensor_Windows__CDevices__CSensors__CHingeAngleSensorReadingChangedEventArgs
{
    CONST_VTBL struct __FITypedEventHandler_2_Windows__CDevices__CSensors__CHingeAngleSensor_Windows__CDevices__CSensors__CHingeAngleSensorReadingChangedEventArgsVtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __FITypedEventHandler_2_Windows__CDevices__CSensors__CHingeAngleSensor_Windows__CDevices__CSensors__CHingeAngleSensorReadingChangedEventArgs_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __FITypedEventHandler_2_Windows__CDevices__CSensors__CHingeAngleSensor_Windows__CDevices__CSensors__CHingeAngleSensorReadingChangedEventArgs_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __FITypedEventHandler_2_Windows__CDevices__CSensors__CHingeAngleSensor_Windows__CDevices__CSensors__CHingeAngleSensorReadingChangedEventArgs_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __FITypedEventHandler_2_Windows__CDevices__CSensors__CHingeAngleSensor_Windows__CDevices__CSensors__CHingeAngleSensorReadingChangedEventArgs_Invoke(This, sender, args) \
    ((This)->lpVtbl->Invoke(This, sender, args))

#endif /* COBJMACROS */

#endif // ____FITypedEventHandler_2_Windows__CDevices__CSensors__CHingeAngleSensor_Windows__CDevices__CSensors__CHingeAngleSensorReadingChangedEventArgs_INTERFACE_DEFINED__
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x70000
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x70000

#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____FITypedEventHandler_2_Windows__CDevices__CSensors__CInclinometer_Windows__CDevices__CSensors__CInclinometerReadingChangedEventArgs_INTERFACE_DEFINED__)
#define ____FITypedEventHandler_2_Windows__CDevices__CSensors__CInclinometer_Windows__CDevices__CSensors__CInclinometerReadingChangedEventArgs_INTERFACE_DEFINED__

typedef interface __FITypedEventHandler_2_Windows__CDevices__CSensors__CInclinometer_Windows__CDevices__CSensors__CInclinometerReadingChangedEventArgs __FITypedEventHandler_2_Windows__CDevices__CSensors__CInclinometer_Windows__CDevices__CSensors__CInclinometerReadingChangedEventArgs;

//  Declare the parameterized interface IID.
EXTERN_C const IID IID___FITypedEventHandler_2_Windows__CDevices__CSensors__CInclinometer_Windows__CDevices__CSensors__CInclinometerReadingChangedEventArgs;

typedef struct __FITypedEventHandler_2_Windows__CDevices__CSensors__CInclinometer_Windows__CDevices__CSensors__CInclinometerReadingChangedEventArgsVtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__FITypedEventHandler_2_Windows__CDevices__CSensors__CInclinometer_Windows__CDevices__CSensors__CInclinometerReadingChangedEventArgs* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__FITypedEventHandler_2_Windows__CDevices__CSensors__CInclinometer_Windows__CDevices__CSensors__CInclinometerReadingChangedEventArgs* This);
    ULONG (STDMETHODCALLTYPE* Release)(__FITypedEventHandler_2_Windows__CDevices__CSensors__CInclinometer_Windows__CDevices__CSensors__CInclinometerReadingChangedEventArgs* This);
    HRESULT (STDMETHODCALLTYPE* Invoke)(__FITypedEventHandler_2_Windows__CDevices__CSensors__CInclinometer_Windows__CDevices__CSensors__CInclinometerReadingChangedEventArgs* This,
        __x_ABI_CWindows_CDevices_CSensors_CIInclinometer* sender,
        __x_ABI_CWindows_CDevices_CSensors_CIInclinometerReadingChangedEventArgs* args);

    END_INTERFACE
} __FITypedEventHandler_2_Windows__CDevices__CSensors__CInclinometer_Windows__CDevices__CSensors__CInclinometerReadingChangedEventArgsVtbl;

interface __FITypedEventHandler_2_Windows__CDevices__CSensors__CInclinometer_Windows__CDevices__CSensors__CInclinometerReadingChangedEventArgs
{
    CONST_VTBL struct __FITypedEventHandler_2_Windows__CDevices__CSensors__CInclinometer_Windows__CDevices__CSensors__CInclinometerReadingChangedEventArgsVtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __FITypedEventHandler_2_Windows__CDevices__CSensors__CInclinometer_Windows__CDevices__CSensors__CInclinometerReadingChangedEventArgs_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __FITypedEventHandler_2_Windows__CDevices__CSensors__CInclinometer_Windows__CDevices__CSensors__CInclinometerReadingChangedEventArgs_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __FITypedEventHandler_2_Windows__CDevices__CSensors__CInclinometer_Windows__CDevices__CSensors__CInclinometerReadingChangedEventArgs_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __FITypedEventHandler_2_Windows__CDevices__CSensors__CInclinometer_Windows__CDevices__CSensors__CInclinometerReadingChangedEventArgs_Invoke(This, sender, args) \
    ((This)->lpVtbl->Invoke(This, sender, args))

#endif /* COBJMACROS */

#endif // ____FITypedEventHandler_2_Windows__CDevices__CSensors__CInclinometer_Windows__CDevices__CSensors__CInclinometerReadingChangedEventArgs_INTERFACE_DEFINED__
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____FITypedEventHandler_2_Windows__CDevices__CSensors__CLightSensor_Windows__CDevices__CSensors__CLightSensorReadingChangedEventArgs_INTERFACE_DEFINED__)
#define ____FITypedEventHandler_2_Windows__CDevices__CSensors__CLightSensor_Windows__CDevices__CSensors__CLightSensorReadingChangedEventArgs_INTERFACE_DEFINED__

typedef interface __FITypedEventHandler_2_Windows__CDevices__CSensors__CLightSensor_Windows__CDevices__CSensors__CLightSensorReadingChangedEventArgs __FITypedEventHandler_2_Windows__CDevices__CSensors__CLightSensor_Windows__CDevices__CSensors__CLightSensorReadingChangedEventArgs;

//  Declare the parameterized interface IID.
EXTERN_C const IID IID___FITypedEventHandler_2_Windows__CDevices__CSensors__CLightSensor_Windows__CDevices__CSensors__CLightSensorReadingChangedEventArgs;

typedef struct __FITypedEventHandler_2_Windows__CDevices__CSensors__CLightSensor_Windows__CDevices__CSensors__CLightSensorReadingChangedEventArgsVtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__FITypedEventHandler_2_Windows__CDevices__CSensors__CLightSensor_Windows__CDevices__CSensors__CLightSensorReadingChangedEventArgs* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__FITypedEventHandler_2_Windows__CDevices__CSensors__CLightSensor_Windows__CDevices__CSensors__CLightSensorReadingChangedEventArgs* This);
    ULONG (STDMETHODCALLTYPE* Release)(__FITypedEventHandler_2_Windows__CDevices__CSensors__CLightSensor_Windows__CDevices__CSensors__CLightSensorReadingChangedEventArgs* This);
    HRESULT (STDMETHODCALLTYPE* Invoke)(__FITypedEventHandler_2_Windows__CDevices__CSensors__CLightSensor_Windows__CDevices__CSensors__CLightSensorReadingChangedEventArgs* This,
        __x_ABI_CWindows_CDevices_CSensors_CILightSensor* sender,
        __x_ABI_CWindows_CDevices_CSensors_CILightSensorReadingChangedEventArgs* args);

    END_INTERFACE
} __FITypedEventHandler_2_Windows__CDevices__CSensors__CLightSensor_Windows__CDevices__CSensors__CLightSensorReadingChangedEventArgsVtbl;

interface __FITypedEventHandler_2_Windows__CDevices__CSensors__CLightSensor_Windows__CDevices__CSensors__CLightSensorReadingChangedEventArgs
{
    CONST_VTBL struct __FITypedEventHandler_2_Windows__CDevices__CSensors__CLightSensor_Windows__CDevices__CSensors__CLightSensorReadingChangedEventArgsVtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __FITypedEventHandler_2_Windows__CDevices__CSensors__CLightSensor_Windows__CDevices__CSensors__CLightSensorReadingChangedEventArgs_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __FITypedEventHandler_2_Windows__CDevices__CSensors__CLightSensor_Windows__CDevices__CSensors__CLightSensorReadingChangedEventArgs_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __FITypedEventHandler_2_Windows__CDevices__CSensors__CLightSensor_Windows__CDevices__CSensors__CLightSensorReadingChangedEventArgs_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __FITypedEventHandler_2_Windows__CDevices__CSensors__CLightSensor_Windows__CDevices__CSensors__CLightSensorReadingChangedEventArgs_Invoke(This, sender, args) \
    ((This)->lpVtbl->Invoke(This, sender, args))

#endif /* COBJMACROS */

#endif // ____FITypedEventHandler_2_Windows__CDevices__CSensors__CLightSensor_Windows__CDevices__CSensors__CLightSensorReadingChangedEventArgs_INTERFACE_DEFINED__
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____FITypedEventHandler_2_Windows__CDevices__CSensors__CMagnetometer_Windows__CDevices__CSensors__CMagnetometerReadingChangedEventArgs_INTERFACE_DEFINED__)
#define ____FITypedEventHandler_2_Windows__CDevices__CSensors__CMagnetometer_Windows__CDevices__CSensors__CMagnetometerReadingChangedEventArgs_INTERFACE_DEFINED__

typedef interface __FITypedEventHandler_2_Windows__CDevices__CSensors__CMagnetometer_Windows__CDevices__CSensors__CMagnetometerReadingChangedEventArgs __FITypedEventHandler_2_Windows__CDevices__CSensors__CMagnetometer_Windows__CDevices__CSensors__CMagnetometerReadingChangedEventArgs;

//  Declare the parameterized interface IID.
EXTERN_C const IID IID___FITypedEventHandler_2_Windows__CDevices__CSensors__CMagnetometer_Windows__CDevices__CSensors__CMagnetometerReadingChangedEventArgs;

typedef struct __FITypedEventHandler_2_Windows__CDevices__CSensors__CMagnetometer_Windows__CDevices__CSensors__CMagnetometerReadingChangedEventArgsVtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__FITypedEventHandler_2_Windows__CDevices__CSensors__CMagnetometer_Windows__CDevices__CSensors__CMagnetometerReadingChangedEventArgs* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__FITypedEventHandler_2_Windows__CDevices__CSensors__CMagnetometer_Windows__CDevices__CSensors__CMagnetometerReadingChangedEventArgs* This);
    ULONG (STDMETHODCALLTYPE* Release)(__FITypedEventHandler_2_Windows__CDevices__CSensors__CMagnetometer_Windows__CDevices__CSensors__CMagnetometerReadingChangedEventArgs* This);
    HRESULT (STDMETHODCALLTYPE* Invoke)(__FITypedEventHandler_2_Windows__CDevices__CSensors__CMagnetometer_Windows__CDevices__CSensors__CMagnetometerReadingChangedEventArgs* This,
        __x_ABI_CWindows_CDevices_CSensors_CIMagnetometer* sender,
        __x_ABI_CWindows_CDevices_CSensors_CIMagnetometerReadingChangedEventArgs* args);

    END_INTERFACE
} __FITypedEventHandler_2_Windows__CDevices__CSensors__CMagnetometer_Windows__CDevices__CSensors__CMagnetometerReadingChangedEventArgsVtbl;

interface __FITypedEventHandler_2_Windows__CDevices__CSensors__CMagnetometer_Windows__CDevices__CSensors__CMagnetometerReadingChangedEventArgs
{
    CONST_VTBL struct __FITypedEventHandler_2_Windows__CDevices__CSensors__CMagnetometer_Windows__CDevices__CSensors__CMagnetometerReadingChangedEventArgsVtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __FITypedEventHandler_2_Windows__CDevices__CSensors__CMagnetometer_Windows__CDevices__CSensors__CMagnetometerReadingChangedEventArgs_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __FITypedEventHandler_2_Windows__CDevices__CSensors__CMagnetometer_Windows__CDevices__CSensors__CMagnetometerReadingChangedEventArgs_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __FITypedEventHandler_2_Windows__CDevices__CSensors__CMagnetometer_Windows__CDevices__CSensors__CMagnetometerReadingChangedEventArgs_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __FITypedEventHandler_2_Windows__CDevices__CSensors__CMagnetometer_Windows__CDevices__CSensors__CMagnetometerReadingChangedEventArgs_Invoke(This, sender, args) \
    ((This)->lpVtbl->Invoke(This, sender, args))

#endif /* COBJMACROS */

#endif // ____FITypedEventHandler_2_Windows__CDevices__CSensors__CMagnetometer_Windows__CDevices__CSensors__CMagnetometerReadingChangedEventArgs_INTERFACE_DEFINED__
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____FITypedEventHandler_2_Windows__CDevices__CSensors__COrientationSensor_Windows__CDevices__CSensors__COrientationSensorReadingChangedEventArgs_INTERFACE_DEFINED__)
#define ____FITypedEventHandler_2_Windows__CDevices__CSensors__COrientationSensor_Windows__CDevices__CSensors__COrientationSensorReadingChangedEventArgs_INTERFACE_DEFINED__

typedef interface __FITypedEventHandler_2_Windows__CDevices__CSensors__COrientationSensor_Windows__CDevices__CSensors__COrientationSensorReadingChangedEventArgs __FITypedEventHandler_2_Windows__CDevices__CSensors__COrientationSensor_Windows__CDevices__CSensors__COrientationSensorReadingChangedEventArgs;

//  Declare the parameterized interface IID.
EXTERN_C const IID IID___FITypedEventHandler_2_Windows__CDevices__CSensors__COrientationSensor_Windows__CDevices__CSensors__COrientationSensorReadingChangedEventArgs;

typedef struct __FITypedEventHandler_2_Windows__CDevices__CSensors__COrientationSensor_Windows__CDevices__CSensors__COrientationSensorReadingChangedEventArgsVtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__FITypedEventHandler_2_Windows__CDevices__CSensors__COrientationSensor_Windows__CDevices__CSensors__COrientationSensorReadingChangedEventArgs* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__FITypedEventHandler_2_Windows__CDevices__CSensors__COrientationSensor_Windows__CDevices__CSensors__COrientationSensorReadingChangedEventArgs* This);
    ULONG (STDMETHODCALLTYPE* Release)(__FITypedEventHandler_2_Windows__CDevices__CSensors__COrientationSensor_Windows__CDevices__CSensors__COrientationSensorReadingChangedEventArgs* This);
    HRESULT (STDMETHODCALLTYPE* Invoke)(__FITypedEventHandler_2_Windows__CDevices__CSensors__COrientationSensor_Windows__CDevices__CSensors__COrientationSensorReadingChangedEventArgs* This,
        __x_ABI_CWindows_CDevices_CSensors_CIOrientationSensor* sender,
        __x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorReadingChangedEventArgs* args);

    END_INTERFACE
} __FITypedEventHandler_2_Windows__CDevices__CSensors__COrientationSensor_Windows__CDevices__CSensors__COrientationSensorReadingChangedEventArgsVtbl;

interface __FITypedEventHandler_2_Windows__CDevices__CSensors__COrientationSensor_Windows__CDevices__CSensors__COrientationSensorReadingChangedEventArgs
{
    CONST_VTBL struct __FITypedEventHandler_2_Windows__CDevices__CSensors__COrientationSensor_Windows__CDevices__CSensors__COrientationSensorReadingChangedEventArgsVtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __FITypedEventHandler_2_Windows__CDevices__CSensors__COrientationSensor_Windows__CDevices__CSensors__COrientationSensorReadingChangedEventArgs_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __FITypedEventHandler_2_Windows__CDevices__CSensors__COrientationSensor_Windows__CDevices__CSensors__COrientationSensorReadingChangedEventArgs_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __FITypedEventHandler_2_Windows__CDevices__CSensors__COrientationSensor_Windows__CDevices__CSensors__COrientationSensorReadingChangedEventArgs_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __FITypedEventHandler_2_Windows__CDevices__CSensors__COrientationSensor_Windows__CDevices__CSensors__COrientationSensorReadingChangedEventArgs_Invoke(This, sender, args) \
    ((This)->lpVtbl->Invoke(This, sender, args))

#endif /* COBJMACROS */

#endif // ____FITypedEventHandler_2_Windows__CDevices__CSensors__COrientationSensor_Windows__CDevices__CSensors__COrientationSensorReadingChangedEventArgs_INTERFACE_DEFINED__
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____FITypedEventHandler_2_Windows__CDevices__CSensors__CPedometer_Windows__CDevices__CSensors__CPedometerReadingChangedEventArgs_INTERFACE_DEFINED__)
#define ____FITypedEventHandler_2_Windows__CDevices__CSensors__CPedometer_Windows__CDevices__CSensors__CPedometerReadingChangedEventArgs_INTERFACE_DEFINED__

typedef interface __FITypedEventHandler_2_Windows__CDevices__CSensors__CPedometer_Windows__CDevices__CSensors__CPedometerReadingChangedEventArgs __FITypedEventHandler_2_Windows__CDevices__CSensors__CPedometer_Windows__CDevices__CSensors__CPedometerReadingChangedEventArgs;

//  Declare the parameterized interface IID.
EXTERN_C const IID IID___FITypedEventHandler_2_Windows__CDevices__CSensors__CPedometer_Windows__CDevices__CSensors__CPedometerReadingChangedEventArgs;

typedef struct __FITypedEventHandler_2_Windows__CDevices__CSensors__CPedometer_Windows__CDevices__CSensors__CPedometerReadingChangedEventArgsVtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__FITypedEventHandler_2_Windows__CDevices__CSensors__CPedometer_Windows__CDevices__CSensors__CPedometerReadingChangedEventArgs* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__FITypedEventHandler_2_Windows__CDevices__CSensors__CPedometer_Windows__CDevices__CSensors__CPedometerReadingChangedEventArgs* This);
    ULONG (STDMETHODCALLTYPE* Release)(__FITypedEventHandler_2_Windows__CDevices__CSensors__CPedometer_Windows__CDevices__CSensors__CPedometerReadingChangedEventArgs* This);
    HRESULT (STDMETHODCALLTYPE* Invoke)(__FITypedEventHandler_2_Windows__CDevices__CSensors__CPedometer_Windows__CDevices__CSensors__CPedometerReadingChangedEventArgs* This,
        __x_ABI_CWindows_CDevices_CSensors_CIPedometer* sender,
        __x_ABI_CWindows_CDevices_CSensors_CIPedometerReadingChangedEventArgs* args);

    END_INTERFACE
} __FITypedEventHandler_2_Windows__CDevices__CSensors__CPedometer_Windows__CDevices__CSensors__CPedometerReadingChangedEventArgsVtbl;

interface __FITypedEventHandler_2_Windows__CDevices__CSensors__CPedometer_Windows__CDevices__CSensors__CPedometerReadingChangedEventArgs
{
    CONST_VTBL struct __FITypedEventHandler_2_Windows__CDevices__CSensors__CPedometer_Windows__CDevices__CSensors__CPedometerReadingChangedEventArgsVtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __FITypedEventHandler_2_Windows__CDevices__CSensors__CPedometer_Windows__CDevices__CSensors__CPedometerReadingChangedEventArgs_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __FITypedEventHandler_2_Windows__CDevices__CSensors__CPedometer_Windows__CDevices__CSensors__CPedometerReadingChangedEventArgs_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __FITypedEventHandler_2_Windows__CDevices__CSensors__CPedometer_Windows__CDevices__CSensors__CPedometerReadingChangedEventArgs_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __FITypedEventHandler_2_Windows__CDevices__CSensors__CPedometer_Windows__CDevices__CSensors__CPedometerReadingChangedEventArgs_Invoke(This, sender, args) \
    ((This)->lpVtbl->Invoke(This, sender, args))

#endif /* COBJMACROS */

#endif // ____FITypedEventHandler_2_Windows__CDevices__CSensors__CPedometer_Windows__CDevices__CSensors__CPedometerReadingChangedEventArgs_INTERFACE_DEFINED__
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____FITypedEventHandler_2_Windows__CDevices__CSensors__CProximitySensor_Windows__CDevices__CSensors__CProximitySensorReadingChangedEventArgs_INTERFACE_DEFINED__)
#define ____FITypedEventHandler_2_Windows__CDevices__CSensors__CProximitySensor_Windows__CDevices__CSensors__CProximitySensorReadingChangedEventArgs_INTERFACE_DEFINED__

typedef interface __FITypedEventHandler_2_Windows__CDevices__CSensors__CProximitySensor_Windows__CDevices__CSensors__CProximitySensorReadingChangedEventArgs __FITypedEventHandler_2_Windows__CDevices__CSensors__CProximitySensor_Windows__CDevices__CSensors__CProximitySensorReadingChangedEventArgs;

//  Declare the parameterized interface IID.
EXTERN_C const IID IID___FITypedEventHandler_2_Windows__CDevices__CSensors__CProximitySensor_Windows__CDevices__CSensors__CProximitySensorReadingChangedEventArgs;

typedef struct __FITypedEventHandler_2_Windows__CDevices__CSensors__CProximitySensor_Windows__CDevices__CSensors__CProximitySensorReadingChangedEventArgsVtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__FITypedEventHandler_2_Windows__CDevices__CSensors__CProximitySensor_Windows__CDevices__CSensors__CProximitySensorReadingChangedEventArgs* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__FITypedEventHandler_2_Windows__CDevices__CSensors__CProximitySensor_Windows__CDevices__CSensors__CProximitySensorReadingChangedEventArgs* This);
    ULONG (STDMETHODCALLTYPE* Release)(__FITypedEventHandler_2_Windows__CDevices__CSensors__CProximitySensor_Windows__CDevices__CSensors__CProximitySensorReadingChangedEventArgs* This);
    HRESULT (STDMETHODCALLTYPE* Invoke)(__FITypedEventHandler_2_Windows__CDevices__CSensors__CProximitySensor_Windows__CDevices__CSensors__CProximitySensorReadingChangedEventArgs* This,
        __x_ABI_CWindows_CDevices_CSensors_CIProximitySensor* sender,
        __x_ABI_CWindows_CDevices_CSensors_CIProximitySensorReadingChangedEventArgs* args);

    END_INTERFACE
} __FITypedEventHandler_2_Windows__CDevices__CSensors__CProximitySensor_Windows__CDevices__CSensors__CProximitySensorReadingChangedEventArgsVtbl;

interface __FITypedEventHandler_2_Windows__CDevices__CSensors__CProximitySensor_Windows__CDevices__CSensors__CProximitySensorReadingChangedEventArgs
{
    CONST_VTBL struct __FITypedEventHandler_2_Windows__CDevices__CSensors__CProximitySensor_Windows__CDevices__CSensors__CProximitySensorReadingChangedEventArgsVtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __FITypedEventHandler_2_Windows__CDevices__CSensors__CProximitySensor_Windows__CDevices__CSensors__CProximitySensorReadingChangedEventArgs_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __FITypedEventHandler_2_Windows__CDevices__CSensors__CProximitySensor_Windows__CDevices__CSensors__CProximitySensorReadingChangedEventArgs_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __FITypedEventHandler_2_Windows__CDevices__CSensors__CProximitySensor_Windows__CDevices__CSensors__CProximitySensorReadingChangedEventArgs_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __FITypedEventHandler_2_Windows__CDevices__CSensors__CProximitySensor_Windows__CDevices__CSensors__CProximitySensorReadingChangedEventArgs_Invoke(This, sender, args) \
    ((This)->lpVtbl->Invoke(This, sender, args))

#endif /* COBJMACROS */

#endif // ____FITypedEventHandler_2_Windows__CDevices__CSensors__CProximitySensor_Windows__CDevices__CSensors__CProximitySensorReadingChangedEventArgs_INTERFACE_DEFINED__
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____FITypedEventHandler_2_Windows__CDevices__CSensors__CSimpleOrientationSensor_Windows__CDevices__CSensors__CSimpleOrientationSensorOrientationChangedEventArgs_INTERFACE_DEFINED__)
#define ____FITypedEventHandler_2_Windows__CDevices__CSensors__CSimpleOrientationSensor_Windows__CDevices__CSensors__CSimpleOrientationSensorOrientationChangedEventArgs_INTERFACE_DEFINED__

typedef interface __FITypedEventHandler_2_Windows__CDevices__CSensors__CSimpleOrientationSensor_Windows__CDevices__CSensors__CSimpleOrientationSensorOrientationChangedEventArgs __FITypedEventHandler_2_Windows__CDevices__CSensors__CSimpleOrientationSensor_Windows__CDevices__CSensors__CSimpleOrientationSensorOrientationChangedEventArgs;

//  Declare the parameterized interface IID.
EXTERN_C const IID IID___FITypedEventHandler_2_Windows__CDevices__CSensors__CSimpleOrientationSensor_Windows__CDevices__CSensors__CSimpleOrientationSensorOrientationChangedEventArgs;

typedef struct __FITypedEventHandler_2_Windows__CDevices__CSensors__CSimpleOrientationSensor_Windows__CDevices__CSensors__CSimpleOrientationSensorOrientationChangedEventArgsVtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__FITypedEventHandler_2_Windows__CDevices__CSensors__CSimpleOrientationSensor_Windows__CDevices__CSensors__CSimpleOrientationSensorOrientationChangedEventArgs* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__FITypedEventHandler_2_Windows__CDevices__CSensors__CSimpleOrientationSensor_Windows__CDevices__CSensors__CSimpleOrientationSensorOrientationChangedEventArgs* This);
    ULONG (STDMETHODCALLTYPE* Release)(__FITypedEventHandler_2_Windows__CDevices__CSensors__CSimpleOrientationSensor_Windows__CDevices__CSensors__CSimpleOrientationSensorOrientationChangedEventArgs* This);
    HRESULT (STDMETHODCALLTYPE* Invoke)(__FITypedEventHandler_2_Windows__CDevices__CSensors__CSimpleOrientationSensor_Windows__CDevices__CSensors__CSimpleOrientationSensorOrientationChangedEventArgs* This,
        __x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensor* sender,
        __x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensorOrientationChangedEventArgs* args);

    END_INTERFACE
} __FITypedEventHandler_2_Windows__CDevices__CSensors__CSimpleOrientationSensor_Windows__CDevices__CSensors__CSimpleOrientationSensorOrientationChangedEventArgsVtbl;

interface __FITypedEventHandler_2_Windows__CDevices__CSensors__CSimpleOrientationSensor_Windows__CDevices__CSensors__CSimpleOrientationSensorOrientationChangedEventArgs
{
    CONST_VTBL struct __FITypedEventHandler_2_Windows__CDevices__CSensors__CSimpleOrientationSensor_Windows__CDevices__CSensors__CSimpleOrientationSensorOrientationChangedEventArgsVtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __FITypedEventHandler_2_Windows__CDevices__CSensors__CSimpleOrientationSensor_Windows__CDevices__CSensors__CSimpleOrientationSensorOrientationChangedEventArgs_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __FITypedEventHandler_2_Windows__CDevices__CSensors__CSimpleOrientationSensor_Windows__CDevices__CSensors__CSimpleOrientationSensorOrientationChangedEventArgs_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __FITypedEventHandler_2_Windows__CDevices__CSensors__CSimpleOrientationSensor_Windows__CDevices__CSensors__CSimpleOrientationSensorOrientationChangedEventArgs_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __FITypedEventHandler_2_Windows__CDevices__CSensors__CSimpleOrientationSensor_Windows__CDevices__CSensors__CSimpleOrientationSensorOrientationChangedEventArgs_Invoke(This, sender, args) \
    ((This)->lpVtbl->Invoke(This, sender, args))

#endif /* COBJMACROS */

#endif // ____FITypedEventHandler_2_Windows__CDevices__CSensors__CSimpleOrientationSensor_Windows__CDevices__CSensors__CSimpleOrientationSensorOrientationChangedEventArgs_INTERFACE_DEFINED__
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

typedef struct __x_ABI_CWindows_CFoundation_CDateTime __x_ABI_CWindows_CFoundation_CDateTime;

#ifndef ____x_ABI_CWindows_CFoundation_CIClosable_FWD_DEFINED__
#define ____x_ABI_CWindows_CFoundation_CIClosable_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CFoundation_CIClosable __x_ABI_CWindows_CFoundation_CIClosable;

#endif // ____x_ABI_CWindows_CFoundation_CIClosable_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CFoundation_CIPropertyValue_FWD_DEFINED__
#define ____x_ABI_CWindows_CFoundation_CIPropertyValue_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CFoundation_CIPropertyValue __x_ABI_CWindows_CFoundation_CIPropertyValue;

#endif // ____x_ABI_CWindows_CFoundation_CIPropertyValue_FWD_DEFINED__

typedef enum __x_ABI_CWindows_CGraphics_CDisplay_CDisplayOrientations __x_ABI_CWindows_CGraphics_CDisplay_CDisplayOrientations;

typedef enum __x_ABI_CWindows_CDevices_CSensors_CAccelerometerReadingType __x_ABI_CWindows_CDevices_CSensors_CAccelerometerReadingType;

typedef enum __x_ABI_CWindows_CDevices_CSensors_CActivitySensorReadingConfidence __x_ABI_CWindows_CDevices_CSensors_CActivitySensorReadingConfidence;

typedef enum __x_ABI_CWindows_CDevices_CSensors_CMagnetometerAccuracy __x_ABI_CWindows_CDevices_CSensors_CMagnetometerAccuracy;

typedef enum __x_ABI_CWindows_CDevices_CSensors_CSensorOptimizationGoal __x_ABI_CWindows_CDevices_CSensors_CSensorOptimizationGoal;

typedef enum __x_ABI_CWindows_CDevices_CSensors_CSensorReadingType __x_ABI_CWindows_CDevices_CSensors_CSensorReadingType;

typedef enum __x_ABI_CWindows_CDevices_CSensors_CSensorType __x_ABI_CWindows_CDevices_CSensors_CSensorType;

typedef enum __x_ABI_CWindows_CDevices_CSensors_CSimpleOrientation __x_ABI_CWindows_CDevices_CSensors_CSimpleOrientation;

/*
 *
 * Struct Windows.Devices.Sensors.AccelerometerReadingType
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 3.0
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x30000
enum __x_ABI_CWindows_CDevices_CSensors_CAccelerometerReadingType
{
    AccelerometerReadingType_Standard = 0,
    AccelerometerReadingType_Linear = 1,
    AccelerometerReadingType_Gravity = 2,
};
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x30000

/*
 *
 * Struct Windows.Devices.Sensors.ActivitySensorReadingConfidence
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
enum __x_ABI_CWindows_CDevices_CSensors_CActivitySensorReadingConfidence
{
    ActivitySensorReadingConfidence_High = 0,
    ActivitySensorReadingConfidence_Low = 1,
};
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Struct Windows.Devices.Sensors.ActivityType
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
enum __x_ABI_CWindows_CDevices_CSensors_CActivityType
{
    ActivityType_Unknown = 0,
    ActivityType_Idle = 1,
    ActivityType_Stationary = 2,
    ActivityType_Fidgeting = 3,
    ActivityType_Walking = 4,
    ActivityType_Running = 5,
    ActivityType_InVehicle = 6,
    ActivityType_Biking = 7,
};
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Struct Windows.Devices.Sensors.MagnetometerAccuracy
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
enum __x_ABI_CWindows_CDevices_CSensors_CMagnetometerAccuracy
{
    MagnetometerAccuracy_Unknown = 0,
    MagnetometerAccuracy_Unreliable = 1,
    MagnetometerAccuracy_Approximate = 2,
    MagnetometerAccuracy_High = 3,
};
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Struct Windows.Devices.Sensors.PedometerStepKind
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
enum __x_ABI_CWindows_CDevices_CSensors_CPedometerStepKind
{
    PedometerStepKind_Unknown = 0,
    PedometerStepKind_Walking = 1,
    PedometerStepKind_Running = 2,
};
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Struct Windows.Devices.Sensors.SensorOptimizationGoal
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 3.0
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x30000
enum __x_ABI_CWindows_CDevices_CSensors_CSensorOptimizationGoal
{
    SensorOptimizationGoal_Precision = 0,
    SensorOptimizationGoal_PowerEfficiency = 1,
};
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x30000

/*
 *
 * Struct Windows.Devices.Sensors.SensorReadingType
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
enum __x_ABI_CWindows_CDevices_CSensors_CSensorReadingType
{
    SensorReadingType_Absolute = 0,
    SensorReadingType_Relative = 1,
};
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Struct Windows.Devices.Sensors.SensorType
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 2.0
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x20000
enum __x_ABI_CWindows_CDevices_CSensors_CSensorType
{
    SensorType_Accelerometer = 0,
    SensorType_ActivitySensor = 1,
    SensorType_Barometer = 2,
    SensorType_Compass = 3,
    SensorType_CustomSensor = 4,
    SensorType_Gyroscope = 5,
    SensorType_ProximitySensor = 6,
    SensorType_Inclinometer = 7,
    SensorType_LightSensor = 8,
    SensorType_OrientationSensor = 9,
    SensorType_Pedometer = 10,
    SensorType_RelativeInclinometer = 11,
    SensorType_RelativeOrientationSensor = 12,
    SensorType_SimpleOrientationSensor = 13,
};
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x20000

/*
 *
 * Struct Windows.Devices.Sensors.SimpleOrientation
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
enum __x_ABI_CWindows_CDevices_CSensors_CSimpleOrientation
{
    SimpleOrientation_NotRotated = 0,
    SimpleOrientation_Rotated90DegreesCounterclockwise = 1,
    SimpleOrientation_Rotated180DegreesCounterclockwise = 2,
    SimpleOrientation_Rotated270DegreesCounterclockwise = 3,
    SimpleOrientation_Faceup = 4,
    SimpleOrientation_Facedown = 5,
};
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Interface Windows.Devices.Sensors.IAccelerometer
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Interface is a part of the implementation of type Windows.Devices.Sensors.Accelerometer
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____x_ABI_CWindows_CDevices_CSensors_CIAccelerometer_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CDevices_CSensors_CIAccelerometer_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Devices_Sensors_IAccelerometer[] = L"Windows.Devices.Sensors.IAccelerometer";
typedef struct __x_ABI_CWindows_CDevices_CSensors_CIAccelerometerVtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CDevices_CSensors_CIAccelerometer* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CDevices_CSensors_CIAccelerometer* This);
    ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CDevices_CSensors_CIAccelerometer* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CDevices_CSensors_CIAccelerometer* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CDevices_CSensors_CIAccelerometer* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CDevices_CSensors_CIAccelerometer* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* GetCurrentReading)(__x_ABI_CWindows_CDevices_CSensors_CIAccelerometer* This,
        __x_ABI_CWindows_CDevices_CSensors_CIAccelerometerReading** value);
    HRESULT (STDMETHODCALLTYPE* get_MinimumReportInterval)(__x_ABI_CWindows_CDevices_CSensors_CIAccelerometer* This,
        UINT32* value);
    HRESULT (STDMETHODCALLTYPE* put_ReportInterval)(__x_ABI_CWindows_CDevices_CSensors_CIAccelerometer* This,
        UINT32 value);
    HRESULT (STDMETHODCALLTYPE* get_ReportInterval)(__x_ABI_CWindows_CDevices_CSensors_CIAccelerometer* This,
        UINT32* value);
    HRESULT (STDMETHODCALLTYPE* add_ReadingChanged)(__x_ABI_CWindows_CDevices_CSensors_CIAccelerometer* This,
        __FITypedEventHandler_2_Windows__CDevices__CSensors__CAccelerometer_Windows__CDevices__CSensors__CAccelerometerReadingChangedEventArgs* handler,
        EventRegistrationToken* token);
    HRESULT (STDMETHODCALLTYPE* remove_ReadingChanged)(__x_ABI_CWindows_CDevices_CSensors_CIAccelerometer* This,
        EventRegistrationToken token);
    HRESULT (STDMETHODCALLTYPE* add_Shaken)(__x_ABI_CWindows_CDevices_CSensors_CIAccelerometer* This,
        __FITypedEventHandler_2_Windows__CDevices__CSensors__CAccelerometer_Windows__CDevices__CSensors__CAccelerometerShakenEventArgs* handler,
        EventRegistrationToken* token);
    HRESULT (STDMETHODCALLTYPE* remove_Shaken)(__x_ABI_CWindows_CDevices_CSensors_CIAccelerometer* This,
        EventRegistrationToken token);

    END_INTERFACE
} __x_ABI_CWindows_CDevices_CSensors_CIAccelerometerVtbl;

interface __x_ABI_CWindows_CDevices_CSensors_CIAccelerometer
{
    CONST_VTBL struct __x_ABI_CWindows_CDevices_CSensors_CIAccelerometerVtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __x_ABI_CWindows_CDevices_CSensors_CIAccelerometer_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __x_ABI_CWindows_CDevices_CSensors_CIAccelerometer_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __x_ABI_CWindows_CDevices_CSensors_CIAccelerometer_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __x_ABI_CWindows_CDevices_CSensors_CIAccelerometer_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __x_ABI_CWindows_CDevices_CSensors_CIAccelerometer_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __x_ABI_CWindows_CDevices_CSensors_CIAccelerometer_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __x_ABI_CWindows_CDevices_CSensors_CIAccelerometer_GetCurrentReading(This, value) \
    ((This)->lpVtbl->GetCurrentReading(This, value))

#define __x_ABI_CWindows_CDevices_CSensors_CIAccelerometer_get_MinimumReportInterval(This, value) \
    ((This)->lpVtbl->get_MinimumReportInterval(This, value))

#define __x_ABI_CWindows_CDevices_CSensors_CIAccelerometer_put_ReportInterval(This, value) \
    ((This)->lpVtbl->put_ReportInterval(This, value))

#define __x_ABI_CWindows_CDevices_CSensors_CIAccelerometer_get_ReportInterval(This, value) \
    ((This)->lpVtbl->get_ReportInterval(This, value))

#define __x_ABI_CWindows_CDevices_CSensors_CIAccelerometer_add_ReadingChanged(This, handler, token) \
    ((This)->lpVtbl->add_ReadingChanged(This, handler, token))

#define __x_ABI_CWindows_CDevices_CSensors_CIAccelerometer_remove_ReadingChanged(This, token) \
    ((This)->lpVtbl->remove_ReadingChanged(This, token))

#define __x_ABI_CWindows_CDevices_CSensors_CIAccelerometer_add_Shaken(This, handler, token) \
    ((This)->lpVtbl->add_Shaken(This, handler, token))

#define __x_ABI_CWindows_CDevices_CSensors_CIAccelerometer_remove_Shaken(This, token) \
    ((This)->lpVtbl->remove_Shaken(This, token))

#endif /* COBJMACROS */

EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CSensors_CIAccelerometer;
#endif /* !defined(____x_ABI_CWindows_CDevices_CSensors_CIAccelerometer_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Interface Windows.Devices.Sensors.IAccelerometer2
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Interface is a part of the implementation of type Windows.Devices.Sensors.Accelerometer
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____x_ABI_CWindows_CDevices_CSensors_CIAccelerometer2_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CDevices_CSensors_CIAccelerometer2_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Devices_Sensors_IAccelerometer2[] = L"Windows.Devices.Sensors.IAccelerometer2";
typedef struct __x_ABI_CWindows_CDevices_CSensors_CIAccelerometer2Vtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CDevices_CSensors_CIAccelerometer2* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CDevices_CSensors_CIAccelerometer2* This);
    ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CDevices_CSensors_CIAccelerometer2* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CDevices_CSensors_CIAccelerometer2* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CDevices_CSensors_CIAccelerometer2* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CDevices_CSensors_CIAccelerometer2* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* put_ReadingTransform)(__x_ABI_CWindows_CDevices_CSensors_CIAccelerometer2* This,
        enum __x_ABI_CWindows_CGraphics_CDisplay_CDisplayOrientations value);
    HRESULT (STDMETHODCALLTYPE* get_ReadingTransform)(__x_ABI_CWindows_CDevices_CSensors_CIAccelerometer2* This,
        enum __x_ABI_CWindows_CGraphics_CDisplay_CDisplayOrientations* value);

    END_INTERFACE
} __x_ABI_CWindows_CDevices_CSensors_CIAccelerometer2Vtbl;

interface __x_ABI_CWindows_CDevices_CSensors_CIAccelerometer2
{
    CONST_VTBL struct __x_ABI_CWindows_CDevices_CSensors_CIAccelerometer2Vtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __x_ABI_CWindows_CDevices_CSensors_CIAccelerometer2_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __x_ABI_CWindows_CDevices_CSensors_CIAccelerometer2_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __x_ABI_CWindows_CDevices_CSensors_CIAccelerometer2_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __x_ABI_CWindows_CDevices_CSensors_CIAccelerometer2_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __x_ABI_CWindows_CDevices_CSensors_CIAccelerometer2_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __x_ABI_CWindows_CDevices_CSensors_CIAccelerometer2_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __x_ABI_CWindows_CDevices_CSensors_CIAccelerometer2_put_ReadingTransform(This, value) \
    ((This)->lpVtbl->put_ReadingTransform(This, value))

#define __x_ABI_CWindows_CDevices_CSensors_CIAccelerometer2_get_ReadingTransform(This, value) \
    ((This)->lpVtbl->get_ReadingTransform(This, value))

#endif /* COBJMACROS */

EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CSensors_CIAccelerometer2;
#endif /* !defined(____x_ABI_CWindows_CDevices_CSensors_CIAccelerometer2_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Interface Windows.Devices.Sensors.IAccelerometer3
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Interface is a part of the implementation of type Windows.Devices.Sensors.Accelerometer
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____x_ABI_CWindows_CDevices_CSensors_CIAccelerometer3_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CDevices_CSensors_CIAccelerometer3_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Devices_Sensors_IAccelerometer3[] = L"Windows.Devices.Sensors.IAccelerometer3";
typedef struct __x_ABI_CWindows_CDevices_CSensors_CIAccelerometer3Vtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CDevices_CSensors_CIAccelerometer3* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CDevices_CSensors_CIAccelerometer3* This);
    ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CDevices_CSensors_CIAccelerometer3* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CDevices_CSensors_CIAccelerometer3* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CDevices_CSensors_CIAccelerometer3* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CDevices_CSensors_CIAccelerometer3* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* put_ReportLatency)(__x_ABI_CWindows_CDevices_CSensors_CIAccelerometer3* This,
        UINT32 value);
    HRESULT (STDMETHODCALLTYPE* get_ReportLatency)(__x_ABI_CWindows_CDevices_CSensors_CIAccelerometer3* This,
        UINT32* value);
    HRESULT (STDMETHODCALLTYPE* get_MaxBatchSize)(__x_ABI_CWindows_CDevices_CSensors_CIAccelerometer3* This,
        UINT32* value);

    END_INTERFACE
} __x_ABI_CWindows_CDevices_CSensors_CIAccelerometer3Vtbl;

interface __x_ABI_CWindows_CDevices_CSensors_CIAccelerometer3
{
    CONST_VTBL struct __x_ABI_CWindows_CDevices_CSensors_CIAccelerometer3Vtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __x_ABI_CWindows_CDevices_CSensors_CIAccelerometer3_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __x_ABI_CWindows_CDevices_CSensors_CIAccelerometer3_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __x_ABI_CWindows_CDevices_CSensors_CIAccelerometer3_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __x_ABI_CWindows_CDevices_CSensors_CIAccelerometer3_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __x_ABI_CWindows_CDevices_CSensors_CIAccelerometer3_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __x_ABI_CWindows_CDevices_CSensors_CIAccelerometer3_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __x_ABI_CWindows_CDevices_CSensors_CIAccelerometer3_put_ReportLatency(This, value) \
    ((This)->lpVtbl->put_ReportLatency(This, value))

#define __x_ABI_CWindows_CDevices_CSensors_CIAccelerometer3_get_ReportLatency(This, value) \
    ((This)->lpVtbl->get_ReportLatency(This, value))

#define __x_ABI_CWindows_CDevices_CSensors_CIAccelerometer3_get_MaxBatchSize(This, value) \
    ((This)->lpVtbl->get_MaxBatchSize(This, value))

#endif /* COBJMACROS */

EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CSensors_CIAccelerometer3;
#endif /* !defined(____x_ABI_CWindows_CDevices_CSensors_CIAccelerometer3_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Interface Windows.Devices.Sensors.IAccelerometer4
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 3.0
 *
 * Interface is a part of the implementation of type Windows.Devices.Sensors.Accelerometer
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x30000
#if !defined(____x_ABI_CWindows_CDevices_CSensors_CIAccelerometer4_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CDevices_CSensors_CIAccelerometer4_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Devices_Sensors_IAccelerometer4[] = L"Windows.Devices.Sensors.IAccelerometer4";
typedef struct __x_ABI_CWindows_CDevices_CSensors_CIAccelerometer4Vtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CDevices_CSensors_CIAccelerometer4* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CDevices_CSensors_CIAccelerometer4* This);
    ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CDevices_CSensors_CIAccelerometer4* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CDevices_CSensors_CIAccelerometer4* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CDevices_CSensors_CIAccelerometer4* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CDevices_CSensors_CIAccelerometer4* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* get_ReadingType)(__x_ABI_CWindows_CDevices_CSensors_CIAccelerometer4* This,
        enum __x_ABI_CWindows_CDevices_CSensors_CAccelerometerReadingType* type);

    END_INTERFACE
} __x_ABI_CWindows_CDevices_CSensors_CIAccelerometer4Vtbl;

interface __x_ABI_CWindows_CDevices_CSensors_CIAccelerometer4
{
    CONST_VTBL struct __x_ABI_CWindows_CDevices_CSensors_CIAccelerometer4Vtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __x_ABI_CWindows_CDevices_CSensors_CIAccelerometer4_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __x_ABI_CWindows_CDevices_CSensors_CIAccelerometer4_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __x_ABI_CWindows_CDevices_CSensors_CIAccelerometer4_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __x_ABI_CWindows_CDevices_CSensors_CIAccelerometer4_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __x_ABI_CWindows_CDevices_CSensors_CIAccelerometer4_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __x_ABI_CWindows_CDevices_CSensors_CIAccelerometer4_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __x_ABI_CWindows_CDevices_CSensors_CIAccelerometer4_get_ReadingType(This, type) \
    ((This)->lpVtbl->get_ReadingType(This, type))

#endif /* COBJMACROS */

EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CSensors_CIAccelerometer4;
#endif /* !defined(____x_ABI_CWindows_CDevices_CSensors_CIAccelerometer4_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x30000

/*
 *
 * Interface Windows.Devices.Sensors.IAccelerometer5
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 10.0
 *
 * Interface is a part of the implementation of type Windows.Devices.Sensors.Accelerometer
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0xa0000
#if !defined(____x_ABI_CWindows_CDevices_CSensors_CIAccelerometer5_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CDevices_CSensors_CIAccelerometer5_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Devices_Sensors_IAccelerometer5[] = L"Windows.Devices.Sensors.IAccelerometer5";
typedef struct __x_ABI_CWindows_CDevices_CSensors_CIAccelerometer5Vtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CDevices_CSensors_CIAccelerometer5* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CDevices_CSensors_CIAccelerometer5* This);
    ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CDevices_CSensors_CIAccelerometer5* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CDevices_CSensors_CIAccelerometer5* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CDevices_CSensors_CIAccelerometer5* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CDevices_CSensors_CIAccelerometer5* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* get_ReportThreshold)(__x_ABI_CWindows_CDevices_CSensors_CIAccelerometer5* This,
        __x_ABI_CWindows_CDevices_CSensors_CIAccelerometerDataThreshold** value);

    END_INTERFACE
} __x_ABI_CWindows_CDevices_CSensors_CIAccelerometer5Vtbl;

interface __x_ABI_CWindows_CDevices_CSensors_CIAccelerometer5
{
    CONST_VTBL struct __x_ABI_CWindows_CDevices_CSensors_CIAccelerometer5Vtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __x_ABI_CWindows_CDevices_CSensors_CIAccelerometer5_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __x_ABI_CWindows_CDevices_CSensors_CIAccelerometer5_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __x_ABI_CWindows_CDevices_CSensors_CIAccelerometer5_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __x_ABI_CWindows_CDevices_CSensors_CIAccelerometer5_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __x_ABI_CWindows_CDevices_CSensors_CIAccelerometer5_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __x_ABI_CWindows_CDevices_CSensors_CIAccelerometer5_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __x_ABI_CWindows_CDevices_CSensors_CIAccelerometer5_get_ReportThreshold(This, value) \
    ((This)->lpVtbl->get_ReportThreshold(This, value))

#endif /* COBJMACROS */

EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CSensors_CIAccelerometer5;
#endif /* !defined(____x_ABI_CWindows_CDevices_CSensors_CIAccelerometer5_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0xa0000

/*
 *
 * Interface Windows.Devices.Sensors.IAccelerometerDataThreshold
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 10.0
 *
 * Interface is a part of the implementation of type Windows.Devices.Sensors.AccelerometerDataThreshold
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0xa0000
#if !defined(____x_ABI_CWindows_CDevices_CSensors_CIAccelerometerDataThreshold_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CDevices_CSensors_CIAccelerometerDataThreshold_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Devices_Sensors_IAccelerometerDataThreshold[] = L"Windows.Devices.Sensors.IAccelerometerDataThreshold";
typedef struct __x_ABI_CWindows_CDevices_CSensors_CIAccelerometerDataThresholdVtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CDevices_CSensors_CIAccelerometerDataThreshold* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CDevices_CSensors_CIAccelerometerDataThreshold* This);
    ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CDevices_CSensors_CIAccelerometerDataThreshold* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CDevices_CSensors_CIAccelerometerDataThreshold* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CDevices_CSensors_CIAccelerometerDataThreshold* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CDevices_CSensors_CIAccelerometerDataThreshold* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* get_XAxisInGForce)(__x_ABI_CWindows_CDevices_CSensors_CIAccelerometerDataThreshold* This,
        DOUBLE* value);
    HRESULT (STDMETHODCALLTYPE* put_XAxisInGForce)(__x_ABI_CWindows_CDevices_CSensors_CIAccelerometerDataThreshold* This,
        DOUBLE value);
    HRESULT (STDMETHODCALLTYPE* get_YAxisInGForce)(__x_ABI_CWindows_CDevices_CSensors_CIAccelerometerDataThreshold* This,
        DOUBLE* value);
    HRESULT (STDMETHODCALLTYPE* put_YAxisInGForce)(__x_ABI_CWindows_CDevices_CSensors_CIAccelerometerDataThreshold* This,
        DOUBLE value);
    HRESULT (STDMETHODCALLTYPE* get_ZAxisInGForce)(__x_ABI_CWindows_CDevices_CSensors_CIAccelerometerDataThreshold* This,
        DOUBLE* value);
    HRESULT (STDMETHODCALLTYPE* put_ZAxisInGForce)(__x_ABI_CWindows_CDevices_CSensors_CIAccelerometerDataThreshold* This,
        DOUBLE value);

    END_INTERFACE
} __x_ABI_CWindows_CDevices_CSensors_CIAccelerometerDataThresholdVtbl;

interface __x_ABI_CWindows_CDevices_CSensors_CIAccelerometerDataThreshold
{
    CONST_VTBL struct __x_ABI_CWindows_CDevices_CSensors_CIAccelerometerDataThresholdVtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __x_ABI_CWindows_CDevices_CSensors_CIAccelerometerDataThreshold_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __x_ABI_CWindows_CDevices_CSensors_CIAccelerometerDataThreshold_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __x_ABI_CWindows_CDevices_CSensors_CIAccelerometerDataThreshold_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __x_ABI_CWindows_CDevices_CSensors_CIAccelerometerDataThreshold_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __x_ABI_CWindows_CDevices_CSensors_CIAccelerometerDataThreshold_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __x_ABI_CWindows_CDevices_CSensors_CIAccelerometerDataThreshold_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __x_ABI_CWindows_CDevices_CSensors_CIAccelerometerDataThreshold_get_XAxisInGForce(This, value) \
    ((This)->lpVtbl->get_XAxisInGForce(This, value))

#define __x_ABI_CWindows_CDevices_CSensors_CIAccelerometerDataThreshold_put_XAxisInGForce(This, value) \
    ((This)->lpVtbl->put_XAxisInGForce(This, value))

#define __x_ABI_CWindows_CDevices_CSensors_CIAccelerometerDataThreshold_get_YAxisInGForce(This, value) \
    ((This)->lpVtbl->get_YAxisInGForce(This, value))

#define __x_ABI_CWindows_CDevices_CSensors_CIAccelerometerDataThreshold_put_YAxisInGForce(This, value) \
    ((This)->lpVtbl->put_YAxisInGForce(This, value))

#define __x_ABI_CWindows_CDevices_CSensors_CIAccelerometerDataThreshold_get_ZAxisInGForce(This, value) \
    ((This)->lpVtbl->get_ZAxisInGForce(This, value))

#define __x_ABI_CWindows_CDevices_CSensors_CIAccelerometerDataThreshold_put_ZAxisInGForce(This, value) \
    ((This)->lpVtbl->put_ZAxisInGForce(This, value))

#endif /* COBJMACROS */

EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CSensors_CIAccelerometerDataThreshold;
#endif /* !defined(____x_ABI_CWindows_CDevices_CSensors_CIAccelerometerDataThreshold_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0xa0000

/*
 *
 * Interface Windows.Devices.Sensors.IAccelerometerDeviceId
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Interface is a part of the implementation of type Windows.Devices.Sensors.Accelerometer
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____x_ABI_CWindows_CDevices_CSensors_CIAccelerometerDeviceId_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CDevices_CSensors_CIAccelerometerDeviceId_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Devices_Sensors_IAccelerometerDeviceId[] = L"Windows.Devices.Sensors.IAccelerometerDeviceId";
typedef struct __x_ABI_CWindows_CDevices_CSensors_CIAccelerometerDeviceIdVtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CDevices_CSensors_CIAccelerometerDeviceId* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CDevices_CSensors_CIAccelerometerDeviceId* This);
    ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CDevices_CSensors_CIAccelerometerDeviceId* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CDevices_CSensors_CIAccelerometerDeviceId* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CDevices_CSensors_CIAccelerometerDeviceId* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CDevices_CSensors_CIAccelerometerDeviceId* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* get_DeviceId)(__x_ABI_CWindows_CDevices_CSensors_CIAccelerometerDeviceId* This,
        HSTRING* value);

    END_INTERFACE
} __x_ABI_CWindows_CDevices_CSensors_CIAccelerometerDeviceIdVtbl;

interface __x_ABI_CWindows_CDevices_CSensors_CIAccelerometerDeviceId
{
    CONST_VTBL struct __x_ABI_CWindows_CDevices_CSensors_CIAccelerometerDeviceIdVtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __x_ABI_CWindows_CDevices_CSensors_CIAccelerometerDeviceId_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __x_ABI_CWindows_CDevices_CSensors_CIAccelerometerDeviceId_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __x_ABI_CWindows_CDevices_CSensors_CIAccelerometerDeviceId_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __x_ABI_CWindows_CDevices_CSensors_CIAccelerometerDeviceId_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __x_ABI_CWindows_CDevices_CSensors_CIAccelerometerDeviceId_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __x_ABI_CWindows_CDevices_CSensors_CIAccelerometerDeviceId_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __x_ABI_CWindows_CDevices_CSensors_CIAccelerometerDeviceId_get_DeviceId(This, value) \
    ((This)->lpVtbl->get_DeviceId(This, value))

#endif /* COBJMACROS */

EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CSensors_CIAccelerometerDeviceId;
#endif /* !defined(____x_ABI_CWindows_CDevices_CSensors_CIAccelerometerDeviceId_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Interface Windows.Devices.Sensors.IAccelerometerReading
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Interface is a part of the implementation of type Windows.Devices.Sensors.AccelerometerReading
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____x_ABI_CWindows_CDevices_CSensors_CIAccelerometerReading_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CDevices_CSensors_CIAccelerometerReading_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Devices_Sensors_IAccelerometerReading[] = L"Windows.Devices.Sensors.IAccelerometerReading";
typedef struct __x_ABI_CWindows_CDevices_CSensors_CIAccelerometerReadingVtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CDevices_CSensors_CIAccelerometerReading* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CDevices_CSensors_CIAccelerometerReading* This);
    ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CDevices_CSensors_CIAccelerometerReading* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CDevices_CSensors_CIAccelerometerReading* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CDevices_CSensors_CIAccelerometerReading* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CDevices_CSensors_CIAccelerometerReading* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* get_Timestamp)(__x_ABI_CWindows_CDevices_CSensors_CIAccelerometerReading* This,
        struct __x_ABI_CWindows_CFoundation_CDateTime* value);
    HRESULT (STDMETHODCALLTYPE* get_AccelerationX)(__x_ABI_CWindows_CDevices_CSensors_CIAccelerometerReading* This,
        DOUBLE* value);
    HRESULT (STDMETHODCALLTYPE* get_AccelerationY)(__x_ABI_CWindows_CDevices_CSensors_CIAccelerometerReading* This,
        DOUBLE* value);
    HRESULT (STDMETHODCALLTYPE* get_AccelerationZ)(__x_ABI_CWindows_CDevices_CSensors_CIAccelerometerReading* This,
        DOUBLE* value);

    END_INTERFACE
} __x_ABI_CWindows_CDevices_CSensors_CIAccelerometerReadingVtbl;

interface __x_ABI_CWindows_CDevices_CSensors_CIAccelerometerReading
{
    CONST_VTBL struct __x_ABI_CWindows_CDevices_CSensors_CIAccelerometerReadingVtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __x_ABI_CWindows_CDevices_CSensors_CIAccelerometerReading_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __x_ABI_CWindows_CDevices_CSensors_CIAccelerometerReading_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __x_ABI_CWindows_CDevices_CSensors_CIAccelerometerReading_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __x_ABI_CWindows_CDevices_CSensors_CIAccelerometerReading_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __x_ABI_CWindows_CDevices_CSensors_CIAccelerometerReading_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __x_ABI_CWindows_CDevices_CSensors_CIAccelerometerReading_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __x_ABI_CWindows_CDevices_CSensors_CIAccelerometerReading_get_Timestamp(This, value) \
    ((This)->lpVtbl->get_Timestamp(This, value))

#define __x_ABI_CWindows_CDevices_CSensors_CIAccelerometerReading_get_AccelerationX(This, value) \
    ((This)->lpVtbl->get_AccelerationX(This, value))

#define __x_ABI_CWindows_CDevices_CSensors_CIAccelerometerReading_get_AccelerationY(This, value) \
    ((This)->lpVtbl->get_AccelerationY(This, value))

#define __x_ABI_CWindows_CDevices_CSensors_CIAccelerometerReading_get_AccelerationZ(This, value) \
    ((This)->lpVtbl->get_AccelerationZ(This, value))

#endif /* COBJMACROS */

EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CSensors_CIAccelerometerReading;
#endif /* !defined(____x_ABI_CWindows_CDevices_CSensors_CIAccelerometerReading_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Interface Windows.Devices.Sensors.IAccelerometerReading2
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 5.0
 *
 * Interface is a part of the implementation of type Windows.Devices.Sensors.AccelerometerReading
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x50000
#if !defined(____x_ABI_CWindows_CDevices_CSensors_CIAccelerometerReading2_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CDevices_CSensors_CIAccelerometerReading2_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Devices_Sensors_IAccelerometerReading2[] = L"Windows.Devices.Sensors.IAccelerometerReading2";
typedef struct __x_ABI_CWindows_CDevices_CSensors_CIAccelerometerReading2Vtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CDevices_CSensors_CIAccelerometerReading2* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CDevices_CSensors_CIAccelerometerReading2* This);
    ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CDevices_CSensors_CIAccelerometerReading2* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CDevices_CSensors_CIAccelerometerReading2* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CDevices_CSensors_CIAccelerometerReading2* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CDevices_CSensors_CIAccelerometerReading2* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* get_PerformanceCount)(__x_ABI_CWindows_CDevices_CSensors_CIAccelerometerReading2* This,
        __FIReference_1_Windows__CFoundation__CTimeSpan** value);
    HRESULT (STDMETHODCALLTYPE* get_Properties)(__x_ABI_CWindows_CDevices_CSensors_CIAccelerometerReading2* This,
        __FIMapView_2_HSTRING_IInspectable** value);

    END_INTERFACE
} __x_ABI_CWindows_CDevices_CSensors_CIAccelerometerReading2Vtbl;

interface __x_ABI_CWindows_CDevices_CSensors_CIAccelerometerReading2
{
    CONST_VTBL struct __x_ABI_CWindows_CDevices_CSensors_CIAccelerometerReading2Vtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __x_ABI_CWindows_CDevices_CSensors_CIAccelerometerReading2_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __x_ABI_CWindows_CDevices_CSensors_CIAccelerometerReading2_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __x_ABI_CWindows_CDevices_CSensors_CIAccelerometerReading2_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __x_ABI_CWindows_CDevices_CSensors_CIAccelerometerReading2_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __x_ABI_CWindows_CDevices_CSensors_CIAccelerometerReading2_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __x_ABI_CWindows_CDevices_CSensors_CIAccelerometerReading2_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __x_ABI_CWindows_CDevices_CSensors_CIAccelerometerReading2_get_PerformanceCount(This, value) \
    ((This)->lpVtbl->get_PerformanceCount(This, value))

#define __x_ABI_CWindows_CDevices_CSensors_CIAccelerometerReading2_get_Properties(This, value) \
    ((This)->lpVtbl->get_Properties(This, value))

#endif /* COBJMACROS */

EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CSensors_CIAccelerometerReading2;
#endif /* !defined(____x_ABI_CWindows_CDevices_CSensors_CIAccelerometerReading2_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x50000

/*
 *
 * Interface Windows.Devices.Sensors.IAccelerometerReadingChangedEventArgs
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Interface is a part of the implementation of type Windows.Devices.Sensors.AccelerometerReadingChangedEventArgs
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____x_ABI_CWindows_CDevices_CSensors_CIAccelerometerReadingChangedEventArgs_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CDevices_CSensors_CIAccelerometerReadingChangedEventArgs_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Devices_Sensors_IAccelerometerReadingChangedEventArgs[] = L"Windows.Devices.Sensors.IAccelerometerReadingChangedEventArgs";
typedef struct __x_ABI_CWindows_CDevices_CSensors_CIAccelerometerReadingChangedEventArgsVtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CDevices_CSensors_CIAccelerometerReadingChangedEventArgs* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CDevices_CSensors_CIAccelerometerReadingChangedEventArgs* This);
    ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CDevices_CSensors_CIAccelerometerReadingChangedEventArgs* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CDevices_CSensors_CIAccelerometerReadingChangedEventArgs* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CDevices_CSensors_CIAccelerometerReadingChangedEventArgs* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CDevices_CSensors_CIAccelerometerReadingChangedEventArgs* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* get_Reading)(__x_ABI_CWindows_CDevices_CSensors_CIAccelerometerReadingChangedEventArgs* This,
        __x_ABI_CWindows_CDevices_CSensors_CIAccelerometerReading** value);

    END_INTERFACE
} __x_ABI_CWindows_CDevices_CSensors_CIAccelerometerReadingChangedEventArgsVtbl;

interface __x_ABI_CWindows_CDevices_CSensors_CIAccelerometerReadingChangedEventArgs
{
    CONST_VTBL struct __x_ABI_CWindows_CDevices_CSensors_CIAccelerometerReadingChangedEventArgsVtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __x_ABI_CWindows_CDevices_CSensors_CIAccelerometerReadingChangedEventArgs_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __x_ABI_CWindows_CDevices_CSensors_CIAccelerometerReadingChangedEventArgs_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __x_ABI_CWindows_CDevices_CSensors_CIAccelerometerReadingChangedEventArgs_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __x_ABI_CWindows_CDevices_CSensors_CIAccelerometerReadingChangedEventArgs_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __x_ABI_CWindows_CDevices_CSensors_CIAccelerometerReadingChangedEventArgs_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __x_ABI_CWindows_CDevices_CSensors_CIAccelerometerReadingChangedEventArgs_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __x_ABI_CWindows_CDevices_CSensors_CIAccelerometerReadingChangedEventArgs_get_Reading(This, value) \
    ((This)->lpVtbl->get_Reading(This, value))

#endif /* COBJMACROS */

EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CSensors_CIAccelerometerReadingChangedEventArgs;
#endif /* !defined(____x_ABI_CWindows_CDevices_CSensors_CIAccelerometerReadingChangedEventArgs_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Interface Windows.Devices.Sensors.IAccelerometerShakenEventArgs
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Interface is a part of the implementation of type Windows.Devices.Sensors.AccelerometerShakenEventArgs
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____x_ABI_CWindows_CDevices_CSensors_CIAccelerometerShakenEventArgs_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CDevices_CSensors_CIAccelerometerShakenEventArgs_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Devices_Sensors_IAccelerometerShakenEventArgs[] = L"Windows.Devices.Sensors.IAccelerometerShakenEventArgs";
typedef struct __x_ABI_CWindows_CDevices_CSensors_CIAccelerometerShakenEventArgsVtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CDevices_CSensors_CIAccelerometerShakenEventArgs* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CDevices_CSensors_CIAccelerometerShakenEventArgs* This);
    ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CDevices_CSensors_CIAccelerometerShakenEventArgs* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CDevices_CSensors_CIAccelerometerShakenEventArgs* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CDevices_CSensors_CIAccelerometerShakenEventArgs* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CDevices_CSensors_CIAccelerometerShakenEventArgs* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* get_Timestamp)(__x_ABI_CWindows_CDevices_CSensors_CIAccelerometerShakenEventArgs* This,
        struct __x_ABI_CWindows_CFoundation_CDateTime* value);

    END_INTERFACE
} __x_ABI_CWindows_CDevices_CSensors_CIAccelerometerShakenEventArgsVtbl;

interface __x_ABI_CWindows_CDevices_CSensors_CIAccelerometerShakenEventArgs
{
    CONST_VTBL struct __x_ABI_CWindows_CDevices_CSensors_CIAccelerometerShakenEventArgsVtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __x_ABI_CWindows_CDevices_CSensors_CIAccelerometerShakenEventArgs_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __x_ABI_CWindows_CDevices_CSensors_CIAccelerometerShakenEventArgs_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __x_ABI_CWindows_CDevices_CSensors_CIAccelerometerShakenEventArgs_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __x_ABI_CWindows_CDevices_CSensors_CIAccelerometerShakenEventArgs_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __x_ABI_CWindows_CDevices_CSensors_CIAccelerometerShakenEventArgs_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __x_ABI_CWindows_CDevices_CSensors_CIAccelerometerShakenEventArgs_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __x_ABI_CWindows_CDevices_CSensors_CIAccelerometerShakenEventArgs_get_Timestamp(This, value) \
    ((This)->lpVtbl->get_Timestamp(This, value))

#endif /* COBJMACROS */

EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CSensors_CIAccelerometerShakenEventArgs;
#endif /* !defined(____x_ABI_CWindows_CDevices_CSensors_CIAccelerometerShakenEventArgs_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Interface Windows.Devices.Sensors.IAccelerometerStatics
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Interface is a part of the implementation of type Windows.Devices.Sensors.Accelerometer
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____x_ABI_CWindows_CDevices_CSensors_CIAccelerometerStatics_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CDevices_CSensors_CIAccelerometerStatics_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Devices_Sensors_IAccelerometerStatics[] = L"Windows.Devices.Sensors.IAccelerometerStatics";
typedef struct __x_ABI_CWindows_CDevices_CSensors_CIAccelerometerStaticsVtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CDevices_CSensors_CIAccelerometerStatics* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CDevices_CSensors_CIAccelerometerStatics* This);
    ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CDevices_CSensors_CIAccelerometerStatics* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CDevices_CSensors_CIAccelerometerStatics* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CDevices_CSensors_CIAccelerometerStatics* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CDevices_CSensors_CIAccelerometerStatics* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* GetDefault)(__x_ABI_CWindows_CDevices_CSensors_CIAccelerometerStatics* This,
        __x_ABI_CWindows_CDevices_CSensors_CIAccelerometer** result);

    END_INTERFACE
} __x_ABI_CWindows_CDevices_CSensors_CIAccelerometerStaticsVtbl;

interface __x_ABI_CWindows_CDevices_CSensors_CIAccelerometerStatics
{
    CONST_VTBL struct __x_ABI_CWindows_CDevices_CSensors_CIAccelerometerStaticsVtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __x_ABI_CWindows_CDevices_CSensors_CIAccelerometerStatics_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __x_ABI_CWindows_CDevices_CSensors_CIAccelerometerStatics_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __x_ABI_CWindows_CDevices_CSensors_CIAccelerometerStatics_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __x_ABI_CWindows_CDevices_CSensors_CIAccelerometerStatics_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __x_ABI_CWindows_CDevices_CSensors_CIAccelerometerStatics_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __x_ABI_CWindows_CDevices_CSensors_CIAccelerometerStatics_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __x_ABI_CWindows_CDevices_CSensors_CIAccelerometerStatics_GetDefault(This, result) \
    ((This)->lpVtbl->GetDefault(This, result))

#endif /* COBJMACROS */

EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CSensors_CIAccelerometerStatics;
#endif /* !defined(____x_ABI_CWindows_CDevices_CSensors_CIAccelerometerStatics_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Interface Windows.Devices.Sensors.IAccelerometerStatics2
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 3.0
 *
 * Interface is a part of the implementation of type Windows.Devices.Sensors.Accelerometer
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x30000
#if !defined(____x_ABI_CWindows_CDevices_CSensors_CIAccelerometerStatics2_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CDevices_CSensors_CIAccelerometerStatics2_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Devices_Sensors_IAccelerometerStatics2[] = L"Windows.Devices.Sensors.IAccelerometerStatics2";
typedef struct __x_ABI_CWindows_CDevices_CSensors_CIAccelerometerStatics2Vtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CDevices_CSensors_CIAccelerometerStatics2* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CDevices_CSensors_CIAccelerometerStatics2* This);
    ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CDevices_CSensors_CIAccelerometerStatics2* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CDevices_CSensors_CIAccelerometerStatics2* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CDevices_CSensors_CIAccelerometerStatics2* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CDevices_CSensors_CIAccelerometerStatics2* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* GetDefaultWithAccelerometerReadingType)(__x_ABI_CWindows_CDevices_CSensors_CIAccelerometerStatics2* This,
        enum __x_ABI_CWindows_CDevices_CSensors_CAccelerometerReadingType readingType,
        __x_ABI_CWindows_CDevices_CSensors_CIAccelerometer** result);

    END_INTERFACE
} __x_ABI_CWindows_CDevices_CSensors_CIAccelerometerStatics2Vtbl;

interface __x_ABI_CWindows_CDevices_CSensors_CIAccelerometerStatics2
{
    CONST_VTBL struct __x_ABI_CWindows_CDevices_CSensors_CIAccelerometerStatics2Vtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __x_ABI_CWindows_CDevices_CSensors_CIAccelerometerStatics2_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __x_ABI_CWindows_CDevices_CSensors_CIAccelerometerStatics2_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __x_ABI_CWindows_CDevices_CSensors_CIAccelerometerStatics2_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __x_ABI_CWindows_CDevices_CSensors_CIAccelerometerStatics2_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __x_ABI_CWindows_CDevices_CSensors_CIAccelerometerStatics2_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __x_ABI_CWindows_CDevices_CSensors_CIAccelerometerStatics2_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __x_ABI_CWindows_CDevices_CSensors_CIAccelerometerStatics2_GetDefaultWithAccelerometerReadingType(This, readingType, result) \
    ((This)->lpVtbl->GetDefaultWithAccelerometerReadingType(This, readingType, result))

#endif /* COBJMACROS */

EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CSensors_CIAccelerometerStatics2;
#endif /* !defined(____x_ABI_CWindows_CDevices_CSensors_CIAccelerometerStatics2_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x30000

/*
 *
 * Interface Windows.Devices.Sensors.IAccelerometerStatics3
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 5.0
 *
 * Interface is a part of the implementation of type Windows.Devices.Sensors.Accelerometer
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x50000
#if !defined(____x_ABI_CWindows_CDevices_CSensors_CIAccelerometerStatics3_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CDevices_CSensors_CIAccelerometerStatics3_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Devices_Sensors_IAccelerometerStatics3[] = L"Windows.Devices.Sensors.IAccelerometerStatics3";
typedef struct __x_ABI_CWindows_CDevices_CSensors_CIAccelerometerStatics3Vtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CDevices_CSensors_CIAccelerometerStatics3* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CDevices_CSensors_CIAccelerometerStatics3* This);
    ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CDevices_CSensors_CIAccelerometerStatics3* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CDevices_CSensors_CIAccelerometerStatics3* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CDevices_CSensors_CIAccelerometerStatics3* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CDevices_CSensors_CIAccelerometerStatics3* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* FromIdAsync)(__x_ABI_CWindows_CDevices_CSensors_CIAccelerometerStatics3* This,
        HSTRING deviceId,
        __FIAsyncOperation_1_Windows__CDevices__CSensors__CAccelerometer** operation);
    HRESULT (STDMETHODCALLTYPE* GetDeviceSelector)(__x_ABI_CWindows_CDevices_CSensors_CIAccelerometerStatics3* This,
        enum __x_ABI_CWindows_CDevices_CSensors_CAccelerometerReadingType readingType,
        HSTRING* result);

    END_INTERFACE
} __x_ABI_CWindows_CDevices_CSensors_CIAccelerometerStatics3Vtbl;

interface __x_ABI_CWindows_CDevices_CSensors_CIAccelerometerStatics3
{
    CONST_VTBL struct __x_ABI_CWindows_CDevices_CSensors_CIAccelerometerStatics3Vtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __x_ABI_CWindows_CDevices_CSensors_CIAccelerometerStatics3_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __x_ABI_CWindows_CDevices_CSensors_CIAccelerometerStatics3_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __x_ABI_CWindows_CDevices_CSensors_CIAccelerometerStatics3_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __x_ABI_CWindows_CDevices_CSensors_CIAccelerometerStatics3_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __x_ABI_CWindows_CDevices_CSensors_CIAccelerometerStatics3_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __x_ABI_CWindows_CDevices_CSensors_CIAccelerometerStatics3_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __x_ABI_CWindows_CDevices_CSensors_CIAccelerometerStatics3_FromIdAsync(This, deviceId, operation) \
    ((This)->lpVtbl->FromIdAsync(This, deviceId, operation))

#define __x_ABI_CWindows_CDevices_CSensors_CIAccelerometerStatics3_GetDeviceSelector(This, readingType, result) \
    ((This)->lpVtbl->GetDeviceSelector(This, readingType, result))

#endif /* COBJMACROS */

EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CSensors_CIAccelerometerStatics3;
#endif /* !defined(____x_ABI_CWindows_CDevices_CSensors_CIAccelerometerStatics3_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x50000

/*
 *
 * Interface Windows.Devices.Sensors.IActivitySensor
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Interface is a part of the implementation of type Windows.Devices.Sensors.ActivitySensor
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____x_ABI_CWindows_CDevices_CSensors_CIActivitySensor_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CDevices_CSensors_CIActivitySensor_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Devices_Sensors_IActivitySensor[] = L"Windows.Devices.Sensors.IActivitySensor";
typedef struct __x_ABI_CWindows_CDevices_CSensors_CIActivitySensorVtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CDevices_CSensors_CIActivitySensor* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CDevices_CSensors_CIActivitySensor* This);
    ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CDevices_CSensors_CIActivitySensor* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CDevices_CSensors_CIActivitySensor* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CDevices_CSensors_CIActivitySensor* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CDevices_CSensors_CIActivitySensor* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* GetCurrentReadingAsync)(__x_ABI_CWindows_CDevices_CSensors_CIActivitySensor* This,
        __FIAsyncOperation_1_Windows__CDevices__CSensors__CActivitySensorReading** result);
    HRESULT (STDMETHODCALLTYPE* get_SubscribedActivities)(__x_ABI_CWindows_CDevices_CSensors_CIActivitySensor* This,
        __FIVector_1_Windows__CDevices__CSensors__CActivityType** value);
    HRESULT (STDMETHODCALLTYPE* get_PowerInMilliwatts)(__x_ABI_CWindows_CDevices_CSensors_CIActivitySensor* This,
        DOUBLE* value);
    HRESULT (STDMETHODCALLTYPE* get_DeviceId)(__x_ABI_CWindows_CDevices_CSensors_CIActivitySensor* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_SupportedActivities)(__x_ABI_CWindows_CDevices_CSensors_CIActivitySensor* This,
        __FIVectorView_1_Windows__CDevices__CSensors__CActivityType** value);
    HRESULT (STDMETHODCALLTYPE* get_MinimumReportInterval)(__x_ABI_CWindows_CDevices_CSensors_CIActivitySensor* This,
        UINT32* value);
    HRESULT (STDMETHODCALLTYPE* add_ReadingChanged)(__x_ABI_CWindows_CDevices_CSensors_CIActivitySensor* This,
        __FITypedEventHandler_2_Windows__CDevices__CSensors__CActivitySensor_Windows__CDevices__CSensors__CActivitySensorReadingChangedEventArgs* handler,
        EventRegistrationToken* token);
    HRESULT (STDMETHODCALLTYPE* remove_ReadingChanged)(__x_ABI_CWindows_CDevices_CSensors_CIActivitySensor* This,
        EventRegistrationToken token);

    END_INTERFACE
} __x_ABI_CWindows_CDevices_CSensors_CIActivitySensorVtbl;

interface __x_ABI_CWindows_CDevices_CSensors_CIActivitySensor
{
    CONST_VTBL struct __x_ABI_CWindows_CDevices_CSensors_CIActivitySensorVtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __x_ABI_CWindows_CDevices_CSensors_CIActivitySensor_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __x_ABI_CWindows_CDevices_CSensors_CIActivitySensor_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __x_ABI_CWindows_CDevices_CSensors_CIActivitySensor_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __x_ABI_CWindows_CDevices_CSensors_CIActivitySensor_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __x_ABI_CWindows_CDevices_CSensors_CIActivitySensor_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __x_ABI_CWindows_CDevices_CSensors_CIActivitySensor_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __x_ABI_CWindows_CDevices_CSensors_CIActivitySensor_GetCurrentReadingAsync(This, result) \
    ((This)->lpVtbl->GetCurrentReadingAsync(This, result))

#define __x_ABI_CWindows_CDevices_CSensors_CIActivitySensor_get_SubscribedActivities(This, value) \
    ((This)->lpVtbl->get_SubscribedActivities(This, value))

#define __x_ABI_CWindows_CDevices_CSensors_CIActivitySensor_get_PowerInMilliwatts(This, value) \
    ((This)->lpVtbl->get_PowerInMilliwatts(This, value))

#define __x_ABI_CWindows_CDevices_CSensors_CIActivitySensor_get_DeviceId(This, value) \
    ((This)->lpVtbl->get_DeviceId(This, value))

#define __x_ABI_CWindows_CDevices_CSensors_CIActivitySensor_get_SupportedActivities(This, value) \
    ((This)->lpVtbl->get_SupportedActivities(This, value))

#define __x_ABI_CWindows_CDevices_CSensors_CIActivitySensor_get_MinimumReportInterval(This, value) \
    ((This)->lpVtbl->get_MinimumReportInterval(This, value))

#define __x_ABI_CWindows_CDevices_CSensors_CIActivitySensor_add_ReadingChanged(This, handler, token) \
    ((This)->lpVtbl->add_ReadingChanged(This, handler, token))

#define __x_ABI_CWindows_CDevices_CSensors_CIActivitySensor_remove_ReadingChanged(This, token) \
    ((This)->lpVtbl->remove_ReadingChanged(This, token))

#endif /* COBJMACROS */

EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CSensors_CIActivitySensor;
#endif /* !defined(____x_ABI_CWindows_CDevices_CSensors_CIActivitySensor_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Interface Windows.Devices.Sensors.IActivitySensorReading
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Interface is a part of the implementation of type Windows.Devices.Sensors.ActivitySensorReading
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____x_ABI_CWindows_CDevices_CSensors_CIActivitySensorReading_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CDevices_CSensors_CIActivitySensorReading_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Devices_Sensors_IActivitySensorReading[] = L"Windows.Devices.Sensors.IActivitySensorReading";
typedef struct __x_ABI_CWindows_CDevices_CSensors_CIActivitySensorReadingVtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CDevices_CSensors_CIActivitySensorReading* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CDevices_CSensors_CIActivitySensorReading* This);
    ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CDevices_CSensors_CIActivitySensorReading* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CDevices_CSensors_CIActivitySensorReading* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CDevices_CSensors_CIActivitySensorReading* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CDevices_CSensors_CIActivitySensorReading* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* get_Timestamp)(__x_ABI_CWindows_CDevices_CSensors_CIActivitySensorReading* This,
        struct __x_ABI_CWindows_CFoundation_CDateTime* value);
    HRESULT (STDMETHODCALLTYPE* get_Activity)(__x_ABI_CWindows_CDevices_CSensors_CIActivitySensorReading* This,
        enum __x_ABI_CWindows_CDevices_CSensors_CActivityType* value);
    HRESULT (STDMETHODCALLTYPE* get_Confidence)(__x_ABI_CWindows_CDevices_CSensors_CIActivitySensorReading* This,
        enum __x_ABI_CWindows_CDevices_CSensors_CActivitySensorReadingConfidence* value);

    END_INTERFACE
} __x_ABI_CWindows_CDevices_CSensors_CIActivitySensorReadingVtbl;

interface __x_ABI_CWindows_CDevices_CSensors_CIActivitySensorReading
{
    CONST_VTBL struct __x_ABI_CWindows_CDevices_CSensors_CIActivitySensorReadingVtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __x_ABI_CWindows_CDevices_CSensors_CIActivitySensorReading_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __x_ABI_CWindows_CDevices_CSensors_CIActivitySensorReading_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __x_ABI_CWindows_CDevices_CSensors_CIActivitySensorReading_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __x_ABI_CWindows_CDevices_CSensors_CIActivitySensorReading_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __x_ABI_CWindows_CDevices_CSensors_CIActivitySensorReading_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __x_ABI_CWindows_CDevices_CSensors_CIActivitySensorReading_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __x_ABI_CWindows_CDevices_CSensors_CIActivitySensorReading_get_Timestamp(This, value) \
    ((This)->lpVtbl->get_Timestamp(This, value))

#define __x_ABI_CWindows_CDevices_CSensors_CIActivitySensorReading_get_Activity(This, value) \
    ((This)->lpVtbl->get_Activity(This, value))

#define __x_ABI_CWindows_CDevices_CSensors_CIActivitySensorReading_get_Confidence(This, value) \
    ((This)->lpVtbl->get_Confidence(This, value))

#endif /* COBJMACROS */

EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CSensors_CIActivitySensorReading;
#endif /* !defined(____x_ABI_CWindows_CDevices_CSensors_CIActivitySensorReading_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Interface Windows.Devices.Sensors.IActivitySensorReadingChangeReport
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Interface is a part of the implementation of type Windows.Devices.Sensors.ActivitySensorReadingChangeReport
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____x_ABI_CWindows_CDevices_CSensors_CIActivitySensorReadingChangeReport_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CDevices_CSensors_CIActivitySensorReadingChangeReport_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Devices_Sensors_IActivitySensorReadingChangeReport[] = L"Windows.Devices.Sensors.IActivitySensorReadingChangeReport";
typedef struct __x_ABI_CWindows_CDevices_CSensors_CIActivitySensorReadingChangeReportVtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CDevices_CSensors_CIActivitySensorReadingChangeReport* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CDevices_CSensors_CIActivitySensorReadingChangeReport* This);
    ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CDevices_CSensors_CIActivitySensorReadingChangeReport* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CDevices_CSensors_CIActivitySensorReadingChangeReport* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CDevices_CSensors_CIActivitySensorReadingChangeReport* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CDevices_CSensors_CIActivitySensorReadingChangeReport* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* get_Reading)(__x_ABI_CWindows_CDevices_CSensors_CIActivitySensorReadingChangeReport* This,
        __x_ABI_CWindows_CDevices_CSensors_CIActivitySensorReading** value);

    END_INTERFACE
} __x_ABI_CWindows_CDevices_CSensors_CIActivitySensorReadingChangeReportVtbl;

interface __x_ABI_CWindows_CDevices_CSensors_CIActivitySensorReadingChangeReport
{
    CONST_VTBL struct __x_ABI_CWindows_CDevices_CSensors_CIActivitySensorReadingChangeReportVtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __x_ABI_CWindows_CDevices_CSensors_CIActivitySensorReadingChangeReport_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __x_ABI_CWindows_CDevices_CSensors_CIActivitySensorReadingChangeReport_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __x_ABI_CWindows_CDevices_CSensors_CIActivitySensorReadingChangeReport_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __x_ABI_CWindows_CDevices_CSensors_CIActivitySensorReadingChangeReport_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __x_ABI_CWindows_CDevices_CSensors_CIActivitySensorReadingChangeReport_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __x_ABI_CWindows_CDevices_CSensors_CIActivitySensorReadingChangeReport_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __x_ABI_CWindows_CDevices_CSensors_CIActivitySensorReadingChangeReport_get_Reading(This, value) \
    ((This)->lpVtbl->get_Reading(This, value))

#endif /* COBJMACROS */

EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CSensors_CIActivitySensorReadingChangeReport;
#endif /* !defined(____x_ABI_CWindows_CDevices_CSensors_CIActivitySensorReadingChangeReport_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Interface Windows.Devices.Sensors.IActivitySensorReadingChangedEventArgs
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Interface is a part of the implementation of type Windows.Devices.Sensors.ActivitySensorReadingChangedEventArgs
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____x_ABI_CWindows_CDevices_CSensors_CIActivitySensorReadingChangedEventArgs_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CDevices_CSensors_CIActivitySensorReadingChangedEventArgs_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Devices_Sensors_IActivitySensorReadingChangedEventArgs[] = L"Windows.Devices.Sensors.IActivitySensorReadingChangedEventArgs";
typedef struct __x_ABI_CWindows_CDevices_CSensors_CIActivitySensorReadingChangedEventArgsVtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CDevices_CSensors_CIActivitySensorReadingChangedEventArgs* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CDevices_CSensors_CIActivitySensorReadingChangedEventArgs* This);
    ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CDevices_CSensors_CIActivitySensorReadingChangedEventArgs* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CDevices_CSensors_CIActivitySensorReadingChangedEventArgs* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CDevices_CSensors_CIActivitySensorReadingChangedEventArgs* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CDevices_CSensors_CIActivitySensorReadingChangedEventArgs* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* get_Reading)(__x_ABI_CWindows_CDevices_CSensors_CIActivitySensorReadingChangedEventArgs* This,
        __x_ABI_CWindows_CDevices_CSensors_CIActivitySensorReading** value);

    END_INTERFACE
} __x_ABI_CWindows_CDevices_CSensors_CIActivitySensorReadingChangedEventArgsVtbl;

interface __x_ABI_CWindows_CDevices_CSensors_CIActivitySensorReadingChangedEventArgs
{
    CONST_VTBL struct __x_ABI_CWindows_CDevices_CSensors_CIActivitySensorReadingChangedEventArgsVtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __x_ABI_CWindows_CDevices_CSensors_CIActivitySensorReadingChangedEventArgs_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __x_ABI_CWindows_CDevices_CSensors_CIActivitySensorReadingChangedEventArgs_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __x_ABI_CWindows_CDevices_CSensors_CIActivitySensorReadingChangedEventArgs_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __x_ABI_CWindows_CDevices_CSensors_CIActivitySensorReadingChangedEventArgs_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __x_ABI_CWindows_CDevices_CSensors_CIActivitySensorReadingChangedEventArgs_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __x_ABI_CWindows_CDevices_CSensors_CIActivitySensorReadingChangedEventArgs_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __x_ABI_CWindows_CDevices_CSensors_CIActivitySensorReadingChangedEventArgs_get_Reading(This, value) \
    ((This)->lpVtbl->get_Reading(This, value))

#endif /* COBJMACROS */

EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CSensors_CIActivitySensorReadingChangedEventArgs;
#endif /* !defined(____x_ABI_CWindows_CDevices_CSensors_CIActivitySensorReadingChangedEventArgs_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Interface Windows.Devices.Sensors.IActivitySensorStatics
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Interface is a part of the implementation of type Windows.Devices.Sensors.ActivitySensor
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____x_ABI_CWindows_CDevices_CSensors_CIActivitySensorStatics_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CDevices_CSensors_CIActivitySensorStatics_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Devices_Sensors_IActivitySensorStatics[] = L"Windows.Devices.Sensors.IActivitySensorStatics";
typedef struct __x_ABI_CWindows_CDevices_CSensors_CIActivitySensorStaticsVtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CDevices_CSensors_CIActivitySensorStatics* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CDevices_CSensors_CIActivitySensorStatics* This);
    ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CDevices_CSensors_CIActivitySensorStatics* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CDevices_CSensors_CIActivitySensorStatics* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CDevices_CSensors_CIActivitySensorStatics* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CDevices_CSensors_CIActivitySensorStatics* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* GetDefaultAsync)(__x_ABI_CWindows_CDevices_CSensors_CIActivitySensorStatics* This,
        __FIAsyncOperation_1_Windows__CDevices__CSensors__CActivitySensor** result);
    HRESULT (STDMETHODCALLTYPE* GetDeviceSelector)(__x_ABI_CWindows_CDevices_CSensors_CIActivitySensorStatics* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* FromIdAsync)(__x_ABI_CWindows_CDevices_CSensors_CIActivitySensorStatics* This,
        HSTRING deviceId,
        __FIAsyncOperation_1_Windows__CDevices__CSensors__CActivitySensor** result);
    HRESULT (STDMETHODCALLTYPE* GetSystemHistoryAsync)(__x_ABI_CWindows_CDevices_CSensors_CIActivitySensorStatics* This,
        struct __x_ABI_CWindows_CFoundation_CDateTime fromTime,
        __FIAsyncOperation_1___FIVectorView_1_Windows__CDevices__CSensors__CActivitySensorReading** result);
    HRESULT (STDMETHODCALLTYPE* GetSystemHistoryWithDurationAsync)(__x_ABI_CWindows_CDevices_CSensors_CIActivitySensorStatics* This,
        struct __x_ABI_CWindows_CFoundation_CDateTime fromTime,
        struct __x_ABI_CWindows_CFoundation_CTimeSpan duration,
        __FIAsyncOperation_1___FIVectorView_1_Windows__CDevices__CSensors__CActivitySensorReading** result);

    END_INTERFACE
} __x_ABI_CWindows_CDevices_CSensors_CIActivitySensorStaticsVtbl;

interface __x_ABI_CWindows_CDevices_CSensors_CIActivitySensorStatics
{
    CONST_VTBL struct __x_ABI_CWindows_CDevices_CSensors_CIActivitySensorStaticsVtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __x_ABI_CWindows_CDevices_CSensors_CIActivitySensorStatics_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __x_ABI_CWindows_CDevices_CSensors_CIActivitySensorStatics_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __x_ABI_CWindows_CDevices_CSensors_CIActivitySensorStatics_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __x_ABI_CWindows_CDevices_CSensors_CIActivitySensorStatics_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __x_ABI_CWindows_CDevices_CSensors_CIActivitySensorStatics_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __x_ABI_CWindows_CDevices_CSensors_CIActivitySensorStatics_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __x_ABI_CWindows_CDevices_CSensors_CIActivitySensorStatics_GetDefaultAsync(This, result) \
    ((This)->lpVtbl->GetDefaultAsync(This, result))

#define __x_ABI_CWindows_CDevices_CSensors_CIActivitySensorStatics_GetDeviceSelector(This, value) \
    ((This)->lpVtbl->GetDeviceSelector(This, value))

#define __x_ABI_CWindows_CDevices_CSensors_CIActivitySensorStatics_FromIdAsync(This, deviceId, result) \
    ((This)->lpVtbl->FromIdAsync(This, deviceId, result))

#define __x_ABI_CWindows_CDevices_CSensors_CIActivitySensorStatics_GetSystemHistoryAsync(This, fromTime, result) \
    ((This)->lpVtbl->GetSystemHistoryAsync(This, fromTime, result))

#define __x_ABI_CWindows_CDevices_CSensors_CIActivitySensorStatics_GetSystemHistoryWithDurationAsync(This, fromTime, duration, result) \
    ((This)->lpVtbl->GetSystemHistoryWithDurationAsync(This, fromTime, duration, result))

#endif /* COBJMACROS */

EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CSensors_CIActivitySensorStatics;
#endif /* !defined(____x_ABI_CWindows_CDevices_CSensors_CIActivitySensorStatics_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Interface Windows.Devices.Sensors.IActivitySensorTriggerDetails
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Interface is a part of the implementation of type Windows.Devices.Sensors.ActivitySensorTriggerDetails
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____x_ABI_CWindows_CDevices_CSensors_CIActivitySensorTriggerDetails_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CDevices_CSensors_CIActivitySensorTriggerDetails_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Devices_Sensors_IActivitySensorTriggerDetails[] = L"Windows.Devices.Sensors.IActivitySensorTriggerDetails";
typedef struct __x_ABI_CWindows_CDevices_CSensors_CIActivitySensorTriggerDetailsVtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CDevices_CSensors_CIActivitySensorTriggerDetails* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CDevices_CSensors_CIActivitySensorTriggerDetails* This);
    ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CDevices_CSensors_CIActivitySensorTriggerDetails* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CDevices_CSensors_CIActivitySensorTriggerDetails* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CDevices_CSensors_CIActivitySensorTriggerDetails* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CDevices_CSensors_CIActivitySensorTriggerDetails* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* ReadReports)(__x_ABI_CWindows_CDevices_CSensors_CIActivitySensorTriggerDetails* This,
        __FIVectorView_1_Windows__CDevices__CSensors__CActivitySensorReadingChangeReport** value);

    END_INTERFACE
} __x_ABI_CWindows_CDevices_CSensors_CIActivitySensorTriggerDetailsVtbl;

interface __x_ABI_CWindows_CDevices_CSensors_CIActivitySensorTriggerDetails
{
    CONST_VTBL struct __x_ABI_CWindows_CDevices_CSensors_CIActivitySensorTriggerDetailsVtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __x_ABI_CWindows_CDevices_CSensors_CIActivitySensorTriggerDetails_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __x_ABI_CWindows_CDevices_CSensors_CIActivitySensorTriggerDetails_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __x_ABI_CWindows_CDevices_CSensors_CIActivitySensorTriggerDetails_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __x_ABI_CWindows_CDevices_CSensors_CIActivitySensorTriggerDetails_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __x_ABI_CWindows_CDevices_CSensors_CIActivitySensorTriggerDetails_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __x_ABI_CWindows_CDevices_CSensors_CIActivitySensorTriggerDetails_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __x_ABI_CWindows_CDevices_CSensors_CIActivitySensorTriggerDetails_ReadReports(This, value) \
    ((This)->lpVtbl->ReadReports(This, value))

#endif /* COBJMACROS */

EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CSensors_CIActivitySensorTriggerDetails;
#endif /* !defined(____x_ABI_CWindows_CDevices_CSensors_CIActivitySensorTriggerDetails_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Interface Windows.Devices.Sensors.IAltimeter
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Interface is a part of the implementation of type Windows.Devices.Sensors.Altimeter
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____x_ABI_CWindows_CDevices_CSensors_CIAltimeter_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CDevices_CSensors_CIAltimeter_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Devices_Sensors_IAltimeter[] = L"Windows.Devices.Sensors.IAltimeter";
typedef struct __x_ABI_CWindows_CDevices_CSensors_CIAltimeterVtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CDevices_CSensors_CIAltimeter* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CDevices_CSensors_CIAltimeter* This);
    ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CDevices_CSensors_CIAltimeter* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CDevices_CSensors_CIAltimeter* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CDevices_CSensors_CIAltimeter* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CDevices_CSensors_CIAltimeter* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* GetCurrentReading)(__x_ABI_CWindows_CDevices_CSensors_CIAltimeter* This,
        __x_ABI_CWindows_CDevices_CSensors_CIAltimeterReading** value);
    HRESULT (STDMETHODCALLTYPE* get_DeviceId)(__x_ABI_CWindows_CDevices_CSensors_CIAltimeter* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_MinimumReportInterval)(__x_ABI_CWindows_CDevices_CSensors_CIAltimeter* This,
        UINT32* value);
    HRESULT (STDMETHODCALLTYPE* put_ReportInterval)(__x_ABI_CWindows_CDevices_CSensors_CIAltimeter* This,
        UINT32 value);
    HRESULT (STDMETHODCALLTYPE* get_ReportInterval)(__x_ABI_CWindows_CDevices_CSensors_CIAltimeter* This,
        UINT32* value);
    HRESULT (STDMETHODCALLTYPE* add_ReadingChanged)(__x_ABI_CWindows_CDevices_CSensors_CIAltimeter* This,
        __FITypedEventHandler_2_Windows__CDevices__CSensors__CAltimeter_Windows__CDevices__CSensors__CAltimeterReadingChangedEventArgs* handler,
        EventRegistrationToken* token);
    HRESULT (STDMETHODCALLTYPE* remove_ReadingChanged)(__x_ABI_CWindows_CDevices_CSensors_CIAltimeter* This,
        EventRegistrationToken token);

    END_INTERFACE
} __x_ABI_CWindows_CDevices_CSensors_CIAltimeterVtbl;

interface __x_ABI_CWindows_CDevices_CSensors_CIAltimeter
{
    CONST_VTBL struct __x_ABI_CWindows_CDevices_CSensors_CIAltimeterVtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __x_ABI_CWindows_CDevices_CSensors_CIAltimeter_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __x_ABI_CWindows_CDevices_CSensors_CIAltimeter_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __x_ABI_CWindows_CDevices_CSensors_CIAltimeter_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __x_ABI_CWindows_CDevices_CSensors_CIAltimeter_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __x_ABI_CWindows_CDevices_CSensors_CIAltimeter_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __x_ABI_CWindows_CDevices_CSensors_CIAltimeter_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __x_ABI_CWindows_CDevices_CSensors_CIAltimeter_GetCurrentReading(This, value) \
    ((This)->lpVtbl->GetCurrentReading(This, value))

#define __x_ABI_CWindows_CDevices_CSensors_CIAltimeter_get_DeviceId(This, value) \
    ((This)->lpVtbl->get_DeviceId(This, value))

#define __x_ABI_CWindows_CDevices_CSensors_CIAltimeter_get_MinimumReportInterval(This, value) \
    ((This)->lpVtbl->get_MinimumReportInterval(This, value))

#define __x_ABI_CWindows_CDevices_CSensors_CIAltimeter_put_ReportInterval(This, value) \
    ((This)->lpVtbl->put_ReportInterval(This, value))

#define __x_ABI_CWindows_CDevices_CSensors_CIAltimeter_get_ReportInterval(This, value) \
    ((This)->lpVtbl->get_ReportInterval(This, value))

#define __x_ABI_CWindows_CDevices_CSensors_CIAltimeter_add_ReadingChanged(This, handler, token) \
    ((This)->lpVtbl->add_ReadingChanged(This, handler, token))

#define __x_ABI_CWindows_CDevices_CSensors_CIAltimeter_remove_ReadingChanged(This, token) \
    ((This)->lpVtbl->remove_ReadingChanged(This, token))

#endif /* COBJMACROS */

EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CSensors_CIAltimeter;
#endif /* !defined(____x_ABI_CWindows_CDevices_CSensors_CIAltimeter_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Interface Windows.Devices.Sensors.IAltimeter2
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 5.0
 *
 * Interface is a part of the implementation of type Windows.Devices.Sensors.Altimeter
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x50000
#if !defined(____x_ABI_CWindows_CDevices_CSensors_CIAltimeter2_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CDevices_CSensors_CIAltimeter2_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Devices_Sensors_IAltimeter2[] = L"Windows.Devices.Sensors.IAltimeter2";
typedef struct __x_ABI_CWindows_CDevices_CSensors_CIAltimeter2Vtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CDevices_CSensors_CIAltimeter2* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CDevices_CSensors_CIAltimeter2* This);
    ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CDevices_CSensors_CIAltimeter2* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CDevices_CSensors_CIAltimeter2* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CDevices_CSensors_CIAltimeter2* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CDevices_CSensors_CIAltimeter2* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* put_ReportLatency)(__x_ABI_CWindows_CDevices_CSensors_CIAltimeter2* This,
        UINT32 value);
    HRESULT (STDMETHODCALLTYPE* get_ReportLatency)(__x_ABI_CWindows_CDevices_CSensors_CIAltimeter2* This,
        UINT32* value);
    HRESULT (STDMETHODCALLTYPE* get_MaxBatchSize)(__x_ABI_CWindows_CDevices_CSensors_CIAltimeter2* This,
        UINT32* value);

    END_INTERFACE
} __x_ABI_CWindows_CDevices_CSensors_CIAltimeter2Vtbl;

interface __x_ABI_CWindows_CDevices_CSensors_CIAltimeter2
{
    CONST_VTBL struct __x_ABI_CWindows_CDevices_CSensors_CIAltimeter2Vtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __x_ABI_CWindows_CDevices_CSensors_CIAltimeter2_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __x_ABI_CWindows_CDevices_CSensors_CIAltimeter2_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __x_ABI_CWindows_CDevices_CSensors_CIAltimeter2_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __x_ABI_CWindows_CDevices_CSensors_CIAltimeter2_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __x_ABI_CWindows_CDevices_CSensors_CIAltimeter2_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __x_ABI_CWindows_CDevices_CSensors_CIAltimeter2_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __x_ABI_CWindows_CDevices_CSensors_CIAltimeter2_put_ReportLatency(This, value) \
    ((This)->lpVtbl->put_ReportLatency(This, value))

#define __x_ABI_CWindows_CDevices_CSensors_CIAltimeter2_get_ReportLatency(This, value) \
    ((This)->lpVtbl->get_ReportLatency(This, value))

#define __x_ABI_CWindows_CDevices_CSensors_CIAltimeter2_get_MaxBatchSize(This, value) \
    ((This)->lpVtbl->get_MaxBatchSize(This, value))

#endif /* COBJMACROS */

EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CSensors_CIAltimeter2;
#endif /* !defined(____x_ABI_CWindows_CDevices_CSensors_CIAltimeter2_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x50000

/*
 *
 * Interface Windows.Devices.Sensors.IAltimeterReading
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Interface is a part of the implementation of type Windows.Devices.Sensors.AltimeterReading
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____x_ABI_CWindows_CDevices_CSensors_CIAltimeterReading_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CDevices_CSensors_CIAltimeterReading_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Devices_Sensors_IAltimeterReading[] = L"Windows.Devices.Sensors.IAltimeterReading";
typedef struct __x_ABI_CWindows_CDevices_CSensors_CIAltimeterReadingVtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CDevices_CSensors_CIAltimeterReading* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CDevices_CSensors_CIAltimeterReading* This);
    ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CDevices_CSensors_CIAltimeterReading* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CDevices_CSensors_CIAltimeterReading* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CDevices_CSensors_CIAltimeterReading* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CDevices_CSensors_CIAltimeterReading* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* get_Timestamp)(__x_ABI_CWindows_CDevices_CSensors_CIAltimeterReading* This,
        struct __x_ABI_CWindows_CFoundation_CDateTime* value);
    HRESULT (STDMETHODCALLTYPE* get_AltitudeChangeInMeters)(__x_ABI_CWindows_CDevices_CSensors_CIAltimeterReading* This,
        DOUBLE* value);

    END_INTERFACE
} __x_ABI_CWindows_CDevices_CSensors_CIAltimeterReadingVtbl;

interface __x_ABI_CWindows_CDevices_CSensors_CIAltimeterReading
{
    CONST_VTBL struct __x_ABI_CWindows_CDevices_CSensors_CIAltimeterReadingVtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __x_ABI_CWindows_CDevices_CSensors_CIAltimeterReading_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __x_ABI_CWindows_CDevices_CSensors_CIAltimeterReading_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __x_ABI_CWindows_CDevices_CSensors_CIAltimeterReading_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __x_ABI_CWindows_CDevices_CSensors_CIAltimeterReading_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __x_ABI_CWindows_CDevices_CSensors_CIAltimeterReading_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __x_ABI_CWindows_CDevices_CSensors_CIAltimeterReading_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __x_ABI_CWindows_CDevices_CSensors_CIAltimeterReading_get_Timestamp(This, value) \
    ((This)->lpVtbl->get_Timestamp(This, value))

#define __x_ABI_CWindows_CDevices_CSensors_CIAltimeterReading_get_AltitudeChangeInMeters(This, value) \
    ((This)->lpVtbl->get_AltitudeChangeInMeters(This, value))

#endif /* COBJMACROS */

EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CSensors_CIAltimeterReading;
#endif /* !defined(____x_ABI_CWindows_CDevices_CSensors_CIAltimeterReading_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Interface Windows.Devices.Sensors.IAltimeterReading2
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 5.0
 *
 * Interface is a part of the implementation of type Windows.Devices.Sensors.AltimeterReading
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x50000
#if !defined(____x_ABI_CWindows_CDevices_CSensors_CIAltimeterReading2_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CDevices_CSensors_CIAltimeterReading2_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Devices_Sensors_IAltimeterReading2[] = L"Windows.Devices.Sensors.IAltimeterReading2";
typedef struct __x_ABI_CWindows_CDevices_CSensors_CIAltimeterReading2Vtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CDevices_CSensors_CIAltimeterReading2* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CDevices_CSensors_CIAltimeterReading2* This);
    ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CDevices_CSensors_CIAltimeterReading2* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CDevices_CSensors_CIAltimeterReading2* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CDevices_CSensors_CIAltimeterReading2* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CDevices_CSensors_CIAltimeterReading2* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* get_PerformanceCount)(__x_ABI_CWindows_CDevices_CSensors_CIAltimeterReading2* This,
        __FIReference_1_Windows__CFoundation__CTimeSpan** value);
    HRESULT (STDMETHODCALLTYPE* get_Properties)(__x_ABI_CWindows_CDevices_CSensors_CIAltimeterReading2* This,
        __FIMapView_2_HSTRING_IInspectable** value);

    END_INTERFACE
} __x_ABI_CWindows_CDevices_CSensors_CIAltimeterReading2Vtbl;

interface __x_ABI_CWindows_CDevices_CSensors_CIAltimeterReading2
{
    CONST_VTBL struct __x_ABI_CWindows_CDevices_CSensors_CIAltimeterReading2Vtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __x_ABI_CWindows_CDevices_CSensors_CIAltimeterReading2_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __x_ABI_CWindows_CDevices_CSensors_CIAltimeterReading2_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __x_ABI_CWindows_CDevices_CSensors_CIAltimeterReading2_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __x_ABI_CWindows_CDevices_CSensors_CIAltimeterReading2_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __x_ABI_CWindows_CDevices_CSensors_CIAltimeterReading2_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __x_ABI_CWindows_CDevices_CSensors_CIAltimeterReading2_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __x_ABI_CWindows_CDevices_CSensors_CIAltimeterReading2_get_PerformanceCount(This, value) \
    ((This)->lpVtbl->get_PerformanceCount(This, value))

#define __x_ABI_CWindows_CDevices_CSensors_CIAltimeterReading2_get_Properties(This, value) \
    ((This)->lpVtbl->get_Properties(This, value))

#endif /* COBJMACROS */

EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CSensors_CIAltimeterReading2;
#endif /* !defined(____x_ABI_CWindows_CDevices_CSensors_CIAltimeterReading2_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x50000

/*
 *
 * Interface Windows.Devices.Sensors.IAltimeterReadingChangedEventArgs
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Interface is a part of the implementation of type Windows.Devices.Sensors.AltimeterReadingChangedEventArgs
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____x_ABI_CWindows_CDevices_CSensors_CIAltimeterReadingChangedEventArgs_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CDevices_CSensors_CIAltimeterReadingChangedEventArgs_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Devices_Sensors_IAltimeterReadingChangedEventArgs[] = L"Windows.Devices.Sensors.IAltimeterReadingChangedEventArgs";
typedef struct __x_ABI_CWindows_CDevices_CSensors_CIAltimeterReadingChangedEventArgsVtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CDevices_CSensors_CIAltimeterReadingChangedEventArgs* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CDevices_CSensors_CIAltimeterReadingChangedEventArgs* This);
    ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CDevices_CSensors_CIAltimeterReadingChangedEventArgs* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CDevices_CSensors_CIAltimeterReadingChangedEventArgs* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CDevices_CSensors_CIAltimeterReadingChangedEventArgs* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CDevices_CSensors_CIAltimeterReadingChangedEventArgs* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* get_Reading)(__x_ABI_CWindows_CDevices_CSensors_CIAltimeterReadingChangedEventArgs* This,
        __x_ABI_CWindows_CDevices_CSensors_CIAltimeterReading** value);

    END_INTERFACE
} __x_ABI_CWindows_CDevices_CSensors_CIAltimeterReadingChangedEventArgsVtbl;

interface __x_ABI_CWindows_CDevices_CSensors_CIAltimeterReadingChangedEventArgs
{
    CONST_VTBL struct __x_ABI_CWindows_CDevices_CSensors_CIAltimeterReadingChangedEventArgsVtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __x_ABI_CWindows_CDevices_CSensors_CIAltimeterReadingChangedEventArgs_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __x_ABI_CWindows_CDevices_CSensors_CIAltimeterReadingChangedEventArgs_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __x_ABI_CWindows_CDevices_CSensors_CIAltimeterReadingChangedEventArgs_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __x_ABI_CWindows_CDevices_CSensors_CIAltimeterReadingChangedEventArgs_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __x_ABI_CWindows_CDevices_CSensors_CIAltimeterReadingChangedEventArgs_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __x_ABI_CWindows_CDevices_CSensors_CIAltimeterReadingChangedEventArgs_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __x_ABI_CWindows_CDevices_CSensors_CIAltimeterReadingChangedEventArgs_get_Reading(This, value) \
    ((This)->lpVtbl->get_Reading(This, value))

#endif /* COBJMACROS */

EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CSensors_CIAltimeterReadingChangedEventArgs;
#endif /* !defined(____x_ABI_CWindows_CDevices_CSensors_CIAltimeterReadingChangedEventArgs_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Interface Windows.Devices.Sensors.IAltimeterStatics
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Interface is a part of the implementation of type Windows.Devices.Sensors.Altimeter
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____x_ABI_CWindows_CDevices_CSensors_CIAltimeterStatics_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CDevices_CSensors_CIAltimeterStatics_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Devices_Sensors_IAltimeterStatics[] = L"Windows.Devices.Sensors.IAltimeterStatics";
typedef struct __x_ABI_CWindows_CDevices_CSensors_CIAltimeterStaticsVtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CDevices_CSensors_CIAltimeterStatics* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CDevices_CSensors_CIAltimeterStatics* This);
    ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CDevices_CSensors_CIAltimeterStatics* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CDevices_CSensors_CIAltimeterStatics* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CDevices_CSensors_CIAltimeterStatics* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CDevices_CSensors_CIAltimeterStatics* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* GetDefault)(__x_ABI_CWindows_CDevices_CSensors_CIAltimeterStatics* This,
        __x_ABI_CWindows_CDevices_CSensors_CIAltimeter** result);

    END_INTERFACE
} __x_ABI_CWindows_CDevices_CSensors_CIAltimeterStaticsVtbl;

interface __x_ABI_CWindows_CDevices_CSensors_CIAltimeterStatics
{
    CONST_VTBL struct __x_ABI_CWindows_CDevices_CSensors_CIAltimeterStaticsVtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __x_ABI_CWindows_CDevices_CSensors_CIAltimeterStatics_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __x_ABI_CWindows_CDevices_CSensors_CIAltimeterStatics_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __x_ABI_CWindows_CDevices_CSensors_CIAltimeterStatics_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __x_ABI_CWindows_CDevices_CSensors_CIAltimeterStatics_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __x_ABI_CWindows_CDevices_CSensors_CIAltimeterStatics_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __x_ABI_CWindows_CDevices_CSensors_CIAltimeterStatics_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __x_ABI_CWindows_CDevices_CSensors_CIAltimeterStatics_GetDefault(This, result) \
    ((This)->lpVtbl->GetDefault(This, result))

#endif /* COBJMACROS */

EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CSensors_CIAltimeterStatics;
#endif /* !defined(____x_ABI_CWindows_CDevices_CSensors_CIAltimeterStatics_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Interface Windows.Devices.Sensors.IBarometer
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Interface is a part of the implementation of type Windows.Devices.Sensors.Barometer
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____x_ABI_CWindows_CDevices_CSensors_CIBarometer_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CDevices_CSensors_CIBarometer_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Devices_Sensors_IBarometer[] = L"Windows.Devices.Sensors.IBarometer";
typedef struct __x_ABI_CWindows_CDevices_CSensors_CIBarometerVtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CDevices_CSensors_CIBarometer* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CDevices_CSensors_CIBarometer* This);
    ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CDevices_CSensors_CIBarometer* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CDevices_CSensors_CIBarometer* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CDevices_CSensors_CIBarometer* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CDevices_CSensors_CIBarometer* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* GetCurrentReading)(__x_ABI_CWindows_CDevices_CSensors_CIBarometer* This,
        __x_ABI_CWindows_CDevices_CSensors_CIBarometerReading** value);
    HRESULT (STDMETHODCALLTYPE* get_DeviceId)(__x_ABI_CWindows_CDevices_CSensors_CIBarometer* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_MinimumReportInterval)(__x_ABI_CWindows_CDevices_CSensors_CIBarometer* This,
        UINT32* value);
    HRESULT (STDMETHODCALLTYPE* put_ReportInterval)(__x_ABI_CWindows_CDevices_CSensors_CIBarometer* This,
        UINT32 value);
    HRESULT (STDMETHODCALLTYPE* get_ReportInterval)(__x_ABI_CWindows_CDevices_CSensors_CIBarometer* This,
        UINT32* value);
    HRESULT (STDMETHODCALLTYPE* add_ReadingChanged)(__x_ABI_CWindows_CDevices_CSensors_CIBarometer* This,
        __FITypedEventHandler_2_Windows__CDevices__CSensors__CBarometer_Windows__CDevices__CSensors__CBarometerReadingChangedEventArgs* handler,
        EventRegistrationToken* token);
    HRESULT (STDMETHODCALLTYPE* remove_ReadingChanged)(__x_ABI_CWindows_CDevices_CSensors_CIBarometer* This,
        EventRegistrationToken token);

    END_INTERFACE
} __x_ABI_CWindows_CDevices_CSensors_CIBarometerVtbl;

interface __x_ABI_CWindows_CDevices_CSensors_CIBarometer
{
    CONST_VTBL struct __x_ABI_CWindows_CDevices_CSensors_CIBarometerVtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __x_ABI_CWindows_CDevices_CSensors_CIBarometer_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __x_ABI_CWindows_CDevices_CSensors_CIBarometer_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __x_ABI_CWindows_CDevices_CSensors_CIBarometer_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __x_ABI_CWindows_CDevices_CSensors_CIBarometer_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __x_ABI_CWindows_CDevices_CSensors_CIBarometer_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __x_ABI_CWindows_CDevices_CSensors_CIBarometer_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __x_ABI_CWindows_CDevices_CSensors_CIBarometer_GetCurrentReading(This, value) \
    ((This)->lpVtbl->GetCurrentReading(This, value))

#define __x_ABI_CWindows_CDevices_CSensors_CIBarometer_get_DeviceId(This, value) \
    ((This)->lpVtbl->get_DeviceId(This, value))

#define __x_ABI_CWindows_CDevices_CSensors_CIBarometer_get_MinimumReportInterval(This, value) \
    ((This)->lpVtbl->get_MinimumReportInterval(This, value))

#define __x_ABI_CWindows_CDevices_CSensors_CIBarometer_put_ReportInterval(This, value) \
    ((This)->lpVtbl->put_ReportInterval(This, value))

#define __x_ABI_CWindows_CDevices_CSensors_CIBarometer_get_ReportInterval(This, value) \
    ((This)->lpVtbl->get_ReportInterval(This, value))

#define __x_ABI_CWindows_CDevices_CSensors_CIBarometer_add_ReadingChanged(This, handler, token) \
    ((This)->lpVtbl->add_ReadingChanged(This, handler, token))

#define __x_ABI_CWindows_CDevices_CSensors_CIBarometer_remove_ReadingChanged(This, token) \
    ((This)->lpVtbl->remove_ReadingChanged(This, token))

#endif /* COBJMACROS */

EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CSensors_CIBarometer;
#endif /* !defined(____x_ABI_CWindows_CDevices_CSensors_CIBarometer_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Interface Windows.Devices.Sensors.IBarometer2
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 5.0
 *
 * Interface is a part of the implementation of type Windows.Devices.Sensors.Barometer
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x50000
#if !defined(____x_ABI_CWindows_CDevices_CSensors_CIBarometer2_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CDevices_CSensors_CIBarometer2_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Devices_Sensors_IBarometer2[] = L"Windows.Devices.Sensors.IBarometer2";
typedef struct __x_ABI_CWindows_CDevices_CSensors_CIBarometer2Vtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CDevices_CSensors_CIBarometer2* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CDevices_CSensors_CIBarometer2* This);
    ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CDevices_CSensors_CIBarometer2* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CDevices_CSensors_CIBarometer2* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CDevices_CSensors_CIBarometer2* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CDevices_CSensors_CIBarometer2* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* put_ReportLatency)(__x_ABI_CWindows_CDevices_CSensors_CIBarometer2* This,
        UINT32 value);
    HRESULT (STDMETHODCALLTYPE* get_ReportLatency)(__x_ABI_CWindows_CDevices_CSensors_CIBarometer2* This,
        UINT32* value);
    HRESULT (STDMETHODCALLTYPE* get_MaxBatchSize)(__x_ABI_CWindows_CDevices_CSensors_CIBarometer2* This,
        UINT32* value);

    END_INTERFACE
} __x_ABI_CWindows_CDevices_CSensors_CIBarometer2Vtbl;

interface __x_ABI_CWindows_CDevices_CSensors_CIBarometer2
{
    CONST_VTBL struct __x_ABI_CWindows_CDevices_CSensors_CIBarometer2Vtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __x_ABI_CWindows_CDevices_CSensors_CIBarometer2_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __x_ABI_CWindows_CDevices_CSensors_CIBarometer2_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __x_ABI_CWindows_CDevices_CSensors_CIBarometer2_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __x_ABI_CWindows_CDevices_CSensors_CIBarometer2_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __x_ABI_CWindows_CDevices_CSensors_CIBarometer2_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __x_ABI_CWindows_CDevices_CSensors_CIBarometer2_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __x_ABI_CWindows_CDevices_CSensors_CIBarometer2_put_ReportLatency(This, value) \
    ((This)->lpVtbl->put_ReportLatency(This, value))

#define __x_ABI_CWindows_CDevices_CSensors_CIBarometer2_get_ReportLatency(This, value) \
    ((This)->lpVtbl->get_ReportLatency(This, value))

#define __x_ABI_CWindows_CDevices_CSensors_CIBarometer2_get_MaxBatchSize(This, value) \
    ((This)->lpVtbl->get_MaxBatchSize(This, value))

#endif /* COBJMACROS */

EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CSensors_CIBarometer2;
#endif /* !defined(____x_ABI_CWindows_CDevices_CSensors_CIBarometer2_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x50000

/*
 *
 * Interface Windows.Devices.Sensors.IBarometer3
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 10.0
 *
 * Interface is a part of the implementation of type Windows.Devices.Sensors.Barometer
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0xa0000
#if !defined(____x_ABI_CWindows_CDevices_CSensors_CIBarometer3_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CDevices_CSensors_CIBarometer3_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Devices_Sensors_IBarometer3[] = L"Windows.Devices.Sensors.IBarometer3";
typedef struct __x_ABI_CWindows_CDevices_CSensors_CIBarometer3Vtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CDevices_CSensors_CIBarometer3* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CDevices_CSensors_CIBarometer3* This);
    ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CDevices_CSensors_CIBarometer3* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CDevices_CSensors_CIBarometer3* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CDevices_CSensors_CIBarometer3* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CDevices_CSensors_CIBarometer3* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* get_ReportThreshold)(__x_ABI_CWindows_CDevices_CSensors_CIBarometer3* This,
        __x_ABI_CWindows_CDevices_CSensors_CIBarometerDataThreshold** value);

    END_INTERFACE
} __x_ABI_CWindows_CDevices_CSensors_CIBarometer3Vtbl;

interface __x_ABI_CWindows_CDevices_CSensors_CIBarometer3
{
    CONST_VTBL struct __x_ABI_CWindows_CDevices_CSensors_CIBarometer3Vtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __x_ABI_CWindows_CDevices_CSensors_CIBarometer3_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __x_ABI_CWindows_CDevices_CSensors_CIBarometer3_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __x_ABI_CWindows_CDevices_CSensors_CIBarometer3_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __x_ABI_CWindows_CDevices_CSensors_CIBarometer3_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __x_ABI_CWindows_CDevices_CSensors_CIBarometer3_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __x_ABI_CWindows_CDevices_CSensors_CIBarometer3_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __x_ABI_CWindows_CDevices_CSensors_CIBarometer3_get_ReportThreshold(This, value) \
    ((This)->lpVtbl->get_ReportThreshold(This, value))

#endif /* COBJMACROS */

EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CSensors_CIBarometer3;
#endif /* !defined(____x_ABI_CWindows_CDevices_CSensors_CIBarometer3_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0xa0000

/*
 *
 * Interface Windows.Devices.Sensors.IBarometerDataThreshold
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 10.0
 *
 * Interface is a part of the implementation of type Windows.Devices.Sensors.BarometerDataThreshold
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0xa0000
#if !defined(____x_ABI_CWindows_CDevices_CSensors_CIBarometerDataThreshold_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CDevices_CSensors_CIBarometerDataThreshold_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Devices_Sensors_IBarometerDataThreshold[] = L"Windows.Devices.Sensors.IBarometerDataThreshold";
typedef struct __x_ABI_CWindows_CDevices_CSensors_CIBarometerDataThresholdVtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CDevices_CSensors_CIBarometerDataThreshold* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CDevices_CSensors_CIBarometerDataThreshold* This);
    ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CDevices_CSensors_CIBarometerDataThreshold* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CDevices_CSensors_CIBarometerDataThreshold* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CDevices_CSensors_CIBarometerDataThreshold* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CDevices_CSensors_CIBarometerDataThreshold* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* get_Hectopascals)(__x_ABI_CWindows_CDevices_CSensors_CIBarometerDataThreshold* This,
        DOUBLE* value);
    HRESULT (STDMETHODCALLTYPE* put_Hectopascals)(__x_ABI_CWindows_CDevices_CSensors_CIBarometerDataThreshold* This,
        DOUBLE value);

    END_INTERFACE
} __x_ABI_CWindows_CDevices_CSensors_CIBarometerDataThresholdVtbl;

interface __x_ABI_CWindows_CDevices_CSensors_CIBarometerDataThreshold
{
    CONST_VTBL struct __x_ABI_CWindows_CDevices_CSensors_CIBarometerDataThresholdVtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __x_ABI_CWindows_CDevices_CSensors_CIBarometerDataThreshold_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __x_ABI_CWindows_CDevices_CSensors_CIBarometerDataThreshold_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __x_ABI_CWindows_CDevices_CSensors_CIBarometerDataThreshold_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __x_ABI_CWindows_CDevices_CSensors_CIBarometerDataThreshold_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __x_ABI_CWindows_CDevices_CSensors_CIBarometerDataThreshold_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __x_ABI_CWindows_CDevices_CSensors_CIBarometerDataThreshold_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __x_ABI_CWindows_CDevices_CSensors_CIBarometerDataThreshold_get_Hectopascals(This, value) \
    ((This)->lpVtbl->get_Hectopascals(This, value))

#define __x_ABI_CWindows_CDevices_CSensors_CIBarometerDataThreshold_put_Hectopascals(This, value) \
    ((This)->lpVtbl->put_Hectopascals(This, value))

#endif /* COBJMACROS */

EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CSensors_CIBarometerDataThreshold;
#endif /* !defined(____x_ABI_CWindows_CDevices_CSensors_CIBarometerDataThreshold_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0xa0000

/*
 *
 * Interface Windows.Devices.Sensors.IBarometerReading
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Interface is a part of the implementation of type Windows.Devices.Sensors.BarometerReading
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____x_ABI_CWindows_CDevices_CSensors_CIBarometerReading_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CDevices_CSensors_CIBarometerReading_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Devices_Sensors_IBarometerReading[] = L"Windows.Devices.Sensors.IBarometerReading";
typedef struct __x_ABI_CWindows_CDevices_CSensors_CIBarometerReadingVtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CDevices_CSensors_CIBarometerReading* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CDevices_CSensors_CIBarometerReading* This);
    ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CDevices_CSensors_CIBarometerReading* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CDevices_CSensors_CIBarometerReading* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CDevices_CSensors_CIBarometerReading* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CDevices_CSensors_CIBarometerReading* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* get_Timestamp)(__x_ABI_CWindows_CDevices_CSensors_CIBarometerReading* This,
        struct __x_ABI_CWindows_CFoundation_CDateTime* value);
    HRESULT (STDMETHODCALLTYPE* get_StationPressureInHectopascals)(__x_ABI_CWindows_CDevices_CSensors_CIBarometerReading* This,
        DOUBLE* value);

    END_INTERFACE
} __x_ABI_CWindows_CDevices_CSensors_CIBarometerReadingVtbl;

interface __x_ABI_CWindows_CDevices_CSensors_CIBarometerReading
{
    CONST_VTBL struct __x_ABI_CWindows_CDevices_CSensors_CIBarometerReadingVtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __x_ABI_CWindows_CDevices_CSensors_CIBarometerReading_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __x_ABI_CWindows_CDevices_CSensors_CIBarometerReading_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __x_ABI_CWindows_CDevices_CSensors_CIBarometerReading_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __x_ABI_CWindows_CDevices_CSensors_CIBarometerReading_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __x_ABI_CWindows_CDevices_CSensors_CIBarometerReading_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __x_ABI_CWindows_CDevices_CSensors_CIBarometerReading_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __x_ABI_CWindows_CDevices_CSensors_CIBarometerReading_get_Timestamp(This, value) \
    ((This)->lpVtbl->get_Timestamp(This, value))

#define __x_ABI_CWindows_CDevices_CSensors_CIBarometerReading_get_StationPressureInHectopascals(This, value) \
    ((This)->lpVtbl->get_StationPressureInHectopascals(This, value))

#endif /* COBJMACROS */

EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CSensors_CIBarometerReading;
#endif /* !defined(____x_ABI_CWindows_CDevices_CSensors_CIBarometerReading_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Interface Windows.Devices.Sensors.IBarometerReading2
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 5.0
 *
 * Interface is a part of the implementation of type Windows.Devices.Sensors.BarometerReading
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x50000
#if !defined(____x_ABI_CWindows_CDevices_CSensors_CIBarometerReading2_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CDevices_CSensors_CIBarometerReading2_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Devices_Sensors_IBarometerReading2[] = L"Windows.Devices.Sensors.IBarometerReading2";
typedef struct __x_ABI_CWindows_CDevices_CSensors_CIBarometerReading2Vtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CDevices_CSensors_CIBarometerReading2* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CDevices_CSensors_CIBarometerReading2* This);
    ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CDevices_CSensors_CIBarometerReading2* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CDevices_CSensors_CIBarometerReading2* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CDevices_CSensors_CIBarometerReading2* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CDevices_CSensors_CIBarometerReading2* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* get_PerformanceCount)(__x_ABI_CWindows_CDevices_CSensors_CIBarometerReading2* This,
        __FIReference_1_Windows__CFoundation__CTimeSpan** value);
    HRESULT (STDMETHODCALLTYPE* get_Properties)(__x_ABI_CWindows_CDevices_CSensors_CIBarometerReading2* This,
        __FIMapView_2_HSTRING_IInspectable** value);

    END_INTERFACE
} __x_ABI_CWindows_CDevices_CSensors_CIBarometerReading2Vtbl;

interface __x_ABI_CWindows_CDevices_CSensors_CIBarometerReading2
{
    CONST_VTBL struct __x_ABI_CWindows_CDevices_CSensors_CIBarometerReading2Vtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __x_ABI_CWindows_CDevices_CSensors_CIBarometerReading2_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __x_ABI_CWindows_CDevices_CSensors_CIBarometerReading2_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __x_ABI_CWindows_CDevices_CSensors_CIBarometerReading2_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __x_ABI_CWindows_CDevices_CSensors_CIBarometerReading2_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __x_ABI_CWindows_CDevices_CSensors_CIBarometerReading2_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __x_ABI_CWindows_CDevices_CSensors_CIBarometerReading2_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __x_ABI_CWindows_CDevices_CSensors_CIBarometerReading2_get_PerformanceCount(This, value) \
    ((This)->lpVtbl->get_PerformanceCount(This, value))

#define __x_ABI_CWindows_CDevices_CSensors_CIBarometerReading2_get_Properties(This, value) \
    ((This)->lpVtbl->get_Properties(This, value))

#endif /* COBJMACROS */

EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CSensors_CIBarometerReading2;
#endif /* !defined(____x_ABI_CWindows_CDevices_CSensors_CIBarometerReading2_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x50000

/*
 *
 * Interface Windows.Devices.Sensors.IBarometerReadingChangedEventArgs
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Interface is a part of the implementation of type Windows.Devices.Sensors.BarometerReadingChangedEventArgs
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____x_ABI_CWindows_CDevices_CSensors_CIBarometerReadingChangedEventArgs_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CDevices_CSensors_CIBarometerReadingChangedEventArgs_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Devices_Sensors_IBarometerReadingChangedEventArgs[] = L"Windows.Devices.Sensors.IBarometerReadingChangedEventArgs";
typedef struct __x_ABI_CWindows_CDevices_CSensors_CIBarometerReadingChangedEventArgsVtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CDevices_CSensors_CIBarometerReadingChangedEventArgs* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CDevices_CSensors_CIBarometerReadingChangedEventArgs* This);
    ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CDevices_CSensors_CIBarometerReadingChangedEventArgs* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CDevices_CSensors_CIBarometerReadingChangedEventArgs* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CDevices_CSensors_CIBarometerReadingChangedEventArgs* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CDevices_CSensors_CIBarometerReadingChangedEventArgs* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* get_Reading)(__x_ABI_CWindows_CDevices_CSensors_CIBarometerReadingChangedEventArgs* This,
        __x_ABI_CWindows_CDevices_CSensors_CIBarometerReading** value);

    END_INTERFACE
} __x_ABI_CWindows_CDevices_CSensors_CIBarometerReadingChangedEventArgsVtbl;

interface __x_ABI_CWindows_CDevices_CSensors_CIBarometerReadingChangedEventArgs
{
    CONST_VTBL struct __x_ABI_CWindows_CDevices_CSensors_CIBarometerReadingChangedEventArgsVtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __x_ABI_CWindows_CDevices_CSensors_CIBarometerReadingChangedEventArgs_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __x_ABI_CWindows_CDevices_CSensors_CIBarometerReadingChangedEventArgs_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __x_ABI_CWindows_CDevices_CSensors_CIBarometerReadingChangedEventArgs_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __x_ABI_CWindows_CDevices_CSensors_CIBarometerReadingChangedEventArgs_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __x_ABI_CWindows_CDevices_CSensors_CIBarometerReadingChangedEventArgs_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __x_ABI_CWindows_CDevices_CSensors_CIBarometerReadingChangedEventArgs_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __x_ABI_CWindows_CDevices_CSensors_CIBarometerReadingChangedEventArgs_get_Reading(This, value) \
    ((This)->lpVtbl->get_Reading(This, value))

#endif /* COBJMACROS */

EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CSensors_CIBarometerReadingChangedEventArgs;
#endif /* !defined(____x_ABI_CWindows_CDevices_CSensors_CIBarometerReadingChangedEventArgs_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Interface Windows.Devices.Sensors.IBarometerStatics
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Interface is a part of the implementation of type Windows.Devices.Sensors.Barometer
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____x_ABI_CWindows_CDevices_CSensors_CIBarometerStatics_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CDevices_CSensors_CIBarometerStatics_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Devices_Sensors_IBarometerStatics[] = L"Windows.Devices.Sensors.IBarometerStatics";
typedef struct __x_ABI_CWindows_CDevices_CSensors_CIBarometerStaticsVtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CDevices_CSensors_CIBarometerStatics* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CDevices_CSensors_CIBarometerStatics* This);
    ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CDevices_CSensors_CIBarometerStatics* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CDevices_CSensors_CIBarometerStatics* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CDevices_CSensors_CIBarometerStatics* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CDevices_CSensors_CIBarometerStatics* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* GetDefault)(__x_ABI_CWindows_CDevices_CSensors_CIBarometerStatics* This,
        __x_ABI_CWindows_CDevices_CSensors_CIBarometer** result);

    END_INTERFACE
} __x_ABI_CWindows_CDevices_CSensors_CIBarometerStaticsVtbl;

interface __x_ABI_CWindows_CDevices_CSensors_CIBarometerStatics
{
    CONST_VTBL struct __x_ABI_CWindows_CDevices_CSensors_CIBarometerStaticsVtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __x_ABI_CWindows_CDevices_CSensors_CIBarometerStatics_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __x_ABI_CWindows_CDevices_CSensors_CIBarometerStatics_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __x_ABI_CWindows_CDevices_CSensors_CIBarometerStatics_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __x_ABI_CWindows_CDevices_CSensors_CIBarometerStatics_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __x_ABI_CWindows_CDevices_CSensors_CIBarometerStatics_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __x_ABI_CWindows_CDevices_CSensors_CIBarometerStatics_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __x_ABI_CWindows_CDevices_CSensors_CIBarometerStatics_GetDefault(This, result) \
    ((This)->lpVtbl->GetDefault(This, result))

#endif /* COBJMACROS */

EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CSensors_CIBarometerStatics;
#endif /* !defined(____x_ABI_CWindows_CDevices_CSensors_CIBarometerStatics_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Interface Windows.Devices.Sensors.IBarometerStatics2
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 5.0
 *
 * Interface is a part of the implementation of type Windows.Devices.Sensors.Barometer
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x50000
#if !defined(____x_ABI_CWindows_CDevices_CSensors_CIBarometerStatics2_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CDevices_CSensors_CIBarometerStatics2_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Devices_Sensors_IBarometerStatics2[] = L"Windows.Devices.Sensors.IBarometerStatics2";
typedef struct __x_ABI_CWindows_CDevices_CSensors_CIBarometerStatics2Vtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CDevices_CSensors_CIBarometerStatics2* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CDevices_CSensors_CIBarometerStatics2* This);
    ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CDevices_CSensors_CIBarometerStatics2* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CDevices_CSensors_CIBarometerStatics2* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CDevices_CSensors_CIBarometerStatics2* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CDevices_CSensors_CIBarometerStatics2* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* FromIdAsync)(__x_ABI_CWindows_CDevices_CSensors_CIBarometerStatics2* This,
        HSTRING deviceId,
        __FIAsyncOperation_1_Windows__CDevices__CSensors__CBarometer** operation);
    HRESULT (STDMETHODCALLTYPE* GetDeviceSelector)(__x_ABI_CWindows_CDevices_CSensors_CIBarometerStatics2* This,
        HSTRING* result);

    END_INTERFACE
} __x_ABI_CWindows_CDevices_CSensors_CIBarometerStatics2Vtbl;

interface __x_ABI_CWindows_CDevices_CSensors_CIBarometerStatics2
{
    CONST_VTBL struct __x_ABI_CWindows_CDevices_CSensors_CIBarometerStatics2Vtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __x_ABI_CWindows_CDevices_CSensors_CIBarometerStatics2_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __x_ABI_CWindows_CDevices_CSensors_CIBarometerStatics2_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __x_ABI_CWindows_CDevices_CSensors_CIBarometerStatics2_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __x_ABI_CWindows_CDevices_CSensors_CIBarometerStatics2_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __x_ABI_CWindows_CDevices_CSensors_CIBarometerStatics2_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __x_ABI_CWindows_CDevices_CSensors_CIBarometerStatics2_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __x_ABI_CWindows_CDevices_CSensors_CIBarometerStatics2_FromIdAsync(This, deviceId, operation) \
    ((This)->lpVtbl->FromIdAsync(This, deviceId, operation))

#define __x_ABI_CWindows_CDevices_CSensors_CIBarometerStatics2_GetDeviceSelector(This, result) \
    ((This)->lpVtbl->GetDeviceSelector(This, result))

#endif /* COBJMACROS */

EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CSensors_CIBarometerStatics2;
#endif /* !defined(____x_ABI_CWindows_CDevices_CSensors_CIBarometerStatics2_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x50000

/*
 *
 * Interface Windows.Devices.Sensors.ICompass
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Interface is a part of the implementation of type Windows.Devices.Sensors.Compass
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____x_ABI_CWindows_CDevices_CSensors_CICompass_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CDevices_CSensors_CICompass_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Devices_Sensors_ICompass[] = L"Windows.Devices.Sensors.ICompass";
typedef struct __x_ABI_CWindows_CDevices_CSensors_CICompassVtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CDevices_CSensors_CICompass* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CDevices_CSensors_CICompass* This);
    ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CDevices_CSensors_CICompass* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CDevices_CSensors_CICompass* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CDevices_CSensors_CICompass* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CDevices_CSensors_CICompass* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* GetCurrentReading)(__x_ABI_CWindows_CDevices_CSensors_CICompass* This,
        __x_ABI_CWindows_CDevices_CSensors_CICompassReading** value);
    HRESULT (STDMETHODCALLTYPE* get_MinimumReportInterval)(__x_ABI_CWindows_CDevices_CSensors_CICompass* This,
        UINT32* value);
    HRESULT (STDMETHODCALLTYPE* put_ReportInterval)(__x_ABI_CWindows_CDevices_CSensors_CICompass* This,
        UINT32 value);
    HRESULT (STDMETHODCALLTYPE* get_ReportInterval)(__x_ABI_CWindows_CDevices_CSensors_CICompass* This,
        UINT32* value);
    HRESULT (STDMETHODCALLTYPE* add_ReadingChanged)(__x_ABI_CWindows_CDevices_CSensors_CICompass* This,
        __FITypedEventHandler_2_Windows__CDevices__CSensors__CCompass_Windows__CDevices__CSensors__CCompassReadingChangedEventArgs* handler,
        EventRegistrationToken* token);
    HRESULT (STDMETHODCALLTYPE* remove_ReadingChanged)(__x_ABI_CWindows_CDevices_CSensors_CICompass* This,
        EventRegistrationToken token);

    END_INTERFACE
} __x_ABI_CWindows_CDevices_CSensors_CICompassVtbl;

interface __x_ABI_CWindows_CDevices_CSensors_CICompass
{
    CONST_VTBL struct __x_ABI_CWindows_CDevices_CSensors_CICompassVtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __x_ABI_CWindows_CDevices_CSensors_CICompass_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __x_ABI_CWindows_CDevices_CSensors_CICompass_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __x_ABI_CWindows_CDevices_CSensors_CICompass_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __x_ABI_CWindows_CDevices_CSensors_CICompass_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __x_ABI_CWindows_CDevices_CSensors_CICompass_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __x_ABI_CWindows_CDevices_CSensors_CICompass_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __x_ABI_CWindows_CDevices_CSensors_CICompass_GetCurrentReading(This, value) \
    ((This)->lpVtbl->GetCurrentReading(This, value))

#define __x_ABI_CWindows_CDevices_CSensors_CICompass_get_MinimumReportInterval(This, value) \
    ((This)->lpVtbl->get_MinimumReportInterval(This, value))

#define __x_ABI_CWindows_CDevices_CSensors_CICompass_put_ReportInterval(This, value) \
    ((This)->lpVtbl->put_ReportInterval(This, value))

#define __x_ABI_CWindows_CDevices_CSensors_CICompass_get_ReportInterval(This, value) \
    ((This)->lpVtbl->get_ReportInterval(This, value))

#define __x_ABI_CWindows_CDevices_CSensors_CICompass_add_ReadingChanged(This, handler, token) \
    ((This)->lpVtbl->add_ReadingChanged(This, handler, token))

#define __x_ABI_CWindows_CDevices_CSensors_CICompass_remove_ReadingChanged(This, token) \
    ((This)->lpVtbl->remove_ReadingChanged(This, token))

#endif /* COBJMACROS */

EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CSensors_CICompass;
#endif /* !defined(____x_ABI_CWindows_CDevices_CSensors_CICompass_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Interface Windows.Devices.Sensors.ICompass2
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Interface is a part of the implementation of type Windows.Devices.Sensors.Compass
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____x_ABI_CWindows_CDevices_CSensors_CICompass2_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CDevices_CSensors_CICompass2_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Devices_Sensors_ICompass2[] = L"Windows.Devices.Sensors.ICompass2";
typedef struct __x_ABI_CWindows_CDevices_CSensors_CICompass2Vtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CDevices_CSensors_CICompass2* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CDevices_CSensors_CICompass2* This);
    ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CDevices_CSensors_CICompass2* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CDevices_CSensors_CICompass2* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CDevices_CSensors_CICompass2* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CDevices_CSensors_CICompass2* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* put_ReadingTransform)(__x_ABI_CWindows_CDevices_CSensors_CICompass2* This,
        enum __x_ABI_CWindows_CGraphics_CDisplay_CDisplayOrientations value);
    HRESULT (STDMETHODCALLTYPE* get_ReadingTransform)(__x_ABI_CWindows_CDevices_CSensors_CICompass2* This,
        enum __x_ABI_CWindows_CGraphics_CDisplay_CDisplayOrientations* value);

    END_INTERFACE
} __x_ABI_CWindows_CDevices_CSensors_CICompass2Vtbl;

interface __x_ABI_CWindows_CDevices_CSensors_CICompass2
{
    CONST_VTBL struct __x_ABI_CWindows_CDevices_CSensors_CICompass2Vtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __x_ABI_CWindows_CDevices_CSensors_CICompass2_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __x_ABI_CWindows_CDevices_CSensors_CICompass2_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __x_ABI_CWindows_CDevices_CSensors_CICompass2_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __x_ABI_CWindows_CDevices_CSensors_CICompass2_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __x_ABI_CWindows_CDevices_CSensors_CICompass2_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __x_ABI_CWindows_CDevices_CSensors_CICompass2_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __x_ABI_CWindows_CDevices_CSensors_CICompass2_put_ReadingTransform(This, value) \
    ((This)->lpVtbl->put_ReadingTransform(This, value))

#define __x_ABI_CWindows_CDevices_CSensors_CICompass2_get_ReadingTransform(This, value) \
    ((This)->lpVtbl->get_ReadingTransform(This, value))

#endif /* COBJMACROS */

EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CSensors_CICompass2;
#endif /* !defined(____x_ABI_CWindows_CDevices_CSensors_CICompass2_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Interface Windows.Devices.Sensors.ICompass3
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 5.0
 *
 * Interface is a part of the implementation of type Windows.Devices.Sensors.Compass
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x50000
#if !defined(____x_ABI_CWindows_CDevices_CSensors_CICompass3_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CDevices_CSensors_CICompass3_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Devices_Sensors_ICompass3[] = L"Windows.Devices.Sensors.ICompass3";
typedef struct __x_ABI_CWindows_CDevices_CSensors_CICompass3Vtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CDevices_CSensors_CICompass3* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CDevices_CSensors_CICompass3* This);
    ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CDevices_CSensors_CICompass3* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CDevices_CSensors_CICompass3* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CDevices_CSensors_CICompass3* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CDevices_CSensors_CICompass3* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* put_ReportLatency)(__x_ABI_CWindows_CDevices_CSensors_CICompass3* This,
        UINT32 value);
    HRESULT (STDMETHODCALLTYPE* get_ReportLatency)(__x_ABI_CWindows_CDevices_CSensors_CICompass3* This,
        UINT32* value);
    HRESULT (STDMETHODCALLTYPE* get_MaxBatchSize)(__x_ABI_CWindows_CDevices_CSensors_CICompass3* This,
        UINT32* value);

    END_INTERFACE
} __x_ABI_CWindows_CDevices_CSensors_CICompass3Vtbl;

interface __x_ABI_CWindows_CDevices_CSensors_CICompass3
{
    CONST_VTBL struct __x_ABI_CWindows_CDevices_CSensors_CICompass3Vtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __x_ABI_CWindows_CDevices_CSensors_CICompass3_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __x_ABI_CWindows_CDevices_CSensors_CICompass3_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __x_ABI_CWindows_CDevices_CSensors_CICompass3_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __x_ABI_CWindows_CDevices_CSensors_CICompass3_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __x_ABI_CWindows_CDevices_CSensors_CICompass3_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __x_ABI_CWindows_CDevices_CSensors_CICompass3_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __x_ABI_CWindows_CDevices_CSensors_CICompass3_put_ReportLatency(This, value) \
    ((This)->lpVtbl->put_ReportLatency(This, value))

#define __x_ABI_CWindows_CDevices_CSensors_CICompass3_get_ReportLatency(This, value) \
    ((This)->lpVtbl->get_ReportLatency(This, value))

#define __x_ABI_CWindows_CDevices_CSensors_CICompass3_get_MaxBatchSize(This, value) \
    ((This)->lpVtbl->get_MaxBatchSize(This, value))

#endif /* COBJMACROS */

EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CSensors_CICompass3;
#endif /* !defined(____x_ABI_CWindows_CDevices_CSensors_CICompass3_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x50000

/*
 *
 * Interface Windows.Devices.Sensors.ICompass4
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 10.0
 *
 * Interface is a part of the implementation of type Windows.Devices.Sensors.Compass
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0xa0000
#if !defined(____x_ABI_CWindows_CDevices_CSensors_CICompass4_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CDevices_CSensors_CICompass4_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Devices_Sensors_ICompass4[] = L"Windows.Devices.Sensors.ICompass4";
typedef struct __x_ABI_CWindows_CDevices_CSensors_CICompass4Vtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CDevices_CSensors_CICompass4* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CDevices_CSensors_CICompass4* This);
    ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CDevices_CSensors_CICompass4* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CDevices_CSensors_CICompass4* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CDevices_CSensors_CICompass4* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CDevices_CSensors_CICompass4* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* get_ReportThreshold)(__x_ABI_CWindows_CDevices_CSensors_CICompass4* This,
        __x_ABI_CWindows_CDevices_CSensors_CICompassDataThreshold** value);

    END_INTERFACE
} __x_ABI_CWindows_CDevices_CSensors_CICompass4Vtbl;

interface __x_ABI_CWindows_CDevices_CSensors_CICompass4
{
    CONST_VTBL struct __x_ABI_CWindows_CDevices_CSensors_CICompass4Vtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __x_ABI_CWindows_CDevices_CSensors_CICompass4_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __x_ABI_CWindows_CDevices_CSensors_CICompass4_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __x_ABI_CWindows_CDevices_CSensors_CICompass4_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __x_ABI_CWindows_CDevices_CSensors_CICompass4_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __x_ABI_CWindows_CDevices_CSensors_CICompass4_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __x_ABI_CWindows_CDevices_CSensors_CICompass4_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __x_ABI_CWindows_CDevices_CSensors_CICompass4_get_ReportThreshold(This, value) \
    ((This)->lpVtbl->get_ReportThreshold(This, value))

#endif /* COBJMACROS */

EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CSensors_CICompass4;
#endif /* !defined(____x_ABI_CWindows_CDevices_CSensors_CICompass4_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0xa0000

/*
 *
 * Interface Windows.Devices.Sensors.ICompassDataThreshold
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 10.0
 *
 * Interface is a part of the implementation of type Windows.Devices.Sensors.CompassDataThreshold
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0xa0000
#if !defined(____x_ABI_CWindows_CDevices_CSensors_CICompassDataThreshold_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CDevices_CSensors_CICompassDataThreshold_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Devices_Sensors_ICompassDataThreshold[] = L"Windows.Devices.Sensors.ICompassDataThreshold";
typedef struct __x_ABI_CWindows_CDevices_CSensors_CICompassDataThresholdVtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CDevices_CSensors_CICompassDataThreshold* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CDevices_CSensors_CICompassDataThreshold* This);
    ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CDevices_CSensors_CICompassDataThreshold* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CDevices_CSensors_CICompassDataThreshold* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CDevices_CSensors_CICompassDataThreshold* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CDevices_CSensors_CICompassDataThreshold* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* get_Degrees)(__x_ABI_CWindows_CDevices_CSensors_CICompassDataThreshold* This,
        DOUBLE* value);
    HRESULT (STDMETHODCALLTYPE* put_Degrees)(__x_ABI_CWindows_CDevices_CSensors_CICompassDataThreshold* This,
        DOUBLE value);

    END_INTERFACE
} __x_ABI_CWindows_CDevices_CSensors_CICompassDataThresholdVtbl;

interface __x_ABI_CWindows_CDevices_CSensors_CICompassDataThreshold
{
    CONST_VTBL struct __x_ABI_CWindows_CDevices_CSensors_CICompassDataThresholdVtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __x_ABI_CWindows_CDevices_CSensors_CICompassDataThreshold_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __x_ABI_CWindows_CDevices_CSensors_CICompassDataThreshold_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __x_ABI_CWindows_CDevices_CSensors_CICompassDataThreshold_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __x_ABI_CWindows_CDevices_CSensors_CICompassDataThreshold_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __x_ABI_CWindows_CDevices_CSensors_CICompassDataThreshold_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __x_ABI_CWindows_CDevices_CSensors_CICompassDataThreshold_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __x_ABI_CWindows_CDevices_CSensors_CICompassDataThreshold_get_Degrees(This, value) \
    ((This)->lpVtbl->get_Degrees(This, value))

#define __x_ABI_CWindows_CDevices_CSensors_CICompassDataThreshold_put_Degrees(This, value) \
    ((This)->lpVtbl->put_Degrees(This, value))

#endif /* COBJMACROS */

EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CSensors_CICompassDataThreshold;
#endif /* !defined(____x_ABI_CWindows_CDevices_CSensors_CICompassDataThreshold_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0xa0000

/*
 *
 * Interface Windows.Devices.Sensors.ICompassDeviceId
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Interface is a part of the implementation of type Windows.Devices.Sensors.Compass
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____x_ABI_CWindows_CDevices_CSensors_CICompassDeviceId_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CDevices_CSensors_CICompassDeviceId_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Devices_Sensors_ICompassDeviceId[] = L"Windows.Devices.Sensors.ICompassDeviceId";
typedef struct __x_ABI_CWindows_CDevices_CSensors_CICompassDeviceIdVtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CDevices_CSensors_CICompassDeviceId* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CDevices_CSensors_CICompassDeviceId* This);
    ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CDevices_CSensors_CICompassDeviceId* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CDevices_CSensors_CICompassDeviceId* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CDevices_CSensors_CICompassDeviceId* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CDevices_CSensors_CICompassDeviceId* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* get_DeviceId)(__x_ABI_CWindows_CDevices_CSensors_CICompassDeviceId* This,
        HSTRING* value);

    END_INTERFACE
} __x_ABI_CWindows_CDevices_CSensors_CICompassDeviceIdVtbl;

interface __x_ABI_CWindows_CDevices_CSensors_CICompassDeviceId
{
    CONST_VTBL struct __x_ABI_CWindows_CDevices_CSensors_CICompassDeviceIdVtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __x_ABI_CWindows_CDevices_CSensors_CICompassDeviceId_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __x_ABI_CWindows_CDevices_CSensors_CICompassDeviceId_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __x_ABI_CWindows_CDevices_CSensors_CICompassDeviceId_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __x_ABI_CWindows_CDevices_CSensors_CICompassDeviceId_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __x_ABI_CWindows_CDevices_CSensors_CICompassDeviceId_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __x_ABI_CWindows_CDevices_CSensors_CICompassDeviceId_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __x_ABI_CWindows_CDevices_CSensors_CICompassDeviceId_get_DeviceId(This, value) \
    ((This)->lpVtbl->get_DeviceId(This, value))

#endif /* COBJMACROS */

EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CSensors_CICompassDeviceId;
#endif /* !defined(____x_ABI_CWindows_CDevices_CSensors_CICompassDeviceId_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Interface Windows.Devices.Sensors.ICompassReading
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Interface is a part of the implementation of type Windows.Devices.Sensors.CompassReading
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____x_ABI_CWindows_CDevices_CSensors_CICompassReading_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CDevices_CSensors_CICompassReading_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Devices_Sensors_ICompassReading[] = L"Windows.Devices.Sensors.ICompassReading";
typedef struct __x_ABI_CWindows_CDevices_CSensors_CICompassReadingVtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CDevices_CSensors_CICompassReading* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CDevices_CSensors_CICompassReading* This);
    ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CDevices_CSensors_CICompassReading* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CDevices_CSensors_CICompassReading* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CDevices_CSensors_CICompassReading* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CDevices_CSensors_CICompassReading* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* get_Timestamp)(__x_ABI_CWindows_CDevices_CSensors_CICompassReading* This,
        struct __x_ABI_CWindows_CFoundation_CDateTime* value);
    HRESULT (STDMETHODCALLTYPE* get_HeadingMagneticNorth)(__x_ABI_CWindows_CDevices_CSensors_CICompassReading* This,
        DOUBLE* value);
    HRESULT (STDMETHODCALLTYPE* get_HeadingTrueNorth)(__x_ABI_CWindows_CDevices_CSensors_CICompassReading* This,
        __FIReference_1_double** value);

    END_INTERFACE
} __x_ABI_CWindows_CDevices_CSensors_CICompassReadingVtbl;

interface __x_ABI_CWindows_CDevices_CSensors_CICompassReading
{
    CONST_VTBL struct __x_ABI_CWindows_CDevices_CSensors_CICompassReadingVtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __x_ABI_CWindows_CDevices_CSensors_CICompassReading_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __x_ABI_CWindows_CDevices_CSensors_CICompassReading_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __x_ABI_CWindows_CDevices_CSensors_CICompassReading_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __x_ABI_CWindows_CDevices_CSensors_CICompassReading_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __x_ABI_CWindows_CDevices_CSensors_CICompassReading_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __x_ABI_CWindows_CDevices_CSensors_CICompassReading_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __x_ABI_CWindows_CDevices_CSensors_CICompassReading_get_Timestamp(This, value) \
    ((This)->lpVtbl->get_Timestamp(This, value))

#define __x_ABI_CWindows_CDevices_CSensors_CICompassReading_get_HeadingMagneticNorth(This, value) \
    ((This)->lpVtbl->get_HeadingMagneticNorth(This, value))

#define __x_ABI_CWindows_CDevices_CSensors_CICompassReading_get_HeadingTrueNorth(This, value) \
    ((This)->lpVtbl->get_HeadingTrueNorth(This, value))

#endif /* COBJMACROS */

EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CSensors_CICompassReading;
#endif /* !defined(____x_ABI_CWindows_CDevices_CSensors_CICompassReading_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Interface Windows.Devices.Sensors.ICompassReading2
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 5.0
 *
 * Interface is a part of the implementation of type Windows.Devices.Sensors.CompassReading
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x50000
#if !defined(____x_ABI_CWindows_CDevices_CSensors_CICompassReading2_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CDevices_CSensors_CICompassReading2_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Devices_Sensors_ICompassReading2[] = L"Windows.Devices.Sensors.ICompassReading2";
typedef struct __x_ABI_CWindows_CDevices_CSensors_CICompassReading2Vtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CDevices_CSensors_CICompassReading2* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CDevices_CSensors_CICompassReading2* This);
    ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CDevices_CSensors_CICompassReading2* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CDevices_CSensors_CICompassReading2* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CDevices_CSensors_CICompassReading2* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CDevices_CSensors_CICompassReading2* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* get_PerformanceCount)(__x_ABI_CWindows_CDevices_CSensors_CICompassReading2* This,
        __FIReference_1_Windows__CFoundation__CTimeSpan** value);
    HRESULT (STDMETHODCALLTYPE* get_Properties)(__x_ABI_CWindows_CDevices_CSensors_CICompassReading2* This,
        __FIMapView_2_HSTRING_IInspectable** value);

    END_INTERFACE
} __x_ABI_CWindows_CDevices_CSensors_CICompassReading2Vtbl;

interface __x_ABI_CWindows_CDevices_CSensors_CICompassReading2
{
    CONST_VTBL struct __x_ABI_CWindows_CDevices_CSensors_CICompassReading2Vtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __x_ABI_CWindows_CDevices_CSensors_CICompassReading2_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __x_ABI_CWindows_CDevices_CSensors_CICompassReading2_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __x_ABI_CWindows_CDevices_CSensors_CICompassReading2_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __x_ABI_CWindows_CDevices_CSensors_CICompassReading2_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __x_ABI_CWindows_CDevices_CSensors_CICompassReading2_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __x_ABI_CWindows_CDevices_CSensors_CICompassReading2_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __x_ABI_CWindows_CDevices_CSensors_CICompassReading2_get_PerformanceCount(This, value) \
    ((This)->lpVtbl->get_PerformanceCount(This, value))

#define __x_ABI_CWindows_CDevices_CSensors_CICompassReading2_get_Properties(This, value) \
    ((This)->lpVtbl->get_Properties(This, value))

#endif /* COBJMACROS */

EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CSensors_CICompassReading2;
#endif /* !defined(____x_ABI_CWindows_CDevices_CSensors_CICompassReading2_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x50000

/*
 *
 * Interface Windows.Devices.Sensors.ICompassReadingChangedEventArgs
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Interface is a part of the implementation of type Windows.Devices.Sensors.CompassReadingChangedEventArgs
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____x_ABI_CWindows_CDevices_CSensors_CICompassReadingChangedEventArgs_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CDevices_CSensors_CICompassReadingChangedEventArgs_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Devices_Sensors_ICompassReadingChangedEventArgs[] = L"Windows.Devices.Sensors.ICompassReadingChangedEventArgs";
typedef struct __x_ABI_CWindows_CDevices_CSensors_CICompassReadingChangedEventArgsVtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CDevices_CSensors_CICompassReadingChangedEventArgs* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CDevices_CSensors_CICompassReadingChangedEventArgs* This);
    ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CDevices_CSensors_CICompassReadingChangedEventArgs* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CDevices_CSensors_CICompassReadingChangedEventArgs* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CDevices_CSensors_CICompassReadingChangedEventArgs* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CDevices_CSensors_CICompassReadingChangedEventArgs* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* get_Reading)(__x_ABI_CWindows_CDevices_CSensors_CICompassReadingChangedEventArgs* This,
        __x_ABI_CWindows_CDevices_CSensors_CICompassReading** value);

    END_INTERFACE
} __x_ABI_CWindows_CDevices_CSensors_CICompassReadingChangedEventArgsVtbl;

interface __x_ABI_CWindows_CDevices_CSensors_CICompassReadingChangedEventArgs
{
    CONST_VTBL struct __x_ABI_CWindows_CDevices_CSensors_CICompassReadingChangedEventArgsVtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __x_ABI_CWindows_CDevices_CSensors_CICompassReadingChangedEventArgs_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __x_ABI_CWindows_CDevices_CSensors_CICompassReadingChangedEventArgs_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __x_ABI_CWindows_CDevices_CSensors_CICompassReadingChangedEventArgs_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __x_ABI_CWindows_CDevices_CSensors_CICompassReadingChangedEventArgs_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __x_ABI_CWindows_CDevices_CSensors_CICompassReadingChangedEventArgs_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __x_ABI_CWindows_CDevices_CSensors_CICompassReadingChangedEventArgs_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __x_ABI_CWindows_CDevices_CSensors_CICompassReadingChangedEventArgs_get_Reading(This, value) \
    ((This)->lpVtbl->get_Reading(This, value))

#endif /* COBJMACROS */

EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CSensors_CICompassReadingChangedEventArgs;
#endif /* !defined(____x_ABI_CWindows_CDevices_CSensors_CICompassReadingChangedEventArgs_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Interface Windows.Devices.Sensors.ICompassReadingHeadingAccuracy
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Interface is a part of the implementation of type Windows.Devices.Sensors.CompassReading
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____x_ABI_CWindows_CDevices_CSensors_CICompassReadingHeadingAccuracy_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CDevices_CSensors_CICompassReadingHeadingAccuracy_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Devices_Sensors_ICompassReadingHeadingAccuracy[] = L"Windows.Devices.Sensors.ICompassReadingHeadingAccuracy";
typedef struct __x_ABI_CWindows_CDevices_CSensors_CICompassReadingHeadingAccuracyVtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CDevices_CSensors_CICompassReadingHeadingAccuracy* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CDevices_CSensors_CICompassReadingHeadingAccuracy* This);
    ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CDevices_CSensors_CICompassReadingHeadingAccuracy* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CDevices_CSensors_CICompassReadingHeadingAccuracy* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CDevices_CSensors_CICompassReadingHeadingAccuracy* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CDevices_CSensors_CICompassReadingHeadingAccuracy* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* get_HeadingAccuracy)(__x_ABI_CWindows_CDevices_CSensors_CICompassReadingHeadingAccuracy* This,
        enum __x_ABI_CWindows_CDevices_CSensors_CMagnetometerAccuracy* value);

    END_INTERFACE
} __x_ABI_CWindows_CDevices_CSensors_CICompassReadingHeadingAccuracyVtbl;

interface __x_ABI_CWindows_CDevices_CSensors_CICompassReadingHeadingAccuracy
{
    CONST_VTBL struct __x_ABI_CWindows_CDevices_CSensors_CICompassReadingHeadingAccuracyVtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __x_ABI_CWindows_CDevices_CSensors_CICompassReadingHeadingAccuracy_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __x_ABI_CWindows_CDevices_CSensors_CICompassReadingHeadingAccuracy_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __x_ABI_CWindows_CDevices_CSensors_CICompassReadingHeadingAccuracy_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __x_ABI_CWindows_CDevices_CSensors_CICompassReadingHeadingAccuracy_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __x_ABI_CWindows_CDevices_CSensors_CICompassReadingHeadingAccuracy_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __x_ABI_CWindows_CDevices_CSensors_CICompassReadingHeadingAccuracy_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __x_ABI_CWindows_CDevices_CSensors_CICompassReadingHeadingAccuracy_get_HeadingAccuracy(This, value) \
    ((This)->lpVtbl->get_HeadingAccuracy(This, value))

#endif /* COBJMACROS */

EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CSensors_CICompassReadingHeadingAccuracy;
#endif /* !defined(____x_ABI_CWindows_CDevices_CSensors_CICompassReadingHeadingAccuracy_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Interface Windows.Devices.Sensors.ICompassStatics
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Interface is a part of the implementation of type Windows.Devices.Sensors.Compass
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____x_ABI_CWindows_CDevices_CSensors_CICompassStatics_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CDevices_CSensors_CICompassStatics_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Devices_Sensors_ICompassStatics[] = L"Windows.Devices.Sensors.ICompassStatics";
typedef struct __x_ABI_CWindows_CDevices_CSensors_CICompassStaticsVtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CDevices_CSensors_CICompassStatics* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CDevices_CSensors_CICompassStatics* This);
    ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CDevices_CSensors_CICompassStatics* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CDevices_CSensors_CICompassStatics* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CDevices_CSensors_CICompassStatics* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CDevices_CSensors_CICompassStatics* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* GetDefault)(__x_ABI_CWindows_CDevices_CSensors_CICompassStatics* This,
        __x_ABI_CWindows_CDevices_CSensors_CICompass** result);

    END_INTERFACE
} __x_ABI_CWindows_CDevices_CSensors_CICompassStaticsVtbl;

interface __x_ABI_CWindows_CDevices_CSensors_CICompassStatics
{
    CONST_VTBL struct __x_ABI_CWindows_CDevices_CSensors_CICompassStaticsVtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __x_ABI_CWindows_CDevices_CSensors_CICompassStatics_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __x_ABI_CWindows_CDevices_CSensors_CICompassStatics_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __x_ABI_CWindows_CDevices_CSensors_CICompassStatics_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __x_ABI_CWindows_CDevices_CSensors_CICompassStatics_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __x_ABI_CWindows_CDevices_CSensors_CICompassStatics_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __x_ABI_CWindows_CDevices_CSensors_CICompassStatics_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __x_ABI_CWindows_CDevices_CSensors_CICompassStatics_GetDefault(This, result) \
    ((This)->lpVtbl->GetDefault(This, result))

#endif /* COBJMACROS */

EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CSensors_CICompassStatics;
#endif /* !defined(____x_ABI_CWindows_CDevices_CSensors_CICompassStatics_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Interface Windows.Devices.Sensors.ICompassStatics2
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 5.0
 *
 * Interface is a part of the implementation of type Windows.Devices.Sensors.Compass
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x50000
#if !defined(____x_ABI_CWindows_CDevices_CSensors_CICompassStatics2_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CDevices_CSensors_CICompassStatics2_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Devices_Sensors_ICompassStatics2[] = L"Windows.Devices.Sensors.ICompassStatics2";
typedef struct __x_ABI_CWindows_CDevices_CSensors_CICompassStatics2Vtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CDevices_CSensors_CICompassStatics2* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CDevices_CSensors_CICompassStatics2* This);
    ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CDevices_CSensors_CICompassStatics2* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CDevices_CSensors_CICompassStatics2* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CDevices_CSensors_CICompassStatics2* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CDevices_CSensors_CICompassStatics2* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* GetDeviceSelector)(__x_ABI_CWindows_CDevices_CSensors_CICompassStatics2* This,
        HSTRING* result);
    HRESULT (STDMETHODCALLTYPE* FromIdAsync)(__x_ABI_CWindows_CDevices_CSensors_CICompassStatics2* This,
        HSTRING deviceId,
        __FIAsyncOperation_1_Windows__CDevices__CSensors__CCompass** operation);

    END_INTERFACE
} __x_ABI_CWindows_CDevices_CSensors_CICompassStatics2Vtbl;

interface __x_ABI_CWindows_CDevices_CSensors_CICompassStatics2
{
    CONST_VTBL struct __x_ABI_CWindows_CDevices_CSensors_CICompassStatics2Vtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __x_ABI_CWindows_CDevices_CSensors_CICompassStatics2_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __x_ABI_CWindows_CDevices_CSensors_CICompassStatics2_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __x_ABI_CWindows_CDevices_CSensors_CICompassStatics2_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __x_ABI_CWindows_CDevices_CSensors_CICompassStatics2_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __x_ABI_CWindows_CDevices_CSensors_CICompassStatics2_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __x_ABI_CWindows_CDevices_CSensors_CICompassStatics2_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __x_ABI_CWindows_CDevices_CSensors_CICompassStatics2_GetDeviceSelector(This, result) \
    ((This)->lpVtbl->GetDeviceSelector(This, result))

#define __x_ABI_CWindows_CDevices_CSensors_CICompassStatics2_FromIdAsync(This, deviceId, operation) \
    ((This)->lpVtbl->FromIdAsync(This, deviceId, operation))

#endif /* COBJMACROS */

EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CSensors_CICompassStatics2;
#endif /* !defined(____x_ABI_CWindows_CDevices_CSensors_CICompassStatics2_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x50000

/*
 *
 * Interface Windows.Devices.Sensors.IGyrometer
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Interface is a part of the implementation of type Windows.Devices.Sensors.Gyrometer
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____x_ABI_CWindows_CDevices_CSensors_CIGyrometer_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CDevices_CSensors_CIGyrometer_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Devices_Sensors_IGyrometer[] = L"Windows.Devices.Sensors.IGyrometer";
typedef struct __x_ABI_CWindows_CDevices_CSensors_CIGyrometerVtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CDevices_CSensors_CIGyrometer* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CDevices_CSensors_CIGyrometer* This);
    ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CDevices_CSensors_CIGyrometer* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CDevices_CSensors_CIGyrometer* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CDevices_CSensors_CIGyrometer* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CDevices_CSensors_CIGyrometer* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* GetCurrentReading)(__x_ABI_CWindows_CDevices_CSensors_CIGyrometer* This,
        __x_ABI_CWindows_CDevices_CSensors_CIGyrometerReading** value);
    HRESULT (STDMETHODCALLTYPE* get_MinimumReportInterval)(__x_ABI_CWindows_CDevices_CSensors_CIGyrometer* This,
        UINT32* value);
    HRESULT (STDMETHODCALLTYPE* put_ReportInterval)(__x_ABI_CWindows_CDevices_CSensors_CIGyrometer* This,
        UINT32 value);
    HRESULT (STDMETHODCALLTYPE* get_ReportInterval)(__x_ABI_CWindows_CDevices_CSensors_CIGyrometer* This,
        UINT32* value);
    HRESULT (STDMETHODCALLTYPE* add_ReadingChanged)(__x_ABI_CWindows_CDevices_CSensors_CIGyrometer* This,
        __FITypedEventHandler_2_Windows__CDevices__CSensors__CGyrometer_Windows__CDevices__CSensors__CGyrometerReadingChangedEventArgs* handler,
        EventRegistrationToken* token);
    HRESULT (STDMETHODCALLTYPE* remove_ReadingChanged)(__x_ABI_CWindows_CDevices_CSensors_CIGyrometer* This,
        EventRegistrationToken token);

    END_INTERFACE
} __x_ABI_CWindows_CDevices_CSensors_CIGyrometerVtbl;

interface __x_ABI_CWindows_CDevices_CSensors_CIGyrometer
{
    CONST_VTBL struct __x_ABI_CWindows_CDevices_CSensors_CIGyrometerVtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __x_ABI_CWindows_CDevices_CSensors_CIGyrometer_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __x_ABI_CWindows_CDevices_CSensors_CIGyrometer_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __x_ABI_CWindows_CDevices_CSensors_CIGyrometer_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __x_ABI_CWindows_CDevices_CSensors_CIGyrometer_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __x_ABI_CWindows_CDevices_CSensors_CIGyrometer_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __x_ABI_CWindows_CDevices_CSensors_CIGyrometer_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __x_ABI_CWindows_CDevices_CSensors_CIGyrometer_GetCurrentReading(This, value) \
    ((This)->lpVtbl->GetCurrentReading(This, value))

#define __x_ABI_CWindows_CDevices_CSensors_CIGyrometer_get_MinimumReportInterval(This, value) \
    ((This)->lpVtbl->get_MinimumReportInterval(This, value))

#define __x_ABI_CWindows_CDevices_CSensors_CIGyrometer_put_ReportInterval(This, value) \
    ((This)->lpVtbl->put_ReportInterval(This, value))

#define __x_ABI_CWindows_CDevices_CSensors_CIGyrometer_get_ReportInterval(This, value) \
    ((This)->lpVtbl->get_ReportInterval(This, value))

#define __x_ABI_CWindows_CDevices_CSensors_CIGyrometer_add_ReadingChanged(This, handler, token) \
    ((This)->lpVtbl->add_ReadingChanged(This, handler, token))

#define __x_ABI_CWindows_CDevices_CSensors_CIGyrometer_remove_ReadingChanged(This, token) \
    ((This)->lpVtbl->remove_ReadingChanged(This, token))

#endif /* COBJMACROS */

EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CSensors_CIGyrometer;
#endif /* !defined(____x_ABI_CWindows_CDevices_CSensors_CIGyrometer_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Interface Windows.Devices.Sensors.IGyrometer2
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Interface is a part of the implementation of type Windows.Devices.Sensors.Gyrometer
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____x_ABI_CWindows_CDevices_CSensors_CIGyrometer2_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CDevices_CSensors_CIGyrometer2_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Devices_Sensors_IGyrometer2[] = L"Windows.Devices.Sensors.IGyrometer2";
typedef struct __x_ABI_CWindows_CDevices_CSensors_CIGyrometer2Vtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CDevices_CSensors_CIGyrometer2* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CDevices_CSensors_CIGyrometer2* This);
    ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CDevices_CSensors_CIGyrometer2* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CDevices_CSensors_CIGyrometer2* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CDevices_CSensors_CIGyrometer2* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CDevices_CSensors_CIGyrometer2* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* put_ReadingTransform)(__x_ABI_CWindows_CDevices_CSensors_CIGyrometer2* This,
        enum __x_ABI_CWindows_CGraphics_CDisplay_CDisplayOrientations value);
    HRESULT (STDMETHODCALLTYPE* get_ReadingTransform)(__x_ABI_CWindows_CDevices_CSensors_CIGyrometer2* This,
        enum __x_ABI_CWindows_CGraphics_CDisplay_CDisplayOrientations* value);

    END_INTERFACE
} __x_ABI_CWindows_CDevices_CSensors_CIGyrometer2Vtbl;

interface __x_ABI_CWindows_CDevices_CSensors_CIGyrometer2
{
    CONST_VTBL struct __x_ABI_CWindows_CDevices_CSensors_CIGyrometer2Vtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __x_ABI_CWindows_CDevices_CSensors_CIGyrometer2_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __x_ABI_CWindows_CDevices_CSensors_CIGyrometer2_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __x_ABI_CWindows_CDevices_CSensors_CIGyrometer2_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __x_ABI_CWindows_CDevices_CSensors_CIGyrometer2_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __x_ABI_CWindows_CDevices_CSensors_CIGyrometer2_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __x_ABI_CWindows_CDevices_CSensors_CIGyrometer2_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __x_ABI_CWindows_CDevices_CSensors_CIGyrometer2_put_ReadingTransform(This, value) \
    ((This)->lpVtbl->put_ReadingTransform(This, value))

#define __x_ABI_CWindows_CDevices_CSensors_CIGyrometer2_get_ReadingTransform(This, value) \
    ((This)->lpVtbl->get_ReadingTransform(This, value))

#endif /* COBJMACROS */

EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CSensors_CIGyrometer2;
#endif /* !defined(____x_ABI_CWindows_CDevices_CSensors_CIGyrometer2_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Interface Windows.Devices.Sensors.IGyrometer3
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 5.0
 *
 * Interface is a part of the implementation of type Windows.Devices.Sensors.Gyrometer
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x50000
#if !defined(____x_ABI_CWindows_CDevices_CSensors_CIGyrometer3_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CDevices_CSensors_CIGyrometer3_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Devices_Sensors_IGyrometer3[] = L"Windows.Devices.Sensors.IGyrometer3";
typedef struct __x_ABI_CWindows_CDevices_CSensors_CIGyrometer3Vtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CDevices_CSensors_CIGyrometer3* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CDevices_CSensors_CIGyrometer3* This);
    ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CDevices_CSensors_CIGyrometer3* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CDevices_CSensors_CIGyrometer3* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CDevices_CSensors_CIGyrometer3* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CDevices_CSensors_CIGyrometer3* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* put_ReportLatency)(__x_ABI_CWindows_CDevices_CSensors_CIGyrometer3* This,
        UINT32 value);
    HRESULT (STDMETHODCALLTYPE* get_ReportLatency)(__x_ABI_CWindows_CDevices_CSensors_CIGyrometer3* This,
        UINT32* value);
    HRESULT (STDMETHODCALLTYPE* get_MaxBatchSize)(__x_ABI_CWindows_CDevices_CSensors_CIGyrometer3* This,
        UINT32* value);

    END_INTERFACE
} __x_ABI_CWindows_CDevices_CSensors_CIGyrometer3Vtbl;

interface __x_ABI_CWindows_CDevices_CSensors_CIGyrometer3
{
    CONST_VTBL struct __x_ABI_CWindows_CDevices_CSensors_CIGyrometer3Vtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __x_ABI_CWindows_CDevices_CSensors_CIGyrometer3_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __x_ABI_CWindows_CDevices_CSensors_CIGyrometer3_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __x_ABI_CWindows_CDevices_CSensors_CIGyrometer3_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __x_ABI_CWindows_CDevices_CSensors_CIGyrometer3_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __x_ABI_CWindows_CDevices_CSensors_CIGyrometer3_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __x_ABI_CWindows_CDevices_CSensors_CIGyrometer3_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __x_ABI_CWindows_CDevices_CSensors_CIGyrometer3_put_ReportLatency(This, value) \
    ((This)->lpVtbl->put_ReportLatency(This, value))

#define __x_ABI_CWindows_CDevices_CSensors_CIGyrometer3_get_ReportLatency(This, value) \
    ((This)->lpVtbl->get_ReportLatency(This, value))

#define __x_ABI_CWindows_CDevices_CSensors_CIGyrometer3_get_MaxBatchSize(This, value) \
    ((This)->lpVtbl->get_MaxBatchSize(This, value))

#endif /* COBJMACROS */

EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CSensors_CIGyrometer3;
#endif /* !defined(____x_ABI_CWindows_CDevices_CSensors_CIGyrometer3_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x50000

/*
 *
 * Interface Windows.Devices.Sensors.IGyrometer4
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 10.0
 *
 * Interface is a part of the implementation of type Windows.Devices.Sensors.Gyrometer
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0xa0000
#if !defined(____x_ABI_CWindows_CDevices_CSensors_CIGyrometer4_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CDevices_CSensors_CIGyrometer4_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Devices_Sensors_IGyrometer4[] = L"Windows.Devices.Sensors.IGyrometer4";
typedef struct __x_ABI_CWindows_CDevices_CSensors_CIGyrometer4Vtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CDevices_CSensors_CIGyrometer4* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CDevices_CSensors_CIGyrometer4* This);
    ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CDevices_CSensors_CIGyrometer4* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CDevices_CSensors_CIGyrometer4* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CDevices_CSensors_CIGyrometer4* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CDevices_CSensors_CIGyrometer4* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* get_ReportThreshold)(__x_ABI_CWindows_CDevices_CSensors_CIGyrometer4* This,
        __x_ABI_CWindows_CDevices_CSensors_CIGyrometerDataThreshold** value);

    END_INTERFACE
} __x_ABI_CWindows_CDevices_CSensors_CIGyrometer4Vtbl;

interface __x_ABI_CWindows_CDevices_CSensors_CIGyrometer4
{
    CONST_VTBL struct __x_ABI_CWindows_CDevices_CSensors_CIGyrometer4Vtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __x_ABI_CWindows_CDevices_CSensors_CIGyrometer4_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __x_ABI_CWindows_CDevices_CSensors_CIGyrometer4_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __x_ABI_CWindows_CDevices_CSensors_CIGyrometer4_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __x_ABI_CWindows_CDevices_CSensors_CIGyrometer4_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __x_ABI_CWindows_CDevices_CSensors_CIGyrometer4_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __x_ABI_CWindows_CDevices_CSensors_CIGyrometer4_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __x_ABI_CWindows_CDevices_CSensors_CIGyrometer4_get_ReportThreshold(This, value) \
    ((This)->lpVtbl->get_ReportThreshold(This, value))

#endif /* COBJMACROS */

EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CSensors_CIGyrometer4;
#endif /* !defined(____x_ABI_CWindows_CDevices_CSensors_CIGyrometer4_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0xa0000

/*
 *
 * Interface Windows.Devices.Sensors.IGyrometerDataThreshold
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 10.0
 *
 * Interface is a part of the implementation of type Windows.Devices.Sensors.GyrometerDataThreshold
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0xa0000
#if !defined(____x_ABI_CWindows_CDevices_CSensors_CIGyrometerDataThreshold_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CDevices_CSensors_CIGyrometerDataThreshold_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Devices_Sensors_IGyrometerDataThreshold[] = L"Windows.Devices.Sensors.IGyrometerDataThreshold";
typedef struct __x_ABI_CWindows_CDevices_CSensors_CIGyrometerDataThresholdVtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CDevices_CSensors_CIGyrometerDataThreshold* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CDevices_CSensors_CIGyrometerDataThreshold* This);
    ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CDevices_CSensors_CIGyrometerDataThreshold* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CDevices_CSensors_CIGyrometerDataThreshold* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CDevices_CSensors_CIGyrometerDataThreshold* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CDevices_CSensors_CIGyrometerDataThreshold* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* get_XAxisInDegreesPerSecond)(__x_ABI_CWindows_CDevices_CSensors_CIGyrometerDataThreshold* This,
        DOUBLE* value);
    HRESULT (STDMETHODCALLTYPE* put_XAxisInDegreesPerSecond)(__x_ABI_CWindows_CDevices_CSensors_CIGyrometerDataThreshold* This,
        DOUBLE value);
    HRESULT (STDMETHODCALLTYPE* get_YAxisInDegreesPerSecond)(__x_ABI_CWindows_CDevices_CSensors_CIGyrometerDataThreshold* This,
        DOUBLE* value);
    HRESULT (STDMETHODCALLTYPE* put_YAxisInDegreesPerSecond)(__x_ABI_CWindows_CDevices_CSensors_CIGyrometerDataThreshold* This,
        DOUBLE value);
    HRESULT (STDMETHODCALLTYPE* get_ZAxisInDegreesPerSecond)(__x_ABI_CWindows_CDevices_CSensors_CIGyrometerDataThreshold* This,
        DOUBLE* value);
    HRESULT (STDMETHODCALLTYPE* put_ZAxisInDegreesPerSecond)(__x_ABI_CWindows_CDevices_CSensors_CIGyrometerDataThreshold* This,
        DOUBLE value);

    END_INTERFACE
} __x_ABI_CWindows_CDevices_CSensors_CIGyrometerDataThresholdVtbl;

interface __x_ABI_CWindows_CDevices_CSensors_CIGyrometerDataThreshold
{
    CONST_VTBL struct __x_ABI_CWindows_CDevices_CSensors_CIGyrometerDataThresholdVtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __x_ABI_CWindows_CDevices_CSensors_CIGyrometerDataThreshold_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __x_ABI_CWindows_CDevices_CSensors_CIGyrometerDataThreshold_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __x_ABI_CWindows_CDevices_CSensors_CIGyrometerDataThreshold_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __x_ABI_CWindows_CDevices_CSensors_CIGyrometerDataThreshold_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __x_ABI_CWindows_CDevices_CSensors_CIGyrometerDataThreshold_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __x_ABI_CWindows_CDevices_CSensors_CIGyrometerDataThreshold_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __x_ABI_CWindows_CDevices_CSensors_CIGyrometerDataThreshold_get_XAxisInDegreesPerSecond(This, value) \
    ((This)->lpVtbl->get_XAxisInDegreesPerSecond(This, value))

#define __x_ABI_CWindows_CDevices_CSensors_CIGyrometerDataThreshold_put_XAxisInDegreesPerSecond(This, value) \
    ((This)->lpVtbl->put_XAxisInDegreesPerSecond(This, value))

#define __x_ABI_CWindows_CDevices_CSensors_CIGyrometerDataThreshold_get_YAxisInDegreesPerSecond(This, value) \
    ((This)->lpVtbl->get_YAxisInDegreesPerSecond(This, value))

#define __x_ABI_CWindows_CDevices_CSensors_CIGyrometerDataThreshold_put_YAxisInDegreesPerSecond(This, value) \
    ((This)->lpVtbl->put_YAxisInDegreesPerSecond(This, value))

#define __x_ABI_CWindows_CDevices_CSensors_CIGyrometerDataThreshold_get_ZAxisInDegreesPerSecond(This, value) \
    ((This)->lpVtbl->get_ZAxisInDegreesPerSecond(This, value))

#define __x_ABI_CWindows_CDevices_CSensors_CIGyrometerDataThreshold_put_ZAxisInDegreesPerSecond(This, value) \
    ((This)->lpVtbl->put_ZAxisInDegreesPerSecond(This, value))

#endif /* COBJMACROS */

EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CSensors_CIGyrometerDataThreshold;
#endif /* !defined(____x_ABI_CWindows_CDevices_CSensors_CIGyrometerDataThreshold_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0xa0000

/*
 *
 * Interface Windows.Devices.Sensors.IGyrometerDeviceId
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Interface is a part of the implementation of type Windows.Devices.Sensors.Gyrometer
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____x_ABI_CWindows_CDevices_CSensors_CIGyrometerDeviceId_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CDevices_CSensors_CIGyrometerDeviceId_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Devices_Sensors_IGyrometerDeviceId[] = L"Windows.Devices.Sensors.IGyrometerDeviceId";
typedef struct __x_ABI_CWindows_CDevices_CSensors_CIGyrometerDeviceIdVtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CDevices_CSensors_CIGyrometerDeviceId* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CDevices_CSensors_CIGyrometerDeviceId* This);
    ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CDevices_CSensors_CIGyrometerDeviceId* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CDevices_CSensors_CIGyrometerDeviceId* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CDevices_CSensors_CIGyrometerDeviceId* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CDevices_CSensors_CIGyrometerDeviceId* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* get_DeviceId)(__x_ABI_CWindows_CDevices_CSensors_CIGyrometerDeviceId* This,
        HSTRING* value);

    END_INTERFACE
} __x_ABI_CWindows_CDevices_CSensors_CIGyrometerDeviceIdVtbl;

interface __x_ABI_CWindows_CDevices_CSensors_CIGyrometerDeviceId
{
    CONST_VTBL struct __x_ABI_CWindows_CDevices_CSensors_CIGyrometerDeviceIdVtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __x_ABI_CWindows_CDevices_CSensors_CIGyrometerDeviceId_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __x_ABI_CWindows_CDevices_CSensors_CIGyrometerDeviceId_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __x_ABI_CWindows_CDevices_CSensors_CIGyrometerDeviceId_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __x_ABI_CWindows_CDevices_CSensors_CIGyrometerDeviceId_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __x_ABI_CWindows_CDevices_CSensors_CIGyrometerDeviceId_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __x_ABI_CWindows_CDevices_CSensors_CIGyrometerDeviceId_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __x_ABI_CWindows_CDevices_CSensors_CIGyrometerDeviceId_get_DeviceId(This, value) \
    ((This)->lpVtbl->get_DeviceId(This, value))

#endif /* COBJMACROS */

EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CSensors_CIGyrometerDeviceId;
#endif /* !defined(____x_ABI_CWindows_CDevices_CSensors_CIGyrometerDeviceId_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Interface Windows.Devices.Sensors.IGyrometerReading
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Interface is a part of the implementation of type Windows.Devices.Sensors.GyrometerReading
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____x_ABI_CWindows_CDevices_CSensors_CIGyrometerReading_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CDevices_CSensors_CIGyrometerReading_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Devices_Sensors_IGyrometerReading[] = L"Windows.Devices.Sensors.IGyrometerReading";
typedef struct __x_ABI_CWindows_CDevices_CSensors_CIGyrometerReadingVtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CDevices_CSensors_CIGyrometerReading* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CDevices_CSensors_CIGyrometerReading* This);
    ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CDevices_CSensors_CIGyrometerReading* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CDevices_CSensors_CIGyrometerReading* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CDevices_CSensors_CIGyrometerReading* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CDevices_CSensors_CIGyrometerReading* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* get_Timestamp)(__x_ABI_CWindows_CDevices_CSensors_CIGyrometerReading* This,
        struct __x_ABI_CWindows_CFoundation_CDateTime* value);
    HRESULT (STDMETHODCALLTYPE* get_AngularVelocityX)(__x_ABI_CWindows_CDevices_CSensors_CIGyrometerReading* This,
        DOUBLE* value);
    HRESULT (STDMETHODCALLTYPE* get_AngularVelocityY)(__x_ABI_CWindows_CDevices_CSensors_CIGyrometerReading* This,
        DOUBLE* value);
    HRESULT (STDMETHODCALLTYPE* get_AngularVelocityZ)(__x_ABI_CWindows_CDevices_CSensors_CIGyrometerReading* This,
        DOUBLE* value);

    END_INTERFACE
} __x_ABI_CWindows_CDevices_CSensors_CIGyrometerReadingVtbl;

interface __x_ABI_CWindows_CDevices_CSensors_CIGyrometerReading
{
    CONST_VTBL struct __x_ABI_CWindows_CDevices_CSensors_CIGyrometerReadingVtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __x_ABI_CWindows_CDevices_CSensors_CIGyrometerReading_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __x_ABI_CWindows_CDevices_CSensors_CIGyrometerReading_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __x_ABI_CWindows_CDevices_CSensors_CIGyrometerReading_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __x_ABI_CWindows_CDevices_CSensors_CIGyrometerReading_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __x_ABI_CWindows_CDevices_CSensors_CIGyrometerReading_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __x_ABI_CWindows_CDevices_CSensors_CIGyrometerReading_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __x_ABI_CWindows_CDevices_CSensors_CIGyrometerReading_get_Timestamp(This, value) \
    ((This)->lpVtbl->get_Timestamp(This, value))

#define __x_ABI_CWindows_CDevices_CSensors_CIGyrometerReading_get_AngularVelocityX(This, value) \
    ((This)->lpVtbl->get_AngularVelocityX(This, value))

#define __x_ABI_CWindows_CDevices_CSensors_CIGyrometerReading_get_AngularVelocityY(This, value) \
    ((This)->lpVtbl->get_AngularVelocityY(This, value))

#define __x_ABI_CWindows_CDevices_CSensors_CIGyrometerReading_get_AngularVelocityZ(This, value) \
    ((This)->lpVtbl->get_AngularVelocityZ(This, value))

#endif /* COBJMACROS */

EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CSensors_CIGyrometerReading;
#endif /* !defined(____x_ABI_CWindows_CDevices_CSensors_CIGyrometerReading_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Interface Windows.Devices.Sensors.IGyrometerReading2
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 5.0
 *
 * Interface is a part of the implementation of type Windows.Devices.Sensors.GyrometerReading
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x50000
#if !defined(____x_ABI_CWindows_CDevices_CSensors_CIGyrometerReading2_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CDevices_CSensors_CIGyrometerReading2_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Devices_Sensors_IGyrometerReading2[] = L"Windows.Devices.Sensors.IGyrometerReading2";
typedef struct __x_ABI_CWindows_CDevices_CSensors_CIGyrometerReading2Vtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CDevices_CSensors_CIGyrometerReading2* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CDevices_CSensors_CIGyrometerReading2* This);
    ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CDevices_CSensors_CIGyrometerReading2* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CDevices_CSensors_CIGyrometerReading2* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CDevices_CSensors_CIGyrometerReading2* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CDevices_CSensors_CIGyrometerReading2* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* get_PerformanceCount)(__x_ABI_CWindows_CDevices_CSensors_CIGyrometerReading2* This,
        __FIReference_1_Windows__CFoundation__CTimeSpan** value);
    HRESULT (STDMETHODCALLTYPE* get_Properties)(__x_ABI_CWindows_CDevices_CSensors_CIGyrometerReading2* This,
        __FIMapView_2_HSTRING_IInspectable** value);

    END_INTERFACE
} __x_ABI_CWindows_CDevices_CSensors_CIGyrometerReading2Vtbl;

interface __x_ABI_CWindows_CDevices_CSensors_CIGyrometerReading2
{
    CONST_VTBL struct __x_ABI_CWindows_CDevices_CSensors_CIGyrometerReading2Vtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __x_ABI_CWindows_CDevices_CSensors_CIGyrometerReading2_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __x_ABI_CWindows_CDevices_CSensors_CIGyrometerReading2_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __x_ABI_CWindows_CDevices_CSensors_CIGyrometerReading2_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __x_ABI_CWindows_CDevices_CSensors_CIGyrometerReading2_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __x_ABI_CWindows_CDevices_CSensors_CIGyrometerReading2_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __x_ABI_CWindows_CDevices_CSensors_CIGyrometerReading2_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __x_ABI_CWindows_CDevices_CSensors_CIGyrometerReading2_get_PerformanceCount(This, value) \
    ((This)->lpVtbl->get_PerformanceCount(This, value))

#define __x_ABI_CWindows_CDevices_CSensors_CIGyrometerReading2_get_Properties(This, value) \
    ((This)->lpVtbl->get_Properties(This, value))

#endif /* COBJMACROS */

EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CSensors_CIGyrometerReading2;
#endif /* !defined(____x_ABI_CWindows_CDevices_CSensors_CIGyrometerReading2_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x50000

/*
 *
 * Interface Windows.Devices.Sensors.IGyrometerReadingChangedEventArgs
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Interface is a part of the implementation of type Windows.Devices.Sensors.GyrometerReadingChangedEventArgs
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____x_ABI_CWindows_CDevices_CSensors_CIGyrometerReadingChangedEventArgs_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CDevices_CSensors_CIGyrometerReadingChangedEventArgs_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Devices_Sensors_IGyrometerReadingChangedEventArgs[] = L"Windows.Devices.Sensors.IGyrometerReadingChangedEventArgs";
typedef struct __x_ABI_CWindows_CDevices_CSensors_CIGyrometerReadingChangedEventArgsVtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CDevices_CSensors_CIGyrometerReadingChangedEventArgs* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CDevices_CSensors_CIGyrometerReadingChangedEventArgs* This);
    ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CDevices_CSensors_CIGyrometerReadingChangedEventArgs* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CDevices_CSensors_CIGyrometerReadingChangedEventArgs* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CDevices_CSensors_CIGyrometerReadingChangedEventArgs* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CDevices_CSensors_CIGyrometerReadingChangedEventArgs* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* get_Reading)(__x_ABI_CWindows_CDevices_CSensors_CIGyrometerReadingChangedEventArgs* This,
        __x_ABI_CWindows_CDevices_CSensors_CIGyrometerReading** value);

    END_INTERFACE
} __x_ABI_CWindows_CDevices_CSensors_CIGyrometerReadingChangedEventArgsVtbl;

interface __x_ABI_CWindows_CDevices_CSensors_CIGyrometerReadingChangedEventArgs
{
    CONST_VTBL struct __x_ABI_CWindows_CDevices_CSensors_CIGyrometerReadingChangedEventArgsVtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __x_ABI_CWindows_CDevices_CSensors_CIGyrometerReadingChangedEventArgs_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __x_ABI_CWindows_CDevices_CSensors_CIGyrometerReadingChangedEventArgs_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __x_ABI_CWindows_CDevices_CSensors_CIGyrometerReadingChangedEventArgs_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __x_ABI_CWindows_CDevices_CSensors_CIGyrometerReadingChangedEventArgs_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __x_ABI_CWindows_CDevices_CSensors_CIGyrometerReadingChangedEventArgs_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __x_ABI_CWindows_CDevices_CSensors_CIGyrometerReadingChangedEventArgs_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __x_ABI_CWindows_CDevices_CSensors_CIGyrometerReadingChangedEventArgs_get_Reading(This, value) \
    ((This)->lpVtbl->get_Reading(This, value))

#endif /* COBJMACROS */

EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CSensors_CIGyrometerReadingChangedEventArgs;
#endif /* !defined(____x_ABI_CWindows_CDevices_CSensors_CIGyrometerReadingChangedEventArgs_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Interface Windows.Devices.Sensors.IGyrometerStatics
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Interface is a part of the implementation of type Windows.Devices.Sensors.Gyrometer
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____x_ABI_CWindows_CDevices_CSensors_CIGyrometerStatics_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CDevices_CSensors_CIGyrometerStatics_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Devices_Sensors_IGyrometerStatics[] = L"Windows.Devices.Sensors.IGyrometerStatics";
typedef struct __x_ABI_CWindows_CDevices_CSensors_CIGyrometerStaticsVtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CDevices_CSensors_CIGyrometerStatics* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CDevices_CSensors_CIGyrometerStatics* This);
    ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CDevices_CSensors_CIGyrometerStatics* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CDevices_CSensors_CIGyrometerStatics* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CDevices_CSensors_CIGyrometerStatics* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CDevices_CSensors_CIGyrometerStatics* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* GetDefault)(__x_ABI_CWindows_CDevices_CSensors_CIGyrometerStatics* This,
        __x_ABI_CWindows_CDevices_CSensors_CIGyrometer** result);

    END_INTERFACE
} __x_ABI_CWindows_CDevices_CSensors_CIGyrometerStaticsVtbl;

interface __x_ABI_CWindows_CDevices_CSensors_CIGyrometerStatics
{
    CONST_VTBL struct __x_ABI_CWindows_CDevices_CSensors_CIGyrometerStaticsVtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __x_ABI_CWindows_CDevices_CSensors_CIGyrometerStatics_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __x_ABI_CWindows_CDevices_CSensors_CIGyrometerStatics_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __x_ABI_CWindows_CDevices_CSensors_CIGyrometerStatics_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __x_ABI_CWindows_CDevices_CSensors_CIGyrometerStatics_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __x_ABI_CWindows_CDevices_CSensors_CIGyrometerStatics_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __x_ABI_CWindows_CDevices_CSensors_CIGyrometerStatics_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __x_ABI_CWindows_CDevices_CSensors_CIGyrometerStatics_GetDefault(This, result) \
    ((This)->lpVtbl->GetDefault(This, result))

#endif /* COBJMACROS */

EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CSensors_CIGyrometerStatics;
#endif /* !defined(____x_ABI_CWindows_CDevices_CSensors_CIGyrometerStatics_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Interface Windows.Devices.Sensors.IGyrometerStatics2
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 5.0
 *
 * Interface is a part of the implementation of type Windows.Devices.Sensors.Gyrometer
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x50000
#if !defined(____x_ABI_CWindows_CDevices_CSensors_CIGyrometerStatics2_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CDevices_CSensors_CIGyrometerStatics2_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Devices_Sensors_IGyrometerStatics2[] = L"Windows.Devices.Sensors.IGyrometerStatics2";
typedef struct __x_ABI_CWindows_CDevices_CSensors_CIGyrometerStatics2Vtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CDevices_CSensors_CIGyrometerStatics2* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CDevices_CSensors_CIGyrometerStatics2* This);
    ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CDevices_CSensors_CIGyrometerStatics2* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CDevices_CSensors_CIGyrometerStatics2* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CDevices_CSensors_CIGyrometerStatics2* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CDevices_CSensors_CIGyrometerStatics2* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* GetDeviceSelector)(__x_ABI_CWindows_CDevices_CSensors_CIGyrometerStatics2* This,
        HSTRING* result);
    HRESULT (STDMETHODCALLTYPE* FromIdAsync)(__x_ABI_CWindows_CDevices_CSensors_CIGyrometerStatics2* This,
        HSTRING deviceId,
        __FIAsyncOperation_1_Windows__CDevices__CSensors__CGyrometer** operation);

    END_INTERFACE
} __x_ABI_CWindows_CDevices_CSensors_CIGyrometerStatics2Vtbl;

interface __x_ABI_CWindows_CDevices_CSensors_CIGyrometerStatics2
{
    CONST_VTBL struct __x_ABI_CWindows_CDevices_CSensors_CIGyrometerStatics2Vtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __x_ABI_CWindows_CDevices_CSensors_CIGyrometerStatics2_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __x_ABI_CWindows_CDevices_CSensors_CIGyrometerStatics2_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __x_ABI_CWindows_CDevices_CSensors_CIGyrometerStatics2_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __x_ABI_CWindows_CDevices_CSensors_CIGyrometerStatics2_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __x_ABI_CWindows_CDevices_CSensors_CIGyrometerStatics2_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __x_ABI_CWindows_CDevices_CSensors_CIGyrometerStatics2_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __x_ABI_CWindows_CDevices_CSensors_CIGyrometerStatics2_GetDeviceSelector(This, result) \
    ((This)->lpVtbl->GetDeviceSelector(This, result))

#define __x_ABI_CWindows_CDevices_CSensors_CIGyrometerStatics2_FromIdAsync(This, deviceId, operation) \
    ((This)->lpVtbl->FromIdAsync(This, deviceId, operation))

#endif /* COBJMACROS */

EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CSensors_CIGyrometerStatics2;
#endif /* !defined(____x_ABI_CWindows_CDevices_CSensors_CIGyrometerStatics2_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x50000

/*
 *
 * Interface Windows.Devices.Sensors.IHingeAngleReading
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 7.0
 *
 * Interface is a part of the implementation of type Windows.Devices.Sensors.HingeAngleReading
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x70000
#if !defined(____x_ABI_CWindows_CDevices_CSensors_CIHingeAngleReading_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CDevices_CSensors_CIHingeAngleReading_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Devices_Sensors_IHingeAngleReading[] = L"Windows.Devices.Sensors.IHingeAngleReading";
typedef struct __x_ABI_CWindows_CDevices_CSensors_CIHingeAngleReadingVtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CDevices_CSensors_CIHingeAngleReading* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CDevices_CSensors_CIHingeAngleReading* This);
    ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CDevices_CSensors_CIHingeAngleReading* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CDevices_CSensors_CIHingeAngleReading* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CDevices_CSensors_CIHingeAngleReading* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CDevices_CSensors_CIHingeAngleReading* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* get_Timestamp)(__x_ABI_CWindows_CDevices_CSensors_CIHingeAngleReading* This,
        struct __x_ABI_CWindows_CFoundation_CDateTime* value);
    HRESULT (STDMETHODCALLTYPE* get_AngleInDegrees)(__x_ABI_CWindows_CDevices_CSensors_CIHingeAngleReading* This,
        DOUBLE* value);
    HRESULT (STDMETHODCALLTYPE* get_Properties)(__x_ABI_CWindows_CDevices_CSensors_CIHingeAngleReading* This,
        __FIMapView_2_HSTRING_IInspectable** value);

    END_INTERFACE
} __x_ABI_CWindows_CDevices_CSensors_CIHingeAngleReadingVtbl;

interface __x_ABI_CWindows_CDevices_CSensors_CIHingeAngleReading
{
    CONST_VTBL struct __x_ABI_CWindows_CDevices_CSensors_CIHingeAngleReadingVtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __x_ABI_CWindows_CDevices_CSensors_CIHingeAngleReading_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __x_ABI_CWindows_CDevices_CSensors_CIHingeAngleReading_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __x_ABI_CWindows_CDevices_CSensors_CIHingeAngleReading_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __x_ABI_CWindows_CDevices_CSensors_CIHingeAngleReading_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __x_ABI_CWindows_CDevices_CSensors_CIHingeAngleReading_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __x_ABI_CWindows_CDevices_CSensors_CIHingeAngleReading_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __x_ABI_CWindows_CDevices_CSensors_CIHingeAngleReading_get_Timestamp(This, value) \
    ((This)->lpVtbl->get_Timestamp(This, value))

#define __x_ABI_CWindows_CDevices_CSensors_CIHingeAngleReading_get_AngleInDegrees(This, value) \
    ((This)->lpVtbl->get_AngleInDegrees(This, value))

#define __x_ABI_CWindows_CDevices_CSensors_CIHingeAngleReading_get_Properties(This, value) \
    ((This)->lpVtbl->get_Properties(This, value))

#endif /* COBJMACROS */

EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CSensors_CIHingeAngleReading;
#endif /* !defined(____x_ABI_CWindows_CDevices_CSensors_CIHingeAngleReading_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x70000

/*
 *
 * Interface Windows.Devices.Sensors.IHingeAngleSensor
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 7.0
 *
 * Interface is a part of the implementation of type Windows.Devices.Sensors.HingeAngleSensor
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x70000
#if !defined(____x_ABI_CWindows_CDevices_CSensors_CIHingeAngleSensor_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CDevices_CSensors_CIHingeAngleSensor_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Devices_Sensors_IHingeAngleSensor[] = L"Windows.Devices.Sensors.IHingeAngleSensor";
typedef struct __x_ABI_CWindows_CDevices_CSensors_CIHingeAngleSensorVtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CDevices_CSensors_CIHingeAngleSensor* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CDevices_CSensors_CIHingeAngleSensor* This);
    ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CDevices_CSensors_CIHingeAngleSensor* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CDevices_CSensors_CIHingeAngleSensor* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CDevices_CSensors_CIHingeAngleSensor* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CDevices_CSensors_CIHingeAngleSensor* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* GetCurrentReadingAsync)(__x_ABI_CWindows_CDevices_CSensors_CIHingeAngleSensor* This,
        __FIAsyncOperation_1_Windows__CDevices__CSensors__CHingeAngleReading** value);
    HRESULT (STDMETHODCALLTYPE* get_DeviceId)(__x_ABI_CWindows_CDevices_CSensors_CIHingeAngleSensor* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_MinReportThresholdInDegrees)(__x_ABI_CWindows_CDevices_CSensors_CIHingeAngleSensor* This,
        DOUBLE* value);
    HRESULT (STDMETHODCALLTYPE* get_ReportThresholdInDegrees)(__x_ABI_CWindows_CDevices_CSensors_CIHingeAngleSensor* This,
        DOUBLE* value);
    HRESULT (STDMETHODCALLTYPE* put_ReportThresholdInDegrees)(__x_ABI_CWindows_CDevices_CSensors_CIHingeAngleSensor* This,
        DOUBLE value);
    HRESULT (STDMETHODCALLTYPE* add_ReadingChanged)(__x_ABI_CWindows_CDevices_CSensors_CIHingeAngleSensor* This,
        __FITypedEventHandler_2_Windows__CDevices__CSensors__CHingeAngleSensor_Windows__CDevices__CSensors__CHingeAngleSensorReadingChangedEventArgs* handler,
        EventRegistrationToken* token);
    HRESULT (STDMETHODCALLTYPE* remove_ReadingChanged)(__x_ABI_CWindows_CDevices_CSensors_CIHingeAngleSensor* This,
        EventRegistrationToken token);

    END_INTERFACE
} __x_ABI_CWindows_CDevices_CSensors_CIHingeAngleSensorVtbl;

interface __x_ABI_CWindows_CDevices_CSensors_CIHingeAngleSensor
{
    CONST_VTBL struct __x_ABI_CWindows_CDevices_CSensors_CIHingeAngleSensorVtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __x_ABI_CWindows_CDevices_CSensors_CIHingeAngleSensor_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __x_ABI_CWindows_CDevices_CSensors_CIHingeAngleSensor_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __x_ABI_CWindows_CDevices_CSensors_CIHingeAngleSensor_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __x_ABI_CWindows_CDevices_CSensors_CIHingeAngleSensor_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __x_ABI_CWindows_CDevices_CSensors_CIHingeAngleSensor_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __x_ABI_CWindows_CDevices_CSensors_CIHingeAngleSensor_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __x_ABI_CWindows_CDevices_CSensors_CIHingeAngleSensor_GetCurrentReadingAsync(This, value) \
    ((This)->lpVtbl->GetCurrentReadingAsync(This, value))

#define __x_ABI_CWindows_CDevices_CSensors_CIHingeAngleSensor_get_DeviceId(This, value) \
    ((This)->lpVtbl->get_DeviceId(This, value))

#define __x_ABI_CWindows_CDevices_CSensors_CIHingeAngleSensor_get_MinReportThresholdInDegrees(This, value) \
    ((This)->lpVtbl->get_MinReportThresholdInDegrees(This, value))

#define __x_ABI_CWindows_CDevices_CSensors_CIHingeAngleSensor_get_ReportThresholdInDegrees(This, value) \
    ((This)->lpVtbl->get_ReportThresholdInDegrees(This, value))

#define __x_ABI_CWindows_CDevices_CSensors_CIHingeAngleSensor_put_ReportThresholdInDegrees(This, value) \
    ((This)->lpVtbl->put_ReportThresholdInDegrees(This, value))

#define __x_ABI_CWindows_CDevices_CSensors_CIHingeAngleSensor_add_ReadingChanged(This, handler, token) \
    ((This)->lpVtbl->add_ReadingChanged(This, handler, token))

#define __x_ABI_CWindows_CDevices_CSensors_CIHingeAngleSensor_remove_ReadingChanged(This, token) \
    ((This)->lpVtbl->remove_ReadingChanged(This, token))

#endif /* COBJMACROS */

EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CSensors_CIHingeAngleSensor;
#endif /* !defined(____x_ABI_CWindows_CDevices_CSensors_CIHingeAngleSensor_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x70000

/*
 *
 * Interface Windows.Devices.Sensors.IHingeAngleSensorReadingChangedEventArgs
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 7.0
 *
 * Interface is a part of the implementation of type Windows.Devices.Sensors.HingeAngleSensorReadingChangedEventArgs
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x70000
#if !defined(____x_ABI_CWindows_CDevices_CSensors_CIHingeAngleSensorReadingChangedEventArgs_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CDevices_CSensors_CIHingeAngleSensorReadingChangedEventArgs_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Devices_Sensors_IHingeAngleSensorReadingChangedEventArgs[] = L"Windows.Devices.Sensors.IHingeAngleSensorReadingChangedEventArgs";
typedef struct __x_ABI_CWindows_CDevices_CSensors_CIHingeAngleSensorReadingChangedEventArgsVtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CDevices_CSensors_CIHingeAngleSensorReadingChangedEventArgs* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CDevices_CSensors_CIHingeAngleSensorReadingChangedEventArgs* This);
    ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CDevices_CSensors_CIHingeAngleSensorReadingChangedEventArgs* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CDevices_CSensors_CIHingeAngleSensorReadingChangedEventArgs* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CDevices_CSensors_CIHingeAngleSensorReadingChangedEventArgs* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CDevices_CSensors_CIHingeAngleSensorReadingChangedEventArgs* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* get_Reading)(__x_ABI_CWindows_CDevices_CSensors_CIHingeAngleSensorReadingChangedEventArgs* This,
        __x_ABI_CWindows_CDevices_CSensors_CIHingeAngleReading** value);

    END_INTERFACE
} __x_ABI_CWindows_CDevices_CSensors_CIHingeAngleSensorReadingChangedEventArgsVtbl;

interface __x_ABI_CWindows_CDevices_CSensors_CIHingeAngleSensorReadingChangedEventArgs
{
    CONST_VTBL struct __x_ABI_CWindows_CDevices_CSensors_CIHingeAngleSensorReadingChangedEventArgsVtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __x_ABI_CWindows_CDevices_CSensors_CIHingeAngleSensorReadingChangedEventArgs_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __x_ABI_CWindows_CDevices_CSensors_CIHingeAngleSensorReadingChangedEventArgs_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __x_ABI_CWindows_CDevices_CSensors_CIHingeAngleSensorReadingChangedEventArgs_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __x_ABI_CWindows_CDevices_CSensors_CIHingeAngleSensorReadingChangedEventArgs_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __x_ABI_CWindows_CDevices_CSensors_CIHingeAngleSensorReadingChangedEventArgs_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __x_ABI_CWindows_CDevices_CSensors_CIHingeAngleSensorReadingChangedEventArgs_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __x_ABI_CWindows_CDevices_CSensors_CIHingeAngleSensorReadingChangedEventArgs_get_Reading(This, value) \
    ((This)->lpVtbl->get_Reading(This, value))

#endif /* COBJMACROS */

EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CSensors_CIHingeAngleSensorReadingChangedEventArgs;
#endif /* !defined(____x_ABI_CWindows_CDevices_CSensors_CIHingeAngleSensorReadingChangedEventArgs_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x70000

/*
 *
 * Interface Windows.Devices.Sensors.IHingeAngleSensorStatics
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 7.0
 *
 * Interface is a part of the implementation of type Windows.Devices.Sensors.HingeAngleSensor
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x70000
#if !defined(____x_ABI_CWindows_CDevices_CSensors_CIHingeAngleSensorStatics_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CDevices_CSensors_CIHingeAngleSensorStatics_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Devices_Sensors_IHingeAngleSensorStatics[] = L"Windows.Devices.Sensors.IHingeAngleSensorStatics";
typedef struct __x_ABI_CWindows_CDevices_CSensors_CIHingeAngleSensorStaticsVtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CDevices_CSensors_CIHingeAngleSensorStatics* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CDevices_CSensors_CIHingeAngleSensorStatics* This);
    ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CDevices_CSensors_CIHingeAngleSensorStatics* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CDevices_CSensors_CIHingeAngleSensorStatics* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CDevices_CSensors_CIHingeAngleSensorStatics* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CDevices_CSensors_CIHingeAngleSensorStatics* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* GetDeviceSelector)(__x_ABI_CWindows_CDevices_CSensors_CIHingeAngleSensorStatics* This,
        HSTRING* result);
    HRESULT (STDMETHODCALLTYPE* GetDefaultAsync)(__x_ABI_CWindows_CDevices_CSensors_CIHingeAngleSensorStatics* This,
        __FIAsyncOperation_1_Windows__CDevices__CSensors__CHingeAngleSensor** result);
    HRESULT (STDMETHODCALLTYPE* GetRelatedToAdjacentPanelsAsync)(__x_ABI_CWindows_CDevices_CSensors_CIHingeAngleSensorStatics* This,
        HSTRING firstPanelId,
        HSTRING secondPanelId,
        __FIAsyncOperation_1_Windows__CDevices__CSensors__CHingeAngleSensor** result);
    HRESULT (STDMETHODCALLTYPE* FromIdAsync)(__x_ABI_CWindows_CDevices_CSensors_CIHingeAngleSensorStatics* This,
        HSTRING deviceId,
        __FIAsyncOperation_1_Windows__CDevices__CSensors__CHingeAngleSensor** result);

    END_INTERFACE
} __x_ABI_CWindows_CDevices_CSensors_CIHingeAngleSensorStaticsVtbl;

interface __x_ABI_CWindows_CDevices_CSensors_CIHingeAngleSensorStatics
{
    CONST_VTBL struct __x_ABI_CWindows_CDevices_CSensors_CIHingeAngleSensorStaticsVtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __x_ABI_CWindows_CDevices_CSensors_CIHingeAngleSensorStatics_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __x_ABI_CWindows_CDevices_CSensors_CIHingeAngleSensorStatics_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __x_ABI_CWindows_CDevices_CSensors_CIHingeAngleSensorStatics_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __x_ABI_CWindows_CDevices_CSensors_CIHingeAngleSensorStatics_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __x_ABI_CWindows_CDevices_CSensors_CIHingeAngleSensorStatics_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __x_ABI_CWindows_CDevices_CSensors_CIHingeAngleSensorStatics_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __x_ABI_CWindows_CDevices_CSensors_CIHingeAngleSensorStatics_GetDeviceSelector(This, result) \
    ((This)->lpVtbl->GetDeviceSelector(This, result))

#define __x_ABI_CWindows_CDevices_CSensors_CIHingeAngleSensorStatics_GetDefaultAsync(This, result) \
    ((This)->lpVtbl->GetDefaultAsync(This, result))

#define __x_ABI_CWindows_CDevices_CSensors_CIHingeAngleSensorStatics_GetRelatedToAdjacentPanelsAsync(This, firstPanelId, secondPanelId, result) \
    ((This)->lpVtbl->GetRelatedToAdjacentPanelsAsync(This, firstPanelId, secondPanelId, result))

#define __x_ABI_CWindows_CDevices_CSensors_CIHingeAngleSensorStatics_FromIdAsync(This, deviceId, result) \
    ((This)->lpVtbl->FromIdAsync(This, deviceId, result))

#endif /* COBJMACROS */

EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CSensors_CIHingeAngleSensorStatics;
#endif /* !defined(____x_ABI_CWindows_CDevices_CSensors_CIHingeAngleSensorStatics_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x70000

/*
 *
 * Interface Windows.Devices.Sensors.IInclinometer
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Interface is a part of the implementation of type Windows.Devices.Sensors.Inclinometer
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____x_ABI_CWindows_CDevices_CSensors_CIInclinometer_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CDevices_CSensors_CIInclinometer_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Devices_Sensors_IInclinometer[] = L"Windows.Devices.Sensors.IInclinometer";
typedef struct __x_ABI_CWindows_CDevices_CSensors_CIInclinometerVtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CDevices_CSensors_CIInclinometer* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CDevices_CSensors_CIInclinometer* This);
    ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CDevices_CSensors_CIInclinometer* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CDevices_CSensors_CIInclinometer* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CDevices_CSensors_CIInclinometer* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CDevices_CSensors_CIInclinometer* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* GetCurrentReading)(__x_ABI_CWindows_CDevices_CSensors_CIInclinometer* This,
        __x_ABI_CWindows_CDevices_CSensors_CIInclinometerReading** value);
    HRESULT (STDMETHODCALLTYPE* get_MinimumReportInterval)(__x_ABI_CWindows_CDevices_CSensors_CIInclinometer* This,
        UINT32* value);
    HRESULT (STDMETHODCALLTYPE* put_ReportInterval)(__x_ABI_CWindows_CDevices_CSensors_CIInclinometer* This,
        UINT32 value);
    HRESULT (STDMETHODCALLTYPE* get_ReportInterval)(__x_ABI_CWindows_CDevices_CSensors_CIInclinometer* This,
        UINT32* value);
    HRESULT (STDMETHODCALLTYPE* add_ReadingChanged)(__x_ABI_CWindows_CDevices_CSensors_CIInclinometer* This,
        __FITypedEventHandler_2_Windows__CDevices__CSensors__CInclinometer_Windows__CDevices__CSensors__CInclinometerReadingChangedEventArgs* handler,
        EventRegistrationToken* token);
    HRESULT (STDMETHODCALLTYPE* remove_ReadingChanged)(__x_ABI_CWindows_CDevices_CSensors_CIInclinometer* This,
        EventRegistrationToken token);

    END_INTERFACE
} __x_ABI_CWindows_CDevices_CSensors_CIInclinometerVtbl;

interface __x_ABI_CWindows_CDevices_CSensors_CIInclinometer
{
    CONST_VTBL struct __x_ABI_CWindows_CDevices_CSensors_CIInclinometerVtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __x_ABI_CWindows_CDevices_CSensors_CIInclinometer_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __x_ABI_CWindows_CDevices_CSensors_CIInclinometer_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __x_ABI_CWindows_CDevices_CSensors_CIInclinometer_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __x_ABI_CWindows_CDevices_CSensors_CIInclinometer_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __x_ABI_CWindows_CDevices_CSensors_CIInclinometer_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __x_ABI_CWindows_CDevices_CSensors_CIInclinometer_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __x_ABI_CWindows_CDevices_CSensors_CIInclinometer_GetCurrentReading(This, value) \
    ((This)->lpVtbl->GetCurrentReading(This, value))

#define __x_ABI_CWindows_CDevices_CSensors_CIInclinometer_get_MinimumReportInterval(This, value) \
    ((This)->lpVtbl->get_MinimumReportInterval(This, value))

#define __x_ABI_CWindows_CDevices_CSensors_CIInclinometer_put_ReportInterval(This, value) \
    ((This)->lpVtbl->put_ReportInterval(This, value))

#define __x_ABI_CWindows_CDevices_CSensors_CIInclinometer_get_ReportInterval(This, value) \
    ((This)->lpVtbl->get_ReportInterval(This, value))

#define __x_ABI_CWindows_CDevices_CSensors_CIInclinometer_add_ReadingChanged(This, handler, token) \
    ((This)->lpVtbl->add_ReadingChanged(This, handler, token))

#define __x_ABI_CWindows_CDevices_CSensors_CIInclinometer_remove_ReadingChanged(This, token) \
    ((This)->lpVtbl->remove_ReadingChanged(This, token))

#endif /* COBJMACROS */

EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CSensors_CIInclinometer;
#endif /* !defined(____x_ABI_CWindows_CDevices_CSensors_CIInclinometer_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Interface Windows.Devices.Sensors.IInclinometer2
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Interface is a part of the implementation of type Windows.Devices.Sensors.Inclinometer
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____x_ABI_CWindows_CDevices_CSensors_CIInclinometer2_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CDevices_CSensors_CIInclinometer2_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Devices_Sensors_IInclinometer2[] = L"Windows.Devices.Sensors.IInclinometer2";
typedef struct __x_ABI_CWindows_CDevices_CSensors_CIInclinometer2Vtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CDevices_CSensors_CIInclinometer2* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CDevices_CSensors_CIInclinometer2* This);
    ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CDevices_CSensors_CIInclinometer2* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CDevices_CSensors_CIInclinometer2* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CDevices_CSensors_CIInclinometer2* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CDevices_CSensors_CIInclinometer2* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* put_ReadingTransform)(__x_ABI_CWindows_CDevices_CSensors_CIInclinometer2* This,
        enum __x_ABI_CWindows_CGraphics_CDisplay_CDisplayOrientations value);
    HRESULT (STDMETHODCALLTYPE* get_ReadingTransform)(__x_ABI_CWindows_CDevices_CSensors_CIInclinometer2* This,
        enum __x_ABI_CWindows_CGraphics_CDisplay_CDisplayOrientations* value);
    HRESULT (STDMETHODCALLTYPE* get_ReadingType)(__x_ABI_CWindows_CDevices_CSensors_CIInclinometer2* This,
        enum __x_ABI_CWindows_CDevices_CSensors_CSensorReadingType* type);

    END_INTERFACE
} __x_ABI_CWindows_CDevices_CSensors_CIInclinometer2Vtbl;

interface __x_ABI_CWindows_CDevices_CSensors_CIInclinometer2
{
    CONST_VTBL struct __x_ABI_CWindows_CDevices_CSensors_CIInclinometer2Vtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __x_ABI_CWindows_CDevices_CSensors_CIInclinometer2_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __x_ABI_CWindows_CDevices_CSensors_CIInclinometer2_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __x_ABI_CWindows_CDevices_CSensors_CIInclinometer2_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __x_ABI_CWindows_CDevices_CSensors_CIInclinometer2_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __x_ABI_CWindows_CDevices_CSensors_CIInclinometer2_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __x_ABI_CWindows_CDevices_CSensors_CIInclinometer2_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __x_ABI_CWindows_CDevices_CSensors_CIInclinometer2_put_ReadingTransform(This, value) \
    ((This)->lpVtbl->put_ReadingTransform(This, value))

#define __x_ABI_CWindows_CDevices_CSensors_CIInclinometer2_get_ReadingTransform(This, value) \
    ((This)->lpVtbl->get_ReadingTransform(This, value))

#define __x_ABI_CWindows_CDevices_CSensors_CIInclinometer2_get_ReadingType(This, type) \
    ((This)->lpVtbl->get_ReadingType(This, type))

#endif /* COBJMACROS */

EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CSensors_CIInclinometer2;
#endif /* !defined(____x_ABI_CWindows_CDevices_CSensors_CIInclinometer2_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Interface Windows.Devices.Sensors.IInclinometer3
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 5.0
 *
 * Interface is a part of the implementation of type Windows.Devices.Sensors.Inclinometer
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x50000
#if !defined(____x_ABI_CWindows_CDevices_CSensors_CIInclinometer3_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CDevices_CSensors_CIInclinometer3_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Devices_Sensors_IInclinometer3[] = L"Windows.Devices.Sensors.IInclinometer3";
typedef struct __x_ABI_CWindows_CDevices_CSensors_CIInclinometer3Vtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CDevices_CSensors_CIInclinometer3* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CDevices_CSensors_CIInclinometer3* This);
    ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CDevices_CSensors_CIInclinometer3* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CDevices_CSensors_CIInclinometer3* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CDevices_CSensors_CIInclinometer3* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CDevices_CSensors_CIInclinometer3* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* put_ReportLatency)(__x_ABI_CWindows_CDevices_CSensors_CIInclinometer3* This,
        UINT32 value);
    HRESULT (STDMETHODCALLTYPE* get_ReportLatency)(__x_ABI_CWindows_CDevices_CSensors_CIInclinometer3* This,
        UINT32* value);
    HRESULT (STDMETHODCALLTYPE* get_MaxBatchSize)(__x_ABI_CWindows_CDevices_CSensors_CIInclinometer3* This,
        UINT32* value);

    END_INTERFACE
} __x_ABI_CWindows_CDevices_CSensors_CIInclinometer3Vtbl;

interface __x_ABI_CWindows_CDevices_CSensors_CIInclinometer3
{
    CONST_VTBL struct __x_ABI_CWindows_CDevices_CSensors_CIInclinometer3Vtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __x_ABI_CWindows_CDevices_CSensors_CIInclinometer3_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __x_ABI_CWindows_CDevices_CSensors_CIInclinometer3_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __x_ABI_CWindows_CDevices_CSensors_CIInclinometer3_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __x_ABI_CWindows_CDevices_CSensors_CIInclinometer3_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __x_ABI_CWindows_CDevices_CSensors_CIInclinometer3_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __x_ABI_CWindows_CDevices_CSensors_CIInclinometer3_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __x_ABI_CWindows_CDevices_CSensors_CIInclinometer3_put_ReportLatency(This, value) \
    ((This)->lpVtbl->put_ReportLatency(This, value))

#define __x_ABI_CWindows_CDevices_CSensors_CIInclinometer3_get_ReportLatency(This, value) \
    ((This)->lpVtbl->get_ReportLatency(This, value))

#define __x_ABI_CWindows_CDevices_CSensors_CIInclinometer3_get_MaxBatchSize(This, value) \
    ((This)->lpVtbl->get_MaxBatchSize(This, value))

#endif /* COBJMACROS */

EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CSensors_CIInclinometer3;
#endif /* !defined(____x_ABI_CWindows_CDevices_CSensors_CIInclinometer3_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x50000

/*
 *
 * Interface Windows.Devices.Sensors.IInclinometer4
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 10.0
 *
 * Interface is a part of the implementation of type Windows.Devices.Sensors.Inclinometer
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0xa0000
#if !defined(____x_ABI_CWindows_CDevices_CSensors_CIInclinometer4_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CDevices_CSensors_CIInclinometer4_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Devices_Sensors_IInclinometer4[] = L"Windows.Devices.Sensors.IInclinometer4";
typedef struct __x_ABI_CWindows_CDevices_CSensors_CIInclinometer4Vtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CDevices_CSensors_CIInclinometer4* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CDevices_CSensors_CIInclinometer4* This);
    ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CDevices_CSensors_CIInclinometer4* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CDevices_CSensors_CIInclinometer4* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CDevices_CSensors_CIInclinometer4* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CDevices_CSensors_CIInclinometer4* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* get_ReportThreshold)(__x_ABI_CWindows_CDevices_CSensors_CIInclinometer4* This,
        __x_ABI_CWindows_CDevices_CSensors_CIInclinometerDataThreshold** value);

    END_INTERFACE
} __x_ABI_CWindows_CDevices_CSensors_CIInclinometer4Vtbl;

interface __x_ABI_CWindows_CDevices_CSensors_CIInclinometer4
{
    CONST_VTBL struct __x_ABI_CWindows_CDevices_CSensors_CIInclinometer4Vtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __x_ABI_CWindows_CDevices_CSensors_CIInclinometer4_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __x_ABI_CWindows_CDevices_CSensors_CIInclinometer4_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __x_ABI_CWindows_CDevices_CSensors_CIInclinometer4_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __x_ABI_CWindows_CDevices_CSensors_CIInclinometer4_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __x_ABI_CWindows_CDevices_CSensors_CIInclinometer4_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __x_ABI_CWindows_CDevices_CSensors_CIInclinometer4_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __x_ABI_CWindows_CDevices_CSensors_CIInclinometer4_get_ReportThreshold(This, value) \
    ((This)->lpVtbl->get_ReportThreshold(This, value))

#endif /* COBJMACROS */

EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CSensors_CIInclinometer4;
#endif /* !defined(____x_ABI_CWindows_CDevices_CSensors_CIInclinometer4_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0xa0000

/*
 *
 * Interface Windows.Devices.Sensors.IInclinometerDataThreshold
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 10.0
 *
 * Interface is a part of the implementation of type Windows.Devices.Sensors.InclinometerDataThreshold
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0xa0000
#if !defined(____x_ABI_CWindows_CDevices_CSensors_CIInclinometerDataThreshold_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CDevices_CSensors_CIInclinometerDataThreshold_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Devices_Sensors_IInclinometerDataThreshold[] = L"Windows.Devices.Sensors.IInclinometerDataThreshold";
typedef struct __x_ABI_CWindows_CDevices_CSensors_CIInclinometerDataThresholdVtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CDevices_CSensors_CIInclinometerDataThreshold* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CDevices_CSensors_CIInclinometerDataThreshold* This);
    ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CDevices_CSensors_CIInclinometerDataThreshold* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CDevices_CSensors_CIInclinometerDataThreshold* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CDevices_CSensors_CIInclinometerDataThreshold* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CDevices_CSensors_CIInclinometerDataThreshold* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* get_PitchInDegrees)(__x_ABI_CWindows_CDevices_CSensors_CIInclinometerDataThreshold* This,
        FLOAT* value);
    HRESULT (STDMETHODCALLTYPE* put_PitchInDegrees)(__x_ABI_CWindows_CDevices_CSensors_CIInclinometerDataThreshold* This,
        FLOAT value);
    HRESULT (STDMETHODCALLTYPE* get_RollInDegrees)(__x_ABI_CWindows_CDevices_CSensors_CIInclinometerDataThreshold* This,
        FLOAT* value);
    HRESULT (STDMETHODCALLTYPE* put_RollInDegrees)(__x_ABI_CWindows_CDevices_CSensors_CIInclinometerDataThreshold* This,
        FLOAT value);
    HRESULT (STDMETHODCALLTYPE* get_YawInDegrees)(__x_ABI_CWindows_CDevices_CSensors_CIInclinometerDataThreshold* This,
        FLOAT* value);
    HRESULT (STDMETHODCALLTYPE* put_YawInDegrees)(__x_ABI_CWindows_CDevices_CSensors_CIInclinometerDataThreshold* This,
        FLOAT value);

    END_INTERFACE
} __x_ABI_CWindows_CDevices_CSensors_CIInclinometerDataThresholdVtbl;

interface __x_ABI_CWindows_CDevices_CSensors_CIInclinometerDataThreshold
{
    CONST_VTBL struct __x_ABI_CWindows_CDevices_CSensors_CIInclinometerDataThresholdVtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __x_ABI_CWindows_CDevices_CSensors_CIInclinometerDataThreshold_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __x_ABI_CWindows_CDevices_CSensors_CIInclinometerDataThreshold_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __x_ABI_CWindows_CDevices_CSensors_CIInclinometerDataThreshold_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __x_ABI_CWindows_CDevices_CSensors_CIInclinometerDataThreshold_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __x_ABI_CWindows_CDevices_CSensors_CIInclinometerDataThreshold_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __x_ABI_CWindows_CDevices_CSensors_CIInclinometerDataThreshold_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __x_ABI_CWindows_CDevices_CSensors_CIInclinometerDataThreshold_get_PitchInDegrees(This, value) \
    ((This)->lpVtbl->get_PitchInDegrees(This, value))

#define __x_ABI_CWindows_CDevices_CSensors_CIInclinometerDataThreshold_put_PitchInDegrees(This, value) \
    ((This)->lpVtbl->put_PitchInDegrees(This, value))

#define __x_ABI_CWindows_CDevices_CSensors_CIInclinometerDataThreshold_get_RollInDegrees(This, value) \
    ((This)->lpVtbl->get_RollInDegrees(This, value))

#define __x_ABI_CWindows_CDevices_CSensors_CIInclinometerDataThreshold_put_RollInDegrees(This, value) \
    ((This)->lpVtbl->put_RollInDegrees(This, value))

#define __x_ABI_CWindows_CDevices_CSensors_CIInclinometerDataThreshold_get_YawInDegrees(This, value) \
    ((This)->lpVtbl->get_YawInDegrees(This, value))

#define __x_ABI_CWindows_CDevices_CSensors_CIInclinometerDataThreshold_put_YawInDegrees(This, value) \
    ((This)->lpVtbl->put_YawInDegrees(This, value))

#endif /* COBJMACROS */

EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CSensors_CIInclinometerDataThreshold;
#endif /* !defined(____x_ABI_CWindows_CDevices_CSensors_CIInclinometerDataThreshold_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0xa0000

/*
 *
 * Interface Windows.Devices.Sensors.IInclinometerDeviceId
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Interface is a part of the implementation of type Windows.Devices.Sensors.Inclinometer
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____x_ABI_CWindows_CDevices_CSensors_CIInclinometerDeviceId_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CDevices_CSensors_CIInclinometerDeviceId_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Devices_Sensors_IInclinometerDeviceId[] = L"Windows.Devices.Sensors.IInclinometerDeviceId";
typedef struct __x_ABI_CWindows_CDevices_CSensors_CIInclinometerDeviceIdVtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CDevices_CSensors_CIInclinometerDeviceId* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CDevices_CSensors_CIInclinometerDeviceId* This);
    ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CDevices_CSensors_CIInclinometerDeviceId* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CDevices_CSensors_CIInclinometerDeviceId* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CDevices_CSensors_CIInclinometerDeviceId* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CDevices_CSensors_CIInclinometerDeviceId* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* get_DeviceId)(__x_ABI_CWindows_CDevices_CSensors_CIInclinometerDeviceId* This,
        HSTRING* value);

    END_INTERFACE
} __x_ABI_CWindows_CDevices_CSensors_CIInclinometerDeviceIdVtbl;

interface __x_ABI_CWindows_CDevices_CSensors_CIInclinometerDeviceId
{
    CONST_VTBL struct __x_ABI_CWindows_CDevices_CSensors_CIInclinometerDeviceIdVtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __x_ABI_CWindows_CDevices_CSensors_CIInclinometerDeviceId_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __x_ABI_CWindows_CDevices_CSensors_CIInclinometerDeviceId_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __x_ABI_CWindows_CDevices_CSensors_CIInclinometerDeviceId_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __x_ABI_CWindows_CDevices_CSensors_CIInclinometerDeviceId_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __x_ABI_CWindows_CDevices_CSensors_CIInclinometerDeviceId_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __x_ABI_CWindows_CDevices_CSensors_CIInclinometerDeviceId_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __x_ABI_CWindows_CDevices_CSensors_CIInclinometerDeviceId_get_DeviceId(This, value) \
    ((This)->lpVtbl->get_DeviceId(This, value))

#endif /* COBJMACROS */

EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CSensors_CIInclinometerDeviceId;
#endif /* !defined(____x_ABI_CWindows_CDevices_CSensors_CIInclinometerDeviceId_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Interface Windows.Devices.Sensors.IInclinometerReading
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Interface is a part of the implementation of type Windows.Devices.Sensors.InclinometerReading
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____x_ABI_CWindows_CDevices_CSensors_CIInclinometerReading_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CDevices_CSensors_CIInclinometerReading_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Devices_Sensors_IInclinometerReading[] = L"Windows.Devices.Sensors.IInclinometerReading";
typedef struct __x_ABI_CWindows_CDevices_CSensors_CIInclinometerReadingVtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CDevices_CSensors_CIInclinometerReading* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CDevices_CSensors_CIInclinometerReading* This);
    ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CDevices_CSensors_CIInclinometerReading* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CDevices_CSensors_CIInclinometerReading* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CDevices_CSensors_CIInclinometerReading* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CDevices_CSensors_CIInclinometerReading* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* get_Timestamp)(__x_ABI_CWindows_CDevices_CSensors_CIInclinometerReading* This,
        struct __x_ABI_CWindows_CFoundation_CDateTime* value);
    HRESULT (STDMETHODCALLTYPE* get_PitchDegrees)(__x_ABI_CWindows_CDevices_CSensors_CIInclinometerReading* This,
        FLOAT* value);
    HRESULT (STDMETHODCALLTYPE* get_RollDegrees)(__x_ABI_CWindows_CDevices_CSensors_CIInclinometerReading* This,
        FLOAT* value);
    HRESULT (STDMETHODCALLTYPE* get_YawDegrees)(__x_ABI_CWindows_CDevices_CSensors_CIInclinometerReading* This,
        FLOAT* value);

    END_INTERFACE
} __x_ABI_CWindows_CDevices_CSensors_CIInclinometerReadingVtbl;

interface __x_ABI_CWindows_CDevices_CSensors_CIInclinometerReading
{
    CONST_VTBL struct __x_ABI_CWindows_CDevices_CSensors_CIInclinometerReadingVtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __x_ABI_CWindows_CDevices_CSensors_CIInclinometerReading_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __x_ABI_CWindows_CDevices_CSensors_CIInclinometerReading_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __x_ABI_CWindows_CDevices_CSensors_CIInclinometerReading_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __x_ABI_CWindows_CDevices_CSensors_CIInclinometerReading_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __x_ABI_CWindows_CDevices_CSensors_CIInclinometerReading_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __x_ABI_CWindows_CDevices_CSensors_CIInclinometerReading_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __x_ABI_CWindows_CDevices_CSensors_CIInclinometerReading_get_Timestamp(This, value) \
    ((This)->lpVtbl->get_Timestamp(This, value))

#define __x_ABI_CWindows_CDevices_CSensors_CIInclinometerReading_get_PitchDegrees(This, value) \
    ((This)->lpVtbl->get_PitchDegrees(This, value))

#define __x_ABI_CWindows_CDevices_CSensors_CIInclinometerReading_get_RollDegrees(This, value) \
    ((This)->lpVtbl->get_RollDegrees(This, value))

#define __x_ABI_CWindows_CDevices_CSensors_CIInclinometerReading_get_YawDegrees(This, value) \
    ((This)->lpVtbl->get_YawDegrees(This, value))

#endif /* COBJMACROS */

EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CSensors_CIInclinometerReading;
#endif /* !defined(____x_ABI_CWindows_CDevices_CSensors_CIInclinometerReading_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Interface Windows.Devices.Sensors.IInclinometerReading2
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 5.0
 *
 * Interface is a part of the implementation of type Windows.Devices.Sensors.InclinometerReading
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x50000
#if !defined(____x_ABI_CWindows_CDevices_CSensors_CIInclinometerReading2_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CDevices_CSensors_CIInclinometerReading2_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Devices_Sensors_IInclinometerReading2[] = L"Windows.Devices.Sensors.IInclinometerReading2";
typedef struct __x_ABI_CWindows_CDevices_CSensors_CIInclinometerReading2Vtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CDevices_CSensors_CIInclinometerReading2* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CDevices_CSensors_CIInclinometerReading2* This);
    ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CDevices_CSensors_CIInclinometerReading2* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CDevices_CSensors_CIInclinometerReading2* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CDevices_CSensors_CIInclinometerReading2* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CDevices_CSensors_CIInclinometerReading2* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* get_PerformanceCount)(__x_ABI_CWindows_CDevices_CSensors_CIInclinometerReading2* This,
        __FIReference_1_Windows__CFoundation__CTimeSpan** value);
    HRESULT (STDMETHODCALLTYPE* get_Properties)(__x_ABI_CWindows_CDevices_CSensors_CIInclinometerReading2* This,
        __FIMapView_2_HSTRING_IInspectable** value);

    END_INTERFACE
} __x_ABI_CWindows_CDevices_CSensors_CIInclinometerReading2Vtbl;

interface __x_ABI_CWindows_CDevices_CSensors_CIInclinometerReading2
{
    CONST_VTBL struct __x_ABI_CWindows_CDevices_CSensors_CIInclinometerReading2Vtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __x_ABI_CWindows_CDevices_CSensors_CIInclinometerReading2_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __x_ABI_CWindows_CDevices_CSensors_CIInclinometerReading2_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __x_ABI_CWindows_CDevices_CSensors_CIInclinometerReading2_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __x_ABI_CWindows_CDevices_CSensors_CIInclinometerReading2_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __x_ABI_CWindows_CDevices_CSensors_CIInclinometerReading2_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __x_ABI_CWindows_CDevices_CSensors_CIInclinometerReading2_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __x_ABI_CWindows_CDevices_CSensors_CIInclinometerReading2_get_PerformanceCount(This, value) \
    ((This)->lpVtbl->get_PerformanceCount(This, value))

#define __x_ABI_CWindows_CDevices_CSensors_CIInclinometerReading2_get_Properties(This, value) \
    ((This)->lpVtbl->get_Properties(This, value))

#endif /* COBJMACROS */

EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CSensors_CIInclinometerReading2;
#endif /* !defined(____x_ABI_CWindows_CDevices_CSensors_CIInclinometerReading2_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x50000

/*
 *
 * Interface Windows.Devices.Sensors.IInclinometerReadingChangedEventArgs
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Interface is a part of the implementation of type Windows.Devices.Sensors.InclinometerReadingChangedEventArgs
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____x_ABI_CWindows_CDevices_CSensors_CIInclinometerReadingChangedEventArgs_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CDevices_CSensors_CIInclinometerReadingChangedEventArgs_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Devices_Sensors_IInclinometerReadingChangedEventArgs[] = L"Windows.Devices.Sensors.IInclinometerReadingChangedEventArgs";
typedef struct __x_ABI_CWindows_CDevices_CSensors_CIInclinometerReadingChangedEventArgsVtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CDevices_CSensors_CIInclinometerReadingChangedEventArgs* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CDevices_CSensors_CIInclinometerReadingChangedEventArgs* This);
    ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CDevices_CSensors_CIInclinometerReadingChangedEventArgs* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CDevices_CSensors_CIInclinometerReadingChangedEventArgs* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CDevices_CSensors_CIInclinometerReadingChangedEventArgs* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CDevices_CSensors_CIInclinometerReadingChangedEventArgs* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* get_Reading)(__x_ABI_CWindows_CDevices_CSensors_CIInclinometerReadingChangedEventArgs* This,
        __x_ABI_CWindows_CDevices_CSensors_CIInclinometerReading** value);

    END_INTERFACE
} __x_ABI_CWindows_CDevices_CSensors_CIInclinometerReadingChangedEventArgsVtbl;

interface __x_ABI_CWindows_CDevices_CSensors_CIInclinometerReadingChangedEventArgs
{
    CONST_VTBL struct __x_ABI_CWindows_CDevices_CSensors_CIInclinometerReadingChangedEventArgsVtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __x_ABI_CWindows_CDevices_CSensors_CIInclinometerReadingChangedEventArgs_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __x_ABI_CWindows_CDevices_CSensors_CIInclinometerReadingChangedEventArgs_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __x_ABI_CWindows_CDevices_CSensors_CIInclinometerReadingChangedEventArgs_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __x_ABI_CWindows_CDevices_CSensors_CIInclinometerReadingChangedEventArgs_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __x_ABI_CWindows_CDevices_CSensors_CIInclinometerReadingChangedEventArgs_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __x_ABI_CWindows_CDevices_CSensors_CIInclinometerReadingChangedEventArgs_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __x_ABI_CWindows_CDevices_CSensors_CIInclinometerReadingChangedEventArgs_get_Reading(This, value) \
    ((This)->lpVtbl->get_Reading(This, value))

#endif /* COBJMACROS */

EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CSensors_CIInclinometerReadingChangedEventArgs;
#endif /* !defined(____x_ABI_CWindows_CDevices_CSensors_CIInclinometerReadingChangedEventArgs_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Interface Windows.Devices.Sensors.IInclinometerReadingYawAccuracy
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Interface is a part of the implementation of type Windows.Devices.Sensors.InclinometerReading
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____x_ABI_CWindows_CDevices_CSensors_CIInclinometerReadingYawAccuracy_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CDevices_CSensors_CIInclinometerReadingYawAccuracy_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Devices_Sensors_IInclinometerReadingYawAccuracy[] = L"Windows.Devices.Sensors.IInclinometerReadingYawAccuracy";
typedef struct __x_ABI_CWindows_CDevices_CSensors_CIInclinometerReadingYawAccuracyVtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CDevices_CSensors_CIInclinometerReadingYawAccuracy* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CDevices_CSensors_CIInclinometerReadingYawAccuracy* This);
    ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CDevices_CSensors_CIInclinometerReadingYawAccuracy* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CDevices_CSensors_CIInclinometerReadingYawAccuracy* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CDevices_CSensors_CIInclinometerReadingYawAccuracy* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CDevices_CSensors_CIInclinometerReadingYawAccuracy* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* get_YawAccuracy)(__x_ABI_CWindows_CDevices_CSensors_CIInclinometerReadingYawAccuracy* This,
        enum __x_ABI_CWindows_CDevices_CSensors_CMagnetometerAccuracy* value);

    END_INTERFACE
} __x_ABI_CWindows_CDevices_CSensors_CIInclinometerReadingYawAccuracyVtbl;

interface __x_ABI_CWindows_CDevices_CSensors_CIInclinometerReadingYawAccuracy
{
    CONST_VTBL struct __x_ABI_CWindows_CDevices_CSensors_CIInclinometerReadingYawAccuracyVtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __x_ABI_CWindows_CDevices_CSensors_CIInclinometerReadingYawAccuracy_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __x_ABI_CWindows_CDevices_CSensors_CIInclinometerReadingYawAccuracy_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __x_ABI_CWindows_CDevices_CSensors_CIInclinometerReadingYawAccuracy_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __x_ABI_CWindows_CDevices_CSensors_CIInclinometerReadingYawAccuracy_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __x_ABI_CWindows_CDevices_CSensors_CIInclinometerReadingYawAccuracy_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __x_ABI_CWindows_CDevices_CSensors_CIInclinometerReadingYawAccuracy_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __x_ABI_CWindows_CDevices_CSensors_CIInclinometerReadingYawAccuracy_get_YawAccuracy(This, value) \
    ((This)->lpVtbl->get_YawAccuracy(This, value))

#endif /* COBJMACROS */

EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CSensors_CIInclinometerReadingYawAccuracy;
#endif /* !defined(____x_ABI_CWindows_CDevices_CSensors_CIInclinometerReadingYawAccuracy_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Interface Windows.Devices.Sensors.IInclinometerStatics
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Interface is a part of the implementation of type Windows.Devices.Sensors.Inclinometer
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____x_ABI_CWindows_CDevices_CSensors_CIInclinometerStatics_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CDevices_CSensors_CIInclinometerStatics_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Devices_Sensors_IInclinometerStatics[] = L"Windows.Devices.Sensors.IInclinometerStatics";
typedef struct __x_ABI_CWindows_CDevices_CSensors_CIInclinometerStaticsVtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CDevices_CSensors_CIInclinometerStatics* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CDevices_CSensors_CIInclinometerStatics* This);
    ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CDevices_CSensors_CIInclinometerStatics* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CDevices_CSensors_CIInclinometerStatics* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CDevices_CSensors_CIInclinometerStatics* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CDevices_CSensors_CIInclinometerStatics* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* GetDefault)(__x_ABI_CWindows_CDevices_CSensors_CIInclinometerStatics* This,
        __x_ABI_CWindows_CDevices_CSensors_CIInclinometer** result);

    END_INTERFACE
} __x_ABI_CWindows_CDevices_CSensors_CIInclinometerStaticsVtbl;

interface __x_ABI_CWindows_CDevices_CSensors_CIInclinometerStatics
{
    CONST_VTBL struct __x_ABI_CWindows_CDevices_CSensors_CIInclinometerStaticsVtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __x_ABI_CWindows_CDevices_CSensors_CIInclinometerStatics_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __x_ABI_CWindows_CDevices_CSensors_CIInclinometerStatics_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __x_ABI_CWindows_CDevices_CSensors_CIInclinometerStatics_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __x_ABI_CWindows_CDevices_CSensors_CIInclinometerStatics_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __x_ABI_CWindows_CDevices_CSensors_CIInclinometerStatics_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __x_ABI_CWindows_CDevices_CSensors_CIInclinometerStatics_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __x_ABI_CWindows_CDevices_CSensors_CIInclinometerStatics_GetDefault(This, result) \
    ((This)->lpVtbl->GetDefault(This, result))

#endif /* COBJMACROS */

EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CSensors_CIInclinometerStatics;
#endif /* !defined(____x_ABI_CWindows_CDevices_CSensors_CIInclinometerStatics_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Interface Windows.Devices.Sensors.IInclinometerStatics2
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Interface is a part of the implementation of type Windows.Devices.Sensors.Inclinometer
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____x_ABI_CWindows_CDevices_CSensors_CIInclinometerStatics2_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CDevices_CSensors_CIInclinometerStatics2_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Devices_Sensors_IInclinometerStatics2[] = L"Windows.Devices.Sensors.IInclinometerStatics2";
typedef struct __x_ABI_CWindows_CDevices_CSensors_CIInclinometerStatics2Vtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CDevices_CSensors_CIInclinometerStatics2* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CDevices_CSensors_CIInclinometerStatics2* This);
    ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CDevices_CSensors_CIInclinometerStatics2* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CDevices_CSensors_CIInclinometerStatics2* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CDevices_CSensors_CIInclinometerStatics2* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CDevices_CSensors_CIInclinometerStatics2* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* GetDefaultForRelativeReadings)(__x_ABI_CWindows_CDevices_CSensors_CIInclinometerStatics2* This,
        __x_ABI_CWindows_CDevices_CSensors_CIInclinometer** result);

    END_INTERFACE
} __x_ABI_CWindows_CDevices_CSensors_CIInclinometerStatics2Vtbl;

interface __x_ABI_CWindows_CDevices_CSensors_CIInclinometerStatics2
{
    CONST_VTBL struct __x_ABI_CWindows_CDevices_CSensors_CIInclinometerStatics2Vtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __x_ABI_CWindows_CDevices_CSensors_CIInclinometerStatics2_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __x_ABI_CWindows_CDevices_CSensors_CIInclinometerStatics2_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __x_ABI_CWindows_CDevices_CSensors_CIInclinometerStatics2_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __x_ABI_CWindows_CDevices_CSensors_CIInclinometerStatics2_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __x_ABI_CWindows_CDevices_CSensors_CIInclinometerStatics2_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __x_ABI_CWindows_CDevices_CSensors_CIInclinometerStatics2_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __x_ABI_CWindows_CDevices_CSensors_CIInclinometerStatics2_GetDefaultForRelativeReadings(This, result) \
    ((This)->lpVtbl->GetDefaultForRelativeReadings(This, result))

#endif /* COBJMACROS */

EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CSensors_CIInclinometerStatics2;
#endif /* !defined(____x_ABI_CWindows_CDevices_CSensors_CIInclinometerStatics2_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Interface Windows.Devices.Sensors.IInclinometerStatics3
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 3.0
 *
 * Interface is a part of the implementation of type Windows.Devices.Sensors.Inclinometer
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x30000
#if !defined(____x_ABI_CWindows_CDevices_CSensors_CIInclinometerStatics3_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CDevices_CSensors_CIInclinometerStatics3_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Devices_Sensors_IInclinometerStatics3[] = L"Windows.Devices.Sensors.IInclinometerStatics3";
typedef struct __x_ABI_CWindows_CDevices_CSensors_CIInclinometerStatics3Vtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CDevices_CSensors_CIInclinometerStatics3* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CDevices_CSensors_CIInclinometerStatics3* This);
    ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CDevices_CSensors_CIInclinometerStatics3* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CDevices_CSensors_CIInclinometerStatics3* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CDevices_CSensors_CIInclinometerStatics3* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CDevices_CSensors_CIInclinometerStatics3* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* GetDefaultWithSensorReadingType)(__x_ABI_CWindows_CDevices_CSensors_CIInclinometerStatics3* This,
        enum __x_ABI_CWindows_CDevices_CSensors_CSensorReadingType sensorReadingtype,
        __x_ABI_CWindows_CDevices_CSensors_CIInclinometer** result);

    END_INTERFACE
} __x_ABI_CWindows_CDevices_CSensors_CIInclinometerStatics3Vtbl;

interface __x_ABI_CWindows_CDevices_CSensors_CIInclinometerStatics3
{
    CONST_VTBL struct __x_ABI_CWindows_CDevices_CSensors_CIInclinometerStatics3Vtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __x_ABI_CWindows_CDevices_CSensors_CIInclinometerStatics3_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __x_ABI_CWindows_CDevices_CSensors_CIInclinometerStatics3_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __x_ABI_CWindows_CDevices_CSensors_CIInclinometerStatics3_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __x_ABI_CWindows_CDevices_CSensors_CIInclinometerStatics3_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __x_ABI_CWindows_CDevices_CSensors_CIInclinometerStatics3_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __x_ABI_CWindows_CDevices_CSensors_CIInclinometerStatics3_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __x_ABI_CWindows_CDevices_CSensors_CIInclinometerStatics3_GetDefaultWithSensorReadingType(This, sensorReadingtype, result) \
    ((This)->lpVtbl->GetDefaultWithSensorReadingType(This, sensorReadingtype, result))

#endif /* COBJMACROS */

EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CSensors_CIInclinometerStatics3;
#endif /* !defined(____x_ABI_CWindows_CDevices_CSensors_CIInclinometerStatics3_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x30000

/*
 *
 * Interface Windows.Devices.Sensors.IInclinometerStatics4
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 5.0
 *
 * Interface is a part of the implementation of type Windows.Devices.Sensors.Inclinometer
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x50000
#if !defined(____x_ABI_CWindows_CDevices_CSensors_CIInclinometerStatics4_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CDevices_CSensors_CIInclinometerStatics4_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Devices_Sensors_IInclinometerStatics4[] = L"Windows.Devices.Sensors.IInclinometerStatics4";
typedef struct __x_ABI_CWindows_CDevices_CSensors_CIInclinometerStatics4Vtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CDevices_CSensors_CIInclinometerStatics4* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CDevices_CSensors_CIInclinometerStatics4* This);
    ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CDevices_CSensors_CIInclinometerStatics4* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CDevices_CSensors_CIInclinometerStatics4* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CDevices_CSensors_CIInclinometerStatics4* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CDevices_CSensors_CIInclinometerStatics4* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* GetDeviceSelector)(__x_ABI_CWindows_CDevices_CSensors_CIInclinometerStatics4* This,
        enum __x_ABI_CWindows_CDevices_CSensors_CSensorReadingType readingType,
        HSTRING* result);
    HRESULT (STDMETHODCALLTYPE* FromIdAsync)(__x_ABI_CWindows_CDevices_CSensors_CIInclinometerStatics4* This,
        HSTRING deviceId,
        __FIAsyncOperation_1_Windows__CDevices__CSensors__CInclinometer** operation);

    END_INTERFACE
} __x_ABI_CWindows_CDevices_CSensors_CIInclinometerStatics4Vtbl;

interface __x_ABI_CWindows_CDevices_CSensors_CIInclinometerStatics4
{
    CONST_VTBL struct __x_ABI_CWindows_CDevices_CSensors_CIInclinometerStatics4Vtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __x_ABI_CWindows_CDevices_CSensors_CIInclinometerStatics4_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __x_ABI_CWindows_CDevices_CSensors_CIInclinometerStatics4_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __x_ABI_CWindows_CDevices_CSensors_CIInclinometerStatics4_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __x_ABI_CWindows_CDevices_CSensors_CIInclinometerStatics4_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __x_ABI_CWindows_CDevices_CSensors_CIInclinometerStatics4_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __x_ABI_CWindows_CDevices_CSensors_CIInclinometerStatics4_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __x_ABI_CWindows_CDevices_CSensors_CIInclinometerStatics4_GetDeviceSelector(This, readingType, result) \
    ((This)->lpVtbl->GetDeviceSelector(This, readingType, result))

#define __x_ABI_CWindows_CDevices_CSensors_CIInclinometerStatics4_FromIdAsync(This, deviceId, operation) \
    ((This)->lpVtbl->FromIdAsync(This, deviceId, operation))

#endif /* COBJMACROS */

EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CSensors_CIInclinometerStatics4;
#endif /* !defined(____x_ABI_CWindows_CDevices_CSensors_CIInclinometerStatics4_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x50000

/*
 *
 * Interface Windows.Devices.Sensors.ILightSensor
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Interface is a part of the implementation of type Windows.Devices.Sensors.LightSensor
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____x_ABI_CWindows_CDevices_CSensors_CILightSensor_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CDevices_CSensors_CILightSensor_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Devices_Sensors_ILightSensor[] = L"Windows.Devices.Sensors.ILightSensor";
typedef struct __x_ABI_CWindows_CDevices_CSensors_CILightSensorVtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CDevices_CSensors_CILightSensor* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CDevices_CSensors_CILightSensor* This);
    ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CDevices_CSensors_CILightSensor* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CDevices_CSensors_CILightSensor* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CDevices_CSensors_CILightSensor* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CDevices_CSensors_CILightSensor* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* GetCurrentReading)(__x_ABI_CWindows_CDevices_CSensors_CILightSensor* This,
        __x_ABI_CWindows_CDevices_CSensors_CILightSensorReading** value);
    HRESULT (STDMETHODCALLTYPE* get_MinimumReportInterval)(__x_ABI_CWindows_CDevices_CSensors_CILightSensor* This,
        UINT32* value);
    HRESULT (STDMETHODCALLTYPE* put_ReportInterval)(__x_ABI_CWindows_CDevices_CSensors_CILightSensor* This,
        UINT32 value);
    HRESULT (STDMETHODCALLTYPE* get_ReportInterval)(__x_ABI_CWindows_CDevices_CSensors_CILightSensor* This,
        UINT32* value);
    HRESULT (STDMETHODCALLTYPE* add_ReadingChanged)(__x_ABI_CWindows_CDevices_CSensors_CILightSensor* This,
        __FITypedEventHandler_2_Windows__CDevices__CSensors__CLightSensor_Windows__CDevices__CSensors__CLightSensorReadingChangedEventArgs* handler,
        EventRegistrationToken* token);
    HRESULT (STDMETHODCALLTYPE* remove_ReadingChanged)(__x_ABI_CWindows_CDevices_CSensors_CILightSensor* This,
        EventRegistrationToken token);

    END_INTERFACE
} __x_ABI_CWindows_CDevices_CSensors_CILightSensorVtbl;

interface __x_ABI_CWindows_CDevices_CSensors_CILightSensor
{
    CONST_VTBL struct __x_ABI_CWindows_CDevices_CSensors_CILightSensorVtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __x_ABI_CWindows_CDevices_CSensors_CILightSensor_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __x_ABI_CWindows_CDevices_CSensors_CILightSensor_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __x_ABI_CWindows_CDevices_CSensors_CILightSensor_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __x_ABI_CWindows_CDevices_CSensors_CILightSensor_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __x_ABI_CWindows_CDevices_CSensors_CILightSensor_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __x_ABI_CWindows_CDevices_CSensors_CILightSensor_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __x_ABI_CWindows_CDevices_CSensors_CILightSensor_GetCurrentReading(This, value) \
    ((This)->lpVtbl->GetCurrentReading(This, value))

#define __x_ABI_CWindows_CDevices_CSensors_CILightSensor_get_MinimumReportInterval(This, value) \
    ((This)->lpVtbl->get_MinimumReportInterval(This, value))

#define __x_ABI_CWindows_CDevices_CSensors_CILightSensor_put_ReportInterval(This, value) \
    ((This)->lpVtbl->put_ReportInterval(This, value))

#define __x_ABI_CWindows_CDevices_CSensors_CILightSensor_get_ReportInterval(This, value) \
    ((This)->lpVtbl->get_ReportInterval(This, value))

#define __x_ABI_CWindows_CDevices_CSensors_CILightSensor_add_ReadingChanged(This, handler, token) \
    ((This)->lpVtbl->add_ReadingChanged(This, handler, token))

#define __x_ABI_CWindows_CDevices_CSensors_CILightSensor_remove_ReadingChanged(This, token) \
    ((This)->lpVtbl->remove_ReadingChanged(This, token))

#endif /* COBJMACROS */

EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CSensors_CILightSensor;
#endif /* !defined(____x_ABI_CWindows_CDevices_CSensors_CILightSensor_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Interface Windows.Devices.Sensors.ILightSensor2
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 5.0
 *
 * Interface is a part of the implementation of type Windows.Devices.Sensors.LightSensor
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x50000
#if !defined(____x_ABI_CWindows_CDevices_CSensors_CILightSensor2_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CDevices_CSensors_CILightSensor2_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Devices_Sensors_ILightSensor2[] = L"Windows.Devices.Sensors.ILightSensor2";
typedef struct __x_ABI_CWindows_CDevices_CSensors_CILightSensor2Vtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CDevices_CSensors_CILightSensor2* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CDevices_CSensors_CILightSensor2* This);
    ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CDevices_CSensors_CILightSensor2* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CDevices_CSensors_CILightSensor2* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CDevices_CSensors_CILightSensor2* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CDevices_CSensors_CILightSensor2* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* put_ReportLatency)(__x_ABI_CWindows_CDevices_CSensors_CILightSensor2* This,
        UINT32 value);
    HRESULT (STDMETHODCALLTYPE* get_ReportLatency)(__x_ABI_CWindows_CDevices_CSensors_CILightSensor2* This,
        UINT32* value);
    HRESULT (STDMETHODCALLTYPE* get_MaxBatchSize)(__x_ABI_CWindows_CDevices_CSensors_CILightSensor2* This,
        UINT32* value);

    END_INTERFACE
} __x_ABI_CWindows_CDevices_CSensors_CILightSensor2Vtbl;

interface __x_ABI_CWindows_CDevices_CSensors_CILightSensor2
{
    CONST_VTBL struct __x_ABI_CWindows_CDevices_CSensors_CILightSensor2Vtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __x_ABI_CWindows_CDevices_CSensors_CILightSensor2_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __x_ABI_CWindows_CDevices_CSensors_CILightSensor2_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __x_ABI_CWindows_CDevices_CSensors_CILightSensor2_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __x_ABI_CWindows_CDevices_CSensors_CILightSensor2_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __x_ABI_CWindows_CDevices_CSensors_CILightSensor2_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __x_ABI_CWindows_CDevices_CSensors_CILightSensor2_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __x_ABI_CWindows_CDevices_CSensors_CILightSensor2_put_ReportLatency(This, value) \
    ((This)->lpVtbl->put_ReportLatency(This, value))

#define __x_ABI_CWindows_CDevices_CSensors_CILightSensor2_get_ReportLatency(This, value) \
    ((This)->lpVtbl->get_ReportLatency(This, value))

#define __x_ABI_CWindows_CDevices_CSensors_CILightSensor2_get_MaxBatchSize(This, value) \
    ((This)->lpVtbl->get_MaxBatchSize(This, value))

#endif /* COBJMACROS */

EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CSensors_CILightSensor2;
#endif /* !defined(____x_ABI_CWindows_CDevices_CSensors_CILightSensor2_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x50000

/*
 *
 * Interface Windows.Devices.Sensors.ILightSensor3
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 10.0
 *
 * Interface is a part of the implementation of type Windows.Devices.Sensors.LightSensor
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0xa0000
#if !defined(____x_ABI_CWindows_CDevices_CSensors_CILightSensor3_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CDevices_CSensors_CILightSensor3_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Devices_Sensors_ILightSensor3[] = L"Windows.Devices.Sensors.ILightSensor3";
typedef struct __x_ABI_CWindows_CDevices_CSensors_CILightSensor3Vtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CDevices_CSensors_CILightSensor3* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CDevices_CSensors_CILightSensor3* This);
    ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CDevices_CSensors_CILightSensor3* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CDevices_CSensors_CILightSensor3* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CDevices_CSensors_CILightSensor3* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CDevices_CSensors_CILightSensor3* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* get_ReportThreshold)(__x_ABI_CWindows_CDevices_CSensors_CILightSensor3* This,
        __x_ABI_CWindows_CDevices_CSensors_CILightSensorDataThreshold** value);

    END_INTERFACE
} __x_ABI_CWindows_CDevices_CSensors_CILightSensor3Vtbl;

interface __x_ABI_CWindows_CDevices_CSensors_CILightSensor3
{
    CONST_VTBL struct __x_ABI_CWindows_CDevices_CSensors_CILightSensor3Vtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __x_ABI_CWindows_CDevices_CSensors_CILightSensor3_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __x_ABI_CWindows_CDevices_CSensors_CILightSensor3_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __x_ABI_CWindows_CDevices_CSensors_CILightSensor3_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __x_ABI_CWindows_CDevices_CSensors_CILightSensor3_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __x_ABI_CWindows_CDevices_CSensors_CILightSensor3_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __x_ABI_CWindows_CDevices_CSensors_CILightSensor3_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __x_ABI_CWindows_CDevices_CSensors_CILightSensor3_get_ReportThreshold(This, value) \
    ((This)->lpVtbl->get_ReportThreshold(This, value))

#endif /* COBJMACROS */

EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CSensors_CILightSensor3;
#endif /* !defined(____x_ABI_CWindows_CDevices_CSensors_CILightSensor3_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0xa0000

/*
 *
 * Interface Windows.Devices.Sensors.ILightSensorDataThreshold
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 10.0
 *
 * Interface is a part of the implementation of type Windows.Devices.Sensors.LightSensorDataThreshold
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0xa0000
#if !defined(____x_ABI_CWindows_CDevices_CSensors_CILightSensorDataThreshold_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CDevices_CSensors_CILightSensorDataThreshold_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Devices_Sensors_ILightSensorDataThreshold[] = L"Windows.Devices.Sensors.ILightSensorDataThreshold";
typedef struct __x_ABI_CWindows_CDevices_CSensors_CILightSensorDataThresholdVtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CDevices_CSensors_CILightSensorDataThreshold* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CDevices_CSensors_CILightSensorDataThreshold* This);
    ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CDevices_CSensors_CILightSensorDataThreshold* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CDevices_CSensors_CILightSensorDataThreshold* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CDevices_CSensors_CILightSensorDataThreshold* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CDevices_CSensors_CILightSensorDataThreshold* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* get_LuxPercentage)(__x_ABI_CWindows_CDevices_CSensors_CILightSensorDataThreshold* This,
        FLOAT* value);
    HRESULT (STDMETHODCALLTYPE* put_LuxPercentage)(__x_ABI_CWindows_CDevices_CSensors_CILightSensorDataThreshold* This,
        FLOAT value);
    HRESULT (STDMETHODCALLTYPE* get_AbsoluteLux)(__x_ABI_CWindows_CDevices_CSensors_CILightSensorDataThreshold* This,
        FLOAT* value);
    HRESULT (STDMETHODCALLTYPE* put_AbsoluteLux)(__x_ABI_CWindows_CDevices_CSensors_CILightSensorDataThreshold* This,
        FLOAT value);

    END_INTERFACE
} __x_ABI_CWindows_CDevices_CSensors_CILightSensorDataThresholdVtbl;

interface __x_ABI_CWindows_CDevices_CSensors_CILightSensorDataThreshold
{
    CONST_VTBL struct __x_ABI_CWindows_CDevices_CSensors_CILightSensorDataThresholdVtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __x_ABI_CWindows_CDevices_CSensors_CILightSensorDataThreshold_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __x_ABI_CWindows_CDevices_CSensors_CILightSensorDataThreshold_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __x_ABI_CWindows_CDevices_CSensors_CILightSensorDataThreshold_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __x_ABI_CWindows_CDevices_CSensors_CILightSensorDataThreshold_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __x_ABI_CWindows_CDevices_CSensors_CILightSensorDataThreshold_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __x_ABI_CWindows_CDevices_CSensors_CILightSensorDataThreshold_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __x_ABI_CWindows_CDevices_CSensors_CILightSensorDataThreshold_get_LuxPercentage(This, value) \
    ((This)->lpVtbl->get_LuxPercentage(This, value))

#define __x_ABI_CWindows_CDevices_CSensors_CILightSensorDataThreshold_put_LuxPercentage(This, value) \
    ((This)->lpVtbl->put_LuxPercentage(This, value))

#define __x_ABI_CWindows_CDevices_CSensors_CILightSensorDataThreshold_get_AbsoluteLux(This, value) \
    ((This)->lpVtbl->get_AbsoluteLux(This, value))

#define __x_ABI_CWindows_CDevices_CSensors_CILightSensorDataThreshold_put_AbsoluteLux(This, value) \
    ((This)->lpVtbl->put_AbsoluteLux(This, value))

#endif /* COBJMACROS */

EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CSensors_CILightSensorDataThreshold;
#endif /* !defined(____x_ABI_CWindows_CDevices_CSensors_CILightSensorDataThreshold_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0xa0000

/*
 *
 * Interface Windows.Devices.Sensors.ILightSensorDeviceId
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Interface is a part of the implementation of type Windows.Devices.Sensors.LightSensor
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____x_ABI_CWindows_CDevices_CSensors_CILightSensorDeviceId_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CDevices_CSensors_CILightSensorDeviceId_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Devices_Sensors_ILightSensorDeviceId[] = L"Windows.Devices.Sensors.ILightSensorDeviceId";
typedef struct __x_ABI_CWindows_CDevices_CSensors_CILightSensorDeviceIdVtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CDevices_CSensors_CILightSensorDeviceId* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CDevices_CSensors_CILightSensorDeviceId* This);
    ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CDevices_CSensors_CILightSensorDeviceId* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CDevices_CSensors_CILightSensorDeviceId* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CDevices_CSensors_CILightSensorDeviceId* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CDevices_CSensors_CILightSensorDeviceId* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* get_DeviceId)(__x_ABI_CWindows_CDevices_CSensors_CILightSensorDeviceId* This,
        HSTRING* value);

    END_INTERFACE
} __x_ABI_CWindows_CDevices_CSensors_CILightSensorDeviceIdVtbl;

interface __x_ABI_CWindows_CDevices_CSensors_CILightSensorDeviceId
{
    CONST_VTBL struct __x_ABI_CWindows_CDevices_CSensors_CILightSensorDeviceIdVtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __x_ABI_CWindows_CDevices_CSensors_CILightSensorDeviceId_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __x_ABI_CWindows_CDevices_CSensors_CILightSensorDeviceId_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __x_ABI_CWindows_CDevices_CSensors_CILightSensorDeviceId_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __x_ABI_CWindows_CDevices_CSensors_CILightSensorDeviceId_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __x_ABI_CWindows_CDevices_CSensors_CILightSensorDeviceId_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __x_ABI_CWindows_CDevices_CSensors_CILightSensorDeviceId_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __x_ABI_CWindows_CDevices_CSensors_CILightSensorDeviceId_get_DeviceId(This, value) \
    ((This)->lpVtbl->get_DeviceId(This, value))

#endif /* COBJMACROS */

EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CSensors_CILightSensorDeviceId;
#endif /* !defined(____x_ABI_CWindows_CDevices_CSensors_CILightSensorDeviceId_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Interface Windows.Devices.Sensors.ILightSensorReading
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Interface is a part of the implementation of type Windows.Devices.Sensors.LightSensorReading
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____x_ABI_CWindows_CDevices_CSensors_CILightSensorReading_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CDevices_CSensors_CILightSensorReading_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Devices_Sensors_ILightSensorReading[] = L"Windows.Devices.Sensors.ILightSensorReading";
typedef struct __x_ABI_CWindows_CDevices_CSensors_CILightSensorReadingVtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CDevices_CSensors_CILightSensorReading* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CDevices_CSensors_CILightSensorReading* This);
    ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CDevices_CSensors_CILightSensorReading* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CDevices_CSensors_CILightSensorReading* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CDevices_CSensors_CILightSensorReading* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CDevices_CSensors_CILightSensorReading* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* get_Timestamp)(__x_ABI_CWindows_CDevices_CSensors_CILightSensorReading* This,
        struct __x_ABI_CWindows_CFoundation_CDateTime* value);
    HRESULT (STDMETHODCALLTYPE* get_IlluminanceInLux)(__x_ABI_CWindows_CDevices_CSensors_CILightSensorReading* This,
        FLOAT* value);

    END_INTERFACE
} __x_ABI_CWindows_CDevices_CSensors_CILightSensorReadingVtbl;

interface __x_ABI_CWindows_CDevices_CSensors_CILightSensorReading
{
    CONST_VTBL struct __x_ABI_CWindows_CDevices_CSensors_CILightSensorReadingVtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __x_ABI_CWindows_CDevices_CSensors_CILightSensorReading_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __x_ABI_CWindows_CDevices_CSensors_CILightSensorReading_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __x_ABI_CWindows_CDevices_CSensors_CILightSensorReading_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __x_ABI_CWindows_CDevices_CSensors_CILightSensorReading_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __x_ABI_CWindows_CDevices_CSensors_CILightSensorReading_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __x_ABI_CWindows_CDevices_CSensors_CILightSensorReading_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __x_ABI_CWindows_CDevices_CSensors_CILightSensorReading_get_Timestamp(This, value) \
    ((This)->lpVtbl->get_Timestamp(This, value))

#define __x_ABI_CWindows_CDevices_CSensors_CILightSensorReading_get_IlluminanceInLux(This, value) \
    ((This)->lpVtbl->get_IlluminanceInLux(This, value))

#endif /* COBJMACROS */

EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CSensors_CILightSensorReading;
#endif /* !defined(____x_ABI_CWindows_CDevices_CSensors_CILightSensorReading_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Interface Windows.Devices.Sensors.ILightSensorReading2
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 5.0
 *
 * Interface is a part of the implementation of type Windows.Devices.Sensors.LightSensorReading
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x50000
#if !defined(____x_ABI_CWindows_CDevices_CSensors_CILightSensorReading2_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CDevices_CSensors_CILightSensorReading2_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Devices_Sensors_ILightSensorReading2[] = L"Windows.Devices.Sensors.ILightSensorReading2";
typedef struct __x_ABI_CWindows_CDevices_CSensors_CILightSensorReading2Vtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CDevices_CSensors_CILightSensorReading2* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CDevices_CSensors_CILightSensorReading2* This);
    ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CDevices_CSensors_CILightSensorReading2* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CDevices_CSensors_CILightSensorReading2* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CDevices_CSensors_CILightSensorReading2* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CDevices_CSensors_CILightSensorReading2* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* get_PerformanceCount)(__x_ABI_CWindows_CDevices_CSensors_CILightSensorReading2* This,
        __FIReference_1_Windows__CFoundation__CTimeSpan** value);
    HRESULT (STDMETHODCALLTYPE* get_Properties)(__x_ABI_CWindows_CDevices_CSensors_CILightSensorReading2* This,
        __FIMapView_2_HSTRING_IInspectable** value);

    END_INTERFACE
} __x_ABI_CWindows_CDevices_CSensors_CILightSensorReading2Vtbl;

interface __x_ABI_CWindows_CDevices_CSensors_CILightSensorReading2
{
    CONST_VTBL struct __x_ABI_CWindows_CDevices_CSensors_CILightSensorReading2Vtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __x_ABI_CWindows_CDevices_CSensors_CILightSensorReading2_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __x_ABI_CWindows_CDevices_CSensors_CILightSensorReading2_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __x_ABI_CWindows_CDevices_CSensors_CILightSensorReading2_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __x_ABI_CWindows_CDevices_CSensors_CILightSensorReading2_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __x_ABI_CWindows_CDevices_CSensors_CILightSensorReading2_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __x_ABI_CWindows_CDevices_CSensors_CILightSensorReading2_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __x_ABI_CWindows_CDevices_CSensors_CILightSensorReading2_get_PerformanceCount(This, value) \
    ((This)->lpVtbl->get_PerformanceCount(This, value))

#define __x_ABI_CWindows_CDevices_CSensors_CILightSensorReading2_get_Properties(This, value) \
    ((This)->lpVtbl->get_Properties(This, value))

#endif /* COBJMACROS */

EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CSensors_CILightSensorReading2;
#endif /* !defined(____x_ABI_CWindows_CDevices_CSensors_CILightSensorReading2_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x50000

/*
 *
 * Interface Windows.Devices.Sensors.ILightSensorReadingChangedEventArgs
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Interface is a part of the implementation of type Windows.Devices.Sensors.LightSensorReadingChangedEventArgs
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____x_ABI_CWindows_CDevices_CSensors_CILightSensorReadingChangedEventArgs_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CDevices_CSensors_CILightSensorReadingChangedEventArgs_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Devices_Sensors_ILightSensorReadingChangedEventArgs[] = L"Windows.Devices.Sensors.ILightSensorReadingChangedEventArgs";
typedef struct __x_ABI_CWindows_CDevices_CSensors_CILightSensorReadingChangedEventArgsVtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CDevices_CSensors_CILightSensorReadingChangedEventArgs* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CDevices_CSensors_CILightSensorReadingChangedEventArgs* This);
    ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CDevices_CSensors_CILightSensorReadingChangedEventArgs* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CDevices_CSensors_CILightSensorReadingChangedEventArgs* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CDevices_CSensors_CILightSensorReadingChangedEventArgs* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CDevices_CSensors_CILightSensorReadingChangedEventArgs* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* get_Reading)(__x_ABI_CWindows_CDevices_CSensors_CILightSensorReadingChangedEventArgs* This,
        __x_ABI_CWindows_CDevices_CSensors_CILightSensorReading** value);

    END_INTERFACE
} __x_ABI_CWindows_CDevices_CSensors_CILightSensorReadingChangedEventArgsVtbl;

interface __x_ABI_CWindows_CDevices_CSensors_CILightSensorReadingChangedEventArgs
{
    CONST_VTBL struct __x_ABI_CWindows_CDevices_CSensors_CILightSensorReadingChangedEventArgsVtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __x_ABI_CWindows_CDevices_CSensors_CILightSensorReadingChangedEventArgs_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __x_ABI_CWindows_CDevices_CSensors_CILightSensorReadingChangedEventArgs_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __x_ABI_CWindows_CDevices_CSensors_CILightSensorReadingChangedEventArgs_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __x_ABI_CWindows_CDevices_CSensors_CILightSensorReadingChangedEventArgs_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __x_ABI_CWindows_CDevices_CSensors_CILightSensorReadingChangedEventArgs_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __x_ABI_CWindows_CDevices_CSensors_CILightSensorReadingChangedEventArgs_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __x_ABI_CWindows_CDevices_CSensors_CILightSensorReadingChangedEventArgs_get_Reading(This, value) \
    ((This)->lpVtbl->get_Reading(This, value))

#endif /* COBJMACROS */

EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CSensors_CILightSensorReadingChangedEventArgs;
#endif /* !defined(____x_ABI_CWindows_CDevices_CSensors_CILightSensorReadingChangedEventArgs_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Interface Windows.Devices.Sensors.ILightSensorStatics
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Interface is a part of the implementation of type Windows.Devices.Sensors.LightSensor
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____x_ABI_CWindows_CDevices_CSensors_CILightSensorStatics_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CDevices_CSensors_CILightSensorStatics_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Devices_Sensors_ILightSensorStatics[] = L"Windows.Devices.Sensors.ILightSensorStatics";
typedef struct __x_ABI_CWindows_CDevices_CSensors_CILightSensorStaticsVtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CDevices_CSensors_CILightSensorStatics* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CDevices_CSensors_CILightSensorStatics* This);
    ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CDevices_CSensors_CILightSensorStatics* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CDevices_CSensors_CILightSensorStatics* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CDevices_CSensors_CILightSensorStatics* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CDevices_CSensors_CILightSensorStatics* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* GetDefault)(__x_ABI_CWindows_CDevices_CSensors_CILightSensorStatics* This,
        __x_ABI_CWindows_CDevices_CSensors_CILightSensor** result);

    END_INTERFACE
} __x_ABI_CWindows_CDevices_CSensors_CILightSensorStaticsVtbl;

interface __x_ABI_CWindows_CDevices_CSensors_CILightSensorStatics
{
    CONST_VTBL struct __x_ABI_CWindows_CDevices_CSensors_CILightSensorStaticsVtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __x_ABI_CWindows_CDevices_CSensors_CILightSensorStatics_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __x_ABI_CWindows_CDevices_CSensors_CILightSensorStatics_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __x_ABI_CWindows_CDevices_CSensors_CILightSensorStatics_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __x_ABI_CWindows_CDevices_CSensors_CILightSensorStatics_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __x_ABI_CWindows_CDevices_CSensors_CILightSensorStatics_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __x_ABI_CWindows_CDevices_CSensors_CILightSensorStatics_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __x_ABI_CWindows_CDevices_CSensors_CILightSensorStatics_GetDefault(This, result) \
    ((This)->lpVtbl->GetDefault(This, result))

#endif /* COBJMACROS */

EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CSensors_CILightSensorStatics;
#endif /* !defined(____x_ABI_CWindows_CDevices_CSensors_CILightSensorStatics_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Interface Windows.Devices.Sensors.ILightSensorStatics2
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 5.0
 *
 * Interface is a part of the implementation of type Windows.Devices.Sensors.LightSensor
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x50000
#if !defined(____x_ABI_CWindows_CDevices_CSensors_CILightSensorStatics2_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CDevices_CSensors_CILightSensorStatics2_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Devices_Sensors_ILightSensorStatics2[] = L"Windows.Devices.Sensors.ILightSensorStatics2";
typedef struct __x_ABI_CWindows_CDevices_CSensors_CILightSensorStatics2Vtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CDevices_CSensors_CILightSensorStatics2* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CDevices_CSensors_CILightSensorStatics2* This);
    ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CDevices_CSensors_CILightSensorStatics2* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CDevices_CSensors_CILightSensorStatics2* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CDevices_CSensors_CILightSensorStatics2* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CDevices_CSensors_CILightSensorStatics2* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* GetDeviceSelector)(__x_ABI_CWindows_CDevices_CSensors_CILightSensorStatics2* This,
        HSTRING* result);
    HRESULT (STDMETHODCALLTYPE* FromIdAsync)(__x_ABI_CWindows_CDevices_CSensors_CILightSensorStatics2* This,
        HSTRING deviceId,
        __FIAsyncOperation_1_Windows__CDevices__CSensors__CLightSensor** operation);

    END_INTERFACE
} __x_ABI_CWindows_CDevices_CSensors_CILightSensorStatics2Vtbl;

interface __x_ABI_CWindows_CDevices_CSensors_CILightSensorStatics2
{
    CONST_VTBL struct __x_ABI_CWindows_CDevices_CSensors_CILightSensorStatics2Vtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __x_ABI_CWindows_CDevices_CSensors_CILightSensorStatics2_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __x_ABI_CWindows_CDevices_CSensors_CILightSensorStatics2_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __x_ABI_CWindows_CDevices_CSensors_CILightSensorStatics2_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __x_ABI_CWindows_CDevices_CSensors_CILightSensorStatics2_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __x_ABI_CWindows_CDevices_CSensors_CILightSensorStatics2_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __x_ABI_CWindows_CDevices_CSensors_CILightSensorStatics2_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __x_ABI_CWindows_CDevices_CSensors_CILightSensorStatics2_GetDeviceSelector(This, result) \
    ((This)->lpVtbl->GetDeviceSelector(This, result))

#define __x_ABI_CWindows_CDevices_CSensors_CILightSensorStatics2_FromIdAsync(This, deviceId, operation) \
    ((This)->lpVtbl->FromIdAsync(This, deviceId, operation))

#endif /* COBJMACROS */

EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CSensors_CILightSensorStatics2;
#endif /* !defined(____x_ABI_CWindows_CDevices_CSensors_CILightSensorStatics2_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x50000

/*
 *
 * Interface Windows.Devices.Sensors.IMagnetometer
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Interface is a part of the implementation of type Windows.Devices.Sensors.Magnetometer
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____x_ABI_CWindows_CDevices_CSensors_CIMagnetometer_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CDevices_CSensors_CIMagnetometer_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Devices_Sensors_IMagnetometer[] = L"Windows.Devices.Sensors.IMagnetometer";
typedef struct __x_ABI_CWindows_CDevices_CSensors_CIMagnetometerVtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CDevices_CSensors_CIMagnetometer* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CDevices_CSensors_CIMagnetometer* This);
    ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CDevices_CSensors_CIMagnetometer* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CDevices_CSensors_CIMagnetometer* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CDevices_CSensors_CIMagnetometer* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CDevices_CSensors_CIMagnetometer* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* GetCurrentReading)(__x_ABI_CWindows_CDevices_CSensors_CIMagnetometer* This,
        __x_ABI_CWindows_CDevices_CSensors_CIMagnetometerReading** value);
    HRESULT (STDMETHODCALLTYPE* get_MinimumReportInterval)(__x_ABI_CWindows_CDevices_CSensors_CIMagnetometer* This,
        UINT32* value);
    HRESULT (STDMETHODCALLTYPE* put_ReportInterval)(__x_ABI_CWindows_CDevices_CSensors_CIMagnetometer* This,
        UINT32 value);
    HRESULT (STDMETHODCALLTYPE* get_ReportInterval)(__x_ABI_CWindows_CDevices_CSensors_CIMagnetometer* This,
        UINT32* value);
    HRESULT (STDMETHODCALLTYPE* add_ReadingChanged)(__x_ABI_CWindows_CDevices_CSensors_CIMagnetometer* This,
        __FITypedEventHandler_2_Windows__CDevices__CSensors__CMagnetometer_Windows__CDevices__CSensors__CMagnetometerReadingChangedEventArgs* handler,
        EventRegistrationToken* token);
    HRESULT (STDMETHODCALLTYPE* remove_ReadingChanged)(__x_ABI_CWindows_CDevices_CSensors_CIMagnetometer* This,
        EventRegistrationToken token);

    END_INTERFACE
} __x_ABI_CWindows_CDevices_CSensors_CIMagnetometerVtbl;

interface __x_ABI_CWindows_CDevices_CSensors_CIMagnetometer
{
    CONST_VTBL struct __x_ABI_CWindows_CDevices_CSensors_CIMagnetometerVtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __x_ABI_CWindows_CDevices_CSensors_CIMagnetometer_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __x_ABI_CWindows_CDevices_CSensors_CIMagnetometer_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __x_ABI_CWindows_CDevices_CSensors_CIMagnetometer_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __x_ABI_CWindows_CDevices_CSensors_CIMagnetometer_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __x_ABI_CWindows_CDevices_CSensors_CIMagnetometer_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __x_ABI_CWindows_CDevices_CSensors_CIMagnetometer_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __x_ABI_CWindows_CDevices_CSensors_CIMagnetometer_GetCurrentReading(This, value) \
    ((This)->lpVtbl->GetCurrentReading(This, value))

#define __x_ABI_CWindows_CDevices_CSensors_CIMagnetometer_get_MinimumReportInterval(This, value) \
    ((This)->lpVtbl->get_MinimumReportInterval(This, value))

#define __x_ABI_CWindows_CDevices_CSensors_CIMagnetometer_put_ReportInterval(This, value) \
    ((This)->lpVtbl->put_ReportInterval(This, value))

#define __x_ABI_CWindows_CDevices_CSensors_CIMagnetometer_get_ReportInterval(This, value) \
    ((This)->lpVtbl->get_ReportInterval(This, value))

#define __x_ABI_CWindows_CDevices_CSensors_CIMagnetometer_add_ReadingChanged(This, handler, token) \
    ((This)->lpVtbl->add_ReadingChanged(This, handler, token))

#define __x_ABI_CWindows_CDevices_CSensors_CIMagnetometer_remove_ReadingChanged(This, token) \
    ((This)->lpVtbl->remove_ReadingChanged(This, token))

#endif /* COBJMACROS */

EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CSensors_CIMagnetometer;
#endif /* !defined(____x_ABI_CWindows_CDevices_CSensors_CIMagnetometer_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Interface Windows.Devices.Sensors.IMagnetometer2
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Interface is a part of the implementation of type Windows.Devices.Sensors.Magnetometer
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____x_ABI_CWindows_CDevices_CSensors_CIMagnetometer2_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CDevices_CSensors_CIMagnetometer2_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Devices_Sensors_IMagnetometer2[] = L"Windows.Devices.Sensors.IMagnetometer2";
typedef struct __x_ABI_CWindows_CDevices_CSensors_CIMagnetometer2Vtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CDevices_CSensors_CIMagnetometer2* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CDevices_CSensors_CIMagnetometer2* This);
    ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CDevices_CSensors_CIMagnetometer2* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CDevices_CSensors_CIMagnetometer2* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CDevices_CSensors_CIMagnetometer2* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CDevices_CSensors_CIMagnetometer2* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* put_ReadingTransform)(__x_ABI_CWindows_CDevices_CSensors_CIMagnetometer2* This,
        enum __x_ABI_CWindows_CGraphics_CDisplay_CDisplayOrientations value);
    HRESULT (STDMETHODCALLTYPE* get_ReadingTransform)(__x_ABI_CWindows_CDevices_CSensors_CIMagnetometer2* This,
        enum __x_ABI_CWindows_CGraphics_CDisplay_CDisplayOrientations* value);

    END_INTERFACE
} __x_ABI_CWindows_CDevices_CSensors_CIMagnetometer2Vtbl;

interface __x_ABI_CWindows_CDevices_CSensors_CIMagnetometer2
{
    CONST_VTBL struct __x_ABI_CWindows_CDevices_CSensors_CIMagnetometer2Vtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __x_ABI_CWindows_CDevices_CSensors_CIMagnetometer2_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __x_ABI_CWindows_CDevices_CSensors_CIMagnetometer2_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __x_ABI_CWindows_CDevices_CSensors_CIMagnetometer2_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __x_ABI_CWindows_CDevices_CSensors_CIMagnetometer2_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __x_ABI_CWindows_CDevices_CSensors_CIMagnetometer2_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __x_ABI_CWindows_CDevices_CSensors_CIMagnetometer2_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __x_ABI_CWindows_CDevices_CSensors_CIMagnetometer2_put_ReadingTransform(This, value) \
    ((This)->lpVtbl->put_ReadingTransform(This, value))

#define __x_ABI_CWindows_CDevices_CSensors_CIMagnetometer2_get_ReadingTransform(This, value) \
    ((This)->lpVtbl->get_ReadingTransform(This, value))

#endif /* COBJMACROS */

EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CSensors_CIMagnetometer2;
#endif /* !defined(____x_ABI_CWindows_CDevices_CSensors_CIMagnetometer2_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Interface Windows.Devices.Sensors.IMagnetometer3
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 5.0
 *
 * Interface is a part of the implementation of type Windows.Devices.Sensors.Magnetometer
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x50000
#if !defined(____x_ABI_CWindows_CDevices_CSensors_CIMagnetometer3_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CDevices_CSensors_CIMagnetometer3_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Devices_Sensors_IMagnetometer3[] = L"Windows.Devices.Sensors.IMagnetometer3";
typedef struct __x_ABI_CWindows_CDevices_CSensors_CIMagnetometer3Vtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CDevices_CSensors_CIMagnetometer3* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CDevices_CSensors_CIMagnetometer3* This);
    ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CDevices_CSensors_CIMagnetometer3* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CDevices_CSensors_CIMagnetometer3* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CDevices_CSensors_CIMagnetometer3* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CDevices_CSensors_CIMagnetometer3* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* put_ReportLatency)(__x_ABI_CWindows_CDevices_CSensors_CIMagnetometer3* This,
        UINT32 value);
    HRESULT (STDMETHODCALLTYPE* get_ReportLatency)(__x_ABI_CWindows_CDevices_CSensors_CIMagnetometer3* This,
        UINT32* value);
    HRESULT (STDMETHODCALLTYPE* get_MaxBatchSize)(__x_ABI_CWindows_CDevices_CSensors_CIMagnetometer3* This,
        UINT32* value);

    END_INTERFACE
} __x_ABI_CWindows_CDevices_CSensors_CIMagnetometer3Vtbl;

interface __x_ABI_CWindows_CDevices_CSensors_CIMagnetometer3
{
    CONST_VTBL struct __x_ABI_CWindows_CDevices_CSensors_CIMagnetometer3Vtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __x_ABI_CWindows_CDevices_CSensors_CIMagnetometer3_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __x_ABI_CWindows_CDevices_CSensors_CIMagnetometer3_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __x_ABI_CWindows_CDevices_CSensors_CIMagnetometer3_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __x_ABI_CWindows_CDevices_CSensors_CIMagnetometer3_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __x_ABI_CWindows_CDevices_CSensors_CIMagnetometer3_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __x_ABI_CWindows_CDevices_CSensors_CIMagnetometer3_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __x_ABI_CWindows_CDevices_CSensors_CIMagnetometer3_put_ReportLatency(This, value) \
    ((This)->lpVtbl->put_ReportLatency(This, value))

#define __x_ABI_CWindows_CDevices_CSensors_CIMagnetometer3_get_ReportLatency(This, value) \
    ((This)->lpVtbl->get_ReportLatency(This, value))

#define __x_ABI_CWindows_CDevices_CSensors_CIMagnetometer3_get_MaxBatchSize(This, value) \
    ((This)->lpVtbl->get_MaxBatchSize(This, value))

#endif /* COBJMACROS */

EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CSensors_CIMagnetometer3;
#endif /* !defined(____x_ABI_CWindows_CDevices_CSensors_CIMagnetometer3_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x50000

/*
 *
 * Interface Windows.Devices.Sensors.IMagnetometer4
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 10.0
 *
 * Interface is a part of the implementation of type Windows.Devices.Sensors.Magnetometer
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0xa0000
#if !defined(____x_ABI_CWindows_CDevices_CSensors_CIMagnetometer4_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CDevices_CSensors_CIMagnetometer4_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Devices_Sensors_IMagnetometer4[] = L"Windows.Devices.Sensors.IMagnetometer4";
typedef struct __x_ABI_CWindows_CDevices_CSensors_CIMagnetometer4Vtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CDevices_CSensors_CIMagnetometer4* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CDevices_CSensors_CIMagnetometer4* This);
    ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CDevices_CSensors_CIMagnetometer4* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CDevices_CSensors_CIMagnetometer4* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CDevices_CSensors_CIMagnetometer4* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CDevices_CSensors_CIMagnetometer4* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* get_ReportThreshold)(__x_ABI_CWindows_CDevices_CSensors_CIMagnetometer4* This,
        __x_ABI_CWindows_CDevices_CSensors_CIMagnetometerDataThreshold** value);

    END_INTERFACE
} __x_ABI_CWindows_CDevices_CSensors_CIMagnetometer4Vtbl;

interface __x_ABI_CWindows_CDevices_CSensors_CIMagnetometer4
{
    CONST_VTBL struct __x_ABI_CWindows_CDevices_CSensors_CIMagnetometer4Vtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __x_ABI_CWindows_CDevices_CSensors_CIMagnetometer4_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __x_ABI_CWindows_CDevices_CSensors_CIMagnetometer4_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __x_ABI_CWindows_CDevices_CSensors_CIMagnetometer4_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __x_ABI_CWindows_CDevices_CSensors_CIMagnetometer4_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __x_ABI_CWindows_CDevices_CSensors_CIMagnetometer4_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __x_ABI_CWindows_CDevices_CSensors_CIMagnetometer4_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __x_ABI_CWindows_CDevices_CSensors_CIMagnetometer4_get_ReportThreshold(This, value) \
    ((This)->lpVtbl->get_ReportThreshold(This, value))

#endif /* COBJMACROS */

EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CSensors_CIMagnetometer4;
#endif /* !defined(____x_ABI_CWindows_CDevices_CSensors_CIMagnetometer4_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0xa0000

/*
 *
 * Interface Windows.Devices.Sensors.IMagnetometerDataThreshold
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 10.0
 *
 * Interface is a part of the implementation of type Windows.Devices.Sensors.MagnetometerDataThreshold
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0xa0000
#if !defined(____x_ABI_CWindows_CDevices_CSensors_CIMagnetometerDataThreshold_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CDevices_CSensors_CIMagnetometerDataThreshold_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Devices_Sensors_IMagnetometerDataThreshold[] = L"Windows.Devices.Sensors.IMagnetometerDataThreshold";
typedef struct __x_ABI_CWindows_CDevices_CSensors_CIMagnetometerDataThresholdVtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CDevices_CSensors_CIMagnetometerDataThreshold* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CDevices_CSensors_CIMagnetometerDataThreshold* This);
    ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CDevices_CSensors_CIMagnetometerDataThreshold* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CDevices_CSensors_CIMagnetometerDataThreshold* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CDevices_CSensors_CIMagnetometerDataThreshold* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CDevices_CSensors_CIMagnetometerDataThreshold* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* get_XAxisMicroteslas)(__x_ABI_CWindows_CDevices_CSensors_CIMagnetometerDataThreshold* This,
        FLOAT* value);
    HRESULT (STDMETHODCALLTYPE* put_XAxisMicroteslas)(__x_ABI_CWindows_CDevices_CSensors_CIMagnetometerDataThreshold* This,
        FLOAT value);
    HRESULT (STDMETHODCALLTYPE* get_YAxisMicroteslas)(__x_ABI_CWindows_CDevices_CSensors_CIMagnetometerDataThreshold* This,
        FLOAT* value);
    HRESULT (STDMETHODCALLTYPE* put_YAxisMicroteslas)(__x_ABI_CWindows_CDevices_CSensors_CIMagnetometerDataThreshold* This,
        FLOAT value);
    HRESULT (STDMETHODCALLTYPE* get_ZAxisMicroteslas)(__x_ABI_CWindows_CDevices_CSensors_CIMagnetometerDataThreshold* This,
        FLOAT* value);
    HRESULT (STDMETHODCALLTYPE* put_ZAxisMicroteslas)(__x_ABI_CWindows_CDevices_CSensors_CIMagnetometerDataThreshold* This,
        FLOAT value);

    END_INTERFACE
} __x_ABI_CWindows_CDevices_CSensors_CIMagnetometerDataThresholdVtbl;

interface __x_ABI_CWindows_CDevices_CSensors_CIMagnetometerDataThreshold
{
    CONST_VTBL struct __x_ABI_CWindows_CDevices_CSensors_CIMagnetometerDataThresholdVtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __x_ABI_CWindows_CDevices_CSensors_CIMagnetometerDataThreshold_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __x_ABI_CWindows_CDevices_CSensors_CIMagnetometerDataThreshold_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __x_ABI_CWindows_CDevices_CSensors_CIMagnetometerDataThreshold_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __x_ABI_CWindows_CDevices_CSensors_CIMagnetometerDataThreshold_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __x_ABI_CWindows_CDevices_CSensors_CIMagnetometerDataThreshold_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __x_ABI_CWindows_CDevices_CSensors_CIMagnetometerDataThreshold_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __x_ABI_CWindows_CDevices_CSensors_CIMagnetometerDataThreshold_get_XAxisMicroteslas(This, value) \
    ((This)->lpVtbl->get_XAxisMicroteslas(This, value))

#define __x_ABI_CWindows_CDevices_CSensors_CIMagnetometerDataThreshold_put_XAxisMicroteslas(This, value) \
    ((This)->lpVtbl->put_XAxisMicroteslas(This, value))

#define __x_ABI_CWindows_CDevices_CSensors_CIMagnetometerDataThreshold_get_YAxisMicroteslas(This, value) \
    ((This)->lpVtbl->get_YAxisMicroteslas(This, value))

#define __x_ABI_CWindows_CDevices_CSensors_CIMagnetometerDataThreshold_put_YAxisMicroteslas(This, value) \
    ((This)->lpVtbl->put_YAxisMicroteslas(This, value))

#define __x_ABI_CWindows_CDevices_CSensors_CIMagnetometerDataThreshold_get_ZAxisMicroteslas(This, value) \
    ((This)->lpVtbl->get_ZAxisMicroteslas(This, value))

#define __x_ABI_CWindows_CDevices_CSensors_CIMagnetometerDataThreshold_put_ZAxisMicroteslas(This, value) \
    ((This)->lpVtbl->put_ZAxisMicroteslas(This, value))

#endif /* COBJMACROS */

EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CSensors_CIMagnetometerDataThreshold;
#endif /* !defined(____x_ABI_CWindows_CDevices_CSensors_CIMagnetometerDataThreshold_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0xa0000

/*
 *
 * Interface Windows.Devices.Sensors.IMagnetometerDeviceId
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Interface is a part of the implementation of type Windows.Devices.Sensors.Magnetometer
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____x_ABI_CWindows_CDevices_CSensors_CIMagnetometerDeviceId_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CDevices_CSensors_CIMagnetometerDeviceId_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Devices_Sensors_IMagnetometerDeviceId[] = L"Windows.Devices.Sensors.IMagnetometerDeviceId";
typedef struct __x_ABI_CWindows_CDevices_CSensors_CIMagnetometerDeviceIdVtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CDevices_CSensors_CIMagnetometerDeviceId* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CDevices_CSensors_CIMagnetometerDeviceId* This);
    ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CDevices_CSensors_CIMagnetometerDeviceId* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CDevices_CSensors_CIMagnetometerDeviceId* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CDevices_CSensors_CIMagnetometerDeviceId* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CDevices_CSensors_CIMagnetometerDeviceId* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* get_DeviceId)(__x_ABI_CWindows_CDevices_CSensors_CIMagnetometerDeviceId* This,
        HSTRING* value);

    END_INTERFACE
} __x_ABI_CWindows_CDevices_CSensors_CIMagnetometerDeviceIdVtbl;

interface __x_ABI_CWindows_CDevices_CSensors_CIMagnetometerDeviceId
{
    CONST_VTBL struct __x_ABI_CWindows_CDevices_CSensors_CIMagnetometerDeviceIdVtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __x_ABI_CWindows_CDevices_CSensors_CIMagnetometerDeviceId_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __x_ABI_CWindows_CDevices_CSensors_CIMagnetometerDeviceId_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __x_ABI_CWindows_CDevices_CSensors_CIMagnetometerDeviceId_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __x_ABI_CWindows_CDevices_CSensors_CIMagnetometerDeviceId_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __x_ABI_CWindows_CDevices_CSensors_CIMagnetometerDeviceId_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __x_ABI_CWindows_CDevices_CSensors_CIMagnetometerDeviceId_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __x_ABI_CWindows_CDevices_CSensors_CIMagnetometerDeviceId_get_DeviceId(This, value) \
    ((This)->lpVtbl->get_DeviceId(This, value))

#endif /* COBJMACROS */

EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CSensors_CIMagnetometerDeviceId;
#endif /* !defined(____x_ABI_CWindows_CDevices_CSensors_CIMagnetometerDeviceId_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Interface Windows.Devices.Sensors.IMagnetometerReading
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Interface is a part of the implementation of type Windows.Devices.Sensors.MagnetometerReading
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____x_ABI_CWindows_CDevices_CSensors_CIMagnetometerReading_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CDevices_CSensors_CIMagnetometerReading_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Devices_Sensors_IMagnetometerReading[] = L"Windows.Devices.Sensors.IMagnetometerReading";
typedef struct __x_ABI_CWindows_CDevices_CSensors_CIMagnetometerReadingVtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CDevices_CSensors_CIMagnetometerReading* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CDevices_CSensors_CIMagnetometerReading* This);
    ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CDevices_CSensors_CIMagnetometerReading* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CDevices_CSensors_CIMagnetometerReading* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CDevices_CSensors_CIMagnetometerReading* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CDevices_CSensors_CIMagnetometerReading* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* get_Timestamp)(__x_ABI_CWindows_CDevices_CSensors_CIMagnetometerReading* This,
        struct __x_ABI_CWindows_CFoundation_CDateTime* value);
    HRESULT (STDMETHODCALLTYPE* get_MagneticFieldX)(__x_ABI_CWindows_CDevices_CSensors_CIMagnetometerReading* This,
        FLOAT* value);
    HRESULT (STDMETHODCALLTYPE* get_MagneticFieldY)(__x_ABI_CWindows_CDevices_CSensors_CIMagnetometerReading* This,
        FLOAT* value);
    HRESULT (STDMETHODCALLTYPE* get_MagneticFieldZ)(__x_ABI_CWindows_CDevices_CSensors_CIMagnetometerReading* This,
        FLOAT* value);
    HRESULT (STDMETHODCALLTYPE* get_DirectionalAccuracy)(__x_ABI_CWindows_CDevices_CSensors_CIMagnetometerReading* This,
        enum __x_ABI_CWindows_CDevices_CSensors_CMagnetometerAccuracy* value);

    END_INTERFACE
} __x_ABI_CWindows_CDevices_CSensors_CIMagnetometerReadingVtbl;

interface __x_ABI_CWindows_CDevices_CSensors_CIMagnetometerReading
{
    CONST_VTBL struct __x_ABI_CWindows_CDevices_CSensors_CIMagnetometerReadingVtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __x_ABI_CWindows_CDevices_CSensors_CIMagnetometerReading_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __x_ABI_CWindows_CDevices_CSensors_CIMagnetometerReading_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __x_ABI_CWindows_CDevices_CSensors_CIMagnetometerReading_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __x_ABI_CWindows_CDevices_CSensors_CIMagnetometerReading_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __x_ABI_CWindows_CDevices_CSensors_CIMagnetometerReading_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __x_ABI_CWindows_CDevices_CSensors_CIMagnetometerReading_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __x_ABI_CWindows_CDevices_CSensors_CIMagnetometerReading_get_Timestamp(This, value) \
    ((This)->lpVtbl->get_Timestamp(This, value))

#define __x_ABI_CWindows_CDevices_CSensors_CIMagnetometerReading_get_MagneticFieldX(This, value) \
    ((This)->lpVtbl->get_MagneticFieldX(This, value))

#define __x_ABI_CWindows_CDevices_CSensors_CIMagnetometerReading_get_MagneticFieldY(This, value) \
    ((This)->lpVtbl->get_MagneticFieldY(This, value))

#define __x_ABI_CWindows_CDevices_CSensors_CIMagnetometerReading_get_MagneticFieldZ(This, value) \
    ((This)->lpVtbl->get_MagneticFieldZ(This, value))

#define __x_ABI_CWindows_CDevices_CSensors_CIMagnetometerReading_get_DirectionalAccuracy(This, value) \
    ((This)->lpVtbl->get_DirectionalAccuracy(This, value))

#endif /* COBJMACROS */

EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CSensors_CIMagnetometerReading;
#endif /* !defined(____x_ABI_CWindows_CDevices_CSensors_CIMagnetometerReading_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Interface Windows.Devices.Sensors.IMagnetometerReading2
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 5.0
 *
 * Interface is a part of the implementation of type Windows.Devices.Sensors.MagnetometerReading
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x50000
#if !defined(____x_ABI_CWindows_CDevices_CSensors_CIMagnetometerReading2_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CDevices_CSensors_CIMagnetometerReading2_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Devices_Sensors_IMagnetometerReading2[] = L"Windows.Devices.Sensors.IMagnetometerReading2";
typedef struct __x_ABI_CWindows_CDevices_CSensors_CIMagnetometerReading2Vtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CDevices_CSensors_CIMagnetometerReading2* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CDevices_CSensors_CIMagnetometerReading2* This);
    ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CDevices_CSensors_CIMagnetometerReading2* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CDevices_CSensors_CIMagnetometerReading2* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CDevices_CSensors_CIMagnetometerReading2* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CDevices_CSensors_CIMagnetometerReading2* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* get_PerformanceCount)(__x_ABI_CWindows_CDevices_CSensors_CIMagnetometerReading2* This,
        __FIReference_1_Windows__CFoundation__CTimeSpan** value);
    HRESULT (STDMETHODCALLTYPE* get_Properties)(__x_ABI_CWindows_CDevices_CSensors_CIMagnetometerReading2* This,
        __FIMapView_2_HSTRING_IInspectable** value);

    END_INTERFACE
} __x_ABI_CWindows_CDevices_CSensors_CIMagnetometerReading2Vtbl;

interface __x_ABI_CWindows_CDevices_CSensors_CIMagnetometerReading2
{
    CONST_VTBL struct __x_ABI_CWindows_CDevices_CSensors_CIMagnetometerReading2Vtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __x_ABI_CWindows_CDevices_CSensors_CIMagnetometerReading2_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __x_ABI_CWindows_CDevices_CSensors_CIMagnetometerReading2_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __x_ABI_CWindows_CDevices_CSensors_CIMagnetometerReading2_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __x_ABI_CWindows_CDevices_CSensors_CIMagnetometerReading2_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __x_ABI_CWindows_CDevices_CSensors_CIMagnetometerReading2_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __x_ABI_CWindows_CDevices_CSensors_CIMagnetometerReading2_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __x_ABI_CWindows_CDevices_CSensors_CIMagnetometerReading2_get_PerformanceCount(This, value) \
    ((This)->lpVtbl->get_PerformanceCount(This, value))

#define __x_ABI_CWindows_CDevices_CSensors_CIMagnetometerReading2_get_Properties(This, value) \
    ((This)->lpVtbl->get_Properties(This, value))

#endif /* COBJMACROS */

EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CSensors_CIMagnetometerReading2;
#endif /* !defined(____x_ABI_CWindows_CDevices_CSensors_CIMagnetometerReading2_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x50000

/*
 *
 * Interface Windows.Devices.Sensors.IMagnetometerReadingChangedEventArgs
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Interface is a part of the implementation of type Windows.Devices.Sensors.MagnetometerReadingChangedEventArgs
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____x_ABI_CWindows_CDevices_CSensors_CIMagnetometerReadingChangedEventArgs_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CDevices_CSensors_CIMagnetometerReadingChangedEventArgs_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Devices_Sensors_IMagnetometerReadingChangedEventArgs[] = L"Windows.Devices.Sensors.IMagnetometerReadingChangedEventArgs";
typedef struct __x_ABI_CWindows_CDevices_CSensors_CIMagnetometerReadingChangedEventArgsVtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CDevices_CSensors_CIMagnetometerReadingChangedEventArgs* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CDevices_CSensors_CIMagnetometerReadingChangedEventArgs* This);
    ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CDevices_CSensors_CIMagnetometerReadingChangedEventArgs* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CDevices_CSensors_CIMagnetometerReadingChangedEventArgs* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CDevices_CSensors_CIMagnetometerReadingChangedEventArgs* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CDevices_CSensors_CIMagnetometerReadingChangedEventArgs* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* get_Reading)(__x_ABI_CWindows_CDevices_CSensors_CIMagnetometerReadingChangedEventArgs* This,
        __x_ABI_CWindows_CDevices_CSensors_CIMagnetometerReading** value);

    END_INTERFACE
} __x_ABI_CWindows_CDevices_CSensors_CIMagnetometerReadingChangedEventArgsVtbl;

interface __x_ABI_CWindows_CDevices_CSensors_CIMagnetometerReadingChangedEventArgs
{
    CONST_VTBL struct __x_ABI_CWindows_CDevices_CSensors_CIMagnetometerReadingChangedEventArgsVtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __x_ABI_CWindows_CDevices_CSensors_CIMagnetometerReadingChangedEventArgs_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __x_ABI_CWindows_CDevices_CSensors_CIMagnetometerReadingChangedEventArgs_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __x_ABI_CWindows_CDevices_CSensors_CIMagnetometerReadingChangedEventArgs_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __x_ABI_CWindows_CDevices_CSensors_CIMagnetometerReadingChangedEventArgs_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __x_ABI_CWindows_CDevices_CSensors_CIMagnetometerReadingChangedEventArgs_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __x_ABI_CWindows_CDevices_CSensors_CIMagnetometerReadingChangedEventArgs_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __x_ABI_CWindows_CDevices_CSensors_CIMagnetometerReadingChangedEventArgs_get_Reading(This, value) \
    ((This)->lpVtbl->get_Reading(This, value))

#endif /* COBJMACROS */

EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CSensors_CIMagnetometerReadingChangedEventArgs;
#endif /* !defined(____x_ABI_CWindows_CDevices_CSensors_CIMagnetometerReadingChangedEventArgs_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Interface Windows.Devices.Sensors.IMagnetometerStatics
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Interface is a part of the implementation of type Windows.Devices.Sensors.Magnetometer
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____x_ABI_CWindows_CDevices_CSensors_CIMagnetometerStatics_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CDevices_CSensors_CIMagnetometerStatics_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Devices_Sensors_IMagnetometerStatics[] = L"Windows.Devices.Sensors.IMagnetometerStatics";
typedef struct __x_ABI_CWindows_CDevices_CSensors_CIMagnetometerStaticsVtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CDevices_CSensors_CIMagnetometerStatics* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CDevices_CSensors_CIMagnetometerStatics* This);
    ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CDevices_CSensors_CIMagnetometerStatics* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CDevices_CSensors_CIMagnetometerStatics* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CDevices_CSensors_CIMagnetometerStatics* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CDevices_CSensors_CIMagnetometerStatics* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* GetDefault)(__x_ABI_CWindows_CDevices_CSensors_CIMagnetometerStatics* This,
        __x_ABI_CWindows_CDevices_CSensors_CIMagnetometer** result);

    END_INTERFACE
} __x_ABI_CWindows_CDevices_CSensors_CIMagnetometerStaticsVtbl;

interface __x_ABI_CWindows_CDevices_CSensors_CIMagnetometerStatics
{
    CONST_VTBL struct __x_ABI_CWindows_CDevices_CSensors_CIMagnetometerStaticsVtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __x_ABI_CWindows_CDevices_CSensors_CIMagnetometerStatics_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __x_ABI_CWindows_CDevices_CSensors_CIMagnetometerStatics_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __x_ABI_CWindows_CDevices_CSensors_CIMagnetometerStatics_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __x_ABI_CWindows_CDevices_CSensors_CIMagnetometerStatics_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __x_ABI_CWindows_CDevices_CSensors_CIMagnetometerStatics_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __x_ABI_CWindows_CDevices_CSensors_CIMagnetometerStatics_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __x_ABI_CWindows_CDevices_CSensors_CIMagnetometerStatics_GetDefault(This, result) \
    ((This)->lpVtbl->GetDefault(This, result))

#endif /* COBJMACROS */

EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CSensors_CIMagnetometerStatics;
#endif /* !defined(____x_ABI_CWindows_CDevices_CSensors_CIMagnetometerStatics_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Interface Windows.Devices.Sensors.IMagnetometerStatics2
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 5.0
 *
 * Interface is a part of the implementation of type Windows.Devices.Sensors.Magnetometer
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x50000
#if !defined(____x_ABI_CWindows_CDevices_CSensors_CIMagnetometerStatics2_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CDevices_CSensors_CIMagnetometerStatics2_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Devices_Sensors_IMagnetometerStatics2[] = L"Windows.Devices.Sensors.IMagnetometerStatics2";
typedef struct __x_ABI_CWindows_CDevices_CSensors_CIMagnetometerStatics2Vtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CDevices_CSensors_CIMagnetometerStatics2* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CDevices_CSensors_CIMagnetometerStatics2* This);
    ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CDevices_CSensors_CIMagnetometerStatics2* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CDevices_CSensors_CIMagnetometerStatics2* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CDevices_CSensors_CIMagnetometerStatics2* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CDevices_CSensors_CIMagnetometerStatics2* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* GetDeviceSelector)(__x_ABI_CWindows_CDevices_CSensors_CIMagnetometerStatics2* This,
        HSTRING* result);
    HRESULT (STDMETHODCALLTYPE* FromIdAsync)(__x_ABI_CWindows_CDevices_CSensors_CIMagnetometerStatics2* This,
        HSTRING deviceId,
        __FIAsyncOperation_1_Windows__CDevices__CSensors__CMagnetometer** operation);

    END_INTERFACE
} __x_ABI_CWindows_CDevices_CSensors_CIMagnetometerStatics2Vtbl;

interface __x_ABI_CWindows_CDevices_CSensors_CIMagnetometerStatics2
{
    CONST_VTBL struct __x_ABI_CWindows_CDevices_CSensors_CIMagnetometerStatics2Vtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __x_ABI_CWindows_CDevices_CSensors_CIMagnetometerStatics2_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __x_ABI_CWindows_CDevices_CSensors_CIMagnetometerStatics2_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __x_ABI_CWindows_CDevices_CSensors_CIMagnetometerStatics2_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __x_ABI_CWindows_CDevices_CSensors_CIMagnetometerStatics2_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __x_ABI_CWindows_CDevices_CSensors_CIMagnetometerStatics2_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __x_ABI_CWindows_CDevices_CSensors_CIMagnetometerStatics2_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __x_ABI_CWindows_CDevices_CSensors_CIMagnetometerStatics2_GetDeviceSelector(This, result) \
    ((This)->lpVtbl->GetDeviceSelector(This, result))

#define __x_ABI_CWindows_CDevices_CSensors_CIMagnetometerStatics2_FromIdAsync(This, deviceId, operation) \
    ((This)->lpVtbl->FromIdAsync(This, deviceId, operation))

#endif /* COBJMACROS */

EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CSensors_CIMagnetometerStatics2;
#endif /* !defined(____x_ABI_CWindows_CDevices_CSensors_CIMagnetometerStatics2_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x50000

/*
 *
 * Interface Windows.Devices.Sensors.IOrientationSensor
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Interface is a part of the implementation of type Windows.Devices.Sensors.OrientationSensor
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____x_ABI_CWindows_CDevices_CSensors_CIOrientationSensor_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CDevices_CSensors_CIOrientationSensor_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Devices_Sensors_IOrientationSensor[] = L"Windows.Devices.Sensors.IOrientationSensor";
typedef struct __x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorVtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CDevices_CSensors_CIOrientationSensor* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CDevices_CSensors_CIOrientationSensor* This);
    ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CDevices_CSensors_CIOrientationSensor* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CDevices_CSensors_CIOrientationSensor* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CDevices_CSensors_CIOrientationSensor* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CDevices_CSensors_CIOrientationSensor* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* GetCurrentReading)(__x_ABI_CWindows_CDevices_CSensors_CIOrientationSensor* This,
        __x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorReading** value);
    HRESULT (STDMETHODCALLTYPE* get_MinimumReportInterval)(__x_ABI_CWindows_CDevices_CSensors_CIOrientationSensor* This,
        UINT32* value);
    HRESULT (STDMETHODCALLTYPE* put_ReportInterval)(__x_ABI_CWindows_CDevices_CSensors_CIOrientationSensor* This,
        UINT32 value);
    HRESULT (STDMETHODCALLTYPE* get_ReportInterval)(__x_ABI_CWindows_CDevices_CSensors_CIOrientationSensor* This,
        UINT32* value);
    HRESULT (STDMETHODCALLTYPE* add_ReadingChanged)(__x_ABI_CWindows_CDevices_CSensors_CIOrientationSensor* This,
        __FITypedEventHandler_2_Windows__CDevices__CSensors__COrientationSensor_Windows__CDevices__CSensors__COrientationSensorReadingChangedEventArgs* handler,
        EventRegistrationToken* token);
    HRESULT (STDMETHODCALLTYPE* remove_ReadingChanged)(__x_ABI_CWindows_CDevices_CSensors_CIOrientationSensor* This,
        EventRegistrationToken token);

    END_INTERFACE
} __x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorVtbl;

interface __x_ABI_CWindows_CDevices_CSensors_CIOrientationSensor
{
    CONST_VTBL struct __x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorVtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __x_ABI_CWindows_CDevices_CSensors_CIOrientationSensor_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __x_ABI_CWindows_CDevices_CSensors_CIOrientationSensor_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __x_ABI_CWindows_CDevices_CSensors_CIOrientationSensor_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __x_ABI_CWindows_CDevices_CSensors_CIOrientationSensor_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __x_ABI_CWindows_CDevices_CSensors_CIOrientationSensor_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __x_ABI_CWindows_CDevices_CSensors_CIOrientationSensor_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __x_ABI_CWindows_CDevices_CSensors_CIOrientationSensor_GetCurrentReading(This, value) \
    ((This)->lpVtbl->GetCurrentReading(This, value))

#define __x_ABI_CWindows_CDevices_CSensors_CIOrientationSensor_get_MinimumReportInterval(This, value) \
    ((This)->lpVtbl->get_MinimumReportInterval(This, value))

#define __x_ABI_CWindows_CDevices_CSensors_CIOrientationSensor_put_ReportInterval(This, value) \
    ((This)->lpVtbl->put_ReportInterval(This, value))

#define __x_ABI_CWindows_CDevices_CSensors_CIOrientationSensor_get_ReportInterval(This, value) \
    ((This)->lpVtbl->get_ReportInterval(This, value))

#define __x_ABI_CWindows_CDevices_CSensors_CIOrientationSensor_add_ReadingChanged(This, handler, token) \
    ((This)->lpVtbl->add_ReadingChanged(This, handler, token))

#define __x_ABI_CWindows_CDevices_CSensors_CIOrientationSensor_remove_ReadingChanged(This, token) \
    ((This)->lpVtbl->remove_ReadingChanged(This, token))

#endif /* COBJMACROS */

EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CSensors_CIOrientationSensor;
#endif /* !defined(____x_ABI_CWindows_CDevices_CSensors_CIOrientationSensor_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Interface Windows.Devices.Sensors.IOrientationSensor2
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Interface is a part of the implementation of type Windows.Devices.Sensors.OrientationSensor
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____x_ABI_CWindows_CDevices_CSensors_CIOrientationSensor2_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CDevices_CSensors_CIOrientationSensor2_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Devices_Sensors_IOrientationSensor2[] = L"Windows.Devices.Sensors.IOrientationSensor2";
typedef struct __x_ABI_CWindows_CDevices_CSensors_CIOrientationSensor2Vtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CDevices_CSensors_CIOrientationSensor2* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CDevices_CSensors_CIOrientationSensor2* This);
    ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CDevices_CSensors_CIOrientationSensor2* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CDevices_CSensors_CIOrientationSensor2* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CDevices_CSensors_CIOrientationSensor2* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CDevices_CSensors_CIOrientationSensor2* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* put_ReadingTransform)(__x_ABI_CWindows_CDevices_CSensors_CIOrientationSensor2* This,
        enum __x_ABI_CWindows_CGraphics_CDisplay_CDisplayOrientations value);
    HRESULT (STDMETHODCALLTYPE* get_ReadingTransform)(__x_ABI_CWindows_CDevices_CSensors_CIOrientationSensor2* This,
        enum __x_ABI_CWindows_CGraphics_CDisplay_CDisplayOrientations* value);
    HRESULT (STDMETHODCALLTYPE* get_ReadingType)(__x_ABI_CWindows_CDevices_CSensors_CIOrientationSensor2* This,
        enum __x_ABI_CWindows_CDevices_CSensors_CSensorReadingType* type);

    END_INTERFACE
} __x_ABI_CWindows_CDevices_CSensors_CIOrientationSensor2Vtbl;

interface __x_ABI_CWindows_CDevices_CSensors_CIOrientationSensor2
{
    CONST_VTBL struct __x_ABI_CWindows_CDevices_CSensors_CIOrientationSensor2Vtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __x_ABI_CWindows_CDevices_CSensors_CIOrientationSensor2_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __x_ABI_CWindows_CDevices_CSensors_CIOrientationSensor2_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __x_ABI_CWindows_CDevices_CSensors_CIOrientationSensor2_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __x_ABI_CWindows_CDevices_CSensors_CIOrientationSensor2_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __x_ABI_CWindows_CDevices_CSensors_CIOrientationSensor2_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __x_ABI_CWindows_CDevices_CSensors_CIOrientationSensor2_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __x_ABI_CWindows_CDevices_CSensors_CIOrientationSensor2_put_ReadingTransform(This, value) \
    ((This)->lpVtbl->put_ReadingTransform(This, value))

#define __x_ABI_CWindows_CDevices_CSensors_CIOrientationSensor2_get_ReadingTransform(This, value) \
    ((This)->lpVtbl->get_ReadingTransform(This, value))

#define __x_ABI_CWindows_CDevices_CSensors_CIOrientationSensor2_get_ReadingType(This, type) \
    ((This)->lpVtbl->get_ReadingType(This, type))

#endif /* COBJMACROS */

EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CSensors_CIOrientationSensor2;
#endif /* !defined(____x_ABI_CWindows_CDevices_CSensors_CIOrientationSensor2_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Interface Windows.Devices.Sensors.IOrientationSensor3
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 5.0
 *
 * Interface is a part of the implementation of type Windows.Devices.Sensors.OrientationSensor
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x50000
#if !defined(____x_ABI_CWindows_CDevices_CSensors_CIOrientationSensor3_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CDevices_CSensors_CIOrientationSensor3_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Devices_Sensors_IOrientationSensor3[] = L"Windows.Devices.Sensors.IOrientationSensor3";
typedef struct __x_ABI_CWindows_CDevices_CSensors_CIOrientationSensor3Vtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CDevices_CSensors_CIOrientationSensor3* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CDevices_CSensors_CIOrientationSensor3* This);
    ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CDevices_CSensors_CIOrientationSensor3* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CDevices_CSensors_CIOrientationSensor3* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CDevices_CSensors_CIOrientationSensor3* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CDevices_CSensors_CIOrientationSensor3* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* put_ReportLatency)(__x_ABI_CWindows_CDevices_CSensors_CIOrientationSensor3* This,
        UINT32 value);
    HRESULT (STDMETHODCALLTYPE* get_ReportLatency)(__x_ABI_CWindows_CDevices_CSensors_CIOrientationSensor3* This,
        UINT32* value);
    HRESULT (STDMETHODCALLTYPE* get_MaxBatchSize)(__x_ABI_CWindows_CDevices_CSensors_CIOrientationSensor3* This,
        UINT32* value);

    END_INTERFACE
} __x_ABI_CWindows_CDevices_CSensors_CIOrientationSensor3Vtbl;

interface __x_ABI_CWindows_CDevices_CSensors_CIOrientationSensor3
{
    CONST_VTBL struct __x_ABI_CWindows_CDevices_CSensors_CIOrientationSensor3Vtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __x_ABI_CWindows_CDevices_CSensors_CIOrientationSensor3_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __x_ABI_CWindows_CDevices_CSensors_CIOrientationSensor3_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __x_ABI_CWindows_CDevices_CSensors_CIOrientationSensor3_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __x_ABI_CWindows_CDevices_CSensors_CIOrientationSensor3_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __x_ABI_CWindows_CDevices_CSensors_CIOrientationSensor3_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __x_ABI_CWindows_CDevices_CSensors_CIOrientationSensor3_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __x_ABI_CWindows_CDevices_CSensors_CIOrientationSensor3_put_ReportLatency(This, value) \
    ((This)->lpVtbl->put_ReportLatency(This, value))

#define __x_ABI_CWindows_CDevices_CSensors_CIOrientationSensor3_get_ReportLatency(This, value) \
    ((This)->lpVtbl->get_ReportLatency(This, value))

#define __x_ABI_CWindows_CDevices_CSensors_CIOrientationSensor3_get_MaxBatchSize(This, value) \
    ((This)->lpVtbl->get_MaxBatchSize(This, value))

#endif /* COBJMACROS */

EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CSensors_CIOrientationSensor3;
#endif /* !defined(____x_ABI_CWindows_CDevices_CSensors_CIOrientationSensor3_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x50000

/*
 *
 * Interface Windows.Devices.Sensors.IOrientationSensorDeviceId
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Interface is a part of the implementation of type Windows.Devices.Sensors.OrientationSensor
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorDeviceId_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorDeviceId_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Devices_Sensors_IOrientationSensorDeviceId[] = L"Windows.Devices.Sensors.IOrientationSensorDeviceId";
typedef struct __x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorDeviceIdVtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorDeviceId* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorDeviceId* This);
    ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorDeviceId* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorDeviceId* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorDeviceId* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorDeviceId* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* get_DeviceId)(__x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorDeviceId* This,
        HSTRING* value);

    END_INTERFACE
} __x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorDeviceIdVtbl;

interface __x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorDeviceId
{
    CONST_VTBL struct __x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorDeviceIdVtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorDeviceId_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorDeviceId_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorDeviceId_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorDeviceId_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorDeviceId_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorDeviceId_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorDeviceId_get_DeviceId(This, value) \
    ((This)->lpVtbl->get_DeviceId(This, value))

#endif /* COBJMACROS */

EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorDeviceId;
#endif /* !defined(____x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorDeviceId_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Interface Windows.Devices.Sensors.IOrientationSensorReading
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Interface is a part of the implementation of type Windows.Devices.Sensors.OrientationSensorReading
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorReading_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorReading_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Devices_Sensors_IOrientationSensorReading[] = L"Windows.Devices.Sensors.IOrientationSensorReading";
typedef struct __x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorReadingVtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorReading* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorReading* This);
    ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorReading* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorReading* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorReading* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorReading* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* get_Timestamp)(__x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorReading* This,
        struct __x_ABI_CWindows_CFoundation_CDateTime* value);
    HRESULT (STDMETHODCALLTYPE* get_RotationMatrix)(__x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorReading* This,
        __x_ABI_CWindows_CDevices_CSensors_CISensorRotationMatrix** value);
    HRESULT (STDMETHODCALLTYPE* get_Quaternion)(__x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorReading* This,
        __x_ABI_CWindows_CDevices_CSensors_CISensorQuaternion** value);

    END_INTERFACE
} __x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorReadingVtbl;

interface __x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorReading
{
    CONST_VTBL struct __x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorReadingVtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorReading_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorReading_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorReading_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorReading_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorReading_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorReading_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorReading_get_Timestamp(This, value) \
    ((This)->lpVtbl->get_Timestamp(This, value))

#define __x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorReading_get_RotationMatrix(This, value) \
    ((This)->lpVtbl->get_RotationMatrix(This, value))

#define __x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorReading_get_Quaternion(This, value) \
    ((This)->lpVtbl->get_Quaternion(This, value))

#endif /* COBJMACROS */

EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorReading;
#endif /* !defined(____x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorReading_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Interface Windows.Devices.Sensors.IOrientationSensorReading2
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 5.0
 *
 * Interface is a part of the implementation of type Windows.Devices.Sensors.OrientationSensorReading
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x50000
#if !defined(____x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorReading2_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorReading2_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Devices_Sensors_IOrientationSensorReading2[] = L"Windows.Devices.Sensors.IOrientationSensorReading2";
typedef struct __x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorReading2Vtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorReading2* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorReading2* This);
    ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorReading2* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorReading2* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorReading2* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorReading2* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* get_PerformanceCount)(__x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorReading2* This,
        __FIReference_1_Windows__CFoundation__CTimeSpan** value);
    HRESULT (STDMETHODCALLTYPE* get_Properties)(__x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorReading2* This,
        __FIMapView_2_HSTRING_IInspectable** value);

    END_INTERFACE
} __x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorReading2Vtbl;

interface __x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorReading2
{
    CONST_VTBL struct __x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorReading2Vtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorReading2_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorReading2_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorReading2_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorReading2_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorReading2_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorReading2_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorReading2_get_PerformanceCount(This, value) \
    ((This)->lpVtbl->get_PerformanceCount(This, value))

#define __x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorReading2_get_Properties(This, value) \
    ((This)->lpVtbl->get_Properties(This, value))

#endif /* COBJMACROS */

EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorReading2;
#endif /* !defined(____x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorReading2_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x50000

/*
 *
 * Interface Windows.Devices.Sensors.IOrientationSensorReadingChangedEventArgs
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Interface is a part of the implementation of type Windows.Devices.Sensors.OrientationSensorReadingChangedEventArgs
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorReadingChangedEventArgs_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorReadingChangedEventArgs_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Devices_Sensors_IOrientationSensorReadingChangedEventArgs[] = L"Windows.Devices.Sensors.IOrientationSensorReadingChangedEventArgs";
typedef struct __x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorReadingChangedEventArgsVtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorReadingChangedEventArgs* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorReadingChangedEventArgs* This);
    ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorReadingChangedEventArgs* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorReadingChangedEventArgs* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorReadingChangedEventArgs* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorReadingChangedEventArgs* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* get_Reading)(__x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorReadingChangedEventArgs* This,
        __x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorReading** value);

    END_INTERFACE
} __x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorReadingChangedEventArgsVtbl;

interface __x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorReadingChangedEventArgs
{
    CONST_VTBL struct __x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorReadingChangedEventArgsVtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorReadingChangedEventArgs_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorReadingChangedEventArgs_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorReadingChangedEventArgs_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorReadingChangedEventArgs_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorReadingChangedEventArgs_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorReadingChangedEventArgs_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorReadingChangedEventArgs_get_Reading(This, value) \
    ((This)->lpVtbl->get_Reading(This, value))

#endif /* COBJMACROS */

EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorReadingChangedEventArgs;
#endif /* !defined(____x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorReadingChangedEventArgs_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Interface Windows.Devices.Sensors.IOrientationSensorReadingYawAccuracy
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Interface is a part of the implementation of type Windows.Devices.Sensors.OrientationSensorReading
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorReadingYawAccuracy_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorReadingYawAccuracy_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Devices_Sensors_IOrientationSensorReadingYawAccuracy[] = L"Windows.Devices.Sensors.IOrientationSensorReadingYawAccuracy";
typedef struct __x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorReadingYawAccuracyVtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorReadingYawAccuracy* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorReadingYawAccuracy* This);
    ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorReadingYawAccuracy* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorReadingYawAccuracy* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorReadingYawAccuracy* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorReadingYawAccuracy* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* get_YawAccuracy)(__x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorReadingYawAccuracy* This,
        enum __x_ABI_CWindows_CDevices_CSensors_CMagnetometerAccuracy* value);

    END_INTERFACE
} __x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorReadingYawAccuracyVtbl;

interface __x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorReadingYawAccuracy
{
    CONST_VTBL struct __x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorReadingYawAccuracyVtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorReadingYawAccuracy_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorReadingYawAccuracy_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorReadingYawAccuracy_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorReadingYawAccuracy_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorReadingYawAccuracy_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorReadingYawAccuracy_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorReadingYawAccuracy_get_YawAccuracy(This, value) \
    ((This)->lpVtbl->get_YawAccuracy(This, value))

#endif /* COBJMACROS */

EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorReadingYawAccuracy;
#endif /* !defined(____x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorReadingYawAccuracy_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Interface Windows.Devices.Sensors.IOrientationSensorStatics
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Interface is a part of the implementation of type Windows.Devices.Sensors.OrientationSensor
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorStatics_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorStatics_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Devices_Sensors_IOrientationSensorStatics[] = L"Windows.Devices.Sensors.IOrientationSensorStatics";
typedef struct __x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorStaticsVtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorStatics* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorStatics* This);
    ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorStatics* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorStatics* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorStatics* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorStatics* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* GetDefault)(__x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorStatics* This,
        __x_ABI_CWindows_CDevices_CSensors_CIOrientationSensor** result);

    END_INTERFACE
} __x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorStaticsVtbl;

interface __x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorStatics
{
    CONST_VTBL struct __x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorStaticsVtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorStatics_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorStatics_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorStatics_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorStatics_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorStatics_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorStatics_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorStatics_GetDefault(This, result) \
    ((This)->lpVtbl->GetDefault(This, result))

#endif /* COBJMACROS */

EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorStatics;
#endif /* !defined(____x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorStatics_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Interface Windows.Devices.Sensors.IOrientationSensorStatics2
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Interface is a part of the implementation of type Windows.Devices.Sensors.OrientationSensor
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorStatics2_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorStatics2_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Devices_Sensors_IOrientationSensorStatics2[] = L"Windows.Devices.Sensors.IOrientationSensorStatics2";
typedef struct __x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorStatics2Vtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorStatics2* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorStatics2* This);
    ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorStatics2* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorStatics2* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorStatics2* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorStatics2* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* GetDefaultForRelativeReadings)(__x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorStatics2* This,
        __x_ABI_CWindows_CDevices_CSensors_CIOrientationSensor** result);

    END_INTERFACE
} __x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorStatics2Vtbl;

interface __x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorStatics2
{
    CONST_VTBL struct __x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorStatics2Vtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorStatics2_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorStatics2_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorStatics2_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorStatics2_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorStatics2_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorStatics2_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorStatics2_GetDefaultForRelativeReadings(This, result) \
    ((This)->lpVtbl->GetDefaultForRelativeReadings(This, result))

#endif /* COBJMACROS */

EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorStatics2;
#endif /* !defined(____x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorStatics2_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Interface Windows.Devices.Sensors.IOrientationSensorStatics3
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 3.0
 *
 * Interface is a part of the implementation of type Windows.Devices.Sensors.OrientationSensor
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x30000
#if !defined(____x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorStatics3_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorStatics3_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Devices_Sensors_IOrientationSensorStatics3[] = L"Windows.Devices.Sensors.IOrientationSensorStatics3";
typedef struct __x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorStatics3Vtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorStatics3* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorStatics3* This);
    ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorStatics3* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorStatics3* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorStatics3* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorStatics3* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* GetDefaultWithSensorReadingType)(__x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorStatics3* This,
        enum __x_ABI_CWindows_CDevices_CSensors_CSensorReadingType sensorReadingtype,
        __x_ABI_CWindows_CDevices_CSensors_CIOrientationSensor** result);
    HRESULT (STDMETHODCALLTYPE* GetDefaultWithSensorReadingTypeAndSensorOptimizationGoal)(__x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorStatics3* This,
        enum __x_ABI_CWindows_CDevices_CSensors_CSensorReadingType sensorReadingType,
        enum __x_ABI_CWindows_CDevices_CSensors_CSensorOptimizationGoal optimizationGoal,
        __x_ABI_CWindows_CDevices_CSensors_CIOrientationSensor** result);

    END_INTERFACE
} __x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorStatics3Vtbl;

interface __x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorStatics3
{
    CONST_VTBL struct __x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorStatics3Vtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorStatics3_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorStatics3_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorStatics3_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorStatics3_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorStatics3_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorStatics3_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorStatics3_GetDefaultWithSensorReadingType(This, sensorReadingtype, result) \
    ((This)->lpVtbl->GetDefaultWithSensorReadingType(This, sensorReadingtype, result))

#define __x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorStatics3_GetDefaultWithSensorReadingTypeAndSensorOptimizationGoal(This, sensorReadingType, optimizationGoal, result) \
    ((This)->lpVtbl->GetDefaultWithSensorReadingTypeAndSensorOptimizationGoal(This, sensorReadingType, optimizationGoal, result))

#endif /* COBJMACROS */

EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorStatics3;
#endif /* !defined(____x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorStatics3_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x30000

/*
 *
 * Interface Windows.Devices.Sensors.IOrientationSensorStatics4
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 5.0
 *
 * Interface is a part of the implementation of type Windows.Devices.Sensors.OrientationSensor
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x50000
#if !defined(____x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorStatics4_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorStatics4_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Devices_Sensors_IOrientationSensorStatics4[] = L"Windows.Devices.Sensors.IOrientationSensorStatics4";
typedef struct __x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorStatics4Vtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorStatics4* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorStatics4* This);
    ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorStatics4* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorStatics4* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorStatics4* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorStatics4* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* GetDeviceSelector)(__x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorStatics4* This,
        enum __x_ABI_CWindows_CDevices_CSensors_CSensorReadingType readingType,
        HSTRING* result);
    HRESULT (STDMETHODCALLTYPE* GetDeviceSelectorWithSensorReadingTypeAndSensorOptimizationGoal)(__x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorStatics4* This,
        enum __x_ABI_CWindows_CDevices_CSensors_CSensorReadingType readingType,
        enum __x_ABI_CWindows_CDevices_CSensors_CSensorOptimizationGoal optimizationGoal,
        HSTRING* result);
    HRESULT (STDMETHODCALLTYPE* FromIdAsync)(__x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorStatics4* This,
        HSTRING deviceId,
        __FIAsyncOperation_1_Windows__CDevices__CSensors__COrientationSensor** operation);

    END_INTERFACE
} __x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorStatics4Vtbl;

interface __x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorStatics4
{
    CONST_VTBL struct __x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorStatics4Vtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorStatics4_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorStatics4_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorStatics4_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorStatics4_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorStatics4_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorStatics4_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorStatics4_GetDeviceSelector(This, readingType, result) \
    ((This)->lpVtbl->GetDeviceSelector(This, readingType, result))

#define __x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorStatics4_GetDeviceSelectorWithSensorReadingTypeAndSensorOptimizationGoal(This, readingType, optimizationGoal, result) \
    ((This)->lpVtbl->GetDeviceSelectorWithSensorReadingTypeAndSensorOptimizationGoal(This, readingType, optimizationGoal, result))

#define __x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorStatics4_FromIdAsync(This, deviceId, operation) \
    ((This)->lpVtbl->FromIdAsync(This, deviceId, operation))

#endif /* COBJMACROS */

EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorStatics4;
#endif /* !defined(____x_ABI_CWindows_CDevices_CSensors_CIOrientationSensorStatics4_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x50000

/*
 *
 * Interface Windows.Devices.Sensors.IPedometer
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Interface is a part of the implementation of type Windows.Devices.Sensors.Pedometer
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____x_ABI_CWindows_CDevices_CSensors_CIPedometer_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CDevices_CSensors_CIPedometer_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Devices_Sensors_IPedometer[] = L"Windows.Devices.Sensors.IPedometer";
typedef struct __x_ABI_CWindows_CDevices_CSensors_CIPedometerVtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CDevices_CSensors_CIPedometer* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CDevices_CSensors_CIPedometer* This);
    ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CDevices_CSensors_CIPedometer* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CDevices_CSensors_CIPedometer* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CDevices_CSensors_CIPedometer* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CDevices_CSensors_CIPedometer* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* get_DeviceId)(__x_ABI_CWindows_CDevices_CSensors_CIPedometer* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_PowerInMilliwatts)(__x_ABI_CWindows_CDevices_CSensors_CIPedometer* This,
        DOUBLE* value);
    HRESULT (STDMETHODCALLTYPE* get_MinimumReportInterval)(__x_ABI_CWindows_CDevices_CSensors_CIPedometer* This,
        UINT32* value);
    HRESULT (STDMETHODCALLTYPE* put_ReportInterval)(__x_ABI_CWindows_CDevices_CSensors_CIPedometer* This,
        UINT32 value);
    HRESULT (STDMETHODCALLTYPE* get_ReportInterval)(__x_ABI_CWindows_CDevices_CSensors_CIPedometer* This,
        UINT32* value);
    HRESULT (STDMETHODCALLTYPE* add_ReadingChanged)(__x_ABI_CWindows_CDevices_CSensors_CIPedometer* This,
        __FITypedEventHandler_2_Windows__CDevices__CSensors__CPedometer_Windows__CDevices__CSensors__CPedometerReadingChangedEventArgs* handler,
        EventRegistrationToken* token);
    HRESULT (STDMETHODCALLTYPE* remove_ReadingChanged)(__x_ABI_CWindows_CDevices_CSensors_CIPedometer* This,
        EventRegistrationToken token);

    END_INTERFACE
} __x_ABI_CWindows_CDevices_CSensors_CIPedometerVtbl;

interface __x_ABI_CWindows_CDevices_CSensors_CIPedometer
{
    CONST_VTBL struct __x_ABI_CWindows_CDevices_CSensors_CIPedometerVtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __x_ABI_CWindows_CDevices_CSensors_CIPedometer_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __x_ABI_CWindows_CDevices_CSensors_CIPedometer_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __x_ABI_CWindows_CDevices_CSensors_CIPedometer_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __x_ABI_CWindows_CDevices_CSensors_CIPedometer_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __x_ABI_CWindows_CDevices_CSensors_CIPedometer_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __x_ABI_CWindows_CDevices_CSensors_CIPedometer_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __x_ABI_CWindows_CDevices_CSensors_CIPedometer_get_DeviceId(This, value) \
    ((This)->lpVtbl->get_DeviceId(This, value))

#define __x_ABI_CWindows_CDevices_CSensors_CIPedometer_get_PowerInMilliwatts(This, value) \
    ((This)->lpVtbl->get_PowerInMilliwatts(This, value))

#define __x_ABI_CWindows_CDevices_CSensors_CIPedometer_get_MinimumReportInterval(This, value) \
    ((This)->lpVtbl->get_MinimumReportInterval(This, value))

#define __x_ABI_CWindows_CDevices_CSensors_CIPedometer_put_ReportInterval(This, value) \
    ((This)->lpVtbl->put_ReportInterval(This, value))

#define __x_ABI_CWindows_CDevices_CSensors_CIPedometer_get_ReportInterval(This, value) \
    ((This)->lpVtbl->get_ReportInterval(This, value))

#define __x_ABI_CWindows_CDevices_CSensors_CIPedometer_add_ReadingChanged(This, handler, token) \
    ((This)->lpVtbl->add_ReadingChanged(This, handler, token))

#define __x_ABI_CWindows_CDevices_CSensors_CIPedometer_remove_ReadingChanged(This, token) \
    ((This)->lpVtbl->remove_ReadingChanged(This, token))

#endif /* COBJMACROS */

EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CSensors_CIPedometer;
#endif /* !defined(____x_ABI_CWindows_CDevices_CSensors_CIPedometer_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Interface Windows.Devices.Sensors.IPedometer2
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 2.0
 *
 * Interface is a part of the implementation of type Windows.Devices.Sensors.Pedometer
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x20000
#if !defined(____x_ABI_CWindows_CDevices_CSensors_CIPedometer2_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CDevices_CSensors_CIPedometer2_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Devices_Sensors_IPedometer2[] = L"Windows.Devices.Sensors.IPedometer2";
typedef struct __x_ABI_CWindows_CDevices_CSensors_CIPedometer2Vtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CDevices_CSensors_CIPedometer2* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CDevices_CSensors_CIPedometer2* This);
    ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CDevices_CSensors_CIPedometer2* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CDevices_CSensors_CIPedometer2* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CDevices_CSensors_CIPedometer2* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CDevices_CSensors_CIPedometer2* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* GetCurrentReadings)(__x_ABI_CWindows_CDevices_CSensors_CIPedometer2* This,
        __FIMapView_2_Windows__CDevices__CSensors__CPedometerStepKind_Windows__CDevices__CSensors__CPedometerReading** value);

    END_INTERFACE
} __x_ABI_CWindows_CDevices_CSensors_CIPedometer2Vtbl;

interface __x_ABI_CWindows_CDevices_CSensors_CIPedometer2
{
    CONST_VTBL struct __x_ABI_CWindows_CDevices_CSensors_CIPedometer2Vtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __x_ABI_CWindows_CDevices_CSensors_CIPedometer2_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __x_ABI_CWindows_CDevices_CSensors_CIPedometer2_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __x_ABI_CWindows_CDevices_CSensors_CIPedometer2_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __x_ABI_CWindows_CDevices_CSensors_CIPedometer2_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __x_ABI_CWindows_CDevices_CSensors_CIPedometer2_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __x_ABI_CWindows_CDevices_CSensors_CIPedometer2_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __x_ABI_CWindows_CDevices_CSensors_CIPedometer2_GetCurrentReadings(This, value) \
    ((This)->lpVtbl->GetCurrentReadings(This, value))

#endif /* COBJMACROS */

EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CSensors_CIPedometer2;
#endif /* !defined(____x_ABI_CWindows_CDevices_CSensors_CIPedometer2_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x20000

/*
 *
 * Interface Windows.Devices.Sensors.IPedometerDataThresholdFactory
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 2.0
 *
 * Interface is a part of the implementation of type Windows.Devices.Sensors.PedometerDataThreshold
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x20000
#if !defined(____x_ABI_CWindows_CDevices_CSensors_CIPedometerDataThresholdFactory_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CDevices_CSensors_CIPedometerDataThresholdFactory_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Devices_Sensors_IPedometerDataThresholdFactory[] = L"Windows.Devices.Sensors.IPedometerDataThresholdFactory";
typedef struct __x_ABI_CWindows_CDevices_CSensors_CIPedometerDataThresholdFactoryVtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CDevices_CSensors_CIPedometerDataThresholdFactory* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CDevices_CSensors_CIPedometerDataThresholdFactory* This);
    ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CDevices_CSensors_CIPedometerDataThresholdFactory* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CDevices_CSensors_CIPedometerDataThresholdFactory* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CDevices_CSensors_CIPedometerDataThresholdFactory* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CDevices_CSensors_CIPedometerDataThresholdFactory* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* Create)(__x_ABI_CWindows_CDevices_CSensors_CIPedometerDataThresholdFactory* This,
        __x_ABI_CWindows_CDevices_CSensors_CIPedometer* sensor,
        INT32 stepGoal,
        __x_ABI_CWindows_CDevices_CSensors_CISensorDataThreshold** threshold);

    END_INTERFACE
} __x_ABI_CWindows_CDevices_CSensors_CIPedometerDataThresholdFactoryVtbl;

interface __x_ABI_CWindows_CDevices_CSensors_CIPedometerDataThresholdFactory
{
    CONST_VTBL struct __x_ABI_CWindows_CDevices_CSensors_CIPedometerDataThresholdFactoryVtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __x_ABI_CWindows_CDevices_CSensors_CIPedometerDataThresholdFactory_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __x_ABI_CWindows_CDevices_CSensors_CIPedometerDataThresholdFactory_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __x_ABI_CWindows_CDevices_CSensors_CIPedometerDataThresholdFactory_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __x_ABI_CWindows_CDevices_CSensors_CIPedometerDataThresholdFactory_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __x_ABI_CWindows_CDevices_CSensors_CIPedometerDataThresholdFactory_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __x_ABI_CWindows_CDevices_CSensors_CIPedometerDataThresholdFactory_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __x_ABI_CWindows_CDevices_CSensors_CIPedometerDataThresholdFactory_Create(This, sensor, stepGoal, threshold) \
    ((This)->lpVtbl->Create(This, sensor, stepGoal, threshold))

#endif /* COBJMACROS */

EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CSensors_CIPedometerDataThresholdFactory;
#endif /* !defined(____x_ABI_CWindows_CDevices_CSensors_CIPedometerDataThresholdFactory_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x20000

/*
 *
 * Interface Windows.Devices.Sensors.IPedometerReading
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Interface is a part of the implementation of type Windows.Devices.Sensors.PedometerReading
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____x_ABI_CWindows_CDevices_CSensors_CIPedometerReading_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CDevices_CSensors_CIPedometerReading_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Devices_Sensors_IPedometerReading[] = L"Windows.Devices.Sensors.IPedometerReading";
typedef struct __x_ABI_CWindows_CDevices_CSensors_CIPedometerReadingVtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CDevices_CSensors_CIPedometerReading* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CDevices_CSensors_CIPedometerReading* This);
    ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CDevices_CSensors_CIPedometerReading* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CDevices_CSensors_CIPedometerReading* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CDevices_CSensors_CIPedometerReading* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CDevices_CSensors_CIPedometerReading* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* get_StepKind)(__x_ABI_CWindows_CDevices_CSensors_CIPedometerReading* This,
        enum __x_ABI_CWindows_CDevices_CSensors_CPedometerStepKind* value);
    HRESULT (STDMETHODCALLTYPE* get_CumulativeSteps)(__x_ABI_CWindows_CDevices_CSensors_CIPedometerReading* This,
        INT32* value);
    HRESULT (STDMETHODCALLTYPE* get_Timestamp)(__x_ABI_CWindows_CDevices_CSensors_CIPedometerReading* This,
        struct __x_ABI_CWindows_CFoundation_CDateTime* value);
    HRESULT (STDMETHODCALLTYPE* get_CumulativeStepsDuration)(__x_ABI_CWindows_CDevices_CSensors_CIPedometerReading* This,
        struct __x_ABI_CWindows_CFoundation_CTimeSpan* value);

    END_INTERFACE
} __x_ABI_CWindows_CDevices_CSensors_CIPedometerReadingVtbl;

interface __x_ABI_CWindows_CDevices_CSensors_CIPedometerReading
{
    CONST_VTBL struct __x_ABI_CWindows_CDevices_CSensors_CIPedometerReadingVtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __x_ABI_CWindows_CDevices_CSensors_CIPedometerReading_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __x_ABI_CWindows_CDevices_CSensors_CIPedometerReading_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __x_ABI_CWindows_CDevices_CSensors_CIPedometerReading_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __x_ABI_CWindows_CDevices_CSensors_CIPedometerReading_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __x_ABI_CWindows_CDevices_CSensors_CIPedometerReading_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __x_ABI_CWindows_CDevices_CSensors_CIPedometerReading_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __x_ABI_CWindows_CDevices_CSensors_CIPedometerReading_get_StepKind(This, value) \
    ((This)->lpVtbl->get_StepKind(This, value))

#define __x_ABI_CWindows_CDevices_CSensors_CIPedometerReading_get_CumulativeSteps(This, value) \
    ((This)->lpVtbl->get_CumulativeSteps(This, value))

#define __x_ABI_CWindows_CDevices_CSensors_CIPedometerReading_get_Timestamp(This, value) \
    ((This)->lpVtbl->get_Timestamp(This, value))

#define __x_ABI_CWindows_CDevices_CSensors_CIPedometerReading_get_CumulativeStepsDuration(This, value) \
    ((This)->lpVtbl->get_CumulativeStepsDuration(This, value))

#endif /* COBJMACROS */

EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CSensors_CIPedometerReading;
#endif /* !defined(____x_ABI_CWindows_CDevices_CSensors_CIPedometerReading_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Interface Windows.Devices.Sensors.IPedometerReadingChangedEventArgs
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Interface is a part of the implementation of type Windows.Devices.Sensors.PedometerReadingChangedEventArgs
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____x_ABI_CWindows_CDevices_CSensors_CIPedometerReadingChangedEventArgs_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CDevices_CSensors_CIPedometerReadingChangedEventArgs_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Devices_Sensors_IPedometerReadingChangedEventArgs[] = L"Windows.Devices.Sensors.IPedometerReadingChangedEventArgs";
typedef struct __x_ABI_CWindows_CDevices_CSensors_CIPedometerReadingChangedEventArgsVtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CDevices_CSensors_CIPedometerReadingChangedEventArgs* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CDevices_CSensors_CIPedometerReadingChangedEventArgs* This);
    ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CDevices_CSensors_CIPedometerReadingChangedEventArgs* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CDevices_CSensors_CIPedometerReadingChangedEventArgs* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CDevices_CSensors_CIPedometerReadingChangedEventArgs* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CDevices_CSensors_CIPedometerReadingChangedEventArgs* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* get_Reading)(__x_ABI_CWindows_CDevices_CSensors_CIPedometerReadingChangedEventArgs* This,
        __x_ABI_CWindows_CDevices_CSensors_CIPedometerReading** value);

    END_INTERFACE
} __x_ABI_CWindows_CDevices_CSensors_CIPedometerReadingChangedEventArgsVtbl;

interface __x_ABI_CWindows_CDevices_CSensors_CIPedometerReadingChangedEventArgs
{
    CONST_VTBL struct __x_ABI_CWindows_CDevices_CSensors_CIPedometerReadingChangedEventArgsVtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __x_ABI_CWindows_CDevices_CSensors_CIPedometerReadingChangedEventArgs_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __x_ABI_CWindows_CDevices_CSensors_CIPedometerReadingChangedEventArgs_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __x_ABI_CWindows_CDevices_CSensors_CIPedometerReadingChangedEventArgs_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __x_ABI_CWindows_CDevices_CSensors_CIPedometerReadingChangedEventArgs_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __x_ABI_CWindows_CDevices_CSensors_CIPedometerReadingChangedEventArgs_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __x_ABI_CWindows_CDevices_CSensors_CIPedometerReadingChangedEventArgs_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __x_ABI_CWindows_CDevices_CSensors_CIPedometerReadingChangedEventArgs_get_Reading(This, value) \
    ((This)->lpVtbl->get_Reading(This, value))

#endif /* COBJMACROS */

EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CSensors_CIPedometerReadingChangedEventArgs;
#endif /* !defined(____x_ABI_CWindows_CDevices_CSensors_CIPedometerReadingChangedEventArgs_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Interface Windows.Devices.Sensors.IPedometerStatics
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Interface is a part of the implementation of type Windows.Devices.Sensors.Pedometer
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____x_ABI_CWindows_CDevices_CSensors_CIPedometerStatics_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CDevices_CSensors_CIPedometerStatics_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Devices_Sensors_IPedometerStatics[] = L"Windows.Devices.Sensors.IPedometerStatics";
typedef struct __x_ABI_CWindows_CDevices_CSensors_CIPedometerStaticsVtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CDevices_CSensors_CIPedometerStatics* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CDevices_CSensors_CIPedometerStatics* This);
    ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CDevices_CSensors_CIPedometerStatics* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CDevices_CSensors_CIPedometerStatics* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CDevices_CSensors_CIPedometerStatics* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CDevices_CSensors_CIPedometerStatics* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* FromIdAsync)(__x_ABI_CWindows_CDevices_CSensors_CIPedometerStatics* This,
        HSTRING deviceId,
        __FIAsyncOperation_1_Windows__CDevices__CSensors__CPedometer** operation);
    HRESULT (STDMETHODCALLTYPE* GetDefaultAsync)(__x_ABI_CWindows_CDevices_CSensors_CIPedometerStatics* This,
        __FIAsyncOperation_1_Windows__CDevices__CSensors__CPedometer** operation);
    HRESULT (STDMETHODCALLTYPE* GetDeviceSelector)(__x_ABI_CWindows_CDevices_CSensors_CIPedometerStatics* This,
        HSTRING* result);
    HRESULT (STDMETHODCALLTYPE* GetSystemHistoryAsync)(__x_ABI_CWindows_CDevices_CSensors_CIPedometerStatics* This,
        struct __x_ABI_CWindows_CFoundation_CDateTime fromTime,
        __FIAsyncOperation_1___FIVectorView_1_Windows__CDevices__CSensors__CPedometerReading** operation);
    HRESULT (STDMETHODCALLTYPE* GetSystemHistoryWithDurationAsync)(__x_ABI_CWindows_CDevices_CSensors_CIPedometerStatics* This,
        struct __x_ABI_CWindows_CFoundation_CDateTime fromTime,
        struct __x_ABI_CWindows_CFoundation_CTimeSpan duration,
        __FIAsyncOperation_1___FIVectorView_1_Windows__CDevices__CSensors__CPedometerReading** operation);

    END_INTERFACE
} __x_ABI_CWindows_CDevices_CSensors_CIPedometerStaticsVtbl;

interface __x_ABI_CWindows_CDevices_CSensors_CIPedometerStatics
{
    CONST_VTBL struct __x_ABI_CWindows_CDevices_CSensors_CIPedometerStaticsVtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __x_ABI_CWindows_CDevices_CSensors_CIPedometerStatics_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __x_ABI_CWindows_CDevices_CSensors_CIPedometerStatics_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __x_ABI_CWindows_CDevices_CSensors_CIPedometerStatics_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __x_ABI_CWindows_CDevices_CSensors_CIPedometerStatics_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __x_ABI_CWindows_CDevices_CSensors_CIPedometerStatics_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __x_ABI_CWindows_CDevices_CSensors_CIPedometerStatics_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __x_ABI_CWindows_CDevices_CSensors_CIPedometerStatics_FromIdAsync(This, deviceId, operation) \
    ((This)->lpVtbl->FromIdAsync(This, deviceId, operation))

#define __x_ABI_CWindows_CDevices_CSensors_CIPedometerStatics_GetDefaultAsync(This, operation) \
    ((This)->lpVtbl->GetDefaultAsync(This, operation))

#define __x_ABI_CWindows_CDevices_CSensors_CIPedometerStatics_GetDeviceSelector(This, result) \
    ((This)->lpVtbl->GetDeviceSelector(This, result))

#define __x_ABI_CWindows_CDevices_CSensors_CIPedometerStatics_GetSystemHistoryAsync(This, fromTime, operation) \
    ((This)->lpVtbl->GetSystemHistoryAsync(This, fromTime, operation))

#define __x_ABI_CWindows_CDevices_CSensors_CIPedometerStatics_GetSystemHistoryWithDurationAsync(This, fromTime, duration, operation) \
    ((This)->lpVtbl->GetSystemHistoryWithDurationAsync(This, fromTime, duration, operation))

#endif /* COBJMACROS */

EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CSensors_CIPedometerStatics;
#endif /* !defined(____x_ABI_CWindows_CDevices_CSensors_CIPedometerStatics_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Interface Windows.Devices.Sensors.IPedometerStatics2
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 2.0
 *
 * Interface is a part of the implementation of type Windows.Devices.Sensors.Pedometer
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x20000
#if !defined(____x_ABI_CWindows_CDevices_CSensors_CIPedometerStatics2_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CDevices_CSensors_CIPedometerStatics2_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Devices_Sensors_IPedometerStatics2[] = L"Windows.Devices.Sensors.IPedometerStatics2";
typedef struct __x_ABI_CWindows_CDevices_CSensors_CIPedometerStatics2Vtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CDevices_CSensors_CIPedometerStatics2* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CDevices_CSensors_CIPedometerStatics2* This);
    ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CDevices_CSensors_CIPedometerStatics2* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CDevices_CSensors_CIPedometerStatics2* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CDevices_CSensors_CIPedometerStatics2* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CDevices_CSensors_CIPedometerStatics2* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* GetReadingsFromTriggerDetails)(__x_ABI_CWindows_CDevices_CSensors_CIPedometerStatics2* This,
        __x_ABI_CWindows_CDevices_CSensors_CISensorDataThresholdTriggerDetails* triggerDetails,
        __FIVectorView_1_Windows__CDevices__CSensors__CPedometerReading** result);

    END_INTERFACE
} __x_ABI_CWindows_CDevices_CSensors_CIPedometerStatics2Vtbl;

interface __x_ABI_CWindows_CDevices_CSensors_CIPedometerStatics2
{
    CONST_VTBL struct __x_ABI_CWindows_CDevices_CSensors_CIPedometerStatics2Vtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __x_ABI_CWindows_CDevices_CSensors_CIPedometerStatics2_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __x_ABI_CWindows_CDevices_CSensors_CIPedometerStatics2_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __x_ABI_CWindows_CDevices_CSensors_CIPedometerStatics2_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __x_ABI_CWindows_CDevices_CSensors_CIPedometerStatics2_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __x_ABI_CWindows_CDevices_CSensors_CIPedometerStatics2_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __x_ABI_CWindows_CDevices_CSensors_CIPedometerStatics2_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __x_ABI_CWindows_CDevices_CSensors_CIPedometerStatics2_GetReadingsFromTriggerDetails(This, triggerDetails, result) \
    ((This)->lpVtbl->GetReadingsFromTriggerDetails(This, triggerDetails, result))

#endif /* COBJMACROS */

EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CSensors_CIPedometerStatics2;
#endif /* !defined(____x_ABI_CWindows_CDevices_CSensors_CIPedometerStatics2_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x20000

/*
 *
 * Interface Windows.Devices.Sensors.IProximitySensor
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Interface is a part of the implementation of type Windows.Devices.Sensors.ProximitySensor
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____x_ABI_CWindows_CDevices_CSensors_CIProximitySensor_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CDevices_CSensors_CIProximitySensor_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Devices_Sensors_IProximitySensor[] = L"Windows.Devices.Sensors.IProximitySensor";
typedef struct __x_ABI_CWindows_CDevices_CSensors_CIProximitySensorVtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CDevices_CSensors_CIProximitySensor* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CDevices_CSensors_CIProximitySensor* This);
    ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CDevices_CSensors_CIProximitySensor* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CDevices_CSensors_CIProximitySensor* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CDevices_CSensors_CIProximitySensor* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CDevices_CSensors_CIProximitySensor* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* get_DeviceId)(__x_ABI_CWindows_CDevices_CSensors_CIProximitySensor* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_MaxDistanceInMillimeters)(__x_ABI_CWindows_CDevices_CSensors_CIProximitySensor* This,
        __FIReference_1_UINT32** value);
    HRESULT (STDMETHODCALLTYPE* get_MinDistanceInMillimeters)(__x_ABI_CWindows_CDevices_CSensors_CIProximitySensor* This,
        __FIReference_1_UINT32** value);
    HRESULT (STDMETHODCALLTYPE* GetCurrentReading)(__x_ABI_CWindows_CDevices_CSensors_CIProximitySensor* This,
        __x_ABI_CWindows_CDevices_CSensors_CIProximitySensorReading** value);
    HRESULT (STDMETHODCALLTYPE* add_ReadingChanged)(__x_ABI_CWindows_CDevices_CSensors_CIProximitySensor* This,
        __FITypedEventHandler_2_Windows__CDevices__CSensors__CProximitySensor_Windows__CDevices__CSensors__CProximitySensorReadingChangedEventArgs* handler,
        EventRegistrationToken* token);
    HRESULT (STDMETHODCALLTYPE* remove_ReadingChanged)(__x_ABI_CWindows_CDevices_CSensors_CIProximitySensor* This,
        EventRegistrationToken token);
    HRESULT (STDMETHODCALLTYPE* CreateDisplayOnOffController)(__x_ABI_CWindows_CDevices_CSensors_CIProximitySensor* This,
        __x_ABI_CWindows_CFoundation_CIClosable** controller);

    END_INTERFACE
} __x_ABI_CWindows_CDevices_CSensors_CIProximitySensorVtbl;

interface __x_ABI_CWindows_CDevices_CSensors_CIProximitySensor
{
    CONST_VTBL struct __x_ABI_CWindows_CDevices_CSensors_CIProximitySensorVtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __x_ABI_CWindows_CDevices_CSensors_CIProximitySensor_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __x_ABI_CWindows_CDevices_CSensors_CIProximitySensor_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __x_ABI_CWindows_CDevices_CSensors_CIProximitySensor_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __x_ABI_CWindows_CDevices_CSensors_CIProximitySensor_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __x_ABI_CWindows_CDevices_CSensors_CIProximitySensor_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __x_ABI_CWindows_CDevices_CSensors_CIProximitySensor_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __x_ABI_CWindows_CDevices_CSensors_CIProximitySensor_get_DeviceId(This, value) \
    ((This)->lpVtbl->get_DeviceId(This, value))

#define __x_ABI_CWindows_CDevices_CSensors_CIProximitySensor_get_MaxDistanceInMillimeters(This, value) \
    ((This)->lpVtbl->get_MaxDistanceInMillimeters(This, value))

#define __x_ABI_CWindows_CDevices_CSensors_CIProximitySensor_get_MinDistanceInMillimeters(This, value) \
    ((This)->lpVtbl->get_MinDistanceInMillimeters(This, value))

#define __x_ABI_CWindows_CDevices_CSensors_CIProximitySensor_GetCurrentReading(This, value) \
    ((This)->lpVtbl->GetCurrentReading(This, value))

#define __x_ABI_CWindows_CDevices_CSensors_CIProximitySensor_add_ReadingChanged(This, handler, token) \
    ((This)->lpVtbl->add_ReadingChanged(This, handler, token))

#define __x_ABI_CWindows_CDevices_CSensors_CIProximitySensor_remove_ReadingChanged(This, token) \
    ((This)->lpVtbl->remove_ReadingChanged(This, token))

#define __x_ABI_CWindows_CDevices_CSensors_CIProximitySensor_CreateDisplayOnOffController(This, controller) \
    ((This)->lpVtbl->CreateDisplayOnOffController(This, controller))

#endif /* COBJMACROS */

EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CSensors_CIProximitySensor;
#endif /* !defined(____x_ABI_CWindows_CDevices_CSensors_CIProximitySensor_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Interface Windows.Devices.Sensors.IProximitySensorDataThresholdFactory
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 2.0
 *
 * Interface is a part of the implementation of type Windows.Devices.Sensors.ProximitySensorDataThreshold
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x20000
#if !defined(____x_ABI_CWindows_CDevices_CSensors_CIProximitySensorDataThresholdFactory_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CDevices_CSensors_CIProximitySensorDataThresholdFactory_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Devices_Sensors_IProximitySensorDataThresholdFactory[] = L"Windows.Devices.Sensors.IProximitySensorDataThresholdFactory";
typedef struct __x_ABI_CWindows_CDevices_CSensors_CIProximitySensorDataThresholdFactoryVtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CDevices_CSensors_CIProximitySensorDataThresholdFactory* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CDevices_CSensors_CIProximitySensorDataThresholdFactory* This);
    ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CDevices_CSensors_CIProximitySensorDataThresholdFactory* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CDevices_CSensors_CIProximitySensorDataThresholdFactory* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CDevices_CSensors_CIProximitySensorDataThresholdFactory* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CDevices_CSensors_CIProximitySensorDataThresholdFactory* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* Create)(__x_ABI_CWindows_CDevices_CSensors_CIProximitySensorDataThresholdFactory* This,
        __x_ABI_CWindows_CDevices_CSensors_CIProximitySensor* sensor,
        __x_ABI_CWindows_CDevices_CSensors_CISensorDataThreshold** threshold);

    END_INTERFACE
} __x_ABI_CWindows_CDevices_CSensors_CIProximitySensorDataThresholdFactoryVtbl;

interface __x_ABI_CWindows_CDevices_CSensors_CIProximitySensorDataThresholdFactory
{
    CONST_VTBL struct __x_ABI_CWindows_CDevices_CSensors_CIProximitySensorDataThresholdFactoryVtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __x_ABI_CWindows_CDevices_CSensors_CIProximitySensorDataThresholdFactory_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __x_ABI_CWindows_CDevices_CSensors_CIProximitySensorDataThresholdFactory_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __x_ABI_CWindows_CDevices_CSensors_CIProximitySensorDataThresholdFactory_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __x_ABI_CWindows_CDevices_CSensors_CIProximitySensorDataThresholdFactory_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __x_ABI_CWindows_CDevices_CSensors_CIProximitySensorDataThresholdFactory_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __x_ABI_CWindows_CDevices_CSensors_CIProximitySensorDataThresholdFactory_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __x_ABI_CWindows_CDevices_CSensors_CIProximitySensorDataThresholdFactory_Create(This, sensor, threshold) \
    ((This)->lpVtbl->Create(This, sensor, threshold))

#endif /* COBJMACROS */

EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CSensors_CIProximitySensorDataThresholdFactory;
#endif /* !defined(____x_ABI_CWindows_CDevices_CSensors_CIProximitySensorDataThresholdFactory_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x20000

/*
 *
 * Interface Windows.Devices.Sensors.IProximitySensorReading
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Interface is a part of the implementation of type Windows.Devices.Sensors.ProximitySensorReading
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____x_ABI_CWindows_CDevices_CSensors_CIProximitySensorReading_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CDevices_CSensors_CIProximitySensorReading_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Devices_Sensors_IProximitySensorReading[] = L"Windows.Devices.Sensors.IProximitySensorReading";
typedef struct __x_ABI_CWindows_CDevices_CSensors_CIProximitySensorReadingVtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CDevices_CSensors_CIProximitySensorReading* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CDevices_CSensors_CIProximitySensorReading* This);
    ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CDevices_CSensors_CIProximitySensorReading* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CDevices_CSensors_CIProximitySensorReading* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CDevices_CSensors_CIProximitySensorReading* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CDevices_CSensors_CIProximitySensorReading* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* get_Timestamp)(__x_ABI_CWindows_CDevices_CSensors_CIProximitySensorReading* This,
        struct __x_ABI_CWindows_CFoundation_CDateTime* value);
    HRESULT (STDMETHODCALLTYPE* get_IsDetected)(__x_ABI_CWindows_CDevices_CSensors_CIProximitySensorReading* This,
        boolean* value);
    HRESULT (STDMETHODCALLTYPE* get_DistanceInMillimeters)(__x_ABI_CWindows_CDevices_CSensors_CIProximitySensorReading* This,
        __FIReference_1_UINT32** value);

    END_INTERFACE
} __x_ABI_CWindows_CDevices_CSensors_CIProximitySensorReadingVtbl;

interface __x_ABI_CWindows_CDevices_CSensors_CIProximitySensorReading
{
    CONST_VTBL struct __x_ABI_CWindows_CDevices_CSensors_CIProximitySensorReadingVtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __x_ABI_CWindows_CDevices_CSensors_CIProximitySensorReading_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __x_ABI_CWindows_CDevices_CSensors_CIProximitySensorReading_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __x_ABI_CWindows_CDevices_CSensors_CIProximitySensorReading_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __x_ABI_CWindows_CDevices_CSensors_CIProximitySensorReading_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __x_ABI_CWindows_CDevices_CSensors_CIProximitySensorReading_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __x_ABI_CWindows_CDevices_CSensors_CIProximitySensorReading_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __x_ABI_CWindows_CDevices_CSensors_CIProximitySensorReading_get_Timestamp(This, value) \
    ((This)->lpVtbl->get_Timestamp(This, value))

#define __x_ABI_CWindows_CDevices_CSensors_CIProximitySensorReading_get_IsDetected(This, value) \
    ((This)->lpVtbl->get_IsDetected(This, value))

#define __x_ABI_CWindows_CDevices_CSensors_CIProximitySensorReading_get_DistanceInMillimeters(This, value) \
    ((This)->lpVtbl->get_DistanceInMillimeters(This, value))

#endif /* COBJMACROS */

EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CSensors_CIProximitySensorReading;
#endif /* !defined(____x_ABI_CWindows_CDevices_CSensors_CIProximitySensorReading_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Interface Windows.Devices.Sensors.IProximitySensorReadingChangedEventArgs
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Interface is a part of the implementation of type Windows.Devices.Sensors.ProximitySensorReadingChangedEventArgs
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____x_ABI_CWindows_CDevices_CSensors_CIProximitySensorReadingChangedEventArgs_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CDevices_CSensors_CIProximitySensorReadingChangedEventArgs_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Devices_Sensors_IProximitySensorReadingChangedEventArgs[] = L"Windows.Devices.Sensors.IProximitySensorReadingChangedEventArgs";
typedef struct __x_ABI_CWindows_CDevices_CSensors_CIProximitySensorReadingChangedEventArgsVtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CDevices_CSensors_CIProximitySensorReadingChangedEventArgs* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CDevices_CSensors_CIProximitySensorReadingChangedEventArgs* This);
    ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CDevices_CSensors_CIProximitySensorReadingChangedEventArgs* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CDevices_CSensors_CIProximitySensorReadingChangedEventArgs* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CDevices_CSensors_CIProximitySensorReadingChangedEventArgs* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CDevices_CSensors_CIProximitySensorReadingChangedEventArgs* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* get_Reading)(__x_ABI_CWindows_CDevices_CSensors_CIProximitySensorReadingChangedEventArgs* This,
        __x_ABI_CWindows_CDevices_CSensors_CIProximitySensorReading** value);

    END_INTERFACE
} __x_ABI_CWindows_CDevices_CSensors_CIProximitySensorReadingChangedEventArgsVtbl;

interface __x_ABI_CWindows_CDevices_CSensors_CIProximitySensorReadingChangedEventArgs
{
    CONST_VTBL struct __x_ABI_CWindows_CDevices_CSensors_CIProximitySensorReadingChangedEventArgsVtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __x_ABI_CWindows_CDevices_CSensors_CIProximitySensorReadingChangedEventArgs_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __x_ABI_CWindows_CDevices_CSensors_CIProximitySensorReadingChangedEventArgs_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __x_ABI_CWindows_CDevices_CSensors_CIProximitySensorReadingChangedEventArgs_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __x_ABI_CWindows_CDevices_CSensors_CIProximitySensorReadingChangedEventArgs_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __x_ABI_CWindows_CDevices_CSensors_CIProximitySensorReadingChangedEventArgs_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __x_ABI_CWindows_CDevices_CSensors_CIProximitySensorReadingChangedEventArgs_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __x_ABI_CWindows_CDevices_CSensors_CIProximitySensorReadingChangedEventArgs_get_Reading(This, value) \
    ((This)->lpVtbl->get_Reading(This, value))

#endif /* COBJMACROS */

EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CSensors_CIProximitySensorReadingChangedEventArgs;
#endif /* !defined(____x_ABI_CWindows_CDevices_CSensors_CIProximitySensorReadingChangedEventArgs_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Interface Windows.Devices.Sensors.IProximitySensorStatics
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Interface is a part of the implementation of type Windows.Devices.Sensors.ProximitySensor
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____x_ABI_CWindows_CDevices_CSensors_CIProximitySensorStatics_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CDevices_CSensors_CIProximitySensorStatics_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Devices_Sensors_IProximitySensorStatics[] = L"Windows.Devices.Sensors.IProximitySensorStatics";
typedef struct __x_ABI_CWindows_CDevices_CSensors_CIProximitySensorStaticsVtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CDevices_CSensors_CIProximitySensorStatics* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CDevices_CSensors_CIProximitySensorStatics* This);
    ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CDevices_CSensors_CIProximitySensorStatics* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CDevices_CSensors_CIProximitySensorStatics* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CDevices_CSensors_CIProximitySensorStatics* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CDevices_CSensors_CIProximitySensorStatics* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* GetDeviceSelector)(__x_ABI_CWindows_CDevices_CSensors_CIProximitySensorStatics* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* FromId)(__x_ABI_CWindows_CDevices_CSensors_CIProximitySensorStatics* This,
        HSTRING sensorId,
        __x_ABI_CWindows_CDevices_CSensors_CIProximitySensor** result);

    END_INTERFACE
} __x_ABI_CWindows_CDevices_CSensors_CIProximitySensorStaticsVtbl;

interface __x_ABI_CWindows_CDevices_CSensors_CIProximitySensorStatics
{
    CONST_VTBL struct __x_ABI_CWindows_CDevices_CSensors_CIProximitySensorStaticsVtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __x_ABI_CWindows_CDevices_CSensors_CIProximitySensorStatics_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __x_ABI_CWindows_CDevices_CSensors_CIProximitySensorStatics_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __x_ABI_CWindows_CDevices_CSensors_CIProximitySensorStatics_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __x_ABI_CWindows_CDevices_CSensors_CIProximitySensorStatics_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __x_ABI_CWindows_CDevices_CSensors_CIProximitySensorStatics_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __x_ABI_CWindows_CDevices_CSensors_CIProximitySensorStatics_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __x_ABI_CWindows_CDevices_CSensors_CIProximitySensorStatics_GetDeviceSelector(This, value) \
    ((This)->lpVtbl->GetDeviceSelector(This, value))

#define __x_ABI_CWindows_CDevices_CSensors_CIProximitySensorStatics_FromId(This, sensorId, result) \
    ((This)->lpVtbl->FromId(This, sensorId, result))

#endif /* COBJMACROS */

EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CSensors_CIProximitySensorStatics;
#endif /* !defined(____x_ABI_CWindows_CDevices_CSensors_CIProximitySensorStatics_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Interface Windows.Devices.Sensors.IProximitySensorStatics2
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 2.0
 *
 * Interface is a part of the implementation of type Windows.Devices.Sensors.ProximitySensor
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x20000
#if !defined(____x_ABI_CWindows_CDevices_CSensors_CIProximitySensorStatics2_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CDevices_CSensors_CIProximitySensorStatics2_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Devices_Sensors_IProximitySensorStatics2[] = L"Windows.Devices.Sensors.IProximitySensorStatics2";
typedef struct __x_ABI_CWindows_CDevices_CSensors_CIProximitySensorStatics2Vtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CDevices_CSensors_CIProximitySensorStatics2* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CDevices_CSensors_CIProximitySensorStatics2* This);
    ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CDevices_CSensors_CIProximitySensorStatics2* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CDevices_CSensors_CIProximitySensorStatics2* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CDevices_CSensors_CIProximitySensorStatics2* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CDevices_CSensors_CIProximitySensorStatics2* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* GetReadingsFromTriggerDetails)(__x_ABI_CWindows_CDevices_CSensors_CIProximitySensorStatics2* This,
        __x_ABI_CWindows_CDevices_CSensors_CISensorDataThresholdTriggerDetails* triggerDetails,
        __FIVectorView_1_Windows__CDevices__CSensors__CProximitySensorReading** result);

    END_INTERFACE
} __x_ABI_CWindows_CDevices_CSensors_CIProximitySensorStatics2Vtbl;

interface __x_ABI_CWindows_CDevices_CSensors_CIProximitySensorStatics2
{
    CONST_VTBL struct __x_ABI_CWindows_CDevices_CSensors_CIProximitySensorStatics2Vtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __x_ABI_CWindows_CDevices_CSensors_CIProximitySensorStatics2_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __x_ABI_CWindows_CDevices_CSensors_CIProximitySensorStatics2_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __x_ABI_CWindows_CDevices_CSensors_CIProximitySensorStatics2_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __x_ABI_CWindows_CDevices_CSensors_CIProximitySensorStatics2_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __x_ABI_CWindows_CDevices_CSensors_CIProximitySensorStatics2_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __x_ABI_CWindows_CDevices_CSensors_CIProximitySensorStatics2_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __x_ABI_CWindows_CDevices_CSensors_CIProximitySensorStatics2_GetReadingsFromTriggerDetails(This, triggerDetails, result) \
    ((This)->lpVtbl->GetReadingsFromTriggerDetails(This, triggerDetails, result))

#endif /* COBJMACROS */

EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CSensors_CIProximitySensorStatics2;
#endif /* !defined(____x_ABI_CWindows_CDevices_CSensors_CIProximitySensorStatics2_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x20000

/*
 *
 * Interface Windows.Devices.Sensors.ISensorDataThreshold
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 2.0
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x20000
#if !defined(____x_ABI_CWindows_CDevices_CSensors_CISensorDataThreshold_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CDevices_CSensors_CISensorDataThreshold_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Devices_Sensors_ISensorDataThreshold[] = L"Windows.Devices.Sensors.ISensorDataThreshold";
typedef struct __x_ABI_CWindows_CDevices_CSensors_CISensorDataThresholdVtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CDevices_CSensors_CISensorDataThreshold* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CDevices_CSensors_CISensorDataThreshold* This);
    ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CDevices_CSensors_CISensorDataThreshold* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CDevices_CSensors_CISensorDataThreshold* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CDevices_CSensors_CISensorDataThreshold* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CDevices_CSensors_CISensorDataThreshold* This,
        TrustLevel* trustLevel);

    END_INTERFACE
} __x_ABI_CWindows_CDevices_CSensors_CISensorDataThresholdVtbl;

interface __x_ABI_CWindows_CDevices_CSensors_CISensorDataThreshold
{
    CONST_VTBL struct __x_ABI_CWindows_CDevices_CSensors_CISensorDataThresholdVtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __x_ABI_CWindows_CDevices_CSensors_CISensorDataThreshold_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __x_ABI_CWindows_CDevices_CSensors_CISensorDataThreshold_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __x_ABI_CWindows_CDevices_CSensors_CISensorDataThreshold_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __x_ABI_CWindows_CDevices_CSensors_CISensorDataThreshold_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __x_ABI_CWindows_CDevices_CSensors_CISensorDataThreshold_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __x_ABI_CWindows_CDevices_CSensors_CISensorDataThreshold_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#endif /* COBJMACROS */

EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CSensors_CISensorDataThreshold;
#endif /* !defined(____x_ABI_CWindows_CDevices_CSensors_CISensorDataThreshold_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x20000

/*
 *
 * Interface Windows.Devices.Sensors.ISensorDataThresholdTriggerDetails
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 2.0
 *
 * Interface is a part of the implementation of type Windows.Devices.Sensors.SensorDataThresholdTriggerDetails
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x20000
#if !defined(____x_ABI_CWindows_CDevices_CSensors_CISensorDataThresholdTriggerDetails_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CDevices_CSensors_CISensorDataThresholdTriggerDetails_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Devices_Sensors_ISensorDataThresholdTriggerDetails[] = L"Windows.Devices.Sensors.ISensorDataThresholdTriggerDetails";
typedef struct __x_ABI_CWindows_CDevices_CSensors_CISensorDataThresholdTriggerDetailsVtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CDevices_CSensors_CISensorDataThresholdTriggerDetails* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CDevices_CSensors_CISensorDataThresholdTriggerDetails* This);
    ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CDevices_CSensors_CISensorDataThresholdTriggerDetails* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CDevices_CSensors_CISensorDataThresholdTriggerDetails* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CDevices_CSensors_CISensorDataThresholdTriggerDetails* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CDevices_CSensors_CISensorDataThresholdTriggerDetails* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* get_DeviceId)(__x_ABI_CWindows_CDevices_CSensors_CISensorDataThresholdTriggerDetails* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_SensorType)(__x_ABI_CWindows_CDevices_CSensors_CISensorDataThresholdTriggerDetails* This,
        enum __x_ABI_CWindows_CDevices_CSensors_CSensorType* value);

    END_INTERFACE
} __x_ABI_CWindows_CDevices_CSensors_CISensorDataThresholdTriggerDetailsVtbl;

interface __x_ABI_CWindows_CDevices_CSensors_CISensorDataThresholdTriggerDetails
{
    CONST_VTBL struct __x_ABI_CWindows_CDevices_CSensors_CISensorDataThresholdTriggerDetailsVtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __x_ABI_CWindows_CDevices_CSensors_CISensorDataThresholdTriggerDetails_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __x_ABI_CWindows_CDevices_CSensors_CISensorDataThresholdTriggerDetails_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __x_ABI_CWindows_CDevices_CSensors_CISensorDataThresholdTriggerDetails_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __x_ABI_CWindows_CDevices_CSensors_CISensorDataThresholdTriggerDetails_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __x_ABI_CWindows_CDevices_CSensors_CISensorDataThresholdTriggerDetails_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __x_ABI_CWindows_CDevices_CSensors_CISensorDataThresholdTriggerDetails_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __x_ABI_CWindows_CDevices_CSensors_CISensorDataThresholdTriggerDetails_get_DeviceId(This, value) \
    ((This)->lpVtbl->get_DeviceId(This, value))

#define __x_ABI_CWindows_CDevices_CSensors_CISensorDataThresholdTriggerDetails_get_SensorType(This, value) \
    ((This)->lpVtbl->get_SensorType(This, value))

#endif /* COBJMACROS */

EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CSensors_CISensorDataThresholdTriggerDetails;
#endif /* !defined(____x_ABI_CWindows_CDevices_CSensors_CISensorDataThresholdTriggerDetails_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x20000

/*
 *
 * Interface Windows.Devices.Sensors.ISensorQuaternion
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Interface is a part of the implementation of type Windows.Devices.Sensors.SensorQuaternion
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____x_ABI_CWindows_CDevices_CSensors_CISensorQuaternion_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CDevices_CSensors_CISensorQuaternion_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Devices_Sensors_ISensorQuaternion[] = L"Windows.Devices.Sensors.ISensorQuaternion";
typedef struct __x_ABI_CWindows_CDevices_CSensors_CISensorQuaternionVtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CDevices_CSensors_CISensorQuaternion* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CDevices_CSensors_CISensorQuaternion* This);
    ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CDevices_CSensors_CISensorQuaternion* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CDevices_CSensors_CISensorQuaternion* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CDevices_CSensors_CISensorQuaternion* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CDevices_CSensors_CISensorQuaternion* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* get_W)(__x_ABI_CWindows_CDevices_CSensors_CISensorQuaternion* This,
        FLOAT* value);
    HRESULT (STDMETHODCALLTYPE* get_X)(__x_ABI_CWindows_CDevices_CSensors_CISensorQuaternion* This,
        FLOAT* value);
    HRESULT (STDMETHODCALLTYPE* get_Y)(__x_ABI_CWindows_CDevices_CSensors_CISensorQuaternion* This,
        FLOAT* value);
    HRESULT (STDMETHODCALLTYPE* get_Z)(__x_ABI_CWindows_CDevices_CSensors_CISensorQuaternion* This,
        FLOAT* value);

    END_INTERFACE
} __x_ABI_CWindows_CDevices_CSensors_CISensorQuaternionVtbl;

interface __x_ABI_CWindows_CDevices_CSensors_CISensorQuaternion
{
    CONST_VTBL struct __x_ABI_CWindows_CDevices_CSensors_CISensorQuaternionVtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __x_ABI_CWindows_CDevices_CSensors_CISensorQuaternion_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __x_ABI_CWindows_CDevices_CSensors_CISensorQuaternion_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __x_ABI_CWindows_CDevices_CSensors_CISensorQuaternion_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __x_ABI_CWindows_CDevices_CSensors_CISensorQuaternion_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __x_ABI_CWindows_CDevices_CSensors_CISensorQuaternion_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __x_ABI_CWindows_CDevices_CSensors_CISensorQuaternion_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __x_ABI_CWindows_CDevices_CSensors_CISensorQuaternion_get_W(This, value) \
    ((This)->lpVtbl->get_W(This, value))

#define __x_ABI_CWindows_CDevices_CSensors_CISensorQuaternion_get_X(This, value) \
    ((This)->lpVtbl->get_X(This, value))

#define __x_ABI_CWindows_CDevices_CSensors_CISensorQuaternion_get_Y(This, value) \
    ((This)->lpVtbl->get_Y(This, value))

#define __x_ABI_CWindows_CDevices_CSensors_CISensorQuaternion_get_Z(This, value) \
    ((This)->lpVtbl->get_Z(This, value))

#endif /* COBJMACROS */

EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CSensors_CISensorQuaternion;
#endif /* !defined(____x_ABI_CWindows_CDevices_CSensors_CISensorQuaternion_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Interface Windows.Devices.Sensors.ISensorRotationMatrix
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Interface is a part of the implementation of type Windows.Devices.Sensors.SensorRotationMatrix
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____x_ABI_CWindows_CDevices_CSensors_CISensorRotationMatrix_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CDevices_CSensors_CISensorRotationMatrix_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Devices_Sensors_ISensorRotationMatrix[] = L"Windows.Devices.Sensors.ISensorRotationMatrix";
typedef struct __x_ABI_CWindows_CDevices_CSensors_CISensorRotationMatrixVtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CDevices_CSensors_CISensorRotationMatrix* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CDevices_CSensors_CISensorRotationMatrix* This);
    ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CDevices_CSensors_CISensorRotationMatrix* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CDevices_CSensors_CISensorRotationMatrix* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CDevices_CSensors_CISensorRotationMatrix* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CDevices_CSensors_CISensorRotationMatrix* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* get_M11)(__x_ABI_CWindows_CDevices_CSensors_CISensorRotationMatrix* This,
        FLOAT* value);
    HRESULT (STDMETHODCALLTYPE* get_M12)(__x_ABI_CWindows_CDevices_CSensors_CISensorRotationMatrix* This,
        FLOAT* value);
    HRESULT (STDMETHODCALLTYPE* get_M13)(__x_ABI_CWindows_CDevices_CSensors_CISensorRotationMatrix* This,
        FLOAT* value);
    HRESULT (STDMETHODCALLTYPE* get_M21)(__x_ABI_CWindows_CDevices_CSensors_CISensorRotationMatrix* This,
        FLOAT* value);
    HRESULT (STDMETHODCALLTYPE* get_M22)(__x_ABI_CWindows_CDevices_CSensors_CISensorRotationMatrix* This,
        FLOAT* value);
    HRESULT (STDMETHODCALLTYPE* get_M23)(__x_ABI_CWindows_CDevices_CSensors_CISensorRotationMatrix* This,
        FLOAT* value);
    HRESULT (STDMETHODCALLTYPE* get_M31)(__x_ABI_CWindows_CDevices_CSensors_CISensorRotationMatrix* This,
        FLOAT* value);
    HRESULT (STDMETHODCALLTYPE* get_M32)(__x_ABI_CWindows_CDevices_CSensors_CISensorRotationMatrix* This,
        FLOAT* value);
    HRESULT (STDMETHODCALLTYPE* get_M33)(__x_ABI_CWindows_CDevices_CSensors_CISensorRotationMatrix* This,
        FLOAT* value);

    END_INTERFACE
} __x_ABI_CWindows_CDevices_CSensors_CISensorRotationMatrixVtbl;

interface __x_ABI_CWindows_CDevices_CSensors_CISensorRotationMatrix
{
    CONST_VTBL struct __x_ABI_CWindows_CDevices_CSensors_CISensorRotationMatrixVtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __x_ABI_CWindows_CDevices_CSensors_CISensorRotationMatrix_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __x_ABI_CWindows_CDevices_CSensors_CISensorRotationMatrix_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __x_ABI_CWindows_CDevices_CSensors_CISensorRotationMatrix_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __x_ABI_CWindows_CDevices_CSensors_CISensorRotationMatrix_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __x_ABI_CWindows_CDevices_CSensors_CISensorRotationMatrix_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __x_ABI_CWindows_CDevices_CSensors_CISensorRotationMatrix_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __x_ABI_CWindows_CDevices_CSensors_CISensorRotationMatrix_get_M11(This, value) \
    ((This)->lpVtbl->get_M11(This, value))

#define __x_ABI_CWindows_CDevices_CSensors_CISensorRotationMatrix_get_M12(This, value) \
    ((This)->lpVtbl->get_M12(This, value))

#define __x_ABI_CWindows_CDevices_CSensors_CISensorRotationMatrix_get_M13(This, value) \
    ((This)->lpVtbl->get_M13(This, value))

#define __x_ABI_CWindows_CDevices_CSensors_CISensorRotationMatrix_get_M21(This, value) \
    ((This)->lpVtbl->get_M21(This, value))

#define __x_ABI_CWindows_CDevices_CSensors_CISensorRotationMatrix_get_M22(This, value) \
    ((This)->lpVtbl->get_M22(This, value))

#define __x_ABI_CWindows_CDevices_CSensors_CISensorRotationMatrix_get_M23(This, value) \
    ((This)->lpVtbl->get_M23(This, value))

#define __x_ABI_CWindows_CDevices_CSensors_CISensorRotationMatrix_get_M31(This, value) \
    ((This)->lpVtbl->get_M31(This, value))

#define __x_ABI_CWindows_CDevices_CSensors_CISensorRotationMatrix_get_M32(This, value) \
    ((This)->lpVtbl->get_M32(This, value))

#define __x_ABI_CWindows_CDevices_CSensors_CISensorRotationMatrix_get_M33(This, value) \
    ((This)->lpVtbl->get_M33(This, value))

#endif /* COBJMACROS */

EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CSensors_CISensorRotationMatrix;
#endif /* !defined(____x_ABI_CWindows_CDevices_CSensors_CISensorRotationMatrix_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Interface Windows.Devices.Sensors.ISimpleOrientationSensor
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Interface is a part of the implementation of type Windows.Devices.Sensors.SimpleOrientationSensor
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensor_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensor_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Devices_Sensors_ISimpleOrientationSensor[] = L"Windows.Devices.Sensors.ISimpleOrientationSensor";
typedef struct __x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensorVtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensor* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensor* This);
    ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensor* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensor* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensor* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensor* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* GetCurrentOrientation)(__x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensor* This,
        enum __x_ABI_CWindows_CDevices_CSensors_CSimpleOrientation* value);
    HRESULT (STDMETHODCALLTYPE* add_OrientationChanged)(__x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensor* This,
        __FITypedEventHandler_2_Windows__CDevices__CSensors__CSimpleOrientationSensor_Windows__CDevices__CSensors__CSimpleOrientationSensorOrientationChangedEventArgs* handler,
        EventRegistrationToken* token);
    HRESULT (STDMETHODCALLTYPE* remove_OrientationChanged)(__x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensor* This,
        EventRegistrationToken token);

    END_INTERFACE
} __x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensorVtbl;

interface __x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensor
{
    CONST_VTBL struct __x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensorVtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensor_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensor_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensor_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensor_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensor_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensor_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensor_GetCurrentOrientation(This, value) \
    ((This)->lpVtbl->GetCurrentOrientation(This, value))

#define __x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensor_add_OrientationChanged(This, handler, token) \
    ((This)->lpVtbl->add_OrientationChanged(This, handler, token))

#define __x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensor_remove_OrientationChanged(This, token) \
    ((This)->lpVtbl->remove_OrientationChanged(This, token))

#endif /* COBJMACROS */

EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensor;
#endif /* !defined(____x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensor_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Interface Windows.Devices.Sensors.ISimpleOrientationSensor2
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Interface is a part of the implementation of type Windows.Devices.Sensors.SimpleOrientationSensor
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensor2_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensor2_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Devices_Sensors_ISimpleOrientationSensor2[] = L"Windows.Devices.Sensors.ISimpleOrientationSensor2";
typedef struct __x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensor2Vtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensor2* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensor2* This);
    ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensor2* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensor2* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensor2* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensor2* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* put_ReadingTransform)(__x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensor2* This,
        enum __x_ABI_CWindows_CGraphics_CDisplay_CDisplayOrientations value);
    HRESULT (STDMETHODCALLTYPE* get_ReadingTransform)(__x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensor2* This,
        enum __x_ABI_CWindows_CGraphics_CDisplay_CDisplayOrientations* value);

    END_INTERFACE
} __x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensor2Vtbl;

interface __x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensor2
{
    CONST_VTBL struct __x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensor2Vtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensor2_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensor2_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensor2_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensor2_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensor2_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensor2_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensor2_put_ReadingTransform(This, value) \
    ((This)->lpVtbl->put_ReadingTransform(This, value))

#define __x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensor2_get_ReadingTransform(This, value) \
    ((This)->lpVtbl->get_ReadingTransform(This, value))

#endif /* COBJMACROS */

EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensor2;
#endif /* !defined(____x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensor2_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Interface Windows.Devices.Sensors.ISimpleOrientationSensorDeviceId
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Interface is a part of the implementation of type Windows.Devices.Sensors.SimpleOrientationSensor
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensorDeviceId_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensorDeviceId_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Devices_Sensors_ISimpleOrientationSensorDeviceId[] = L"Windows.Devices.Sensors.ISimpleOrientationSensorDeviceId";
typedef struct __x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensorDeviceIdVtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensorDeviceId* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensorDeviceId* This);
    ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensorDeviceId* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensorDeviceId* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensorDeviceId* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensorDeviceId* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* get_DeviceId)(__x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensorDeviceId* This,
        HSTRING* value);

    END_INTERFACE
} __x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensorDeviceIdVtbl;

interface __x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensorDeviceId
{
    CONST_VTBL struct __x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensorDeviceIdVtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensorDeviceId_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensorDeviceId_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensorDeviceId_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensorDeviceId_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensorDeviceId_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensorDeviceId_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensorDeviceId_get_DeviceId(This, value) \
    ((This)->lpVtbl->get_DeviceId(This, value))

#endif /* COBJMACROS */

EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensorDeviceId;
#endif /* !defined(____x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensorDeviceId_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Interface Windows.Devices.Sensors.ISimpleOrientationSensorOrientationChangedEventArgs
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Interface is a part of the implementation of type Windows.Devices.Sensors.SimpleOrientationSensorOrientationChangedEventArgs
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensorOrientationChangedEventArgs_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensorOrientationChangedEventArgs_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Devices_Sensors_ISimpleOrientationSensorOrientationChangedEventArgs[] = L"Windows.Devices.Sensors.ISimpleOrientationSensorOrientationChangedEventArgs";
typedef struct __x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensorOrientationChangedEventArgsVtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensorOrientationChangedEventArgs* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensorOrientationChangedEventArgs* This);
    ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensorOrientationChangedEventArgs* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensorOrientationChangedEventArgs* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensorOrientationChangedEventArgs* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensorOrientationChangedEventArgs* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* get_Timestamp)(__x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensorOrientationChangedEventArgs* This,
        struct __x_ABI_CWindows_CFoundation_CDateTime* value);
    HRESULT (STDMETHODCALLTYPE* get_Orientation)(__x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensorOrientationChangedEventArgs* This,
        enum __x_ABI_CWindows_CDevices_CSensors_CSimpleOrientation* value);

    END_INTERFACE
} __x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensorOrientationChangedEventArgsVtbl;

interface __x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensorOrientationChangedEventArgs
{
    CONST_VTBL struct __x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensorOrientationChangedEventArgsVtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensorOrientationChangedEventArgs_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensorOrientationChangedEventArgs_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensorOrientationChangedEventArgs_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensorOrientationChangedEventArgs_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensorOrientationChangedEventArgs_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensorOrientationChangedEventArgs_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensorOrientationChangedEventArgs_get_Timestamp(This, value) \
    ((This)->lpVtbl->get_Timestamp(This, value))

#define __x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensorOrientationChangedEventArgs_get_Orientation(This, value) \
    ((This)->lpVtbl->get_Orientation(This, value))

#endif /* COBJMACROS */

EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensorOrientationChangedEventArgs;
#endif /* !defined(____x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensorOrientationChangedEventArgs_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Interface Windows.Devices.Sensors.ISimpleOrientationSensorStatics
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Interface is a part of the implementation of type Windows.Devices.Sensors.SimpleOrientationSensor
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensorStatics_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensorStatics_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Devices_Sensors_ISimpleOrientationSensorStatics[] = L"Windows.Devices.Sensors.ISimpleOrientationSensorStatics";
typedef struct __x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensorStaticsVtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensorStatics* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensorStatics* This);
    ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensorStatics* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensorStatics* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensorStatics* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensorStatics* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* GetDefault)(__x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensorStatics* This,
        __x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensor** result);

    END_INTERFACE
} __x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensorStaticsVtbl;

interface __x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensorStatics
{
    CONST_VTBL struct __x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensorStaticsVtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensorStatics_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensorStatics_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensorStatics_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensorStatics_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensorStatics_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensorStatics_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensorStatics_GetDefault(This, result) \
    ((This)->lpVtbl->GetDefault(This, result))

#endif /* COBJMACROS */

EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensorStatics;
#endif /* !defined(____x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensorStatics_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Interface Windows.Devices.Sensors.ISimpleOrientationSensorStatics2
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 7.0
 *
 * Interface is a part of the implementation of type Windows.Devices.Sensors.SimpleOrientationSensor
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x70000
#if !defined(____x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensorStatics2_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensorStatics2_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Devices_Sensors_ISimpleOrientationSensorStatics2[] = L"Windows.Devices.Sensors.ISimpleOrientationSensorStatics2";
typedef struct __x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensorStatics2Vtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensorStatics2* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensorStatics2* This);
    ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensorStatics2* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensorStatics2* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensorStatics2* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensorStatics2* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* GetDeviceSelector)(__x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensorStatics2* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* FromIdAsync)(__x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensorStatics2* This,
        HSTRING deviceId,
        __FIAsyncOperation_1_Windows__CDevices__CSensors__CSimpleOrientationSensor** result);

    END_INTERFACE
} __x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensorStatics2Vtbl;

interface __x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensorStatics2
{
    CONST_VTBL struct __x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensorStatics2Vtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensorStatics2_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensorStatics2_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensorStatics2_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensorStatics2_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensorStatics2_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensorStatics2_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensorStatics2_GetDeviceSelector(This, value) \
    ((This)->lpVtbl->GetDeviceSelector(This, value))

#define __x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensorStatics2_FromIdAsync(This, deviceId, result) \
    ((This)->lpVtbl->FromIdAsync(This, deviceId, result))

#endif /* COBJMACROS */

EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensorStatics2;
#endif /* !defined(____x_ABI_CWindows_CDevices_CSensors_CISimpleOrientationSensorStatics2_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x70000

/*
 *
 * Class Windows.Devices.Sensors.Accelerometer
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * RuntimeClass contains static methods.
 *   Static Methods exist on the Windows.Devices.Sensors.IAccelerometerStatics interface starting with version 1.0 of the Windows.Foundation.UniversalApiContract API contract
 *   Static Methods exist on the Windows.Devices.Sensors.IAccelerometerStatics2 interface starting with version 3.0 of the Windows.Foundation.UniversalApiContract API contract
 *   Static Methods exist on the Windows.Devices.Sensors.IAccelerometerStatics3 interface starting with version 5.0 of the Windows.Foundation.UniversalApiContract API contract
 *
 * Class implements the following interfaces:
 *    Windows.Devices.Sensors.IAccelerometer ** Default Interface **
 *    Windows.Devices.Sensors.IAccelerometerDeviceId
 *    Windows.Devices.Sensors.IAccelerometer2
 *    Windows.Devices.Sensors.IAccelerometer3
 *    Windows.Devices.Sensors.IAccelerometer4
 *    Windows.Devices.Sensors.IAccelerometer5
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#ifndef RUNTIMECLASS_Windows_Devices_Sensors_Accelerometer_DEFINED
#define RUNTIMECLASS_Windows_Devices_Sensors_Accelerometer_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Windows_Devices_Sensors_Accelerometer[] = L"Windows.Devices.Sensors.Accelerometer";
#endif
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Class Windows.Devices.Sensors.AccelerometerDataThreshold
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 10.0
 *
 * Class implements the following interfaces:
 *    Windows.Devices.Sensors.IAccelerometerDataThreshold ** Default Interface **
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0xa0000
#ifndef RUNTIMECLASS_Windows_Devices_Sensors_AccelerometerDataThreshold_DEFINED
#define RUNTIMECLASS_Windows_Devices_Sensors_AccelerometerDataThreshold_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Windows_Devices_Sensors_AccelerometerDataThreshold[] = L"Windows.Devices.Sensors.AccelerometerDataThreshold";
#endif
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0xa0000

/*
 *
 * Class Windows.Devices.Sensors.AccelerometerReading
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Class implements the following interfaces:
 *    Windows.Devices.Sensors.IAccelerometerReading ** Default Interface **
 *    Windows.Devices.Sensors.IAccelerometerReading2
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#ifndef RUNTIMECLASS_Windows_Devices_Sensors_AccelerometerReading_DEFINED
#define RUNTIMECLASS_Windows_Devices_Sensors_AccelerometerReading_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Windows_Devices_Sensors_AccelerometerReading[] = L"Windows.Devices.Sensors.AccelerometerReading";
#endif
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Class Windows.Devices.Sensors.AccelerometerReadingChangedEventArgs
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Class implements the following interfaces:
 *    Windows.Devices.Sensors.IAccelerometerReadingChangedEventArgs ** Default Interface **
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#ifndef RUNTIMECLASS_Windows_Devices_Sensors_AccelerometerReadingChangedEventArgs_DEFINED
#define RUNTIMECLASS_Windows_Devices_Sensors_AccelerometerReadingChangedEventArgs_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Windows_Devices_Sensors_AccelerometerReadingChangedEventArgs[] = L"Windows.Devices.Sensors.AccelerometerReadingChangedEventArgs";
#endif
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Class Windows.Devices.Sensors.AccelerometerShakenEventArgs
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Class implements the following interfaces:
 *    Windows.Devices.Sensors.IAccelerometerShakenEventArgs ** Default Interface **
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#ifndef RUNTIMECLASS_Windows_Devices_Sensors_AccelerometerShakenEventArgs_DEFINED
#define RUNTIMECLASS_Windows_Devices_Sensors_AccelerometerShakenEventArgs_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Windows_Devices_Sensors_AccelerometerShakenEventArgs[] = L"Windows.Devices.Sensors.AccelerometerShakenEventArgs";
#endif
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Class Windows.Devices.Sensors.ActivitySensor
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * RuntimeClass contains static methods.
 *   Static Methods exist on the Windows.Devices.Sensors.IActivitySensorStatics interface starting with version 1.0 of the Windows.Foundation.UniversalApiContract API contract
 *
 * Class implements the following interfaces:
 *    Windows.Devices.Sensors.IActivitySensor ** Default Interface **
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#ifndef RUNTIMECLASS_Windows_Devices_Sensors_ActivitySensor_DEFINED
#define RUNTIMECLASS_Windows_Devices_Sensors_ActivitySensor_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Windows_Devices_Sensors_ActivitySensor[] = L"Windows.Devices.Sensors.ActivitySensor";
#endif
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Class Windows.Devices.Sensors.ActivitySensorReading
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Class implements the following interfaces:
 *    Windows.Devices.Sensors.IActivitySensorReading ** Default Interface **
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#ifndef RUNTIMECLASS_Windows_Devices_Sensors_ActivitySensorReading_DEFINED
#define RUNTIMECLASS_Windows_Devices_Sensors_ActivitySensorReading_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Windows_Devices_Sensors_ActivitySensorReading[] = L"Windows.Devices.Sensors.ActivitySensorReading";
#endif
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Class Windows.Devices.Sensors.ActivitySensorReadingChangeReport
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Class implements the following interfaces:
 *    Windows.Devices.Sensors.IActivitySensorReadingChangeReport ** Default Interface **
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#ifndef RUNTIMECLASS_Windows_Devices_Sensors_ActivitySensorReadingChangeReport_DEFINED
#define RUNTIMECLASS_Windows_Devices_Sensors_ActivitySensorReadingChangeReport_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Windows_Devices_Sensors_ActivitySensorReadingChangeReport[] = L"Windows.Devices.Sensors.ActivitySensorReadingChangeReport";
#endif
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Class Windows.Devices.Sensors.ActivitySensorReadingChangedEventArgs
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Class implements the following interfaces:
 *    Windows.Devices.Sensors.IActivitySensorReadingChangedEventArgs ** Default Interface **
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#ifndef RUNTIMECLASS_Windows_Devices_Sensors_ActivitySensorReadingChangedEventArgs_DEFINED
#define RUNTIMECLASS_Windows_Devices_Sensors_ActivitySensorReadingChangedEventArgs_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Windows_Devices_Sensors_ActivitySensorReadingChangedEventArgs[] = L"Windows.Devices.Sensors.ActivitySensorReadingChangedEventArgs";
#endif
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Class Windows.Devices.Sensors.ActivitySensorTriggerDetails
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Class implements the following interfaces:
 *    Windows.Devices.Sensors.IActivitySensorTriggerDetails ** Default Interface **
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#ifndef RUNTIMECLASS_Windows_Devices_Sensors_ActivitySensorTriggerDetails_DEFINED
#define RUNTIMECLASS_Windows_Devices_Sensors_ActivitySensorTriggerDetails_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Windows_Devices_Sensors_ActivitySensorTriggerDetails[] = L"Windows.Devices.Sensors.ActivitySensorTriggerDetails";
#endif
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Class Windows.Devices.Sensors.Altimeter
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * RuntimeClass contains static methods.
 *   Static Methods exist on the Windows.Devices.Sensors.IAltimeterStatics interface starting with version 1.0 of the Windows.Foundation.UniversalApiContract API contract
 *
 * Class implements the following interfaces:
 *    Windows.Devices.Sensors.IAltimeter ** Default Interface **
 *    Windows.Devices.Sensors.IAltimeter2
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#ifndef RUNTIMECLASS_Windows_Devices_Sensors_Altimeter_DEFINED
#define RUNTIMECLASS_Windows_Devices_Sensors_Altimeter_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Windows_Devices_Sensors_Altimeter[] = L"Windows.Devices.Sensors.Altimeter";
#endif
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Class Windows.Devices.Sensors.AltimeterReading
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Class implements the following interfaces:
 *    Windows.Devices.Sensors.IAltimeterReading ** Default Interface **
 *    Windows.Devices.Sensors.IAltimeterReading2
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#ifndef RUNTIMECLASS_Windows_Devices_Sensors_AltimeterReading_DEFINED
#define RUNTIMECLASS_Windows_Devices_Sensors_AltimeterReading_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Windows_Devices_Sensors_AltimeterReading[] = L"Windows.Devices.Sensors.AltimeterReading";
#endif
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Class Windows.Devices.Sensors.AltimeterReadingChangedEventArgs
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Class implements the following interfaces:
 *    Windows.Devices.Sensors.IAltimeterReadingChangedEventArgs ** Default Interface **
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#ifndef RUNTIMECLASS_Windows_Devices_Sensors_AltimeterReadingChangedEventArgs_DEFINED
#define RUNTIMECLASS_Windows_Devices_Sensors_AltimeterReadingChangedEventArgs_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Windows_Devices_Sensors_AltimeterReadingChangedEventArgs[] = L"Windows.Devices.Sensors.AltimeterReadingChangedEventArgs";
#endif
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Class Windows.Devices.Sensors.Barometer
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * RuntimeClass contains static methods.
 *   Static Methods exist on the Windows.Devices.Sensors.IBarometerStatics interface starting with version 1.0 of the Windows.Foundation.UniversalApiContract API contract
 *   Static Methods exist on the Windows.Devices.Sensors.IBarometerStatics2 interface starting with version 5.0 of the Windows.Foundation.UniversalApiContract API contract
 *
 * Class implements the following interfaces:
 *    Windows.Devices.Sensors.IBarometer ** Default Interface **
 *    Windows.Devices.Sensors.IBarometer2
 *    Windows.Devices.Sensors.IBarometer3
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#ifndef RUNTIMECLASS_Windows_Devices_Sensors_Barometer_DEFINED
#define RUNTIMECLASS_Windows_Devices_Sensors_Barometer_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Windows_Devices_Sensors_Barometer[] = L"Windows.Devices.Sensors.Barometer";
#endif
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Class Windows.Devices.Sensors.BarometerDataThreshold
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 10.0
 *
 * Class implements the following interfaces:
 *    Windows.Devices.Sensors.IBarometerDataThreshold ** Default Interface **
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0xa0000
#ifndef RUNTIMECLASS_Windows_Devices_Sensors_BarometerDataThreshold_DEFINED
#define RUNTIMECLASS_Windows_Devices_Sensors_BarometerDataThreshold_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Windows_Devices_Sensors_BarometerDataThreshold[] = L"Windows.Devices.Sensors.BarometerDataThreshold";
#endif
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0xa0000

/*
 *
 * Class Windows.Devices.Sensors.BarometerReading
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Class implements the following interfaces:
 *    Windows.Devices.Sensors.IBarometerReading ** Default Interface **
 *    Windows.Devices.Sensors.IBarometerReading2
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#ifndef RUNTIMECLASS_Windows_Devices_Sensors_BarometerReading_DEFINED
#define RUNTIMECLASS_Windows_Devices_Sensors_BarometerReading_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Windows_Devices_Sensors_BarometerReading[] = L"Windows.Devices.Sensors.BarometerReading";
#endif
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Class Windows.Devices.Sensors.BarometerReadingChangedEventArgs
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Class implements the following interfaces:
 *    Windows.Devices.Sensors.IBarometerReadingChangedEventArgs ** Default Interface **
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#ifndef RUNTIMECLASS_Windows_Devices_Sensors_BarometerReadingChangedEventArgs_DEFINED
#define RUNTIMECLASS_Windows_Devices_Sensors_BarometerReadingChangedEventArgs_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Windows_Devices_Sensors_BarometerReadingChangedEventArgs[] = L"Windows.Devices.Sensors.BarometerReadingChangedEventArgs";
#endif
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Class Windows.Devices.Sensors.Compass
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * RuntimeClass contains static methods.
 *   Static Methods exist on the Windows.Devices.Sensors.ICompassStatics interface starting with version 1.0 of the Windows.Foundation.UniversalApiContract API contract
 *   Static Methods exist on the Windows.Devices.Sensors.ICompassStatics2 interface starting with version 5.0 of the Windows.Foundation.UniversalApiContract API contract
 *
 * Class implements the following interfaces:
 *    Windows.Devices.Sensors.ICompass ** Default Interface **
 *    Windows.Devices.Sensors.ICompassDeviceId
 *    Windows.Devices.Sensors.ICompass2
 *    Windows.Devices.Sensors.ICompass3
 *    Windows.Devices.Sensors.ICompass4
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#ifndef RUNTIMECLASS_Windows_Devices_Sensors_Compass_DEFINED
#define RUNTIMECLASS_Windows_Devices_Sensors_Compass_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Windows_Devices_Sensors_Compass[] = L"Windows.Devices.Sensors.Compass";
#endif
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Class Windows.Devices.Sensors.CompassDataThreshold
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 10.0
 *
 * Class implements the following interfaces:
 *    Windows.Devices.Sensors.ICompassDataThreshold ** Default Interface **
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0xa0000
#ifndef RUNTIMECLASS_Windows_Devices_Sensors_CompassDataThreshold_DEFINED
#define RUNTIMECLASS_Windows_Devices_Sensors_CompassDataThreshold_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Windows_Devices_Sensors_CompassDataThreshold[] = L"Windows.Devices.Sensors.CompassDataThreshold";
#endif
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0xa0000

/*
 *
 * Class Windows.Devices.Sensors.CompassReading
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Class implements the following interfaces:
 *    Windows.Devices.Sensors.ICompassReading ** Default Interface **
 *    Windows.Devices.Sensors.ICompassReadingHeadingAccuracy
 *    Windows.Devices.Sensors.ICompassReading2
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#ifndef RUNTIMECLASS_Windows_Devices_Sensors_CompassReading_DEFINED
#define RUNTIMECLASS_Windows_Devices_Sensors_CompassReading_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Windows_Devices_Sensors_CompassReading[] = L"Windows.Devices.Sensors.CompassReading";
#endif
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Class Windows.Devices.Sensors.CompassReadingChangedEventArgs
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Class implements the following interfaces:
 *    Windows.Devices.Sensors.ICompassReadingChangedEventArgs ** Default Interface **
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#ifndef RUNTIMECLASS_Windows_Devices_Sensors_CompassReadingChangedEventArgs_DEFINED
#define RUNTIMECLASS_Windows_Devices_Sensors_CompassReadingChangedEventArgs_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Windows_Devices_Sensors_CompassReadingChangedEventArgs[] = L"Windows.Devices.Sensors.CompassReadingChangedEventArgs";
#endif
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Class Windows.Devices.Sensors.Gyrometer
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * RuntimeClass contains static methods.
 *   Static Methods exist on the Windows.Devices.Sensors.IGyrometerStatics interface starting with version 1.0 of the Windows.Foundation.UniversalApiContract API contract
 *   Static Methods exist on the Windows.Devices.Sensors.IGyrometerStatics2 interface starting with version 5.0 of the Windows.Foundation.UniversalApiContract API contract
 *
 * Class implements the following interfaces:
 *    Windows.Devices.Sensors.IGyrometer ** Default Interface **
 *    Windows.Devices.Sensors.IGyrometerDeviceId
 *    Windows.Devices.Sensors.IGyrometer2
 *    Windows.Devices.Sensors.IGyrometer3
 *    Windows.Devices.Sensors.IGyrometer4
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#ifndef RUNTIMECLASS_Windows_Devices_Sensors_Gyrometer_DEFINED
#define RUNTIMECLASS_Windows_Devices_Sensors_Gyrometer_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Windows_Devices_Sensors_Gyrometer[] = L"Windows.Devices.Sensors.Gyrometer";
#endif
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Class Windows.Devices.Sensors.GyrometerDataThreshold
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 10.0
 *
 * Class implements the following interfaces:
 *    Windows.Devices.Sensors.IGyrometerDataThreshold ** Default Interface **
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0xa0000
#ifndef RUNTIMECLASS_Windows_Devices_Sensors_GyrometerDataThreshold_DEFINED
#define RUNTIMECLASS_Windows_Devices_Sensors_GyrometerDataThreshold_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Windows_Devices_Sensors_GyrometerDataThreshold[] = L"Windows.Devices.Sensors.GyrometerDataThreshold";
#endif
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0xa0000

/*
 *
 * Class Windows.Devices.Sensors.GyrometerReading
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Class implements the following interfaces:
 *    Windows.Devices.Sensors.IGyrometerReading ** Default Interface **
 *    Windows.Devices.Sensors.IGyrometerReading2
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#ifndef RUNTIMECLASS_Windows_Devices_Sensors_GyrometerReading_DEFINED
#define RUNTIMECLASS_Windows_Devices_Sensors_GyrometerReading_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Windows_Devices_Sensors_GyrometerReading[] = L"Windows.Devices.Sensors.GyrometerReading";
#endif
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Class Windows.Devices.Sensors.GyrometerReadingChangedEventArgs
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Class implements the following interfaces:
 *    Windows.Devices.Sensors.IGyrometerReadingChangedEventArgs ** Default Interface **
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#ifndef RUNTIMECLASS_Windows_Devices_Sensors_GyrometerReadingChangedEventArgs_DEFINED
#define RUNTIMECLASS_Windows_Devices_Sensors_GyrometerReadingChangedEventArgs_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Windows_Devices_Sensors_GyrometerReadingChangedEventArgs[] = L"Windows.Devices.Sensors.GyrometerReadingChangedEventArgs";
#endif
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Class Windows.Devices.Sensors.HingeAngleReading
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 7.0
 *
 * Class implements the following interfaces:
 *    Windows.Devices.Sensors.IHingeAngleReading ** Default Interface **
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x70000
#ifndef RUNTIMECLASS_Windows_Devices_Sensors_HingeAngleReading_DEFINED
#define RUNTIMECLASS_Windows_Devices_Sensors_HingeAngleReading_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Windows_Devices_Sensors_HingeAngleReading[] = L"Windows.Devices.Sensors.HingeAngleReading";
#endif
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x70000

/*
 *
 * Class Windows.Devices.Sensors.HingeAngleSensor
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 7.0
 *
 * RuntimeClass contains static methods.
 *   Static Methods exist on the Windows.Devices.Sensors.IHingeAngleSensorStatics interface starting with version 7.0 of the Windows.Foundation.UniversalApiContract API contract
 *
 * Class implements the following interfaces:
 *    Windows.Devices.Sensors.IHingeAngleSensor ** Default Interface **
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x70000
#ifndef RUNTIMECLASS_Windows_Devices_Sensors_HingeAngleSensor_DEFINED
#define RUNTIMECLASS_Windows_Devices_Sensors_HingeAngleSensor_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Windows_Devices_Sensors_HingeAngleSensor[] = L"Windows.Devices.Sensors.HingeAngleSensor";
#endif
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x70000

/*
 *
 * Class Windows.Devices.Sensors.HingeAngleSensorReadingChangedEventArgs
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 7.0
 *
 * Class implements the following interfaces:
 *    Windows.Devices.Sensors.IHingeAngleSensorReadingChangedEventArgs ** Default Interface **
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x70000
#ifndef RUNTIMECLASS_Windows_Devices_Sensors_HingeAngleSensorReadingChangedEventArgs_DEFINED
#define RUNTIMECLASS_Windows_Devices_Sensors_HingeAngleSensorReadingChangedEventArgs_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Windows_Devices_Sensors_HingeAngleSensorReadingChangedEventArgs[] = L"Windows.Devices.Sensors.HingeAngleSensorReadingChangedEventArgs";
#endif
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x70000

/*
 *
 * Class Windows.Devices.Sensors.Inclinometer
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * RuntimeClass contains static methods.
 *   Static Methods exist on the Windows.Devices.Sensors.IInclinometerStatics4 interface starting with version 5.0 of the Windows.Foundation.UniversalApiContract API contract
 *   Static Methods exist on the Windows.Devices.Sensors.IInclinometerStatics interface starting with version 1.0 of the Windows.Foundation.UniversalApiContract API contract
 *   Static Methods exist on the Windows.Devices.Sensors.IInclinometerStatics2 interface starting with version 1.0 of the Windows.Foundation.UniversalApiContract API contract
 *   Static Methods exist on the Windows.Devices.Sensors.IInclinometerStatics3 interface starting with version 3.0 of the Windows.Foundation.UniversalApiContract API contract
 *
 * Class implements the following interfaces:
 *    Windows.Devices.Sensors.IInclinometer ** Default Interface **
 *    Windows.Devices.Sensors.IInclinometerDeviceId
 *    Windows.Devices.Sensors.IInclinometer2
 *    Windows.Devices.Sensors.IInclinometer3
 *    Windows.Devices.Sensors.IInclinometer4
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#ifndef RUNTIMECLASS_Windows_Devices_Sensors_Inclinometer_DEFINED
#define RUNTIMECLASS_Windows_Devices_Sensors_Inclinometer_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Windows_Devices_Sensors_Inclinometer[] = L"Windows.Devices.Sensors.Inclinometer";
#endif
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Class Windows.Devices.Sensors.InclinometerDataThreshold
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 10.0
 *
 * Class implements the following interfaces:
 *    Windows.Devices.Sensors.IInclinometerDataThreshold ** Default Interface **
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0xa0000
#ifndef RUNTIMECLASS_Windows_Devices_Sensors_InclinometerDataThreshold_DEFINED
#define RUNTIMECLASS_Windows_Devices_Sensors_InclinometerDataThreshold_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Windows_Devices_Sensors_InclinometerDataThreshold[] = L"Windows.Devices.Sensors.InclinometerDataThreshold";
#endif
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0xa0000

/*
 *
 * Class Windows.Devices.Sensors.InclinometerReading
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Class implements the following interfaces:
 *    Windows.Devices.Sensors.IInclinometerReading ** Default Interface **
 *    Windows.Devices.Sensors.IInclinometerReadingYawAccuracy
 *    Windows.Devices.Sensors.IInclinometerReading2
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#ifndef RUNTIMECLASS_Windows_Devices_Sensors_InclinometerReading_DEFINED
#define RUNTIMECLASS_Windows_Devices_Sensors_InclinometerReading_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Windows_Devices_Sensors_InclinometerReading[] = L"Windows.Devices.Sensors.InclinometerReading";
#endif
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Class Windows.Devices.Sensors.InclinometerReadingChangedEventArgs
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Class implements the following interfaces:
 *    Windows.Devices.Sensors.IInclinometerReadingChangedEventArgs ** Default Interface **
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#ifndef RUNTIMECLASS_Windows_Devices_Sensors_InclinometerReadingChangedEventArgs_DEFINED
#define RUNTIMECLASS_Windows_Devices_Sensors_InclinometerReadingChangedEventArgs_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Windows_Devices_Sensors_InclinometerReadingChangedEventArgs[] = L"Windows.Devices.Sensors.InclinometerReadingChangedEventArgs";
#endif
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Class Windows.Devices.Sensors.LightSensor
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * RuntimeClass contains static methods.
 *   Static Methods exist on the Windows.Devices.Sensors.ILightSensorStatics2 interface starting with version 5.0 of the Windows.Foundation.UniversalApiContract API contract
 *   Static Methods exist on the Windows.Devices.Sensors.ILightSensorStatics interface starting with version 1.0 of the Windows.Foundation.UniversalApiContract API contract
 *
 * Class implements the following interfaces:
 *    Windows.Devices.Sensors.ILightSensor ** Default Interface **
 *    Windows.Devices.Sensors.ILightSensorDeviceId
 *    Windows.Devices.Sensors.ILightSensor2
 *    Windows.Devices.Sensors.ILightSensor3
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#ifndef RUNTIMECLASS_Windows_Devices_Sensors_LightSensor_DEFINED
#define RUNTIMECLASS_Windows_Devices_Sensors_LightSensor_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Windows_Devices_Sensors_LightSensor[] = L"Windows.Devices.Sensors.LightSensor";
#endif
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Class Windows.Devices.Sensors.LightSensorDataThreshold
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 10.0
 *
 * Class implements the following interfaces:
 *    Windows.Devices.Sensors.ILightSensorDataThreshold ** Default Interface **
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0xa0000
#ifndef RUNTIMECLASS_Windows_Devices_Sensors_LightSensorDataThreshold_DEFINED
#define RUNTIMECLASS_Windows_Devices_Sensors_LightSensorDataThreshold_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Windows_Devices_Sensors_LightSensorDataThreshold[] = L"Windows.Devices.Sensors.LightSensorDataThreshold";
#endif
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0xa0000

/*
 *
 * Class Windows.Devices.Sensors.LightSensorReading
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Class implements the following interfaces:
 *    Windows.Devices.Sensors.ILightSensorReading ** Default Interface **
 *    Windows.Devices.Sensors.ILightSensorReading2
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#ifndef RUNTIMECLASS_Windows_Devices_Sensors_LightSensorReading_DEFINED
#define RUNTIMECLASS_Windows_Devices_Sensors_LightSensorReading_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Windows_Devices_Sensors_LightSensorReading[] = L"Windows.Devices.Sensors.LightSensorReading";
#endif
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Class Windows.Devices.Sensors.LightSensorReadingChangedEventArgs
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Class implements the following interfaces:
 *    Windows.Devices.Sensors.ILightSensorReadingChangedEventArgs ** Default Interface **
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#ifndef RUNTIMECLASS_Windows_Devices_Sensors_LightSensorReadingChangedEventArgs_DEFINED
#define RUNTIMECLASS_Windows_Devices_Sensors_LightSensorReadingChangedEventArgs_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Windows_Devices_Sensors_LightSensorReadingChangedEventArgs[] = L"Windows.Devices.Sensors.LightSensorReadingChangedEventArgs";
#endif
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Class Windows.Devices.Sensors.Magnetometer
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * RuntimeClass contains static methods.
 *   Static Methods exist on the Windows.Devices.Sensors.IMagnetometerStatics interface starting with version 1.0 of the Windows.Foundation.UniversalApiContract API contract
 *   Static Methods exist on the Windows.Devices.Sensors.IMagnetometerStatics2 interface starting with version 5.0 of the Windows.Foundation.UniversalApiContract API contract
 *
 * Class implements the following interfaces:
 *    Windows.Devices.Sensors.IMagnetometer ** Default Interface **
 *    Windows.Devices.Sensors.IMagnetometerDeviceId
 *    Windows.Devices.Sensors.IMagnetometer2
 *    Windows.Devices.Sensors.IMagnetometer3
 *    Windows.Devices.Sensors.IMagnetometer4
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#ifndef RUNTIMECLASS_Windows_Devices_Sensors_Magnetometer_DEFINED
#define RUNTIMECLASS_Windows_Devices_Sensors_Magnetometer_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Windows_Devices_Sensors_Magnetometer[] = L"Windows.Devices.Sensors.Magnetometer";
#endif
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Class Windows.Devices.Sensors.MagnetometerDataThreshold
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 10.0
 *
 * Class implements the following interfaces:
 *    Windows.Devices.Sensors.IMagnetometerDataThreshold ** Default Interface **
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0xa0000
#ifndef RUNTIMECLASS_Windows_Devices_Sensors_MagnetometerDataThreshold_DEFINED
#define RUNTIMECLASS_Windows_Devices_Sensors_MagnetometerDataThreshold_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Windows_Devices_Sensors_MagnetometerDataThreshold[] = L"Windows.Devices.Sensors.MagnetometerDataThreshold";
#endif
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0xa0000

/*
 *
 * Class Windows.Devices.Sensors.MagnetometerReading
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Class implements the following interfaces:
 *    Windows.Devices.Sensors.IMagnetometerReading ** Default Interface **
 *    Windows.Devices.Sensors.IMagnetometerReading2
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#ifndef RUNTIMECLASS_Windows_Devices_Sensors_MagnetometerReading_DEFINED
#define RUNTIMECLASS_Windows_Devices_Sensors_MagnetometerReading_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Windows_Devices_Sensors_MagnetometerReading[] = L"Windows.Devices.Sensors.MagnetometerReading";
#endif
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Class Windows.Devices.Sensors.MagnetometerReadingChangedEventArgs
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Class implements the following interfaces:
 *    Windows.Devices.Sensors.IMagnetometerReadingChangedEventArgs ** Default Interface **
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#ifndef RUNTIMECLASS_Windows_Devices_Sensors_MagnetometerReadingChangedEventArgs_DEFINED
#define RUNTIMECLASS_Windows_Devices_Sensors_MagnetometerReadingChangedEventArgs_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Windows_Devices_Sensors_MagnetometerReadingChangedEventArgs[] = L"Windows.Devices.Sensors.MagnetometerReadingChangedEventArgs";
#endif
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Class Windows.Devices.Sensors.OrientationSensor
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * RuntimeClass contains static methods.
 *   Static Methods exist on the Windows.Devices.Sensors.IOrientationSensorStatics4 interface starting with version 5.0 of the Windows.Foundation.UniversalApiContract API contract
 *   Static Methods exist on the Windows.Devices.Sensors.IOrientationSensorStatics3 interface starting with version 3.0 of the Windows.Foundation.UniversalApiContract API contract
 *   Static Methods exist on the Windows.Devices.Sensors.IOrientationSensorStatics2 interface starting with version 1.0 of the Windows.Foundation.UniversalApiContract API contract
 *   Static Methods exist on the Windows.Devices.Sensors.IOrientationSensorStatics interface starting with version 1.0 of the Windows.Foundation.UniversalApiContract API contract
 *
 * Class implements the following interfaces:
 *    Windows.Devices.Sensors.IOrientationSensor ** Default Interface **
 *    Windows.Devices.Sensors.IOrientationSensorDeviceId
 *    Windows.Devices.Sensors.IOrientationSensor2
 *    Windows.Devices.Sensors.IOrientationSensor3
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#ifndef RUNTIMECLASS_Windows_Devices_Sensors_OrientationSensor_DEFINED
#define RUNTIMECLASS_Windows_Devices_Sensors_OrientationSensor_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Windows_Devices_Sensors_OrientationSensor[] = L"Windows.Devices.Sensors.OrientationSensor";
#endif
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Class Windows.Devices.Sensors.OrientationSensorReading
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Class implements the following interfaces:
 *    Windows.Devices.Sensors.IOrientationSensorReading ** Default Interface **
 *    Windows.Devices.Sensors.IOrientationSensorReadingYawAccuracy
 *    Windows.Devices.Sensors.IOrientationSensorReading2
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#ifndef RUNTIMECLASS_Windows_Devices_Sensors_OrientationSensorReading_DEFINED
#define RUNTIMECLASS_Windows_Devices_Sensors_OrientationSensorReading_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Windows_Devices_Sensors_OrientationSensorReading[] = L"Windows.Devices.Sensors.OrientationSensorReading";
#endif
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Class Windows.Devices.Sensors.OrientationSensorReadingChangedEventArgs
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Class implements the following interfaces:
 *    Windows.Devices.Sensors.IOrientationSensorReadingChangedEventArgs ** Default Interface **
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#ifndef RUNTIMECLASS_Windows_Devices_Sensors_OrientationSensorReadingChangedEventArgs_DEFINED
#define RUNTIMECLASS_Windows_Devices_Sensors_OrientationSensorReadingChangedEventArgs_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Windows_Devices_Sensors_OrientationSensorReadingChangedEventArgs[] = L"Windows.Devices.Sensors.OrientationSensorReadingChangedEventArgs";
#endif
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Class Windows.Devices.Sensors.Pedometer
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * RuntimeClass contains static methods.
 *   Static Methods exist on the Windows.Devices.Sensors.IPedometerStatics interface starting with version 1.0 of the Windows.Foundation.UniversalApiContract API contract
 *   Static Methods exist on the Windows.Devices.Sensors.IPedometerStatics2 interface starting with version 2.0 of the Windows.Foundation.UniversalApiContract API contract
 *
 * Class implements the following interfaces:
 *    Windows.Devices.Sensors.IPedometer ** Default Interface **
 *    Windows.Devices.Sensors.IPedometer2
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#ifndef RUNTIMECLASS_Windows_Devices_Sensors_Pedometer_DEFINED
#define RUNTIMECLASS_Windows_Devices_Sensors_Pedometer_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Windows_Devices_Sensors_Pedometer[] = L"Windows.Devices.Sensors.Pedometer";
#endif
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Class Windows.Devices.Sensors.PedometerDataThreshold
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 2.0
 *
 * RuntimeClass can be activated.
 *   Type can be activated via the Windows.Devices.Sensors.IPedometerDataThresholdFactory interface starting with version 2.0 of the Windows.Foundation.UniversalApiContract API contract
 *
 * Class implements the following interfaces:
 *    Windows.Devices.Sensors.ISensorDataThreshold ** Default Interface **
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x20000
#ifndef RUNTIMECLASS_Windows_Devices_Sensors_PedometerDataThreshold_DEFINED
#define RUNTIMECLASS_Windows_Devices_Sensors_PedometerDataThreshold_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Windows_Devices_Sensors_PedometerDataThreshold[] = L"Windows.Devices.Sensors.PedometerDataThreshold";
#endif
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x20000

/*
 *
 * Class Windows.Devices.Sensors.PedometerReading
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Class implements the following interfaces:
 *    Windows.Devices.Sensors.IPedometerReading ** Default Interface **
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#ifndef RUNTIMECLASS_Windows_Devices_Sensors_PedometerReading_DEFINED
#define RUNTIMECLASS_Windows_Devices_Sensors_PedometerReading_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Windows_Devices_Sensors_PedometerReading[] = L"Windows.Devices.Sensors.PedometerReading";
#endif
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Class Windows.Devices.Sensors.PedometerReadingChangedEventArgs
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Class implements the following interfaces:
 *    Windows.Devices.Sensors.IPedometerReadingChangedEventArgs ** Default Interface **
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#ifndef RUNTIMECLASS_Windows_Devices_Sensors_PedometerReadingChangedEventArgs_DEFINED
#define RUNTIMECLASS_Windows_Devices_Sensors_PedometerReadingChangedEventArgs_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Windows_Devices_Sensors_PedometerReadingChangedEventArgs[] = L"Windows.Devices.Sensors.PedometerReadingChangedEventArgs";
#endif
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Class Windows.Devices.Sensors.ProximitySensor
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * RuntimeClass contains static methods.
 *   Static Methods exist on the Windows.Devices.Sensors.IProximitySensorStatics interface starting with version 1.0 of the Windows.Foundation.UniversalApiContract API contract
 *   Static Methods exist on the Windows.Devices.Sensors.IProximitySensorStatics2 interface starting with version 2.0 of the Windows.Foundation.UniversalApiContract API contract
 *
 * Class implements the following interfaces:
 *    Windows.Devices.Sensors.IProximitySensor ** Default Interface **
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#ifndef RUNTIMECLASS_Windows_Devices_Sensors_ProximitySensor_DEFINED
#define RUNTIMECLASS_Windows_Devices_Sensors_ProximitySensor_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Windows_Devices_Sensors_ProximitySensor[] = L"Windows.Devices.Sensors.ProximitySensor";
#endif
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Class Windows.Devices.Sensors.ProximitySensorDataThreshold
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 2.0
 *
 * RuntimeClass can be activated.
 *   Type can be activated via the Windows.Devices.Sensors.IProximitySensorDataThresholdFactory interface starting with version 2.0 of the Windows.Foundation.UniversalApiContract API contract
 *
 * Class implements the following interfaces:
 *    Windows.Devices.Sensors.ISensorDataThreshold ** Default Interface **
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x20000
#ifndef RUNTIMECLASS_Windows_Devices_Sensors_ProximitySensorDataThreshold_DEFINED
#define RUNTIMECLASS_Windows_Devices_Sensors_ProximitySensorDataThreshold_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Windows_Devices_Sensors_ProximitySensorDataThreshold[] = L"Windows.Devices.Sensors.ProximitySensorDataThreshold";
#endif
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x20000

/*
 *
 * Class Windows.Devices.Sensors.ProximitySensorDisplayOnOffController
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Class implements the following interfaces:
 *    Windows.Foundation.IClosable ** Default Interface **
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#ifndef RUNTIMECLASS_Windows_Devices_Sensors_ProximitySensorDisplayOnOffController_DEFINED
#define RUNTIMECLASS_Windows_Devices_Sensors_ProximitySensorDisplayOnOffController_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Windows_Devices_Sensors_ProximitySensorDisplayOnOffController[] = L"Windows.Devices.Sensors.ProximitySensorDisplayOnOffController";
#endif
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Class Windows.Devices.Sensors.ProximitySensorReading
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Class implements the following interfaces:
 *    Windows.Devices.Sensors.IProximitySensorReading ** Default Interface **
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#ifndef RUNTIMECLASS_Windows_Devices_Sensors_ProximitySensorReading_DEFINED
#define RUNTIMECLASS_Windows_Devices_Sensors_ProximitySensorReading_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Windows_Devices_Sensors_ProximitySensorReading[] = L"Windows.Devices.Sensors.ProximitySensorReading";
#endif
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Class Windows.Devices.Sensors.ProximitySensorReadingChangedEventArgs
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Class implements the following interfaces:
 *    Windows.Devices.Sensors.IProximitySensorReadingChangedEventArgs ** Default Interface **
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#ifndef RUNTIMECLASS_Windows_Devices_Sensors_ProximitySensorReadingChangedEventArgs_DEFINED
#define RUNTIMECLASS_Windows_Devices_Sensors_ProximitySensorReadingChangedEventArgs_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Windows_Devices_Sensors_ProximitySensorReadingChangedEventArgs[] = L"Windows.Devices.Sensors.ProximitySensorReadingChangedEventArgs";
#endif
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Class Windows.Devices.Sensors.SensorDataThresholdTriggerDetails
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 2.0
 *
 * Class implements the following interfaces:
 *    Windows.Devices.Sensors.ISensorDataThresholdTriggerDetails ** Default Interface **
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x20000
#ifndef RUNTIMECLASS_Windows_Devices_Sensors_SensorDataThresholdTriggerDetails_DEFINED
#define RUNTIMECLASS_Windows_Devices_Sensors_SensorDataThresholdTriggerDetails_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Windows_Devices_Sensors_SensorDataThresholdTriggerDetails[] = L"Windows.Devices.Sensors.SensorDataThresholdTriggerDetails";
#endif
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x20000

/*
 *
 * Class Windows.Devices.Sensors.SensorQuaternion
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Class implements the following interfaces:
 *    Windows.Devices.Sensors.ISensorQuaternion ** Default Interface **
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#ifndef RUNTIMECLASS_Windows_Devices_Sensors_SensorQuaternion_DEFINED
#define RUNTIMECLASS_Windows_Devices_Sensors_SensorQuaternion_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Windows_Devices_Sensors_SensorQuaternion[] = L"Windows.Devices.Sensors.SensorQuaternion";
#endif
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Class Windows.Devices.Sensors.SensorRotationMatrix
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Class implements the following interfaces:
 *    Windows.Devices.Sensors.ISensorRotationMatrix ** Default Interface **
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#ifndef RUNTIMECLASS_Windows_Devices_Sensors_SensorRotationMatrix_DEFINED
#define RUNTIMECLASS_Windows_Devices_Sensors_SensorRotationMatrix_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Windows_Devices_Sensors_SensorRotationMatrix[] = L"Windows.Devices.Sensors.SensorRotationMatrix";
#endif
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Class Windows.Devices.Sensors.SimpleOrientationSensor
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * RuntimeClass contains static methods.
 *   Static Methods exist on the Windows.Devices.Sensors.ISimpleOrientationSensorStatics2 interface starting with version 7.0 of the Windows.Foundation.UniversalApiContract API contract
 *   Static Methods exist on the Windows.Devices.Sensors.ISimpleOrientationSensorStatics interface starting with version 1.0 of the Windows.Foundation.UniversalApiContract API contract
 *
 * Class implements the following interfaces:
 *    Windows.Devices.Sensors.ISimpleOrientationSensor ** Default Interface **
 *    Windows.Devices.Sensors.ISimpleOrientationSensorDeviceId
 *    Windows.Devices.Sensors.ISimpleOrientationSensor2
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#ifndef RUNTIMECLASS_Windows_Devices_Sensors_SimpleOrientationSensor_DEFINED
#define RUNTIMECLASS_Windows_Devices_Sensors_SimpleOrientationSensor_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Windows_Devices_Sensors_SimpleOrientationSensor[] = L"Windows.Devices.Sensors.SimpleOrientationSensor";
#endif
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Class Windows.Devices.Sensors.SimpleOrientationSensorOrientationChangedEventArgs
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Class implements the following interfaces:
 *    Windows.Devices.Sensors.ISimpleOrientationSensorOrientationChangedEventArgs ** Default Interface **
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#ifndef RUNTIMECLASS_Windows_Devices_Sensors_SimpleOrientationSensorOrientationChangedEventArgs_DEFINED
#define RUNTIMECLASS_Windows_Devices_Sensors_SimpleOrientationSensorOrientationChangedEventArgs_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Windows_Devices_Sensors_SimpleOrientationSensorOrientationChangedEventArgs[] = L"Windows.Devices.Sensors.SimpleOrientationSensorOrientationChangedEventArgs";
#endif
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

#endif // defined(__cplusplus)
#pragma pop_macro("MIDL_CONST_ID")
// Restore the original value of the 'DEPRECATED' macro
#pragma pop_macro("DEPRECATED")

#ifdef __clang__
#pragma clang diagnostic pop // deprecated-declarations
#else
#pragma warning(pop)
#endif
#endif // __windows2Edevices2Esensors_p_h__

#endif // __windows2Edevices2Esensors_h__
