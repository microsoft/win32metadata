
#pragma warning( disable: 4049 )  /* more than 64k source lines */

/* verify that the <rpcndr.h> version is high enough to compile this file*/
#ifndef __REQUIRED_RPCNDR_H_VERSION__
#define __REQUIRED_RPCNDR_H_VERSION__ 500
#endif

/* verify that the <rpcsal.h> version is high enough to compile this file*/
#ifndef __REQUIRED_RPCSAL_H_VERSION__
#define __REQUIRED_RPCSAL_H_VERSION__ 100
#endif

#include <rpc.h>
#include <rpcndr.h>

#ifndef __RPCNDR_H_VERSION__
#error this stub requires an updated version of <rpcndr.h>
#endif /* __RPCNDR_H_VERSION__ */

#ifndef COM_NO_WINDOWS_H
#include <windows.h>
#include <ole2.h>
#endif /*COM_NO_WINDOWS_H*/
#ifndef __windows2Emedia2Ecore_h__
#define __windows2Emedia2Ecore_h__
#ifndef __windows2Emedia2Ecore_p_h__
#define __windows2Emedia2Ecore_p_h__


#pragma once

//
// Deprecated attribute support
//

#pragma push_macro("DEPRECATED")
#undef DEPRECATED

#if !defined(DISABLE_WINRT_DEPRECATION)
#if defined(__cplusplus)
#if __cplusplus >= 201402
#define DEPRECATED(x) [[deprecated(x)]]
#define DEPRECATEDENUMERATOR(x) [[deprecated(x)]]
#elif defined(_MSC_VER)
#if _MSC_VER >= 1900
#define DEPRECATED(x) [[deprecated(x)]]
#define DEPRECATEDENUMERATOR(x) [[deprecated(x)]]
#else
#define DEPRECATED(x) __declspec(deprecated(x))
#define DEPRECATEDENUMERATOR(x)
#endif // _MSC_VER >= 1900
#else // Not Standard C++ or MSVC, ignore the construct.
#define DEPRECATED(x)
#define DEPRECATEDENUMERATOR(x)
#endif  // C++ deprecation
#else // C - disable deprecation
#define DEPRECATED(x)
#define DEPRECATEDENUMERATOR(x)
#endif
#else // Deprecation is disabled
#define DEPRECATED(x)
#define DEPRECATEDENUMERATOR(x)
#endif  /* DEPRECATED */

// Disable Deprecation for this header, MIDL verifies that cross-type access is acceptable
#ifdef __clang__
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#else
#pragma warning(push)
#pragma warning(disable: 4996)
#endif

// Ensure that the setting of the /ns_prefix command line switch is consistent for all headers.
// If you get an error from the compiler indicating "warning C4005: 'CHECK_NS_PREFIX_STATE': macro redefinition", this
// indicates that you have included two different headers with different settings for the /ns_prefix MIDL command line switch
#if !defined(DISABLE_NS_PREFIX_CHECKS)
#define CHECK_NS_PREFIX_STATE "always"
#endif // !defined(DISABLE_NS_PREFIX_CHECKS)


#pragma push_macro("MIDL_CONST_ID")
#undef MIDL_CONST_ID
#define MIDL_CONST_ID const __declspec(selectany)


//  API Contract Inclusion Definitions
#if !defined(SPECIFIC_API_CONTRACT_DEFINITIONS)
#if !defined(WINDOWS_FOUNDATION_FOUNDATIONCONTRACT_VERSION)
#define WINDOWS_FOUNDATION_FOUNDATIONCONTRACT_VERSION 0x40000
#endif // defined(WINDOWS_FOUNDATION_FOUNDATIONCONTRACT_VERSION)

#if !defined(WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION)
#define WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION 0xa0000
#endif // defined(WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION)

#if !defined(WINDOWS_MEDIA_MEDIACONTROLCONTRACT_VERSION)
#define WINDOWS_MEDIA_MEDIACONTROLCONTRACT_VERSION 0x10000
#endif // defined(WINDOWS_MEDIA_MEDIACONTROLCONTRACT_VERSION)

#if !defined(WINDOWS_MEDIA_CAPTURE_APPBROADCASTCONTRACT_VERSION)
#define WINDOWS_MEDIA_CAPTURE_APPBROADCASTCONTRACT_VERSION 0x20000
#endif // defined(WINDOWS_MEDIA_CAPTURE_APPBROADCASTCONTRACT_VERSION)

#if !defined(WINDOWS_MEDIA_CAPTURE_APPCAPTURECONTRACT_VERSION)
#define WINDOWS_MEDIA_CAPTURE_APPCAPTURECONTRACT_VERSION 0x40000
#endif // defined(WINDOWS_MEDIA_CAPTURE_APPCAPTURECONTRACT_VERSION)

#if !defined(WINDOWS_MEDIA_CAPTURE_APPCAPTUREMETADATACONTRACT_VERSION)
#define WINDOWS_MEDIA_CAPTURE_APPCAPTUREMETADATACONTRACT_VERSION 0x10000
#endif // defined(WINDOWS_MEDIA_CAPTURE_APPCAPTUREMETADATACONTRACT_VERSION)

#if !defined(WINDOWS_MEDIA_CAPTURE_CAMERACAPTUREUICONTRACT_VERSION)
#define WINDOWS_MEDIA_CAPTURE_CAMERACAPTUREUICONTRACT_VERSION 0x10000
#endif // defined(WINDOWS_MEDIA_CAPTURE_CAMERACAPTUREUICONTRACT_VERSION)

#if !defined(WINDOWS_MEDIA_CAPTURE_GAMEBARCONTRACT_VERSION)
#define WINDOWS_MEDIA_CAPTURE_GAMEBARCONTRACT_VERSION 0x10000
#endif // defined(WINDOWS_MEDIA_CAPTURE_GAMEBARCONTRACT_VERSION)

#if !defined(WINDOWS_MEDIA_DEVICES_CALLCONTROLCONTRACT_VERSION)
#define WINDOWS_MEDIA_DEVICES_CALLCONTROLCONTRACT_VERSION 0x10000
#endif // defined(WINDOWS_MEDIA_DEVICES_CALLCONTROLCONTRACT_VERSION)

#if !defined(WINDOWS_MEDIA_PROTECTION_PROTECTIONRENEWALCONTRACT_VERSION)
#define WINDOWS_MEDIA_PROTECTION_PROTECTIONRENEWALCONTRACT_VERSION 0x10000
#endif // defined(WINDOWS_MEDIA_PROTECTION_PROTECTIONRENEWALCONTRACT_VERSION)

#endif // defined(SPECIFIC_API_CONTRACT_DEFINITIONS)


// Header files for imported files
#include "inspectable.h"
#include "AsyncInfo.h"
#include "EventToken.h"
#include "windowscontracts.h"
#include "Windows.Foundation.h"
#include "Windows.ApplicationModel.AppService.h"
#include "Windows.Graphics.DirectX.Direct3D11.h"
#include "Windows.Graphics.Imaging.h"
#include "Windows.Media.h"
#include "Windows.Media.Capture.h"
#include "Windows.Media.Capture.Frames.h"
#include "Windows.Media.Devices.h"
#include "Windows.Media.Devices.Core.h"
#include "Windows.Media.Effects.h"
#include "Windows.Media.FaceAnalysis.h"
#include "Windows.Media.MediaProperties.h"
#include "Windows.Media.Playback.h"
#include "Windows.Media.Protection.h"
#include "Windows.Media.Streaming.Adaptive.h"
#include "Windows.Networking.BackgroundTransfer.h"
#include "Windows.Storage.h"
#include "Windows.Storage.FileProperties.h"
#include "Windows.Storage.Streams.h"
#include "Windows.UI.h"
// Importing Collections header
#include <windows.foundation.collections.h>

#if defined(__cplusplus) && !defined(CINTERFACE)
/* Forward Declarations */
#ifndef ____x_ABI_CWindows_CMedia_CCore_CIAudioStreamDescriptor_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CCore_CIAudioStreamDescriptor_FWD_DEFINED__
namespace ABI {
    namespace Windows {
        namespace Media {
            namespace Core {
                interface IAudioStreamDescriptor;
            } /* Core */
        } /* Media */
    } /* Windows */
} /* ABI */
#define __x_ABI_CWindows_CMedia_CCore_CIAudioStreamDescriptor ABI::Windows::Media::Core::IAudioStreamDescriptor

#endif // ____x_ABI_CWindows_CMedia_CCore_CIAudioStreamDescriptor_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CCore_CIAudioStreamDescriptor2_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CCore_CIAudioStreamDescriptor2_FWD_DEFINED__
namespace ABI {
    namespace Windows {
        namespace Media {
            namespace Core {
                interface IAudioStreamDescriptor2;
            } /* Core */
        } /* Media */
    } /* Windows */
} /* ABI */
#define __x_ABI_CWindows_CMedia_CCore_CIAudioStreamDescriptor2 ABI::Windows::Media::Core::IAudioStreamDescriptor2

#endif // ____x_ABI_CWindows_CMedia_CCore_CIAudioStreamDescriptor2_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CCore_CIAudioStreamDescriptor3_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CCore_CIAudioStreamDescriptor3_FWD_DEFINED__
namespace ABI {
    namespace Windows {
        namespace Media {
            namespace Core {
                interface IAudioStreamDescriptor3;
            } /* Core */
        } /* Media */
    } /* Windows */
} /* ABI */
#define __x_ABI_CWindows_CMedia_CCore_CIAudioStreamDescriptor3 ABI::Windows::Media::Core::IAudioStreamDescriptor3

#endif // ____x_ABI_CWindows_CMedia_CCore_CIAudioStreamDescriptor3_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CCore_CIAudioStreamDescriptorFactory_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CCore_CIAudioStreamDescriptorFactory_FWD_DEFINED__
namespace ABI {
    namespace Windows {
        namespace Media {
            namespace Core {
                interface IAudioStreamDescriptorFactory;
            } /* Core */
        } /* Media */
    } /* Windows */
} /* ABI */
#define __x_ABI_CWindows_CMedia_CCore_CIAudioStreamDescriptorFactory ABI::Windows::Media::Core::IAudioStreamDescriptorFactory

#endif // ____x_ABI_CWindows_CMedia_CCore_CIAudioStreamDescriptorFactory_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CCore_CIAudioTrack_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CCore_CIAudioTrack_FWD_DEFINED__
namespace ABI {
    namespace Windows {
        namespace Media {
            namespace Core {
                interface IAudioTrack;
            } /* Core */
        } /* Media */
    } /* Windows */
} /* ABI */
#define __x_ABI_CWindows_CMedia_CCore_CIAudioTrack ABI::Windows::Media::Core::IAudioTrack

#endif // ____x_ABI_CWindows_CMedia_CCore_CIAudioTrack_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CCore_CIAudioTrackOpenFailedEventArgs_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CCore_CIAudioTrackOpenFailedEventArgs_FWD_DEFINED__
namespace ABI {
    namespace Windows {
        namespace Media {
            namespace Core {
                interface IAudioTrackOpenFailedEventArgs;
            } /* Core */
        } /* Media */
    } /* Windows */
} /* ABI */
#define __x_ABI_CWindows_CMedia_CCore_CIAudioTrackOpenFailedEventArgs ABI::Windows::Media::Core::IAudioTrackOpenFailedEventArgs

#endif // ____x_ABI_CWindows_CMedia_CCore_CIAudioTrackOpenFailedEventArgs_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CCore_CIAudioTrackSupportInfo_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CCore_CIAudioTrackSupportInfo_FWD_DEFINED__
namespace ABI {
    namespace Windows {
        namespace Media {
            namespace Core {
                interface IAudioTrackSupportInfo;
            } /* Core */
        } /* Media */
    } /* Windows */
} /* ABI */
#define __x_ABI_CWindows_CMedia_CCore_CIAudioTrackSupportInfo ABI::Windows::Media::Core::IAudioTrackSupportInfo

#endif // ____x_ABI_CWindows_CMedia_CCore_CIAudioTrackSupportInfo_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CCore_CIChapterCue_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CCore_CIChapterCue_FWD_DEFINED__
namespace ABI {
    namespace Windows {
        namespace Media {
            namespace Core {
                interface IChapterCue;
            } /* Core */
        } /* Media */
    } /* Windows */
} /* ABI */
#define __x_ABI_CWindows_CMedia_CCore_CIChapterCue ABI::Windows::Media::Core::IChapterCue

#endif // ____x_ABI_CWindows_CMedia_CCore_CIChapterCue_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CCore_CICodecInfo_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CCore_CICodecInfo_FWD_DEFINED__
namespace ABI {
    namespace Windows {
        namespace Media {
            namespace Core {
                interface ICodecInfo;
            } /* Core */
        } /* Media */
    } /* Windows */
} /* ABI */
#define __x_ABI_CWindows_CMedia_CCore_CICodecInfo ABI::Windows::Media::Core::ICodecInfo

#endif // ____x_ABI_CWindows_CMedia_CCore_CICodecInfo_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CCore_CICodecQuery_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CCore_CICodecQuery_FWD_DEFINED__
namespace ABI {
    namespace Windows {
        namespace Media {
            namespace Core {
                interface ICodecQuery;
            } /* Core */
        } /* Media */
    } /* Windows */
} /* ABI */
#define __x_ABI_CWindows_CMedia_CCore_CICodecQuery ABI::Windows::Media::Core::ICodecQuery

#endif // ____x_ABI_CWindows_CMedia_CCore_CICodecQuery_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CCore_CICodecSubtypesStatics_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CCore_CICodecSubtypesStatics_FWD_DEFINED__
namespace ABI {
    namespace Windows {
        namespace Media {
            namespace Core {
                interface ICodecSubtypesStatics;
            } /* Core */
        } /* Media */
    } /* Windows */
} /* ABI */
#define __x_ABI_CWindows_CMedia_CCore_CICodecSubtypesStatics ABI::Windows::Media::Core::ICodecSubtypesStatics

#endif // ____x_ABI_CWindows_CMedia_CCore_CICodecSubtypesStatics_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CCore_CIDataCue_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CCore_CIDataCue_FWD_DEFINED__
namespace ABI {
    namespace Windows {
        namespace Media {
            namespace Core {
                interface IDataCue;
            } /* Core */
        } /* Media */
    } /* Windows */
} /* ABI */
#define __x_ABI_CWindows_CMedia_CCore_CIDataCue ABI::Windows::Media::Core::IDataCue

#endif // ____x_ABI_CWindows_CMedia_CCore_CIDataCue_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CCore_CIDataCue2_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CCore_CIDataCue2_FWD_DEFINED__
namespace ABI {
    namespace Windows {
        namespace Media {
            namespace Core {
                interface IDataCue2;
            } /* Core */
        } /* Media */
    } /* Windows */
} /* ABI */
#define __x_ABI_CWindows_CMedia_CCore_CIDataCue2 ABI::Windows::Media::Core::IDataCue2

#endif // ____x_ABI_CWindows_CMedia_CCore_CIDataCue2_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CCore_CIFaceDetectedEventArgs_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CCore_CIFaceDetectedEventArgs_FWD_DEFINED__
namespace ABI {
    namespace Windows {
        namespace Media {
            namespace Core {
                interface IFaceDetectedEventArgs;
            } /* Core */
        } /* Media */
    } /* Windows */
} /* ABI */
#define __x_ABI_CWindows_CMedia_CCore_CIFaceDetectedEventArgs ABI::Windows::Media::Core::IFaceDetectedEventArgs

#endif // ____x_ABI_CWindows_CMedia_CCore_CIFaceDetectedEventArgs_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CCore_CIFaceDetectionEffect_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CCore_CIFaceDetectionEffect_FWD_DEFINED__
namespace ABI {
    namespace Windows {
        namespace Media {
            namespace Core {
                interface IFaceDetectionEffect;
            } /* Core */
        } /* Media */
    } /* Windows */
} /* ABI */
#define __x_ABI_CWindows_CMedia_CCore_CIFaceDetectionEffect ABI::Windows::Media::Core::IFaceDetectionEffect

#endif // ____x_ABI_CWindows_CMedia_CCore_CIFaceDetectionEffect_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CCore_CIFaceDetectionEffectDefinition_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CCore_CIFaceDetectionEffectDefinition_FWD_DEFINED__
namespace ABI {
    namespace Windows {
        namespace Media {
            namespace Core {
                interface IFaceDetectionEffectDefinition;
            } /* Core */
        } /* Media */
    } /* Windows */
} /* ABI */
#define __x_ABI_CWindows_CMedia_CCore_CIFaceDetectionEffectDefinition ABI::Windows::Media::Core::IFaceDetectionEffectDefinition

#endif // ____x_ABI_CWindows_CMedia_CCore_CIFaceDetectionEffectDefinition_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CCore_CIFaceDetectionEffectFrame_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CCore_CIFaceDetectionEffectFrame_FWD_DEFINED__
namespace ABI {
    namespace Windows {
        namespace Media {
            namespace Core {
                interface IFaceDetectionEffectFrame;
            } /* Core */
        } /* Media */
    } /* Windows */
} /* ABI */
#define __x_ABI_CWindows_CMedia_CCore_CIFaceDetectionEffectFrame ABI::Windows::Media::Core::IFaceDetectionEffectFrame

#endif // ____x_ABI_CWindows_CMedia_CCore_CIFaceDetectionEffectFrame_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CCore_CIHighDynamicRangeControl_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CCore_CIHighDynamicRangeControl_FWD_DEFINED__
namespace ABI {
    namespace Windows {
        namespace Media {
            namespace Core {
                interface IHighDynamicRangeControl;
            } /* Core */
        } /* Media */
    } /* Windows */
} /* ABI */
#define __x_ABI_CWindows_CMedia_CCore_CIHighDynamicRangeControl ABI::Windows::Media::Core::IHighDynamicRangeControl

#endif // ____x_ABI_CWindows_CMedia_CCore_CIHighDynamicRangeControl_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CCore_CIHighDynamicRangeOutput_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CCore_CIHighDynamicRangeOutput_FWD_DEFINED__
namespace ABI {
    namespace Windows {
        namespace Media {
            namespace Core {
                interface IHighDynamicRangeOutput;
            } /* Core */
        } /* Media */
    } /* Windows */
} /* ABI */
#define __x_ABI_CWindows_CMedia_CCore_CIHighDynamicRangeOutput ABI::Windows::Media::Core::IHighDynamicRangeOutput

#endif // ____x_ABI_CWindows_CMedia_CCore_CIHighDynamicRangeOutput_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CCore_CIImageCue_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CCore_CIImageCue_FWD_DEFINED__
namespace ABI {
    namespace Windows {
        namespace Media {
            namespace Core {
                interface IImageCue;
            } /* Core */
        } /* Media */
    } /* Windows */
} /* ABI */
#define __x_ABI_CWindows_CMedia_CCore_CIImageCue ABI::Windows::Media::Core::IImageCue

#endif // ____x_ABI_CWindows_CMedia_CCore_CIImageCue_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CCore_CIInitializeMediaStreamSourceRequestedEventArgs_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CCore_CIInitializeMediaStreamSourceRequestedEventArgs_FWD_DEFINED__
namespace ABI {
    namespace Windows {
        namespace Media {
            namespace Core {
                interface IInitializeMediaStreamSourceRequestedEventArgs;
            } /* Core */
        } /* Media */
    } /* Windows */
} /* ABI */
#define __x_ABI_CWindows_CMedia_CCore_CIInitializeMediaStreamSourceRequestedEventArgs ABI::Windows::Media::Core::IInitializeMediaStreamSourceRequestedEventArgs

#endif // ____x_ABI_CWindows_CMedia_CCore_CIInitializeMediaStreamSourceRequestedEventArgs_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CCore_CILowLightFusionResult_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CCore_CILowLightFusionResult_FWD_DEFINED__
namespace ABI {
    namespace Windows {
        namespace Media {
            namespace Core {
                interface ILowLightFusionResult;
            } /* Core */
        } /* Media */
    } /* Windows */
} /* ABI */
#define __x_ABI_CWindows_CMedia_CCore_CILowLightFusionResult ABI::Windows::Media::Core::ILowLightFusionResult

#endif // ____x_ABI_CWindows_CMedia_CCore_CILowLightFusionResult_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CCore_CILowLightFusionStatics_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CCore_CILowLightFusionStatics_FWD_DEFINED__
namespace ABI {
    namespace Windows {
        namespace Media {
            namespace Core {
                interface ILowLightFusionStatics;
            } /* Core */
        } /* Media */
    } /* Windows */
} /* ABI */
#define __x_ABI_CWindows_CMedia_CCore_CILowLightFusionStatics ABI::Windows::Media::Core::ILowLightFusionStatics

#endif // ____x_ABI_CWindows_CMedia_CCore_CILowLightFusionStatics_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CCore_CIMediaBinder_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CCore_CIMediaBinder_FWD_DEFINED__
namespace ABI {
    namespace Windows {
        namespace Media {
            namespace Core {
                interface IMediaBinder;
            } /* Core */
        } /* Media */
    } /* Windows */
} /* ABI */
#define __x_ABI_CWindows_CMedia_CCore_CIMediaBinder ABI::Windows::Media::Core::IMediaBinder

#endif // ____x_ABI_CWindows_CMedia_CCore_CIMediaBinder_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CCore_CIMediaBindingEventArgs_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CCore_CIMediaBindingEventArgs_FWD_DEFINED__
namespace ABI {
    namespace Windows {
        namespace Media {
            namespace Core {
                interface IMediaBindingEventArgs;
            } /* Core */
        } /* Media */
    } /* Windows */
} /* ABI */
#define __x_ABI_CWindows_CMedia_CCore_CIMediaBindingEventArgs ABI::Windows::Media::Core::IMediaBindingEventArgs

#endif // ____x_ABI_CWindows_CMedia_CCore_CIMediaBindingEventArgs_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CCore_CIMediaBindingEventArgs2_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CCore_CIMediaBindingEventArgs2_FWD_DEFINED__
namespace ABI {
    namespace Windows {
        namespace Media {
            namespace Core {
                interface IMediaBindingEventArgs2;
            } /* Core */
        } /* Media */
    } /* Windows */
} /* ABI */
#define __x_ABI_CWindows_CMedia_CCore_CIMediaBindingEventArgs2 ABI::Windows::Media::Core::IMediaBindingEventArgs2

#endif // ____x_ABI_CWindows_CMedia_CCore_CIMediaBindingEventArgs2_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CCore_CIMediaBindingEventArgs3_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CCore_CIMediaBindingEventArgs3_FWD_DEFINED__
namespace ABI {
    namespace Windows {
        namespace Media {
            namespace Core {
                interface IMediaBindingEventArgs3;
            } /* Core */
        } /* Media */
    } /* Windows */
} /* ABI */
#define __x_ABI_CWindows_CMedia_CCore_CIMediaBindingEventArgs3 ABI::Windows::Media::Core::IMediaBindingEventArgs3

#endif // ____x_ABI_CWindows_CMedia_CCore_CIMediaBindingEventArgs3_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CCore_CIMediaCue_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CCore_CIMediaCue_FWD_DEFINED__
namespace ABI {
    namespace Windows {
        namespace Media {
            namespace Core {
                interface IMediaCue;
            } /* Core */
        } /* Media */
    } /* Windows */
} /* ABI */
#define __x_ABI_CWindows_CMedia_CCore_CIMediaCue ABI::Windows::Media::Core::IMediaCue

#endif // ____x_ABI_CWindows_CMedia_CCore_CIMediaCue_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CCore_CIMediaCueEventArgs_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CCore_CIMediaCueEventArgs_FWD_DEFINED__
namespace ABI {
    namespace Windows {
        namespace Media {
            namespace Core {
                interface IMediaCueEventArgs;
            } /* Core */
        } /* Media */
    } /* Windows */
} /* ABI */
#define __x_ABI_CWindows_CMedia_CCore_CIMediaCueEventArgs ABI::Windows::Media::Core::IMediaCueEventArgs

#endif // ____x_ABI_CWindows_CMedia_CCore_CIMediaCueEventArgs_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CCore_CIMediaSource_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CCore_CIMediaSource_FWD_DEFINED__
namespace ABI {
    namespace Windows {
        namespace Media {
            namespace Core {
                interface IMediaSource;
            } /* Core */
        } /* Media */
    } /* Windows */
} /* ABI */
#define __x_ABI_CWindows_CMedia_CCore_CIMediaSource ABI::Windows::Media::Core::IMediaSource

#endif // ____x_ABI_CWindows_CMedia_CCore_CIMediaSource_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CCore_CIMediaSource2_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CCore_CIMediaSource2_FWD_DEFINED__
namespace ABI {
    namespace Windows {
        namespace Media {
            namespace Core {
                interface IMediaSource2;
            } /* Core */
        } /* Media */
    } /* Windows */
} /* ABI */
#define __x_ABI_CWindows_CMedia_CCore_CIMediaSource2 ABI::Windows::Media::Core::IMediaSource2

#endif // ____x_ABI_CWindows_CMedia_CCore_CIMediaSource2_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CCore_CIMediaSource3_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CCore_CIMediaSource3_FWD_DEFINED__
namespace ABI {
    namespace Windows {
        namespace Media {
            namespace Core {
                interface IMediaSource3;
            } /* Core */
        } /* Media */
    } /* Windows */
} /* ABI */
#define __x_ABI_CWindows_CMedia_CCore_CIMediaSource3 ABI::Windows::Media::Core::IMediaSource3

#endif // ____x_ABI_CWindows_CMedia_CCore_CIMediaSource3_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CCore_CIMediaSource4_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CCore_CIMediaSource4_FWD_DEFINED__
namespace ABI {
    namespace Windows {
        namespace Media {
            namespace Core {
                interface IMediaSource4;
            } /* Core */
        } /* Media */
    } /* Windows */
} /* ABI */
#define __x_ABI_CWindows_CMedia_CCore_CIMediaSource4 ABI::Windows::Media::Core::IMediaSource4

#endif // ____x_ABI_CWindows_CMedia_CCore_CIMediaSource4_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CCore_CIMediaSource5_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CCore_CIMediaSource5_FWD_DEFINED__
namespace ABI {
    namespace Windows {
        namespace Media {
            namespace Core {
                interface IMediaSource5;
            } /* Core */
        } /* Media */
    } /* Windows */
} /* ABI */
#define __x_ABI_CWindows_CMedia_CCore_CIMediaSource5 ABI::Windows::Media::Core::IMediaSource5

#endif // ____x_ABI_CWindows_CMedia_CCore_CIMediaSource5_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CCore_CIMediaSourceAppServiceConnection_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CCore_CIMediaSourceAppServiceConnection_FWD_DEFINED__
namespace ABI {
    namespace Windows {
        namespace Media {
            namespace Core {
                interface IMediaSourceAppServiceConnection;
            } /* Core */
        } /* Media */
    } /* Windows */
} /* ABI */
#define __x_ABI_CWindows_CMedia_CCore_CIMediaSourceAppServiceConnection ABI::Windows::Media::Core::IMediaSourceAppServiceConnection

#endif // ____x_ABI_CWindows_CMedia_CCore_CIMediaSourceAppServiceConnection_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CCore_CIMediaSourceAppServiceConnectionFactory_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CCore_CIMediaSourceAppServiceConnectionFactory_FWD_DEFINED__
namespace ABI {
    namespace Windows {
        namespace Media {
            namespace Core {
                interface IMediaSourceAppServiceConnectionFactory;
            } /* Core */
        } /* Media */
    } /* Windows */
} /* ABI */
#define __x_ABI_CWindows_CMedia_CCore_CIMediaSourceAppServiceConnectionFactory ABI::Windows::Media::Core::IMediaSourceAppServiceConnectionFactory

#endif // ____x_ABI_CWindows_CMedia_CCore_CIMediaSourceAppServiceConnectionFactory_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CCore_CIMediaSourceError_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CCore_CIMediaSourceError_FWD_DEFINED__
namespace ABI {
    namespace Windows {
        namespace Media {
            namespace Core {
                interface IMediaSourceError;
            } /* Core */
        } /* Media */
    } /* Windows */
} /* ABI */
#define __x_ABI_CWindows_CMedia_CCore_CIMediaSourceError ABI::Windows::Media::Core::IMediaSourceError

#endif // ____x_ABI_CWindows_CMedia_CCore_CIMediaSourceError_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CCore_CIMediaSourceOpenOperationCompletedEventArgs_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CCore_CIMediaSourceOpenOperationCompletedEventArgs_FWD_DEFINED__
namespace ABI {
    namespace Windows {
        namespace Media {
            namespace Core {
                interface IMediaSourceOpenOperationCompletedEventArgs;
            } /* Core */
        } /* Media */
    } /* Windows */
} /* ABI */
#define __x_ABI_CWindows_CMedia_CCore_CIMediaSourceOpenOperationCompletedEventArgs ABI::Windows::Media::Core::IMediaSourceOpenOperationCompletedEventArgs

#endif // ____x_ABI_CWindows_CMedia_CCore_CIMediaSourceOpenOperationCompletedEventArgs_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CCore_CIMediaSourceStateChangedEventArgs_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CCore_CIMediaSourceStateChangedEventArgs_FWD_DEFINED__
namespace ABI {
    namespace Windows {
        namespace Media {
            namespace Core {
                interface IMediaSourceStateChangedEventArgs;
            } /* Core */
        } /* Media */
    } /* Windows */
} /* ABI */
#define __x_ABI_CWindows_CMedia_CCore_CIMediaSourceStateChangedEventArgs ABI::Windows::Media::Core::IMediaSourceStateChangedEventArgs

#endif // ____x_ABI_CWindows_CMedia_CCore_CIMediaSourceStateChangedEventArgs_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CCore_CIMediaSourceStatics_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CCore_CIMediaSourceStatics_FWD_DEFINED__
namespace ABI {
    namespace Windows {
        namespace Media {
            namespace Core {
                interface IMediaSourceStatics;
            } /* Core */
        } /* Media */
    } /* Windows */
} /* ABI */
#define __x_ABI_CWindows_CMedia_CCore_CIMediaSourceStatics ABI::Windows::Media::Core::IMediaSourceStatics

#endif // ____x_ABI_CWindows_CMedia_CCore_CIMediaSourceStatics_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CCore_CIMediaSourceStatics2_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CCore_CIMediaSourceStatics2_FWD_DEFINED__
namespace ABI {
    namespace Windows {
        namespace Media {
            namespace Core {
                interface IMediaSourceStatics2;
            } /* Core */
        } /* Media */
    } /* Windows */
} /* ABI */
#define __x_ABI_CWindows_CMedia_CCore_CIMediaSourceStatics2 ABI::Windows::Media::Core::IMediaSourceStatics2

#endif // ____x_ABI_CWindows_CMedia_CCore_CIMediaSourceStatics2_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CCore_CIMediaSourceStatics3_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CCore_CIMediaSourceStatics3_FWD_DEFINED__
namespace ABI {
    namespace Windows {
        namespace Media {
            namespace Core {
                interface IMediaSourceStatics3;
            } /* Core */
        } /* Media */
    } /* Windows */
} /* ABI */
#define __x_ABI_CWindows_CMedia_CCore_CIMediaSourceStatics3 ABI::Windows::Media::Core::IMediaSourceStatics3

#endif // ____x_ABI_CWindows_CMedia_CCore_CIMediaSourceStatics3_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CCore_CIMediaSourceStatics4_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CCore_CIMediaSourceStatics4_FWD_DEFINED__
namespace ABI {
    namespace Windows {
        namespace Media {
            namespace Core {
                interface IMediaSourceStatics4;
            } /* Core */
        } /* Media */
    } /* Windows */
} /* ABI */
#define __x_ABI_CWindows_CMedia_CCore_CIMediaSourceStatics4 ABI::Windows::Media::Core::IMediaSourceStatics4

#endif // ____x_ABI_CWindows_CMedia_CCore_CIMediaSourceStatics4_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CCore_CIMediaStreamDescriptor_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CCore_CIMediaStreamDescriptor_FWD_DEFINED__
namespace ABI {
    namespace Windows {
        namespace Media {
            namespace Core {
                interface IMediaStreamDescriptor;
            } /* Core */
        } /* Media */
    } /* Windows */
} /* ABI */
#define __x_ABI_CWindows_CMedia_CCore_CIMediaStreamDescriptor ABI::Windows::Media::Core::IMediaStreamDescriptor

#endif // ____x_ABI_CWindows_CMedia_CCore_CIMediaStreamDescriptor_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CCore_CIMediaStreamDescriptor2_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CCore_CIMediaStreamDescriptor2_FWD_DEFINED__
namespace ABI {
    namespace Windows {
        namespace Media {
            namespace Core {
                interface IMediaStreamDescriptor2;
            } /* Core */
        } /* Media */
    } /* Windows */
} /* ABI */
#define __x_ABI_CWindows_CMedia_CCore_CIMediaStreamDescriptor2 ABI::Windows::Media::Core::IMediaStreamDescriptor2

#endif // ____x_ABI_CWindows_CMedia_CCore_CIMediaStreamDescriptor2_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CCore_CIMediaStreamSample_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CCore_CIMediaStreamSample_FWD_DEFINED__
namespace ABI {
    namespace Windows {
        namespace Media {
            namespace Core {
                interface IMediaStreamSample;
            } /* Core */
        } /* Media */
    } /* Windows */
} /* ABI */
#define __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSample ABI::Windows::Media::Core::IMediaStreamSample

#endif // ____x_ABI_CWindows_CMedia_CCore_CIMediaStreamSample_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CCore_CIMediaStreamSample2_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CCore_CIMediaStreamSample2_FWD_DEFINED__
namespace ABI {
    namespace Windows {
        namespace Media {
            namespace Core {
                interface IMediaStreamSample2;
            } /* Core */
        } /* Media */
    } /* Windows */
} /* ABI */
#define __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSample2 ABI::Windows::Media::Core::IMediaStreamSample2

#endif // ____x_ABI_CWindows_CMedia_CCore_CIMediaStreamSample2_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CCore_CIMediaStreamSampleProtectionProperties_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CCore_CIMediaStreamSampleProtectionProperties_FWD_DEFINED__
namespace ABI {
    namespace Windows {
        namespace Media {
            namespace Core {
                interface IMediaStreamSampleProtectionProperties;
            } /* Core */
        } /* Media */
    } /* Windows */
} /* ABI */
#define __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSampleProtectionProperties ABI::Windows::Media::Core::IMediaStreamSampleProtectionProperties

#endif // ____x_ABI_CWindows_CMedia_CCore_CIMediaStreamSampleProtectionProperties_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CCore_CIMediaStreamSampleStatics_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CCore_CIMediaStreamSampleStatics_FWD_DEFINED__
namespace ABI {
    namespace Windows {
        namespace Media {
            namespace Core {
                interface IMediaStreamSampleStatics;
            } /* Core */
        } /* Media */
    } /* Windows */
} /* ABI */
#define __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSampleStatics ABI::Windows::Media::Core::IMediaStreamSampleStatics

#endif // ____x_ABI_CWindows_CMedia_CCore_CIMediaStreamSampleStatics_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CCore_CIMediaStreamSampleStatics2_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CCore_CIMediaStreamSampleStatics2_FWD_DEFINED__
namespace ABI {
    namespace Windows {
        namespace Media {
            namespace Core {
                interface IMediaStreamSampleStatics2;
            } /* Core */
        } /* Media */
    } /* Windows */
} /* ABI */
#define __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSampleStatics2 ABI::Windows::Media::Core::IMediaStreamSampleStatics2

#endif // ____x_ABI_CWindows_CMedia_CCore_CIMediaStreamSampleStatics2_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CCore_CIMediaStreamSource_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CCore_CIMediaStreamSource_FWD_DEFINED__
namespace ABI {
    namespace Windows {
        namespace Media {
            namespace Core {
                interface IMediaStreamSource;
            } /* Core */
        } /* Media */
    } /* Windows */
} /* ABI */
#define __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSource ABI::Windows::Media::Core::IMediaStreamSource

#endif // ____x_ABI_CWindows_CMedia_CCore_CIMediaStreamSource_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CCore_CIMediaStreamSource2_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CCore_CIMediaStreamSource2_FWD_DEFINED__
namespace ABI {
    namespace Windows {
        namespace Media {
            namespace Core {
                interface IMediaStreamSource2;
            } /* Core */
        } /* Media */
    } /* Windows */
} /* ABI */
#define __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSource2 ABI::Windows::Media::Core::IMediaStreamSource2

#endif // ____x_ABI_CWindows_CMedia_CCore_CIMediaStreamSource2_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CCore_CIMediaStreamSource3_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CCore_CIMediaStreamSource3_FWD_DEFINED__
namespace ABI {
    namespace Windows {
        namespace Media {
            namespace Core {
                interface IMediaStreamSource3;
            } /* Core */
        } /* Media */
    } /* Windows */
} /* ABI */
#define __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSource3 ABI::Windows::Media::Core::IMediaStreamSource3

#endif // ____x_ABI_CWindows_CMedia_CCore_CIMediaStreamSource3_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CCore_CIMediaStreamSource4_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CCore_CIMediaStreamSource4_FWD_DEFINED__
namespace ABI {
    namespace Windows {
        namespace Media {
            namespace Core {
                interface IMediaStreamSource4;
            } /* Core */
        } /* Media */
    } /* Windows */
} /* ABI */
#define __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSource4 ABI::Windows::Media::Core::IMediaStreamSource4

#endif // ____x_ABI_CWindows_CMedia_CCore_CIMediaStreamSource4_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceClosedEventArgs_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceClosedEventArgs_FWD_DEFINED__
namespace ABI {
    namespace Windows {
        namespace Media {
            namespace Core {
                interface IMediaStreamSourceClosedEventArgs;
            } /* Core */
        } /* Media */
    } /* Windows */
} /* ABI */
#define __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceClosedEventArgs ABI::Windows::Media::Core::IMediaStreamSourceClosedEventArgs

#endif // ____x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceClosedEventArgs_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceClosedRequest_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceClosedRequest_FWD_DEFINED__
namespace ABI {
    namespace Windows {
        namespace Media {
            namespace Core {
                interface IMediaStreamSourceClosedRequest;
            } /* Core */
        } /* Media */
    } /* Windows */
} /* ABI */
#define __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceClosedRequest ABI::Windows::Media::Core::IMediaStreamSourceClosedRequest

#endif // ____x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceClosedRequest_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceFactory_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceFactory_FWD_DEFINED__
namespace ABI {
    namespace Windows {
        namespace Media {
            namespace Core {
                interface IMediaStreamSourceFactory;
            } /* Core */
        } /* Media */
    } /* Windows */
} /* ABI */
#define __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceFactory ABI::Windows::Media::Core::IMediaStreamSourceFactory

#endif // ____x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceFactory_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceSampleRenderedEventArgs_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceSampleRenderedEventArgs_FWD_DEFINED__
namespace ABI {
    namespace Windows {
        namespace Media {
            namespace Core {
                interface IMediaStreamSourceSampleRenderedEventArgs;
            } /* Core */
        } /* Media */
    } /* Windows */
} /* ABI */
#define __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceSampleRenderedEventArgs ABI::Windows::Media::Core::IMediaStreamSourceSampleRenderedEventArgs

#endif // ____x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceSampleRenderedEventArgs_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceSampleRequest_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceSampleRequest_FWD_DEFINED__
namespace ABI {
    namespace Windows {
        namespace Media {
            namespace Core {
                interface IMediaStreamSourceSampleRequest;
            } /* Core */
        } /* Media */
    } /* Windows */
} /* ABI */
#define __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceSampleRequest ABI::Windows::Media::Core::IMediaStreamSourceSampleRequest

#endif // ____x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceSampleRequest_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceSampleRequestDeferral_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceSampleRequestDeferral_FWD_DEFINED__
namespace ABI {
    namespace Windows {
        namespace Media {
            namespace Core {
                interface IMediaStreamSourceSampleRequestDeferral;
            } /* Core */
        } /* Media */
    } /* Windows */
} /* ABI */
#define __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceSampleRequestDeferral ABI::Windows::Media::Core::IMediaStreamSourceSampleRequestDeferral

#endif // ____x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceSampleRequestDeferral_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceSampleRequestedEventArgs_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceSampleRequestedEventArgs_FWD_DEFINED__
namespace ABI {
    namespace Windows {
        namespace Media {
            namespace Core {
                interface IMediaStreamSourceSampleRequestedEventArgs;
            } /* Core */
        } /* Media */
    } /* Windows */
} /* ABI */
#define __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceSampleRequestedEventArgs ABI::Windows::Media::Core::IMediaStreamSourceSampleRequestedEventArgs

#endif // ____x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceSampleRequestedEventArgs_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceStartingEventArgs_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceStartingEventArgs_FWD_DEFINED__
namespace ABI {
    namespace Windows {
        namespace Media {
            namespace Core {
                interface IMediaStreamSourceStartingEventArgs;
            } /* Core */
        } /* Media */
    } /* Windows */
} /* ABI */
#define __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceStartingEventArgs ABI::Windows::Media::Core::IMediaStreamSourceStartingEventArgs

#endif // ____x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceStartingEventArgs_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceStartingRequest_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceStartingRequest_FWD_DEFINED__
namespace ABI {
    namespace Windows {
        namespace Media {
            namespace Core {
                interface IMediaStreamSourceStartingRequest;
            } /* Core */
        } /* Media */
    } /* Windows */
} /* ABI */
#define __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceStartingRequest ABI::Windows::Media::Core::IMediaStreamSourceStartingRequest

#endif // ____x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceStartingRequest_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceStartingRequestDeferral_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceStartingRequestDeferral_FWD_DEFINED__
namespace ABI {
    namespace Windows {
        namespace Media {
            namespace Core {
                interface IMediaStreamSourceStartingRequestDeferral;
            } /* Core */
        } /* Media */
    } /* Windows */
} /* ABI */
#define __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceStartingRequestDeferral ABI::Windows::Media::Core::IMediaStreamSourceStartingRequestDeferral

#endif // ____x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceStartingRequestDeferral_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceSwitchStreamsRequest_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceSwitchStreamsRequest_FWD_DEFINED__
namespace ABI {
    namespace Windows {
        namespace Media {
            namespace Core {
                interface IMediaStreamSourceSwitchStreamsRequest;
            } /* Core */
        } /* Media */
    } /* Windows */
} /* ABI */
#define __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceSwitchStreamsRequest ABI::Windows::Media::Core::IMediaStreamSourceSwitchStreamsRequest

#endif // ____x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceSwitchStreamsRequest_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceSwitchStreamsRequestDeferral_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceSwitchStreamsRequestDeferral_FWD_DEFINED__
namespace ABI {
    namespace Windows {
        namespace Media {
            namespace Core {
                interface IMediaStreamSourceSwitchStreamsRequestDeferral;
            } /* Core */
        } /* Media */
    } /* Windows */
} /* ABI */
#define __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceSwitchStreamsRequestDeferral ABI::Windows::Media::Core::IMediaStreamSourceSwitchStreamsRequestDeferral

#endif // ____x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceSwitchStreamsRequestDeferral_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceSwitchStreamsRequestedEventArgs_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceSwitchStreamsRequestedEventArgs_FWD_DEFINED__
namespace ABI {
    namespace Windows {
        namespace Media {
            namespace Core {
                interface IMediaStreamSourceSwitchStreamsRequestedEventArgs;
            } /* Core */
        } /* Media */
    } /* Windows */
} /* ABI */
#define __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceSwitchStreamsRequestedEventArgs ABI::Windows::Media::Core::IMediaStreamSourceSwitchStreamsRequestedEventArgs

#endif // ____x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceSwitchStreamsRequestedEventArgs_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CCore_CIMediaTrack_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CCore_CIMediaTrack_FWD_DEFINED__
namespace ABI {
    namespace Windows {
        namespace Media {
            namespace Core {
                interface IMediaTrack;
            } /* Core */
        } /* Media */
    } /* Windows */
} /* ABI */
#define __x_ABI_CWindows_CMedia_CCore_CIMediaTrack ABI::Windows::Media::Core::IMediaTrack

#endif // ____x_ABI_CWindows_CMedia_CCore_CIMediaTrack_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CCore_CIMseSourceBuffer_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CCore_CIMseSourceBuffer_FWD_DEFINED__
namespace ABI {
    namespace Windows {
        namespace Media {
            namespace Core {
                interface IMseSourceBuffer;
            } /* Core */
        } /* Media */
    } /* Windows */
} /* ABI */
#define __x_ABI_CWindows_CMedia_CCore_CIMseSourceBuffer ABI::Windows::Media::Core::IMseSourceBuffer

#endif // ____x_ABI_CWindows_CMedia_CCore_CIMseSourceBuffer_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CCore_CIMseSourceBufferList_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CCore_CIMseSourceBufferList_FWD_DEFINED__
namespace ABI {
    namespace Windows {
        namespace Media {
            namespace Core {
                interface IMseSourceBufferList;
            } /* Core */
        } /* Media */
    } /* Windows */
} /* ABI */
#define __x_ABI_CWindows_CMedia_CCore_CIMseSourceBufferList ABI::Windows::Media::Core::IMseSourceBufferList

#endif // ____x_ABI_CWindows_CMedia_CCore_CIMseSourceBufferList_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CCore_CIMseStreamSource_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CCore_CIMseStreamSource_FWD_DEFINED__
namespace ABI {
    namespace Windows {
        namespace Media {
            namespace Core {
                interface IMseStreamSource;
            } /* Core */
        } /* Media */
    } /* Windows */
} /* ABI */
#define __x_ABI_CWindows_CMedia_CCore_CIMseStreamSource ABI::Windows::Media::Core::IMseStreamSource

#endif // ____x_ABI_CWindows_CMedia_CCore_CIMseStreamSource_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CCore_CIMseStreamSource2_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CCore_CIMseStreamSource2_FWD_DEFINED__
namespace ABI {
    namespace Windows {
        namespace Media {
            namespace Core {
                interface IMseStreamSource2;
            } /* Core */
        } /* Media */
    } /* Windows */
} /* ABI */
#define __x_ABI_CWindows_CMedia_CCore_CIMseStreamSource2 ABI::Windows::Media::Core::IMseStreamSource2

#endif // ____x_ABI_CWindows_CMedia_CCore_CIMseStreamSource2_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CCore_CIMseStreamSourceStatics_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CCore_CIMseStreamSourceStatics_FWD_DEFINED__
namespace ABI {
    namespace Windows {
        namespace Media {
            namespace Core {
                interface IMseStreamSourceStatics;
            } /* Core */
        } /* Media */
    } /* Windows */
} /* ABI */
#define __x_ABI_CWindows_CMedia_CCore_CIMseStreamSourceStatics ABI::Windows::Media::Core::IMseStreamSourceStatics

#endif // ____x_ABI_CWindows_CMedia_CCore_CIMseStreamSourceStatics_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CCore_CISceneAnalysisEffect_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CCore_CISceneAnalysisEffect_FWD_DEFINED__
namespace ABI {
    namespace Windows {
        namespace Media {
            namespace Core {
                interface ISceneAnalysisEffect;
            } /* Core */
        } /* Media */
    } /* Windows */
} /* ABI */
#define __x_ABI_CWindows_CMedia_CCore_CISceneAnalysisEffect ABI::Windows::Media::Core::ISceneAnalysisEffect

#endif // ____x_ABI_CWindows_CMedia_CCore_CISceneAnalysisEffect_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CCore_CISceneAnalysisEffectFrame_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CCore_CISceneAnalysisEffectFrame_FWD_DEFINED__
namespace ABI {
    namespace Windows {
        namespace Media {
            namespace Core {
                interface ISceneAnalysisEffectFrame;
            } /* Core */
        } /* Media */
    } /* Windows */
} /* ABI */
#define __x_ABI_CWindows_CMedia_CCore_CISceneAnalysisEffectFrame ABI::Windows::Media::Core::ISceneAnalysisEffectFrame

#endif // ____x_ABI_CWindows_CMedia_CCore_CISceneAnalysisEffectFrame_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CCore_CISceneAnalysisEffectFrame2_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CCore_CISceneAnalysisEffectFrame2_FWD_DEFINED__
namespace ABI {
    namespace Windows {
        namespace Media {
            namespace Core {
                interface ISceneAnalysisEffectFrame2;
            } /* Core */
        } /* Media */
    } /* Windows */
} /* ABI */
#define __x_ABI_CWindows_CMedia_CCore_CISceneAnalysisEffectFrame2 ABI::Windows::Media::Core::ISceneAnalysisEffectFrame2

#endif // ____x_ABI_CWindows_CMedia_CCore_CISceneAnalysisEffectFrame2_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CCore_CISceneAnalyzedEventArgs_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CCore_CISceneAnalyzedEventArgs_FWD_DEFINED__
namespace ABI {
    namespace Windows {
        namespace Media {
            namespace Core {
                interface ISceneAnalyzedEventArgs;
            } /* Core */
        } /* Media */
    } /* Windows */
} /* ABI */
#define __x_ABI_CWindows_CMedia_CCore_CISceneAnalyzedEventArgs ABI::Windows::Media::Core::ISceneAnalyzedEventArgs

#endif // ____x_ABI_CWindows_CMedia_CCore_CISceneAnalyzedEventArgs_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CCore_CISingleSelectMediaTrackList_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CCore_CISingleSelectMediaTrackList_FWD_DEFINED__
namespace ABI {
    namespace Windows {
        namespace Media {
            namespace Core {
                interface ISingleSelectMediaTrackList;
            } /* Core */
        } /* Media */
    } /* Windows */
} /* ABI */
#define __x_ABI_CWindows_CMedia_CCore_CISingleSelectMediaTrackList ABI::Windows::Media::Core::ISingleSelectMediaTrackList

#endif // ____x_ABI_CWindows_CMedia_CCore_CISingleSelectMediaTrackList_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CCore_CISpeechCue_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CCore_CISpeechCue_FWD_DEFINED__
namespace ABI {
    namespace Windows {
        namespace Media {
            namespace Core {
                interface ISpeechCue;
            } /* Core */
        } /* Media */
    } /* Windows */
} /* ABI */
#define __x_ABI_CWindows_CMedia_CCore_CISpeechCue ABI::Windows::Media::Core::ISpeechCue

#endif // ____x_ABI_CWindows_CMedia_CCore_CISpeechCue_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CCore_CITimedMetadataStreamDescriptor_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CCore_CITimedMetadataStreamDescriptor_FWD_DEFINED__
namespace ABI {
    namespace Windows {
        namespace Media {
            namespace Core {
                interface ITimedMetadataStreamDescriptor;
            } /* Core */
        } /* Media */
    } /* Windows */
} /* ABI */
#define __x_ABI_CWindows_CMedia_CCore_CITimedMetadataStreamDescriptor ABI::Windows::Media::Core::ITimedMetadataStreamDescriptor

#endif // ____x_ABI_CWindows_CMedia_CCore_CITimedMetadataStreamDescriptor_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CCore_CITimedMetadataStreamDescriptorFactory_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CCore_CITimedMetadataStreamDescriptorFactory_FWD_DEFINED__
namespace ABI {
    namespace Windows {
        namespace Media {
            namespace Core {
                interface ITimedMetadataStreamDescriptorFactory;
            } /* Core */
        } /* Media */
    } /* Windows */
} /* ABI */
#define __x_ABI_CWindows_CMedia_CCore_CITimedMetadataStreamDescriptorFactory ABI::Windows::Media::Core::ITimedMetadataStreamDescriptorFactory

#endif // ____x_ABI_CWindows_CMedia_CCore_CITimedMetadataStreamDescriptorFactory_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CCore_CITimedMetadataTrack_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CCore_CITimedMetadataTrack_FWD_DEFINED__
namespace ABI {
    namespace Windows {
        namespace Media {
            namespace Core {
                interface ITimedMetadataTrack;
            } /* Core */
        } /* Media */
    } /* Windows */
} /* ABI */
#define __x_ABI_CWindows_CMedia_CCore_CITimedMetadataTrack ABI::Windows::Media::Core::ITimedMetadataTrack

#endif // ____x_ABI_CWindows_CMedia_CCore_CITimedMetadataTrack_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CCore_CITimedMetadataTrack2_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CCore_CITimedMetadataTrack2_FWD_DEFINED__
namespace ABI {
    namespace Windows {
        namespace Media {
            namespace Core {
                interface ITimedMetadataTrack2;
            } /* Core */
        } /* Media */
    } /* Windows */
} /* ABI */
#define __x_ABI_CWindows_CMedia_CCore_CITimedMetadataTrack2 ABI::Windows::Media::Core::ITimedMetadataTrack2

#endif // ____x_ABI_CWindows_CMedia_CCore_CITimedMetadataTrack2_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CCore_CITimedMetadataTrackError_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CCore_CITimedMetadataTrackError_FWD_DEFINED__
namespace ABI {
    namespace Windows {
        namespace Media {
            namespace Core {
                interface ITimedMetadataTrackError;
            } /* Core */
        } /* Media */
    } /* Windows */
} /* ABI */
#define __x_ABI_CWindows_CMedia_CCore_CITimedMetadataTrackError ABI::Windows::Media::Core::ITimedMetadataTrackError

#endif // ____x_ABI_CWindows_CMedia_CCore_CITimedMetadataTrackError_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CCore_CITimedMetadataTrackFactory_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CCore_CITimedMetadataTrackFactory_FWD_DEFINED__
namespace ABI {
    namespace Windows {
        namespace Media {
            namespace Core {
                interface ITimedMetadataTrackFactory;
            } /* Core */
        } /* Media */
    } /* Windows */
} /* ABI */
#define __x_ABI_CWindows_CMedia_CCore_CITimedMetadataTrackFactory ABI::Windows::Media::Core::ITimedMetadataTrackFactory

#endif // ____x_ABI_CWindows_CMedia_CCore_CITimedMetadataTrackFactory_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CCore_CITimedMetadataTrackFailedEventArgs_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CCore_CITimedMetadataTrackFailedEventArgs_FWD_DEFINED__
namespace ABI {
    namespace Windows {
        namespace Media {
            namespace Core {
                interface ITimedMetadataTrackFailedEventArgs;
            } /* Core */
        } /* Media */
    } /* Windows */
} /* ABI */
#define __x_ABI_CWindows_CMedia_CCore_CITimedMetadataTrackFailedEventArgs ABI::Windows::Media::Core::ITimedMetadataTrackFailedEventArgs

#endif // ____x_ABI_CWindows_CMedia_CCore_CITimedMetadataTrackFailedEventArgs_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CCore_CITimedMetadataTrackProvider_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CCore_CITimedMetadataTrackProvider_FWD_DEFINED__
namespace ABI {
    namespace Windows {
        namespace Media {
            namespace Core {
                interface ITimedMetadataTrackProvider;
            } /* Core */
        } /* Media */
    } /* Windows */
} /* ABI */
#define __x_ABI_CWindows_CMedia_CCore_CITimedMetadataTrackProvider ABI::Windows::Media::Core::ITimedMetadataTrackProvider

#endif // ____x_ABI_CWindows_CMedia_CCore_CITimedMetadataTrackProvider_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CCore_CITimedTextCue_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CCore_CITimedTextCue_FWD_DEFINED__
namespace ABI {
    namespace Windows {
        namespace Media {
            namespace Core {
                interface ITimedTextCue;
            } /* Core */
        } /* Media */
    } /* Windows */
} /* ABI */
#define __x_ABI_CWindows_CMedia_CCore_CITimedTextCue ABI::Windows::Media::Core::ITimedTextCue

#endif // ____x_ABI_CWindows_CMedia_CCore_CITimedTextCue_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CCore_CITimedTextLine_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CCore_CITimedTextLine_FWD_DEFINED__
namespace ABI {
    namespace Windows {
        namespace Media {
            namespace Core {
                interface ITimedTextLine;
            } /* Core */
        } /* Media */
    } /* Windows */
} /* ABI */
#define __x_ABI_CWindows_CMedia_CCore_CITimedTextLine ABI::Windows::Media::Core::ITimedTextLine

#endif // ____x_ABI_CWindows_CMedia_CCore_CITimedTextLine_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CCore_CITimedTextRegion_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CCore_CITimedTextRegion_FWD_DEFINED__
namespace ABI {
    namespace Windows {
        namespace Media {
            namespace Core {
                interface ITimedTextRegion;
            } /* Core */
        } /* Media */
    } /* Windows */
} /* ABI */
#define __x_ABI_CWindows_CMedia_CCore_CITimedTextRegion ABI::Windows::Media::Core::ITimedTextRegion

#endif // ____x_ABI_CWindows_CMedia_CCore_CITimedTextRegion_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CCore_CITimedTextSource_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CCore_CITimedTextSource_FWD_DEFINED__
namespace ABI {
    namespace Windows {
        namespace Media {
            namespace Core {
                interface ITimedTextSource;
            } /* Core */
        } /* Media */
    } /* Windows */
} /* ABI */
#define __x_ABI_CWindows_CMedia_CCore_CITimedTextSource ABI::Windows::Media::Core::ITimedTextSource

#endif // ____x_ABI_CWindows_CMedia_CCore_CITimedTextSource_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CCore_CITimedTextSourceResolveResultEventArgs_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CCore_CITimedTextSourceResolveResultEventArgs_FWD_DEFINED__
namespace ABI {
    namespace Windows {
        namespace Media {
            namespace Core {
                interface ITimedTextSourceResolveResultEventArgs;
            } /* Core */
        } /* Media */
    } /* Windows */
} /* ABI */
#define __x_ABI_CWindows_CMedia_CCore_CITimedTextSourceResolveResultEventArgs ABI::Windows::Media::Core::ITimedTextSourceResolveResultEventArgs

#endif // ____x_ABI_CWindows_CMedia_CCore_CITimedTextSourceResolveResultEventArgs_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CCore_CITimedTextSourceStatics_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CCore_CITimedTextSourceStatics_FWD_DEFINED__
namespace ABI {
    namespace Windows {
        namespace Media {
            namespace Core {
                interface ITimedTextSourceStatics;
            } /* Core */
        } /* Media */
    } /* Windows */
} /* ABI */
#define __x_ABI_CWindows_CMedia_CCore_CITimedTextSourceStatics ABI::Windows::Media::Core::ITimedTextSourceStatics

#endif // ____x_ABI_CWindows_CMedia_CCore_CITimedTextSourceStatics_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CCore_CITimedTextSourceStatics2_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CCore_CITimedTextSourceStatics2_FWD_DEFINED__
namespace ABI {
    namespace Windows {
        namespace Media {
            namespace Core {
                interface ITimedTextSourceStatics2;
            } /* Core */
        } /* Media */
    } /* Windows */
} /* ABI */
#define __x_ABI_CWindows_CMedia_CCore_CITimedTextSourceStatics2 ABI::Windows::Media::Core::ITimedTextSourceStatics2

#endif // ____x_ABI_CWindows_CMedia_CCore_CITimedTextSourceStatics2_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CCore_CITimedTextStyle_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CCore_CITimedTextStyle_FWD_DEFINED__
namespace ABI {
    namespace Windows {
        namespace Media {
            namespace Core {
                interface ITimedTextStyle;
            } /* Core */
        } /* Media */
    } /* Windows */
} /* ABI */
#define __x_ABI_CWindows_CMedia_CCore_CITimedTextStyle ABI::Windows::Media::Core::ITimedTextStyle

#endif // ____x_ABI_CWindows_CMedia_CCore_CITimedTextStyle_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CCore_CITimedTextStyle2_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CCore_CITimedTextStyle2_FWD_DEFINED__
namespace ABI {
    namespace Windows {
        namespace Media {
            namespace Core {
                interface ITimedTextStyle2;
            } /* Core */
        } /* Media */
    } /* Windows */
} /* ABI */
#define __x_ABI_CWindows_CMedia_CCore_CITimedTextStyle2 ABI::Windows::Media::Core::ITimedTextStyle2

#endif // ____x_ABI_CWindows_CMedia_CCore_CITimedTextStyle2_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CCore_CITimedTextSubformat_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CCore_CITimedTextSubformat_FWD_DEFINED__
namespace ABI {
    namespace Windows {
        namespace Media {
            namespace Core {
                interface ITimedTextSubformat;
            } /* Core */
        } /* Media */
    } /* Windows */
} /* ABI */
#define __x_ABI_CWindows_CMedia_CCore_CITimedTextSubformat ABI::Windows::Media::Core::ITimedTextSubformat

#endif // ____x_ABI_CWindows_CMedia_CCore_CITimedTextSubformat_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CCore_CIVideoStabilizationEffect_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CCore_CIVideoStabilizationEffect_FWD_DEFINED__
namespace ABI {
    namespace Windows {
        namespace Media {
            namespace Core {
                interface IVideoStabilizationEffect;
            } /* Core */
        } /* Media */
    } /* Windows */
} /* ABI */
#define __x_ABI_CWindows_CMedia_CCore_CIVideoStabilizationEffect ABI::Windows::Media::Core::IVideoStabilizationEffect

#endif // ____x_ABI_CWindows_CMedia_CCore_CIVideoStabilizationEffect_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CCore_CIVideoStabilizationEffectEnabledChangedEventArgs_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CCore_CIVideoStabilizationEffectEnabledChangedEventArgs_FWD_DEFINED__
namespace ABI {
    namespace Windows {
        namespace Media {
            namespace Core {
                interface IVideoStabilizationEffectEnabledChangedEventArgs;
            } /* Core */
        } /* Media */
    } /* Windows */
} /* ABI */
#define __x_ABI_CWindows_CMedia_CCore_CIVideoStabilizationEffectEnabledChangedEventArgs ABI::Windows::Media::Core::IVideoStabilizationEffectEnabledChangedEventArgs

#endif // ____x_ABI_CWindows_CMedia_CCore_CIVideoStabilizationEffectEnabledChangedEventArgs_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CCore_CIVideoStreamDescriptor_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CCore_CIVideoStreamDescriptor_FWD_DEFINED__
namespace ABI {
    namespace Windows {
        namespace Media {
            namespace Core {
                interface IVideoStreamDescriptor;
            } /* Core */
        } /* Media */
    } /* Windows */
} /* ABI */
#define __x_ABI_CWindows_CMedia_CCore_CIVideoStreamDescriptor ABI::Windows::Media::Core::IVideoStreamDescriptor

#endif // ____x_ABI_CWindows_CMedia_CCore_CIVideoStreamDescriptor_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CCore_CIVideoStreamDescriptor2_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CCore_CIVideoStreamDescriptor2_FWD_DEFINED__
namespace ABI {
    namespace Windows {
        namespace Media {
            namespace Core {
                interface IVideoStreamDescriptor2;
            } /* Core */
        } /* Media */
    } /* Windows */
} /* ABI */
#define __x_ABI_CWindows_CMedia_CCore_CIVideoStreamDescriptor2 ABI::Windows::Media::Core::IVideoStreamDescriptor2

#endif // ____x_ABI_CWindows_CMedia_CCore_CIVideoStreamDescriptor2_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CCore_CIVideoStreamDescriptorFactory_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CCore_CIVideoStreamDescriptorFactory_FWD_DEFINED__
namespace ABI {
    namespace Windows {
        namespace Media {
            namespace Core {
                interface IVideoStreamDescriptorFactory;
            } /* Core */
        } /* Media */
    } /* Windows */
} /* ABI */
#define __x_ABI_CWindows_CMedia_CCore_CIVideoStreamDescriptorFactory ABI::Windows::Media::Core::IVideoStreamDescriptorFactory

#endif // ____x_ABI_CWindows_CMedia_CCore_CIVideoStreamDescriptorFactory_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CCore_CIVideoTrack_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CCore_CIVideoTrack_FWD_DEFINED__
namespace ABI {
    namespace Windows {
        namespace Media {
            namespace Core {
                interface IVideoTrack;
            } /* Core */
        } /* Media */
    } /* Windows */
} /* ABI */
#define __x_ABI_CWindows_CMedia_CCore_CIVideoTrack ABI::Windows::Media::Core::IVideoTrack

#endif // ____x_ABI_CWindows_CMedia_CCore_CIVideoTrack_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CCore_CIVideoTrackOpenFailedEventArgs_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CCore_CIVideoTrackOpenFailedEventArgs_FWD_DEFINED__
namespace ABI {
    namespace Windows {
        namespace Media {
            namespace Core {
                interface IVideoTrackOpenFailedEventArgs;
            } /* Core */
        } /* Media */
    } /* Windows */
} /* ABI */
#define __x_ABI_CWindows_CMedia_CCore_CIVideoTrackOpenFailedEventArgs ABI::Windows::Media::Core::IVideoTrackOpenFailedEventArgs

#endif // ____x_ABI_CWindows_CMedia_CCore_CIVideoTrackOpenFailedEventArgs_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CCore_CIVideoTrackSupportInfo_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CCore_CIVideoTrackSupportInfo_FWD_DEFINED__
namespace ABI {
    namespace Windows {
        namespace Media {
            namespace Core {
                interface IVideoTrackSupportInfo;
            } /* Core */
        } /* Media */
    } /* Windows */
} /* ABI */
#define __x_ABI_CWindows_CMedia_CCore_CIVideoTrackSupportInfo ABI::Windows::Media::Core::IVideoTrackSupportInfo

#endif // ____x_ABI_CWindows_CMedia_CCore_CIVideoTrackSupportInfo_FWD_DEFINED__

// Parameterized interface forward declarations (C++)

// Collection interface definitions
namespace ABI {
    namespace Windows {
        namespace Media {
            namespace Core {
                class CodecInfo;
            } /* Core */
        } /* Media */
    } /* Windows */
} /* ABI */

#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x40000

#ifndef DEF___FIIterator_1_Windows__CMedia__CCore__CCodecInfo_USE
#define DEF___FIIterator_1_Windows__CMedia__CCore__CCodecInfo_USE
#if !defined(RO_NO_TEMPLATE_NAME)
namespace ABI { namespace Windows { namespace Foundation { namespace Collections {
template <>
struct __declspec(uuid("d4141d5b-23f6-564b-b85c-5d4609f81863"))
IIterator<ABI::Windows::Media::Core::CodecInfo*> : IIterator_impl<ABI::Windows::Foundation::Internal::AggregateType<ABI::Windows::Media::Core::CodecInfo*, ABI::Windows::Media::Core::ICodecInfo*>>
{
    static const wchar_t* z_get_rc_name_impl()
    {
        return L"Windows.Foundation.Collections.IIterator`1<Windows.Media.Core.CodecInfo>";
    }
};
// Define a typedef for the parameterized interface specialization's mangled name.
// This allows code which uses the mangled name for the parameterized interface to access the
// correct parameterized interface specialization.
typedef IIterator<ABI::Windows::Media::Core::CodecInfo*> __FIIterator_1_Windows__CMedia__CCore__CCodecInfo_t;
#define __FIIterator_1_Windows__CMedia__CCore__CCodecInfo ABI::Windows::Foundation::Collections::__FIIterator_1_Windows__CMedia__CCore__CCodecInfo_t
/* Collections */ } /* Foundation */ } /* Windows */ } /* ABI */ }

#endif // !defined(RO_NO_TEMPLATE_NAME)
#endif /* DEF___FIIterator_1_Windows__CMedia__CCore__CCodecInfo_USE */

#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x40000

#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x40000

#ifndef DEF___FIIterable_1_Windows__CMedia__CCore__CCodecInfo_USE
#define DEF___FIIterable_1_Windows__CMedia__CCore__CCodecInfo_USE
#if !defined(RO_NO_TEMPLATE_NAME)
namespace ABI { namespace Windows { namespace Foundation { namespace Collections {
template <>
struct __declspec(uuid("552f7709-3bc3-59fb-93e6-1ebd28d3c008"))
IIterable<ABI::Windows::Media::Core::CodecInfo*> : IIterable_impl<ABI::Windows::Foundation::Internal::AggregateType<ABI::Windows::Media::Core::CodecInfo*, ABI::Windows::Media::Core::ICodecInfo*>>
{
    static const wchar_t* z_get_rc_name_impl()
    {
        return L"Windows.Foundation.Collections.IIterable`1<Windows.Media.Core.CodecInfo>";
    }
};
// Define a typedef for the parameterized interface specialization's mangled name.
// This allows code which uses the mangled name for the parameterized interface to access the
// correct parameterized interface specialization.
typedef IIterable<ABI::Windows::Media::Core::CodecInfo*> __FIIterable_1_Windows__CMedia__CCore__CCodecInfo_t;
#define __FIIterable_1_Windows__CMedia__CCore__CCodecInfo ABI::Windows::Foundation::Collections::__FIIterable_1_Windows__CMedia__CCore__CCodecInfo_t
/* Collections */ } /* Foundation */ } /* Windows */ } /* ABI */ }

#endif // !defined(RO_NO_TEMPLATE_NAME)
#endif /* DEF___FIIterable_1_Windows__CMedia__CCore__CCodecInfo_USE */

#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x40000

#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x40000

#ifndef DEF___FIVectorView_1_Windows__CMedia__CCore__CCodecInfo_USE
#define DEF___FIVectorView_1_Windows__CMedia__CCore__CCodecInfo_USE
#if !defined(RO_NO_TEMPLATE_NAME)
namespace ABI { namespace Windows { namespace Foundation { namespace Collections {
template <>
struct __declspec(uuid("1fd24a93-c3da-513d-b216-0c4c7f412b88"))
IVectorView<ABI::Windows::Media::Core::CodecInfo*> : IVectorView_impl<ABI::Windows::Foundation::Internal::AggregateType<ABI::Windows::Media::Core::CodecInfo*, ABI::Windows::Media::Core::ICodecInfo*>>
{
    static const wchar_t* z_get_rc_name_impl()
    {
        return L"Windows.Foundation.Collections.IVectorView`1<Windows.Media.Core.CodecInfo>";
    }
};
// Define a typedef for the parameterized interface specialization's mangled name.
// This allows code which uses the mangled name for the parameterized interface to access the
// correct parameterized interface specialization.
typedef IVectorView<ABI::Windows::Media::Core::CodecInfo*> __FIVectorView_1_Windows__CMedia__CCore__CCodecInfo_t;
#define __FIVectorView_1_Windows__CMedia__CCore__CCodecInfo ABI::Windows::Foundation::Collections::__FIVectorView_1_Windows__CMedia__CCore__CCodecInfo_t
/* Collections */ } /* Foundation */ } /* Windows */ } /* ABI */ }

#endif // !defined(RO_NO_TEMPLATE_NAME)
#endif /* DEF___FIVectorView_1_Windows__CMedia__CCore__CCodecInfo_USE */

#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x40000

#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x40000

#ifndef DEF___FIAsyncOperation_1___FIVectorView_1_Windows__CMedia__CCore__CCodecInfo_USE
#define DEF___FIAsyncOperation_1___FIVectorView_1_Windows__CMedia__CCore__CCodecInfo_USE
#if !defined(RO_NO_TEMPLATE_NAME)
namespace ABI { namespace Windows { namespace Foundation {
template <>
struct __declspec(uuid("c1c59efc-71df-5534-b03f-e18a8fbe78bb"))
IAsyncOperation<__FIVectorView_1_Windows__CMedia__CCore__CCodecInfo*> : IAsyncOperation_impl<__FIVectorView_1_Windows__CMedia__CCore__CCodecInfo*>
{
    static const wchar_t* z_get_rc_name_impl()
    {
        return L"Windows.Foundation.IAsyncOperation`1<Windows.Foundation.Collections.IVectorView`1<Windows.Media.Core.CodecInfo>>";
    }
};
// Define a typedef for the parameterized interface specialization's mangled name.
// This allows code which uses the mangled name for the parameterized interface to access the
// correct parameterized interface specialization.
typedef IAsyncOperation<__FIVectorView_1_Windows__CMedia__CCore__CCodecInfo*> __FIAsyncOperation_1___FIVectorView_1_Windows__CMedia__CCore__CCodecInfo_t;
#define __FIAsyncOperation_1___FIVectorView_1_Windows__CMedia__CCore__CCodecInfo ABI::Windows::Foundation::__FIAsyncOperation_1___FIVectorView_1_Windows__CMedia__CCore__CCodecInfo_t
/* Foundation */ } /* Windows */ } /* ABI */ }

#endif // !defined(RO_NO_TEMPLATE_NAME)
#endif /* DEF___FIAsyncOperation_1___FIVectorView_1_Windows__CMedia__CCore__CCodecInfo_USE */

#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x40000

#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x40000

#ifndef DEF___FIAsyncOperationCompletedHandler_1___FIVectorView_1_Windows__CMedia__CCore__CCodecInfo_USE
#define DEF___FIAsyncOperationCompletedHandler_1___FIVectorView_1_Windows__CMedia__CCore__CCodecInfo_USE
#if !defined(RO_NO_TEMPLATE_NAME)
namespace ABI { namespace Windows { namespace Foundation {
template <>
struct __declspec(uuid("58bf2d7c-ae9b-5f1b-8b66-5ff1bbb1029a"))
IAsyncOperationCompletedHandler<__FIVectorView_1_Windows__CMedia__CCore__CCodecInfo*> : IAsyncOperationCompletedHandler_impl<__FIVectorView_1_Windows__CMedia__CCore__CCodecInfo*>
{
    static const wchar_t* z_get_rc_name_impl()
    {
        return L"Windows.Foundation.AsyncOperationCompletedHandler`1<Windows.Foundation.Collections.IVectorView`1<Windows.Media.Core.CodecInfo>>";
    }
};
// Define a typedef for the parameterized interface specialization's mangled name.
// This allows code which uses the mangled name for the parameterized interface to access the
// correct parameterized interface specialization.
typedef IAsyncOperationCompletedHandler<__FIVectorView_1_Windows__CMedia__CCore__CCodecInfo*> __FIAsyncOperationCompletedHandler_1___FIVectorView_1_Windows__CMedia__CCore__CCodecInfo_t;
#define __FIAsyncOperationCompletedHandler_1___FIVectorView_1_Windows__CMedia__CCore__CCodecInfo ABI::Windows::Foundation::__FIAsyncOperationCompletedHandler_1___FIVectorView_1_Windows__CMedia__CCore__CCodecInfo_t
/* Foundation */ } /* Windows */ } /* ABI */ }

#endif // !defined(RO_NO_TEMPLATE_NAME)
#endif /* DEF___FIAsyncOperationCompletedHandler_1___FIVectorView_1_Windows__CMedia__CCore__CCodecInfo_USE */

#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x40000

namespace ABI {
    namespace Windows {
        namespace Media {
            namespace Core {
                class MediaStreamSample;
            } /* Core */
        } /* Media */
    } /* Windows */
} /* ABI */

#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

#ifndef DEF___FIAsyncOperation_1_Windows__CMedia__CCore__CMediaStreamSample_USE
#define DEF___FIAsyncOperation_1_Windows__CMedia__CCore__CMediaStreamSample_USE
#if !defined(RO_NO_TEMPLATE_NAME)
namespace ABI { namespace Windows { namespace Foundation {
template <>
struct __declspec(uuid("3cdc5e86-4ada-5ef7-967a-e137a4621907"))
IAsyncOperation<ABI::Windows::Media::Core::MediaStreamSample*> : IAsyncOperation_impl<ABI::Windows::Foundation::Internal::AggregateType<ABI::Windows::Media::Core::MediaStreamSample*, ABI::Windows::Media::Core::IMediaStreamSample*>>
{
    static const wchar_t* z_get_rc_name_impl()
    {
        return L"Windows.Foundation.IAsyncOperation`1<Windows.Media.Core.MediaStreamSample>";
    }
};
// Define a typedef for the parameterized interface specialization's mangled name.
// This allows code which uses the mangled name for the parameterized interface to access the
// correct parameterized interface specialization.
typedef IAsyncOperation<ABI::Windows::Media::Core::MediaStreamSample*> __FIAsyncOperation_1_Windows__CMedia__CCore__CMediaStreamSample_t;
#define __FIAsyncOperation_1_Windows__CMedia__CCore__CMediaStreamSample ABI::Windows::Foundation::__FIAsyncOperation_1_Windows__CMedia__CCore__CMediaStreamSample_t
/* Foundation */ } /* Windows */ } /* ABI */ }

#endif // !defined(RO_NO_TEMPLATE_NAME)
#endif /* DEF___FIAsyncOperation_1_Windows__CMedia__CCore__CMediaStreamSample_USE */

#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

#ifndef DEF___FIAsyncOperationCompletedHandler_1_Windows__CMedia__CCore__CMediaStreamSample_USE
#define DEF___FIAsyncOperationCompletedHandler_1_Windows__CMedia__CCore__CMediaStreamSample_USE
#if !defined(RO_NO_TEMPLATE_NAME)
namespace ABI { namespace Windows { namespace Foundation {
template <>
struct __declspec(uuid("df7aacc9-a86c-5c7d-bf98-cc371c97c67b"))
IAsyncOperationCompletedHandler<ABI::Windows::Media::Core::MediaStreamSample*> : IAsyncOperationCompletedHandler_impl<ABI::Windows::Foundation::Internal::AggregateType<ABI::Windows::Media::Core::MediaStreamSample*, ABI::Windows::Media::Core::IMediaStreamSample*>>
{
    static const wchar_t* z_get_rc_name_impl()
    {
        return L"Windows.Foundation.AsyncOperationCompletedHandler`1<Windows.Media.Core.MediaStreamSample>";
    }
};
// Define a typedef for the parameterized interface specialization's mangled name.
// This allows code which uses the mangled name for the parameterized interface to access the
// correct parameterized interface specialization.
typedef IAsyncOperationCompletedHandler<ABI::Windows::Media::Core::MediaStreamSample*> __FIAsyncOperationCompletedHandler_1_Windows__CMedia__CCore__CMediaStreamSample_t;
#define __FIAsyncOperationCompletedHandler_1_Windows__CMedia__CCore__CMediaStreamSample ABI::Windows::Foundation::__FIAsyncOperationCompletedHandler_1_Windows__CMedia__CCore__CMediaStreamSample_t
/* Foundation */ } /* Windows */ } /* ABI */ }

#endif // !defined(RO_NO_TEMPLATE_NAME)
#endif /* DEF___FIAsyncOperationCompletedHandler_1_Windows__CMedia__CCore__CMediaStreamSample_USE */

#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

namespace ABI {
    namespace Windows {
        namespace Media {
            namespace Core {
                class LowLightFusionResult;
            } /* Core */
        } /* Media */
    } /* Windows */
} /* ABI */

#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x50000

#ifndef DEF___FIAsyncOperationWithProgressCompletedHandler_2_Windows__CMedia__CCore__CLowLightFusionResult_double_USE
#define DEF___FIAsyncOperationWithProgressCompletedHandler_2_Windows__CMedia__CCore__CLowLightFusionResult_double_USE
#if !defined(RO_NO_TEMPLATE_NAME)
namespace ABI { namespace Windows { namespace Foundation {
template <>
struct __declspec(uuid("4a952fc2-efce-5275-90d0-3689be26f666"))
IAsyncOperationWithProgressCompletedHandler<ABI::Windows::Media::Core::LowLightFusionResult*, double> : IAsyncOperationWithProgressCompletedHandler_impl<ABI::Windows::Foundation::Internal::AggregateType<ABI::Windows::Media::Core::LowLightFusionResult*, ABI::Windows::Media::Core::ILowLightFusionResult*>, double>
{
    static const wchar_t* z_get_rc_name_impl()
    {
        return L"Windows.Foundation.AsyncOperationWithProgressCompletedHandler`2<Windows.Media.Core.LowLightFusionResult, Double>";
    }
};
// Define a typedef for the parameterized interface specialization's mangled name.
// This allows code which uses the mangled name for the parameterized interface to access the
// correct parameterized interface specialization.
typedef IAsyncOperationWithProgressCompletedHandler<ABI::Windows::Media::Core::LowLightFusionResult*, double> __FIAsyncOperationWithProgressCompletedHandler_2_Windows__CMedia__CCore__CLowLightFusionResult_double_t;
#define __FIAsyncOperationWithProgressCompletedHandler_2_Windows__CMedia__CCore__CLowLightFusionResult_double ABI::Windows::Foundation::__FIAsyncOperationWithProgressCompletedHandler_2_Windows__CMedia__CCore__CLowLightFusionResult_double_t
/* Foundation */ } /* Windows */ } /* ABI */ }

#endif // !defined(RO_NO_TEMPLATE_NAME)
#endif /* DEF___FIAsyncOperationWithProgressCompletedHandler_2_Windows__CMedia__CCore__CLowLightFusionResult_double_USE */

#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x50000

#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x50000

#ifndef DEF___FIAsyncOperationWithProgress_2_Windows__CMedia__CCore__CLowLightFusionResult_double_USE
#define DEF___FIAsyncOperationWithProgress_2_Windows__CMedia__CCore__CLowLightFusionResult_double_USE
#if !defined(RO_NO_TEMPLATE_NAME)
namespace ABI { namespace Windows { namespace Foundation {
template <>
struct __declspec(uuid("a2302c2d-66b5-59c7-ab97-3f5793e21d43"))
IAsyncOperationWithProgress<ABI::Windows::Media::Core::LowLightFusionResult*, double> : IAsyncOperationWithProgress_impl<ABI::Windows::Foundation::Internal::AggregateType<ABI::Windows::Media::Core::LowLightFusionResult*, ABI::Windows::Media::Core::ILowLightFusionResult*>, double>
{
    static const wchar_t* z_get_rc_name_impl()
    {
        return L"Windows.Foundation.IAsyncOperationWithProgress`2<Windows.Media.Core.LowLightFusionResult, Double>";
    }
};
// Define a typedef for the parameterized interface specialization's mangled name.
// This allows code which uses the mangled name for the parameterized interface to access the
// correct parameterized interface specialization.
typedef IAsyncOperationWithProgress<ABI::Windows::Media::Core::LowLightFusionResult*, double> __FIAsyncOperationWithProgress_2_Windows__CMedia__CCore__CLowLightFusionResult_double_t;
#define __FIAsyncOperationWithProgress_2_Windows__CMedia__CCore__CLowLightFusionResult_double ABI::Windows::Foundation::__FIAsyncOperationWithProgress_2_Windows__CMedia__CCore__CLowLightFusionResult_double_t
/* Foundation */ } /* Windows */ } /* ABI */ }

#endif // !defined(RO_NO_TEMPLATE_NAME)
#endif /* DEF___FIAsyncOperationWithProgress_2_Windows__CMedia__CCore__CLowLightFusionResult_double_USE */

#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x50000

#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x50000

#ifndef DEF___FIAsyncOperationProgressHandler_2_Windows__CMedia__CCore__CLowLightFusionResult_double_USE
#define DEF___FIAsyncOperationProgressHandler_2_Windows__CMedia__CCore__CLowLightFusionResult_double_USE
#if !defined(RO_NO_TEMPLATE_NAME)
namespace ABI { namespace Windows { namespace Foundation {
template <>
struct __declspec(uuid("79337bbf-7b7f-5f88-a2ea-8df14ae31de4"))
IAsyncOperationProgressHandler<ABI::Windows::Media::Core::LowLightFusionResult*, double> : IAsyncOperationProgressHandler_impl<ABI::Windows::Foundation::Internal::AggregateType<ABI::Windows::Media::Core::LowLightFusionResult*, ABI::Windows::Media::Core::ILowLightFusionResult*>, double>
{
    static const wchar_t* z_get_rc_name_impl()
    {
        return L"Windows.Foundation.AsyncOperationProgressHandler`2<Windows.Media.Core.LowLightFusionResult, Double>";
    }
};
// Define a typedef for the parameterized interface specialization's mangled name.
// This allows code which uses the mangled name for the parameterized interface to access the
// correct parameterized interface specialization.
typedef IAsyncOperationProgressHandler<ABI::Windows::Media::Core::LowLightFusionResult*, double> __FIAsyncOperationProgressHandler_2_Windows__CMedia__CCore__CLowLightFusionResult_double_t;
#define __FIAsyncOperationProgressHandler_2_Windows__CMedia__CCore__CLowLightFusionResult_double ABI::Windows::Foundation::__FIAsyncOperationProgressHandler_2_Windows__CMedia__CCore__CLowLightFusionResult_double_t
/* Foundation */ } /* Windows */ } /* ABI */ }

#endif // !defined(RO_NO_TEMPLATE_NAME)
#endif /* DEF___FIAsyncOperationProgressHandler_2_Windows__CMedia__CCore__CLowLightFusionResult_double_USE */

#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x50000


#ifndef DEF___FIIterator_1_HSTRING_USE
#define DEF___FIIterator_1_HSTRING_USE
#if !defined(RO_NO_TEMPLATE_NAME)
namespace ABI { namespace Windows { namespace Foundation { namespace Collections {
template <>
struct __declspec(uuid("8c304ebb-6615-50a4-8829-879ecd443236"))
IIterator<HSTRING> : IIterator_impl<HSTRING>
{
    static const wchar_t* z_get_rc_name_impl()
    {
        return L"Windows.Foundation.Collections.IIterator`1<String>";
    }
};
// Define a typedef for the parameterized interface specialization's mangled name.
// This allows code which uses the mangled name for the parameterized interface to access the
// correct parameterized interface specialization.
typedef IIterator<HSTRING> __FIIterator_1_HSTRING_t;
#define __FIIterator_1_HSTRING ABI::Windows::Foundation::Collections::__FIIterator_1_HSTRING_t
/* Collections */ } /* Foundation */ } /* Windows */ } /* ABI */ }

#endif // !defined(RO_NO_TEMPLATE_NAME)
#endif /* DEF___FIIterator_1_HSTRING_USE */



#ifndef DEF___FIIterable_1_HSTRING_USE
#define DEF___FIIterable_1_HSTRING_USE
#if !defined(RO_NO_TEMPLATE_NAME)
namespace ABI { namespace Windows { namespace Foundation { namespace Collections {
template <>
struct __declspec(uuid("e2fcc7c1-3bfc-5a0b-b2b0-72e769d1cb7e"))
IIterable<HSTRING> : IIterable_impl<HSTRING>
{
    static const wchar_t* z_get_rc_name_impl()
    {
        return L"Windows.Foundation.Collections.IIterable`1<String>";
    }
};
// Define a typedef for the parameterized interface specialization's mangled name.
// This allows code which uses the mangled name for the parameterized interface to access the
// correct parameterized interface specialization.
typedef IIterable<HSTRING> __FIIterable_1_HSTRING_t;
#define __FIIterable_1_HSTRING ABI::Windows::Foundation::Collections::__FIIterable_1_HSTRING_t
/* Collections */ } /* Foundation */ } /* Windows */ } /* ABI */ }

#endif // !defined(RO_NO_TEMPLATE_NAME)
#endif /* DEF___FIIterable_1_HSTRING_USE */



#ifndef DEF___FIKeyValuePair_2_GUID_IInspectable_USE
#define DEF___FIKeyValuePair_2_GUID_IInspectable_USE
#if !defined(RO_NO_TEMPLATE_NAME)
namespace ABI { namespace Windows { namespace Foundation { namespace Collections {
template <>
struct __declspec(uuid("3bda1540-d089-5a1a-8f0d-94eba8068e58"))
IKeyValuePair<GUID, IInspectable*> : IKeyValuePair_impl<GUID, IInspectable*>
{
    static const wchar_t* z_get_rc_name_impl()
    {
        return L"Windows.Foundation.Collections.IKeyValuePair`2<Guid, Object>";
    }
};
// Define a typedef for the parameterized interface specialization's mangled name.
// This allows code which uses the mangled name for the parameterized interface to access the
// correct parameterized interface specialization.
typedef IKeyValuePair<GUID, IInspectable*> __FIKeyValuePair_2_GUID_IInspectable_t;
#define __FIKeyValuePair_2_GUID_IInspectable ABI::Windows::Foundation::Collections::__FIKeyValuePair_2_GUID_IInspectable_t
/* Collections */ } /* Foundation */ } /* Windows */ } /* ABI */ }

#endif // !defined(RO_NO_TEMPLATE_NAME)
#endif /* DEF___FIKeyValuePair_2_GUID_IInspectable_USE */



#ifndef DEF___FIIterator_1___FIKeyValuePair_2_GUID_IInspectable_USE
#define DEF___FIIterator_1___FIKeyValuePair_2_GUID_IInspectable_USE
#if !defined(RO_NO_TEMPLATE_NAME)
namespace ABI { namespace Windows { namespace Foundation { namespace Collections {
template <>
struct __declspec(uuid("4f25059a-0b9a-5f25-9b9e-4b9f1d22ff65"))
IIterator<__FIKeyValuePair_2_GUID_IInspectable*> : IIterator_impl<__FIKeyValuePair_2_GUID_IInspectable*>
{
    static const wchar_t* z_get_rc_name_impl()
    {
        return L"Windows.Foundation.Collections.IIterator`1<Windows.Foundation.Collections.IKeyValuePair`2<Guid, Object>>";
    }
};
// Define a typedef for the parameterized interface specialization's mangled name.
// This allows code which uses the mangled name for the parameterized interface to access the
// correct parameterized interface specialization.
typedef IIterator<__FIKeyValuePair_2_GUID_IInspectable*> __FIIterator_1___FIKeyValuePair_2_GUID_IInspectable_t;
#define __FIIterator_1___FIKeyValuePair_2_GUID_IInspectable ABI::Windows::Foundation::Collections::__FIIterator_1___FIKeyValuePair_2_GUID_IInspectable_t
/* Collections */ } /* Foundation */ } /* Windows */ } /* ABI */ }

#endif // !defined(RO_NO_TEMPLATE_NAME)
#endif /* DEF___FIIterator_1___FIKeyValuePair_2_GUID_IInspectable_USE */



#ifndef DEF___FIIterable_1___FIKeyValuePair_2_GUID_IInspectable_USE
#define DEF___FIIterable_1___FIKeyValuePair_2_GUID_IInspectable_USE
#if !defined(RO_NO_TEMPLATE_NAME)
namespace ABI { namespace Windows { namespace Foundation { namespace Collections {
template <>
struct __declspec(uuid("f3b20528-e3b3-5331-b2d0-0c2623aee785"))
IIterable<__FIKeyValuePair_2_GUID_IInspectable*> : IIterable_impl<__FIKeyValuePair_2_GUID_IInspectable*>
{
    static const wchar_t* z_get_rc_name_impl()
    {
        return L"Windows.Foundation.Collections.IIterable`1<Windows.Foundation.Collections.IKeyValuePair`2<Guid, Object>>";
    }
};
// Define a typedef for the parameterized interface specialization's mangled name.
// This allows code which uses the mangled name for the parameterized interface to access the
// correct parameterized interface specialization.
typedef IIterable<__FIKeyValuePair_2_GUID_IInspectable*> __FIIterable_1___FIKeyValuePair_2_GUID_IInspectable_t;
#define __FIIterable_1___FIKeyValuePair_2_GUID_IInspectable ABI::Windows::Foundation::Collections::__FIIterable_1___FIKeyValuePair_2_GUID_IInspectable_t
/* Collections */ } /* Foundation */ } /* Windows */ } /* ABI */ }

#endif // !defined(RO_NO_TEMPLATE_NAME)
#endif /* DEF___FIIterable_1___FIKeyValuePair_2_GUID_IInspectable_USE */


namespace ABI {
    namespace Windows {
        namespace Graphics {
            namespace Imaging {
                typedef enum BitmapPixelFormat : int BitmapPixelFormat;
            } /* Imaging */
        } /* Graphics */
    } /* Windows */
} /* ABI */

#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

#ifndef DEF___FIIterator_1_Windows__CGraphics__CImaging__CBitmapPixelFormat_USE
#define DEF___FIIterator_1_Windows__CGraphics__CImaging__CBitmapPixelFormat_USE
#if !defined(RO_NO_TEMPLATE_NAME)
namespace ABI { namespace Windows { namespace Foundation { namespace Collections {
template <>
struct __declspec(uuid("7fc2e293-1084-5d45-b8b8-93e10692bcc8"))
IIterator<enum ABI::Windows::Graphics::Imaging::BitmapPixelFormat> : IIterator_impl<enum ABI::Windows::Graphics::Imaging::BitmapPixelFormat>
{
    static const wchar_t* z_get_rc_name_impl()
    {
        return L"Windows.Foundation.Collections.IIterator`1<Windows.Graphics.Imaging.BitmapPixelFormat>";
    }
};
// Define a typedef for the parameterized interface specialization's mangled name.
// This allows code which uses the mangled name for the parameterized interface to access the
// correct parameterized interface specialization.
typedef IIterator<enum ABI::Windows::Graphics::Imaging::BitmapPixelFormat> __FIIterator_1_Windows__CGraphics__CImaging__CBitmapPixelFormat_t;
#define __FIIterator_1_Windows__CGraphics__CImaging__CBitmapPixelFormat ABI::Windows::Foundation::Collections::__FIIterator_1_Windows__CGraphics__CImaging__CBitmapPixelFormat_t
/* Collections */ } /* Foundation */ } /* Windows */ } /* ABI */ }

#endif // !defined(RO_NO_TEMPLATE_NAME)
#endif /* DEF___FIIterator_1_Windows__CGraphics__CImaging__CBitmapPixelFormat_USE */

#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

#ifndef DEF___FIIterable_1_Windows__CGraphics__CImaging__CBitmapPixelFormat_USE
#define DEF___FIIterable_1_Windows__CGraphics__CImaging__CBitmapPixelFormat_USE
#if !defined(RO_NO_TEMPLATE_NAME)
namespace ABI { namespace Windows { namespace Foundation { namespace Collections {
template <>
struct __declspec(uuid("e924d9ed-a13e-5bdb-9ed8-65a1474dc274"))
IIterable<enum ABI::Windows::Graphics::Imaging::BitmapPixelFormat> : IIterable_impl<enum ABI::Windows::Graphics::Imaging::BitmapPixelFormat>
{
    static const wchar_t* z_get_rc_name_impl()
    {
        return L"Windows.Foundation.Collections.IIterable`1<Windows.Graphics.Imaging.BitmapPixelFormat>";
    }
};
// Define a typedef for the parameterized interface specialization's mangled name.
// This allows code which uses the mangled name for the parameterized interface to access the
// correct parameterized interface specialization.
typedef IIterable<enum ABI::Windows::Graphics::Imaging::BitmapPixelFormat> __FIIterable_1_Windows__CGraphics__CImaging__CBitmapPixelFormat_t;
#define __FIIterable_1_Windows__CGraphics__CImaging__CBitmapPixelFormat ABI::Windows::Foundation::Collections::__FIIterable_1_Windows__CGraphics__CImaging__CBitmapPixelFormat_t
/* Collections */ } /* Foundation */ } /* Windows */ } /* ABI */ }

#endif // !defined(RO_NO_TEMPLATE_NAME)
#endif /* DEF___FIIterable_1_Windows__CGraphics__CImaging__CBitmapPixelFormat_USE */

#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

namespace ABI {
    namespace Windows {
        namespace Graphics {
            namespace Imaging {
                class SoftwareBitmap;
            } /* Imaging */
        } /* Graphics */
    } /* Windows */
} /* ABI */

#ifndef ____x_ABI_CWindows_CGraphics_CImaging_CISoftwareBitmap_FWD_DEFINED__
#define ____x_ABI_CWindows_CGraphics_CImaging_CISoftwareBitmap_FWD_DEFINED__
namespace ABI {
    namespace Windows {
        namespace Graphics {
            namespace Imaging {
                interface ISoftwareBitmap;
            } /* Imaging */
        } /* Graphics */
    } /* Windows */
} /* ABI */
#define __x_ABI_CWindows_CGraphics_CImaging_CISoftwareBitmap ABI::Windows::Graphics::Imaging::ISoftwareBitmap

#endif // ____x_ABI_CWindows_CGraphics_CImaging_CISoftwareBitmap_FWD_DEFINED__

#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

#ifndef DEF___FIIterator_1_Windows__CGraphics__CImaging__CSoftwareBitmap_USE
#define DEF___FIIterator_1_Windows__CGraphics__CImaging__CSoftwareBitmap_USE
#if !defined(RO_NO_TEMPLATE_NAME)
namespace ABI { namespace Windows { namespace Foundation { namespace Collections {
template <>
struct __declspec(uuid("cd12e4c3-8ca8-5be6-b64b-204a014fc620"))
IIterator<ABI::Windows::Graphics::Imaging::SoftwareBitmap*> : IIterator_impl<ABI::Windows::Foundation::Internal::AggregateType<ABI::Windows::Graphics::Imaging::SoftwareBitmap*, ABI::Windows::Graphics::Imaging::ISoftwareBitmap*>>
{
    static const wchar_t* z_get_rc_name_impl()
    {
        return L"Windows.Foundation.Collections.IIterator`1<Windows.Graphics.Imaging.SoftwareBitmap>";
    }
};
// Define a typedef for the parameterized interface specialization's mangled name.
// This allows code which uses the mangled name for the parameterized interface to access the
// correct parameterized interface specialization.
typedef IIterator<ABI::Windows::Graphics::Imaging::SoftwareBitmap*> __FIIterator_1_Windows__CGraphics__CImaging__CSoftwareBitmap_t;
#define __FIIterator_1_Windows__CGraphics__CImaging__CSoftwareBitmap ABI::Windows::Foundation::Collections::__FIIterator_1_Windows__CGraphics__CImaging__CSoftwareBitmap_t
/* Collections */ } /* Foundation */ } /* Windows */ } /* ABI */ }

#endif // !defined(RO_NO_TEMPLATE_NAME)
#endif /* DEF___FIIterator_1_Windows__CGraphics__CImaging__CSoftwareBitmap_USE */

#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

#ifndef DEF___FIIterable_1_Windows__CGraphics__CImaging__CSoftwareBitmap_USE
#define DEF___FIIterable_1_Windows__CGraphics__CImaging__CSoftwareBitmap_USE
#if !defined(RO_NO_TEMPLATE_NAME)
namespace ABI { namespace Windows { namespace Foundation { namespace Collections {
template <>
struct __declspec(uuid("22d3a30f-0898-5e94-99a3-afa5951dfcd4"))
IIterable<ABI::Windows::Graphics::Imaging::SoftwareBitmap*> : IIterable_impl<ABI::Windows::Foundation::Internal::AggregateType<ABI::Windows::Graphics::Imaging::SoftwareBitmap*, ABI::Windows::Graphics::Imaging::ISoftwareBitmap*>>
{
    static const wchar_t* z_get_rc_name_impl()
    {
        return L"Windows.Foundation.Collections.IIterable`1<Windows.Graphics.Imaging.SoftwareBitmap>";
    }
};
// Define a typedef for the parameterized interface specialization's mangled name.
// This allows code which uses the mangled name for the parameterized interface to access the
// correct parameterized interface specialization.
typedef IIterable<ABI::Windows::Graphics::Imaging::SoftwareBitmap*> __FIIterable_1_Windows__CGraphics__CImaging__CSoftwareBitmap_t;
#define __FIIterable_1_Windows__CGraphics__CImaging__CSoftwareBitmap ABI::Windows::Foundation::Collections::__FIIterable_1_Windows__CGraphics__CImaging__CSoftwareBitmap_t
/* Collections */ } /* Foundation */ } /* Windows */ } /* ABI */ }

#endif // !defined(RO_NO_TEMPLATE_NAME)
#endif /* DEF___FIIterable_1_Windows__CGraphics__CImaging__CSoftwareBitmap_USE */

#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

#ifndef DEF___FIIterator_1_Windows__CMedia__CCore__CIMediaCue_USE
#define DEF___FIIterator_1_Windows__CMedia__CCore__CIMediaCue_USE
#if !defined(RO_NO_TEMPLATE_NAME)
namespace ABI { namespace Windows { namespace Foundation { namespace Collections {
template <>
struct __declspec(uuid("1a594dc8-a64b-55ed-9b34-7b274e1d5c70"))
IIterator<ABI::Windows::Media::Core::IMediaCue*> : IIterator_impl<ABI::Windows::Media::Core::IMediaCue*>
{
    static const wchar_t* z_get_rc_name_impl()
    {
        return L"Windows.Foundation.Collections.IIterator`1<Windows.Media.Core.IMediaCue>";
    }
};
// Define a typedef for the parameterized interface specialization's mangled name.
// This allows code which uses the mangled name for the parameterized interface to access the
// correct parameterized interface specialization.
typedef IIterator<ABI::Windows::Media::Core::IMediaCue*> __FIIterator_1_Windows__CMedia__CCore__CIMediaCue_t;
#define __FIIterator_1_Windows__CMedia__CCore__CIMediaCue ABI::Windows::Foundation::Collections::__FIIterator_1_Windows__CMedia__CCore__CIMediaCue_t
/* Collections */ } /* Foundation */ } /* Windows */ } /* ABI */ }

#endif // !defined(RO_NO_TEMPLATE_NAME)
#endif /* DEF___FIIterator_1_Windows__CMedia__CCore__CIMediaCue_USE */

#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

#ifndef DEF___FIIterable_1_Windows__CMedia__CCore__CIMediaCue_USE
#define DEF___FIIterable_1_Windows__CMedia__CCore__CIMediaCue_USE
#if !defined(RO_NO_TEMPLATE_NAME)
namespace ABI { namespace Windows { namespace Foundation { namespace Collections {
template <>
struct __declspec(uuid("737a2098-41bf-5d9f-a1d2-2f171c578b3c"))
IIterable<ABI::Windows::Media::Core::IMediaCue*> : IIterable_impl<ABI::Windows::Media::Core::IMediaCue*>
{
    static const wchar_t* z_get_rc_name_impl()
    {
        return L"Windows.Foundation.Collections.IIterable`1<Windows.Media.Core.IMediaCue>";
    }
};
// Define a typedef for the parameterized interface specialization's mangled name.
// This allows code which uses the mangled name for the parameterized interface to access the
// correct parameterized interface specialization.
typedef IIterable<ABI::Windows::Media::Core::IMediaCue*> __FIIterable_1_Windows__CMedia__CCore__CIMediaCue_t;
#define __FIIterable_1_Windows__CMedia__CCore__CIMediaCue ABI::Windows::Foundation::Collections::__FIIterable_1_Windows__CMedia__CCore__CIMediaCue_t
/* Collections */ } /* Foundation */ } /* Windows */ } /* ABI */ }

#endif // !defined(RO_NO_TEMPLATE_NAME)
#endif /* DEF___FIIterable_1_Windows__CMedia__CCore__CIMediaCue_USE */

#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

namespace ABI {
    namespace Windows {
        namespace Media {
            namespace Core {
                class MseSourceBuffer;
            } /* Core */
        } /* Media */
    } /* Windows */
} /* ABI */

#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

#ifndef DEF___FIIterator_1_Windows__CMedia__CCore__CMseSourceBuffer_USE
#define DEF___FIIterator_1_Windows__CMedia__CCore__CMseSourceBuffer_USE
#if !defined(RO_NO_TEMPLATE_NAME)
namespace ABI { namespace Windows { namespace Foundation { namespace Collections {
template <>
struct __declspec(uuid("53076581-01a9-51b9-98cc-5265504cd352"))
IIterator<ABI::Windows::Media::Core::MseSourceBuffer*> : IIterator_impl<ABI::Windows::Foundation::Internal::AggregateType<ABI::Windows::Media::Core::MseSourceBuffer*, ABI::Windows::Media::Core::IMseSourceBuffer*>>
{
    static const wchar_t* z_get_rc_name_impl()
    {
        return L"Windows.Foundation.Collections.IIterator`1<Windows.Media.Core.MseSourceBuffer>";
    }
};
// Define a typedef for the parameterized interface specialization's mangled name.
// This allows code which uses the mangled name for the parameterized interface to access the
// correct parameterized interface specialization.
typedef IIterator<ABI::Windows::Media::Core::MseSourceBuffer*> __FIIterator_1_Windows__CMedia__CCore__CMseSourceBuffer_t;
#define __FIIterator_1_Windows__CMedia__CCore__CMseSourceBuffer ABI::Windows::Foundation::Collections::__FIIterator_1_Windows__CMedia__CCore__CMseSourceBuffer_t
/* Collections */ } /* Foundation */ } /* Windows */ } /* ABI */ }

#endif // !defined(RO_NO_TEMPLATE_NAME)
#endif /* DEF___FIIterator_1_Windows__CMedia__CCore__CMseSourceBuffer_USE */

#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

#ifndef DEF___FIIterable_1_Windows__CMedia__CCore__CMseSourceBuffer_USE
#define DEF___FIIterable_1_Windows__CMedia__CCore__CMseSourceBuffer_USE
#if !defined(RO_NO_TEMPLATE_NAME)
namespace ABI { namespace Windows { namespace Foundation { namespace Collections {
template <>
struct __declspec(uuid("5ca0da86-6307-558a-865f-3a1ef9fe56b3"))
IIterable<ABI::Windows::Media::Core::MseSourceBuffer*> : IIterable_impl<ABI::Windows::Foundation::Internal::AggregateType<ABI::Windows::Media::Core::MseSourceBuffer*, ABI::Windows::Media::Core::IMseSourceBuffer*>>
{
    static const wchar_t* z_get_rc_name_impl()
    {
        return L"Windows.Foundation.Collections.IIterable`1<Windows.Media.Core.MseSourceBuffer>";
    }
};
// Define a typedef for the parameterized interface specialization's mangled name.
// This allows code which uses the mangled name for the parameterized interface to access the
// correct parameterized interface specialization.
typedef IIterable<ABI::Windows::Media::Core::MseSourceBuffer*> __FIIterable_1_Windows__CMedia__CCore__CMseSourceBuffer_t;
#define __FIIterable_1_Windows__CMedia__CCore__CMseSourceBuffer ABI::Windows::Foundation::Collections::__FIIterable_1_Windows__CMedia__CCore__CMseSourceBuffer_t
/* Collections */ } /* Foundation */ } /* Windows */ } /* ABI */ }

#endif // !defined(RO_NO_TEMPLATE_NAME)
#endif /* DEF___FIIterable_1_Windows__CMedia__CCore__CMseSourceBuffer_USE */

#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

namespace ABI {
    namespace Windows {
        namespace Media {
            namespace Core {
                typedef struct MseTimeRange MseTimeRange;
            } /* Core */
        } /* Media */
    } /* Windows */
} /* ABI */

#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

#ifndef DEF___FIIterator_1_Windows__CMedia__CCore__CMseTimeRange_USE
#define DEF___FIIterator_1_Windows__CMedia__CCore__CMseTimeRange_USE
#if !defined(RO_NO_TEMPLATE_NAME)
namespace ABI { namespace Windows { namespace Foundation { namespace Collections {
template <>
struct __declspec(uuid("92a36852-fbb3-5b48-b4ec-01dda0972a5c"))
IIterator<struct ABI::Windows::Media::Core::MseTimeRange> : IIterator_impl<struct ABI::Windows::Media::Core::MseTimeRange>
{
    static const wchar_t* z_get_rc_name_impl()
    {
        return L"Windows.Foundation.Collections.IIterator`1<Windows.Media.Core.MseTimeRange>";
    }
};
// Define a typedef for the parameterized interface specialization's mangled name.
// This allows code which uses the mangled name for the parameterized interface to access the
// correct parameterized interface specialization.
typedef IIterator<struct ABI::Windows::Media::Core::MseTimeRange> __FIIterator_1_Windows__CMedia__CCore__CMseTimeRange_t;
#define __FIIterator_1_Windows__CMedia__CCore__CMseTimeRange ABI::Windows::Foundation::Collections::__FIIterator_1_Windows__CMedia__CCore__CMseTimeRange_t
/* Collections */ } /* Foundation */ } /* Windows */ } /* ABI */ }

#endif // !defined(RO_NO_TEMPLATE_NAME)
#endif /* DEF___FIIterator_1_Windows__CMedia__CCore__CMseTimeRange_USE */

#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

#ifndef DEF___FIIterable_1_Windows__CMedia__CCore__CMseTimeRange_USE
#define DEF___FIIterable_1_Windows__CMedia__CCore__CMseTimeRange_USE
#if !defined(RO_NO_TEMPLATE_NAME)
namespace ABI { namespace Windows { namespace Foundation { namespace Collections {
template <>
struct __declspec(uuid("ed0c6e08-e22f-5ac2-ba14-e0ff1df3467f"))
IIterable<struct ABI::Windows::Media::Core::MseTimeRange> : IIterable_impl<struct ABI::Windows::Media::Core::MseTimeRange>
{
    static const wchar_t* z_get_rc_name_impl()
    {
        return L"Windows.Foundation.Collections.IIterable`1<Windows.Media.Core.MseTimeRange>";
    }
};
// Define a typedef for the parameterized interface specialization's mangled name.
// This allows code which uses the mangled name for the parameterized interface to access the
// correct parameterized interface specialization.
typedef IIterable<struct ABI::Windows::Media::Core::MseTimeRange> __FIIterable_1_Windows__CMedia__CCore__CMseTimeRange_t;
#define __FIIterable_1_Windows__CMedia__CCore__CMseTimeRange ABI::Windows::Foundation::Collections::__FIIterable_1_Windows__CMedia__CCore__CMseTimeRange_t
/* Collections */ } /* Foundation */ } /* Windows */ } /* ABI */ }

#endif // !defined(RO_NO_TEMPLATE_NAME)
#endif /* DEF___FIIterable_1_Windows__CMedia__CCore__CMseTimeRange_USE */

#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

namespace ABI {
    namespace Windows {
        namespace Media {
            namespace Core {
                class TimedMetadataTrack;
            } /* Core */
        } /* Media */
    } /* Windows */
} /* ABI */

#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

#ifndef DEF___FIIterator_1_Windows__CMedia__CCore__CTimedMetadataTrack_USE
#define DEF___FIIterator_1_Windows__CMedia__CCore__CTimedMetadataTrack_USE
#if !defined(RO_NO_TEMPLATE_NAME)
namespace ABI { namespace Windows { namespace Foundation { namespace Collections {
template <>
struct __declspec(uuid("859354e5-077b-5d53-b297-1a07b97f09c3"))
IIterator<ABI::Windows::Media::Core::TimedMetadataTrack*> : IIterator_impl<ABI::Windows::Foundation::Internal::AggregateType<ABI::Windows::Media::Core::TimedMetadataTrack*, ABI::Windows::Media::Core::ITimedMetadataTrack*>>
{
    static const wchar_t* z_get_rc_name_impl()
    {
        return L"Windows.Foundation.Collections.IIterator`1<Windows.Media.Core.TimedMetadataTrack>";
    }
};
// Define a typedef for the parameterized interface specialization's mangled name.
// This allows code which uses the mangled name for the parameterized interface to access the
// correct parameterized interface specialization.
typedef IIterator<ABI::Windows::Media::Core::TimedMetadataTrack*> __FIIterator_1_Windows__CMedia__CCore__CTimedMetadataTrack_t;
#define __FIIterator_1_Windows__CMedia__CCore__CTimedMetadataTrack ABI::Windows::Foundation::Collections::__FIIterator_1_Windows__CMedia__CCore__CTimedMetadataTrack_t
/* Collections */ } /* Foundation */ } /* Windows */ } /* ABI */ }

#endif // !defined(RO_NO_TEMPLATE_NAME)
#endif /* DEF___FIIterator_1_Windows__CMedia__CCore__CTimedMetadataTrack_USE */

#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

#ifndef DEF___FIIterable_1_Windows__CMedia__CCore__CTimedMetadataTrack_USE
#define DEF___FIIterable_1_Windows__CMedia__CCore__CTimedMetadataTrack_USE
#if !defined(RO_NO_TEMPLATE_NAME)
namespace ABI { namespace Windows { namespace Foundation { namespace Collections {
template <>
struct __declspec(uuid("150a4454-03bb-5dd1-8153-6a600e851f71"))
IIterable<ABI::Windows::Media::Core::TimedMetadataTrack*> : IIterable_impl<ABI::Windows::Foundation::Internal::AggregateType<ABI::Windows::Media::Core::TimedMetadataTrack*, ABI::Windows::Media::Core::ITimedMetadataTrack*>>
{
    static const wchar_t* z_get_rc_name_impl()
    {
        return L"Windows.Foundation.Collections.IIterable`1<Windows.Media.Core.TimedMetadataTrack>";
    }
};
// Define a typedef for the parameterized interface specialization's mangled name.
// This allows code which uses the mangled name for the parameterized interface to access the
// correct parameterized interface specialization.
typedef IIterable<ABI::Windows::Media::Core::TimedMetadataTrack*> __FIIterable_1_Windows__CMedia__CCore__CTimedMetadataTrack_t;
#define __FIIterable_1_Windows__CMedia__CCore__CTimedMetadataTrack ABI::Windows::Foundation::Collections::__FIIterable_1_Windows__CMedia__CCore__CTimedMetadataTrack_t
/* Collections */ } /* Foundation */ } /* Windows */ } /* ABI */ }

#endif // !defined(RO_NO_TEMPLATE_NAME)
#endif /* DEF___FIIterable_1_Windows__CMedia__CCore__CTimedMetadataTrack_USE */

#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

namespace ABI {
    namespace Windows {
        namespace Media {
            namespace Core {
                class TimedTextLine;
            } /* Core */
        } /* Media */
    } /* Windows */
} /* ABI */

#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

#ifndef DEF___FIIterator_1_Windows__CMedia__CCore__CTimedTextLine_USE
#define DEF___FIIterator_1_Windows__CMedia__CCore__CTimedTextLine_USE
#if !defined(RO_NO_TEMPLATE_NAME)
namespace ABI { namespace Windows { namespace Foundation { namespace Collections {
template <>
struct __declspec(uuid("84c4fcac-86d8-5c74-a138-d9bf37b749ec"))
IIterator<ABI::Windows::Media::Core::TimedTextLine*> : IIterator_impl<ABI::Windows::Foundation::Internal::AggregateType<ABI::Windows::Media::Core::TimedTextLine*, ABI::Windows::Media::Core::ITimedTextLine*>>
{
    static const wchar_t* z_get_rc_name_impl()
    {
        return L"Windows.Foundation.Collections.IIterator`1<Windows.Media.Core.TimedTextLine>";
    }
};
// Define a typedef for the parameterized interface specialization's mangled name.
// This allows code which uses the mangled name for the parameterized interface to access the
// correct parameterized interface specialization.
typedef IIterator<ABI::Windows::Media::Core::TimedTextLine*> __FIIterator_1_Windows__CMedia__CCore__CTimedTextLine_t;
#define __FIIterator_1_Windows__CMedia__CCore__CTimedTextLine ABI::Windows::Foundation::Collections::__FIIterator_1_Windows__CMedia__CCore__CTimedTextLine_t
/* Collections */ } /* Foundation */ } /* Windows */ } /* ABI */ }

#endif // !defined(RO_NO_TEMPLATE_NAME)
#endif /* DEF___FIIterator_1_Windows__CMedia__CCore__CTimedTextLine_USE */

#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

#ifndef DEF___FIIterable_1_Windows__CMedia__CCore__CTimedTextLine_USE
#define DEF___FIIterable_1_Windows__CMedia__CCore__CTimedTextLine_USE
#if !defined(RO_NO_TEMPLATE_NAME)
namespace ABI { namespace Windows { namespace Foundation { namespace Collections {
template <>
struct __declspec(uuid("aec710ad-3bd8-5a59-ae77-e7fc46fb105b"))
IIterable<ABI::Windows::Media::Core::TimedTextLine*> : IIterable_impl<ABI::Windows::Foundation::Internal::AggregateType<ABI::Windows::Media::Core::TimedTextLine*, ABI::Windows::Media::Core::ITimedTextLine*>>
{
    static const wchar_t* z_get_rc_name_impl()
    {
        return L"Windows.Foundation.Collections.IIterable`1<Windows.Media.Core.TimedTextLine>";
    }
};
// Define a typedef for the parameterized interface specialization's mangled name.
// This allows code which uses the mangled name for the parameterized interface to access the
// correct parameterized interface specialization.
typedef IIterable<ABI::Windows::Media::Core::TimedTextLine*> __FIIterable_1_Windows__CMedia__CCore__CTimedTextLine_t;
#define __FIIterable_1_Windows__CMedia__CCore__CTimedTextLine ABI::Windows::Foundation::Collections::__FIIterable_1_Windows__CMedia__CCore__CTimedTextLine_t
/* Collections */ } /* Foundation */ } /* Windows */ } /* ABI */ }

#endif // !defined(RO_NO_TEMPLATE_NAME)
#endif /* DEF___FIIterable_1_Windows__CMedia__CCore__CTimedTextLine_USE */

#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

namespace ABI {
    namespace Windows {
        namespace Media {
            namespace Core {
                class TimedTextSource;
            } /* Core */
        } /* Media */
    } /* Windows */
} /* ABI */

#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

#ifndef DEF___FIIterator_1_Windows__CMedia__CCore__CTimedTextSource_USE
#define DEF___FIIterator_1_Windows__CMedia__CCore__CTimedTextSource_USE
#if !defined(RO_NO_TEMPLATE_NAME)
namespace ABI { namespace Windows { namespace Foundation { namespace Collections {
template <>
struct __declspec(uuid("bdded7c0-5c73-57f5-9b08-652933586dd5"))
IIterator<ABI::Windows::Media::Core::TimedTextSource*> : IIterator_impl<ABI::Windows::Foundation::Internal::AggregateType<ABI::Windows::Media::Core::TimedTextSource*, ABI::Windows::Media::Core::ITimedTextSource*>>
{
    static const wchar_t* z_get_rc_name_impl()
    {
        return L"Windows.Foundation.Collections.IIterator`1<Windows.Media.Core.TimedTextSource>";
    }
};
// Define a typedef for the parameterized interface specialization's mangled name.
// This allows code which uses the mangled name for the parameterized interface to access the
// correct parameterized interface specialization.
typedef IIterator<ABI::Windows::Media::Core::TimedTextSource*> __FIIterator_1_Windows__CMedia__CCore__CTimedTextSource_t;
#define __FIIterator_1_Windows__CMedia__CCore__CTimedTextSource ABI::Windows::Foundation::Collections::__FIIterator_1_Windows__CMedia__CCore__CTimedTextSource_t
/* Collections */ } /* Foundation */ } /* Windows */ } /* ABI */ }

#endif // !defined(RO_NO_TEMPLATE_NAME)
#endif /* DEF___FIIterator_1_Windows__CMedia__CCore__CTimedTextSource_USE */

#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

#ifndef DEF___FIIterable_1_Windows__CMedia__CCore__CTimedTextSource_USE
#define DEF___FIIterable_1_Windows__CMedia__CCore__CTimedTextSource_USE
#if !defined(RO_NO_TEMPLATE_NAME)
namespace ABI { namespace Windows { namespace Foundation { namespace Collections {
template <>
struct __declspec(uuid("4fc57282-0edf-5d85-9d89-ddc2a5692c13"))
IIterable<ABI::Windows::Media::Core::TimedTextSource*> : IIterable_impl<ABI::Windows::Foundation::Internal::AggregateType<ABI::Windows::Media::Core::TimedTextSource*, ABI::Windows::Media::Core::ITimedTextSource*>>
{
    static const wchar_t* z_get_rc_name_impl()
    {
        return L"Windows.Foundation.Collections.IIterable`1<Windows.Media.Core.TimedTextSource>";
    }
};
// Define a typedef for the parameterized interface specialization's mangled name.
// This allows code which uses the mangled name for the parameterized interface to access the
// correct parameterized interface specialization.
typedef IIterable<ABI::Windows::Media::Core::TimedTextSource*> __FIIterable_1_Windows__CMedia__CCore__CTimedTextSource_t;
#define __FIIterable_1_Windows__CMedia__CCore__CTimedTextSource ABI::Windows::Foundation::Collections::__FIIterable_1_Windows__CMedia__CCore__CTimedTextSource_t
/* Collections */ } /* Foundation */ } /* Windows */ } /* ABI */ }

#endif // !defined(RO_NO_TEMPLATE_NAME)
#endif /* DEF___FIIterable_1_Windows__CMedia__CCore__CTimedTextSource_USE */

#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

namespace ABI {
    namespace Windows {
        namespace Media {
            namespace Core {
                class TimedTextSubformat;
            } /* Core */
        } /* Media */
    } /* Windows */
} /* ABI */

#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

#ifndef DEF___FIIterator_1_Windows__CMedia__CCore__CTimedTextSubformat_USE
#define DEF___FIIterator_1_Windows__CMedia__CCore__CTimedTextSubformat_USE
#if !defined(RO_NO_TEMPLATE_NAME)
namespace ABI { namespace Windows { namespace Foundation { namespace Collections {
template <>
struct __declspec(uuid("65105e50-865c-591d-9bf4-96237de2533f"))
IIterator<ABI::Windows::Media::Core::TimedTextSubformat*> : IIterator_impl<ABI::Windows::Foundation::Internal::AggregateType<ABI::Windows::Media::Core::TimedTextSubformat*, ABI::Windows::Media::Core::ITimedTextSubformat*>>
{
    static const wchar_t* z_get_rc_name_impl()
    {
        return L"Windows.Foundation.Collections.IIterator`1<Windows.Media.Core.TimedTextSubformat>";
    }
};
// Define a typedef for the parameterized interface specialization's mangled name.
// This allows code which uses the mangled name for the parameterized interface to access the
// correct parameterized interface specialization.
typedef IIterator<ABI::Windows::Media::Core::TimedTextSubformat*> __FIIterator_1_Windows__CMedia__CCore__CTimedTextSubformat_t;
#define __FIIterator_1_Windows__CMedia__CCore__CTimedTextSubformat ABI::Windows::Foundation::Collections::__FIIterator_1_Windows__CMedia__CCore__CTimedTextSubformat_t
/* Collections */ } /* Foundation */ } /* Windows */ } /* ABI */ }

#endif // !defined(RO_NO_TEMPLATE_NAME)
#endif /* DEF___FIIterator_1_Windows__CMedia__CCore__CTimedTextSubformat_USE */

#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

#ifndef DEF___FIIterable_1_Windows__CMedia__CCore__CTimedTextSubformat_USE
#define DEF___FIIterable_1_Windows__CMedia__CCore__CTimedTextSubformat_USE
#if !defined(RO_NO_TEMPLATE_NAME)
namespace ABI { namespace Windows { namespace Foundation { namespace Collections {
template <>
struct __declspec(uuid("cee3ae43-c93c-56f7-8c55-9024ded72c76"))
IIterable<ABI::Windows::Media::Core::TimedTextSubformat*> : IIterable_impl<ABI::Windows::Foundation::Internal::AggregateType<ABI::Windows::Media::Core::TimedTextSubformat*, ABI::Windows::Media::Core::ITimedTextSubformat*>>
{
    static const wchar_t* z_get_rc_name_impl()
    {
        return L"Windows.Foundation.Collections.IIterable`1<Windows.Media.Core.TimedTextSubformat>";
    }
};
// Define a typedef for the parameterized interface specialization's mangled name.
// This allows code which uses the mangled name for the parameterized interface to access the
// correct parameterized interface specialization.
typedef IIterable<ABI::Windows::Media::Core::TimedTextSubformat*> __FIIterable_1_Windows__CMedia__CCore__CTimedTextSubformat_t;
#define __FIIterable_1_Windows__CMedia__CCore__CTimedTextSubformat ABI::Windows::Foundation::Collections::__FIIterable_1_Windows__CMedia__CCore__CTimedTextSubformat_t
/* Collections */ } /* Foundation */ } /* Windows */ } /* ABI */ }

#endif // !defined(RO_NO_TEMPLATE_NAME)
#endif /* DEF___FIIterable_1_Windows__CMedia__CCore__CTimedTextSubformat_USE */

#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

namespace ABI {
    namespace Windows {
        namespace Media {
            namespace Devices {
                namespace Core {
                    class FrameController;
                } /* Core */
            } /* Devices */
        } /* Media */
    } /* Windows */
} /* ABI */

#ifndef ____x_ABI_CWindows_CMedia_CDevices_CCore_CIFrameController_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CDevices_CCore_CIFrameController_FWD_DEFINED__
namespace ABI {
    namespace Windows {
        namespace Media {
            namespace Devices {
                namespace Core {
                    interface IFrameController;
                } /* Core */
            } /* Devices */
        } /* Media */
    } /* Windows */
} /* ABI */
#define __x_ABI_CWindows_CMedia_CDevices_CCore_CIFrameController ABI::Windows::Media::Devices::Core::IFrameController

#endif // ____x_ABI_CWindows_CMedia_CDevices_CCore_CIFrameController_FWD_DEFINED__

#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

#ifndef DEF___FIIterator_1_Windows__CMedia__CDevices__CCore__CFrameController_USE
#define DEF___FIIterator_1_Windows__CMedia__CDevices__CCore__CFrameController_USE
#if !defined(RO_NO_TEMPLATE_NAME)
namespace ABI { namespace Windows { namespace Foundation { namespace Collections {
template <>
struct __declspec(uuid("1440dc88-63ff-5a01-bb93-390c76742488"))
IIterator<ABI::Windows::Media::Devices::Core::FrameController*> : IIterator_impl<ABI::Windows::Foundation::Internal::AggregateType<ABI::Windows::Media::Devices::Core::FrameController*, ABI::Windows::Media::Devices::Core::IFrameController*>>
{
    static const wchar_t* z_get_rc_name_impl()
    {
        return L"Windows.Foundation.Collections.IIterator`1<Windows.Media.Devices.Core.FrameController>";
    }
};
// Define a typedef for the parameterized interface specialization's mangled name.
// This allows code which uses the mangled name for the parameterized interface to access the
// correct parameterized interface specialization.
typedef IIterator<ABI::Windows::Media::Devices::Core::FrameController*> __FIIterator_1_Windows__CMedia__CDevices__CCore__CFrameController_t;
#define __FIIterator_1_Windows__CMedia__CDevices__CCore__CFrameController ABI::Windows::Foundation::Collections::__FIIterator_1_Windows__CMedia__CDevices__CCore__CFrameController_t
/* Collections */ } /* Foundation */ } /* Windows */ } /* ABI */ }

#endif // !defined(RO_NO_TEMPLATE_NAME)
#endif /* DEF___FIIterator_1_Windows__CMedia__CDevices__CCore__CFrameController_USE */

#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

#ifndef DEF___FIIterable_1_Windows__CMedia__CDevices__CCore__CFrameController_USE
#define DEF___FIIterable_1_Windows__CMedia__CDevices__CCore__CFrameController_USE
#if !defined(RO_NO_TEMPLATE_NAME)
namespace ABI { namespace Windows { namespace Foundation { namespace Collections {
template <>
struct __declspec(uuid("bd8eeadc-2dd9-5ad8-ac5d-f3b13b94b9c2"))
IIterable<ABI::Windows::Media::Devices::Core::FrameController*> : IIterable_impl<ABI::Windows::Foundation::Internal::AggregateType<ABI::Windows::Media::Devices::Core::FrameController*, ABI::Windows::Media::Devices::Core::IFrameController*>>
{
    static const wchar_t* z_get_rc_name_impl()
    {
        return L"Windows.Foundation.Collections.IIterable`1<Windows.Media.Devices.Core.FrameController>";
    }
};
// Define a typedef for the parameterized interface specialization's mangled name.
// This allows code which uses the mangled name for the parameterized interface to access the
// correct parameterized interface specialization.
typedef IIterable<ABI::Windows::Media::Devices::Core::FrameController*> __FIIterable_1_Windows__CMedia__CDevices__CCore__CFrameController_t;
#define __FIIterable_1_Windows__CMedia__CDevices__CCore__CFrameController ABI::Windows::Foundation::Collections::__FIIterable_1_Windows__CMedia__CDevices__CCore__CFrameController_t
/* Collections */ } /* Foundation */ } /* Windows */ } /* ABI */ }

#endif // !defined(RO_NO_TEMPLATE_NAME)
#endif /* DEF___FIIterable_1_Windows__CMedia__CDevices__CCore__CFrameController_USE */

#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

namespace ABI {
    namespace Windows {
        namespace Media {
            namespace FaceAnalysis {
                class DetectedFace;
            } /* FaceAnalysis */
        } /* Media */
    } /* Windows */
} /* ABI */

#ifndef ____x_ABI_CWindows_CMedia_CFaceAnalysis_CIDetectedFace_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CFaceAnalysis_CIDetectedFace_FWD_DEFINED__
namespace ABI {
    namespace Windows {
        namespace Media {
            namespace FaceAnalysis {
                interface IDetectedFace;
            } /* FaceAnalysis */
        } /* Media */
    } /* Windows */
} /* ABI */
#define __x_ABI_CWindows_CMedia_CFaceAnalysis_CIDetectedFace ABI::Windows::Media::FaceAnalysis::IDetectedFace

#endif // ____x_ABI_CWindows_CMedia_CFaceAnalysis_CIDetectedFace_FWD_DEFINED__

#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

#ifndef DEF___FIIterator_1_Windows__CMedia__CFaceAnalysis__CDetectedFace_USE
#define DEF___FIIterator_1_Windows__CMedia__CFaceAnalysis__CDetectedFace_USE
#if !defined(RO_NO_TEMPLATE_NAME)
namespace ABI { namespace Windows { namespace Foundation { namespace Collections {
template <>
struct __declspec(uuid("a0cf090e-0340-531f-898b-c21eafb9f4ae"))
IIterator<ABI::Windows::Media::FaceAnalysis::DetectedFace*> : IIterator_impl<ABI::Windows::Foundation::Internal::AggregateType<ABI::Windows::Media::FaceAnalysis::DetectedFace*, ABI::Windows::Media::FaceAnalysis::IDetectedFace*>>
{
    static const wchar_t* z_get_rc_name_impl()
    {
        return L"Windows.Foundation.Collections.IIterator`1<Windows.Media.FaceAnalysis.DetectedFace>";
    }
};
// Define a typedef for the parameterized interface specialization's mangled name.
// This allows code which uses the mangled name for the parameterized interface to access the
// correct parameterized interface specialization.
typedef IIterator<ABI::Windows::Media::FaceAnalysis::DetectedFace*> __FIIterator_1_Windows__CMedia__CFaceAnalysis__CDetectedFace_t;
#define __FIIterator_1_Windows__CMedia__CFaceAnalysis__CDetectedFace ABI::Windows::Foundation::Collections::__FIIterator_1_Windows__CMedia__CFaceAnalysis__CDetectedFace_t
/* Collections */ } /* Foundation */ } /* Windows */ } /* ABI */ }

#endif // !defined(RO_NO_TEMPLATE_NAME)
#endif /* DEF___FIIterator_1_Windows__CMedia__CFaceAnalysis__CDetectedFace_USE */

#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

#ifndef DEF___FIIterable_1_Windows__CMedia__CFaceAnalysis__CDetectedFace_USE
#define DEF___FIIterable_1_Windows__CMedia__CFaceAnalysis__CDetectedFace_USE
#if !defined(RO_NO_TEMPLATE_NAME)
namespace ABI { namespace Windows { namespace Foundation { namespace Collections {
template <>
struct __declspec(uuid("25347323-3556-5cbb-9855-2b5856437f4d"))
IIterable<ABI::Windows::Media::FaceAnalysis::DetectedFace*> : IIterable_impl<ABI::Windows::Foundation::Internal::AggregateType<ABI::Windows::Media::FaceAnalysis::DetectedFace*, ABI::Windows::Media::FaceAnalysis::IDetectedFace*>>
{
    static const wchar_t* z_get_rc_name_impl()
    {
        return L"Windows.Foundation.Collections.IIterable`1<Windows.Media.FaceAnalysis.DetectedFace>";
    }
};
// Define a typedef for the parameterized interface specialization's mangled name.
// This allows code which uses the mangled name for the parameterized interface to access the
// correct parameterized interface specialization.
typedef IIterable<ABI::Windows::Media::FaceAnalysis::DetectedFace*> __FIIterable_1_Windows__CMedia__CFaceAnalysis__CDetectedFace_t;
#define __FIIterable_1_Windows__CMedia__CFaceAnalysis__CDetectedFace ABI::Windows::Foundation::Collections::__FIIterable_1_Windows__CMedia__CFaceAnalysis__CDetectedFace_t
/* Collections */ } /* Foundation */ } /* Windows */ } /* ABI */ }

#endif // !defined(RO_NO_TEMPLATE_NAME)
#endif /* DEF___FIIterable_1_Windows__CMedia__CFaceAnalysis__CDetectedFace_USE */

#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000


#ifndef DEF___FIMapView_2_GUID_IInspectable_USE
#define DEF___FIMapView_2_GUID_IInspectable_USE
#if !defined(RO_NO_TEMPLATE_NAME)
namespace ABI { namespace Windows { namespace Foundation { namespace Collections {
template <>
struct __declspec(uuid("e4d2c732-bbc1-5ef4-869f-5007ceb55f6e"))
IMapView<GUID, IInspectable*> : IMapView_impl<GUID, IInspectable*>
{
    static const wchar_t* z_get_rc_name_impl()
    {
        return L"Windows.Foundation.Collections.IMapView`2<Guid, Object>";
    }
};
// Define a typedef for the parameterized interface specialization's mangled name.
// This allows code which uses the mangled name for the parameterized interface to access the
// correct parameterized interface specialization.
typedef IMapView<GUID, IInspectable*> __FIMapView_2_GUID_IInspectable_t;
#define __FIMapView_2_GUID_IInspectable ABI::Windows::Foundation::Collections::__FIMapView_2_GUID_IInspectable_t
/* Collections */ } /* Foundation */ } /* Windows */ } /* ABI */ }

#endif // !defined(RO_NO_TEMPLATE_NAME)
#endif /* DEF___FIMapView_2_GUID_IInspectable_USE */



#ifndef DEF___FIMap_2_GUID_IInspectable_USE
#define DEF___FIMap_2_GUID_IInspectable_USE
#if !defined(RO_NO_TEMPLATE_NAME)
namespace ABI { namespace Windows { namespace Foundation { namespace Collections {
template <>
struct __declspec(uuid("5ee3189c-7dbf-5998-ad07-5414fb82567c"))
IMap<GUID, IInspectable*> : IMap_impl<GUID, IInspectable*>
{
    static const wchar_t* z_get_rc_name_impl()
    {
        return L"Windows.Foundation.Collections.IMap`2<Guid, Object>";
    }
};
// Define a typedef for the parameterized interface specialization's mangled name.
// This allows code which uses the mangled name for the parameterized interface to access the
// correct parameterized interface specialization.
typedef IMap<GUID, IInspectable*> __FIMap_2_GUID_IInspectable_t;
#define __FIMap_2_GUID_IInspectable ABI::Windows::Foundation::Collections::__FIMap_2_GUID_IInspectable_t
/* Collections */ } /* Foundation */ } /* Windows */ } /* ABI */ }

#endif // !defined(RO_NO_TEMPLATE_NAME)
#endif /* DEF___FIMap_2_GUID_IInspectable_USE */


#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

#ifndef DEF___FIVectorView_1_Windows__CMedia__CCore__CTimedMetadataTrack_USE
#define DEF___FIVectorView_1_Windows__CMedia__CCore__CTimedMetadataTrack_USE
#if !defined(RO_NO_TEMPLATE_NAME)
namespace ABI { namespace Windows { namespace Foundation { namespace Collections {
template <>
struct __declspec(uuid("0313ae7a-2803-5d45-b5a1-a0fc5cd55e7c"))
IVectorView<ABI::Windows::Media::Core::TimedMetadataTrack*> : IVectorView_impl<ABI::Windows::Foundation::Internal::AggregateType<ABI::Windows::Media::Core::TimedMetadataTrack*, ABI::Windows::Media::Core::ITimedMetadataTrack*>>
{
    static const wchar_t* z_get_rc_name_impl()
    {
        return L"Windows.Foundation.Collections.IVectorView`1<Windows.Media.Core.TimedMetadataTrack>";
    }
};
// Define a typedef for the parameterized interface specialization's mangled name.
// This allows code which uses the mangled name for the parameterized interface to access the
// correct parameterized interface specialization.
typedef IVectorView<ABI::Windows::Media::Core::TimedMetadataTrack*> __FIVectorView_1_Windows__CMedia__CCore__CTimedMetadataTrack_t;
#define __FIVectorView_1_Windows__CMedia__CCore__CTimedMetadataTrack ABI::Windows::Foundation::Collections::__FIVectorView_1_Windows__CMedia__CCore__CTimedMetadataTrack_t
/* Collections */ } /* Foundation */ } /* Windows */ } /* ABI */ }

#endif // !defined(RO_NO_TEMPLATE_NAME)
#endif /* DEF___FIVectorView_1_Windows__CMedia__CCore__CTimedMetadataTrack_USE */

#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

#ifndef DEF___FIVector_1_Windows__CMedia__CCore__CTimedMetadataTrack_USE
#define DEF___FIVector_1_Windows__CMedia__CCore__CTimedMetadataTrack_USE
#if !defined(RO_NO_TEMPLATE_NAME)
namespace ABI { namespace Windows { namespace Foundation { namespace Collections {
template <>
struct __declspec(uuid("c46d9e34-ea11-5bb2-9744-1617417ef016"))
IVector<ABI::Windows::Media::Core::TimedMetadataTrack*> : IVector_impl<ABI::Windows::Foundation::Internal::AggregateType<ABI::Windows::Media::Core::TimedMetadataTrack*, ABI::Windows::Media::Core::ITimedMetadataTrack*>>
{
    static const wchar_t* z_get_rc_name_impl()
    {
        return L"Windows.Foundation.Collections.IVector`1<Windows.Media.Core.TimedMetadataTrack>";
    }
};
// Define a typedef for the parameterized interface specialization's mangled name.
// This allows code which uses the mangled name for the parameterized interface to access the
// correct parameterized interface specialization.
typedef IVector<ABI::Windows::Media::Core::TimedMetadataTrack*> __FIVector_1_Windows__CMedia__CCore__CTimedMetadataTrack_t;
#define __FIVector_1_Windows__CMedia__CCore__CTimedMetadataTrack ABI::Windows::Foundation::Collections::__FIVector_1_Windows__CMedia__CCore__CTimedMetadataTrack_t
/* Collections */ } /* Foundation */ } /* Windows */ } /* ABI */ }

#endif // !defined(RO_NO_TEMPLATE_NAME)
#endif /* DEF___FIVector_1_Windows__CMedia__CCore__CTimedMetadataTrack_USE */

#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

#ifndef DEF___FVectorChangedEventHandler_1_Windows__CMedia__CCore__CTimedMetadataTrack_USE
#define DEF___FVectorChangedEventHandler_1_Windows__CMedia__CCore__CTimedMetadataTrack_USE
#if !defined(RO_NO_TEMPLATE_NAME)
namespace ABI { namespace Windows { namespace Foundation { namespace Collections {
template <>
struct __declspec(uuid("bd1dc81c-23c4-5b4b-ac38-c5d34cdf34e4"))
VectorChangedEventHandler<ABI::Windows::Media::Core::TimedMetadataTrack*> : VectorChangedEventHandler_impl<ABI::Windows::Foundation::Internal::AggregateType<ABI::Windows::Media::Core::TimedMetadataTrack*, ABI::Windows::Media::Core::ITimedMetadataTrack*>>
{
    static const wchar_t* z_get_rc_name_impl()
    {
        return L"Windows.Foundation.Collections.VectorChangedEventHandler`1<Windows.Media.Core.TimedMetadataTrack>";
    }
};
// Define a typedef for the parameterized interface specialization's mangled name.
// This allows code which uses the mangled name for the parameterized interface to access the
// correct parameterized interface specialization.
typedef VectorChangedEventHandler<ABI::Windows::Media::Core::TimedMetadataTrack*> __FVectorChangedEventHandler_1_Windows__CMedia__CCore__CTimedMetadataTrack_t;
#define __FVectorChangedEventHandler_1_Windows__CMedia__CCore__CTimedMetadataTrack ABI::Windows::Foundation::Collections::__FVectorChangedEventHandler_1_Windows__CMedia__CCore__CTimedMetadataTrack_t
/* Collections */ } /* Foundation */ } /* Windows */ } /* ABI */ }

#endif // !defined(RO_NO_TEMPLATE_NAME)
#endif /* DEF___FVectorChangedEventHandler_1_Windows__CMedia__CCore__CTimedMetadataTrack_USE */

#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

#ifndef DEF___FIObservableVector_1_Windows__CMedia__CCore__CTimedMetadataTrack_USE
#define DEF___FIObservableVector_1_Windows__CMedia__CCore__CTimedMetadataTrack_USE
#if !defined(RO_NO_TEMPLATE_NAME)
namespace ABI { namespace Windows { namespace Foundation { namespace Collections {
template <>
struct __declspec(uuid("98ebeba8-6659-5af2-be4f-32fdeede3b77"))
IObservableVector<ABI::Windows::Media::Core::TimedMetadataTrack*> : IObservableVector_impl<ABI::Windows::Foundation::Internal::AggregateType<ABI::Windows::Media::Core::TimedMetadataTrack*, ABI::Windows::Media::Core::ITimedMetadataTrack*>>
{
    static const wchar_t* z_get_rc_name_impl()
    {
        return L"Windows.Foundation.Collections.IObservableVector`1<Windows.Media.Core.TimedMetadataTrack>";
    }
};
// Define a typedef for the parameterized interface specialization's mangled name.
// This allows code which uses the mangled name for the parameterized interface to access the
// correct parameterized interface specialization.
typedef IObservableVector<ABI::Windows::Media::Core::TimedMetadataTrack*> __FIObservableVector_1_Windows__CMedia__CCore__CTimedMetadataTrack_t;
#define __FIObservableVector_1_Windows__CMedia__CCore__CTimedMetadataTrack ABI::Windows::Foundation::Collections::__FIObservableVector_1_Windows__CMedia__CCore__CTimedMetadataTrack_t
/* Collections */ } /* Foundation */ } /* Windows */ } /* ABI */ }

#endif // !defined(RO_NO_TEMPLATE_NAME)
#endif /* DEF___FIObservableVector_1_Windows__CMedia__CCore__CTimedMetadataTrack_USE */

#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

#ifndef DEF___FIVectorView_1_Windows__CMedia__CCore__CTimedTextSource_USE
#define DEF___FIVectorView_1_Windows__CMedia__CCore__CTimedTextSource_USE
#if !defined(RO_NO_TEMPLATE_NAME)
namespace ABI { namespace Windows { namespace Foundation { namespace Collections {
template <>
struct __declspec(uuid("edcd634e-b7e4-5ff8-b8c2-8493849b2c0d"))
IVectorView<ABI::Windows::Media::Core::TimedTextSource*> : IVectorView_impl<ABI::Windows::Foundation::Internal::AggregateType<ABI::Windows::Media::Core::TimedTextSource*, ABI::Windows::Media::Core::ITimedTextSource*>>
{
    static const wchar_t* z_get_rc_name_impl()
    {
        return L"Windows.Foundation.Collections.IVectorView`1<Windows.Media.Core.TimedTextSource>";
    }
};
// Define a typedef for the parameterized interface specialization's mangled name.
// This allows code which uses the mangled name for the parameterized interface to access the
// correct parameterized interface specialization.
typedef IVectorView<ABI::Windows::Media::Core::TimedTextSource*> __FIVectorView_1_Windows__CMedia__CCore__CTimedTextSource_t;
#define __FIVectorView_1_Windows__CMedia__CCore__CTimedTextSource ABI::Windows::Foundation::Collections::__FIVectorView_1_Windows__CMedia__CCore__CTimedTextSource_t
/* Collections */ } /* Foundation */ } /* Windows */ } /* ABI */ }

#endif // !defined(RO_NO_TEMPLATE_NAME)
#endif /* DEF___FIVectorView_1_Windows__CMedia__CCore__CTimedTextSource_USE */

#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

#ifndef DEF___FIVector_1_Windows__CMedia__CCore__CTimedTextSource_USE
#define DEF___FIVector_1_Windows__CMedia__CCore__CTimedTextSource_USE
#if !defined(RO_NO_TEMPLATE_NAME)
namespace ABI { namespace Windows { namespace Foundation { namespace Collections {
template <>
struct __declspec(uuid("d0a72378-5432-50bf-93c3-c5f35fc93517"))
IVector<ABI::Windows::Media::Core::TimedTextSource*> : IVector_impl<ABI::Windows::Foundation::Internal::AggregateType<ABI::Windows::Media::Core::TimedTextSource*, ABI::Windows::Media::Core::ITimedTextSource*>>
{
    static const wchar_t* z_get_rc_name_impl()
    {
        return L"Windows.Foundation.Collections.IVector`1<Windows.Media.Core.TimedTextSource>";
    }
};
// Define a typedef for the parameterized interface specialization's mangled name.
// This allows code which uses the mangled name for the parameterized interface to access the
// correct parameterized interface specialization.
typedef IVector<ABI::Windows::Media::Core::TimedTextSource*> __FIVector_1_Windows__CMedia__CCore__CTimedTextSource_t;
#define __FIVector_1_Windows__CMedia__CCore__CTimedTextSource ABI::Windows::Foundation::Collections::__FIVector_1_Windows__CMedia__CCore__CTimedTextSource_t
/* Collections */ } /* Foundation */ } /* Windows */ } /* ABI */ }

#endif // !defined(RO_NO_TEMPLATE_NAME)
#endif /* DEF___FIVector_1_Windows__CMedia__CCore__CTimedTextSource_USE */

#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

#ifndef DEF___FVectorChangedEventHandler_1_Windows__CMedia__CCore__CTimedTextSource_USE
#define DEF___FVectorChangedEventHandler_1_Windows__CMedia__CCore__CTimedTextSource_USE
#if !defined(RO_NO_TEMPLATE_NAME)
namespace ABI { namespace Windows { namespace Foundation { namespace Collections {
template <>
struct __declspec(uuid("e12e6261-b198-56e0-9822-ba2d3bb6f8fe"))
VectorChangedEventHandler<ABI::Windows::Media::Core::TimedTextSource*> : VectorChangedEventHandler_impl<ABI::Windows::Foundation::Internal::AggregateType<ABI::Windows::Media::Core::TimedTextSource*, ABI::Windows::Media::Core::ITimedTextSource*>>
{
    static const wchar_t* z_get_rc_name_impl()
    {
        return L"Windows.Foundation.Collections.VectorChangedEventHandler`1<Windows.Media.Core.TimedTextSource>";
    }
};
// Define a typedef for the parameterized interface specialization's mangled name.
// This allows code which uses the mangled name for the parameterized interface to access the
// correct parameterized interface specialization.
typedef VectorChangedEventHandler<ABI::Windows::Media::Core::TimedTextSource*> __FVectorChangedEventHandler_1_Windows__CMedia__CCore__CTimedTextSource_t;
#define __FVectorChangedEventHandler_1_Windows__CMedia__CCore__CTimedTextSource ABI::Windows::Foundation::Collections::__FVectorChangedEventHandler_1_Windows__CMedia__CCore__CTimedTextSource_t
/* Collections */ } /* Foundation */ } /* Windows */ } /* ABI */ }

#endif // !defined(RO_NO_TEMPLATE_NAME)
#endif /* DEF___FVectorChangedEventHandler_1_Windows__CMedia__CCore__CTimedTextSource_USE */

#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

#ifndef DEF___FIObservableVector_1_Windows__CMedia__CCore__CTimedTextSource_USE
#define DEF___FIObservableVector_1_Windows__CMedia__CCore__CTimedTextSource_USE
#if !defined(RO_NO_TEMPLATE_NAME)
namespace ABI { namespace Windows { namespace Foundation { namespace Collections {
template <>
struct __declspec(uuid("95e6c852-6e9c-50a9-8935-054320242945"))
IObservableVector<ABI::Windows::Media::Core::TimedTextSource*> : IObservableVector_impl<ABI::Windows::Foundation::Internal::AggregateType<ABI::Windows::Media::Core::TimedTextSource*, ABI::Windows::Media::Core::ITimedTextSource*>>
{
    static const wchar_t* z_get_rc_name_impl()
    {
        return L"Windows.Foundation.Collections.IObservableVector`1<Windows.Media.Core.TimedTextSource>";
    }
};
// Define a typedef for the parameterized interface specialization's mangled name.
// This allows code which uses the mangled name for the parameterized interface to access the
// correct parameterized interface specialization.
typedef IObservableVector<ABI::Windows::Media::Core::TimedTextSource*> __FIObservableVector_1_Windows__CMedia__CCore__CTimedTextSource_t;
#define __FIObservableVector_1_Windows__CMedia__CCore__CTimedTextSource ABI::Windows::Foundation::Collections::__FIObservableVector_1_Windows__CMedia__CCore__CTimedTextSource_t
/* Collections */ } /* Foundation */ } /* Windows */ } /* ABI */ }

#endif // !defined(RO_NO_TEMPLATE_NAME)
#endif /* DEF___FIObservableVector_1_Windows__CMedia__CCore__CTimedTextSource_USE */

#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000


#ifndef DEF___FIVectorView_1_HSTRING_USE
#define DEF___FIVectorView_1_HSTRING_USE
#if !defined(RO_NO_TEMPLATE_NAME)
namespace ABI { namespace Windows { namespace Foundation { namespace Collections {
template <>
struct __declspec(uuid("2f13c006-a03a-5f69-b090-75a43e33423e"))
IVectorView<HSTRING> : IVectorView_impl<HSTRING>
{
    static const wchar_t* z_get_rc_name_impl()
    {
        return L"Windows.Foundation.Collections.IVectorView`1<String>";
    }
};
// Define a typedef for the parameterized interface specialization's mangled name.
// This allows code which uses the mangled name for the parameterized interface to access the
// correct parameterized interface specialization.
typedef IVectorView<HSTRING> __FIVectorView_1_HSTRING_t;
#define __FIVectorView_1_HSTRING ABI::Windows::Foundation::Collections::__FIVectorView_1_HSTRING_t
/* Collections */ } /* Foundation */ } /* Windows */ } /* ABI */ }

#endif // !defined(RO_NO_TEMPLATE_NAME)
#endif /* DEF___FIVectorView_1_HSTRING_USE */


#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

#ifndef DEF___FIVectorView_1_Windows__CGraphics__CImaging__CBitmapPixelFormat_USE
#define DEF___FIVectorView_1_Windows__CGraphics__CImaging__CBitmapPixelFormat_USE
#if !defined(RO_NO_TEMPLATE_NAME)
namespace ABI { namespace Windows { namespace Foundation { namespace Collections {
template <>
struct __declspec(uuid("76ac4bc2-c19c-559c-b287-1694c0dc3a0d"))
IVectorView<enum ABI::Windows::Graphics::Imaging::BitmapPixelFormat> : IVectorView_impl<enum ABI::Windows::Graphics::Imaging::BitmapPixelFormat>
{
    static const wchar_t* z_get_rc_name_impl()
    {
        return L"Windows.Foundation.Collections.IVectorView`1<Windows.Graphics.Imaging.BitmapPixelFormat>";
    }
};
// Define a typedef for the parameterized interface specialization's mangled name.
// This allows code which uses the mangled name for the parameterized interface to access the
// correct parameterized interface specialization.
typedef IVectorView<enum ABI::Windows::Graphics::Imaging::BitmapPixelFormat> __FIVectorView_1_Windows__CGraphics__CImaging__CBitmapPixelFormat_t;
#define __FIVectorView_1_Windows__CGraphics__CImaging__CBitmapPixelFormat ABI::Windows::Foundation::Collections::__FIVectorView_1_Windows__CGraphics__CImaging__CBitmapPixelFormat_t
/* Collections */ } /* Foundation */ } /* Windows */ } /* ABI */ }

#endif // !defined(RO_NO_TEMPLATE_NAME)
#endif /* DEF___FIVectorView_1_Windows__CGraphics__CImaging__CBitmapPixelFormat_USE */

#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

#ifndef DEF___FIVectorView_1_Windows__CMedia__CCore__CIMediaCue_USE
#define DEF___FIVectorView_1_Windows__CMedia__CCore__CIMediaCue_USE
#if !defined(RO_NO_TEMPLATE_NAME)
namespace ABI { namespace Windows { namespace Foundation { namespace Collections {
template <>
struct __declspec(uuid("996421a1-625c-5d92-ad68-8b3911d294b0"))
IVectorView<ABI::Windows::Media::Core::IMediaCue*> : IVectorView_impl<ABI::Windows::Media::Core::IMediaCue*>
{
    static const wchar_t* z_get_rc_name_impl()
    {
        return L"Windows.Foundation.Collections.IVectorView`1<Windows.Media.Core.IMediaCue>";
    }
};
// Define a typedef for the parameterized interface specialization's mangled name.
// This allows code which uses the mangled name for the parameterized interface to access the
// correct parameterized interface specialization.
typedef IVectorView<ABI::Windows::Media::Core::IMediaCue*> __FIVectorView_1_Windows__CMedia__CCore__CIMediaCue_t;
#define __FIVectorView_1_Windows__CMedia__CCore__CIMediaCue ABI::Windows::Foundation::Collections::__FIVectorView_1_Windows__CMedia__CCore__CIMediaCue_t
/* Collections */ } /* Foundation */ } /* Windows */ } /* ABI */ }

#endif // !defined(RO_NO_TEMPLATE_NAME)
#endif /* DEF___FIVectorView_1_Windows__CMedia__CCore__CIMediaCue_USE */

#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

#ifndef DEF___FIVectorView_1_Windows__CMedia__CCore__CMseSourceBuffer_USE
#define DEF___FIVectorView_1_Windows__CMedia__CCore__CMseSourceBuffer_USE
#if !defined(RO_NO_TEMPLATE_NAME)
namespace ABI { namespace Windows { namespace Foundation { namespace Collections {
template <>
struct __declspec(uuid("85318263-1360-5c78-b0ad-52d6b45b19f3"))
IVectorView<ABI::Windows::Media::Core::MseSourceBuffer*> : IVectorView_impl<ABI::Windows::Foundation::Internal::AggregateType<ABI::Windows::Media::Core::MseSourceBuffer*, ABI::Windows::Media::Core::IMseSourceBuffer*>>
{
    static const wchar_t* z_get_rc_name_impl()
    {
        return L"Windows.Foundation.Collections.IVectorView`1<Windows.Media.Core.MseSourceBuffer>";
    }
};
// Define a typedef for the parameterized interface specialization's mangled name.
// This allows code which uses the mangled name for the parameterized interface to access the
// correct parameterized interface specialization.
typedef IVectorView<ABI::Windows::Media::Core::MseSourceBuffer*> __FIVectorView_1_Windows__CMedia__CCore__CMseSourceBuffer_t;
#define __FIVectorView_1_Windows__CMedia__CCore__CMseSourceBuffer ABI::Windows::Foundation::Collections::__FIVectorView_1_Windows__CMedia__CCore__CMseSourceBuffer_t
/* Collections */ } /* Foundation */ } /* Windows */ } /* ABI */ }

#endif // !defined(RO_NO_TEMPLATE_NAME)
#endif /* DEF___FIVectorView_1_Windows__CMedia__CCore__CMseSourceBuffer_USE */

#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

#ifndef DEF___FIVectorView_1_Windows__CMedia__CCore__CMseTimeRange_USE
#define DEF___FIVectorView_1_Windows__CMedia__CCore__CMseTimeRange_USE
#if !defined(RO_NO_TEMPLATE_NAME)
namespace ABI { namespace Windows { namespace Foundation { namespace Collections {
template <>
struct __declspec(uuid("87ff1dd1-7ec3-5bc5-b558-0425d806bf4b"))
IVectorView<struct ABI::Windows::Media::Core::MseTimeRange> : IVectorView_impl<struct ABI::Windows::Media::Core::MseTimeRange>
{
    static const wchar_t* z_get_rc_name_impl()
    {
        return L"Windows.Foundation.Collections.IVectorView`1<Windows.Media.Core.MseTimeRange>";
    }
};
// Define a typedef for the parameterized interface specialization's mangled name.
// This allows code which uses the mangled name for the parameterized interface to access the
// correct parameterized interface specialization.
typedef IVectorView<struct ABI::Windows::Media::Core::MseTimeRange> __FIVectorView_1_Windows__CMedia__CCore__CMseTimeRange_t;
#define __FIVectorView_1_Windows__CMedia__CCore__CMseTimeRange ABI::Windows::Foundation::Collections::__FIVectorView_1_Windows__CMedia__CCore__CMseTimeRange_t
/* Collections */ } /* Foundation */ } /* Windows */ } /* ABI */ }

#endif // !defined(RO_NO_TEMPLATE_NAME)
#endif /* DEF___FIVectorView_1_Windows__CMedia__CCore__CMseTimeRange_USE */

#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

#ifndef DEF___FIVectorView_1_Windows__CMedia__CCore__CTimedTextLine_USE
#define DEF___FIVectorView_1_Windows__CMedia__CCore__CTimedTextLine_USE
#if !defined(RO_NO_TEMPLATE_NAME)
namespace ABI { namespace Windows { namespace Foundation { namespace Collections {
template <>
struct __declspec(uuid("9532b5cc-73fc-5e3a-8531-794c30d7a1ae"))
IVectorView<ABI::Windows::Media::Core::TimedTextLine*> : IVectorView_impl<ABI::Windows::Foundation::Internal::AggregateType<ABI::Windows::Media::Core::TimedTextLine*, ABI::Windows::Media::Core::ITimedTextLine*>>
{
    static const wchar_t* z_get_rc_name_impl()
    {
        return L"Windows.Foundation.Collections.IVectorView`1<Windows.Media.Core.TimedTextLine>";
    }
};
// Define a typedef for the parameterized interface specialization's mangled name.
// This allows code which uses the mangled name for the parameterized interface to access the
// correct parameterized interface specialization.
typedef IVectorView<ABI::Windows::Media::Core::TimedTextLine*> __FIVectorView_1_Windows__CMedia__CCore__CTimedTextLine_t;
#define __FIVectorView_1_Windows__CMedia__CCore__CTimedTextLine ABI::Windows::Foundation::Collections::__FIVectorView_1_Windows__CMedia__CCore__CTimedTextLine_t
/* Collections */ } /* Foundation */ } /* Windows */ } /* ABI */ }

#endif // !defined(RO_NO_TEMPLATE_NAME)
#endif /* DEF___FIVectorView_1_Windows__CMedia__CCore__CTimedTextLine_USE */

#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

#ifndef DEF___FIVectorView_1_Windows__CMedia__CCore__CTimedTextSubformat_USE
#define DEF___FIVectorView_1_Windows__CMedia__CCore__CTimedTextSubformat_USE
#if !defined(RO_NO_TEMPLATE_NAME)
namespace ABI { namespace Windows { namespace Foundation { namespace Collections {
template <>
struct __declspec(uuid("411a0e26-42e2-5e65-b9c4-980c4c3f31f7"))
IVectorView<ABI::Windows::Media::Core::TimedTextSubformat*> : IVectorView_impl<ABI::Windows::Foundation::Internal::AggregateType<ABI::Windows::Media::Core::TimedTextSubformat*, ABI::Windows::Media::Core::ITimedTextSubformat*>>
{
    static const wchar_t* z_get_rc_name_impl()
    {
        return L"Windows.Foundation.Collections.IVectorView`1<Windows.Media.Core.TimedTextSubformat>";
    }
};
// Define a typedef for the parameterized interface specialization's mangled name.
// This allows code which uses the mangled name for the parameterized interface to access the
// correct parameterized interface specialization.
typedef IVectorView<ABI::Windows::Media::Core::TimedTextSubformat*> __FIVectorView_1_Windows__CMedia__CCore__CTimedTextSubformat_t;
#define __FIVectorView_1_Windows__CMedia__CCore__CTimedTextSubformat ABI::Windows::Foundation::Collections::__FIVectorView_1_Windows__CMedia__CCore__CTimedTextSubformat_t
/* Collections */ } /* Foundation */ } /* Windows */ } /* ABI */ }

#endif // !defined(RO_NO_TEMPLATE_NAME)
#endif /* DEF___FIVectorView_1_Windows__CMedia__CCore__CTimedTextSubformat_USE */

#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

#ifndef DEF___FIVectorView_1_Windows__CMedia__CDevices__CCore__CFrameController_USE
#define DEF___FIVectorView_1_Windows__CMedia__CDevices__CCore__CFrameController_USE
#if !defined(RO_NO_TEMPLATE_NAME)
namespace ABI { namespace Windows { namespace Foundation { namespace Collections {
template <>
struct __declspec(uuid("fcd6a2a3-b6ff-5572-912b-99ebaf95165d"))
IVectorView<ABI::Windows::Media::Devices::Core::FrameController*> : IVectorView_impl<ABI::Windows::Foundation::Internal::AggregateType<ABI::Windows::Media::Devices::Core::FrameController*, ABI::Windows::Media::Devices::Core::IFrameController*>>
{
    static const wchar_t* z_get_rc_name_impl()
    {
        return L"Windows.Foundation.Collections.IVectorView`1<Windows.Media.Devices.Core.FrameController>";
    }
};
// Define a typedef for the parameterized interface specialization's mangled name.
// This allows code which uses the mangled name for the parameterized interface to access the
// correct parameterized interface specialization.
typedef IVectorView<ABI::Windows::Media::Devices::Core::FrameController*> __FIVectorView_1_Windows__CMedia__CDevices__CCore__CFrameController_t;
#define __FIVectorView_1_Windows__CMedia__CDevices__CCore__CFrameController ABI::Windows::Foundation::Collections::__FIVectorView_1_Windows__CMedia__CDevices__CCore__CFrameController_t
/* Collections */ } /* Foundation */ } /* Windows */ } /* ABI */ }

#endif // !defined(RO_NO_TEMPLATE_NAME)
#endif /* DEF___FIVectorView_1_Windows__CMedia__CDevices__CCore__CFrameController_USE */

#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

#ifndef DEF___FIVectorView_1_Windows__CMedia__CFaceAnalysis__CDetectedFace_USE
#define DEF___FIVectorView_1_Windows__CMedia__CFaceAnalysis__CDetectedFace_USE
#if !defined(RO_NO_TEMPLATE_NAME)
namespace ABI { namespace Windows { namespace Foundation { namespace Collections {
template <>
struct __declspec(uuid("39ef4411-0618-5b8d-8ea2-81c637f823f8"))
IVectorView<ABI::Windows::Media::FaceAnalysis::DetectedFace*> : IVectorView_impl<ABI::Windows::Foundation::Internal::AggregateType<ABI::Windows::Media::FaceAnalysis::DetectedFace*, ABI::Windows::Media::FaceAnalysis::IDetectedFace*>>
{
    static const wchar_t* z_get_rc_name_impl()
    {
        return L"Windows.Foundation.Collections.IVectorView`1<Windows.Media.FaceAnalysis.DetectedFace>";
    }
};
// Define a typedef for the parameterized interface specialization's mangled name.
// This allows code which uses the mangled name for the parameterized interface to access the
// correct parameterized interface specialization.
typedef IVectorView<ABI::Windows::Media::FaceAnalysis::DetectedFace*> __FIVectorView_1_Windows__CMedia__CFaceAnalysis__CDetectedFace_t;
#define __FIVectorView_1_Windows__CMedia__CFaceAnalysis__CDetectedFace ABI::Windows::Foundation::Collections::__FIVectorView_1_Windows__CMedia__CFaceAnalysis__CDetectedFace_t
/* Collections */ } /* Foundation */ } /* Windows */ } /* ABI */ }

#endif // !defined(RO_NO_TEMPLATE_NAME)
#endif /* DEF___FIVectorView_1_Windows__CMedia__CFaceAnalysis__CDetectedFace_USE */

#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

#ifndef DEF___FIVector_1_Windows__CMedia__CCore__CTimedTextLine_USE
#define DEF___FIVector_1_Windows__CMedia__CCore__CTimedTextLine_USE
#if !defined(RO_NO_TEMPLATE_NAME)
namespace ABI { namespace Windows { namespace Foundation { namespace Collections {
template <>
struct __declspec(uuid("284f0441-e96d-58ad-9188-7bf46514dfcc"))
IVector<ABI::Windows::Media::Core::TimedTextLine*> : IVector_impl<ABI::Windows::Foundation::Internal::AggregateType<ABI::Windows::Media::Core::TimedTextLine*, ABI::Windows::Media::Core::ITimedTextLine*>>
{
    static const wchar_t* z_get_rc_name_impl()
    {
        return L"Windows.Foundation.Collections.IVector`1<Windows.Media.Core.TimedTextLine>";
    }
};
// Define a typedef for the parameterized interface specialization's mangled name.
// This allows code which uses the mangled name for the parameterized interface to access the
// correct parameterized interface specialization.
typedef IVector<ABI::Windows::Media::Core::TimedTextLine*> __FIVector_1_Windows__CMedia__CCore__CTimedTextLine_t;
#define __FIVector_1_Windows__CMedia__CCore__CTimedTextLine ABI::Windows::Foundation::Collections::__FIVector_1_Windows__CMedia__CCore__CTimedTextLine_t
/* Collections */ } /* Foundation */ } /* Windows */ } /* ABI */ }

#endif // !defined(RO_NO_TEMPLATE_NAME)
#endif /* DEF___FIVector_1_Windows__CMedia__CCore__CTimedTextLine_USE */

#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

#ifndef DEF___FIVector_1_Windows__CMedia__CCore__CTimedTextSubformat_USE
#define DEF___FIVector_1_Windows__CMedia__CCore__CTimedTextSubformat_USE
#if !defined(RO_NO_TEMPLATE_NAME)
namespace ABI { namespace Windows { namespace Foundation { namespace Collections {
template <>
struct __declspec(uuid("8786f392-f369-57ea-a16e-75870246a8c9"))
IVector<ABI::Windows::Media::Core::TimedTextSubformat*> : IVector_impl<ABI::Windows::Foundation::Internal::AggregateType<ABI::Windows::Media::Core::TimedTextSubformat*, ABI::Windows::Media::Core::ITimedTextSubformat*>>
{
    static const wchar_t* z_get_rc_name_impl()
    {
        return L"Windows.Foundation.Collections.IVector`1<Windows.Media.Core.TimedTextSubformat>";
    }
};
// Define a typedef for the parameterized interface specialization's mangled name.
// This allows code which uses the mangled name for the parameterized interface to access the
// correct parameterized interface specialization.
typedef IVector<ABI::Windows::Media::Core::TimedTextSubformat*> __FIVector_1_Windows__CMedia__CCore__CTimedTextSubformat_t;
#define __FIVector_1_Windows__CMedia__CCore__CTimedTextSubformat ABI::Windows::Foundation::Collections::__FIVector_1_Windows__CMedia__CCore__CTimedTextSubformat_t
/* Collections */ } /* Foundation */ } /* Windows */ } /* ABI */ }

#endif // !defined(RO_NO_TEMPLATE_NAME)
#endif /* DEF___FIVector_1_Windows__CMedia__CCore__CTimedTextSubformat_USE */

#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000


#ifndef DEF___FIReference_1_double_USE
#define DEF___FIReference_1_double_USE
#if !defined(RO_NO_TEMPLATE_NAME)
namespace ABI { namespace Windows { namespace Foundation {
template <>
struct __declspec(uuid("2f2d6c29-5473-5f3e-92e7-96572bb990e2"))
IReference<double> : IReference_impl<double>
{
    static const wchar_t* z_get_rc_name_impl()
    {
        return L"Windows.Foundation.IReference`1<Double>";
    }
};
// Define a typedef for the parameterized interface specialization's mangled name.
// This allows code which uses the mangled name for the parameterized interface to access the
// correct parameterized interface specialization.
typedef IReference<double> __FIReference_1_double_t;
#define __FIReference_1_double ABI::Windows::Foundation::__FIReference_1_double_t
/* Foundation */ } /* Windows */ } /* ABI */ }

#endif // !defined(RO_NO_TEMPLATE_NAME)
#endif /* DEF___FIReference_1_double_USE */



#ifndef DEF___FIReference_1_int_USE
#define DEF___FIReference_1_int_USE
#if !defined(RO_NO_TEMPLATE_NAME)
namespace ABI { namespace Windows { namespace Foundation {
template <>
struct __declspec(uuid("548cefbd-bc8a-5fa0-8df2-957440fc8bf4"))
IReference<int> : IReference_impl<int>
{
    static const wchar_t* z_get_rc_name_impl()
    {
        return L"Windows.Foundation.IReference`1<Int32>";
    }
};
// Define a typedef for the parameterized interface specialization's mangled name.
// This allows code which uses the mangled name for the parameterized interface to access the
// correct parameterized interface specialization.
typedef IReference<int> __FIReference_1_int_t;
#define __FIReference_1_int ABI::Windows::Foundation::__FIReference_1_int_t
/* Foundation */ } /* Windows */ } /* ABI */ }

#endif // !defined(RO_NO_TEMPLATE_NAME)
#endif /* DEF___FIReference_1_int_USE */



#ifndef DEF___FIReference_1_UINT32_USE
#define DEF___FIReference_1_UINT32_USE
#if !defined(RO_NO_TEMPLATE_NAME)
namespace ABI { namespace Windows { namespace Foundation {
template <>
struct __declspec(uuid("513ef3af-e784-5325-a91e-97c2b8111cf3"))
IReference<UINT32> : IReference_impl<UINT32>
{
    static const wchar_t* z_get_rc_name_impl()
    {
        return L"Windows.Foundation.IReference`1<UInt32>";
    }
};
// Define a typedef for the parameterized interface specialization's mangled name.
// This allows code which uses the mangled name for the parameterized interface to access the
// correct parameterized interface specialization.
typedef IReference<UINT32> __FIReference_1_UINT32_t;
#define __FIReference_1_UINT32 ABI::Windows::Foundation::__FIReference_1_UINT32_t
/* Foundation */ } /* Windows */ } /* ABI */ }

#endif // !defined(RO_NO_TEMPLATE_NAME)
#endif /* DEF___FIReference_1_UINT32_USE */


namespace ABI {
    namespace Windows {
        namespace Foundation {
            typedef struct TimeSpan TimeSpan;
        } /* Foundation */
    } /* Windows */
} /* ABI */

#if WINDOWS_FOUNDATION_FOUNDATIONCONTRACT_VERSION >= 0x10000

#ifndef DEF___FIReference_1_Windows__CFoundation__CTimeSpan_USE
#define DEF___FIReference_1_Windows__CFoundation__CTimeSpan_USE
#if !defined(RO_NO_TEMPLATE_NAME)
namespace ABI { namespace Windows { namespace Foundation {
template <>
struct __declspec(uuid("604d0c4c-91de-5c2a-935f-362f13eaf800"))
IReference<struct ABI::Windows::Foundation::TimeSpan> : IReference_impl<struct ABI::Windows::Foundation::TimeSpan>
{
    static const wchar_t* z_get_rc_name_impl()
    {
        return L"Windows.Foundation.IReference`1<Windows.Foundation.TimeSpan>";
    }
};
// Define a typedef for the parameterized interface specialization's mangled name.
// This allows code which uses the mangled name for the parameterized interface to access the
// correct parameterized interface specialization.
typedef IReference<struct ABI::Windows::Foundation::TimeSpan> __FIReference_1_Windows__CFoundation__CTimeSpan_t;
#define __FIReference_1_Windows__CFoundation__CTimeSpan ABI::Windows::Foundation::__FIReference_1_Windows__CFoundation__CTimeSpan_t
/* Foundation */ } /* Windows */ } /* ABI */ }

#endif // !defined(RO_NO_TEMPLATE_NAME)
#endif /* DEF___FIReference_1_Windows__CFoundation__CTimeSpan_USE */

#endif // WINDOWS_FOUNDATION_FOUNDATIONCONTRACT_VERSION >= 0x10000

#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

#ifndef DEF___FIReference_1_Windows__CMedia__CCore__CMseTimeRange_USE
#define DEF___FIReference_1_Windows__CMedia__CCore__CMseTimeRange_USE
#if !defined(RO_NO_TEMPLATE_NAME)
namespace ABI { namespace Windows { namespace Foundation {
template <>
struct __declspec(uuid("2fffd101-16f8-596d-a88e-659b6f584641"))
IReference<struct ABI::Windows::Media::Core::MseTimeRange> : IReference_impl<struct ABI::Windows::Media::Core::MseTimeRange>
{
    static const wchar_t* z_get_rc_name_impl()
    {
        return L"Windows.Foundation.IReference`1<Windows.Media.Core.MseTimeRange>";
    }
};
// Define a typedef for the parameterized interface specialization's mangled name.
// This allows code which uses the mangled name for the parameterized interface to access the
// correct parameterized interface specialization.
typedef IReference<struct ABI::Windows::Media::Core::MseTimeRange> __FIReference_1_Windows__CMedia__CCore__CMseTimeRange_t;
#define __FIReference_1_Windows__CMedia__CCore__CMseTimeRange ABI::Windows::Foundation::__FIReference_1_Windows__CMedia__CCore__CMseTimeRange_t
/* Foundation */ } /* Windows */ } /* ABI */ }

#endif // !defined(RO_NO_TEMPLATE_NAME)
#endif /* DEF___FIReference_1_Windows__CMedia__CCore__CMseTimeRange_USE */

#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

namespace ABI {
    namespace Windows {
        namespace Media {
            namespace Core {
                class AudioTrack;
            } /* Core */
        } /* Media */
    } /* Windows */
} /* ABI */

namespace ABI {
    namespace Windows {
        namespace Media {
            namespace Core {
                class AudioTrackOpenFailedEventArgs;
            } /* Core */
        } /* Media */
    } /* Windows */
} /* ABI */

#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x30000

#ifndef DEF___FITypedEventHandler_2_Windows__CMedia__CCore__CAudioTrack_Windows__CMedia__CCore__CAudioTrackOpenFailedEventArgs_USE
#define DEF___FITypedEventHandler_2_Windows__CMedia__CCore__CAudioTrack_Windows__CMedia__CCore__CAudioTrackOpenFailedEventArgs_USE
#if !defined(RO_NO_TEMPLATE_NAME)
namespace ABI { namespace Windows { namespace Foundation {
template <>
struct __declspec(uuid("b5b7e554-2476-5667-9c9a-1c7a7d09ace2"))
ITypedEventHandler<ABI::Windows::Media::Core::AudioTrack*, ABI::Windows::Media::Core::AudioTrackOpenFailedEventArgs*> : ITypedEventHandler_impl<ABI::Windows::Foundation::Internal::AggregateType<ABI::Windows::Media::Core::AudioTrack*, ABI::Windows::Media::Core::IMediaTrack*>, ABI::Windows::Foundation::Internal::AggregateType<ABI::Windows::Media::Core::AudioTrackOpenFailedEventArgs*, ABI::Windows::Media::Core::IAudioTrackOpenFailedEventArgs*>>
{
    static const wchar_t* z_get_rc_name_impl()
    {
        return L"Windows.Foundation.TypedEventHandler`2<Windows.Media.Core.AudioTrack, Windows.Media.Core.AudioTrackOpenFailedEventArgs>";
    }
};
// Define a typedef for the parameterized interface specialization's mangled name.
// This allows code which uses the mangled name for the parameterized interface to access the
// correct parameterized interface specialization.
typedef ITypedEventHandler<ABI::Windows::Media::Core::AudioTrack*, ABI::Windows::Media::Core::AudioTrackOpenFailedEventArgs*> __FITypedEventHandler_2_Windows__CMedia__CCore__CAudioTrack_Windows__CMedia__CCore__CAudioTrackOpenFailedEventArgs_t;
#define __FITypedEventHandler_2_Windows__CMedia__CCore__CAudioTrack_Windows__CMedia__CCore__CAudioTrackOpenFailedEventArgs ABI::Windows::Foundation::__FITypedEventHandler_2_Windows__CMedia__CCore__CAudioTrack_Windows__CMedia__CCore__CAudioTrackOpenFailedEventArgs_t
/* Foundation */ } /* Windows */ } /* ABI */ }

#endif // !defined(RO_NO_TEMPLATE_NAME)
#endif /* DEF___FITypedEventHandler_2_Windows__CMedia__CCore__CAudioTrack_Windows__CMedia__CCore__CAudioTrackOpenFailedEventArgs_USE */

#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x30000
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

namespace ABI {
    namespace Windows {
        namespace Media {
            namespace Core {
                class FaceDetectionEffect;
            } /* Core */
        } /* Media */
    } /* Windows */
} /* ABI */

namespace ABI {
    namespace Windows {
        namespace Media {
            namespace Core {
                class FaceDetectedEventArgs;
            } /* Core */
        } /* Media */
    } /* Windows */
} /* ABI */

#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

#ifndef DEF___FITypedEventHandler_2_Windows__CMedia__CCore__CFaceDetectionEffect_Windows__CMedia__CCore__CFaceDetectedEventArgs_USE
#define DEF___FITypedEventHandler_2_Windows__CMedia__CCore__CFaceDetectionEffect_Windows__CMedia__CCore__CFaceDetectedEventArgs_USE
#if !defined(RO_NO_TEMPLATE_NAME)
namespace ABI { namespace Windows { namespace Foundation {
template <>
struct __declspec(uuid("01f0d7a6-f9bd-5bc1-aaa9-dff396f72f87"))
ITypedEventHandler<ABI::Windows::Media::Core::FaceDetectionEffect*, ABI::Windows::Media::Core::FaceDetectedEventArgs*> : ITypedEventHandler_impl<ABI::Windows::Foundation::Internal::AggregateType<ABI::Windows::Media::Core::FaceDetectionEffect*, ABI::Windows::Media::Core::IFaceDetectionEffect*>, ABI::Windows::Foundation::Internal::AggregateType<ABI::Windows::Media::Core::FaceDetectedEventArgs*, ABI::Windows::Media::Core::IFaceDetectedEventArgs*>>
{
    static const wchar_t* z_get_rc_name_impl()
    {
        return L"Windows.Foundation.TypedEventHandler`2<Windows.Media.Core.FaceDetectionEffect, Windows.Media.Core.FaceDetectedEventArgs>";
    }
};
// Define a typedef for the parameterized interface specialization's mangled name.
// This allows code which uses the mangled name for the parameterized interface to access the
// correct parameterized interface specialization.
typedef ITypedEventHandler<ABI::Windows::Media::Core::FaceDetectionEffect*, ABI::Windows::Media::Core::FaceDetectedEventArgs*> __FITypedEventHandler_2_Windows__CMedia__CCore__CFaceDetectionEffect_Windows__CMedia__CCore__CFaceDetectedEventArgs_t;
#define __FITypedEventHandler_2_Windows__CMedia__CCore__CFaceDetectionEffect_Windows__CMedia__CCore__CFaceDetectedEventArgs ABI::Windows::Foundation::__FITypedEventHandler_2_Windows__CMedia__CCore__CFaceDetectionEffect_Windows__CMedia__CCore__CFaceDetectedEventArgs_t
/* Foundation */ } /* Windows */ } /* ABI */ }

#endif // !defined(RO_NO_TEMPLATE_NAME)
#endif /* DEF___FITypedEventHandler_2_Windows__CMedia__CCore__CFaceDetectionEffect_Windows__CMedia__CCore__CFaceDetectedEventArgs_USE */

#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

#ifndef DEF___FITypedEventHandler_2_Windows__CMedia__CCore__CISingleSelectMediaTrackList_IInspectable_USE
#define DEF___FITypedEventHandler_2_Windows__CMedia__CCore__CISingleSelectMediaTrackList_IInspectable_USE
#if !defined(RO_NO_TEMPLATE_NAME)
namespace ABI { namespace Windows { namespace Foundation {
template <>
struct __declspec(uuid("21eb6e39-728a-56a9-8dce-062ba4c81bf5"))
ITypedEventHandler<ABI::Windows::Media::Core::ISingleSelectMediaTrackList*, IInspectable*> : ITypedEventHandler_impl<ABI::Windows::Media::Core::ISingleSelectMediaTrackList*, IInspectable*>
{
    static const wchar_t* z_get_rc_name_impl()
    {
        return L"Windows.Foundation.TypedEventHandler`2<Windows.Media.Core.ISingleSelectMediaTrackList, Object>";
    }
};
// Define a typedef for the parameterized interface specialization's mangled name.
// This allows code which uses the mangled name for the parameterized interface to access the
// correct parameterized interface specialization.
typedef ITypedEventHandler<ABI::Windows::Media::Core::ISingleSelectMediaTrackList*, IInspectable*> __FITypedEventHandler_2_Windows__CMedia__CCore__CISingleSelectMediaTrackList_IInspectable_t;
#define __FITypedEventHandler_2_Windows__CMedia__CCore__CISingleSelectMediaTrackList_IInspectable ABI::Windows::Foundation::__FITypedEventHandler_2_Windows__CMedia__CCore__CISingleSelectMediaTrackList_IInspectable_t
/* Foundation */ } /* Windows */ } /* ABI */ }

#endif // !defined(RO_NO_TEMPLATE_NAME)
#endif /* DEF___FITypedEventHandler_2_Windows__CMedia__CCore__CISingleSelectMediaTrackList_IInspectable_USE */

#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

namespace ABI {
    namespace Windows {
        namespace Media {
            namespace Core {
                class MediaBinder;
            } /* Core */
        } /* Media */
    } /* Windows */
} /* ABI */

namespace ABI {
    namespace Windows {
        namespace Media {
            namespace Core {
                class MediaBindingEventArgs;
            } /* Core */
        } /* Media */
    } /* Windows */
} /* ABI */

#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x20000
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x20000

#ifndef DEF___FITypedEventHandler_2_Windows__CMedia__CCore__CMediaBinder_Windows__CMedia__CCore__CMediaBindingEventArgs_USE
#define DEF___FITypedEventHandler_2_Windows__CMedia__CCore__CMediaBinder_Windows__CMedia__CCore__CMediaBindingEventArgs_USE
#if !defined(RO_NO_TEMPLATE_NAME)
namespace ABI { namespace Windows { namespace Foundation {
template <>
struct __declspec(uuid("5b133719-ee98-59b2-b432-1c9a5a56ab05"))
ITypedEventHandler<ABI::Windows::Media::Core::MediaBinder*, ABI::Windows::Media::Core::MediaBindingEventArgs*> : ITypedEventHandler_impl<ABI::Windows::Foundation::Internal::AggregateType<ABI::Windows::Media::Core::MediaBinder*, ABI::Windows::Media::Core::IMediaBinder*>, ABI::Windows::Foundation::Internal::AggregateType<ABI::Windows::Media::Core::MediaBindingEventArgs*, ABI::Windows::Media::Core::IMediaBindingEventArgs*>>
{
    static const wchar_t* z_get_rc_name_impl()
    {
        return L"Windows.Foundation.TypedEventHandler`2<Windows.Media.Core.MediaBinder, Windows.Media.Core.MediaBindingEventArgs>";
    }
};
// Define a typedef for the parameterized interface specialization's mangled name.
// This allows code which uses the mangled name for the parameterized interface to access the
// correct parameterized interface specialization.
typedef ITypedEventHandler<ABI::Windows::Media::Core::MediaBinder*, ABI::Windows::Media::Core::MediaBindingEventArgs*> __FITypedEventHandler_2_Windows__CMedia__CCore__CMediaBinder_Windows__CMedia__CCore__CMediaBindingEventArgs_t;
#define __FITypedEventHandler_2_Windows__CMedia__CCore__CMediaBinder_Windows__CMedia__CCore__CMediaBindingEventArgs ABI::Windows::Foundation::__FITypedEventHandler_2_Windows__CMedia__CCore__CMediaBinder_Windows__CMedia__CCore__CMediaBindingEventArgs_t
/* Foundation */ } /* Windows */ } /* ABI */ }

#endif // !defined(RO_NO_TEMPLATE_NAME)
#endif /* DEF___FITypedEventHandler_2_Windows__CMedia__CCore__CMediaBinder_Windows__CMedia__CCore__CMediaBindingEventArgs_USE */

#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x20000
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x20000

#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x20000

#ifndef DEF___FITypedEventHandler_2_Windows__CMedia__CCore__CMediaBindingEventArgs_IInspectable_USE
#define DEF___FITypedEventHandler_2_Windows__CMedia__CCore__CMediaBindingEventArgs_IInspectable_USE
#if !defined(RO_NO_TEMPLATE_NAME)
namespace ABI { namespace Windows { namespace Foundation {
template <>
struct __declspec(uuid("3f3b10e2-b2e9-55c6-abb3-4a258072ebb9"))
ITypedEventHandler<ABI::Windows::Media::Core::MediaBindingEventArgs*, IInspectable*> : ITypedEventHandler_impl<ABI::Windows::Foundation::Internal::AggregateType<ABI::Windows::Media::Core::MediaBindingEventArgs*, ABI::Windows::Media::Core::IMediaBindingEventArgs*>, IInspectable*>
{
    static const wchar_t* z_get_rc_name_impl()
    {
        return L"Windows.Foundation.TypedEventHandler`2<Windows.Media.Core.MediaBindingEventArgs, Object>";
    }
};
// Define a typedef for the parameterized interface specialization's mangled name.
// This allows code which uses the mangled name for the parameterized interface to access the
// correct parameterized interface specialization.
typedef ITypedEventHandler<ABI::Windows::Media::Core::MediaBindingEventArgs*, IInspectable*> __FITypedEventHandler_2_Windows__CMedia__CCore__CMediaBindingEventArgs_IInspectable_t;
#define __FITypedEventHandler_2_Windows__CMedia__CCore__CMediaBindingEventArgs_IInspectable ABI::Windows::Foundation::__FITypedEventHandler_2_Windows__CMedia__CCore__CMediaBindingEventArgs_IInspectable_t
/* Foundation */ } /* Windows */ } /* ABI */ }

#endif // !defined(RO_NO_TEMPLATE_NAME)
#endif /* DEF___FITypedEventHandler_2_Windows__CMedia__CCore__CMediaBindingEventArgs_IInspectable_USE */

#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x20000

namespace ABI {
    namespace Windows {
        namespace Media {
            namespace Core {
                class MediaSource;
            } /* Core */
        } /* Media */
    } /* Windows */
} /* ABI */

namespace ABI {
    namespace Windows {
        namespace Media {
            namespace Core {
                class MediaSourceOpenOperationCompletedEventArgs;
            } /* Core */
        } /* Media */
    } /* Windows */
} /* ABI */

#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

#ifndef DEF___FITypedEventHandler_2_Windows__CMedia__CCore__CMediaSource_Windows__CMedia__CCore__CMediaSourceOpenOperationCompletedEventArgs_USE
#define DEF___FITypedEventHandler_2_Windows__CMedia__CCore__CMediaSource_Windows__CMedia__CCore__CMediaSourceOpenOperationCompletedEventArgs_USE
#if !defined(RO_NO_TEMPLATE_NAME)
namespace ABI { namespace Windows { namespace Foundation {
template <>
struct __declspec(uuid("425d53e3-fba6-5ea3-b713-db4d70787436"))
ITypedEventHandler<ABI::Windows::Media::Core::MediaSource*, ABI::Windows::Media::Core::MediaSourceOpenOperationCompletedEventArgs*> : ITypedEventHandler_impl<ABI::Windows::Foundation::Internal::AggregateType<ABI::Windows::Media::Core::MediaSource*, ABI::Windows::Media::Core::IMediaSource2*>, ABI::Windows::Foundation::Internal::AggregateType<ABI::Windows::Media::Core::MediaSourceOpenOperationCompletedEventArgs*, ABI::Windows::Media::Core::IMediaSourceOpenOperationCompletedEventArgs*>>
{
    static const wchar_t* z_get_rc_name_impl()
    {
        return L"Windows.Foundation.TypedEventHandler`2<Windows.Media.Core.MediaSource, Windows.Media.Core.MediaSourceOpenOperationCompletedEventArgs>";
    }
};
// Define a typedef for the parameterized interface specialization's mangled name.
// This allows code which uses the mangled name for the parameterized interface to access the
// correct parameterized interface specialization.
typedef ITypedEventHandler<ABI::Windows::Media::Core::MediaSource*, ABI::Windows::Media::Core::MediaSourceOpenOperationCompletedEventArgs*> __FITypedEventHandler_2_Windows__CMedia__CCore__CMediaSource_Windows__CMedia__CCore__CMediaSourceOpenOperationCompletedEventArgs_t;
#define __FITypedEventHandler_2_Windows__CMedia__CCore__CMediaSource_Windows__CMedia__CCore__CMediaSourceOpenOperationCompletedEventArgs ABI::Windows::Foundation::__FITypedEventHandler_2_Windows__CMedia__CCore__CMediaSource_Windows__CMedia__CCore__CMediaSourceOpenOperationCompletedEventArgs_t
/* Foundation */ } /* Windows */ } /* ABI */ }

#endif // !defined(RO_NO_TEMPLATE_NAME)
#endif /* DEF___FITypedEventHandler_2_Windows__CMedia__CCore__CMediaSource_Windows__CMedia__CCore__CMediaSourceOpenOperationCompletedEventArgs_USE */

#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

namespace ABI {
    namespace Windows {
        namespace Media {
            namespace Core {
                class MediaSourceStateChangedEventArgs;
            } /* Core */
        } /* Media */
    } /* Windows */
} /* ABI */

#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x20000

#ifndef DEF___FITypedEventHandler_2_Windows__CMedia__CCore__CMediaSource_Windows__CMedia__CCore__CMediaSourceStateChangedEventArgs_USE
#define DEF___FITypedEventHandler_2_Windows__CMedia__CCore__CMediaSource_Windows__CMedia__CCore__CMediaSourceStateChangedEventArgs_USE
#if !defined(RO_NO_TEMPLATE_NAME)
namespace ABI { namespace Windows { namespace Foundation {
template <>
struct __declspec(uuid("2274d3a6-1ba0-5230-bb86-de90058b6403"))
ITypedEventHandler<ABI::Windows::Media::Core::MediaSource*, ABI::Windows::Media::Core::MediaSourceStateChangedEventArgs*> : ITypedEventHandler_impl<ABI::Windows::Foundation::Internal::AggregateType<ABI::Windows::Media::Core::MediaSource*, ABI::Windows::Media::Core::IMediaSource2*>, ABI::Windows::Foundation::Internal::AggregateType<ABI::Windows::Media::Core::MediaSourceStateChangedEventArgs*, ABI::Windows::Media::Core::IMediaSourceStateChangedEventArgs*>>
{
    static const wchar_t* z_get_rc_name_impl()
    {
        return L"Windows.Foundation.TypedEventHandler`2<Windows.Media.Core.MediaSource, Windows.Media.Core.MediaSourceStateChangedEventArgs>";
    }
};
// Define a typedef for the parameterized interface specialization's mangled name.
// This allows code which uses the mangled name for the parameterized interface to access the
// correct parameterized interface specialization.
typedef ITypedEventHandler<ABI::Windows::Media::Core::MediaSource*, ABI::Windows::Media::Core::MediaSourceStateChangedEventArgs*> __FITypedEventHandler_2_Windows__CMedia__CCore__CMediaSource_Windows__CMedia__CCore__CMediaSourceStateChangedEventArgs_t;
#define __FITypedEventHandler_2_Windows__CMedia__CCore__CMediaSource_Windows__CMedia__CCore__CMediaSourceStateChangedEventArgs ABI::Windows::Foundation::__FITypedEventHandler_2_Windows__CMedia__CCore__CMediaSource_Windows__CMedia__CCore__CMediaSourceStateChangedEventArgs_t
/* Foundation */ } /* Windows */ } /* ABI */ }

#endif // !defined(RO_NO_TEMPLATE_NAME)
#endif /* DEF___FITypedEventHandler_2_Windows__CMedia__CCore__CMediaSource_Windows__CMedia__CCore__CMediaSourceStateChangedEventArgs_USE */

#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x20000
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

namespace ABI {
    namespace Windows {
        namespace Media {
            namespace Core {
                class MediaSourceAppServiceConnection;
            } /* Core */
        } /* Media */
    } /* Windows */
} /* ABI */

namespace ABI {
    namespace Windows {
        namespace Media {
            namespace Core {
                class InitializeMediaStreamSourceRequestedEventArgs;
            } /* Core */
        } /* Media */
    } /* Windows */
} /* ABI */

#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x50000
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x50000

#ifndef DEF___FITypedEventHandler_2_Windows__CMedia__CCore__CMediaSourceAppServiceConnection_Windows__CMedia__CCore__CInitializeMediaStreamSourceRequestedEventArgs_USE
#define DEF___FITypedEventHandler_2_Windows__CMedia__CCore__CMediaSourceAppServiceConnection_Windows__CMedia__CCore__CInitializeMediaStreamSourceRequestedEventArgs_USE
#if !defined(RO_NO_TEMPLATE_NAME)
namespace ABI { namespace Windows { namespace Foundation {
template <>
struct __declspec(uuid("f6f1b895-9c61-5e2a-8883-9ff8cc8b3d76"))
ITypedEventHandler<ABI::Windows::Media::Core::MediaSourceAppServiceConnection*, ABI::Windows::Media::Core::InitializeMediaStreamSourceRequestedEventArgs*> : ITypedEventHandler_impl<ABI::Windows::Foundation::Internal::AggregateType<ABI::Windows::Media::Core::MediaSourceAppServiceConnection*, ABI::Windows::Media::Core::IMediaSourceAppServiceConnection*>, ABI::Windows::Foundation::Internal::AggregateType<ABI::Windows::Media::Core::InitializeMediaStreamSourceRequestedEventArgs*, ABI::Windows::Media::Core::IInitializeMediaStreamSourceRequestedEventArgs*>>
{
    static const wchar_t* z_get_rc_name_impl()
    {
        return L"Windows.Foundation.TypedEventHandler`2<Windows.Media.Core.MediaSourceAppServiceConnection, Windows.Media.Core.InitializeMediaStreamSourceRequestedEventArgs>";
    }
};
// Define a typedef for the parameterized interface specialization's mangled name.
// This allows code which uses the mangled name for the parameterized interface to access the
// correct parameterized interface specialization.
typedef ITypedEventHandler<ABI::Windows::Media::Core::MediaSourceAppServiceConnection*, ABI::Windows::Media::Core::InitializeMediaStreamSourceRequestedEventArgs*> __FITypedEventHandler_2_Windows__CMedia__CCore__CMediaSourceAppServiceConnection_Windows__CMedia__CCore__CInitializeMediaStreamSourceRequestedEventArgs_t;
#define __FITypedEventHandler_2_Windows__CMedia__CCore__CMediaSourceAppServiceConnection_Windows__CMedia__CCore__CInitializeMediaStreamSourceRequestedEventArgs ABI::Windows::Foundation::__FITypedEventHandler_2_Windows__CMedia__CCore__CMediaSourceAppServiceConnection_Windows__CMedia__CCore__CInitializeMediaStreamSourceRequestedEventArgs_t
/* Foundation */ } /* Windows */ } /* ABI */ }

#endif // !defined(RO_NO_TEMPLATE_NAME)
#endif /* DEF___FITypedEventHandler_2_Windows__CMedia__CCore__CMediaSourceAppServiceConnection_Windows__CMedia__CCore__CInitializeMediaStreamSourceRequestedEventArgs_USE */

#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x50000
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x50000

#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

#ifndef DEF___FITypedEventHandler_2_Windows__CMedia__CCore__CMediaStreamSample_IInspectable_USE
#define DEF___FITypedEventHandler_2_Windows__CMedia__CCore__CMediaStreamSample_IInspectable_USE
#if !defined(RO_NO_TEMPLATE_NAME)
namespace ABI { namespace Windows { namespace Foundation {
template <>
struct __declspec(uuid("d4dc5ef1-c1cb-5c32-803d-f2f9a7ad9916"))
ITypedEventHandler<ABI::Windows::Media::Core::MediaStreamSample*, IInspectable*> : ITypedEventHandler_impl<ABI::Windows::Foundation::Internal::AggregateType<ABI::Windows::Media::Core::MediaStreamSample*, ABI::Windows::Media::Core::IMediaStreamSample*>, IInspectable*>
{
    static const wchar_t* z_get_rc_name_impl()
    {
        return L"Windows.Foundation.TypedEventHandler`2<Windows.Media.Core.MediaStreamSample, Object>";
    }
};
// Define a typedef for the parameterized interface specialization's mangled name.
// This allows code which uses the mangled name for the parameterized interface to access the
// correct parameterized interface specialization.
typedef ITypedEventHandler<ABI::Windows::Media::Core::MediaStreamSample*, IInspectable*> __FITypedEventHandler_2_Windows__CMedia__CCore__CMediaStreamSample_IInspectable_t;
#define __FITypedEventHandler_2_Windows__CMedia__CCore__CMediaStreamSample_IInspectable ABI::Windows::Foundation::__FITypedEventHandler_2_Windows__CMedia__CCore__CMediaStreamSample_IInspectable_t
/* Foundation */ } /* Windows */ } /* ABI */ }

#endif // !defined(RO_NO_TEMPLATE_NAME)
#endif /* DEF___FITypedEventHandler_2_Windows__CMedia__CCore__CMediaStreamSample_IInspectable_USE */

#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

namespace ABI {
    namespace Windows {
        namespace Media {
            namespace Core {
                class MediaStreamSource;
            } /* Core */
        } /* Media */
    } /* Windows */
} /* ABI */

#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

#ifndef DEF___FITypedEventHandler_2_Windows__CMedia__CCore__CMediaStreamSource_IInspectable_USE
#define DEF___FITypedEventHandler_2_Windows__CMedia__CCore__CMediaStreamSource_IInspectable_USE
#if !defined(RO_NO_TEMPLATE_NAME)
namespace ABI { namespace Windows { namespace Foundation {
template <>
struct __declspec(uuid("6fd6ded7-421b-5ef5-8bf5-edea45401665"))
ITypedEventHandler<ABI::Windows::Media::Core::MediaStreamSource*, IInspectable*> : ITypedEventHandler_impl<ABI::Windows::Foundation::Internal::AggregateType<ABI::Windows::Media::Core::MediaStreamSource*, ABI::Windows::Media::Core::IMediaStreamSource*>, IInspectable*>
{
    static const wchar_t* z_get_rc_name_impl()
    {
        return L"Windows.Foundation.TypedEventHandler`2<Windows.Media.Core.MediaStreamSource, Object>";
    }
};
// Define a typedef for the parameterized interface specialization's mangled name.
// This allows code which uses the mangled name for the parameterized interface to access the
// correct parameterized interface specialization.
typedef ITypedEventHandler<ABI::Windows::Media::Core::MediaStreamSource*, IInspectable*> __FITypedEventHandler_2_Windows__CMedia__CCore__CMediaStreamSource_IInspectable_t;
#define __FITypedEventHandler_2_Windows__CMedia__CCore__CMediaStreamSource_IInspectable ABI::Windows::Foundation::__FITypedEventHandler_2_Windows__CMedia__CCore__CMediaStreamSource_IInspectable_t
/* Foundation */ } /* Windows */ } /* ABI */ }

#endif // !defined(RO_NO_TEMPLATE_NAME)
#endif /* DEF___FITypedEventHandler_2_Windows__CMedia__CCore__CMediaStreamSource_IInspectable_USE */

#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

namespace ABI {
    namespace Windows {
        namespace Media {
            namespace Core {
                class MediaStreamSourceClosedEventArgs;
            } /* Core */
        } /* Media */
    } /* Windows */
} /* ABI */

#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

#ifndef DEF___FITypedEventHandler_2_Windows__CMedia__CCore__CMediaStreamSource_Windows__CMedia__CCore__CMediaStreamSourceClosedEventArgs_USE
#define DEF___FITypedEventHandler_2_Windows__CMedia__CCore__CMediaStreamSource_Windows__CMedia__CCore__CMediaStreamSourceClosedEventArgs_USE
#if !defined(RO_NO_TEMPLATE_NAME)
namespace ABI { namespace Windows { namespace Foundation {
template <>
struct __declspec(uuid("238cc251-d0b8-5a34-81d4-0dd1f936a20d"))
ITypedEventHandler<ABI::Windows::Media::Core::MediaStreamSource*, ABI::Windows::Media::Core::MediaStreamSourceClosedEventArgs*> : ITypedEventHandler_impl<ABI::Windows::Foundation::Internal::AggregateType<ABI::Windows::Media::Core::MediaStreamSource*, ABI::Windows::Media::Core::IMediaStreamSource*>, ABI::Windows::Foundation::Internal::AggregateType<ABI::Windows::Media::Core::MediaStreamSourceClosedEventArgs*, ABI::Windows::Media::Core::IMediaStreamSourceClosedEventArgs*>>
{
    static const wchar_t* z_get_rc_name_impl()
    {
        return L"Windows.Foundation.TypedEventHandler`2<Windows.Media.Core.MediaStreamSource, Windows.Media.Core.MediaStreamSourceClosedEventArgs>";
    }
};
// Define a typedef for the parameterized interface specialization's mangled name.
// This allows code which uses the mangled name for the parameterized interface to access the
// correct parameterized interface specialization.
typedef ITypedEventHandler<ABI::Windows::Media::Core::MediaStreamSource*, ABI::Windows::Media::Core::MediaStreamSourceClosedEventArgs*> __FITypedEventHandler_2_Windows__CMedia__CCore__CMediaStreamSource_Windows__CMedia__CCore__CMediaStreamSourceClosedEventArgs_t;
#define __FITypedEventHandler_2_Windows__CMedia__CCore__CMediaStreamSource_Windows__CMedia__CCore__CMediaStreamSourceClosedEventArgs ABI::Windows::Foundation::__FITypedEventHandler_2_Windows__CMedia__CCore__CMediaStreamSource_Windows__CMedia__CCore__CMediaStreamSourceClosedEventArgs_t
/* Foundation */ } /* Windows */ } /* ABI */ }

#endif // !defined(RO_NO_TEMPLATE_NAME)
#endif /* DEF___FITypedEventHandler_2_Windows__CMedia__CCore__CMediaStreamSource_Windows__CMedia__CCore__CMediaStreamSourceClosedEventArgs_USE */

#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

namespace ABI {
    namespace Windows {
        namespace Media {
            namespace Core {
                class MediaStreamSourceSampleRenderedEventArgs;
            } /* Core */
        } /* Media */
    } /* Windows */
} /* ABI */

#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x30000

#ifndef DEF___FITypedEventHandler_2_Windows__CMedia__CCore__CMediaStreamSource_Windows__CMedia__CCore__CMediaStreamSourceSampleRenderedEventArgs_USE
#define DEF___FITypedEventHandler_2_Windows__CMedia__CCore__CMediaStreamSource_Windows__CMedia__CCore__CMediaStreamSourceSampleRenderedEventArgs_USE
#if !defined(RO_NO_TEMPLATE_NAME)
namespace ABI { namespace Windows { namespace Foundation {
template <>
struct __declspec(uuid("9d812c70-9f0d-5ad5-8274-f760c9ca0c38"))
ITypedEventHandler<ABI::Windows::Media::Core::MediaStreamSource*, ABI::Windows::Media::Core::MediaStreamSourceSampleRenderedEventArgs*> : ITypedEventHandler_impl<ABI::Windows::Foundation::Internal::AggregateType<ABI::Windows::Media::Core::MediaStreamSource*, ABI::Windows::Media::Core::IMediaStreamSource*>, ABI::Windows::Foundation::Internal::AggregateType<ABI::Windows::Media::Core::MediaStreamSourceSampleRenderedEventArgs*, ABI::Windows::Media::Core::IMediaStreamSourceSampleRenderedEventArgs*>>
{
    static const wchar_t* z_get_rc_name_impl()
    {
        return L"Windows.Foundation.TypedEventHandler`2<Windows.Media.Core.MediaStreamSource, Windows.Media.Core.MediaStreamSourceSampleRenderedEventArgs>";
    }
};
// Define a typedef for the parameterized interface specialization's mangled name.
// This allows code which uses the mangled name for the parameterized interface to access the
// correct parameterized interface specialization.
typedef ITypedEventHandler<ABI::Windows::Media::Core::MediaStreamSource*, ABI::Windows::Media::Core::MediaStreamSourceSampleRenderedEventArgs*> __FITypedEventHandler_2_Windows__CMedia__CCore__CMediaStreamSource_Windows__CMedia__CCore__CMediaStreamSourceSampleRenderedEventArgs_t;
#define __FITypedEventHandler_2_Windows__CMedia__CCore__CMediaStreamSource_Windows__CMedia__CCore__CMediaStreamSourceSampleRenderedEventArgs ABI::Windows::Foundation::__FITypedEventHandler_2_Windows__CMedia__CCore__CMediaStreamSource_Windows__CMedia__CCore__CMediaStreamSourceSampleRenderedEventArgs_t
/* Foundation */ } /* Windows */ } /* ABI */ }

#endif // !defined(RO_NO_TEMPLATE_NAME)
#endif /* DEF___FITypedEventHandler_2_Windows__CMedia__CCore__CMediaStreamSource_Windows__CMedia__CCore__CMediaStreamSourceSampleRenderedEventArgs_USE */

#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x30000
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

namespace ABI {
    namespace Windows {
        namespace Media {
            namespace Core {
                class MediaStreamSourceSampleRequestedEventArgs;
            } /* Core */
        } /* Media */
    } /* Windows */
} /* ABI */

#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

#ifndef DEF___FITypedEventHandler_2_Windows__CMedia__CCore__CMediaStreamSource_Windows__CMedia__CCore__CMediaStreamSourceSampleRequestedEventArgs_USE
#define DEF___FITypedEventHandler_2_Windows__CMedia__CCore__CMediaStreamSource_Windows__CMedia__CCore__CMediaStreamSourceSampleRequestedEventArgs_USE
#if !defined(RO_NO_TEMPLATE_NAME)
namespace ABI { namespace Windows { namespace Foundation {
template <>
struct __declspec(uuid("4f1a3ae3-b8b7-5689-901d-b0b623f5a172"))
ITypedEventHandler<ABI::Windows::Media::Core::MediaStreamSource*, ABI::Windows::Media::Core::MediaStreamSourceSampleRequestedEventArgs*> : ITypedEventHandler_impl<ABI::Windows::Foundation::Internal::AggregateType<ABI::Windows::Media::Core::MediaStreamSource*, ABI::Windows::Media::Core::IMediaStreamSource*>, ABI::Windows::Foundation::Internal::AggregateType<ABI::Windows::Media::Core::MediaStreamSourceSampleRequestedEventArgs*, ABI::Windows::Media::Core::IMediaStreamSourceSampleRequestedEventArgs*>>
{
    static const wchar_t* z_get_rc_name_impl()
    {
        return L"Windows.Foundation.TypedEventHandler`2<Windows.Media.Core.MediaStreamSource, Windows.Media.Core.MediaStreamSourceSampleRequestedEventArgs>";
    }
};
// Define a typedef for the parameterized interface specialization's mangled name.
// This allows code which uses the mangled name for the parameterized interface to access the
// correct parameterized interface specialization.
typedef ITypedEventHandler<ABI::Windows::Media::Core::MediaStreamSource*, ABI::Windows::Media::Core::MediaStreamSourceSampleRequestedEventArgs*> __FITypedEventHandler_2_Windows__CMedia__CCore__CMediaStreamSource_Windows__CMedia__CCore__CMediaStreamSourceSampleRequestedEventArgs_t;
#define __FITypedEventHandler_2_Windows__CMedia__CCore__CMediaStreamSource_Windows__CMedia__CCore__CMediaStreamSourceSampleRequestedEventArgs ABI::Windows::Foundation::__FITypedEventHandler_2_Windows__CMedia__CCore__CMediaStreamSource_Windows__CMedia__CCore__CMediaStreamSourceSampleRequestedEventArgs_t
/* Foundation */ } /* Windows */ } /* ABI */ }

#endif // !defined(RO_NO_TEMPLATE_NAME)
#endif /* DEF___FITypedEventHandler_2_Windows__CMedia__CCore__CMediaStreamSource_Windows__CMedia__CCore__CMediaStreamSourceSampleRequestedEventArgs_USE */

#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

namespace ABI {
    namespace Windows {
        namespace Media {
            namespace Core {
                class MediaStreamSourceStartingEventArgs;
            } /* Core */
        } /* Media */
    } /* Windows */
} /* ABI */

#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

#ifndef DEF___FITypedEventHandler_2_Windows__CMedia__CCore__CMediaStreamSource_Windows__CMedia__CCore__CMediaStreamSourceStartingEventArgs_USE
#define DEF___FITypedEventHandler_2_Windows__CMedia__CCore__CMediaStreamSource_Windows__CMedia__CCore__CMediaStreamSourceStartingEventArgs_USE
#if !defined(RO_NO_TEMPLATE_NAME)
namespace ABI { namespace Windows { namespace Foundation {
template <>
struct __declspec(uuid("a93d5846-c660-586e-b6b5-a52fb81f9240"))
ITypedEventHandler<ABI::Windows::Media::Core::MediaStreamSource*, ABI::Windows::Media::Core::MediaStreamSourceStartingEventArgs*> : ITypedEventHandler_impl<ABI::Windows::Foundation::Internal::AggregateType<ABI::Windows::Media::Core::MediaStreamSource*, ABI::Windows::Media::Core::IMediaStreamSource*>, ABI::Windows::Foundation::Internal::AggregateType<ABI::Windows::Media::Core::MediaStreamSourceStartingEventArgs*, ABI::Windows::Media::Core::IMediaStreamSourceStartingEventArgs*>>
{
    static const wchar_t* z_get_rc_name_impl()
    {
        return L"Windows.Foundation.TypedEventHandler`2<Windows.Media.Core.MediaStreamSource, Windows.Media.Core.MediaStreamSourceStartingEventArgs>";
    }
};
// Define a typedef for the parameterized interface specialization's mangled name.
// This allows code which uses the mangled name for the parameterized interface to access the
// correct parameterized interface specialization.
typedef ITypedEventHandler<ABI::Windows::Media::Core::MediaStreamSource*, ABI::Windows::Media::Core::MediaStreamSourceStartingEventArgs*> __FITypedEventHandler_2_Windows__CMedia__CCore__CMediaStreamSource_Windows__CMedia__CCore__CMediaStreamSourceStartingEventArgs_t;
#define __FITypedEventHandler_2_Windows__CMedia__CCore__CMediaStreamSource_Windows__CMedia__CCore__CMediaStreamSourceStartingEventArgs ABI::Windows::Foundation::__FITypedEventHandler_2_Windows__CMedia__CCore__CMediaStreamSource_Windows__CMedia__CCore__CMediaStreamSourceStartingEventArgs_t
/* Foundation */ } /* Windows */ } /* ABI */ }

#endif // !defined(RO_NO_TEMPLATE_NAME)
#endif /* DEF___FITypedEventHandler_2_Windows__CMedia__CCore__CMediaStreamSource_Windows__CMedia__CCore__CMediaStreamSourceStartingEventArgs_USE */

#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

namespace ABI {
    namespace Windows {
        namespace Media {
            namespace Core {
                class MediaStreamSourceSwitchStreamsRequestedEventArgs;
            } /* Core */
        } /* Media */
    } /* Windows */
} /* ABI */

#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

#ifndef DEF___FITypedEventHandler_2_Windows__CMedia__CCore__CMediaStreamSource_Windows__CMedia__CCore__CMediaStreamSourceSwitchStreamsRequestedEventArgs_USE
#define DEF___FITypedEventHandler_2_Windows__CMedia__CCore__CMediaStreamSource_Windows__CMedia__CCore__CMediaStreamSourceSwitchStreamsRequestedEventArgs_USE
#if !defined(RO_NO_TEMPLATE_NAME)
namespace ABI { namespace Windows { namespace Foundation {
template <>
struct __declspec(uuid("452b2e4a-5511-5b3c-8a8e-ee659576a4c1"))
ITypedEventHandler<ABI::Windows::Media::Core::MediaStreamSource*, ABI::Windows::Media::Core::MediaStreamSourceSwitchStreamsRequestedEventArgs*> : ITypedEventHandler_impl<ABI::Windows::Foundation::Internal::AggregateType<ABI::Windows::Media::Core::MediaStreamSource*, ABI::Windows::Media::Core::IMediaStreamSource*>, ABI::Windows::Foundation::Internal::AggregateType<ABI::Windows::Media::Core::MediaStreamSourceSwitchStreamsRequestedEventArgs*, ABI::Windows::Media::Core::IMediaStreamSourceSwitchStreamsRequestedEventArgs*>>
{
    static const wchar_t* z_get_rc_name_impl()
    {
        return L"Windows.Foundation.TypedEventHandler`2<Windows.Media.Core.MediaStreamSource, Windows.Media.Core.MediaStreamSourceSwitchStreamsRequestedEventArgs>";
    }
};
// Define a typedef for the parameterized interface specialization's mangled name.
// This allows code which uses the mangled name for the parameterized interface to access the
// correct parameterized interface specialization.
typedef ITypedEventHandler<ABI::Windows::Media::Core::MediaStreamSource*, ABI::Windows::Media::Core::MediaStreamSourceSwitchStreamsRequestedEventArgs*> __FITypedEventHandler_2_Windows__CMedia__CCore__CMediaStreamSource_Windows__CMedia__CCore__CMediaStreamSourceSwitchStreamsRequestedEventArgs_t;
#define __FITypedEventHandler_2_Windows__CMedia__CCore__CMediaStreamSource_Windows__CMedia__CCore__CMediaStreamSourceSwitchStreamsRequestedEventArgs ABI::Windows::Foundation::__FITypedEventHandler_2_Windows__CMedia__CCore__CMediaStreamSource_Windows__CMedia__CCore__CMediaStreamSourceSwitchStreamsRequestedEventArgs_t
/* Foundation */ } /* Windows */ } /* ABI */ }

#endif // !defined(RO_NO_TEMPLATE_NAME)
#endif /* DEF___FITypedEventHandler_2_Windows__CMedia__CCore__CMediaStreamSource_Windows__CMedia__CCore__CMediaStreamSourceSwitchStreamsRequestedEventArgs_USE */

#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

#ifndef DEF___FITypedEventHandler_2_Windows__CMedia__CCore__CMseSourceBuffer_IInspectable_USE
#define DEF___FITypedEventHandler_2_Windows__CMedia__CCore__CMseSourceBuffer_IInspectable_USE
#if !defined(RO_NO_TEMPLATE_NAME)
namespace ABI { namespace Windows { namespace Foundation {
template <>
struct __declspec(uuid("187fd3d7-bb9d-541a-94fd-43c31dd84a67"))
ITypedEventHandler<ABI::Windows::Media::Core::MseSourceBuffer*, IInspectable*> : ITypedEventHandler_impl<ABI::Windows::Foundation::Internal::AggregateType<ABI::Windows::Media::Core::MseSourceBuffer*, ABI::Windows::Media::Core::IMseSourceBuffer*>, IInspectable*>
{
    static const wchar_t* z_get_rc_name_impl()
    {
        return L"Windows.Foundation.TypedEventHandler`2<Windows.Media.Core.MseSourceBuffer, Object>";
    }
};
// Define a typedef for the parameterized interface specialization's mangled name.
// This allows code which uses the mangled name for the parameterized interface to access the
// correct parameterized interface specialization.
typedef ITypedEventHandler<ABI::Windows::Media::Core::MseSourceBuffer*, IInspectable*> __FITypedEventHandler_2_Windows__CMedia__CCore__CMseSourceBuffer_IInspectable_t;
#define __FITypedEventHandler_2_Windows__CMedia__CCore__CMseSourceBuffer_IInspectable ABI::Windows::Foundation::__FITypedEventHandler_2_Windows__CMedia__CCore__CMseSourceBuffer_IInspectable_t
/* Foundation */ } /* Windows */ } /* ABI */ }

#endif // !defined(RO_NO_TEMPLATE_NAME)
#endif /* DEF___FITypedEventHandler_2_Windows__CMedia__CCore__CMseSourceBuffer_IInspectable_USE */

#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

namespace ABI {
    namespace Windows {
        namespace Media {
            namespace Core {
                class MseSourceBufferList;
            } /* Core */
        } /* Media */
    } /* Windows */
} /* ABI */

#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

#ifndef DEF___FITypedEventHandler_2_Windows__CMedia__CCore__CMseSourceBufferList_IInspectable_USE
#define DEF___FITypedEventHandler_2_Windows__CMedia__CCore__CMseSourceBufferList_IInspectable_USE
#if !defined(RO_NO_TEMPLATE_NAME)
namespace ABI { namespace Windows { namespace Foundation {
template <>
struct __declspec(uuid("0ff01695-fbb2-5e95-8ec7-da17d8e99f16"))
ITypedEventHandler<ABI::Windows::Media::Core::MseSourceBufferList*, IInspectable*> : ITypedEventHandler_impl<ABI::Windows::Foundation::Internal::AggregateType<ABI::Windows::Media::Core::MseSourceBufferList*, ABI::Windows::Media::Core::IMseSourceBufferList*>, IInspectable*>
{
    static const wchar_t* z_get_rc_name_impl()
    {
        return L"Windows.Foundation.TypedEventHandler`2<Windows.Media.Core.MseSourceBufferList, Object>";
    }
};
// Define a typedef for the parameterized interface specialization's mangled name.
// This allows code which uses the mangled name for the parameterized interface to access the
// correct parameterized interface specialization.
typedef ITypedEventHandler<ABI::Windows::Media::Core::MseSourceBufferList*, IInspectable*> __FITypedEventHandler_2_Windows__CMedia__CCore__CMseSourceBufferList_IInspectable_t;
#define __FITypedEventHandler_2_Windows__CMedia__CCore__CMseSourceBufferList_IInspectable ABI::Windows::Foundation::__FITypedEventHandler_2_Windows__CMedia__CCore__CMseSourceBufferList_IInspectable_t
/* Foundation */ } /* Windows */ } /* ABI */ }

#endif // !defined(RO_NO_TEMPLATE_NAME)
#endif /* DEF___FITypedEventHandler_2_Windows__CMedia__CCore__CMseSourceBufferList_IInspectable_USE */

#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

namespace ABI {
    namespace Windows {
        namespace Media {
            namespace Core {
                class MseStreamSource;
            } /* Core */
        } /* Media */
    } /* Windows */
} /* ABI */

#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

#ifndef DEF___FITypedEventHandler_2_Windows__CMedia__CCore__CMseStreamSource_IInspectable_USE
#define DEF___FITypedEventHandler_2_Windows__CMedia__CCore__CMseStreamSource_IInspectable_USE
#if !defined(RO_NO_TEMPLATE_NAME)
namespace ABI { namespace Windows { namespace Foundation {
template <>
struct __declspec(uuid("724bf4ef-de7a-5dbd-815e-522a87bc3344"))
ITypedEventHandler<ABI::Windows::Media::Core::MseStreamSource*, IInspectable*> : ITypedEventHandler_impl<ABI::Windows::Foundation::Internal::AggregateType<ABI::Windows::Media::Core::MseStreamSource*, ABI::Windows::Media::Core::IMseStreamSource*>, IInspectable*>
{
    static const wchar_t* z_get_rc_name_impl()
    {
        return L"Windows.Foundation.TypedEventHandler`2<Windows.Media.Core.MseStreamSource, Object>";
    }
};
// Define a typedef for the parameterized interface specialization's mangled name.
// This allows code which uses the mangled name for the parameterized interface to access the
// correct parameterized interface specialization.
typedef ITypedEventHandler<ABI::Windows::Media::Core::MseStreamSource*, IInspectable*> __FITypedEventHandler_2_Windows__CMedia__CCore__CMseStreamSource_IInspectable_t;
#define __FITypedEventHandler_2_Windows__CMedia__CCore__CMseStreamSource_IInspectable ABI::Windows::Foundation::__FITypedEventHandler_2_Windows__CMedia__CCore__CMseStreamSource_IInspectable_t
/* Foundation */ } /* Windows */ } /* ABI */ }

#endif // !defined(RO_NO_TEMPLATE_NAME)
#endif /* DEF___FITypedEventHandler_2_Windows__CMedia__CCore__CMseStreamSource_IInspectable_USE */

#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

namespace ABI {
    namespace Windows {
        namespace Media {
            namespace Core {
                class SceneAnalysisEffect;
            } /* Core */
        } /* Media */
    } /* Windows */
} /* ABI */

namespace ABI {
    namespace Windows {
        namespace Media {
            namespace Core {
                class SceneAnalyzedEventArgs;
            } /* Core */
        } /* Media */
    } /* Windows */
} /* ABI */

#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

#ifndef DEF___FITypedEventHandler_2_Windows__CMedia__CCore__CSceneAnalysisEffect_Windows__CMedia__CCore__CSceneAnalyzedEventArgs_USE
#define DEF___FITypedEventHandler_2_Windows__CMedia__CCore__CSceneAnalysisEffect_Windows__CMedia__CCore__CSceneAnalyzedEventArgs_USE
#if !defined(RO_NO_TEMPLATE_NAME)
namespace ABI { namespace Windows { namespace Foundation {
template <>
struct __declspec(uuid("48630f8c-dbde-569e-a0c8-7588d1d2bd03"))
ITypedEventHandler<ABI::Windows::Media::Core::SceneAnalysisEffect*, ABI::Windows::Media::Core::SceneAnalyzedEventArgs*> : ITypedEventHandler_impl<ABI::Windows::Foundation::Internal::AggregateType<ABI::Windows::Media::Core::SceneAnalysisEffect*, ABI::Windows::Media::Core::ISceneAnalysisEffect*>, ABI::Windows::Foundation::Internal::AggregateType<ABI::Windows::Media::Core::SceneAnalyzedEventArgs*, ABI::Windows::Media::Core::ISceneAnalyzedEventArgs*>>
{
    static const wchar_t* z_get_rc_name_impl()
    {
        return L"Windows.Foundation.TypedEventHandler`2<Windows.Media.Core.SceneAnalysisEffect, Windows.Media.Core.SceneAnalyzedEventArgs>";
    }
};
// Define a typedef for the parameterized interface specialization's mangled name.
// This allows code which uses the mangled name for the parameterized interface to access the
// correct parameterized interface specialization.
typedef ITypedEventHandler<ABI::Windows::Media::Core::SceneAnalysisEffect*, ABI::Windows::Media::Core::SceneAnalyzedEventArgs*> __FITypedEventHandler_2_Windows__CMedia__CCore__CSceneAnalysisEffect_Windows__CMedia__CCore__CSceneAnalyzedEventArgs_t;
#define __FITypedEventHandler_2_Windows__CMedia__CCore__CSceneAnalysisEffect_Windows__CMedia__CCore__CSceneAnalyzedEventArgs ABI::Windows::Foundation::__FITypedEventHandler_2_Windows__CMedia__CCore__CSceneAnalysisEffect_Windows__CMedia__CCore__CSceneAnalyzedEventArgs_t
/* Foundation */ } /* Windows */ } /* ABI */ }

#endif // !defined(RO_NO_TEMPLATE_NAME)
#endif /* DEF___FITypedEventHandler_2_Windows__CMedia__CCore__CSceneAnalysisEffect_Windows__CMedia__CCore__CSceneAnalyzedEventArgs_USE */

#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

namespace ABI {
    namespace Windows {
        namespace Media {
            namespace Core {
                class MediaCueEventArgs;
            } /* Core */
        } /* Media */
    } /* Windows */
} /* ABI */

#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

#ifndef DEF___FITypedEventHandler_2_Windows__CMedia__CCore__CTimedMetadataTrack_Windows__CMedia__CCore__CMediaCueEventArgs_USE
#define DEF___FITypedEventHandler_2_Windows__CMedia__CCore__CTimedMetadataTrack_Windows__CMedia__CCore__CMediaCueEventArgs_USE
#if !defined(RO_NO_TEMPLATE_NAME)
namespace ABI { namespace Windows { namespace Foundation {
template <>
struct __declspec(uuid("4aac9411-c355-5c95-8c78-5a0f5ca1a54d"))
ITypedEventHandler<ABI::Windows::Media::Core::TimedMetadataTrack*, ABI::Windows::Media::Core::MediaCueEventArgs*> : ITypedEventHandler_impl<ABI::Windows::Foundation::Internal::AggregateType<ABI::Windows::Media::Core::TimedMetadataTrack*, ABI::Windows::Media::Core::ITimedMetadataTrack*>, ABI::Windows::Foundation::Internal::AggregateType<ABI::Windows::Media::Core::MediaCueEventArgs*, ABI::Windows::Media::Core::IMediaCueEventArgs*>>
{
    static const wchar_t* z_get_rc_name_impl()
    {
        return L"Windows.Foundation.TypedEventHandler`2<Windows.Media.Core.TimedMetadataTrack, Windows.Media.Core.MediaCueEventArgs>";
    }
};
// Define a typedef for the parameterized interface specialization's mangled name.
// This allows code which uses the mangled name for the parameterized interface to access the
// correct parameterized interface specialization.
typedef ITypedEventHandler<ABI::Windows::Media::Core::TimedMetadataTrack*, ABI::Windows::Media::Core::MediaCueEventArgs*> __FITypedEventHandler_2_Windows__CMedia__CCore__CTimedMetadataTrack_Windows__CMedia__CCore__CMediaCueEventArgs_t;
#define __FITypedEventHandler_2_Windows__CMedia__CCore__CTimedMetadataTrack_Windows__CMedia__CCore__CMediaCueEventArgs ABI::Windows::Foundation::__FITypedEventHandler_2_Windows__CMedia__CCore__CTimedMetadataTrack_Windows__CMedia__CCore__CMediaCueEventArgs_t
/* Foundation */ } /* Windows */ } /* ABI */ }

#endif // !defined(RO_NO_TEMPLATE_NAME)
#endif /* DEF___FITypedEventHandler_2_Windows__CMedia__CCore__CTimedMetadataTrack_Windows__CMedia__CCore__CMediaCueEventArgs_USE */

#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

namespace ABI {
    namespace Windows {
        namespace Media {
            namespace Core {
                class TimedMetadataTrackFailedEventArgs;
            } /* Core */
        } /* Media */
    } /* Windows */
} /* ABI */

#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

#ifndef DEF___FITypedEventHandler_2_Windows__CMedia__CCore__CTimedMetadataTrack_Windows__CMedia__CCore__CTimedMetadataTrackFailedEventArgs_USE
#define DEF___FITypedEventHandler_2_Windows__CMedia__CCore__CTimedMetadataTrack_Windows__CMedia__CCore__CTimedMetadataTrackFailedEventArgs_USE
#if !defined(RO_NO_TEMPLATE_NAME)
namespace ABI { namespace Windows { namespace Foundation {
template <>
struct __declspec(uuid("8dc73162-255b-532e-b0c7-9a6d70b4bb9e"))
ITypedEventHandler<ABI::Windows::Media::Core::TimedMetadataTrack*, ABI::Windows::Media::Core::TimedMetadataTrackFailedEventArgs*> : ITypedEventHandler_impl<ABI::Windows::Foundation::Internal::AggregateType<ABI::Windows::Media::Core::TimedMetadataTrack*, ABI::Windows::Media::Core::ITimedMetadataTrack*>, ABI::Windows::Foundation::Internal::AggregateType<ABI::Windows::Media::Core::TimedMetadataTrackFailedEventArgs*, ABI::Windows::Media::Core::ITimedMetadataTrackFailedEventArgs*>>
{
    static const wchar_t* z_get_rc_name_impl()
    {
        return L"Windows.Foundation.TypedEventHandler`2<Windows.Media.Core.TimedMetadataTrack, Windows.Media.Core.TimedMetadataTrackFailedEventArgs>";
    }
};
// Define a typedef for the parameterized interface specialization's mangled name.
// This allows code which uses the mangled name for the parameterized interface to access the
// correct parameterized interface specialization.
typedef ITypedEventHandler<ABI::Windows::Media::Core::TimedMetadataTrack*, ABI::Windows::Media::Core::TimedMetadataTrackFailedEventArgs*> __FITypedEventHandler_2_Windows__CMedia__CCore__CTimedMetadataTrack_Windows__CMedia__CCore__CTimedMetadataTrackFailedEventArgs_t;
#define __FITypedEventHandler_2_Windows__CMedia__CCore__CTimedMetadataTrack_Windows__CMedia__CCore__CTimedMetadataTrackFailedEventArgs ABI::Windows::Foundation::__FITypedEventHandler_2_Windows__CMedia__CCore__CTimedMetadataTrack_Windows__CMedia__CCore__CTimedMetadataTrackFailedEventArgs_t
/* Foundation */ } /* Windows */ } /* ABI */ }

#endif // !defined(RO_NO_TEMPLATE_NAME)
#endif /* DEF___FITypedEventHandler_2_Windows__CMedia__CCore__CTimedMetadataTrack_Windows__CMedia__CCore__CTimedMetadataTrackFailedEventArgs_USE */

#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

namespace ABI {
    namespace Windows {
        namespace Media {
            namespace Core {
                class TimedTextSourceResolveResultEventArgs;
            } /* Core */
        } /* Media */
    } /* Windows */
} /* ABI */

#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

#ifndef DEF___FITypedEventHandler_2_Windows__CMedia__CCore__CTimedTextSource_Windows__CMedia__CCore__CTimedTextSourceResolveResultEventArgs_USE
#define DEF___FITypedEventHandler_2_Windows__CMedia__CCore__CTimedTextSource_Windows__CMedia__CCore__CTimedTextSourceResolveResultEventArgs_USE
#if !defined(RO_NO_TEMPLATE_NAME)
namespace ABI { namespace Windows { namespace Foundation {
template <>
struct __declspec(uuid("0220562a-5de4-5ad2-ac20-6cd26f111745"))
ITypedEventHandler<ABI::Windows::Media::Core::TimedTextSource*, ABI::Windows::Media::Core::TimedTextSourceResolveResultEventArgs*> : ITypedEventHandler_impl<ABI::Windows::Foundation::Internal::AggregateType<ABI::Windows::Media::Core::TimedTextSource*, ABI::Windows::Media::Core::ITimedTextSource*>, ABI::Windows::Foundation::Internal::AggregateType<ABI::Windows::Media::Core::TimedTextSourceResolveResultEventArgs*, ABI::Windows::Media::Core::ITimedTextSourceResolveResultEventArgs*>>
{
    static const wchar_t* z_get_rc_name_impl()
    {
        return L"Windows.Foundation.TypedEventHandler`2<Windows.Media.Core.TimedTextSource, Windows.Media.Core.TimedTextSourceResolveResultEventArgs>";
    }
};
// Define a typedef for the parameterized interface specialization's mangled name.
// This allows code which uses the mangled name for the parameterized interface to access the
// correct parameterized interface specialization.
typedef ITypedEventHandler<ABI::Windows::Media::Core::TimedTextSource*, ABI::Windows::Media::Core::TimedTextSourceResolveResultEventArgs*> __FITypedEventHandler_2_Windows__CMedia__CCore__CTimedTextSource_Windows__CMedia__CCore__CTimedTextSourceResolveResultEventArgs_t;
#define __FITypedEventHandler_2_Windows__CMedia__CCore__CTimedTextSource_Windows__CMedia__CCore__CTimedTextSourceResolveResultEventArgs ABI::Windows::Foundation::__FITypedEventHandler_2_Windows__CMedia__CCore__CTimedTextSource_Windows__CMedia__CCore__CTimedTextSourceResolveResultEventArgs_t
/* Foundation */ } /* Windows */ } /* ABI */ }

#endif // !defined(RO_NO_TEMPLATE_NAME)
#endif /* DEF___FITypedEventHandler_2_Windows__CMedia__CCore__CTimedTextSource_Windows__CMedia__CCore__CTimedTextSourceResolveResultEventArgs_USE */

#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

namespace ABI {
    namespace Windows {
        namespace Media {
            namespace Core {
                class VideoStabilizationEffect;
            } /* Core */
        } /* Media */
    } /* Windows */
} /* ABI */

namespace ABI {
    namespace Windows {
        namespace Media {
            namespace Core {
                class VideoStabilizationEffectEnabledChangedEventArgs;
            } /* Core */
        } /* Media */
    } /* Windows */
} /* ABI */

#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

#ifndef DEF___FITypedEventHandler_2_Windows__CMedia__CCore__CVideoStabilizationEffect_Windows__CMedia__CCore__CVideoStabilizationEffectEnabledChangedEventArgs_USE
#define DEF___FITypedEventHandler_2_Windows__CMedia__CCore__CVideoStabilizationEffect_Windows__CMedia__CCore__CVideoStabilizationEffectEnabledChangedEventArgs_USE
#if !defined(RO_NO_TEMPLATE_NAME)
namespace ABI { namespace Windows { namespace Foundation {
template <>
struct __declspec(uuid("897592e2-bfcc-5f16-8834-2c9c4f20559b"))
ITypedEventHandler<ABI::Windows::Media::Core::VideoStabilizationEffect*, ABI::Windows::Media::Core::VideoStabilizationEffectEnabledChangedEventArgs*> : ITypedEventHandler_impl<ABI::Windows::Foundation::Internal::AggregateType<ABI::Windows::Media::Core::VideoStabilizationEffect*, ABI::Windows::Media::Core::IVideoStabilizationEffect*>, ABI::Windows::Foundation::Internal::AggregateType<ABI::Windows::Media::Core::VideoStabilizationEffectEnabledChangedEventArgs*, ABI::Windows::Media::Core::IVideoStabilizationEffectEnabledChangedEventArgs*>>
{
    static const wchar_t* z_get_rc_name_impl()
    {
        return L"Windows.Foundation.TypedEventHandler`2<Windows.Media.Core.VideoStabilizationEffect, Windows.Media.Core.VideoStabilizationEffectEnabledChangedEventArgs>";
    }
};
// Define a typedef for the parameterized interface specialization's mangled name.
// This allows code which uses the mangled name for the parameterized interface to access the
// correct parameterized interface specialization.
typedef ITypedEventHandler<ABI::Windows::Media::Core::VideoStabilizationEffect*, ABI::Windows::Media::Core::VideoStabilizationEffectEnabledChangedEventArgs*> __FITypedEventHandler_2_Windows__CMedia__CCore__CVideoStabilizationEffect_Windows__CMedia__CCore__CVideoStabilizationEffectEnabledChangedEventArgs_t;
#define __FITypedEventHandler_2_Windows__CMedia__CCore__CVideoStabilizationEffect_Windows__CMedia__CCore__CVideoStabilizationEffectEnabledChangedEventArgs ABI::Windows::Foundation::__FITypedEventHandler_2_Windows__CMedia__CCore__CVideoStabilizationEffect_Windows__CMedia__CCore__CVideoStabilizationEffectEnabledChangedEventArgs_t
/* Foundation */ } /* Windows */ } /* ABI */ }

#endif // !defined(RO_NO_TEMPLATE_NAME)
#endif /* DEF___FITypedEventHandler_2_Windows__CMedia__CCore__CVideoStabilizationEffect_Windows__CMedia__CCore__CVideoStabilizationEffectEnabledChangedEventArgs_USE */

#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

namespace ABI {
    namespace Windows {
        namespace Media {
            namespace Core {
                class VideoTrack;
            } /* Core */
        } /* Media */
    } /* Windows */
} /* ABI */

namespace ABI {
    namespace Windows {
        namespace Media {
            namespace Core {
                class VideoTrackOpenFailedEventArgs;
            } /* Core */
        } /* Media */
    } /* Windows */
} /* ABI */

#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x30000

#ifndef DEF___FITypedEventHandler_2_Windows__CMedia__CCore__CVideoTrack_Windows__CMedia__CCore__CVideoTrackOpenFailedEventArgs_USE
#define DEF___FITypedEventHandler_2_Windows__CMedia__CCore__CVideoTrack_Windows__CMedia__CCore__CVideoTrackOpenFailedEventArgs_USE
#if !defined(RO_NO_TEMPLATE_NAME)
namespace ABI { namespace Windows { namespace Foundation {
template <>
struct __declspec(uuid("b1e4bd43-541b-53f3-ad6c-ddaac4813023"))
ITypedEventHandler<ABI::Windows::Media::Core::VideoTrack*, ABI::Windows::Media::Core::VideoTrackOpenFailedEventArgs*> : ITypedEventHandler_impl<ABI::Windows::Foundation::Internal::AggregateType<ABI::Windows::Media::Core::VideoTrack*, ABI::Windows::Media::Core::IMediaTrack*>, ABI::Windows::Foundation::Internal::AggregateType<ABI::Windows::Media::Core::VideoTrackOpenFailedEventArgs*, ABI::Windows::Media::Core::IVideoTrackOpenFailedEventArgs*>>
{
    static const wchar_t* z_get_rc_name_impl()
    {
        return L"Windows.Foundation.TypedEventHandler`2<Windows.Media.Core.VideoTrack, Windows.Media.Core.VideoTrackOpenFailedEventArgs>";
    }
};
// Define a typedef for the parameterized interface specialization's mangled name.
// This allows code which uses the mangled name for the parameterized interface to access the
// correct parameterized interface specialization.
typedef ITypedEventHandler<ABI::Windows::Media::Core::VideoTrack*, ABI::Windows::Media::Core::VideoTrackOpenFailedEventArgs*> __FITypedEventHandler_2_Windows__CMedia__CCore__CVideoTrack_Windows__CMedia__CCore__CVideoTrackOpenFailedEventArgs_t;
#define __FITypedEventHandler_2_Windows__CMedia__CCore__CVideoTrack_Windows__CMedia__CCore__CVideoTrackOpenFailedEventArgs ABI::Windows::Foundation::__FITypedEventHandler_2_Windows__CMedia__CCore__CVideoTrack_Windows__CMedia__CCore__CVideoTrackOpenFailedEventArgs_t
/* Foundation */ } /* Windows */ } /* ABI */ }

#endif // !defined(RO_NO_TEMPLATE_NAME)
#endif /* DEF___FITypedEventHandler_2_Windows__CMedia__CCore__CVideoTrack_Windows__CMedia__CCore__CVideoTrackOpenFailedEventArgs_USE */

#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x30000
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

namespace ABI {
    namespace Windows {
        namespace ApplicationModel {
            namespace AppService {
                class AppServiceConnection;
            } /* AppService */
        } /* ApplicationModel */
    } /* Windows */
} /* ABI */

#ifndef ____x_ABI_CWindows_CApplicationModel_CAppService_CIAppServiceConnection_FWD_DEFINED__
#define ____x_ABI_CWindows_CApplicationModel_CAppService_CIAppServiceConnection_FWD_DEFINED__
namespace ABI {
    namespace Windows {
        namespace ApplicationModel {
            namespace AppService {
                interface IAppServiceConnection;
            } /* AppService */
        } /* ApplicationModel */
    } /* Windows */
} /* ABI */
#define __x_ABI_CWindows_CApplicationModel_CAppService_CIAppServiceConnection ABI::Windows::ApplicationModel::AppService::IAppServiceConnection

#endif // ____x_ABI_CWindows_CApplicationModel_CAppService_CIAppServiceConnection_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CFoundation_CCollections_CIVectorChangedEventArgs_FWD_DEFINED__
#define ____x_ABI_CWindows_CFoundation_CCollections_CIVectorChangedEventArgs_FWD_DEFINED__
namespace ABI {
    namespace Windows {
        namespace Foundation {
            namespace Collections {
                interface IVectorChangedEventArgs;
            } /* Collections */
        } /* Foundation */
    } /* Windows */
} /* ABI */
#define __x_ABI_CWindows_CFoundation_CCollections_CIVectorChangedEventArgs ABI::Windows::Foundation::Collections::IVectorChangedEventArgs

#endif // ____x_ABI_CWindows_CFoundation_CCollections_CIVectorChangedEventArgs_FWD_DEFINED__

namespace ABI {
    namespace Windows {
        namespace Foundation {
            namespace Collections {
                class PropertySet;
            } /* Collections */
        } /* Foundation */
    } /* Windows */
} /* ABI */

#ifndef ____x_ABI_CWindows_CFoundation_CCollections_CIPropertySet_FWD_DEFINED__
#define ____x_ABI_CWindows_CFoundation_CCollections_CIPropertySet_FWD_DEFINED__
namespace ABI {
    namespace Windows {
        namespace Foundation {
            namespace Collections {
                interface IPropertySet;
            } /* Collections */
        } /* Foundation */
    } /* Windows */
} /* ABI */
#define __x_ABI_CWindows_CFoundation_CCollections_CIPropertySet ABI::Windows::Foundation::Collections::IPropertySet

#endif // ____x_ABI_CWindows_CFoundation_CCollections_CIPropertySet_FWD_DEFINED__

namespace ABI {
    namespace Windows {
        namespace Foundation {
            namespace Collections {
                class ValueSet;
            } /* Collections */
        } /* Foundation */
    } /* Windows */
} /* ABI */

namespace ABI {
    namespace Windows {
        namespace Foundation {
            class Deferral;
        } /* Foundation */
    } /* Windows */
} /* ABI */

#ifndef ____x_ABI_CWindows_CFoundation_CIDeferral_FWD_DEFINED__
#define ____x_ABI_CWindows_CFoundation_CIDeferral_FWD_DEFINED__
namespace ABI {
    namespace Windows {
        namespace Foundation {
            interface IDeferral;
        } /* Foundation */
    } /* Windows */
} /* ABI */
#define __x_ABI_CWindows_CFoundation_CIDeferral ABI::Windows::Foundation::IDeferral

#endif // ____x_ABI_CWindows_CFoundation_CIDeferral_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CFoundation_CIAsyncAction_FWD_DEFINED__
#define ____x_ABI_CWindows_CFoundation_CIAsyncAction_FWD_DEFINED__
namespace ABI {
    namespace Windows {
        namespace Foundation {
            interface IAsyncAction;
        } /* Foundation */
    } /* Windows */
} /* ABI */
#define __x_ABI_CWindows_CFoundation_CIAsyncAction ABI::Windows::Foundation::IAsyncAction

#endif // ____x_ABI_CWindows_CFoundation_CIAsyncAction_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CFoundation_CIClosable_FWD_DEFINED__
#define ____x_ABI_CWindows_CFoundation_CIClosable_FWD_DEFINED__
namespace ABI {
    namespace Windows {
        namespace Foundation {
            interface IClosable;
        } /* Foundation */
    } /* Windows */
} /* ABI */
#define __x_ABI_CWindows_CFoundation_CIClosable ABI::Windows::Foundation::IClosable

#endif // ____x_ABI_CWindows_CFoundation_CIClosable_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CFoundation_CIPropertyValue_FWD_DEFINED__
#define ____x_ABI_CWindows_CFoundation_CIPropertyValue_FWD_DEFINED__
namespace ABI {
    namespace Windows {
        namespace Foundation {
            interface IPropertyValue;
        } /* Foundation */
    } /* Windows */
} /* ABI */
#define __x_ABI_CWindows_CFoundation_CIPropertyValue ABI::Windows::Foundation::IPropertyValue

#endif // ____x_ABI_CWindows_CFoundation_CIPropertyValue_FWD_DEFINED__

namespace ABI {
    namespace Windows {
        namespace Foundation {
            class Uri;
        } /* Foundation */
    } /* Windows */
} /* ABI */

#ifndef ____x_ABI_CWindows_CFoundation_CIUriRuntimeClass_FWD_DEFINED__
#define ____x_ABI_CWindows_CFoundation_CIUriRuntimeClass_FWD_DEFINED__
namespace ABI {
    namespace Windows {
        namespace Foundation {
            interface IUriRuntimeClass;
        } /* Foundation */
    } /* Windows */
} /* ABI */
#define __x_ABI_CWindows_CFoundation_CIUriRuntimeClass ABI::Windows::Foundation::IUriRuntimeClass

#endif // ____x_ABI_CWindows_CFoundation_CIUriRuntimeClass_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CGraphics_CDirectX_CDirect3D11_CIDirect3DSurface_FWD_DEFINED__
#define ____x_ABI_CWindows_CGraphics_CDirectX_CDirect3D11_CIDirect3DSurface_FWD_DEFINED__
namespace ABI {
    namespace Windows {
        namespace Graphics {
            namespace DirectX {
                namespace Direct3D11 {
                    interface IDirect3DSurface;
                } /* Direct3D11 */
            } /* DirectX */
        } /* Graphics */
    } /* Windows */
} /* ABI */
#define __x_ABI_CWindows_CGraphics_CDirectX_CDirect3D11_CIDirect3DSurface ABI::Windows::Graphics::DirectX::Direct3D11::IDirect3DSurface

#endif // ____x_ABI_CWindows_CGraphics_CDirectX_CDirect3D11_CIDirect3DSurface_FWD_DEFINED__

namespace ABI {
    namespace Windows {
        namespace Media {
            namespace Capture {
                class CapturedFrameControlValues;
            } /* Capture */
        } /* Media */
    } /* Windows */
} /* ABI */

#ifndef ____x_ABI_CWindows_CMedia_CCapture_CICapturedFrameControlValues_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CCapture_CICapturedFrameControlValues_FWD_DEFINED__
namespace ABI {
    namespace Windows {
        namespace Media {
            namespace Capture {
                interface ICapturedFrameControlValues;
            } /* Capture */
        } /* Media */
    } /* Windows */
} /* ABI */
#define __x_ABI_CWindows_CMedia_CCapture_CICapturedFrameControlValues ABI::Windows::Media::Capture::ICapturedFrameControlValues

#endif // ____x_ABI_CWindows_CMedia_CCapture_CICapturedFrameControlValues_FWD_DEFINED__

namespace ABI {
    namespace Windows {
        namespace Media {
            namespace Capture {
                namespace Frames {
                    class MediaFrameSource;
                } /* Frames */
            } /* Capture */
        } /* Media */
    } /* Windows */
} /* ABI */

#ifndef ____x_ABI_CWindows_CMedia_CCapture_CFrames_CIMediaFrameSource_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CCapture_CFrames_CIMediaFrameSource_FWD_DEFINED__
namespace ABI {
    namespace Windows {
        namespace Media {
            namespace Capture {
                namespace Frames {
                    interface IMediaFrameSource;
                } /* Frames */
            } /* Capture */
        } /* Media */
    } /* Windows */
} /* ABI */
#define __x_ABI_CWindows_CMedia_CCapture_CFrames_CIMediaFrameSource ABI::Windows::Media::Capture::Frames::IMediaFrameSource

#endif // ____x_ABI_CWindows_CMedia_CCapture_CFrames_CIMediaFrameSource_FWD_DEFINED__

namespace ABI {
    namespace Windows {
        namespace Media {
            namespace Capture {
                class VideoStreamConfiguration;
            } /* Capture */
        } /* Media */
    } /* Windows */
} /* ABI */

#ifndef ____x_ABI_CWindows_CMedia_CCapture_CIVideoStreamConfiguration_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CCapture_CIVideoStreamConfiguration_FWD_DEFINED__
namespace ABI {
    namespace Windows {
        namespace Media {
            namespace Capture {
                interface IVideoStreamConfiguration;
            } /* Capture */
        } /* Media */
    } /* Windows */
} /* ABI */
#define __x_ABI_CWindows_CMedia_CCapture_CIVideoStreamConfiguration ABI::Windows::Media::Capture::IVideoStreamConfiguration

#endif // ____x_ABI_CWindows_CMedia_CCapture_CIVideoStreamConfiguration_FWD_DEFINED__

namespace ABI {
    namespace Windows {
        namespace Media {
            namespace Devices {
                class VideoDeviceController;
            } /* Devices */
        } /* Media */
    } /* Windows */
} /* ABI */

#ifndef ____x_ABI_CWindows_CMedia_CDevices_CIVideoDeviceController_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CDevices_CIVideoDeviceController_FWD_DEFINED__
namespace ABI {
    namespace Windows {
        namespace Media {
            namespace Devices {
                interface IVideoDeviceController;
            } /* Devices */
        } /* Media */
    } /* Windows */
} /* ABI */
#define __x_ABI_CWindows_CMedia_CDevices_CIVideoDeviceController ABI::Windows::Media::Devices::IVideoDeviceController

#endif // ____x_ABI_CWindows_CMedia_CDevices_CIVideoDeviceController_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CEffects_CIVideoEffectDefinition_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CEffects_CIVideoEffectDefinition_FWD_DEFINED__
namespace ABI {
    namespace Windows {
        namespace Media {
            namespace Effects {
                interface IVideoEffectDefinition;
            } /* Effects */
        } /* Media */
    } /* Windows */
} /* ABI */
#define __x_ABI_CWindows_CMedia_CEffects_CIVideoEffectDefinition ABI::Windows::Media::Effects::IVideoEffectDefinition

#endif // ____x_ABI_CWindows_CMedia_CEffects_CIVideoEffectDefinition_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CIMediaExtension_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CIMediaExtension_FWD_DEFINED__
namespace ABI {
    namespace Windows {
        namespace Media {
            interface IMediaExtension;
        } /* Media */
    } /* Windows */
} /* ABI */
#define __x_ABI_CWindows_CMedia_CIMediaExtension ABI::Windows::Media::IMediaExtension

#endif // ____x_ABI_CWindows_CMedia_CIMediaExtension_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CIMediaFrame_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CIMediaFrame_FWD_DEFINED__
namespace ABI {
    namespace Windows {
        namespace Media {
            interface IMediaFrame;
        } /* Media */
    } /* Windows */
} /* ABI */
#define __x_ABI_CWindows_CMedia_CIMediaFrame ABI::Windows::Media::IMediaFrame

#endif // ____x_ABI_CWindows_CMedia_CIMediaFrame_FWD_DEFINED__

namespace ABI {
    namespace Windows {
        namespace Media {
            namespace MediaProperties {
                class AudioEncodingProperties;
            } /* MediaProperties */
        } /* Media */
    } /* Windows */
} /* ABI */

#ifndef ____x_ABI_CWindows_CMedia_CMediaProperties_CIAudioEncodingProperties_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CMediaProperties_CIAudioEncodingProperties_FWD_DEFINED__
namespace ABI {
    namespace Windows {
        namespace Media {
            namespace MediaProperties {
                interface IAudioEncodingProperties;
            } /* MediaProperties */
        } /* Media */
    } /* Windows */
} /* ABI */
#define __x_ABI_CWindows_CMedia_CMediaProperties_CIAudioEncodingProperties ABI::Windows::Media::MediaProperties::IAudioEncodingProperties

#endif // ____x_ABI_CWindows_CMedia_CMediaProperties_CIAudioEncodingProperties_FWD_DEFINED__

namespace ABI {
    namespace Windows {
        namespace Media {
            namespace MediaProperties {
                class TimedMetadataEncodingProperties;
            } /* MediaProperties */
        } /* Media */
    } /* Windows */
} /* ABI */

#ifndef ____x_ABI_CWindows_CMedia_CMediaProperties_CIMediaEncodingProperties_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CMediaProperties_CIMediaEncodingProperties_FWD_DEFINED__
namespace ABI {
    namespace Windows {
        namespace Media {
            namespace MediaProperties {
                interface IMediaEncodingProperties;
            } /* MediaProperties */
        } /* Media */
    } /* Windows */
} /* ABI */
#define __x_ABI_CWindows_CMedia_CMediaProperties_CIMediaEncodingProperties ABI::Windows::Media::MediaProperties::IMediaEncodingProperties

#endif // ____x_ABI_CWindows_CMedia_CMediaProperties_CIMediaEncodingProperties_FWD_DEFINED__

namespace ABI {
    namespace Windows {
        namespace Media {
            namespace MediaProperties {
                class VideoEncodingProperties;
            } /* MediaProperties */
        } /* Media */
    } /* Windows */
} /* ABI */

#ifndef ____x_ABI_CWindows_CMedia_CMediaProperties_CIVideoEncodingProperties_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CMediaProperties_CIVideoEncodingProperties_FWD_DEFINED__
namespace ABI {
    namespace Windows {
        namespace Media {
            namespace MediaProperties {
                interface IVideoEncodingProperties;
            } /* MediaProperties */
        } /* Media */
    } /* Windows */
} /* ABI */
#define __x_ABI_CWindows_CMedia_CMediaProperties_CIVideoEncodingProperties ABI::Windows::Media::MediaProperties::IVideoEncodingProperties

#endif // ____x_ABI_CWindows_CMedia_CMediaProperties_CIVideoEncodingProperties_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CPlayback_CIMediaPlaybackSource_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CPlayback_CIMediaPlaybackSource_FWD_DEFINED__
namespace ABI {
    namespace Windows {
        namespace Media {
            namespace Playback {
                interface IMediaPlaybackSource;
            } /* Playback */
        } /* Media */
    } /* Windows */
} /* ABI */
#define __x_ABI_CWindows_CMedia_CPlayback_CIMediaPlaybackSource ABI::Windows::Media::Playback::IMediaPlaybackSource

#endif // ____x_ABI_CWindows_CMedia_CPlayback_CIMediaPlaybackSource_FWD_DEFINED__

namespace ABI {
    namespace Windows {
        namespace Media {
            namespace Playback {
                class MediaPlaybackItem;
            } /* Playback */
        } /* Media */
    } /* Windows */
} /* ABI */

#ifndef ____x_ABI_CWindows_CMedia_CPlayback_CIMediaPlaybackItem_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CPlayback_CIMediaPlaybackItem_FWD_DEFINED__
namespace ABI {
    namespace Windows {
        namespace Media {
            namespace Playback {
                interface IMediaPlaybackItem;
            } /* Playback */
        } /* Media */
    } /* Windows */
} /* ABI */
#define __x_ABI_CWindows_CMedia_CPlayback_CIMediaPlaybackItem ABI::Windows::Media::Playback::IMediaPlaybackItem

#endif // ____x_ABI_CWindows_CMedia_CPlayback_CIMediaPlaybackItem_FWD_DEFINED__

namespace ABI {
    namespace Windows {
        namespace Media {
            namespace Protection {
                class MediaProtectionManager;
            } /* Protection */
        } /* Media */
    } /* Windows */
} /* ABI */

#ifndef ____x_ABI_CWindows_CMedia_CProtection_CIMediaProtectionManager_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CProtection_CIMediaProtectionManager_FWD_DEFINED__
namespace ABI {
    namespace Windows {
        namespace Media {
            namespace Protection {
                interface IMediaProtectionManager;
            } /* Protection */
        } /* Media */
    } /* Windows */
} /* ABI */
#define __x_ABI_CWindows_CMedia_CProtection_CIMediaProtectionManager ABI::Windows::Media::Protection::IMediaProtectionManager

#endif // ____x_ABI_CWindows_CMedia_CProtection_CIMediaProtectionManager_FWD_DEFINED__

namespace ABI {
    namespace Windows {
        namespace Media {
            namespace Streaming {
                namespace Adaptive {
                    class AdaptiveMediaSource;
                } /* Adaptive */
            } /* Streaming */
        } /* Media */
    } /* Windows */
} /* ABI */

#ifndef ____x_ABI_CWindows_CMedia_CStreaming_CAdaptive_CIAdaptiveMediaSource_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CStreaming_CAdaptive_CIAdaptiveMediaSource_FWD_DEFINED__
namespace ABI {
    namespace Windows {
        namespace Media {
            namespace Streaming {
                namespace Adaptive {
                    interface IAdaptiveMediaSource;
                } /* Adaptive */
            } /* Streaming */
        } /* Media */
    } /* Windows */
} /* ABI */
#define __x_ABI_CWindows_CMedia_CStreaming_CAdaptive_CIAdaptiveMediaSource ABI::Windows::Media::Streaming::Adaptive::IAdaptiveMediaSource

#endif // ____x_ABI_CWindows_CMedia_CStreaming_CAdaptive_CIAdaptiveMediaSource_FWD_DEFINED__

namespace ABI {
    namespace Windows {
        namespace Networking {
            namespace BackgroundTransfer {
                class DownloadOperation;
            } /* BackgroundTransfer */
        } /* Networking */
    } /* Windows */
} /* ABI */

#ifndef ____x_ABI_CWindows_CNetworking_CBackgroundTransfer_CIDownloadOperation_FWD_DEFINED__
#define ____x_ABI_CWindows_CNetworking_CBackgroundTransfer_CIDownloadOperation_FWD_DEFINED__
namespace ABI {
    namespace Windows {
        namespace Networking {
            namespace BackgroundTransfer {
                interface IDownloadOperation;
            } /* BackgroundTransfer */
        } /* Networking */
    } /* Windows */
} /* ABI */
#define __x_ABI_CWindows_CNetworking_CBackgroundTransfer_CIDownloadOperation ABI::Windows::Networking::BackgroundTransfer::IDownloadOperation

#endif // ____x_ABI_CWindows_CNetworking_CBackgroundTransfer_CIDownloadOperation_FWD_DEFINED__

namespace ABI {
    namespace Windows {
        namespace Storage {
            namespace FileProperties {
                class MusicProperties;
            } /* FileProperties */
        } /* Storage */
    } /* Windows */
} /* ABI */

#ifndef ____x_ABI_CWindows_CStorage_CFileProperties_CIMusicProperties_FWD_DEFINED__
#define ____x_ABI_CWindows_CStorage_CFileProperties_CIMusicProperties_FWD_DEFINED__
namespace ABI {
    namespace Windows {
        namespace Storage {
            namespace FileProperties {
                interface IMusicProperties;
            } /* FileProperties */
        } /* Storage */
    } /* Windows */
} /* ABI */
#define __x_ABI_CWindows_CStorage_CFileProperties_CIMusicProperties ABI::Windows::Storage::FileProperties::IMusicProperties

#endif // ____x_ABI_CWindows_CStorage_CFileProperties_CIMusicProperties_FWD_DEFINED__

namespace ABI {
    namespace Windows {
        namespace Storage {
            namespace FileProperties {
                class VideoProperties;
            } /* FileProperties */
        } /* Storage */
    } /* Windows */
} /* ABI */

#ifndef ____x_ABI_CWindows_CStorage_CFileProperties_CIVideoProperties_FWD_DEFINED__
#define ____x_ABI_CWindows_CStorage_CFileProperties_CIVideoProperties_FWD_DEFINED__
namespace ABI {
    namespace Windows {
        namespace Storage {
            namespace FileProperties {
                interface IVideoProperties;
            } /* FileProperties */
        } /* Storage */
    } /* Windows */
} /* ABI */
#define __x_ABI_CWindows_CStorage_CFileProperties_CIVideoProperties ABI::Windows::Storage::FileProperties::IVideoProperties

#endif // ____x_ABI_CWindows_CStorage_CFileProperties_CIVideoProperties_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CStorage_CIStorageFile_FWD_DEFINED__
#define ____x_ABI_CWindows_CStorage_CIStorageFile_FWD_DEFINED__
namespace ABI {
    namespace Windows {
        namespace Storage {
            interface IStorageFile;
        } /* Storage */
    } /* Windows */
} /* ABI */
#define __x_ABI_CWindows_CStorage_CIStorageFile ABI::Windows::Storage::IStorageFile

#endif // ____x_ABI_CWindows_CStorage_CIStorageFile_FWD_DEFINED__

namespace ABI {
    namespace Windows {
        namespace Storage {
            namespace Streams {
                class Buffer;
            } /* Streams */
        } /* Storage */
    } /* Windows */
} /* ABI */

#ifndef ____x_ABI_CWindows_CStorage_CStreams_CIBuffer_FWD_DEFINED__
#define ____x_ABI_CWindows_CStorage_CStreams_CIBuffer_FWD_DEFINED__
namespace ABI {
    namespace Windows {
        namespace Storage {
            namespace Streams {
                interface IBuffer;
            } /* Streams */
        } /* Storage */
    } /* Windows */
} /* ABI */
#define __x_ABI_CWindows_CStorage_CStreams_CIBuffer ABI::Windows::Storage::Streams::IBuffer

#endif // ____x_ABI_CWindows_CStorage_CStreams_CIBuffer_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CStorage_CStreams_CIInputStream_FWD_DEFINED__
#define ____x_ABI_CWindows_CStorage_CStreams_CIInputStream_FWD_DEFINED__
namespace ABI {
    namespace Windows {
        namespace Storage {
            namespace Streams {
                interface IInputStream;
            } /* Streams */
        } /* Storage */
    } /* Windows */
} /* ABI */
#define __x_ABI_CWindows_CStorage_CStreams_CIInputStream ABI::Windows::Storage::Streams::IInputStream

#endif // ____x_ABI_CWindows_CStorage_CStreams_CIInputStream_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CStorage_CStreams_CIRandomAccessStream_FWD_DEFINED__
#define ____x_ABI_CWindows_CStorage_CStreams_CIRandomAccessStream_FWD_DEFINED__
namespace ABI {
    namespace Windows {
        namespace Storage {
            namespace Streams {
                interface IRandomAccessStream;
            } /* Streams */
        } /* Storage */
    } /* Windows */
} /* ABI */
#define __x_ABI_CWindows_CStorage_CStreams_CIRandomAccessStream ABI::Windows::Storage::Streams::IRandomAccessStream

#endif // ____x_ABI_CWindows_CStorage_CStreams_CIRandomAccessStream_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CStorage_CStreams_CIRandomAccessStreamReference_FWD_DEFINED__
#define ____x_ABI_CWindows_CStorage_CStreams_CIRandomAccessStreamReference_FWD_DEFINED__
namespace ABI {
    namespace Windows {
        namespace Storage {
            namespace Streams {
                interface IRandomAccessStreamReference;
            } /* Streams */
        } /* Storage */
    } /* Windows */
} /* ABI */
#define __x_ABI_CWindows_CStorage_CStreams_CIRandomAccessStreamReference ABI::Windows::Storage::Streams::IRandomAccessStreamReference

#endif // ____x_ABI_CWindows_CStorage_CStreams_CIRandomAccessStreamReference_FWD_DEFINED__

namespace ABI {
    namespace Windows {
        namespace UI {
            typedef struct Color Color;
        } /* UI */
    } /* Windows */
} /* ABI */

namespace ABI {
    namespace Windows {
        namespace Media {
            namespace Core {
                typedef enum AudioDecoderDegradation : int AudioDecoderDegradation;
            } /* Core */
        } /* Media */
    } /* Windows */
} /* ABI */

namespace ABI {
    namespace Windows {
        namespace Media {
            namespace Core {
                typedef enum AudioDecoderDegradationReason : int AudioDecoderDegradationReason;
            } /* Core */
        } /* Media */
    } /* Windows */
} /* ABI */

namespace ABI {
    namespace Windows {
        namespace Media {
            namespace Core {
                typedef enum CodecCategory : int CodecCategory;
            } /* Core */
        } /* Media */
    } /* Windows */
} /* ABI */

namespace ABI {
    namespace Windows {
        namespace Media {
            namespace Core {
                typedef enum CodecKind : int CodecKind;
            } /* Core */
        } /* Media */
    } /* Windows */
} /* ABI */

namespace ABI {
    namespace Windows {
        namespace Media {
            namespace Core {
                typedef enum FaceDetectionMode : int FaceDetectionMode;
            } /* Core */
        } /* Media */
    } /* Windows */
} /* ABI */

namespace ABI {
    namespace Windows {
        namespace Media {
            namespace Core {
                typedef enum MediaDecoderStatus : int MediaDecoderStatus;
            } /* Core */
        } /* Media */
    } /* Windows */
} /* ABI */

namespace ABI {
    namespace Windows {
        namespace Media {
            namespace Core {
                typedef enum MediaSourceState : int MediaSourceState;
            } /* Core */
        } /* Media */
    } /* Windows */
} /* ABI */

namespace ABI {
    namespace Windows {
        namespace Media {
            namespace Core {
                typedef enum MediaSourceStatus : int MediaSourceStatus;
            } /* Core */
        } /* Media */
    } /* Windows */
} /* ABI */

namespace ABI {
    namespace Windows {
        namespace Media {
            namespace Core {
                typedef enum MediaStreamSourceClosedReason : int MediaStreamSourceClosedReason;
            } /* Core */
        } /* Media */
    } /* Windows */
} /* ABI */

namespace ABI {
    namespace Windows {
        namespace Media {
            namespace Core {
                typedef enum MediaStreamSourceErrorStatus : int MediaStreamSourceErrorStatus;
            } /* Core */
        } /* Media */
    } /* Windows */
} /* ABI */

namespace ABI {
    namespace Windows {
        namespace Media {
            namespace Core {
                typedef enum MediaTrackKind : int MediaTrackKind;
            } /* Core */
        } /* Media */
    } /* Windows */
} /* ABI */

namespace ABI {
    namespace Windows {
        namespace Media {
            namespace Core {
                typedef enum MseAppendMode : int MseAppendMode;
            } /* Core */
        } /* Media */
    } /* Windows */
} /* ABI */

namespace ABI {
    namespace Windows {
        namespace Media {
            namespace Core {
                typedef enum MseEndOfStreamStatus : int MseEndOfStreamStatus;
            } /* Core */
        } /* Media */
    } /* Windows */
} /* ABI */

namespace ABI {
    namespace Windows {
        namespace Media {
            namespace Core {
                typedef enum MseReadyState : int MseReadyState;
            } /* Core */
        } /* Media */
    } /* Windows */
} /* ABI */

namespace ABI {
    namespace Windows {
        namespace Media {
            namespace Core {
                typedef enum SceneAnalysisRecommendation : int SceneAnalysisRecommendation;
            } /* Core */
        } /* Media */
    } /* Windows */
} /* ABI */

namespace ABI {
    namespace Windows {
        namespace Media {
            namespace Core {
                typedef enum TimedMetadataKind : int TimedMetadataKind;
            } /* Core */
        } /* Media */
    } /* Windows */
} /* ABI */

namespace ABI {
    namespace Windows {
        namespace Media {
            namespace Core {
                typedef enum TimedMetadataTrackErrorCode : int TimedMetadataTrackErrorCode;
            } /* Core */
        } /* Media */
    } /* Windows */
} /* ABI */

namespace ABI {
    namespace Windows {
        namespace Media {
            namespace Core {
                typedef enum TimedTextDisplayAlignment : int TimedTextDisplayAlignment;
            } /* Core */
        } /* Media */
    } /* Windows */
} /* ABI */

namespace ABI {
    namespace Windows {
        namespace Media {
            namespace Core {
                typedef enum TimedTextFlowDirection : int TimedTextFlowDirection;
            } /* Core */
        } /* Media */
    } /* Windows */
} /* ABI */

namespace ABI {
    namespace Windows {
        namespace Media {
            namespace Core {
                typedef enum TimedTextFontStyle : int TimedTextFontStyle;
            } /* Core */
        } /* Media */
    } /* Windows */
} /* ABI */

namespace ABI {
    namespace Windows {
        namespace Media {
            namespace Core {
                typedef enum TimedTextLineAlignment : int TimedTextLineAlignment;
            } /* Core */
        } /* Media */
    } /* Windows */
} /* ABI */

namespace ABI {
    namespace Windows {
        namespace Media {
            namespace Core {
                typedef enum TimedTextScrollMode : int TimedTextScrollMode;
            } /* Core */
        } /* Media */
    } /* Windows */
} /* ABI */

namespace ABI {
    namespace Windows {
        namespace Media {
            namespace Core {
                typedef enum TimedTextUnit : int TimedTextUnit;
            } /* Core */
        } /* Media */
    } /* Windows */
} /* ABI */

namespace ABI {
    namespace Windows {
        namespace Media {
            namespace Core {
                typedef enum TimedTextWeight : int TimedTextWeight;
            } /* Core */
        } /* Media */
    } /* Windows */
} /* ABI */

namespace ABI {
    namespace Windows {
        namespace Media {
            namespace Core {
                typedef enum TimedTextWrapping : int TimedTextWrapping;
            } /* Core */
        } /* Media */
    } /* Windows */
} /* ABI */

namespace ABI {
    namespace Windows {
        namespace Media {
            namespace Core {
                typedef enum TimedTextWritingMode : int TimedTextWritingMode;
            } /* Core */
        } /* Media */
    } /* Windows */
} /* ABI */

namespace ABI {
    namespace Windows {
        namespace Media {
            namespace Core {
                typedef enum VideoStabilizationEffectEnabledChangedReason : int VideoStabilizationEffectEnabledChangedReason;
            } /* Core */
        } /* Media */
    } /* Windows */
} /* ABI */

namespace ABI {
    namespace Windows {
        namespace Media {
            namespace Core {
                typedef struct TimedTextDouble TimedTextDouble;
            } /* Core */
        } /* Media */
    } /* Windows */
} /* ABI */

namespace ABI {
    namespace Windows {
        namespace Media {
            namespace Core {
                typedef struct TimedTextPadding TimedTextPadding;
            } /* Core */
        } /* Media */
    } /* Windows */
} /* ABI */

namespace ABI {
    namespace Windows {
        namespace Media {
            namespace Core {
                typedef struct TimedTextPoint TimedTextPoint;
            } /* Core */
        } /* Media */
    } /* Windows */
} /* ABI */

namespace ABI {
    namespace Windows {
        namespace Media {
            namespace Core {
                typedef struct TimedTextSize TimedTextSize;
            } /* Core */
        } /* Media */
    } /* Windows */
} /* ABI */

namespace ABI {
    namespace Windows {
        namespace Media {
            namespace Core {
                class AudioStreamDescriptor;
            } /* Core */
        } /* Media */
    } /* Windows */
} /* ABI */

namespace ABI {
    namespace Windows {
        namespace Media {
            namespace Core {
                class AudioTrackSupportInfo;
            } /* Core */
        } /* Media */
    } /* Windows */
} /* ABI */

namespace ABI {
    namespace Windows {
        namespace Media {
            namespace Core {
                class FaceDetectionEffectFrame;
            } /* Core */
        } /* Media */
    } /* Windows */
} /* ABI */

namespace ABI {
    namespace Windows {
        namespace Media {
            namespace Core {
                class HighDynamicRangeControl;
            } /* Core */
        } /* Media */
    } /* Windows */
} /* ABI */

namespace ABI {
    namespace Windows {
        namespace Media {
            namespace Core {
                class HighDynamicRangeOutput;
            } /* Core */
        } /* Media */
    } /* Windows */
} /* ABI */

namespace ABI {
    namespace Windows {
        namespace Media {
            namespace Core {
                class MediaSourceError;
            } /* Core */
        } /* Media */
    } /* Windows */
} /* ABI */

namespace ABI {
    namespace Windows {
        namespace Media {
            namespace Core {
                class MediaStreamSamplePropertySet;
            } /* Core */
        } /* Media */
    } /* Windows */
} /* ABI */

namespace ABI {
    namespace Windows {
        namespace Media {
            namespace Core {
                class MediaStreamSampleProtectionProperties;
            } /* Core */
        } /* Media */
    } /* Windows */
} /* ABI */

namespace ABI {
    namespace Windows {
        namespace Media {
            namespace Core {
                class MediaStreamSourceClosedRequest;
            } /* Core */
        } /* Media */
    } /* Windows */
} /* ABI */

namespace ABI {
    namespace Windows {
        namespace Media {
            namespace Core {
                class MediaStreamSourceSampleRequest;
            } /* Core */
        } /* Media */
    } /* Windows */
} /* ABI */

namespace ABI {
    namespace Windows {
        namespace Media {
            namespace Core {
                class MediaStreamSourceSampleRequestDeferral;
            } /* Core */
        } /* Media */
    } /* Windows */
} /* ABI */

namespace ABI {
    namespace Windows {
        namespace Media {
            namespace Core {
                class MediaStreamSourceStartingRequest;
            } /* Core */
        } /* Media */
    } /* Windows */
} /* ABI */

namespace ABI {
    namespace Windows {
        namespace Media {
            namespace Core {
                class MediaStreamSourceStartingRequestDeferral;
            } /* Core */
        } /* Media */
    } /* Windows */
} /* ABI */

namespace ABI {
    namespace Windows {
        namespace Media {
            namespace Core {
                class MediaStreamSourceSwitchStreamsRequest;
            } /* Core */
        } /* Media */
    } /* Windows */
} /* ABI */

namespace ABI {
    namespace Windows {
        namespace Media {
            namespace Core {
                class MediaStreamSourceSwitchStreamsRequestDeferral;
            } /* Core */
        } /* Media */
    } /* Windows */
} /* ABI */

namespace ABI {
    namespace Windows {
        namespace Media {
            namespace Core {
                class SceneAnalysisEffectFrame;
            } /* Core */
        } /* Media */
    } /* Windows */
} /* ABI */

namespace ABI {
    namespace Windows {
        namespace Media {
            namespace Core {
                class TimedMetadataStreamDescriptor;
            } /* Core */
        } /* Media */
    } /* Windows */
} /* ABI */

namespace ABI {
    namespace Windows {
        namespace Media {
            namespace Core {
                class TimedMetadataTrackError;
            } /* Core */
        } /* Media */
    } /* Windows */
} /* ABI */

namespace ABI {
    namespace Windows {
        namespace Media {
            namespace Core {
                class TimedTextRegion;
            } /* Core */
        } /* Media */
    } /* Windows */
} /* ABI */

namespace ABI {
    namespace Windows {
        namespace Media {
            namespace Core {
                class TimedTextStyle;
            } /* Core */
        } /* Media */
    } /* Windows */
} /* ABI */

namespace ABI {
    namespace Windows {
        namespace Media {
            namespace Core {
                class VideoStreamDescriptor;
            } /* Core */
        } /* Media */
    } /* Windows */
} /* ABI */

namespace ABI {
    namespace Windows {
        namespace Media {
            namespace Core {
                class VideoTrackSupportInfo;
            } /* Core */
        } /* Media */
    } /* Windows */
} /* ABI */

/*
 *
 * Struct Windows.Media.Core.AudioDecoderDegradation
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 3.0
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x30000
namespace ABI {
    namespace Windows {
        namespace Media {
            namespace Core {
                enum AudioDecoderDegradation : int
                {
                    AudioDecoderDegradation_None = 0,
                    AudioDecoderDegradation_DownmixTo2Channels = 1,
                    AudioDecoderDegradation_DownmixTo6Channels = 2,
                    AudioDecoderDegradation_DownmixTo8Channels = 3,
                };
            } /* Core */
        } /* Media */
    } /* Windows */
} /* ABI */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x30000

/*
 *
 * Struct Windows.Media.Core.AudioDecoderDegradationReason
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 3.0
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x30000
namespace ABI {
    namespace Windows {
        namespace Media {
            namespace Core {
                enum AudioDecoderDegradationReason : int
                {
                    AudioDecoderDegradationReason_None = 0,
                    AudioDecoderDegradationReason_LicensingRequirement = 1,
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x40000
                    AudioDecoderDegradationReason_SpatialAudioNotSupported = 2,
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x40000
                };
            } /* Core */
        } /* Media */
    } /* Windows */
} /* ABI */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x30000

/*
 *
 * Struct Windows.Media.Core.CodecCategory
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 4.0
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x40000
namespace ABI {
    namespace Windows {
        namespace Media {
            namespace Core {
                enum CodecCategory : int
                {
                    CodecCategory_Encoder = 0,
                    CodecCategory_Decoder = 1,
                };
            } /* Core */
        } /* Media */
    } /* Windows */
} /* ABI */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x40000

/*
 *
 * Struct Windows.Media.Core.CodecKind
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 4.0
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x40000
namespace ABI {
    namespace Windows {
        namespace Media {
            namespace Core {
                enum CodecKind : int
                {
                    CodecKind_Audio = 0,
                    CodecKind_Video = 1,
                };
            } /* Core */
        } /* Media */
    } /* Windows */
} /* ABI */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x40000

/*
 *
 * Struct Windows.Media.Core.FaceDetectionMode
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
namespace ABI {
    namespace Windows {
        namespace Media {
            namespace Core {
                enum FaceDetectionMode : int
                {
                    FaceDetectionMode_HighPerformance = 0,
                    FaceDetectionMode_Balanced = 1,
                    FaceDetectionMode_HighQuality = 2,
                };
            } /* Core */
        } /* Media */
    } /* Windows */
} /* ABI */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Struct Windows.Media.Core.MediaDecoderStatus
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 3.0
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x30000
namespace ABI {
    namespace Windows {
        namespace Media {
            namespace Core {
                enum MediaDecoderStatus : int
                {
                    MediaDecoderStatus_FullySupported = 0,
                    MediaDecoderStatus_UnsupportedSubtype = 1,
                    MediaDecoderStatus_UnsupportedEncoderProperties = 2,
                    MediaDecoderStatus_Degraded = 3,
                };
            } /* Core */
        } /* Media */
    } /* Windows */
} /* ABI */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x30000

/*
 *
 * Struct Windows.Media.Core.MediaSourceState
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 2.0
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x20000
namespace ABI {
    namespace Windows {
        namespace Media {
            namespace Core {
                enum MediaSourceState : int
                {
                    MediaSourceState_Initial = 0,
                    MediaSourceState_Opening = 1,
                    MediaSourceState_Opened = 2,
                    MediaSourceState_Failed = 3,
                    MediaSourceState_Closed = 4,
                };
            } /* Core */
        } /* Media */
    } /* Windows */
} /* ABI */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x20000

/*
 *
 * Struct Windows.Media.Core.MediaSourceStatus
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 3.0
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x30000
namespace ABI {
    namespace Windows {
        namespace Media {
            namespace Core {
                enum MediaSourceStatus : int
                {
                    MediaSourceStatus_FullySupported = 0,
                    MediaSourceStatus_Unknown = 1,
                };
            } /* Core */
        } /* Media */
    } /* Windows */
} /* ABI */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x30000

/*
 *
 * Struct Windows.Media.Core.MediaStreamSourceClosedReason
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
namespace ABI {
    namespace Windows {
        namespace Media {
            namespace Core {
                enum MediaStreamSourceClosedReason : int
                {
                    MediaStreamSourceClosedReason_Done = 0,
                    MediaStreamSourceClosedReason_UnknownError = 1,
                    MediaStreamSourceClosedReason_AppReportedError = 2,
                    MediaStreamSourceClosedReason_UnsupportedProtectionSystem = 3,
                    MediaStreamSourceClosedReason_ProtectionSystemFailure = 4,
                    MediaStreamSourceClosedReason_UnsupportedEncodingFormat = 5,
                    MediaStreamSourceClosedReason_MissingSampleRequestedEventHandler = 6,
                };
            } /* Core */
        } /* Media */
    } /* Windows */
} /* ABI */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Struct Windows.Media.Core.MediaStreamSourceErrorStatus
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
namespace ABI {
    namespace Windows {
        namespace Media {
            namespace Core {
                enum MediaStreamSourceErrorStatus : int
                {
                    MediaStreamSourceErrorStatus_Other = 0,
                    MediaStreamSourceErrorStatus_OutOfMemory = 1,
                    MediaStreamSourceErrorStatus_FailedToOpenFile = 2,
                    MediaStreamSourceErrorStatus_FailedToConnectToServer = 3,
                    MediaStreamSourceErrorStatus_ConnectionToServerLost = 4,
                    MediaStreamSourceErrorStatus_UnspecifiedNetworkError = 5,
                    MediaStreamSourceErrorStatus_DecodeError = 6,
                    MediaStreamSourceErrorStatus_UnsupportedMediaFormat = 7,
                };
            } /* Core */
        } /* Media */
    } /* Windows */
} /* ABI */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Struct Windows.Media.Core.MediaTrackKind
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
namespace ABI {
    namespace Windows {
        namespace Media {
            namespace Core {
                enum MediaTrackKind : int
                {
                    MediaTrackKind_Audio = 0,
                    MediaTrackKind_Video = 1,
                    MediaTrackKind_TimedMetadata = 2,
                };
            } /* Core */
        } /* Media */
    } /* Windows */
} /* ABI */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Struct Windows.Media.Core.MseAppendMode
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
namespace ABI {
    namespace Windows {
        namespace Media {
            namespace Core {
                enum MseAppendMode : int
                {
                    MseAppendMode_Segments = 0,
                    MseAppendMode_Sequence = 1,
                };
            } /* Core */
        } /* Media */
    } /* Windows */
} /* ABI */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Struct Windows.Media.Core.MseEndOfStreamStatus
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
namespace ABI {
    namespace Windows {
        namespace Media {
            namespace Core {
                enum MseEndOfStreamStatus : int
                {
                    MseEndOfStreamStatus_Success = 0,
                    MseEndOfStreamStatus_NetworkError = 1,
                    MseEndOfStreamStatus_DecodeError = 2,
                    MseEndOfStreamStatus_UnknownError = 3,
                };
            } /* Core */
        } /* Media */
    } /* Windows */
} /* ABI */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Struct Windows.Media.Core.MseReadyState
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
namespace ABI {
    namespace Windows {
        namespace Media {
            namespace Core {
                enum MseReadyState : int
                {
                    MseReadyState_Closed = 0,
                    MseReadyState_Open = 1,
                    MseReadyState_Ended = 2,
                };
            } /* Core */
        } /* Media */
    } /* Windows */
} /* ABI */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Struct Windows.Media.Core.SceneAnalysisRecommendation
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 5.0
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x50000
namespace ABI {
    namespace Windows {
        namespace Media {
            namespace Core {
                enum SceneAnalysisRecommendation : int
                {
                    SceneAnalysisRecommendation_Standard = 0,
                    SceneAnalysisRecommendation_Hdr = 1,
                    SceneAnalysisRecommendation_LowLight = 2,
                };
            } /* Core */
        } /* Media */
    } /* Windows */
} /* ABI */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x50000

/*
 *
 * Struct Windows.Media.Core.TimedMetadataKind
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
namespace ABI {
    namespace Windows {
        namespace Media {
            namespace Core {
                enum TimedMetadataKind : int
                {
                    TimedMetadataKind_Caption = 0,
                    TimedMetadataKind_Chapter = 1,
                    TimedMetadataKind_Custom = 2,
                    TimedMetadataKind_Data = 3,
                    TimedMetadataKind_Description = 4,
                    TimedMetadataKind_Subtitle = 5,
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x40000
                    TimedMetadataKind_ImageSubtitle = 6,
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x40000
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x40000
                    TimedMetadataKind_Speech = 7,
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x40000
                };
            } /* Core */
        } /* Media */
    } /* Windows */
} /* ABI */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Struct Windows.Media.Core.TimedMetadataTrackErrorCode
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
namespace ABI {
    namespace Windows {
        namespace Media {
            namespace Core {
                enum TimedMetadataTrackErrorCode : int
                {
                    TimedMetadataTrackErrorCode_None = 0,
                    TimedMetadataTrackErrorCode_DataFormatError = 1,
                    TimedMetadataTrackErrorCode_NetworkError = 2,
                    TimedMetadataTrackErrorCode_InternalError = 3,
                };
            } /* Core */
        } /* Media */
    } /* Windows */
} /* ABI */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Struct Windows.Media.Core.TimedTextDisplayAlignment
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
namespace ABI {
    namespace Windows {
        namespace Media {
            namespace Core {
                enum TimedTextDisplayAlignment : int
                {
                    TimedTextDisplayAlignment_Before = 0,
                    TimedTextDisplayAlignment_After = 1,
                    TimedTextDisplayAlignment_Center = 2,
                };
            } /* Core */
        } /* Media */
    } /* Windows */
} /* ABI */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Struct Windows.Media.Core.TimedTextFlowDirection
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
namespace ABI {
    namespace Windows {
        namespace Media {
            namespace Core {
                enum TimedTextFlowDirection : int
                {
                    TimedTextFlowDirection_LeftToRight = 0,
                    TimedTextFlowDirection_RightToLeft = 1,
                };
            } /* Core */
        } /* Media */
    } /* Windows */
} /* ABI */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Struct Windows.Media.Core.TimedTextFontStyle
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 4.0
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x40000
namespace ABI {
    namespace Windows {
        namespace Media {
            namespace Core {
                enum TimedTextFontStyle : int
                {
                    TimedTextFontStyle_Normal = 0,
                    TimedTextFontStyle_Oblique = 1,
                    TimedTextFontStyle_Italic = 2,
                };
            } /* Core */
        } /* Media */
    } /* Windows */
} /* ABI */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x40000

/*
 *
 * Struct Windows.Media.Core.TimedTextLineAlignment
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
namespace ABI {
    namespace Windows {
        namespace Media {
            namespace Core {
                enum TimedTextLineAlignment : int
                {
                    TimedTextLineAlignment_Start = 0,
                    TimedTextLineAlignment_End = 1,
                    TimedTextLineAlignment_Center = 2,
                };
            } /* Core */
        } /* Media */
    } /* Windows */
} /* ABI */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Struct Windows.Media.Core.TimedTextScrollMode
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
namespace ABI {
    namespace Windows {
        namespace Media {
            namespace Core {
                enum TimedTextScrollMode : int
                {
                    TimedTextScrollMode_Popon = 0,
                    TimedTextScrollMode_Rollup = 1,
                };
            } /* Core */
        } /* Media */
    } /* Windows */
} /* ABI */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Struct Windows.Media.Core.TimedTextUnit
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
namespace ABI {
    namespace Windows {
        namespace Media {
            namespace Core {
                enum TimedTextUnit : int
                {
                    TimedTextUnit_Pixels = 0,
                    TimedTextUnit_Percentage = 1,
                };
            } /* Core */
        } /* Media */
    } /* Windows */
} /* ABI */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Struct Windows.Media.Core.TimedTextWeight
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
namespace ABI {
    namespace Windows {
        namespace Media {
            namespace Core {
                enum TimedTextWeight : int
                {
                    TimedTextWeight_Normal = 400,
                    TimedTextWeight_Bold = 700,
                };
            } /* Core */
        } /* Media */
    } /* Windows */
} /* ABI */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Struct Windows.Media.Core.TimedTextWrapping
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
namespace ABI {
    namespace Windows {
        namespace Media {
            namespace Core {
                enum TimedTextWrapping : int
                {
                    TimedTextWrapping_NoWrap = 0,
                    TimedTextWrapping_Wrap = 1,
                };
            } /* Core */
        } /* Media */
    } /* Windows */
} /* ABI */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Struct Windows.Media.Core.TimedTextWritingMode
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
namespace ABI {
    namespace Windows {
        namespace Media {
            namespace Core {
                enum TimedTextWritingMode : int
                {
                    TimedTextWritingMode_LeftRightTopBottom = 0,
                    TimedTextWritingMode_RightLeftTopBottom = 1,
                    TimedTextWritingMode_TopBottomRightLeft = 2,
                    TimedTextWritingMode_TopBottomLeftRight = 3,
                    TimedTextWritingMode_LeftRight = 4,
                    TimedTextWritingMode_RightLeft = 5,
                    TimedTextWritingMode_TopBottom = 6,
                };
            } /* Core */
        } /* Media */
    } /* Windows */
} /* ABI */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Struct Windows.Media.Core.VideoStabilizationEffectEnabledChangedReason
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
namespace ABI {
    namespace Windows {
        namespace Media {
            namespace Core {
                enum VideoStabilizationEffectEnabledChangedReason : int
                {
                    VideoStabilizationEffectEnabledChangedReason_Programmatic = 0,
                    VideoStabilizationEffectEnabledChangedReason_PixelRateTooHigh = 1,
                    VideoStabilizationEffectEnabledChangedReason_RunningSlowly = 2,
                };
            } /* Core */
        } /* Media */
    } /* Windows */
} /* ABI */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Struct Windows.Media.Core.MseTimeRange
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
namespace ABI {
    namespace Windows {
        namespace Media {
            namespace Core {
                struct MseTimeRange
                {
                    ABI::Windows::Foundation::TimeSpan Start;
                    ABI::Windows::Foundation::TimeSpan End;
                };
            } /* Core */
        } /* Media */
    } /* Windows */
} /* ABI */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Struct Windows.Media.Core.TimedTextDouble
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
namespace ABI {
    namespace Windows {
        namespace Media {
            namespace Core {
                struct TimedTextDouble
                {
                    DOUBLE Value;
                    ABI::Windows::Media::Core::TimedTextUnit Unit;
                };
            } /* Core */
        } /* Media */
    } /* Windows */
} /* ABI */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Struct Windows.Media.Core.TimedTextPadding
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
namespace ABI {
    namespace Windows {
        namespace Media {
            namespace Core {
                struct TimedTextPadding
                {
                    DOUBLE Before;
                    DOUBLE After;
                    DOUBLE Start;
                    DOUBLE End;
                    ABI::Windows::Media::Core::TimedTextUnit Unit;
                };
            } /* Core */
        } /* Media */
    } /* Windows */
} /* ABI */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Struct Windows.Media.Core.TimedTextPoint
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
namespace ABI {
    namespace Windows {
        namespace Media {
            namespace Core {
                struct TimedTextPoint
                {
                    DOUBLE X;
                    DOUBLE Y;
                    ABI::Windows::Media::Core::TimedTextUnit Unit;
                };
            } /* Core */
        } /* Media */
    } /* Windows */
} /* ABI */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Struct Windows.Media.Core.TimedTextSize
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
namespace ABI {
    namespace Windows {
        namespace Media {
            namespace Core {
                struct TimedTextSize
                {
                    DOUBLE Height;
                    DOUBLE Width;
                    ABI::Windows::Media::Core::TimedTextUnit Unit;
                };
            } /* Core */
        } /* Media */
    } /* Windows */
} /* ABI */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Interface Windows.Media.Core.IAudioStreamDescriptor
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Interface is a part of the implementation of type Windows.Media.Core.AudioStreamDescriptor
 *
 * Any object which implements this interface must also implement the following interfaces:
 *     Windows.Media.Core.IMediaStreamDescriptor
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____x_ABI_CWindows_CMedia_CCore_CIAudioStreamDescriptor_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CMedia_CCore_CIAudioStreamDescriptor_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Media_Core_IAudioStreamDescriptor[] = L"Windows.Media.Core.IAudioStreamDescriptor";
namespace ABI {
    namespace Windows {
        namespace Media {
            namespace Core {
                MIDL_INTERFACE("1e3692e4-4027-4847-a70b-df1d9a2a7b04")
                IAudioStreamDescriptor : public IInspectable
                {
                public:
                    virtual HRESULT STDMETHODCALLTYPE get_EncodingProperties(
                        ABI::Windows::Media::MediaProperties::IAudioEncodingProperties** encodingProperties
                        ) = 0;
                };

                extern MIDL_CONST_ID IID& IID_IAudioStreamDescriptor = _uuidof(IAudioStreamDescriptor);
            } /* Core */
        } /* Media */
    } /* Windows */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CWindows_CMedia_CCore_CIAudioStreamDescriptor;
#endif /* !defined(____x_ABI_CWindows_CMedia_CCore_CIAudioStreamDescriptor_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Interface Windows.Media.Core.IAudioStreamDescriptor2
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 3.0
 *
 * Interface is a part of the implementation of type Windows.Media.Core.AudioStreamDescriptor
 *
 * Any object which implements this interface must also implement the following interfaces:
 *     Windows.Media.Core.IMediaStreamDescriptor
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x30000
#if !defined(____x_ABI_CWindows_CMedia_CCore_CIAudioStreamDescriptor2_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CMedia_CCore_CIAudioStreamDescriptor2_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Media_Core_IAudioStreamDescriptor2[] = L"Windows.Media.Core.IAudioStreamDescriptor2";
namespace ABI {
    namespace Windows {
        namespace Media {
            namespace Core {
                MIDL_INTERFACE("2e68f1f6-a448-497b-8840-85082665acf9")
                IAudioStreamDescriptor2 : public IInspectable
                {
                public:
                    virtual HRESULT STDMETHODCALLTYPE put_LeadingEncoderPadding(
                        __FIReference_1_UINT32* value
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE get_LeadingEncoderPadding(
                        __FIReference_1_UINT32** value
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE put_TrailingEncoderPadding(
                        __FIReference_1_UINT32* value
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE get_TrailingEncoderPadding(
                        __FIReference_1_UINT32** value
                        ) = 0;
                };

                extern MIDL_CONST_ID IID& IID_IAudioStreamDescriptor2 = _uuidof(IAudioStreamDescriptor2);
            } /* Core */
        } /* Media */
    } /* Windows */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CWindows_CMedia_CCore_CIAudioStreamDescriptor2;
#endif /* !defined(____x_ABI_CWindows_CMedia_CCore_CIAudioStreamDescriptor2_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x30000

/*
 *
 * Interface Windows.Media.Core.IAudioStreamDescriptor3
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 6.0
 *
 * Interface is a part of the implementation of type Windows.Media.Core.AudioStreamDescriptor
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x60000
#if !defined(____x_ABI_CWindows_CMedia_CCore_CIAudioStreamDescriptor3_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CMedia_CCore_CIAudioStreamDescriptor3_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Media_Core_IAudioStreamDescriptor3[] = L"Windows.Media.Core.IAudioStreamDescriptor3";
namespace ABI {
    namespace Windows {
        namespace Media {
            namespace Core {
                MIDL_INTERFACE("4d220da1-8e83-44ef-8973-2f63e993f36b")
                IAudioStreamDescriptor3 : public IInspectable
                {
                public:
                    virtual HRESULT STDMETHODCALLTYPE Copy(
                        ABI::Windows::Media::Core::IAudioStreamDescriptor** result
                        ) = 0;
                };

                extern MIDL_CONST_ID IID& IID_IAudioStreamDescriptor3 = _uuidof(IAudioStreamDescriptor3);
            } /* Core */
        } /* Media */
    } /* Windows */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CWindows_CMedia_CCore_CIAudioStreamDescriptor3;
#endif /* !defined(____x_ABI_CWindows_CMedia_CCore_CIAudioStreamDescriptor3_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x60000

/*
 *
 * Interface Windows.Media.Core.IAudioStreamDescriptorFactory
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Interface is a part of the implementation of type Windows.Media.Core.AudioStreamDescriptor
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____x_ABI_CWindows_CMedia_CCore_CIAudioStreamDescriptorFactory_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CMedia_CCore_CIAudioStreamDescriptorFactory_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Media_Core_IAudioStreamDescriptorFactory[] = L"Windows.Media.Core.IAudioStreamDescriptorFactory";
namespace ABI {
    namespace Windows {
        namespace Media {
            namespace Core {
                MIDL_INTERFACE("4a86ce9e-4cb1-4380-8e0c-83504b7f5bf3")
                IAudioStreamDescriptorFactory : public IInspectable
                {
                public:
                    virtual HRESULT STDMETHODCALLTYPE Create(
                        ABI::Windows::Media::MediaProperties::IAudioEncodingProperties* encodingProperties,
                        ABI::Windows::Media::Core::IAudioStreamDescriptor** result
                        ) = 0;
                };

                extern MIDL_CONST_ID IID& IID_IAudioStreamDescriptorFactory = _uuidof(IAudioStreamDescriptorFactory);
            } /* Core */
        } /* Media */
    } /* Windows */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CWindows_CMedia_CCore_CIAudioStreamDescriptorFactory;
#endif /* !defined(____x_ABI_CWindows_CMedia_CCore_CIAudioStreamDescriptorFactory_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Interface Windows.Media.Core.IAudioTrack
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 3.0
 *
 * Interface is a part of the implementation of type Windows.Media.Core.AudioTrack
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x30000
#if !defined(____x_ABI_CWindows_CMedia_CCore_CIAudioTrack_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CMedia_CCore_CIAudioTrack_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Media_Core_IAudioTrack[] = L"Windows.Media.Core.IAudioTrack";
namespace ABI {
    namespace Windows {
        namespace Media {
            namespace Core {
                MIDL_INTERFACE("f23b6e77-3ef7-40de-b943-068b1321701d")
                IAudioTrack : public IInspectable
                {
                public:
                    virtual HRESULT STDMETHODCALLTYPE add_OpenFailed(
                        __FITypedEventHandler_2_Windows__CMedia__CCore__CAudioTrack_Windows__CMedia__CCore__CAudioTrackOpenFailedEventArgs* handler,
                        EventRegistrationToken* token
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE remove_OpenFailed(
                        EventRegistrationToken token
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE GetEncodingProperties(
                        ABI::Windows::Media::MediaProperties::IAudioEncodingProperties** value
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE get_PlaybackItem(
                        ABI::Windows::Media::Playback::IMediaPlaybackItem** value
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE get_Name(
                        HSTRING* value
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE get_SupportInfo(
                        ABI::Windows::Media::Core::IAudioTrackSupportInfo** value
                        ) = 0;
                };

                extern MIDL_CONST_ID IID& IID_IAudioTrack = _uuidof(IAudioTrack);
            } /* Core */
        } /* Media */
    } /* Windows */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CWindows_CMedia_CCore_CIAudioTrack;
#endif /* !defined(____x_ABI_CWindows_CMedia_CCore_CIAudioTrack_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x30000

/*
 *
 * Interface Windows.Media.Core.IAudioTrackOpenFailedEventArgs
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 3.0
 *
 * Interface is a part of the implementation of type Windows.Media.Core.AudioTrackOpenFailedEventArgs
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x30000
#if !defined(____x_ABI_CWindows_CMedia_CCore_CIAudioTrackOpenFailedEventArgs_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CMedia_CCore_CIAudioTrackOpenFailedEventArgs_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Media_Core_IAudioTrackOpenFailedEventArgs[] = L"Windows.Media.Core.IAudioTrackOpenFailedEventArgs";
namespace ABI {
    namespace Windows {
        namespace Media {
            namespace Core {
                MIDL_INTERFACE("eeddb9b9-bb7c-4112-bf76-9384676f824b")
                IAudioTrackOpenFailedEventArgs : public IInspectable
                {
                public:
                    virtual HRESULT STDMETHODCALLTYPE get_ExtendedError(
                        HRESULT* value
                        ) = 0;
                };

                extern MIDL_CONST_ID IID& IID_IAudioTrackOpenFailedEventArgs = _uuidof(IAudioTrackOpenFailedEventArgs);
            } /* Core */
        } /* Media */
    } /* Windows */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CWindows_CMedia_CCore_CIAudioTrackOpenFailedEventArgs;
#endif /* !defined(____x_ABI_CWindows_CMedia_CCore_CIAudioTrackOpenFailedEventArgs_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x30000

/*
 *
 * Interface Windows.Media.Core.IAudioTrackSupportInfo
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 3.0
 *
 * Interface is a part of the implementation of type Windows.Media.Core.AudioTrackSupportInfo
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x30000
#if !defined(____x_ABI_CWindows_CMedia_CCore_CIAudioTrackSupportInfo_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CMedia_CCore_CIAudioTrackSupportInfo_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Media_Core_IAudioTrackSupportInfo[] = L"Windows.Media.Core.IAudioTrackSupportInfo";
namespace ABI {
    namespace Windows {
        namespace Media {
            namespace Core {
                MIDL_INTERFACE("178beff7-cc39-44a6-b951-4a5653f073fa")
                IAudioTrackSupportInfo : public IInspectable
                {
                public:
                    virtual HRESULT STDMETHODCALLTYPE get_DecoderStatus(
                        ABI::Windows::Media::Core::MediaDecoderStatus* value
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE get_Degradation(
                        ABI::Windows::Media::Core::AudioDecoderDegradation* value
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE get_DegradationReason(
                        ABI::Windows::Media::Core::AudioDecoderDegradationReason* value
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE get_MediaSourceStatus(
                        ABI::Windows::Media::Core::MediaSourceStatus* value
                        ) = 0;
                };

                extern MIDL_CONST_ID IID& IID_IAudioTrackSupportInfo = _uuidof(IAudioTrackSupportInfo);
            } /* Core */
        } /* Media */
    } /* Windows */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CWindows_CMedia_CCore_CIAudioTrackSupportInfo;
#endif /* !defined(____x_ABI_CWindows_CMedia_CCore_CIAudioTrackSupportInfo_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x30000

/*
 *
 * Interface Windows.Media.Core.IChapterCue
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 4.0
 *
 * Interface is a part of the implementation of type Windows.Media.Core.ChapterCue
 *
 * Any object which implements this interface must also implement the following interfaces:
 *     Windows.Media.Core.IMediaCue
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x40000
#if !defined(____x_ABI_CWindows_CMedia_CCore_CIChapterCue_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CMedia_CCore_CIChapterCue_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Media_Core_IChapterCue[] = L"Windows.Media.Core.IChapterCue";
namespace ABI {
    namespace Windows {
        namespace Media {
            namespace Core {
                MIDL_INTERFACE("72a98001-d38a-4c0a-8fa6-75cddaf4664c")
                IChapterCue : public IInspectable
                {
                public:
                    virtual HRESULT STDMETHODCALLTYPE put_Title(
                        HSTRING value
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE get_Title(
                        HSTRING* value
                        ) = 0;
                };

                extern MIDL_CONST_ID IID& IID_IChapterCue = _uuidof(IChapterCue);
            } /* Core */
        } /* Media */
    } /* Windows */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CWindows_CMedia_CCore_CIChapterCue;
#endif /* !defined(____x_ABI_CWindows_CMedia_CCore_CIChapterCue_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x40000

/*
 *
 * Interface Windows.Media.Core.ICodecInfo
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 4.0
 *
 * Interface is a part of the implementation of type Windows.Media.Core.CodecInfo
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x40000
#if !defined(____x_ABI_CWindows_CMedia_CCore_CICodecInfo_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CMedia_CCore_CICodecInfo_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Media_Core_ICodecInfo[] = L"Windows.Media.Core.ICodecInfo";
namespace ABI {
    namespace Windows {
        namespace Media {
            namespace Core {
                MIDL_INTERFACE("51e89f85-ea97-499c-86ac-4ce5e73f3a42")
                ICodecInfo : public IInspectable
                {
                public:
                    virtual HRESULT STDMETHODCALLTYPE get_Kind(
                        ABI::Windows::Media::Core::CodecKind* value
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE get_Category(
                        ABI::Windows::Media::Core::CodecCategory* value
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE get_Subtypes(
                        __FIVectorView_1_HSTRING** value
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE get_DisplayName(
                        HSTRING* value
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE get_IsTrusted(
                        boolean* value
                        ) = 0;
                };

                extern MIDL_CONST_ID IID& IID_ICodecInfo = _uuidof(ICodecInfo);
            } /* Core */
        } /* Media */
    } /* Windows */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CWindows_CMedia_CCore_CICodecInfo;
#endif /* !defined(____x_ABI_CWindows_CMedia_CCore_CICodecInfo_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x40000

/*
 *
 * Interface Windows.Media.Core.ICodecQuery
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 4.0
 *
 * Interface is a part of the implementation of type Windows.Media.Core.CodecQuery
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x40000
#if !defined(____x_ABI_CWindows_CMedia_CCore_CICodecQuery_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CMedia_CCore_CICodecQuery_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Media_Core_ICodecQuery[] = L"Windows.Media.Core.ICodecQuery";
namespace ABI {
    namespace Windows {
        namespace Media {
            namespace Core {
                MIDL_INTERFACE("222a953a-af61-4e04-808a-a4634e2f3ac4")
                ICodecQuery : public IInspectable
                {
                public:
                    virtual HRESULT STDMETHODCALLTYPE FindAllAsync(
                        ABI::Windows::Media::Core::CodecKind kind,
                        ABI::Windows::Media::Core::CodecCategory category,
                        HSTRING subType,
                        __FIAsyncOperation_1___FIVectorView_1_Windows__CMedia__CCore__CCodecInfo** value
                        ) = 0;
                };

                extern MIDL_CONST_ID IID& IID_ICodecQuery = _uuidof(ICodecQuery);
            } /* Core */
        } /* Media */
    } /* Windows */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CWindows_CMedia_CCore_CICodecQuery;
#endif /* !defined(____x_ABI_CWindows_CMedia_CCore_CICodecQuery_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x40000

/*
 *
 * Interface Windows.Media.Core.ICodecSubtypesStatics
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 4.0
 *
 * Interface is a part of the implementation of type Windows.Media.Core.CodecSubtypes
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x40000
#if !defined(____x_ABI_CWindows_CMedia_CCore_CICodecSubtypesStatics_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CMedia_CCore_CICodecSubtypesStatics_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Media_Core_ICodecSubtypesStatics[] = L"Windows.Media.Core.ICodecSubtypesStatics";
namespace ABI {
    namespace Windows {
        namespace Media {
            namespace Core {
                MIDL_INTERFACE("a66ac4f2-888b-4224-8cf6-2a8d4eb02382")
                ICodecSubtypesStatics : public IInspectable
                {
                public:
                    virtual HRESULT STDMETHODCALLTYPE get_VideoFormatDV25(
                        HSTRING* value
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE get_VideoFormatDV50(
                        HSTRING* value
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE get_VideoFormatDvc(
                        HSTRING* value
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE get_VideoFormatDvh1(
                        HSTRING* value
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE get_VideoFormatDvhD(
                        HSTRING* value
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE get_VideoFormatDvsd(
                        HSTRING* value
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE get_VideoFormatDvsl(
                        HSTRING* value
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE get_VideoFormatH263(
                        HSTRING* value
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE get_VideoFormatH264(
                        HSTRING* value
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE get_VideoFormatH265(
                        HSTRING* value
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE get_VideoFormatH264ES(
                        HSTRING* value
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE get_VideoFormatHevc(
                        HSTRING* value
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE get_VideoFormatHevcES(
                        HSTRING* value
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE get_VideoFormatM4S2(
                        HSTRING* value
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE get_VideoFormatMjpg(
                        HSTRING* value
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE get_VideoFormatMP43(
                        HSTRING* value
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE get_VideoFormatMP4S(
                        HSTRING* value
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE get_VideoFormatMP4V(
                        HSTRING* value
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE get_VideoFormatMpeg2(
                        HSTRING* value
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE get_VideoFormatVP80(
                        HSTRING* value
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE get_VideoFormatVP90(
                        HSTRING* value
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE get_VideoFormatMpg1(
                        HSTRING* value
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE get_VideoFormatMss1(
                        HSTRING* value
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE get_VideoFormatMss2(
                        HSTRING* value
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE get_VideoFormatWmv1(
                        HSTRING* value
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE get_VideoFormatWmv2(
                        HSTRING* value
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE get_VideoFormatWmv3(
                        HSTRING* value
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE get_VideoFormatWvc1(
                        HSTRING* value
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE get_VideoFormat420O(
                        HSTRING* value
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE get_AudioFormatAac(
                        HSTRING* value
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE get_AudioFormatAdts(
                        HSTRING* value
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE get_AudioFormatAlac(
                        HSTRING* value
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE get_AudioFormatAmrNB(
                        HSTRING* value
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE get_AudioFormatAmrWB(
                        HSTRING* value
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE get_AudioFormatAmrWP(
                        HSTRING* value
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE get_AudioFormatDolbyAC3(
                        HSTRING* value
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE get_AudioFormatDolbyAC3Spdif(
                        HSTRING* value
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE get_AudioFormatDolbyDDPlus(
                        HSTRING* value
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE get_AudioFormatDrm(
                        HSTRING* value
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE get_AudioFormatDts(
                        HSTRING* value
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE get_AudioFormatFlac(
                        HSTRING* value
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE get_AudioFormatFloat(
                        HSTRING* value
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE get_AudioFormatMP3(
                        HSTRING* value
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE get_AudioFormatMPeg(
                        HSTRING* value
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE get_AudioFormatMsp1(
                        HSTRING* value
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE get_AudioFormatOpus(
                        HSTRING* value
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE get_AudioFormatPcm(
                        HSTRING* value
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE get_AudioFormatWmaSpdif(
                        HSTRING* value
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE get_AudioFormatWMAudioLossless(
                        HSTRING* value
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE get_AudioFormatWMAudioV8(
                        HSTRING* value
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE get_AudioFormatWMAudioV9(
                        HSTRING* value
                        ) = 0;
                };

                extern MIDL_CONST_ID IID& IID_ICodecSubtypesStatics = _uuidof(ICodecSubtypesStatics);
            } /* Core */
        } /* Media */
    } /* Windows */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CWindows_CMedia_CCore_CICodecSubtypesStatics;
#endif /* !defined(____x_ABI_CWindows_CMedia_CCore_CICodecSubtypesStatics_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x40000

/*
 *
 * Interface Windows.Media.Core.IDataCue
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Interface is a part of the implementation of type Windows.Media.Core.DataCue
 *
 * Any object which implements this interface must also implement the following interfaces:
 *     Windows.Media.Core.IMediaCue
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____x_ABI_CWindows_CMedia_CCore_CIDataCue_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CMedia_CCore_CIDataCue_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Media_Core_IDataCue[] = L"Windows.Media.Core.IDataCue";
namespace ABI {
    namespace Windows {
        namespace Media {
            namespace Core {
                MIDL_INTERFACE("7c7f676d-1fbc-4e2d-9a87-ee38bd1dc637")
                IDataCue : public IInspectable
                {
                public:
                    virtual HRESULT STDMETHODCALLTYPE put_Data(
                        ABI::Windows::Storage::Streams::IBuffer* value
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE get_Data(
                        ABI::Windows::Storage::Streams::IBuffer** value
                        ) = 0;
                };

                extern MIDL_CONST_ID IID& IID_IDataCue = _uuidof(IDataCue);
            } /* Core */
        } /* Media */
    } /* Windows */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CWindows_CMedia_CCore_CIDataCue;
#endif /* !defined(____x_ABI_CWindows_CMedia_CCore_CIDataCue_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Interface Windows.Media.Core.IDataCue2
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 4.0
 *
 * Interface is a part of the implementation of type Windows.Media.Core.DataCue
 *
 * Any object which implements this interface must also implement the following interfaces:
 *     Windows.Media.Core.IDataCue
 *     Windows.Media.Core.IMediaCue
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x40000
#if !defined(____x_ABI_CWindows_CMedia_CCore_CIDataCue2_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CMedia_CCore_CIDataCue2_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Media_Core_IDataCue2[] = L"Windows.Media.Core.IDataCue2";
namespace ABI {
    namespace Windows {
        namespace Media {
            namespace Core {
                MIDL_INTERFACE("bc561b15-95f2-49e8-96f1-8dd5dac68d93")
                IDataCue2 : public IInspectable
                {
                public:
                    virtual HRESULT STDMETHODCALLTYPE get_Properties(
                        ABI::Windows::Foundation::Collections::IPropertySet** value
                        ) = 0;
                };

                extern MIDL_CONST_ID IID& IID_IDataCue2 = _uuidof(IDataCue2);
            } /* Core */
        } /* Media */
    } /* Windows */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CWindows_CMedia_CCore_CIDataCue2;
#endif /* !defined(____x_ABI_CWindows_CMedia_CCore_CIDataCue2_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x40000

/*
 *
 * Interface Windows.Media.Core.IFaceDetectedEventArgs
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Interface is a part of the implementation of type Windows.Media.Core.FaceDetectedEventArgs
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____x_ABI_CWindows_CMedia_CCore_CIFaceDetectedEventArgs_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CMedia_CCore_CIFaceDetectedEventArgs_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Media_Core_IFaceDetectedEventArgs[] = L"Windows.Media.Core.IFaceDetectedEventArgs";
namespace ABI {
    namespace Windows {
        namespace Media {
            namespace Core {
                MIDL_INTERFACE("19918426-c65b-46ba-85f8-13880576c90a")
                IFaceDetectedEventArgs : public IInspectable
                {
                public:
                    virtual HRESULT STDMETHODCALLTYPE get_ResultFrame(
                        ABI::Windows::Media::Core::IFaceDetectionEffectFrame** value
                        ) = 0;
                };

                extern MIDL_CONST_ID IID& IID_IFaceDetectedEventArgs = _uuidof(IFaceDetectedEventArgs);
            } /* Core */
        } /* Media */
    } /* Windows */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CWindows_CMedia_CCore_CIFaceDetectedEventArgs;
#endif /* !defined(____x_ABI_CWindows_CMedia_CCore_CIFaceDetectedEventArgs_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Interface Windows.Media.Core.IFaceDetectionEffect
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Interface is a part of the implementation of type Windows.Media.Core.FaceDetectionEffect
 *
 * Any object which implements this interface must also implement the following interfaces:
 *     Windows.Media.IMediaExtension
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____x_ABI_CWindows_CMedia_CCore_CIFaceDetectionEffect_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CMedia_CCore_CIFaceDetectionEffect_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Media_Core_IFaceDetectionEffect[] = L"Windows.Media.Core.IFaceDetectionEffect";
namespace ABI {
    namespace Windows {
        namespace Media {
            namespace Core {
                MIDL_INTERFACE("ae15ebd2-0542-42a9-bc90-f283a29f46c1")
                IFaceDetectionEffect : public IInspectable
                {
                public:
                    virtual HRESULT STDMETHODCALLTYPE put_Enabled(
                        boolean value
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE get_Enabled(
                        boolean* value
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE put_DesiredDetectionInterval(
                        ABI::Windows::Foundation::TimeSpan value
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE get_DesiredDetectionInterval(
                        ABI::Windows::Foundation::TimeSpan* value
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE add_FaceDetected(
                        __FITypedEventHandler_2_Windows__CMedia__CCore__CFaceDetectionEffect_Windows__CMedia__CCore__CFaceDetectedEventArgs* handler,
                        EventRegistrationToken* cookie
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE remove_FaceDetected(
                        EventRegistrationToken cookie
                        ) = 0;
                };

                extern MIDL_CONST_ID IID& IID_IFaceDetectionEffect = _uuidof(IFaceDetectionEffect);
            } /* Core */
        } /* Media */
    } /* Windows */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CWindows_CMedia_CCore_CIFaceDetectionEffect;
#endif /* !defined(____x_ABI_CWindows_CMedia_CCore_CIFaceDetectionEffect_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Interface Windows.Media.Core.IFaceDetectionEffectDefinition
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Interface is a part of the implementation of type Windows.Media.Core.FaceDetectionEffectDefinition
 *
 * Any object which implements this interface must also implement the following interfaces:
 *     Windows.Media.Effects.IVideoEffectDefinition
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____x_ABI_CWindows_CMedia_CCore_CIFaceDetectionEffectDefinition_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CMedia_CCore_CIFaceDetectionEffectDefinition_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Media_Core_IFaceDetectionEffectDefinition[] = L"Windows.Media.Core.IFaceDetectionEffectDefinition";
namespace ABI {
    namespace Windows {
        namespace Media {
            namespace Core {
                MIDL_INTERFACE("43dca081-b848-4f33-b702-1fd2624fb016")
                IFaceDetectionEffectDefinition : public IInspectable
                {
                public:
                    virtual HRESULT STDMETHODCALLTYPE put_DetectionMode(
                        ABI::Windows::Media::Core::FaceDetectionMode value
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE get_DetectionMode(
                        ABI::Windows::Media::Core::FaceDetectionMode* value
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE put_SynchronousDetectionEnabled(
                        boolean value
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE get_SynchronousDetectionEnabled(
                        boolean* value
                        ) = 0;
                };

                extern MIDL_CONST_ID IID& IID_IFaceDetectionEffectDefinition = _uuidof(IFaceDetectionEffectDefinition);
            } /* Core */
        } /* Media */
    } /* Windows */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CWindows_CMedia_CCore_CIFaceDetectionEffectDefinition;
#endif /* !defined(____x_ABI_CWindows_CMedia_CCore_CIFaceDetectionEffectDefinition_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Interface Windows.Media.Core.IFaceDetectionEffectFrame
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Interface is a part of the implementation of type Windows.Media.Core.FaceDetectionEffectFrame
 *
 * Any object which implements this interface must also implement the following interfaces:
 *     Windows.Media.IMediaFrame
 *     Windows.Foundation.IClosable
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____x_ABI_CWindows_CMedia_CCore_CIFaceDetectionEffectFrame_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CMedia_CCore_CIFaceDetectionEffectFrame_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Media_Core_IFaceDetectionEffectFrame[] = L"Windows.Media.Core.IFaceDetectionEffectFrame";
namespace ABI {
    namespace Windows {
        namespace Media {
            namespace Core {
                MIDL_INTERFACE("8ab08993-5dc8-447b-a247-5270bd802ece")
                IFaceDetectionEffectFrame : public IInspectable
                {
                public:
                    virtual HRESULT STDMETHODCALLTYPE get_DetectedFaces(
                        __FIVectorView_1_Windows__CMedia__CFaceAnalysis__CDetectedFace** value
                        ) = 0;
                };

                extern MIDL_CONST_ID IID& IID_IFaceDetectionEffectFrame = _uuidof(IFaceDetectionEffectFrame);
            } /* Core */
        } /* Media */
    } /* Windows */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CWindows_CMedia_CCore_CIFaceDetectionEffectFrame;
#endif /* !defined(____x_ABI_CWindows_CMedia_CCore_CIFaceDetectionEffectFrame_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Interface Windows.Media.Core.IHighDynamicRangeControl
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Interface is a part of the implementation of type Windows.Media.Core.HighDynamicRangeControl
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____x_ABI_CWindows_CMedia_CCore_CIHighDynamicRangeControl_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CMedia_CCore_CIHighDynamicRangeControl_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Media_Core_IHighDynamicRangeControl[] = L"Windows.Media.Core.IHighDynamicRangeControl";
namespace ABI {
    namespace Windows {
        namespace Media {
            namespace Core {
                MIDL_INTERFACE("55f1a7ae-d957-4dc9-9d1c-8553a82a7d99")
                IHighDynamicRangeControl : public IInspectable
                {
                public:
                    virtual HRESULT STDMETHODCALLTYPE put_Enabled(
                        boolean value
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE get_Enabled(
                        boolean* value
                        ) = 0;
                };

                extern MIDL_CONST_ID IID& IID_IHighDynamicRangeControl = _uuidof(IHighDynamicRangeControl);
            } /* Core */
        } /* Media */
    } /* Windows */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CWindows_CMedia_CCore_CIHighDynamicRangeControl;
#endif /* !defined(____x_ABI_CWindows_CMedia_CCore_CIHighDynamicRangeControl_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Interface Windows.Media.Core.IHighDynamicRangeOutput
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Interface is a part of the implementation of type Windows.Media.Core.HighDynamicRangeOutput
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____x_ABI_CWindows_CMedia_CCore_CIHighDynamicRangeOutput_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CMedia_CCore_CIHighDynamicRangeOutput_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Media_Core_IHighDynamicRangeOutput[] = L"Windows.Media.Core.IHighDynamicRangeOutput";
namespace ABI {
    namespace Windows {
        namespace Media {
            namespace Core {
                MIDL_INTERFACE("0f57806b-253b-4119-bb40-3a90e51384f7")
                IHighDynamicRangeOutput : public IInspectable
                {
                public:
                    virtual HRESULT STDMETHODCALLTYPE get_Certainty(
                        DOUBLE* value
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE get_FrameControllers(
                        __FIVectorView_1_Windows__CMedia__CDevices__CCore__CFrameController** value
                        ) = 0;
                };

                extern MIDL_CONST_ID IID& IID_IHighDynamicRangeOutput = _uuidof(IHighDynamicRangeOutput);
            } /* Core */
        } /* Media */
    } /* Windows */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CWindows_CMedia_CCore_CIHighDynamicRangeOutput;
#endif /* !defined(____x_ABI_CWindows_CMedia_CCore_CIHighDynamicRangeOutput_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Interface Windows.Media.Core.IImageCue
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 4.0
 *
 * Interface is a part of the implementation of type Windows.Media.Core.ImageCue
 *
 * Any object which implements this interface must also implement the following interfaces:
 *     Windows.Media.Core.IMediaCue
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x40000
#if !defined(____x_ABI_CWindows_CMedia_CCore_CIImageCue_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CMedia_CCore_CIImageCue_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Media_Core_IImageCue[] = L"Windows.Media.Core.IImageCue";
namespace ABI {
    namespace Windows {
        namespace Media {
            namespace Core {
                MIDL_INTERFACE("52828282-367b-440b-9116-3c84570dd270")
                IImageCue : public IInspectable
                {
                public:
                    virtual HRESULT STDMETHODCALLTYPE get_Position(
                        ABI::Windows::Media::Core::TimedTextPoint* value
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE put_Position(
                        ABI::Windows::Media::Core::TimedTextPoint value
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE get_Extent(
                        ABI::Windows::Media::Core::TimedTextSize* value
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE put_Extent(
                        ABI::Windows::Media::Core::TimedTextSize value
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE put_SoftwareBitmap(
                        ABI::Windows::Graphics::Imaging::ISoftwareBitmap* value
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE get_SoftwareBitmap(
                        ABI::Windows::Graphics::Imaging::ISoftwareBitmap** value
                        ) = 0;
                };

                extern MIDL_CONST_ID IID& IID_IImageCue = _uuidof(IImageCue);
            } /* Core */
        } /* Media */
    } /* Windows */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CWindows_CMedia_CCore_CIImageCue;
#endif /* !defined(____x_ABI_CWindows_CMedia_CCore_CIImageCue_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x40000

/*
 *
 * Interface Windows.Media.Core.IInitializeMediaStreamSourceRequestedEventArgs
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 5.0
 *
 * Interface is a part of the implementation of type Windows.Media.Core.InitializeMediaStreamSourceRequestedEventArgs
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x50000
#if !defined(____x_ABI_CWindows_CMedia_CCore_CIInitializeMediaStreamSourceRequestedEventArgs_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CMedia_CCore_CIInitializeMediaStreamSourceRequestedEventArgs_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Media_Core_IInitializeMediaStreamSourceRequestedEventArgs[] = L"Windows.Media.Core.IInitializeMediaStreamSourceRequestedEventArgs";
namespace ABI {
    namespace Windows {
        namespace Media {
            namespace Core {
                MIDL_INTERFACE("25bc45e1-9b08-4c2e-a855-4542f1a75deb")
                IInitializeMediaStreamSourceRequestedEventArgs : public IInspectable
                {
                public:
                    virtual HRESULT STDMETHODCALLTYPE get_Source(
                        ABI::Windows::Media::Core::IMediaStreamSource** value
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE get_RandomAccessStream(
                        ABI::Windows::Storage::Streams::IRandomAccessStream** value
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE GetDeferral(
                        ABI::Windows::Foundation::IDeferral** result
                        ) = 0;
                };

                extern MIDL_CONST_ID IID& IID_IInitializeMediaStreamSourceRequestedEventArgs = _uuidof(IInitializeMediaStreamSourceRequestedEventArgs);
            } /* Core */
        } /* Media */
    } /* Windows */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CWindows_CMedia_CCore_CIInitializeMediaStreamSourceRequestedEventArgs;
#endif /* !defined(____x_ABI_CWindows_CMedia_CCore_CIInitializeMediaStreamSourceRequestedEventArgs_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x50000

/*
 *
 * Interface Windows.Media.Core.ILowLightFusionResult
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 5.0
 *
 * Interface is a part of the implementation of type Windows.Media.Core.LowLightFusionResult
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x50000
#if !defined(____x_ABI_CWindows_CMedia_CCore_CILowLightFusionResult_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CMedia_CCore_CILowLightFusionResult_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Media_Core_ILowLightFusionResult[] = L"Windows.Media.Core.ILowLightFusionResult";
namespace ABI {
    namespace Windows {
        namespace Media {
            namespace Core {
                MIDL_INTERFACE("78edbe35-27a0-42e0-9cd3-738d2089de9c")
                ILowLightFusionResult : public IInspectable
                {
                public:
                    virtual HRESULT STDMETHODCALLTYPE get_Frame(
                        ABI::Windows::Graphics::Imaging::ISoftwareBitmap** value
                        ) = 0;
                };

                extern MIDL_CONST_ID IID& IID_ILowLightFusionResult = _uuidof(ILowLightFusionResult);
            } /* Core */
        } /* Media */
    } /* Windows */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CWindows_CMedia_CCore_CILowLightFusionResult;
#endif /* !defined(____x_ABI_CWindows_CMedia_CCore_CILowLightFusionResult_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x50000

/*
 *
 * Interface Windows.Media.Core.ILowLightFusionStatics
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 5.0
 *
 * Interface is a part of the implementation of type Windows.Media.Core.LowLightFusion
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x50000
#if !defined(____x_ABI_CWindows_CMedia_CCore_CILowLightFusionStatics_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CMedia_CCore_CILowLightFusionStatics_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Media_Core_ILowLightFusionStatics[] = L"Windows.Media.Core.ILowLightFusionStatics";
namespace ABI {
    namespace Windows {
        namespace Media {
            namespace Core {
                MIDL_INTERFACE("5305016d-c29e-40e2-87a9-9e1fd2f192f5")
                ILowLightFusionStatics : public IInspectable
                {
                public:
                    virtual HRESULT STDMETHODCALLTYPE get_SupportedBitmapPixelFormats(
                        __FIVectorView_1_Windows__CGraphics__CImaging__CBitmapPixelFormat** value
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE get_MaxSupportedFrameCount(
                        INT32* value
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE FuseAsync(
                        __FIIterable_1_Windows__CGraphics__CImaging__CSoftwareBitmap* frameSet,
                        __FIAsyncOperationWithProgress_2_Windows__CMedia__CCore__CLowLightFusionResult_double** result
                        ) = 0;
                };

                extern MIDL_CONST_ID IID& IID_ILowLightFusionStatics = _uuidof(ILowLightFusionStatics);
            } /* Core */
        } /* Media */
    } /* Windows */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CWindows_CMedia_CCore_CILowLightFusionStatics;
#endif /* !defined(____x_ABI_CWindows_CMedia_CCore_CILowLightFusionStatics_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x50000

/*
 *
 * Interface Windows.Media.Core.IMediaBinder
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 2.0
 *
 * Interface is a part of the implementation of type Windows.Media.Core.MediaBinder
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x20000
#if !defined(____x_ABI_CWindows_CMedia_CCore_CIMediaBinder_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CMedia_CCore_CIMediaBinder_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Media_Core_IMediaBinder[] = L"Windows.Media.Core.IMediaBinder";
namespace ABI {
    namespace Windows {
        namespace Media {
            namespace Core {
                MIDL_INTERFACE("2b7e40aa-de07-424f-83f1-f1de46c4fa2e")
                IMediaBinder : public IInspectable
                {
                public:
                    virtual HRESULT STDMETHODCALLTYPE add_Binding(
                        __FITypedEventHandler_2_Windows__CMedia__CCore__CMediaBinder_Windows__CMedia__CCore__CMediaBindingEventArgs* handler,
                        EventRegistrationToken* token
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE remove_Binding(
                        EventRegistrationToken token
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE get_Token(
                        HSTRING* value
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE put_Token(
                        HSTRING value
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE get_Source(
                        ABI::Windows::Media::Core::IMediaSource2** value
                        ) = 0;
                };

                extern MIDL_CONST_ID IID& IID_IMediaBinder = _uuidof(IMediaBinder);
            } /* Core */
        } /* Media */
    } /* Windows */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CWindows_CMedia_CCore_CIMediaBinder;
#endif /* !defined(____x_ABI_CWindows_CMedia_CCore_CIMediaBinder_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x20000

/*
 *
 * Interface Windows.Media.Core.IMediaBindingEventArgs
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 2.0
 *
 * Interface is a part of the implementation of type Windows.Media.Core.MediaBindingEventArgs
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x20000
#if !defined(____x_ABI_CWindows_CMedia_CCore_CIMediaBindingEventArgs_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CMedia_CCore_CIMediaBindingEventArgs_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Media_Core_IMediaBindingEventArgs[] = L"Windows.Media.Core.IMediaBindingEventArgs";
namespace ABI {
    namespace Windows {
        namespace Media {
            namespace Core {
                MIDL_INTERFACE("b61cb25a-1b6d-4630-a86d-2f0837f712e5")
                IMediaBindingEventArgs : public IInspectable
                {
                public:
                    virtual HRESULT STDMETHODCALLTYPE add_Canceled(
                        __FITypedEventHandler_2_Windows__CMedia__CCore__CMediaBindingEventArgs_IInspectable* handler,
                        EventRegistrationToken* token
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE remove_Canceled(
                        EventRegistrationToken token
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE get_MediaBinder(
                        ABI::Windows::Media::Core::IMediaBinder** value
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE GetDeferral(
                        ABI::Windows::Foundation::IDeferral** deferral
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE SetUri(
                        ABI::Windows::Foundation::IUriRuntimeClass* uri
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE SetStream(
                        ABI::Windows::Storage::Streams::IRandomAccessStream* stream,
                        HSTRING contentType
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE SetStreamReference(
                        ABI::Windows::Storage::Streams::IRandomAccessStreamReference* stream,
                        HSTRING contentType
                        ) = 0;
                };

                extern MIDL_CONST_ID IID& IID_IMediaBindingEventArgs = _uuidof(IMediaBindingEventArgs);
            } /* Core */
        } /* Media */
    } /* Windows */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CWindows_CMedia_CCore_CIMediaBindingEventArgs;
#endif /* !defined(____x_ABI_CWindows_CMedia_CCore_CIMediaBindingEventArgs_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x20000

/*
 *
 * Interface Windows.Media.Core.IMediaBindingEventArgs2
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 4.0
 *
 * Interface is a part of the implementation of type Windows.Media.Core.MediaBindingEventArgs
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x40000
#if !defined(____x_ABI_CWindows_CMedia_CCore_CIMediaBindingEventArgs2_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CMedia_CCore_CIMediaBindingEventArgs2_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Media_Core_IMediaBindingEventArgs2[] = L"Windows.Media.Core.IMediaBindingEventArgs2";
namespace ABI {
    namespace Windows {
        namespace Media {
            namespace Core {
                MIDL_INTERFACE("0464cceb-bb5a-482f-b8ba-f0284c696567")
                IMediaBindingEventArgs2 : public IInspectable
                {
                public:
                    virtual HRESULT STDMETHODCALLTYPE SetAdaptiveMediaSource(
                        ABI::Windows::Media::Streaming::Adaptive::IAdaptiveMediaSource* mediaSource
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE SetStorageFile(
                        ABI::Windows::Storage::IStorageFile* file
                        ) = 0;
                };

                extern MIDL_CONST_ID IID& IID_IMediaBindingEventArgs2 = _uuidof(IMediaBindingEventArgs2);
            } /* Core */
        } /* Media */
    } /* Windows */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CWindows_CMedia_CCore_CIMediaBindingEventArgs2;
#endif /* !defined(____x_ABI_CWindows_CMedia_CCore_CIMediaBindingEventArgs2_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x40000

/*
 *
 * Interface Windows.Media.Core.IMediaBindingEventArgs3
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 6.0
 *
 * Interface is a part of the implementation of type Windows.Media.Core.MediaBindingEventArgs
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x60000
#if !defined(____x_ABI_CWindows_CMedia_CCore_CIMediaBindingEventArgs3_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CMedia_CCore_CIMediaBindingEventArgs3_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Media_Core_IMediaBindingEventArgs3[] = L"Windows.Media.Core.IMediaBindingEventArgs3";
namespace ABI {
    namespace Windows {
        namespace Media {
            namespace Core {
                MIDL_INTERFACE("f8eb475e-19be-44fc-a5ed-7aba315037f9")
                IMediaBindingEventArgs3 : public IInspectable
                {
                public:
                    virtual HRESULT STDMETHODCALLTYPE SetDownloadOperation(
                        ABI::Windows::Networking::BackgroundTransfer::IDownloadOperation* downloadOperation
                        ) = 0;
                };

                extern MIDL_CONST_ID IID& IID_IMediaBindingEventArgs3 = _uuidof(IMediaBindingEventArgs3);
            } /* Core */
        } /* Media */
    } /* Windows */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CWindows_CMedia_CCore_CIMediaBindingEventArgs3;
#endif /* !defined(____x_ABI_CWindows_CMedia_CCore_CIMediaBindingEventArgs3_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x60000

/*
 *
 * Interface Windows.Media.Core.IMediaCue
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____x_ABI_CWindows_CMedia_CCore_CIMediaCue_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CMedia_CCore_CIMediaCue_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Media_Core_IMediaCue[] = L"Windows.Media.Core.IMediaCue";
namespace ABI {
    namespace Windows {
        namespace Media {
            namespace Core {
                MIDL_INTERFACE("c7d15e5d-59dc-431f-a0ee-27744323b36d")
                IMediaCue : public IInspectable
                {
                public:
                    virtual HRESULT STDMETHODCALLTYPE put_StartTime(
                        ABI::Windows::Foundation::TimeSpan value
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE get_StartTime(
                        ABI::Windows::Foundation::TimeSpan* value
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE put_Duration(
                        ABI::Windows::Foundation::TimeSpan value
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE get_Duration(
                        ABI::Windows::Foundation::TimeSpan* value
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE put_Id(
                        HSTRING value
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE get_Id(
                        HSTRING* value
                        ) = 0;
                };

                extern MIDL_CONST_ID IID& IID_IMediaCue = _uuidof(IMediaCue);
            } /* Core */
        } /* Media */
    } /* Windows */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CWindows_CMedia_CCore_CIMediaCue;
#endif /* !defined(____x_ABI_CWindows_CMedia_CCore_CIMediaCue_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Interface Windows.Media.Core.IMediaCueEventArgs
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Interface is a part of the implementation of type Windows.Media.Core.MediaCueEventArgs
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____x_ABI_CWindows_CMedia_CCore_CIMediaCueEventArgs_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CMedia_CCore_CIMediaCueEventArgs_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Media_Core_IMediaCueEventArgs[] = L"Windows.Media.Core.IMediaCueEventArgs";
namespace ABI {
    namespace Windows {
        namespace Media {
            namespace Core {
                MIDL_INTERFACE("d12f47f7-5fa4-4e68-9fe5-32160dcee57e")
                IMediaCueEventArgs : public IInspectable
                {
                public:
                    virtual HRESULT STDMETHODCALLTYPE get_Cue(
                        ABI::Windows::Media::Core::IMediaCue** value
                        ) = 0;
                };

                extern MIDL_CONST_ID IID& IID_IMediaCueEventArgs = _uuidof(IMediaCueEventArgs);
            } /* Core */
        } /* Media */
    } /* Windows */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CWindows_CMedia_CCore_CIMediaCueEventArgs;
#endif /* !defined(____x_ABI_CWindows_CMedia_CCore_CIMediaCueEventArgs_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Interface Windows.Media.Core.IMediaSource
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____x_ABI_CWindows_CMedia_CCore_CIMediaSource_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CMedia_CCore_CIMediaSource_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Media_Core_IMediaSource[] = L"Windows.Media.Core.IMediaSource";
namespace ABI {
    namespace Windows {
        namespace Media {
            namespace Core {
                MIDL_INTERFACE("e7bfb599-a09d-4c21-bcdf-20af4f86b3d9")
                IMediaSource : public IInspectable
                {
                public:
                };

                extern MIDL_CONST_ID IID& IID_IMediaSource = _uuidof(IMediaSource);
            } /* Core */
        } /* Media */
    } /* Windows */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CWindows_CMedia_CCore_CIMediaSource;
#endif /* !defined(____x_ABI_CWindows_CMedia_CCore_CIMediaSource_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Interface Windows.Media.Core.IMediaSource2
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Interface is a part of the implementation of type Windows.Media.Core.MediaSource
 *
 * Any object which implements this interface must also implement the following interfaces:
 *     Windows.Media.Playback.IMediaPlaybackSource
 *     Windows.Foundation.IClosable
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____x_ABI_CWindows_CMedia_CCore_CIMediaSource2_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CMedia_CCore_CIMediaSource2_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Media_Core_IMediaSource2[] = L"Windows.Media.Core.IMediaSource2";
namespace ABI {
    namespace Windows {
        namespace Media {
            namespace Core {
                MIDL_INTERFACE("2eb61048-655f-4c37-b813-b4e45dfa0abe")
                IMediaSource2 : public IInspectable
                {
                public:
                    virtual HRESULT STDMETHODCALLTYPE add_OpenOperationCompleted(
                        __FITypedEventHandler_2_Windows__CMedia__CCore__CMediaSource_Windows__CMedia__CCore__CMediaSourceOpenOperationCompletedEventArgs* handler,
                        EventRegistrationToken* token
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE remove_OpenOperationCompleted(
                        EventRegistrationToken token
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE get_CustomProperties(
                        ABI::Windows::Foundation::Collections::IPropertySet** value
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE get_Duration(
                        __FIReference_1_Windows__CFoundation__CTimeSpan** value
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE get_IsOpen(
                        boolean* value
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE get_ExternalTimedTextSources(
                        __FIObservableVector_1_Windows__CMedia__CCore__CTimedTextSource** value
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE get_ExternalTimedMetadataTracks(
                        __FIObservableVector_1_Windows__CMedia__CCore__CTimedMetadataTrack** value
                        ) = 0;
                };

                extern MIDL_CONST_ID IID& IID_IMediaSource2 = _uuidof(IMediaSource2);
            } /* Core */
        } /* Media */
    } /* Windows */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CWindows_CMedia_CCore_CIMediaSource2;
#endif /* !defined(____x_ABI_CWindows_CMedia_CCore_CIMediaSource2_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Interface Windows.Media.Core.IMediaSource3
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 2.0
 *
 * Interface is a part of the implementation of type Windows.Media.Core.MediaSource
 *
 * Any object which implements this interface must also implement the following interfaces:
 *     Windows.Media.Core.IMediaSource2
 *     Windows.Media.Playback.IMediaPlaybackSource
 *     Windows.Foundation.IClosable
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x20000
#if !defined(____x_ABI_CWindows_CMedia_CCore_CIMediaSource3_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CMedia_CCore_CIMediaSource3_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Media_Core_IMediaSource3[] = L"Windows.Media.Core.IMediaSource3";
namespace ABI {
    namespace Windows {
        namespace Media {
            namespace Core {
                MIDL_INTERFACE("b59f0d9b-4b6e-41ed-bbb4-7c7509a994ad")
                IMediaSource3 : public IInspectable
                {
                public:
                    virtual HRESULT STDMETHODCALLTYPE add_StateChanged(
                        __FITypedEventHandler_2_Windows__CMedia__CCore__CMediaSource_Windows__CMedia__CCore__CMediaSourceStateChangedEventArgs* handler,
                        EventRegistrationToken* token
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE remove_StateChanged(
                        EventRegistrationToken token
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE get_State(
                        ABI::Windows::Media::Core::MediaSourceState* value
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE Reset(void) = 0;
                };

                extern MIDL_CONST_ID IID& IID_IMediaSource3 = _uuidof(IMediaSource3);
            } /* Core */
        } /* Media */
    } /* Windows */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CWindows_CMedia_CCore_CIMediaSource3;
#endif /* !defined(____x_ABI_CWindows_CMedia_CCore_CIMediaSource3_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x20000

/*
 *
 * Interface Windows.Media.Core.IMediaSource4
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 4.0
 *
 * Interface is a part of the implementation of type Windows.Media.Core.MediaSource
 *
 * Any object which implements this interface must also implement the following interfaces:
 *     Windows.Media.Core.IMediaSource3
 *     Windows.Media.Core.IMediaSource2
 *     Windows.Media.Playback.IMediaPlaybackSource
 *     Windows.Foundation.IClosable
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x40000
#if !defined(____x_ABI_CWindows_CMedia_CCore_CIMediaSource4_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CMedia_CCore_CIMediaSource4_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Media_Core_IMediaSource4[] = L"Windows.Media.Core.IMediaSource4";
namespace ABI {
    namespace Windows {
        namespace Media {
            namespace Core {
                MIDL_INTERFACE("bdafad57-8eff-4c63-85a6-84de0ae3e4f2")
                IMediaSource4 : public IInspectable
                {
                public:
                    virtual HRESULT STDMETHODCALLTYPE get_AdaptiveMediaSource(
                        ABI::Windows::Media::Streaming::Adaptive::IAdaptiveMediaSource** value
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE get_MediaStreamSource(
                        ABI::Windows::Media::Core::IMediaStreamSource** value
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE get_MseStreamSource(
                        ABI::Windows::Media::Core::IMseStreamSource** value
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE get_Uri(
                        ABI::Windows::Foundation::IUriRuntimeClass** value
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE OpenAsync(
                        ABI::Windows::Foundation::IAsyncAction** operation
                        ) = 0;
                };

                extern MIDL_CONST_ID IID& IID_IMediaSource4 = _uuidof(IMediaSource4);
            } /* Core */
        } /* Media */
    } /* Windows */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CWindows_CMedia_CCore_CIMediaSource4;
#endif /* !defined(____x_ABI_CWindows_CMedia_CCore_CIMediaSource4_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x40000

/*
 *
 * Interface Windows.Media.Core.IMediaSource5
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 6.0
 *
 * Interface is a part of the implementation of type Windows.Media.Core.MediaSource
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x60000
#if !defined(____x_ABI_CWindows_CMedia_CCore_CIMediaSource5_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CMedia_CCore_CIMediaSource5_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Media_Core_IMediaSource5[] = L"Windows.Media.Core.IMediaSource5";
namespace ABI {
    namespace Windows {
        namespace Media {
            namespace Core {
                MIDL_INTERFACE("331a22ae-ed2e-4a22-94c8-b743a92b3022")
                IMediaSource5 : public IInspectable
                {
                public:
                    virtual HRESULT STDMETHODCALLTYPE get_DownloadOperation(
                        ABI::Windows::Networking::BackgroundTransfer::IDownloadOperation** value
                        ) = 0;
                };

                extern MIDL_CONST_ID IID& IID_IMediaSource5 = _uuidof(IMediaSource5);
            } /* Core */
        } /* Media */
    } /* Windows */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CWindows_CMedia_CCore_CIMediaSource5;
#endif /* !defined(____x_ABI_CWindows_CMedia_CCore_CIMediaSource5_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x60000

/*
 *
 * Interface Windows.Media.Core.IMediaSourceAppServiceConnection
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 5.0
 *
 * Interface is a part of the implementation of type Windows.Media.Core.MediaSourceAppServiceConnection
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x50000
#if !defined(____x_ABI_CWindows_CMedia_CCore_CIMediaSourceAppServiceConnection_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CMedia_CCore_CIMediaSourceAppServiceConnection_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Media_Core_IMediaSourceAppServiceConnection[] = L"Windows.Media.Core.IMediaSourceAppServiceConnection";
namespace ABI {
    namespace Windows {
        namespace Media {
            namespace Core {
                MIDL_INTERFACE("61e1ea97-1916-4810-b7f4-b642be829596")
                IMediaSourceAppServiceConnection : public IInspectable
                {
                public:
                    virtual HRESULT STDMETHODCALLTYPE add_InitializeMediaStreamSourceRequested(
                        __FITypedEventHandler_2_Windows__CMedia__CCore__CMediaSourceAppServiceConnection_Windows__CMedia__CCore__CInitializeMediaStreamSourceRequestedEventArgs* handler,
                        EventRegistrationToken* token
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE remove_InitializeMediaStreamSourceRequested(
                        EventRegistrationToken token
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE Start(void) = 0;
                };

                extern MIDL_CONST_ID IID& IID_IMediaSourceAppServiceConnection = _uuidof(IMediaSourceAppServiceConnection);
            } /* Core */
        } /* Media */
    } /* Windows */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CWindows_CMedia_CCore_CIMediaSourceAppServiceConnection;
#endif /* !defined(____x_ABI_CWindows_CMedia_CCore_CIMediaSourceAppServiceConnection_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x50000

/*
 *
 * Interface Windows.Media.Core.IMediaSourceAppServiceConnectionFactory
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 5.0
 *
 * Interface is a part of the implementation of type Windows.Media.Core.MediaSourceAppServiceConnection
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x50000
#if !defined(____x_ABI_CWindows_CMedia_CCore_CIMediaSourceAppServiceConnectionFactory_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CMedia_CCore_CIMediaSourceAppServiceConnectionFactory_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Media_Core_IMediaSourceAppServiceConnectionFactory[] = L"Windows.Media.Core.IMediaSourceAppServiceConnectionFactory";
namespace ABI {
    namespace Windows {
        namespace Media {
            namespace Core {
                MIDL_INTERFACE("65b912eb-80b9-44f9-9c1e-e120f6d92838")
                IMediaSourceAppServiceConnectionFactory : public IInspectable
                {
                public:
                    virtual HRESULT STDMETHODCALLTYPE Create(
                        ABI::Windows::ApplicationModel::AppService::IAppServiceConnection* appServiceConnection,
                        ABI::Windows::Media::Core::IMediaSourceAppServiceConnection** result
                        ) = 0;
                };

                extern MIDL_CONST_ID IID& IID_IMediaSourceAppServiceConnectionFactory = _uuidof(IMediaSourceAppServiceConnectionFactory);
            } /* Core */
        } /* Media */
    } /* Windows */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CWindows_CMedia_CCore_CIMediaSourceAppServiceConnectionFactory;
#endif /* !defined(____x_ABI_CWindows_CMedia_CCore_CIMediaSourceAppServiceConnectionFactory_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x50000

/*
 *
 * Interface Windows.Media.Core.IMediaSourceError
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Interface is a part of the implementation of type Windows.Media.Core.MediaSourceError
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____x_ABI_CWindows_CMedia_CCore_CIMediaSourceError_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CMedia_CCore_CIMediaSourceError_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Media_Core_IMediaSourceError[] = L"Windows.Media.Core.IMediaSourceError";
namespace ABI {
    namespace Windows {
        namespace Media {
            namespace Core {
                MIDL_INTERFACE("5c0a8965-37c5-4e9d-8d21-1cdee90cecc6")
                IMediaSourceError : public IInspectable
                {
                public:
                    virtual HRESULT STDMETHODCALLTYPE get_ExtendedError(
                        HRESULT* value
                        ) = 0;
                };

                extern MIDL_CONST_ID IID& IID_IMediaSourceError = _uuidof(IMediaSourceError);
            } /* Core */
        } /* Media */
    } /* Windows */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CWindows_CMedia_CCore_CIMediaSourceError;
#endif /* !defined(____x_ABI_CWindows_CMedia_CCore_CIMediaSourceError_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Interface Windows.Media.Core.IMediaSourceOpenOperationCompletedEventArgs
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Interface is a part of the implementation of type Windows.Media.Core.MediaSourceOpenOperationCompletedEventArgs
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____x_ABI_CWindows_CMedia_CCore_CIMediaSourceOpenOperationCompletedEventArgs_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CMedia_CCore_CIMediaSourceOpenOperationCompletedEventArgs_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Media_Core_IMediaSourceOpenOperationCompletedEventArgs[] = L"Windows.Media.Core.IMediaSourceOpenOperationCompletedEventArgs";
namespace ABI {
    namespace Windows {
        namespace Media {
            namespace Core {
                MIDL_INTERFACE("fc682ceb-e281-477c-a8e0-1acd654114c8")
                IMediaSourceOpenOperationCompletedEventArgs : public IInspectable
                {
                public:
                    virtual HRESULT STDMETHODCALLTYPE get_Error(
                        ABI::Windows::Media::Core::IMediaSourceError** value
                        ) = 0;
                };

                extern MIDL_CONST_ID IID& IID_IMediaSourceOpenOperationCompletedEventArgs = _uuidof(IMediaSourceOpenOperationCompletedEventArgs);
            } /* Core */
        } /* Media */
    } /* Windows */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CWindows_CMedia_CCore_CIMediaSourceOpenOperationCompletedEventArgs;
#endif /* !defined(____x_ABI_CWindows_CMedia_CCore_CIMediaSourceOpenOperationCompletedEventArgs_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Interface Windows.Media.Core.IMediaSourceStateChangedEventArgs
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 2.0
 *
 * Interface is a part of the implementation of type Windows.Media.Core.MediaSourceStateChangedEventArgs
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x20000
#if !defined(____x_ABI_CWindows_CMedia_CCore_CIMediaSourceStateChangedEventArgs_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CMedia_CCore_CIMediaSourceStateChangedEventArgs_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Media_Core_IMediaSourceStateChangedEventArgs[] = L"Windows.Media.Core.IMediaSourceStateChangedEventArgs";
namespace ABI {
    namespace Windows {
        namespace Media {
            namespace Core {
                MIDL_INTERFACE("0a30af82-9071-4bac-bc39-ca2a93b717a9")
                IMediaSourceStateChangedEventArgs : public IInspectable
                {
                public:
                    virtual HRESULT STDMETHODCALLTYPE get_OldState(
                        ABI::Windows::Media::Core::MediaSourceState* value
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE get_NewState(
                        ABI::Windows::Media::Core::MediaSourceState* value
                        ) = 0;
                };

                extern MIDL_CONST_ID IID& IID_IMediaSourceStateChangedEventArgs = _uuidof(IMediaSourceStateChangedEventArgs);
            } /* Core */
        } /* Media */
    } /* Windows */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CWindows_CMedia_CCore_CIMediaSourceStateChangedEventArgs;
#endif /* !defined(____x_ABI_CWindows_CMedia_CCore_CIMediaSourceStateChangedEventArgs_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x20000

/*
 *
 * Interface Windows.Media.Core.IMediaSourceStatics
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Interface is a part of the implementation of type Windows.Media.Core.MediaSource
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____x_ABI_CWindows_CMedia_CCore_CIMediaSourceStatics_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CMedia_CCore_CIMediaSourceStatics_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Media_Core_IMediaSourceStatics[] = L"Windows.Media.Core.IMediaSourceStatics";
namespace ABI {
    namespace Windows {
        namespace Media {
            namespace Core {
                MIDL_INTERFACE("f77d6fa4-4652-410e-b1d8-e9a5e245a45c")
                IMediaSourceStatics : public IInspectable
                {
                public:
                    virtual HRESULT STDMETHODCALLTYPE CreateFromAdaptiveMediaSource(
                        ABI::Windows::Media::Streaming::Adaptive::IAdaptiveMediaSource* mediaSource,
                        ABI::Windows::Media::Core::IMediaSource2** result
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE CreateFromMediaStreamSource(
                        ABI::Windows::Media::Core::IMediaStreamSource* mediaSource,
                        ABI::Windows::Media::Core::IMediaSource2** result
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE CreateFromMseStreamSource(
                        ABI::Windows::Media::Core::IMseStreamSource* mediaSource,
                        ABI::Windows::Media::Core::IMediaSource2** result
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE CreateFromIMediaSource(
                        ABI::Windows::Media::Core::IMediaSource* mediaSource,
                        ABI::Windows::Media::Core::IMediaSource2** result
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE CreateFromStorageFile(
                        ABI::Windows::Storage::IStorageFile* file,
                        ABI::Windows::Media::Core::IMediaSource2** result
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE CreateFromStream(
                        ABI::Windows::Storage::Streams::IRandomAccessStream* stream,
                        HSTRING contentType,
                        ABI::Windows::Media::Core::IMediaSource2** result
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE CreateFromStreamReference(
                        ABI::Windows::Storage::Streams::IRandomAccessStreamReference* stream,
                        HSTRING contentType,
                        ABI::Windows::Media::Core::IMediaSource2** result
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE CreateFromUri(
                        ABI::Windows::Foundation::IUriRuntimeClass* uri,
                        ABI::Windows::Media::Core::IMediaSource2** result
                        ) = 0;
                };

                extern MIDL_CONST_ID IID& IID_IMediaSourceStatics = _uuidof(IMediaSourceStatics);
            } /* Core */
        } /* Media */
    } /* Windows */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CWindows_CMedia_CCore_CIMediaSourceStatics;
#endif /* !defined(____x_ABI_CWindows_CMedia_CCore_CIMediaSourceStatics_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Interface Windows.Media.Core.IMediaSourceStatics2
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 2.0
 *
 * Interface is a part of the implementation of type Windows.Media.Core.MediaSource
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x20000
#if !defined(____x_ABI_CWindows_CMedia_CCore_CIMediaSourceStatics2_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CMedia_CCore_CIMediaSourceStatics2_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Media_Core_IMediaSourceStatics2[] = L"Windows.Media.Core.IMediaSourceStatics2";
namespace ABI {
    namespace Windows {
        namespace Media {
            namespace Core {
                MIDL_INTERFACE("eee161a4-7f13-4896-b8cb-df0de5bcb9f1")
                IMediaSourceStatics2 : public IInspectable
                {
                public:
                    virtual HRESULT STDMETHODCALLTYPE CreateFromMediaBinder(
                        ABI::Windows::Media::Core::IMediaBinder* binder,
                        ABI::Windows::Media::Core::IMediaSource2** result
                        ) = 0;
                };

                extern MIDL_CONST_ID IID& IID_IMediaSourceStatics2 = _uuidof(IMediaSourceStatics2);
            } /* Core */
        } /* Media */
    } /* Windows */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CWindows_CMedia_CCore_CIMediaSourceStatics2;
#endif /* !defined(____x_ABI_CWindows_CMedia_CCore_CIMediaSourceStatics2_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x20000

/*
 *
 * Interface Windows.Media.Core.IMediaSourceStatics3
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 5.0
 *
 * Interface is a part of the implementation of type Windows.Media.Core.MediaSource
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x50000
#if !defined(____x_ABI_CWindows_CMedia_CCore_CIMediaSourceStatics3_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CMedia_CCore_CIMediaSourceStatics3_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Media_Core_IMediaSourceStatics3[] = L"Windows.Media.Core.IMediaSourceStatics3";
namespace ABI {
    namespace Windows {
        namespace Media {
            namespace Core {
                MIDL_INTERFACE("453a30d6-2bea-4122-9f73-eace04526e35")
                IMediaSourceStatics3 : public IInspectable
                {
                public:
                    virtual HRESULT STDMETHODCALLTYPE CreateFromMediaFrameSource(
                        ABI::Windows::Media::Capture::Frames::IMediaFrameSource* frameSource,
                        ABI::Windows::Media::Core::IMediaSource2** result
                        ) = 0;
                };

                extern MIDL_CONST_ID IID& IID_IMediaSourceStatics3 = _uuidof(IMediaSourceStatics3);
            } /* Core */
        } /* Media */
    } /* Windows */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CWindows_CMedia_CCore_CIMediaSourceStatics3;
#endif /* !defined(____x_ABI_CWindows_CMedia_CCore_CIMediaSourceStatics3_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x50000

/*
 *
 * Interface Windows.Media.Core.IMediaSourceStatics4
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 6.0
 *
 * Interface is a part of the implementation of type Windows.Media.Core.MediaSource
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x60000
#if !defined(____x_ABI_CWindows_CMedia_CCore_CIMediaSourceStatics4_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CMedia_CCore_CIMediaSourceStatics4_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Media_Core_IMediaSourceStatics4[] = L"Windows.Media.Core.IMediaSourceStatics4";
namespace ABI {
    namespace Windows {
        namespace Media {
            namespace Core {
                MIDL_INTERFACE("281b3bfc-e50a-4428-a500-9c4ed918d3f0")
                IMediaSourceStatics4 : public IInspectable
                {
                public:
                    virtual HRESULT STDMETHODCALLTYPE CreateFromDownloadOperation(
                        ABI::Windows::Networking::BackgroundTransfer::IDownloadOperation* downloadOperation,
                        ABI::Windows::Media::Core::IMediaSource2** result
                        ) = 0;
                };

                extern MIDL_CONST_ID IID& IID_IMediaSourceStatics4 = _uuidof(IMediaSourceStatics4);
            } /* Core */
        } /* Media */
    } /* Windows */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CWindows_CMedia_CCore_CIMediaSourceStatics4;
#endif /* !defined(____x_ABI_CWindows_CMedia_CCore_CIMediaSourceStatics4_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x60000

/*
 *
 * Interface Windows.Media.Core.IMediaStreamDescriptor
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____x_ABI_CWindows_CMedia_CCore_CIMediaStreamDescriptor_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CMedia_CCore_CIMediaStreamDescriptor_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Media_Core_IMediaStreamDescriptor[] = L"Windows.Media.Core.IMediaStreamDescriptor";
namespace ABI {
    namespace Windows {
        namespace Media {
            namespace Core {
                MIDL_INTERFACE("80f16e6e-92f7-451e-97d2-afd80742da70")
                IMediaStreamDescriptor : public IInspectable
                {
                public:
                    virtual HRESULT STDMETHODCALLTYPE get_IsSelected(
                        boolean* selected
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE put_Name(
                        HSTRING value
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE get_Name(
                        HSTRING* value
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE put_Language(
                        HSTRING value
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE get_Language(
                        HSTRING* value
                        ) = 0;
                };

                extern MIDL_CONST_ID IID& IID_IMediaStreamDescriptor = _uuidof(IMediaStreamDescriptor);
            } /* Core */
        } /* Media */
    } /* Windows */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CWindows_CMedia_CCore_CIMediaStreamDescriptor;
#endif /* !defined(____x_ABI_CWindows_CMedia_CCore_CIMediaStreamDescriptor_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Interface Windows.Media.Core.IMediaStreamDescriptor2
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 5.0
 *
 * Any object which implements this interface must also implement the following interfaces:
 *     Windows.Media.Core.IMediaStreamDescriptor
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x50000
#if !defined(____x_ABI_CWindows_CMedia_CCore_CIMediaStreamDescriptor2_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CMedia_CCore_CIMediaStreamDescriptor2_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Media_Core_IMediaStreamDescriptor2[] = L"Windows.Media.Core.IMediaStreamDescriptor2";
namespace ABI {
    namespace Windows {
        namespace Media {
            namespace Core {
                MIDL_INTERFACE("5073010f-e8b2-4071-b00b-ebf337a76b58")
                IMediaStreamDescriptor2 : public IInspectable
                {
                public:
                    virtual HRESULT STDMETHODCALLTYPE put_Label(
                        HSTRING value
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE get_Label(
                        HSTRING* value
                        ) = 0;
                };

                extern MIDL_CONST_ID IID& IID_IMediaStreamDescriptor2 = _uuidof(IMediaStreamDescriptor2);
            } /* Core */
        } /* Media */
    } /* Windows */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CWindows_CMedia_CCore_CIMediaStreamDescriptor2;
#endif /* !defined(____x_ABI_CWindows_CMedia_CCore_CIMediaStreamDescriptor2_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x50000

/*
 *
 * Interface Windows.Media.Core.IMediaStreamSample
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Interface is a part of the implementation of type Windows.Media.Core.MediaStreamSample
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____x_ABI_CWindows_CMedia_CCore_CIMediaStreamSample_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CMedia_CCore_CIMediaStreamSample_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Media_Core_IMediaStreamSample[] = L"Windows.Media.Core.IMediaStreamSample";
namespace ABI {
    namespace Windows {
        namespace Media {
            namespace Core {
                MIDL_INTERFACE("5c8db627-4b80-4361-9837-6cb7481ad9d6")
                IMediaStreamSample : public IInspectable
                {
                public:
                    virtual HRESULT STDMETHODCALLTYPE add_Processed(
                        __FITypedEventHandler_2_Windows__CMedia__CCore__CMediaStreamSample_IInspectable* handler,
                        EventRegistrationToken* token
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE remove_Processed(
                        EventRegistrationToken token
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE get_Buffer(
                        ABI::Windows::Storage::Streams::IBuffer** value
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE get_Timestamp(
                        ABI::Windows::Foundation::TimeSpan* value
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE get_ExtendedProperties(
                        __FIMap_2_GUID_IInspectable** value
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE get_Protection(
                        ABI::Windows::Media::Core::IMediaStreamSampleProtectionProperties** value
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE put_DecodeTimestamp(
                        ABI::Windows::Foundation::TimeSpan value
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE get_DecodeTimestamp(
                        ABI::Windows::Foundation::TimeSpan* value
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE put_Duration(
                        ABI::Windows::Foundation::TimeSpan value
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE get_Duration(
                        ABI::Windows::Foundation::TimeSpan* value
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE put_KeyFrame(
                        boolean value
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE get_KeyFrame(
                        boolean* value
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE put_Discontinuous(
                        boolean value
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE get_Discontinuous(
                        boolean* value
                        ) = 0;
                };

                extern MIDL_CONST_ID IID& IID_IMediaStreamSample = _uuidof(IMediaStreamSample);
            } /* Core */
        } /* Media */
    } /* Windows */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CWindows_CMedia_CCore_CIMediaStreamSample;
#endif /* !defined(____x_ABI_CWindows_CMedia_CCore_CIMediaStreamSample_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Interface Windows.Media.Core.IMediaStreamSample2
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 7.0
 *
 * Interface is a part of the implementation of type Windows.Media.Core.MediaStreamSample
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x70000
#if !defined(____x_ABI_CWindows_CMedia_CCore_CIMediaStreamSample2_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CMedia_CCore_CIMediaStreamSample2_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Media_Core_IMediaStreamSample2[] = L"Windows.Media.Core.IMediaStreamSample2";
namespace ABI {
    namespace Windows {
        namespace Media {
            namespace Core {
                MIDL_INTERFACE("45078691-fce8-4746-a1c8-10c25d3d7cd3")
                IMediaStreamSample2 : public IInspectable
                {
                public:
                    virtual HRESULT STDMETHODCALLTYPE get_Direct3D11Surface(
                        ABI::Windows::Graphics::DirectX::Direct3D11::IDirect3DSurface** value
                        ) = 0;
                };

                extern MIDL_CONST_ID IID& IID_IMediaStreamSample2 = _uuidof(IMediaStreamSample2);
            } /* Core */
        } /* Media */
    } /* Windows */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CWindows_CMedia_CCore_CIMediaStreamSample2;
#endif /* !defined(____x_ABI_CWindows_CMedia_CCore_CIMediaStreamSample2_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x70000

/*
 *
 * Interface Windows.Media.Core.IMediaStreamSampleProtectionProperties
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Interface is a part of the implementation of type Windows.Media.Core.MediaStreamSampleProtectionProperties
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____x_ABI_CWindows_CMedia_CCore_CIMediaStreamSampleProtectionProperties_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CMedia_CCore_CIMediaStreamSampleProtectionProperties_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Media_Core_IMediaStreamSampleProtectionProperties[] = L"Windows.Media.Core.IMediaStreamSampleProtectionProperties";
namespace ABI {
    namespace Windows {
        namespace Media {
            namespace Core {
                MIDL_INTERFACE("4eb88292-ecdf-493e-841d-dd4add7caca2")
                IMediaStreamSampleProtectionProperties : public IInspectable
                {
                public:
                    virtual HRESULT STDMETHODCALLTYPE SetKeyIdentifier(
                        UINT32 valueLength,
                        BYTE* value
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE GetKeyIdentifier(
                        UINT32* valueLength,
                        BYTE** value
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE SetInitializationVector(
                        UINT32 valueLength,
                        BYTE* value
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE GetInitializationVector(
                        UINT32* valueLength,
                        BYTE** value
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE SetSubSampleMapping(
                        UINT32 valueLength,
                        BYTE* value
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE GetSubSampleMapping(
                        UINT32* valueLength,
                        BYTE** value
                        ) = 0;
                };

                extern MIDL_CONST_ID IID& IID_IMediaStreamSampleProtectionProperties = _uuidof(IMediaStreamSampleProtectionProperties);
            } /* Core */
        } /* Media */
    } /* Windows */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CWindows_CMedia_CCore_CIMediaStreamSampleProtectionProperties;
#endif /* !defined(____x_ABI_CWindows_CMedia_CCore_CIMediaStreamSampleProtectionProperties_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Interface Windows.Media.Core.IMediaStreamSampleStatics
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Interface is a part of the implementation of type Windows.Media.Core.MediaStreamSample
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____x_ABI_CWindows_CMedia_CCore_CIMediaStreamSampleStatics_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CMedia_CCore_CIMediaStreamSampleStatics_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Media_Core_IMediaStreamSampleStatics[] = L"Windows.Media.Core.IMediaStreamSampleStatics";
namespace ABI {
    namespace Windows {
        namespace Media {
            namespace Core {
                MIDL_INTERFACE("dfdf218f-a6cf-4579-be41-73dd941ad972")
                IMediaStreamSampleStatics : public IInspectable
                {
                public:
                    virtual HRESULT STDMETHODCALLTYPE CreateFromBuffer(
                        ABI::Windows::Storage::Streams::IBuffer* buffer,
                        ABI::Windows::Foundation::TimeSpan timestamp,
                        ABI::Windows::Media::Core::IMediaStreamSample** value
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE CreateFromStreamAsync(
                        ABI::Windows::Storage::Streams::IInputStream* stream,
                        UINT32 count,
                        ABI::Windows::Foundation::TimeSpan timestamp,
                        __FIAsyncOperation_1_Windows__CMedia__CCore__CMediaStreamSample** value
                        ) = 0;
                };

                extern MIDL_CONST_ID IID& IID_IMediaStreamSampleStatics = _uuidof(IMediaStreamSampleStatics);
            } /* Core */
        } /* Media */
    } /* Windows */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CWindows_CMedia_CCore_CIMediaStreamSampleStatics;
#endif /* !defined(____x_ABI_CWindows_CMedia_CCore_CIMediaStreamSampleStatics_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Interface Windows.Media.Core.IMediaStreamSampleStatics2
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 7.0
 *
 * Interface is a part of the implementation of type Windows.Media.Core.MediaStreamSample
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x70000
#if !defined(____x_ABI_CWindows_CMedia_CCore_CIMediaStreamSampleStatics2_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CMedia_CCore_CIMediaStreamSampleStatics2_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Media_Core_IMediaStreamSampleStatics2[] = L"Windows.Media.Core.IMediaStreamSampleStatics2";
namespace ABI {
    namespace Windows {
        namespace Media {
            namespace Core {
                MIDL_INTERFACE("9efe9521-6d46-494c-a2f8-d662922e2dd7")
                IMediaStreamSampleStatics2 : public IInspectable
                {
                public:
                    virtual HRESULT STDMETHODCALLTYPE CreateFromDirect3D11Surface(
                        ABI::Windows::Graphics::DirectX::Direct3D11::IDirect3DSurface* surface,
                        ABI::Windows::Foundation::TimeSpan timestamp,
                        ABI::Windows::Media::Core::IMediaStreamSample** result
                        ) = 0;
                };

                extern MIDL_CONST_ID IID& IID_IMediaStreamSampleStatics2 = _uuidof(IMediaStreamSampleStatics2);
            } /* Core */
        } /* Media */
    } /* Windows */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CWindows_CMedia_CCore_CIMediaStreamSampleStatics2;
#endif /* !defined(____x_ABI_CWindows_CMedia_CCore_CIMediaStreamSampleStatics2_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x70000

/*
 *
 * Interface Windows.Media.Core.IMediaStreamSource
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Interface is a part of the implementation of type Windows.Media.Core.MediaStreamSource
 *
 * Any object which implements this interface must also implement the following interfaces:
 *     Windows.Media.Core.IMediaSource
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____x_ABI_CWindows_CMedia_CCore_CIMediaStreamSource_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CMedia_CCore_CIMediaStreamSource_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Media_Core_IMediaStreamSource[] = L"Windows.Media.Core.IMediaStreamSource";
namespace ABI {
    namespace Windows {
        namespace Media {
            namespace Core {
                MIDL_INTERFACE("3712d543-45eb-4138-aa62-c01e26f3843f")
                IMediaStreamSource : public IInspectable
                {
                public:
                    virtual HRESULT STDMETHODCALLTYPE add_Closed(
                        __FITypedEventHandler_2_Windows__CMedia__CCore__CMediaStreamSource_Windows__CMedia__CCore__CMediaStreamSourceClosedEventArgs* handler,
                        EventRegistrationToken* token
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE remove_Closed(
                        EventRegistrationToken token
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE add_Starting(
                        __FITypedEventHandler_2_Windows__CMedia__CCore__CMediaStreamSource_Windows__CMedia__CCore__CMediaStreamSourceStartingEventArgs* handler,
                        EventRegistrationToken* token
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE remove_Starting(
                        EventRegistrationToken token
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE add_Paused(
                        __FITypedEventHandler_2_Windows__CMedia__CCore__CMediaStreamSource_IInspectable* handler,
                        EventRegistrationToken* token
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE remove_Paused(
                        EventRegistrationToken token
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE add_SampleRequested(
                        __FITypedEventHandler_2_Windows__CMedia__CCore__CMediaStreamSource_Windows__CMedia__CCore__CMediaStreamSourceSampleRequestedEventArgs* handler,
                        EventRegistrationToken* token
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE remove_SampleRequested(
                        EventRegistrationToken token
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE add_SwitchStreamsRequested(
                        __FITypedEventHandler_2_Windows__CMedia__CCore__CMediaStreamSource_Windows__CMedia__CCore__CMediaStreamSourceSwitchStreamsRequestedEventArgs* handler,
                        EventRegistrationToken* token
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE remove_SwitchStreamsRequested(
                        EventRegistrationToken token
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE NotifyError(
                        ABI::Windows::Media::Core::MediaStreamSourceErrorStatus errorStatus
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE AddStreamDescriptor(
                        ABI::Windows::Media::Core::IMediaStreamDescriptor* descriptor
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE put_MediaProtectionManager(
                        ABI::Windows::Media::Protection::IMediaProtectionManager* value
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE get_MediaProtectionManager(
                        ABI::Windows::Media::Protection::IMediaProtectionManager** value
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE put_Duration(
                        ABI::Windows::Foundation::TimeSpan value
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE get_Duration(
                        ABI::Windows::Foundation::TimeSpan* value
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE put_CanSeek(
                        boolean value
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE get_CanSeek(
                        boolean* value
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE put_BufferTime(
                        ABI::Windows::Foundation::TimeSpan value
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE get_BufferTime(
                        ABI::Windows::Foundation::TimeSpan* value
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE SetBufferedRange(
                        ABI::Windows::Foundation::TimeSpan startOffset,
                        ABI::Windows::Foundation::TimeSpan endOffset
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE get_MusicProperties(
                        ABI::Windows::Storage::FileProperties::IMusicProperties** value
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE get_VideoProperties(
                        ABI::Windows::Storage::FileProperties::IVideoProperties** value
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE put_Thumbnail(
                        ABI::Windows::Storage::Streams::IRandomAccessStreamReference* value
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE get_Thumbnail(
                        ABI::Windows::Storage::Streams::IRandomAccessStreamReference** value
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE AddProtectionKey(
                        ABI::Windows::Media::Core::IMediaStreamDescriptor* streamDescriptor,
                        UINT32 keyIdentifierLength,
                        BYTE* keyIdentifier,
                        UINT32 licenseDataLength,
                        BYTE* licenseData
                        ) = 0;
                };

                extern MIDL_CONST_ID IID& IID_IMediaStreamSource = _uuidof(IMediaStreamSource);
            } /* Core */
        } /* Media */
    } /* Windows */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CWindows_CMedia_CCore_CIMediaStreamSource;
#endif /* !defined(____x_ABI_CWindows_CMedia_CCore_CIMediaStreamSource_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Interface Windows.Media.Core.IMediaStreamSource2
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 3.0
 *
 * Interface is a part of the implementation of type Windows.Media.Core.MediaStreamSource
 *
 * Any object which implements this interface must also implement the following interfaces:
 *     Windows.Media.Core.IMediaStreamSource
 *     Windows.Media.Core.IMediaSource
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x30000
#if !defined(____x_ABI_CWindows_CMedia_CCore_CIMediaStreamSource2_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CMedia_CCore_CIMediaStreamSource2_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Media_Core_IMediaStreamSource2[] = L"Windows.Media.Core.IMediaStreamSource2";
namespace ABI {
    namespace Windows {
        namespace Media {
            namespace Core {
                MIDL_INTERFACE("ec55d0ad-2e6a-4f74-adbb-b562d1533849")
                IMediaStreamSource2 : public IInspectable
                {
                public:
                    virtual HRESULT STDMETHODCALLTYPE add_SampleRendered(
                        __FITypedEventHandler_2_Windows__CMedia__CCore__CMediaStreamSource_Windows__CMedia__CCore__CMediaStreamSourceSampleRenderedEventArgs* handler,
                        EventRegistrationToken* token
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE remove_SampleRendered(
                        EventRegistrationToken token
                        ) = 0;
                };

                extern MIDL_CONST_ID IID& IID_IMediaStreamSource2 = _uuidof(IMediaStreamSource2);
            } /* Core */
        } /* Media */
    } /* Windows */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CWindows_CMedia_CCore_CIMediaStreamSource2;
#endif /* !defined(____x_ABI_CWindows_CMedia_CCore_CIMediaStreamSource2_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x30000

/*
 *
 * Interface Windows.Media.Core.IMediaStreamSource3
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 4.0
 *
 * Interface is a part of the implementation of type Windows.Media.Core.MediaStreamSource
 *
 * Any object which implements this interface must also implement the following interfaces:
 *     Windows.Media.Core.IMediaStreamSource
 *     Windows.Media.Core.IMediaSource
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x40000
#if !defined(____x_ABI_CWindows_CMedia_CCore_CIMediaStreamSource3_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CMedia_CCore_CIMediaStreamSource3_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Media_Core_IMediaStreamSource3[] = L"Windows.Media.Core.IMediaStreamSource3";
namespace ABI {
    namespace Windows {
        namespace Media {
            namespace Core {
                MIDL_INTERFACE("6a2a2746-3ddd-4ddf-a121-94045ecf9440")
                IMediaStreamSource3 : public IInspectable
                {
                public:
                    virtual HRESULT STDMETHODCALLTYPE put_MaxSupportedPlaybackRate(
                        __FIReference_1_double* value
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE get_MaxSupportedPlaybackRate(
                        __FIReference_1_double** value
                        ) = 0;
                };

                extern MIDL_CONST_ID IID& IID_IMediaStreamSource3 = _uuidof(IMediaStreamSource3);
            } /* Core */
        } /* Media */
    } /* Windows */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CWindows_CMedia_CCore_CIMediaStreamSource3;
#endif /* !defined(____x_ABI_CWindows_CMedia_CCore_CIMediaStreamSource3_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x40000

/*
 *
 * Interface Windows.Media.Core.IMediaStreamSource4
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 5.0
 *
 * Interface is a part of the implementation of type Windows.Media.Core.MediaStreamSource
 *
 * Any object which implements this interface must also implement the following interfaces:
 *     Windows.Media.Core.IMediaStreamSource
 *     Windows.Media.Core.IMediaSource
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x50000
#if !defined(____x_ABI_CWindows_CMedia_CCore_CIMediaStreamSource4_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CMedia_CCore_CIMediaStreamSource4_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Media_Core_IMediaStreamSource4[] = L"Windows.Media.Core.IMediaStreamSource4";
namespace ABI {
    namespace Windows {
        namespace Media {
            namespace Core {
                MIDL_INTERFACE("1d0cfcab-830d-417c-a3a9-2454fd6415c7")
                IMediaStreamSource4 : public IInspectable
                {
                public:
                    virtual HRESULT STDMETHODCALLTYPE put_IsLive(
                        boolean value
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE get_IsLive(
                        boolean* value
                        ) = 0;
                };

                extern MIDL_CONST_ID IID& IID_IMediaStreamSource4 = _uuidof(IMediaStreamSource4);
            } /* Core */
        } /* Media */
    } /* Windows */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CWindows_CMedia_CCore_CIMediaStreamSource4;
#endif /* !defined(____x_ABI_CWindows_CMedia_CCore_CIMediaStreamSource4_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x50000

/*
 *
 * Interface Windows.Media.Core.IMediaStreamSourceClosedEventArgs
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Interface is a part of the implementation of type Windows.Media.Core.MediaStreamSourceClosedEventArgs
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceClosedEventArgs_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceClosedEventArgs_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Media_Core_IMediaStreamSourceClosedEventArgs[] = L"Windows.Media.Core.IMediaStreamSourceClosedEventArgs";
namespace ABI {
    namespace Windows {
        namespace Media {
            namespace Core {
                MIDL_INTERFACE("cd8c7eb2-4816-4e24-88f0-491ef7386406")
                IMediaStreamSourceClosedEventArgs : public IInspectable
                {
                public:
                    virtual HRESULT STDMETHODCALLTYPE get_Request(
                        ABI::Windows::Media::Core::IMediaStreamSourceClosedRequest** value
                        ) = 0;
                };

                extern MIDL_CONST_ID IID& IID_IMediaStreamSourceClosedEventArgs = _uuidof(IMediaStreamSourceClosedEventArgs);
            } /* Core */
        } /* Media */
    } /* Windows */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceClosedEventArgs;
#endif /* !defined(____x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceClosedEventArgs_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Interface Windows.Media.Core.IMediaStreamSourceClosedRequest
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Interface is a part of the implementation of type Windows.Media.Core.MediaStreamSourceClosedRequest
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceClosedRequest_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceClosedRequest_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Media_Core_IMediaStreamSourceClosedRequest[] = L"Windows.Media.Core.IMediaStreamSourceClosedRequest";
namespace ABI {
    namespace Windows {
        namespace Media {
            namespace Core {
                MIDL_INTERFACE("907c00e9-18a3-4951-887a-2c1eebd5c69e")
                IMediaStreamSourceClosedRequest : public IInspectable
                {
                public:
                    virtual HRESULT STDMETHODCALLTYPE get_Reason(
                        ABI::Windows::Media::Core::MediaStreamSourceClosedReason* value
                        ) = 0;
                };

                extern MIDL_CONST_ID IID& IID_IMediaStreamSourceClosedRequest = _uuidof(IMediaStreamSourceClosedRequest);
            } /* Core */
        } /* Media */
    } /* Windows */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceClosedRequest;
#endif /* !defined(____x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceClosedRequest_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Interface Windows.Media.Core.IMediaStreamSourceFactory
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Interface is a part of the implementation of type Windows.Media.Core.MediaStreamSource
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceFactory_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceFactory_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Media_Core_IMediaStreamSourceFactory[] = L"Windows.Media.Core.IMediaStreamSourceFactory";
namespace ABI {
    namespace Windows {
        namespace Media {
            namespace Core {
                MIDL_INTERFACE("ef77e0d9-d158-4b7a-863f-203342fbfd41")
                IMediaStreamSourceFactory : public IInspectable
                {
                public:
                    virtual HRESULT STDMETHODCALLTYPE CreateFromDescriptor(
                        ABI::Windows::Media::Core::IMediaStreamDescriptor* descriptor,
                        ABI::Windows::Media::Core::IMediaStreamSource** result
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE CreateFromDescriptors(
                        ABI::Windows::Media::Core::IMediaStreamDescriptor* descriptor,
                        ABI::Windows::Media::Core::IMediaStreamDescriptor* descriptor2,
                        ABI::Windows::Media::Core::IMediaStreamSource** result
                        ) = 0;
                };

                extern MIDL_CONST_ID IID& IID_IMediaStreamSourceFactory = _uuidof(IMediaStreamSourceFactory);
            } /* Core */
        } /* Media */
    } /* Windows */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceFactory;
#endif /* !defined(____x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceFactory_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Interface Windows.Media.Core.IMediaStreamSourceSampleRenderedEventArgs
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 3.0
 *
 * Interface is a part of the implementation of type Windows.Media.Core.MediaStreamSourceSampleRenderedEventArgs
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x30000
#if !defined(____x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceSampleRenderedEventArgs_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceSampleRenderedEventArgs_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Media_Core_IMediaStreamSourceSampleRenderedEventArgs[] = L"Windows.Media.Core.IMediaStreamSourceSampleRenderedEventArgs";
namespace ABI {
    namespace Windows {
        namespace Media {
            namespace Core {
                MIDL_INTERFACE("9d697b05-d4f2-4c7a-9dfe-8d6cd0b3ee84")
                IMediaStreamSourceSampleRenderedEventArgs : public IInspectable
                {
                public:
                    virtual HRESULT STDMETHODCALLTYPE get_SampleLag(
                        ABI::Windows::Foundation::TimeSpan* value
                        ) = 0;
                };

                extern MIDL_CONST_ID IID& IID_IMediaStreamSourceSampleRenderedEventArgs = _uuidof(IMediaStreamSourceSampleRenderedEventArgs);
            } /* Core */
        } /* Media */
    } /* Windows */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceSampleRenderedEventArgs;
#endif /* !defined(____x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceSampleRenderedEventArgs_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x30000

/*
 *
 * Interface Windows.Media.Core.IMediaStreamSourceSampleRequest
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Interface is a part of the implementation of type Windows.Media.Core.MediaStreamSourceSampleRequest
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceSampleRequest_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceSampleRequest_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Media_Core_IMediaStreamSourceSampleRequest[] = L"Windows.Media.Core.IMediaStreamSourceSampleRequest";
namespace ABI {
    namespace Windows {
        namespace Media {
            namespace Core {
                MIDL_INTERFACE("4db341a9-3501-4d9b-83f9-8f235c822532")
                IMediaStreamSourceSampleRequest : public IInspectable
                {
                public:
                    virtual HRESULT STDMETHODCALLTYPE get_StreamDescriptor(
                        ABI::Windows::Media::Core::IMediaStreamDescriptor** value
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE GetDeferral(
                        ABI::Windows::Media::Core::IMediaStreamSourceSampleRequestDeferral** deferral
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE put_Sample(
                        ABI::Windows::Media::Core::IMediaStreamSample* value
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE get_Sample(
                        ABI::Windows::Media::Core::IMediaStreamSample** value
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE ReportSampleProgress(
                        UINT32 progress
                        ) = 0;
                };

                extern MIDL_CONST_ID IID& IID_IMediaStreamSourceSampleRequest = _uuidof(IMediaStreamSourceSampleRequest);
            } /* Core */
        } /* Media */
    } /* Windows */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceSampleRequest;
#endif /* !defined(____x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceSampleRequest_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Interface Windows.Media.Core.IMediaStreamSourceSampleRequestDeferral
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Interface is a part of the implementation of type Windows.Media.Core.MediaStreamSourceSampleRequestDeferral
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceSampleRequestDeferral_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceSampleRequestDeferral_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Media_Core_IMediaStreamSourceSampleRequestDeferral[] = L"Windows.Media.Core.IMediaStreamSourceSampleRequestDeferral";
namespace ABI {
    namespace Windows {
        namespace Media {
            namespace Core {
                MIDL_INTERFACE("7895cc02-f982-43c8-9d16-c62d999319be")
                IMediaStreamSourceSampleRequestDeferral : public IInspectable
                {
                public:
                    virtual HRESULT STDMETHODCALLTYPE Complete(void) = 0;
                };

                extern MIDL_CONST_ID IID& IID_IMediaStreamSourceSampleRequestDeferral = _uuidof(IMediaStreamSourceSampleRequestDeferral);
            } /* Core */
        } /* Media */
    } /* Windows */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceSampleRequestDeferral;
#endif /* !defined(____x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceSampleRequestDeferral_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Interface Windows.Media.Core.IMediaStreamSourceSampleRequestedEventArgs
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Interface is a part of the implementation of type Windows.Media.Core.MediaStreamSourceSampleRequestedEventArgs
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceSampleRequestedEventArgs_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceSampleRequestedEventArgs_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Media_Core_IMediaStreamSourceSampleRequestedEventArgs[] = L"Windows.Media.Core.IMediaStreamSourceSampleRequestedEventArgs";
namespace ABI {
    namespace Windows {
        namespace Media {
            namespace Core {
                MIDL_INTERFACE("10f9bb9e-71c5-492f-847f-0da1f35e81f8")
                IMediaStreamSourceSampleRequestedEventArgs : public IInspectable
                {
                public:
                    virtual HRESULT STDMETHODCALLTYPE get_Request(
                        ABI::Windows::Media::Core::IMediaStreamSourceSampleRequest** value
                        ) = 0;
                };

                extern MIDL_CONST_ID IID& IID_IMediaStreamSourceSampleRequestedEventArgs = _uuidof(IMediaStreamSourceSampleRequestedEventArgs);
            } /* Core */
        } /* Media */
    } /* Windows */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceSampleRequestedEventArgs;
#endif /* !defined(____x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceSampleRequestedEventArgs_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Interface Windows.Media.Core.IMediaStreamSourceStartingEventArgs
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Interface is a part of the implementation of type Windows.Media.Core.MediaStreamSourceStartingEventArgs
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceStartingEventArgs_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceStartingEventArgs_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Media_Core_IMediaStreamSourceStartingEventArgs[] = L"Windows.Media.Core.IMediaStreamSourceStartingEventArgs";
namespace ABI {
    namespace Windows {
        namespace Media {
            namespace Core {
                MIDL_INTERFACE("f41468f2-c274-4940-a5bb-28a572452fa7")
                IMediaStreamSourceStartingEventArgs : public IInspectable
                {
                public:
                    virtual HRESULT STDMETHODCALLTYPE get_Request(
                        ABI::Windows::Media::Core::IMediaStreamSourceStartingRequest** value
                        ) = 0;
                };

                extern MIDL_CONST_ID IID& IID_IMediaStreamSourceStartingEventArgs = _uuidof(IMediaStreamSourceStartingEventArgs);
            } /* Core */
        } /* Media */
    } /* Windows */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceStartingEventArgs;
#endif /* !defined(____x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceStartingEventArgs_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Interface Windows.Media.Core.IMediaStreamSourceStartingRequest
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Interface is a part of the implementation of type Windows.Media.Core.MediaStreamSourceStartingRequest
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceStartingRequest_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceStartingRequest_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Media_Core_IMediaStreamSourceStartingRequest[] = L"Windows.Media.Core.IMediaStreamSourceStartingRequest";
namespace ABI {
    namespace Windows {
        namespace Media {
            namespace Core {
                MIDL_INTERFACE("2a9093e4-35c4-4b1b-a791-0d99db56dd1d")
                IMediaStreamSourceStartingRequest : public IInspectable
                {
                public:
                    virtual HRESULT STDMETHODCALLTYPE get_StartPosition(
                        __FIReference_1_Windows__CFoundation__CTimeSpan** value
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE GetDeferral(
                        ABI::Windows::Media::Core::IMediaStreamSourceStartingRequestDeferral** deferral
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE SetActualStartPosition(
                        ABI::Windows::Foundation::TimeSpan position
                        ) = 0;
                };

                extern MIDL_CONST_ID IID& IID_IMediaStreamSourceStartingRequest = _uuidof(IMediaStreamSourceStartingRequest);
            } /* Core */
        } /* Media */
    } /* Windows */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceStartingRequest;
#endif /* !defined(____x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceStartingRequest_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Interface Windows.Media.Core.IMediaStreamSourceStartingRequestDeferral
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Interface is a part of the implementation of type Windows.Media.Core.MediaStreamSourceStartingRequestDeferral
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceStartingRequestDeferral_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceStartingRequestDeferral_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Media_Core_IMediaStreamSourceStartingRequestDeferral[] = L"Windows.Media.Core.IMediaStreamSourceStartingRequestDeferral";
namespace ABI {
    namespace Windows {
        namespace Media {
            namespace Core {
                MIDL_INTERFACE("3f1356a5-6340-4dc4-9910-068ed9f598f8")
                IMediaStreamSourceStartingRequestDeferral : public IInspectable
                {
                public:
                    virtual HRESULT STDMETHODCALLTYPE Complete(void) = 0;
                };

                extern MIDL_CONST_ID IID& IID_IMediaStreamSourceStartingRequestDeferral = _uuidof(IMediaStreamSourceStartingRequestDeferral);
            } /* Core */
        } /* Media */
    } /* Windows */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceStartingRequestDeferral;
#endif /* !defined(____x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceStartingRequestDeferral_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Interface Windows.Media.Core.IMediaStreamSourceSwitchStreamsRequest
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Interface is a part of the implementation of type Windows.Media.Core.MediaStreamSourceSwitchStreamsRequest
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceSwitchStreamsRequest_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceSwitchStreamsRequest_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Media_Core_IMediaStreamSourceSwitchStreamsRequest[] = L"Windows.Media.Core.IMediaStreamSourceSwitchStreamsRequest";
namespace ABI {
    namespace Windows {
        namespace Media {
            namespace Core {
                MIDL_INTERFACE("41b8808e-38a9-4ec3-9ba0-b69b85501e90")
                IMediaStreamSourceSwitchStreamsRequest : public IInspectable
                {
                public:
                    virtual HRESULT STDMETHODCALLTYPE get_OldStreamDescriptor(
                        ABI::Windows::Media::Core::IMediaStreamDescriptor** value
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE get_NewStreamDescriptor(
                        ABI::Windows::Media::Core::IMediaStreamDescriptor** value
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE GetDeferral(
                        ABI::Windows::Media::Core::IMediaStreamSourceSwitchStreamsRequestDeferral** deferral
                        ) = 0;
                };

                extern MIDL_CONST_ID IID& IID_IMediaStreamSourceSwitchStreamsRequest = _uuidof(IMediaStreamSourceSwitchStreamsRequest);
            } /* Core */
        } /* Media */
    } /* Windows */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceSwitchStreamsRequest;
#endif /* !defined(____x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceSwitchStreamsRequest_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Interface Windows.Media.Core.IMediaStreamSourceSwitchStreamsRequestDeferral
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Interface is a part of the implementation of type Windows.Media.Core.MediaStreamSourceSwitchStreamsRequestDeferral
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceSwitchStreamsRequestDeferral_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceSwitchStreamsRequestDeferral_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Media_Core_IMediaStreamSourceSwitchStreamsRequestDeferral[] = L"Windows.Media.Core.IMediaStreamSourceSwitchStreamsRequestDeferral";
namespace ABI {
    namespace Windows {
        namespace Media {
            namespace Core {
                MIDL_INTERFACE("bee3d835-a505-4f9a-b943-2b8cb1b4bbd9")
                IMediaStreamSourceSwitchStreamsRequestDeferral : public IInspectable
                {
                public:
                    virtual HRESULT STDMETHODCALLTYPE Complete(void) = 0;
                };

                extern MIDL_CONST_ID IID& IID_IMediaStreamSourceSwitchStreamsRequestDeferral = _uuidof(IMediaStreamSourceSwitchStreamsRequestDeferral);
            } /* Core */
        } /* Media */
    } /* Windows */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceSwitchStreamsRequestDeferral;
#endif /* !defined(____x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceSwitchStreamsRequestDeferral_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Interface Windows.Media.Core.IMediaStreamSourceSwitchStreamsRequestedEventArgs
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Interface is a part of the implementation of type Windows.Media.Core.MediaStreamSourceSwitchStreamsRequestedEventArgs
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceSwitchStreamsRequestedEventArgs_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceSwitchStreamsRequestedEventArgs_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Media_Core_IMediaStreamSourceSwitchStreamsRequestedEventArgs[] = L"Windows.Media.Core.IMediaStreamSourceSwitchStreamsRequestedEventArgs";
namespace ABI {
    namespace Windows {
        namespace Media {
            namespace Core {
                MIDL_INTERFACE("42202b72-6ea1-4677-981e-350a0da412aa")
                IMediaStreamSourceSwitchStreamsRequestedEventArgs : public IInspectable
                {
                public:
                    virtual HRESULT STDMETHODCALLTYPE get_Request(
                        ABI::Windows::Media::Core::IMediaStreamSourceSwitchStreamsRequest** value
                        ) = 0;
                };

                extern MIDL_CONST_ID IID& IID_IMediaStreamSourceSwitchStreamsRequestedEventArgs = _uuidof(IMediaStreamSourceSwitchStreamsRequestedEventArgs);
            } /* Core */
        } /* Media */
    } /* Windows */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceSwitchStreamsRequestedEventArgs;
#endif /* !defined(____x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceSwitchStreamsRequestedEventArgs_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Interface Windows.Media.Core.IMediaTrack
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____x_ABI_CWindows_CMedia_CCore_CIMediaTrack_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CMedia_CCore_CIMediaTrack_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Media_Core_IMediaTrack[] = L"Windows.Media.Core.IMediaTrack";
namespace ABI {
    namespace Windows {
        namespace Media {
            namespace Core {
                MIDL_INTERFACE("03e1fafc-c931-491a-b46b-c10ee8c256b7")
                IMediaTrack : public IInspectable
                {
                public:
                    virtual HRESULT STDMETHODCALLTYPE get_Id(
                        HSTRING* value
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE get_Language(
                        HSTRING* value
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE get_TrackKind(
                        ABI::Windows::Media::Core::MediaTrackKind* value
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE put_Label(
                        HSTRING value
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE get_Label(
                        HSTRING* value
                        ) = 0;
                };

                extern MIDL_CONST_ID IID& IID_IMediaTrack = _uuidof(IMediaTrack);
            } /* Core */
        } /* Media */
    } /* Windows */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CWindows_CMedia_CCore_CIMediaTrack;
#endif /* !defined(____x_ABI_CWindows_CMedia_CCore_CIMediaTrack_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Interface Windows.Media.Core.IMseSourceBuffer
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Interface is a part of the implementation of type Windows.Media.Core.MseSourceBuffer
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____x_ABI_CWindows_CMedia_CCore_CIMseSourceBuffer_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CMedia_CCore_CIMseSourceBuffer_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Media_Core_IMseSourceBuffer[] = L"Windows.Media.Core.IMseSourceBuffer";
namespace ABI {
    namespace Windows {
        namespace Media {
            namespace Core {
                MIDL_INTERFACE("0c1aa3e3-df8d-4079-a3fe-6849184b4e2f")
                IMseSourceBuffer : public IInspectable
                {
                public:
                    virtual HRESULT STDMETHODCALLTYPE add_UpdateStarting(
                        __FITypedEventHandler_2_Windows__CMedia__CCore__CMseSourceBuffer_IInspectable* handler,
                        EventRegistrationToken* token
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE remove_UpdateStarting(
                        EventRegistrationToken token
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE add_Updated(
                        __FITypedEventHandler_2_Windows__CMedia__CCore__CMseSourceBuffer_IInspectable* handler,
                        EventRegistrationToken* token
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE remove_Updated(
                        EventRegistrationToken token
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE add_UpdateEnded(
                        __FITypedEventHandler_2_Windows__CMedia__CCore__CMseSourceBuffer_IInspectable* handler,
                        EventRegistrationToken* token
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE remove_UpdateEnded(
                        EventRegistrationToken token
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE add_ErrorOccurred(
                        __FITypedEventHandler_2_Windows__CMedia__CCore__CMseSourceBuffer_IInspectable* handler,
                        EventRegistrationToken* token
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE remove_ErrorOccurred(
                        EventRegistrationToken token
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE add_Aborted(
                        __FITypedEventHandler_2_Windows__CMedia__CCore__CMseSourceBuffer_IInspectable* handler,
                        EventRegistrationToken* token
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE remove_Aborted(
                        EventRegistrationToken token
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE get_Mode(
                        ABI::Windows::Media::Core::MseAppendMode* value
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE put_Mode(
                        ABI::Windows::Media::Core::MseAppendMode value
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE get_IsUpdating(
                        boolean* value
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE get_Buffered(
                        __FIVectorView_1_Windows__CMedia__CCore__CMseTimeRange** value
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE get_TimestampOffset(
                        ABI::Windows::Foundation::TimeSpan* value
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE put_TimestampOffset(
                        ABI::Windows::Foundation::TimeSpan value
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE get_AppendWindowStart(
                        ABI::Windows::Foundation::TimeSpan* value
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE put_AppendWindowStart(
                        ABI::Windows::Foundation::TimeSpan value
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE get_AppendWindowEnd(
                        __FIReference_1_Windows__CFoundation__CTimeSpan** value
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE put_AppendWindowEnd(
                        __FIReference_1_Windows__CFoundation__CTimeSpan* value
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE AppendBuffer(
                        ABI::Windows::Storage::Streams::IBuffer* buffer
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE AppendStream(
                        ABI::Windows::Storage::Streams::IInputStream* stream
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE AppendStreamMaxSize(
                        ABI::Windows::Storage::Streams::IInputStream* stream,
                        UINT64 maxSize
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE Abort(void) = 0;
                    virtual HRESULT STDMETHODCALLTYPE Remove(
                        ABI::Windows::Foundation::TimeSpan start,
                        __FIReference_1_Windows__CFoundation__CTimeSpan* end
                        ) = 0;
                };

                extern MIDL_CONST_ID IID& IID_IMseSourceBuffer = _uuidof(IMseSourceBuffer);
            } /* Core */
        } /* Media */
    } /* Windows */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CWindows_CMedia_CCore_CIMseSourceBuffer;
#endif /* !defined(____x_ABI_CWindows_CMedia_CCore_CIMseSourceBuffer_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Interface Windows.Media.Core.IMseSourceBufferList
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Interface is a part of the implementation of type Windows.Media.Core.MseSourceBufferList
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____x_ABI_CWindows_CMedia_CCore_CIMseSourceBufferList_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CMedia_CCore_CIMseSourceBufferList_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Media_Core_IMseSourceBufferList[] = L"Windows.Media.Core.IMseSourceBufferList";
namespace ABI {
    namespace Windows {
        namespace Media {
            namespace Core {
                MIDL_INTERFACE("95fae8e7-a8e7-4ebf-8927-145e940ba511")
                IMseSourceBufferList : public IInspectable
                {
                public:
                    virtual HRESULT STDMETHODCALLTYPE add_SourceBufferAdded(
                        __FITypedEventHandler_2_Windows__CMedia__CCore__CMseSourceBufferList_IInspectable* handler,
                        EventRegistrationToken* token
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE remove_SourceBufferAdded(
                        EventRegistrationToken token
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE add_SourceBufferRemoved(
                        __FITypedEventHandler_2_Windows__CMedia__CCore__CMseSourceBufferList_IInspectable* handler,
                        EventRegistrationToken* token
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE remove_SourceBufferRemoved(
                        EventRegistrationToken token
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE get_Buffers(
                        __FIVectorView_1_Windows__CMedia__CCore__CMseSourceBuffer** value
                        ) = 0;
                };

                extern MIDL_CONST_ID IID& IID_IMseSourceBufferList = _uuidof(IMseSourceBufferList);
            } /* Core */
        } /* Media */
    } /* Windows */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CWindows_CMedia_CCore_CIMseSourceBufferList;
#endif /* !defined(____x_ABI_CWindows_CMedia_CCore_CIMseSourceBufferList_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Interface Windows.Media.Core.IMseStreamSource
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Interface is a part of the implementation of type Windows.Media.Core.MseStreamSource
 *
 * Any object which implements this interface must also implement the following interfaces:
 *     Windows.Media.Core.IMediaSource
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____x_ABI_CWindows_CMedia_CCore_CIMseStreamSource_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CMedia_CCore_CIMseStreamSource_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Media_Core_IMseStreamSource[] = L"Windows.Media.Core.IMseStreamSource";
namespace ABI {
    namespace Windows {
        namespace Media {
            namespace Core {
                MIDL_INTERFACE("b0b4198d-02f4-4923-88dd-81bc3f360ffa")
                IMseStreamSource : public IInspectable
                {
                public:
                    virtual HRESULT STDMETHODCALLTYPE add_Opened(
                        __FITypedEventHandler_2_Windows__CMedia__CCore__CMseStreamSource_IInspectable* handler,
                        EventRegistrationToken* token
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE remove_Opened(
                        EventRegistrationToken token
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE add_Ended(
                        __FITypedEventHandler_2_Windows__CMedia__CCore__CMseStreamSource_IInspectable* handler,
                        EventRegistrationToken* token
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE remove_Ended(
                        EventRegistrationToken token
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE add_Closed(
                        __FITypedEventHandler_2_Windows__CMedia__CCore__CMseStreamSource_IInspectable* handler,
                        EventRegistrationToken* token
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE remove_Closed(
                        EventRegistrationToken token
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE get_SourceBuffers(
                        ABI::Windows::Media::Core::IMseSourceBufferList** value
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE get_ActiveSourceBuffers(
                        ABI::Windows::Media::Core::IMseSourceBufferList** value
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE get_ReadyState(
                        ABI::Windows::Media::Core::MseReadyState* value
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE get_Duration(
                        __FIReference_1_Windows__CFoundation__CTimeSpan** value
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE put_Duration(
                        __FIReference_1_Windows__CFoundation__CTimeSpan* value
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE AddSourceBuffer(
                        HSTRING mimeType,
                        ABI::Windows::Media::Core::IMseSourceBuffer** buffer
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE RemoveSourceBuffer(
                        ABI::Windows::Media::Core::IMseSourceBuffer* buffer
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE EndOfStream(
                        ABI::Windows::Media::Core::MseEndOfStreamStatus status
                        ) = 0;
                };

                extern MIDL_CONST_ID IID& IID_IMseStreamSource = _uuidof(IMseStreamSource);
            } /* Core */
        } /* Media */
    } /* Windows */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CWindows_CMedia_CCore_CIMseStreamSource;
#endif /* !defined(____x_ABI_CWindows_CMedia_CCore_CIMseStreamSource_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Interface Windows.Media.Core.IMseStreamSource2
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 5.0
 *
 * Interface is a part of the implementation of type Windows.Media.Core.MseStreamSource
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x50000
#if !defined(____x_ABI_CWindows_CMedia_CCore_CIMseStreamSource2_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CMedia_CCore_CIMseStreamSource2_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Media_Core_IMseStreamSource2[] = L"Windows.Media.Core.IMseStreamSource2";
namespace ABI {
    namespace Windows {
        namespace Media {
            namespace Core {
                MIDL_INTERFACE("66f57d37-f9e7-418a-9cde-a020e956552b")
                IMseStreamSource2 : public IInspectable
                {
                public:
                    virtual HRESULT STDMETHODCALLTYPE get_LiveSeekableRange(
                        __FIReference_1_Windows__CMedia__CCore__CMseTimeRange** value
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE put_LiveSeekableRange(
                        __FIReference_1_Windows__CMedia__CCore__CMseTimeRange* value
                        ) = 0;
                };

                extern MIDL_CONST_ID IID& IID_IMseStreamSource2 = _uuidof(IMseStreamSource2);
            } /* Core */
        } /* Media */
    } /* Windows */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CWindows_CMedia_CCore_CIMseStreamSource2;
#endif /* !defined(____x_ABI_CWindows_CMedia_CCore_CIMseStreamSource2_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x50000

/*
 *
 * Interface Windows.Media.Core.IMseStreamSourceStatics
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Interface is a part of the implementation of type Windows.Media.Core.MseStreamSource
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____x_ABI_CWindows_CMedia_CCore_CIMseStreamSourceStatics_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CMedia_CCore_CIMseStreamSourceStatics_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Media_Core_IMseStreamSourceStatics[] = L"Windows.Media.Core.IMseStreamSourceStatics";
namespace ABI {
    namespace Windows {
        namespace Media {
            namespace Core {
                MIDL_INTERFACE("465c679d-d570-43ce-ba21-0bff5f3fbd0a")
                IMseStreamSourceStatics : public IInspectable
                {
                public:
                    virtual HRESULT STDMETHODCALLTYPE IsContentTypeSupported(
                        HSTRING contentType,
                        boolean* value
                        ) = 0;
                };

                extern MIDL_CONST_ID IID& IID_IMseStreamSourceStatics = _uuidof(IMseStreamSourceStatics);
            } /* Core */
        } /* Media */
    } /* Windows */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CWindows_CMedia_CCore_CIMseStreamSourceStatics;
#endif /* !defined(____x_ABI_CWindows_CMedia_CCore_CIMseStreamSourceStatics_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Interface Windows.Media.Core.ISceneAnalysisEffect
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Interface is a part of the implementation of type Windows.Media.Core.SceneAnalysisEffect
 *
 * Any object which implements this interface must also implement the following interfaces:
 *     Windows.Media.IMediaExtension
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____x_ABI_CWindows_CMedia_CCore_CISceneAnalysisEffect_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CMedia_CCore_CISceneAnalysisEffect_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Media_Core_ISceneAnalysisEffect[] = L"Windows.Media.Core.ISceneAnalysisEffect";
namespace ABI {
    namespace Windows {
        namespace Media {
            namespace Core {
                MIDL_INTERFACE("c04ba319-ca41-4813-bffd-7b08b0ed2557")
                ISceneAnalysisEffect : public IInspectable
                {
                public:
                    virtual HRESULT STDMETHODCALLTYPE get_HighDynamicRangeAnalyzer(
                        ABI::Windows::Media::Core::IHighDynamicRangeControl** value
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE put_DesiredAnalysisInterval(
                        ABI::Windows::Foundation::TimeSpan value
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE get_DesiredAnalysisInterval(
                        ABI::Windows::Foundation::TimeSpan* value
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE add_SceneAnalyzed(
                        __FITypedEventHandler_2_Windows__CMedia__CCore__CSceneAnalysisEffect_Windows__CMedia__CCore__CSceneAnalyzedEventArgs* handler,
                        EventRegistrationToken* cookie
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE remove_SceneAnalyzed(
                        EventRegistrationToken cookie
                        ) = 0;
                };

                extern MIDL_CONST_ID IID& IID_ISceneAnalysisEffect = _uuidof(ISceneAnalysisEffect);
            } /* Core */
        } /* Media */
    } /* Windows */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CWindows_CMedia_CCore_CISceneAnalysisEffect;
#endif /* !defined(____x_ABI_CWindows_CMedia_CCore_CISceneAnalysisEffect_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Interface Windows.Media.Core.ISceneAnalysisEffectFrame
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Interface is a part of the implementation of type Windows.Media.Core.SceneAnalysisEffectFrame
 *
 * Any object which implements this interface must also implement the following interfaces:
 *     Windows.Media.IMediaFrame
 *     Windows.Foundation.IClosable
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____x_ABI_CWindows_CMedia_CCore_CISceneAnalysisEffectFrame_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CMedia_CCore_CISceneAnalysisEffectFrame_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Media_Core_ISceneAnalysisEffectFrame[] = L"Windows.Media.Core.ISceneAnalysisEffectFrame";
namespace ABI {
    namespace Windows {
        namespace Media {
            namespace Core {
                MIDL_INTERFACE("d8b10e4c-7fd9-42e1-85eb-6572c297c987")
                ISceneAnalysisEffectFrame : public IInspectable
                {
                public:
                    virtual HRESULT STDMETHODCALLTYPE get_FrameControlValues(
                        ABI::Windows::Media::Capture::ICapturedFrameControlValues** value
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE get_HighDynamicRange(
                        ABI::Windows::Media::Core::IHighDynamicRangeOutput** value
                        ) = 0;
                };

                extern MIDL_CONST_ID IID& IID_ISceneAnalysisEffectFrame = _uuidof(ISceneAnalysisEffectFrame);
            } /* Core */
        } /* Media */
    } /* Windows */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CWindows_CMedia_CCore_CISceneAnalysisEffectFrame;
#endif /* !defined(____x_ABI_CWindows_CMedia_CCore_CISceneAnalysisEffectFrame_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Interface Windows.Media.Core.ISceneAnalysisEffectFrame2
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 5.0
 *
 * Interface is a part of the implementation of type Windows.Media.Core.SceneAnalysisEffectFrame
 *
 * Any object which implements this interface must also implement the following interfaces:
 *     Windows.Media.IMediaFrame
 *     Windows.Foundation.IClosable
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x50000
#if !defined(____x_ABI_CWindows_CMedia_CCore_CISceneAnalysisEffectFrame2_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CMedia_CCore_CISceneAnalysisEffectFrame2_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Media_Core_ISceneAnalysisEffectFrame2[] = L"Windows.Media.Core.ISceneAnalysisEffectFrame2";
namespace ABI {
    namespace Windows {
        namespace Media {
            namespace Core {
                MIDL_INTERFACE("2d4e29be-061f-47ae-9915-02524b5f9a5f")
                ISceneAnalysisEffectFrame2 : public IInspectable
                {
                public:
                    virtual HRESULT STDMETHODCALLTYPE get_AnalysisRecommendation(
                        ABI::Windows::Media::Core::SceneAnalysisRecommendation* value
                        ) = 0;
                };

                extern MIDL_CONST_ID IID& IID_ISceneAnalysisEffectFrame2 = _uuidof(ISceneAnalysisEffectFrame2);
            } /* Core */
        } /* Media */
    } /* Windows */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CWindows_CMedia_CCore_CISceneAnalysisEffectFrame2;
#endif /* !defined(____x_ABI_CWindows_CMedia_CCore_CISceneAnalysisEffectFrame2_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x50000

/*
 *
 * Interface Windows.Media.Core.ISceneAnalyzedEventArgs
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Interface is a part of the implementation of type Windows.Media.Core.SceneAnalyzedEventArgs
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____x_ABI_CWindows_CMedia_CCore_CISceneAnalyzedEventArgs_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CMedia_CCore_CISceneAnalyzedEventArgs_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Media_Core_ISceneAnalyzedEventArgs[] = L"Windows.Media.Core.ISceneAnalyzedEventArgs";
namespace ABI {
    namespace Windows {
        namespace Media {
            namespace Core {
                MIDL_INTERFACE("146b9588-2851-45e4-ad55-44cf8df8db4d")
                ISceneAnalyzedEventArgs : public IInspectable
                {
                public:
                    virtual HRESULT STDMETHODCALLTYPE get_ResultFrame(
                        ABI::Windows::Media::Core::ISceneAnalysisEffectFrame** value
                        ) = 0;
                };

                extern MIDL_CONST_ID IID& IID_ISceneAnalyzedEventArgs = _uuidof(ISceneAnalyzedEventArgs);
            } /* Core */
        } /* Media */
    } /* Windows */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CWindows_CMedia_CCore_CISceneAnalyzedEventArgs;
#endif /* !defined(____x_ABI_CWindows_CMedia_CCore_CISceneAnalyzedEventArgs_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Interface Windows.Media.Core.ISingleSelectMediaTrackList
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____x_ABI_CWindows_CMedia_CCore_CISingleSelectMediaTrackList_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CMedia_CCore_CISingleSelectMediaTrackList_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Media_Core_ISingleSelectMediaTrackList[] = L"Windows.Media.Core.ISingleSelectMediaTrackList";
namespace ABI {
    namespace Windows {
        namespace Media {
            namespace Core {
                MIDL_INTERFACE("77206f1f-c34f-494f-8077-2bad9ff4ecf1")
                ISingleSelectMediaTrackList : public IInspectable
                {
                public:
                    virtual HRESULT STDMETHODCALLTYPE add_SelectedIndexChanged(
                        __FITypedEventHandler_2_Windows__CMedia__CCore__CISingleSelectMediaTrackList_IInspectable* handler,
                        EventRegistrationToken* token
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE remove_SelectedIndexChanged(
                        EventRegistrationToken token
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE put_SelectedIndex(
                        INT32 value
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE get_SelectedIndex(
                        INT32* value
                        ) = 0;
                };

                extern MIDL_CONST_ID IID& IID_ISingleSelectMediaTrackList = _uuidof(ISingleSelectMediaTrackList);
            } /* Core */
        } /* Media */
    } /* Windows */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CWindows_CMedia_CCore_CISingleSelectMediaTrackList;
#endif /* !defined(____x_ABI_CWindows_CMedia_CCore_CISingleSelectMediaTrackList_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Interface Windows.Media.Core.ISpeechCue
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 4.0
 *
 * Interface is a part of the implementation of type Windows.Media.Core.SpeechCue
 *
 * Any object which implements this interface must also implement the following interfaces:
 *     Windows.Media.Core.IMediaCue
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x40000
#if !defined(____x_ABI_CWindows_CMedia_CCore_CISpeechCue_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CMedia_CCore_CISpeechCue_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Media_Core_ISpeechCue[] = L"Windows.Media.Core.ISpeechCue";
namespace ABI {
    namespace Windows {
        namespace Media {
            namespace Core {
                MIDL_INTERFACE("aee254dc-1725-4bad-8043-a98499b017a2")
                ISpeechCue : public IInspectable
                {
                public:
                    virtual HRESULT STDMETHODCALLTYPE get_Text(
                        HSTRING* value
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE put_Text(
                        HSTRING value
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE get_StartPositionInInput(
                        __FIReference_1_int** value
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE put_StartPositionInInput(
                        __FIReference_1_int* value
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE get_EndPositionInInput(
                        __FIReference_1_int** value
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE put_EndPositionInInput(
                        __FIReference_1_int* value
                        ) = 0;
                };

                extern MIDL_CONST_ID IID& IID_ISpeechCue = _uuidof(ISpeechCue);
            } /* Core */
        } /* Media */
    } /* Windows */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CWindows_CMedia_CCore_CISpeechCue;
#endif /* !defined(____x_ABI_CWindows_CMedia_CCore_CISpeechCue_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x40000

/*
 *
 * Interface Windows.Media.Core.ITimedMetadataStreamDescriptor
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 6.0
 *
 * Interface is a part of the implementation of type Windows.Media.Core.TimedMetadataStreamDescriptor
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x60000
#if !defined(____x_ABI_CWindows_CMedia_CCore_CITimedMetadataStreamDescriptor_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CMedia_CCore_CITimedMetadataStreamDescriptor_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Media_Core_ITimedMetadataStreamDescriptor[] = L"Windows.Media.Core.ITimedMetadataStreamDescriptor";
namespace ABI {
    namespace Windows {
        namespace Media {
            namespace Core {
                MIDL_INTERFACE("133336bf-296a-463e-9ff9-01cd25691408")
                ITimedMetadataStreamDescriptor : public IInspectable
                {
                public:
                    virtual HRESULT STDMETHODCALLTYPE get_EncodingProperties(
                        ABI::Windows::Media::MediaProperties::IMediaEncodingProperties** value
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE Copy(
                        ABI::Windows::Media::Core::IMediaStreamDescriptor** result
                        ) = 0;
                };

                extern MIDL_CONST_ID IID& IID_ITimedMetadataStreamDescriptor = _uuidof(ITimedMetadataStreamDescriptor);
            } /* Core */
        } /* Media */
    } /* Windows */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CWindows_CMedia_CCore_CITimedMetadataStreamDescriptor;
#endif /* !defined(____x_ABI_CWindows_CMedia_CCore_CITimedMetadataStreamDescriptor_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x60000

/*
 *
 * Interface Windows.Media.Core.ITimedMetadataStreamDescriptorFactory
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 6.0
 *
 * Interface is a part of the implementation of type Windows.Media.Core.TimedMetadataStreamDescriptor
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x60000
#if !defined(____x_ABI_CWindows_CMedia_CCore_CITimedMetadataStreamDescriptorFactory_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CMedia_CCore_CITimedMetadataStreamDescriptorFactory_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Media_Core_ITimedMetadataStreamDescriptorFactory[] = L"Windows.Media.Core.ITimedMetadataStreamDescriptorFactory";
namespace ABI {
    namespace Windows {
        namespace Media {
            namespace Core {
                MIDL_INTERFACE("c027de30-7362-4ff9-98b1-2dfd0b8d1cae")
                ITimedMetadataStreamDescriptorFactory : public IInspectable
                {
                public:
                    virtual HRESULT STDMETHODCALLTYPE Create(
                        ABI::Windows::Media::MediaProperties::IMediaEncodingProperties* encodingProperties,
                        ABI::Windows::Media::Core::IMediaStreamDescriptor** result
                        ) = 0;
                };

                extern MIDL_CONST_ID IID& IID_ITimedMetadataStreamDescriptorFactory = _uuidof(ITimedMetadataStreamDescriptorFactory);
            } /* Core */
        } /* Media */
    } /* Windows */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CWindows_CMedia_CCore_CITimedMetadataStreamDescriptorFactory;
#endif /* !defined(____x_ABI_CWindows_CMedia_CCore_CITimedMetadataStreamDescriptorFactory_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x60000

/*
 *
 * Interface Windows.Media.Core.ITimedMetadataTrack
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Interface is a part of the implementation of type Windows.Media.Core.TimedMetadataTrack
 *
 * Any object which implements this interface must also implement the following interfaces:
 *     Windows.Media.Core.IMediaTrack
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____x_ABI_CWindows_CMedia_CCore_CITimedMetadataTrack_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CMedia_CCore_CITimedMetadataTrack_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Media_Core_ITimedMetadataTrack[] = L"Windows.Media.Core.ITimedMetadataTrack";
namespace ABI {
    namespace Windows {
        namespace Media {
            namespace Core {
                MIDL_INTERFACE("9e6aed9e-f67a-49a9-b330-cf03b0e9cf07")
                ITimedMetadataTrack : public IInspectable
                {
                public:
                    virtual HRESULT STDMETHODCALLTYPE add_CueEntered(
                        __FITypedEventHandler_2_Windows__CMedia__CCore__CTimedMetadataTrack_Windows__CMedia__CCore__CMediaCueEventArgs* handler,
                        EventRegistrationToken* token
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE remove_CueEntered(
                        EventRegistrationToken token
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE add_CueExited(
                        __FITypedEventHandler_2_Windows__CMedia__CCore__CTimedMetadataTrack_Windows__CMedia__CCore__CMediaCueEventArgs* handler,
                        EventRegistrationToken* token
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE remove_CueExited(
                        EventRegistrationToken token
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE add_TrackFailed(
                        __FITypedEventHandler_2_Windows__CMedia__CCore__CTimedMetadataTrack_Windows__CMedia__CCore__CTimedMetadataTrackFailedEventArgs* handler,
                        EventRegistrationToken* token
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE remove_TrackFailed(
                        EventRegistrationToken token
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE get_Cues(
                        __FIVectorView_1_Windows__CMedia__CCore__CIMediaCue** value
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE get_ActiveCues(
                        __FIVectorView_1_Windows__CMedia__CCore__CIMediaCue** value
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE get_TimedMetadataKind(
                        ABI::Windows::Media::Core::TimedMetadataKind* value
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE get_DispatchType(
                        HSTRING* value
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE AddCue(
                        ABI::Windows::Media::Core::IMediaCue* cue
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE RemoveCue(
                        ABI::Windows::Media::Core::IMediaCue* cue
                        ) = 0;
                };

                extern MIDL_CONST_ID IID& IID_ITimedMetadataTrack = _uuidof(ITimedMetadataTrack);
            } /* Core */
        } /* Media */
    } /* Windows */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CWindows_CMedia_CCore_CITimedMetadataTrack;
#endif /* !defined(____x_ABI_CWindows_CMedia_CCore_CITimedMetadataTrack_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Interface Windows.Media.Core.ITimedMetadataTrack2
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 3.0
 *
 * Interface is a part of the implementation of type Windows.Media.Core.TimedMetadataTrack
 *
 * Any object which implements this interface must also implement the following interfaces:
 *     Windows.Media.Core.ITimedMetadataTrack
 *     Windows.Media.Core.IMediaTrack
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x30000
#if !defined(____x_ABI_CWindows_CMedia_CCore_CITimedMetadataTrack2_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CMedia_CCore_CITimedMetadataTrack2_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Media_Core_ITimedMetadataTrack2[] = L"Windows.Media.Core.ITimedMetadataTrack2";
namespace ABI {
    namespace Windows {
        namespace Media {
            namespace Core {
                MIDL_INTERFACE("21b4b648-9f9d-40ba-a8f3-1a92753aef0b")
                ITimedMetadataTrack2 : public IInspectable
                {
                public:
                    virtual HRESULT STDMETHODCALLTYPE get_PlaybackItem(
                        ABI::Windows::Media::Playback::IMediaPlaybackItem** value
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE get_Name(
                        HSTRING* value
                        ) = 0;
                };

                extern MIDL_CONST_ID IID& IID_ITimedMetadataTrack2 = _uuidof(ITimedMetadataTrack2);
            } /* Core */
        } /* Media */
    } /* Windows */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CWindows_CMedia_CCore_CITimedMetadataTrack2;
#endif /* !defined(____x_ABI_CWindows_CMedia_CCore_CITimedMetadataTrack2_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x30000

/*
 *
 * Interface Windows.Media.Core.ITimedMetadataTrackError
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Interface is a part of the implementation of type Windows.Media.Core.TimedMetadataTrackError
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____x_ABI_CWindows_CMedia_CCore_CITimedMetadataTrackError_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CMedia_CCore_CITimedMetadataTrackError_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Media_Core_ITimedMetadataTrackError[] = L"Windows.Media.Core.ITimedMetadataTrackError";
namespace ABI {
    namespace Windows {
        namespace Media {
            namespace Core {
                MIDL_INTERFACE("b3767915-4114-4819-b9d9-dd76089e72f8")
                ITimedMetadataTrackError : public IInspectable
                {
                public:
                    virtual HRESULT STDMETHODCALLTYPE get_ErrorCode(
                        ABI::Windows::Media::Core::TimedMetadataTrackErrorCode* value
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE get_ExtendedError(
                        HRESULT* value
                        ) = 0;
                };

                extern MIDL_CONST_ID IID& IID_ITimedMetadataTrackError = _uuidof(ITimedMetadataTrackError);
            } /* Core */
        } /* Media */
    } /* Windows */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CWindows_CMedia_CCore_CITimedMetadataTrackError;
#endif /* !defined(____x_ABI_CWindows_CMedia_CCore_CITimedMetadataTrackError_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Interface Windows.Media.Core.ITimedMetadataTrackFactory
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Interface is a part of the implementation of type Windows.Media.Core.TimedMetadataTrack
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____x_ABI_CWindows_CMedia_CCore_CITimedMetadataTrackFactory_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CMedia_CCore_CITimedMetadataTrackFactory_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Media_Core_ITimedMetadataTrackFactory[] = L"Windows.Media.Core.ITimedMetadataTrackFactory";
namespace ABI {
    namespace Windows {
        namespace Media {
            namespace Core {
                MIDL_INTERFACE("8dd57611-97b3-4e1f-852c-0f482c81ad26")
                ITimedMetadataTrackFactory : public IInspectable
                {
                public:
                    virtual HRESULT STDMETHODCALLTYPE Create(
                        HSTRING id,
                        HSTRING language,
                        ABI::Windows::Media::Core::TimedMetadataKind kind,
                        ABI::Windows::Media::Core::ITimedMetadataTrack** value
                        ) = 0;
                };

                extern MIDL_CONST_ID IID& IID_ITimedMetadataTrackFactory = _uuidof(ITimedMetadataTrackFactory);
            } /* Core */
        } /* Media */
    } /* Windows */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CWindows_CMedia_CCore_CITimedMetadataTrackFactory;
#endif /* !defined(____x_ABI_CWindows_CMedia_CCore_CITimedMetadataTrackFactory_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Interface Windows.Media.Core.ITimedMetadataTrackFailedEventArgs
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Interface is a part of the implementation of type Windows.Media.Core.TimedMetadataTrackFailedEventArgs
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____x_ABI_CWindows_CMedia_CCore_CITimedMetadataTrackFailedEventArgs_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CMedia_CCore_CITimedMetadataTrackFailedEventArgs_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Media_Core_ITimedMetadataTrackFailedEventArgs[] = L"Windows.Media.Core.ITimedMetadataTrackFailedEventArgs";
namespace ABI {
    namespace Windows {
        namespace Media {
            namespace Core {
                MIDL_INTERFACE("a57fc9d1-6789-4d4d-b07f-84b4f31acb70")
                ITimedMetadataTrackFailedEventArgs : public IInspectable
                {
                public:
                    virtual HRESULT STDMETHODCALLTYPE get_Error(
                        ABI::Windows::Media::Core::ITimedMetadataTrackError** value
                        ) = 0;
                };

                extern MIDL_CONST_ID IID& IID_ITimedMetadataTrackFailedEventArgs = _uuidof(ITimedMetadataTrackFailedEventArgs);
            } /* Core */
        } /* Media */
    } /* Windows */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CWindows_CMedia_CCore_CITimedMetadataTrackFailedEventArgs;
#endif /* !defined(____x_ABI_CWindows_CMedia_CCore_CITimedMetadataTrackFailedEventArgs_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Interface Windows.Media.Core.ITimedMetadataTrackProvider
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 4.0
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x40000
#if !defined(____x_ABI_CWindows_CMedia_CCore_CITimedMetadataTrackProvider_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CMedia_CCore_CITimedMetadataTrackProvider_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Media_Core_ITimedMetadataTrackProvider[] = L"Windows.Media.Core.ITimedMetadataTrackProvider";
namespace ABI {
    namespace Windows {
        namespace Media {
            namespace Core {
                MIDL_INTERFACE("3b7f2024-f74e-4ade-93c5-219da05b6856")
                ITimedMetadataTrackProvider : public IInspectable
                {
                public:
                    virtual HRESULT STDMETHODCALLTYPE get_TimedMetadataTracks(
                        __FIVectorView_1_Windows__CMedia__CCore__CTimedMetadataTrack** value
                        ) = 0;
                };

                extern MIDL_CONST_ID IID& IID_ITimedMetadataTrackProvider = _uuidof(ITimedMetadataTrackProvider);
            } /* Core */
        } /* Media */
    } /* Windows */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CWindows_CMedia_CCore_CITimedMetadataTrackProvider;
#endif /* !defined(____x_ABI_CWindows_CMedia_CCore_CITimedMetadataTrackProvider_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x40000

/*
 *
 * Interface Windows.Media.Core.ITimedTextCue
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Interface is a part of the implementation of type Windows.Media.Core.TimedTextCue
 *
 * Any object which implements this interface must also implement the following interfaces:
 *     Windows.Media.Core.IMediaCue
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____x_ABI_CWindows_CMedia_CCore_CITimedTextCue_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CMedia_CCore_CITimedTextCue_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Media_Core_ITimedTextCue[] = L"Windows.Media.Core.ITimedTextCue";
namespace ABI {
    namespace Windows {
        namespace Media {
            namespace Core {
                MIDL_INTERFACE("51c79e51-3b86-494d-b359-bb2ea7aca9a9")
                ITimedTextCue : public IInspectable
                {
                public:
                    virtual HRESULT STDMETHODCALLTYPE get_CueRegion(
                        ABI::Windows::Media::Core::ITimedTextRegion** value
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE put_CueRegion(
                        ABI::Windows::Media::Core::ITimedTextRegion* value
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE get_CueStyle(
                        ABI::Windows::Media::Core::ITimedTextStyle** value
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE put_CueStyle(
                        ABI::Windows::Media::Core::ITimedTextStyle* value
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE get_Lines(
                        __FIVector_1_Windows__CMedia__CCore__CTimedTextLine** value
                        ) = 0;
                };

                extern MIDL_CONST_ID IID& IID_ITimedTextCue = _uuidof(ITimedTextCue);
            } /* Core */
        } /* Media */
    } /* Windows */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CWindows_CMedia_CCore_CITimedTextCue;
#endif /* !defined(____x_ABI_CWindows_CMedia_CCore_CITimedTextCue_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Interface Windows.Media.Core.ITimedTextLine
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Interface is a part of the implementation of type Windows.Media.Core.TimedTextLine
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____x_ABI_CWindows_CMedia_CCore_CITimedTextLine_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CMedia_CCore_CITimedTextLine_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Media_Core_ITimedTextLine[] = L"Windows.Media.Core.ITimedTextLine";
namespace ABI {
    namespace Windows {
        namespace Media {
            namespace Core {
                MIDL_INTERFACE("978d7ce2-7308-4c66-be50-65777289f5df")
                ITimedTextLine : public IInspectable
                {
                public:
                    virtual HRESULT STDMETHODCALLTYPE get_Text(
                        HSTRING* value
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE put_Text(
                        HSTRING value
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE get_Subformats(
                        __FIVector_1_Windows__CMedia__CCore__CTimedTextSubformat** value
                        ) = 0;
                };

                extern MIDL_CONST_ID IID& IID_ITimedTextLine = _uuidof(ITimedTextLine);
            } /* Core */
        } /* Media */
    } /* Windows */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CWindows_CMedia_CCore_CITimedTextLine;
#endif /* !defined(____x_ABI_CWindows_CMedia_CCore_CITimedTextLine_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Interface Windows.Media.Core.ITimedTextRegion
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Interface is a part of the implementation of type Windows.Media.Core.TimedTextRegion
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____x_ABI_CWindows_CMedia_CCore_CITimedTextRegion_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CMedia_CCore_CITimedTextRegion_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Media_Core_ITimedTextRegion[] = L"Windows.Media.Core.ITimedTextRegion";
namespace ABI {
    namespace Windows {
        namespace Media {
            namespace Core {
                MIDL_INTERFACE("1ed0881f-8a06-4222-9f59-b21bf40124b4")
                ITimedTextRegion : public IInspectable
                {
                public:
                    virtual HRESULT STDMETHODCALLTYPE get_Name(
                        HSTRING* value
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE put_Name(
                        HSTRING value
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE get_Position(
                        ABI::Windows::Media::Core::TimedTextPoint* value
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE put_Position(
                        ABI::Windows::Media::Core::TimedTextPoint value
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE get_Extent(
                        ABI::Windows::Media::Core::TimedTextSize* value
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE put_Extent(
                        ABI::Windows::Media::Core::TimedTextSize value
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE get_Background(
                        ABI::Windows::UI::Color* value
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE put_Background(
                        ABI::Windows::UI::Color value
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE get_WritingMode(
                        ABI::Windows::Media::Core::TimedTextWritingMode* value
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE put_WritingMode(
                        ABI::Windows::Media::Core::TimedTextWritingMode value
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE get_DisplayAlignment(
                        ABI::Windows::Media::Core::TimedTextDisplayAlignment* value
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE put_DisplayAlignment(
                        ABI::Windows::Media::Core::TimedTextDisplayAlignment value
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE get_LineHeight(
                        ABI::Windows::Media::Core::TimedTextDouble* value
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE put_LineHeight(
                        ABI::Windows::Media::Core::TimedTextDouble value
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE get_IsOverflowClipped(
                        boolean* value
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE put_IsOverflowClipped(
                        boolean value
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE get_Padding(
                        ABI::Windows::Media::Core::TimedTextPadding* value
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE put_Padding(
                        ABI::Windows::Media::Core::TimedTextPadding value
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE get_TextWrapping(
                        ABI::Windows::Media::Core::TimedTextWrapping* value
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE put_TextWrapping(
                        ABI::Windows::Media::Core::TimedTextWrapping value
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE get_ZIndex(
                        INT32* value
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE put_ZIndex(
                        INT32 value
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE get_ScrollMode(
                        ABI::Windows::Media::Core::TimedTextScrollMode* value
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE put_ScrollMode(
                        ABI::Windows::Media::Core::TimedTextScrollMode value
                        ) = 0;
                };

                extern MIDL_CONST_ID IID& IID_ITimedTextRegion = _uuidof(ITimedTextRegion);
            } /* Core */
        } /* Media */
    } /* Windows */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CWindows_CMedia_CCore_CITimedTextRegion;
#endif /* !defined(____x_ABI_CWindows_CMedia_CCore_CITimedTextRegion_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Interface Windows.Media.Core.ITimedTextSource
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Interface is a part of the implementation of type Windows.Media.Core.TimedTextSource
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____x_ABI_CWindows_CMedia_CCore_CITimedTextSource_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CMedia_CCore_CITimedTextSource_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Media_Core_ITimedTextSource[] = L"Windows.Media.Core.ITimedTextSource";
namespace ABI {
    namespace Windows {
        namespace Media {
            namespace Core {
                MIDL_INTERFACE("c4ed9ba6-101f-404d-a949-82f33fcd93b7")
                ITimedTextSource : public IInspectable
                {
                public:
                    virtual HRESULT STDMETHODCALLTYPE add_Resolved(
                        __FITypedEventHandler_2_Windows__CMedia__CCore__CTimedTextSource_Windows__CMedia__CCore__CTimedTextSourceResolveResultEventArgs* handler,
                        EventRegistrationToken* token
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE remove_Resolved(
                        EventRegistrationToken token
                        ) = 0;
                };

                extern MIDL_CONST_ID IID& IID_ITimedTextSource = _uuidof(ITimedTextSource);
            } /* Core */
        } /* Media */
    } /* Windows */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CWindows_CMedia_CCore_CITimedTextSource;
#endif /* !defined(____x_ABI_CWindows_CMedia_CCore_CITimedTextSource_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Interface Windows.Media.Core.ITimedTextSourceResolveResultEventArgs
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Interface is a part of the implementation of type Windows.Media.Core.TimedTextSourceResolveResultEventArgs
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____x_ABI_CWindows_CMedia_CCore_CITimedTextSourceResolveResultEventArgs_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CMedia_CCore_CITimedTextSourceResolveResultEventArgs_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Media_Core_ITimedTextSourceResolveResultEventArgs[] = L"Windows.Media.Core.ITimedTextSourceResolveResultEventArgs";
namespace ABI {
    namespace Windows {
        namespace Media {
            namespace Core {
                MIDL_INTERFACE("48907c9c-dcd8-4c33-9ad3-6cdce7b1c566")
                ITimedTextSourceResolveResultEventArgs : public IInspectable
                {
                public:
                    virtual HRESULT STDMETHODCALLTYPE get_Error(
                        ABI::Windows::Media::Core::ITimedMetadataTrackError** value
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE get_Tracks(
                        __FIVectorView_1_Windows__CMedia__CCore__CTimedMetadataTrack** value
                        ) = 0;
                };

                extern MIDL_CONST_ID IID& IID_ITimedTextSourceResolveResultEventArgs = _uuidof(ITimedTextSourceResolveResultEventArgs);
            } /* Core */
        } /* Media */
    } /* Windows */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CWindows_CMedia_CCore_CITimedTextSourceResolveResultEventArgs;
#endif /* !defined(____x_ABI_CWindows_CMedia_CCore_CITimedTextSourceResolveResultEventArgs_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Interface Windows.Media.Core.ITimedTextSourceStatics
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Interface is a part of the implementation of type Windows.Media.Core.TimedTextSource
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____x_ABI_CWindows_CMedia_CCore_CITimedTextSourceStatics_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CMedia_CCore_CITimedTextSourceStatics_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Media_Core_ITimedTextSourceStatics[] = L"Windows.Media.Core.ITimedTextSourceStatics";
namespace ABI {
    namespace Windows {
        namespace Media {
            namespace Core {
                MIDL_INTERFACE("7e311853-9aba-4ac4-bb98-2fb176c3bfdd")
                ITimedTextSourceStatics : public IInspectable
                {
                public:
                    virtual HRESULT STDMETHODCALLTYPE CreateFromStream(
                        ABI::Windows::Storage::Streams::IRandomAccessStream* stream,
                        ABI::Windows::Media::Core::ITimedTextSource** value
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE CreateFromUri(
                        ABI::Windows::Foundation::IUriRuntimeClass* uri,
                        ABI::Windows::Media::Core::ITimedTextSource** value
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE CreateFromStreamWithLanguage(
                        ABI::Windows::Storage::Streams::IRandomAccessStream* stream,
                        HSTRING defaultLanguage,
                        ABI::Windows::Media::Core::ITimedTextSource** value
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE CreateFromUriWithLanguage(
                        ABI::Windows::Foundation::IUriRuntimeClass* uri,
                        HSTRING defaultLanguage,
                        ABI::Windows::Media::Core::ITimedTextSource** value
                        ) = 0;
                };

                extern MIDL_CONST_ID IID& IID_ITimedTextSourceStatics = _uuidof(ITimedTextSourceStatics);
            } /* Core */
        } /* Media */
    } /* Windows */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CWindows_CMedia_CCore_CITimedTextSourceStatics;
#endif /* !defined(____x_ABI_CWindows_CMedia_CCore_CITimedTextSourceStatics_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Interface Windows.Media.Core.ITimedTextSourceStatics2
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 4.0
 *
 * Interface is a part of the implementation of type Windows.Media.Core.TimedTextSource
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x40000
#if !defined(____x_ABI_CWindows_CMedia_CCore_CITimedTextSourceStatics2_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CMedia_CCore_CITimedTextSourceStatics2_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Media_Core_ITimedTextSourceStatics2[] = L"Windows.Media.Core.ITimedTextSourceStatics2";
namespace ABI {
    namespace Windows {
        namespace Media {
            namespace Core {
                MIDL_INTERFACE("b66b7602-923e-43fa-9633-587075812db5")
                ITimedTextSourceStatics2 : public IInspectable
                {
                public:
                    virtual HRESULT STDMETHODCALLTYPE CreateFromStreamWithIndex(
                        ABI::Windows::Storage::Streams::IRandomAccessStream* stream,
                        ABI::Windows::Storage::Streams::IRandomAccessStream* indexStream,
                        ABI::Windows::Media::Core::ITimedTextSource** result
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE CreateFromUriWithIndex(
                        ABI::Windows::Foundation::IUriRuntimeClass* uri,
                        ABI::Windows::Foundation::IUriRuntimeClass* indexUri,
                        ABI::Windows::Media::Core::ITimedTextSource** result
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE CreateFromStreamWithIndexAndLanguage(
                        ABI::Windows::Storage::Streams::IRandomAccessStream* stream,
                        ABI::Windows::Storage::Streams::IRandomAccessStream* indexStream,
                        HSTRING defaultLanguage,
                        ABI::Windows::Media::Core::ITimedTextSource** result
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE CreateFromUriWithIndexAndLanguage(
                        ABI::Windows::Foundation::IUriRuntimeClass* uri,
                        ABI::Windows::Foundation::IUriRuntimeClass* indexUri,
                        HSTRING defaultLanguage,
                        ABI::Windows::Media::Core::ITimedTextSource** result
                        ) = 0;
                };

                extern MIDL_CONST_ID IID& IID_ITimedTextSourceStatics2 = _uuidof(ITimedTextSourceStatics2);
            } /* Core */
        } /* Media */
    } /* Windows */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CWindows_CMedia_CCore_CITimedTextSourceStatics2;
#endif /* !defined(____x_ABI_CWindows_CMedia_CCore_CITimedTextSourceStatics2_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x40000

/*
 *
 * Interface Windows.Media.Core.ITimedTextStyle
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Interface is a part of the implementation of type Windows.Media.Core.TimedTextStyle
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____x_ABI_CWindows_CMedia_CCore_CITimedTextStyle_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CMedia_CCore_CITimedTextStyle_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Media_Core_ITimedTextStyle[] = L"Windows.Media.Core.ITimedTextStyle";
namespace ABI {
    namespace Windows {
        namespace Media {
            namespace Core {
                MIDL_INTERFACE("1bb2384d-a825-40c2-a7f5-281eaedf3b55")
                ITimedTextStyle : public IInspectable
                {
                public:
                    virtual HRESULT STDMETHODCALLTYPE get_Name(
                        HSTRING* value
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE put_Name(
                        HSTRING value
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE get_FontFamily(
                        HSTRING* value
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE put_FontFamily(
                        HSTRING value
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE get_FontSize(
                        ABI::Windows::Media::Core::TimedTextDouble* value
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE put_FontSize(
                        ABI::Windows::Media::Core::TimedTextDouble value
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE get_FontWeight(
                        ABI::Windows::Media::Core::TimedTextWeight* value
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE put_FontWeight(
                        ABI::Windows::Media::Core::TimedTextWeight value
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE get_Foreground(
                        ABI::Windows::UI::Color* value
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE put_Foreground(
                        ABI::Windows::UI::Color value
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE get_Background(
                        ABI::Windows::UI::Color* value
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE put_Background(
                        ABI::Windows::UI::Color value
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE get_IsBackgroundAlwaysShown(
                        boolean* value
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE put_IsBackgroundAlwaysShown(
                        boolean value
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE get_FlowDirection(
                        ABI::Windows::Media::Core::TimedTextFlowDirection* value
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE put_FlowDirection(
                        ABI::Windows::Media::Core::TimedTextFlowDirection value
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE get_LineAlignment(
                        ABI::Windows::Media::Core::TimedTextLineAlignment* value
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE put_LineAlignment(
                        ABI::Windows::Media::Core::TimedTextLineAlignment value
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE get_OutlineColor(
                        ABI::Windows::UI::Color* value
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE put_OutlineColor(
                        ABI::Windows::UI::Color value
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE get_OutlineThickness(
                        ABI::Windows::Media::Core::TimedTextDouble* value
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE put_OutlineThickness(
                        ABI::Windows::Media::Core::TimedTextDouble value
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE get_OutlineRadius(
                        ABI::Windows::Media::Core::TimedTextDouble* value
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE put_OutlineRadius(
                        ABI::Windows::Media::Core::TimedTextDouble value
                        ) = 0;
                };

                extern MIDL_CONST_ID IID& IID_ITimedTextStyle = _uuidof(ITimedTextStyle);
            } /* Core */
        } /* Media */
    } /* Windows */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CWindows_CMedia_CCore_CITimedTextStyle;
#endif /* !defined(____x_ABI_CWindows_CMedia_CCore_CITimedTextStyle_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Interface Windows.Media.Core.ITimedTextStyle2
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 4.0
 *
 * Interface is a part of the implementation of type Windows.Media.Core.TimedTextStyle
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x40000
#if !defined(____x_ABI_CWindows_CMedia_CCore_CITimedTextStyle2_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CMedia_CCore_CITimedTextStyle2_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Media_Core_ITimedTextStyle2[] = L"Windows.Media.Core.ITimedTextStyle2";
namespace ABI {
    namespace Windows {
        namespace Media {
            namespace Core {
                MIDL_INTERFACE("655f492d-6111-4787-89cc-686fece57e14")
                ITimedTextStyle2 : public IInspectable
                {
                public:
                    virtual HRESULT STDMETHODCALLTYPE get_FontStyle(
                        ABI::Windows::Media::Core::TimedTextFontStyle* value
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE put_FontStyle(
                        ABI::Windows::Media::Core::TimedTextFontStyle value
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE get_IsUnderlineEnabled(
                        boolean* value
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE put_IsUnderlineEnabled(
                        boolean value
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE get_IsLineThroughEnabled(
                        boolean* value
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE put_IsLineThroughEnabled(
                        boolean value
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE get_IsOverlineEnabled(
                        boolean* value
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE put_IsOverlineEnabled(
                        boolean value
                        ) = 0;
                };

                extern MIDL_CONST_ID IID& IID_ITimedTextStyle2 = _uuidof(ITimedTextStyle2);
            } /* Core */
        } /* Media */
    } /* Windows */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CWindows_CMedia_CCore_CITimedTextStyle2;
#endif /* !defined(____x_ABI_CWindows_CMedia_CCore_CITimedTextStyle2_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x40000

/*
 *
 * Interface Windows.Media.Core.ITimedTextSubformat
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Interface is a part of the implementation of type Windows.Media.Core.TimedTextSubformat
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____x_ABI_CWindows_CMedia_CCore_CITimedTextSubformat_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CMedia_CCore_CITimedTextSubformat_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Media_Core_ITimedTextSubformat[] = L"Windows.Media.Core.ITimedTextSubformat";
namespace ABI {
    namespace Windows {
        namespace Media {
            namespace Core {
                MIDL_INTERFACE("d713502f-3261-4722-a0c2-b937b2390f14")
                ITimedTextSubformat : public IInspectable
                {
                public:
                    virtual HRESULT STDMETHODCALLTYPE get_StartIndex(
                        INT32* value
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE put_StartIndex(
                        INT32 value
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE get_Length(
                        INT32* value
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE put_Length(
                        INT32 value
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE get_SubformatStyle(
                        ABI::Windows::Media::Core::ITimedTextStyle** value
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE put_SubformatStyle(
                        ABI::Windows::Media::Core::ITimedTextStyle* value
                        ) = 0;
                };

                extern MIDL_CONST_ID IID& IID_ITimedTextSubformat = _uuidof(ITimedTextSubformat);
            } /* Core */
        } /* Media */
    } /* Windows */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CWindows_CMedia_CCore_CITimedTextSubformat;
#endif /* !defined(____x_ABI_CWindows_CMedia_CCore_CITimedTextSubformat_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Interface Windows.Media.Core.IVideoStabilizationEffect
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Interface is a part of the implementation of type Windows.Media.Core.VideoStabilizationEffect
 *
 * Any object which implements this interface must also implement the following interfaces:
 *     Windows.Media.IMediaExtension
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____x_ABI_CWindows_CMedia_CCore_CIVideoStabilizationEffect_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CMedia_CCore_CIVideoStabilizationEffect_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Media_Core_IVideoStabilizationEffect[] = L"Windows.Media.Core.IVideoStabilizationEffect";
namespace ABI {
    namespace Windows {
        namespace Media {
            namespace Core {
                MIDL_INTERFACE("0808a650-9698-4e57-877b-bd7cb2ee0f8a")
                IVideoStabilizationEffect : public IInspectable
                {
                public:
                    virtual HRESULT STDMETHODCALLTYPE put_Enabled(
                        boolean value
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE get_Enabled(
                        boolean* value
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE add_EnabledChanged(
                        __FITypedEventHandler_2_Windows__CMedia__CCore__CVideoStabilizationEffect_Windows__CMedia__CCore__CVideoStabilizationEffectEnabledChangedEventArgs* handler,
                        EventRegistrationToken* cookie
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE remove_EnabledChanged(
                        EventRegistrationToken cookie
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE GetRecommendedStreamConfiguration(
                        ABI::Windows::Media::Devices::IVideoDeviceController* controller,
                        ABI::Windows::Media::MediaProperties::IVideoEncodingProperties* desiredProperties,
                        ABI::Windows::Media::Capture::IVideoStreamConfiguration** value
                        ) = 0;
                };

                extern MIDL_CONST_ID IID& IID_IVideoStabilizationEffect = _uuidof(IVideoStabilizationEffect);
            } /* Core */
        } /* Media */
    } /* Windows */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CWindows_CMedia_CCore_CIVideoStabilizationEffect;
#endif /* !defined(____x_ABI_CWindows_CMedia_CCore_CIVideoStabilizationEffect_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Interface Windows.Media.Core.IVideoStabilizationEffectEnabledChangedEventArgs
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Interface is a part of the implementation of type Windows.Media.Core.VideoStabilizationEffectEnabledChangedEventArgs
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____x_ABI_CWindows_CMedia_CCore_CIVideoStabilizationEffectEnabledChangedEventArgs_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CMedia_CCore_CIVideoStabilizationEffectEnabledChangedEventArgs_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Media_Core_IVideoStabilizationEffectEnabledChangedEventArgs[] = L"Windows.Media.Core.IVideoStabilizationEffectEnabledChangedEventArgs";
namespace ABI {
    namespace Windows {
        namespace Media {
            namespace Core {
                MIDL_INTERFACE("187eff28-67bb-4713-b900-4168da164529")
                IVideoStabilizationEffectEnabledChangedEventArgs : public IInspectable
                {
                public:
                    virtual HRESULT STDMETHODCALLTYPE get_Reason(
                        ABI::Windows::Media::Core::VideoStabilizationEffectEnabledChangedReason* value
                        ) = 0;
                };

                extern MIDL_CONST_ID IID& IID_IVideoStabilizationEffectEnabledChangedEventArgs = _uuidof(IVideoStabilizationEffectEnabledChangedEventArgs);
            } /* Core */
        } /* Media */
    } /* Windows */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CWindows_CMedia_CCore_CIVideoStabilizationEffectEnabledChangedEventArgs;
#endif /* !defined(____x_ABI_CWindows_CMedia_CCore_CIVideoStabilizationEffectEnabledChangedEventArgs_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Interface Windows.Media.Core.IVideoStreamDescriptor
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Interface is a part of the implementation of type Windows.Media.Core.VideoStreamDescriptor
 *
 * Any object which implements this interface must also implement the following interfaces:
 *     Windows.Media.Core.IMediaStreamDescriptor
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____x_ABI_CWindows_CMedia_CCore_CIVideoStreamDescriptor_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CMedia_CCore_CIVideoStreamDescriptor_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Media_Core_IVideoStreamDescriptor[] = L"Windows.Media.Core.IVideoStreamDescriptor";
namespace ABI {
    namespace Windows {
        namespace Media {
            namespace Core {
                MIDL_INTERFACE("12ee0d55-9c2b-4440-8057-2c7a90f0cbec")
                IVideoStreamDescriptor : public IInspectable
                {
                public:
                    virtual HRESULT STDMETHODCALLTYPE get_EncodingProperties(
                        ABI::Windows::Media::MediaProperties::IVideoEncodingProperties** encodingProperties
                        ) = 0;
                };

                extern MIDL_CONST_ID IID& IID_IVideoStreamDescriptor = _uuidof(IVideoStreamDescriptor);
            } /* Core */
        } /* Media */
    } /* Windows */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CWindows_CMedia_CCore_CIVideoStreamDescriptor;
#endif /* !defined(____x_ABI_CWindows_CMedia_CCore_CIVideoStreamDescriptor_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Interface Windows.Media.Core.IVideoStreamDescriptor2
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 6.0
 *
 * Interface is a part of the implementation of type Windows.Media.Core.VideoStreamDescriptor
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x60000
#if !defined(____x_ABI_CWindows_CMedia_CCore_CIVideoStreamDescriptor2_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CMedia_CCore_CIVideoStreamDescriptor2_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Media_Core_IVideoStreamDescriptor2[] = L"Windows.Media.Core.IVideoStreamDescriptor2";
namespace ABI {
    namespace Windows {
        namespace Media {
            namespace Core {
                MIDL_INTERFACE("8b306e10-453e-4088-832d-c36fa4f94af3")
                IVideoStreamDescriptor2 : public IInspectable
                {
                public:
                    virtual HRESULT STDMETHODCALLTYPE Copy(
                        ABI::Windows::Media::Core::IVideoStreamDescriptor** result
                        ) = 0;
                };

                extern MIDL_CONST_ID IID& IID_IVideoStreamDescriptor2 = _uuidof(IVideoStreamDescriptor2);
            } /* Core */
        } /* Media */
    } /* Windows */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CWindows_CMedia_CCore_CIVideoStreamDescriptor2;
#endif /* !defined(____x_ABI_CWindows_CMedia_CCore_CIVideoStreamDescriptor2_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x60000

/*
 *
 * Interface Windows.Media.Core.IVideoStreamDescriptorFactory
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Interface is a part of the implementation of type Windows.Media.Core.VideoStreamDescriptor
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____x_ABI_CWindows_CMedia_CCore_CIVideoStreamDescriptorFactory_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CMedia_CCore_CIVideoStreamDescriptorFactory_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Media_Core_IVideoStreamDescriptorFactory[] = L"Windows.Media.Core.IVideoStreamDescriptorFactory";
namespace ABI {
    namespace Windows {
        namespace Media {
            namespace Core {
                MIDL_INTERFACE("494ef6d1-bb75-43d2-9e5e-7b79a3afced4")
                IVideoStreamDescriptorFactory : public IInspectable
                {
                public:
                    virtual HRESULT STDMETHODCALLTYPE Create(
                        ABI::Windows::Media::MediaProperties::IVideoEncodingProperties* encodingProperties,
                        ABI::Windows::Media::Core::IVideoStreamDescriptor** result
                        ) = 0;
                };

                extern MIDL_CONST_ID IID& IID_IVideoStreamDescriptorFactory = _uuidof(IVideoStreamDescriptorFactory);
            } /* Core */
        } /* Media */
    } /* Windows */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CWindows_CMedia_CCore_CIVideoStreamDescriptorFactory;
#endif /* !defined(____x_ABI_CWindows_CMedia_CCore_CIVideoStreamDescriptorFactory_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Interface Windows.Media.Core.IVideoTrack
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 3.0
 *
 * Interface is a part of the implementation of type Windows.Media.Core.VideoTrack
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x30000
#if !defined(____x_ABI_CWindows_CMedia_CCore_CIVideoTrack_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CMedia_CCore_CIVideoTrack_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Media_Core_IVideoTrack[] = L"Windows.Media.Core.IVideoTrack";
namespace ABI {
    namespace Windows {
        namespace Media {
            namespace Core {
                MIDL_INTERFACE("99f3b7f3-e298-4396-bb6a-a51be6a2a20a")
                IVideoTrack : public IInspectable
                {
                public:
                    virtual HRESULT STDMETHODCALLTYPE add_OpenFailed(
                        __FITypedEventHandler_2_Windows__CMedia__CCore__CVideoTrack_Windows__CMedia__CCore__CVideoTrackOpenFailedEventArgs* handler,
                        EventRegistrationToken* token
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE remove_OpenFailed(
                        EventRegistrationToken token
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE GetEncodingProperties(
                        ABI::Windows::Media::MediaProperties::IVideoEncodingProperties** value
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE get_PlaybackItem(
                        ABI::Windows::Media::Playback::IMediaPlaybackItem** value
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE get_Name(
                        HSTRING* value
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE get_SupportInfo(
                        ABI::Windows::Media::Core::IVideoTrackSupportInfo** value
                        ) = 0;
                };

                extern MIDL_CONST_ID IID& IID_IVideoTrack = _uuidof(IVideoTrack);
            } /* Core */
        } /* Media */
    } /* Windows */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CWindows_CMedia_CCore_CIVideoTrack;
#endif /* !defined(____x_ABI_CWindows_CMedia_CCore_CIVideoTrack_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x30000

/*
 *
 * Interface Windows.Media.Core.IVideoTrackOpenFailedEventArgs
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 3.0
 *
 * Interface is a part of the implementation of type Windows.Media.Core.VideoTrackOpenFailedEventArgs
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x30000
#if !defined(____x_ABI_CWindows_CMedia_CCore_CIVideoTrackOpenFailedEventArgs_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CMedia_CCore_CIVideoTrackOpenFailedEventArgs_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Media_Core_IVideoTrackOpenFailedEventArgs[] = L"Windows.Media.Core.IVideoTrackOpenFailedEventArgs";
namespace ABI {
    namespace Windows {
        namespace Media {
            namespace Core {
                MIDL_INTERFACE("7679e231-04f9-4c82-a4ee-8602c8bb4754")
                IVideoTrackOpenFailedEventArgs : public IInspectable
                {
                public:
                    virtual HRESULT STDMETHODCALLTYPE get_ExtendedError(
                        HRESULT* value
                        ) = 0;
                };

                extern MIDL_CONST_ID IID& IID_IVideoTrackOpenFailedEventArgs = _uuidof(IVideoTrackOpenFailedEventArgs);
            } /* Core */
        } /* Media */
    } /* Windows */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CWindows_CMedia_CCore_CIVideoTrackOpenFailedEventArgs;
#endif /* !defined(____x_ABI_CWindows_CMedia_CCore_CIVideoTrackOpenFailedEventArgs_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x30000

/*
 *
 * Interface Windows.Media.Core.IVideoTrackSupportInfo
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 3.0
 *
 * Interface is a part of the implementation of type Windows.Media.Core.VideoTrackSupportInfo
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x30000
#if !defined(____x_ABI_CWindows_CMedia_CCore_CIVideoTrackSupportInfo_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CMedia_CCore_CIVideoTrackSupportInfo_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Media_Core_IVideoTrackSupportInfo[] = L"Windows.Media.Core.IVideoTrackSupportInfo";
namespace ABI {
    namespace Windows {
        namespace Media {
            namespace Core {
                MIDL_INTERFACE("4bb534a0-fc5f-450d-8ff0-778d590486de")
                IVideoTrackSupportInfo : public IInspectable
                {
                public:
                    virtual HRESULT STDMETHODCALLTYPE get_DecoderStatus(
                        ABI::Windows::Media::Core::MediaDecoderStatus* value
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE get_MediaSourceStatus(
                        ABI::Windows::Media::Core::MediaSourceStatus* value
                        ) = 0;
                };

                extern MIDL_CONST_ID IID& IID_IVideoTrackSupportInfo = _uuidof(IVideoTrackSupportInfo);
            } /* Core */
        } /* Media */
    } /* Windows */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CWindows_CMedia_CCore_CIVideoTrackSupportInfo;
#endif /* !defined(____x_ABI_CWindows_CMedia_CCore_CIVideoTrackSupportInfo_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x30000

/*
 *
 * Class Windows.Media.Core.AudioStreamDescriptor
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * RuntimeClass can be activated.
 *   Type can be activated via the Windows.Media.Core.IAudioStreamDescriptorFactory interface starting with version 1.0 of the Windows.Foundation.UniversalApiContract API contract
 *
 * Class implements the following interfaces:
 *    Windows.Media.Core.IAudioStreamDescriptor ** Default Interface **
 *    Windows.Media.Core.IMediaStreamDescriptor
 *    Windows.Media.Core.IAudioStreamDescriptor2
 *    Windows.Media.Core.IMediaStreamDescriptor2
 *    Windows.Media.Core.IAudioStreamDescriptor3
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#ifndef RUNTIMECLASS_Windows_Media_Core_AudioStreamDescriptor_DEFINED
#define RUNTIMECLASS_Windows_Media_Core_AudioStreamDescriptor_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Windows_Media_Core_AudioStreamDescriptor[] = L"Windows.Media.Core.AudioStreamDescriptor";
#endif
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Class Windows.Media.Core.AudioTrack
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Class implements the following interfaces:
 *    Windows.Media.Core.IMediaTrack ** Default Interface **
 *    Windows.Media.Core.IAudioTrack
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#ifndef RUNTIMECLASS_Windows_Media_Core_AudioTrack_DEFINED
#define RUNTIMECLASS_Windows_Media_Core_AudioTrack_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Windows_Media_Core_AudioTrack[] = L"Windows.Media.Core.AudioTrack";
#endif
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Class Windows.Media.Core.AudioTrackOpenFailedEventArgs
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 3.0
 *
 * Class implements the following interfaces:
 *    Windows.Media.Core.IAudioTrackOpenFailedEventArgs ** Default Interface **
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x30000
#ifndef RUNTIMECLASS_Windows_Media_Core_AudioTrackOpenFailedEventArgs_DEFINED
#define RUNTIMECLASS_Windows_Media_Core_AudioTrackOpenFailedEventArgs_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Windows_Media_Core_AudioTrackOpenFailedEventArgs[] = L"Windows.Media.Core.AudioTrackOpenFailedEventArgs";
#endif
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x30000

/*
 *
 * Class Windows.Media.Core.AudioTrackSupportInfo
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 3.0
 *
 * Class implements the following interfaces:
 *    Windows.Media.Core.IAudioTrackSupportInfo ** Default Interface **
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x30000
#ifndef RUNTIMECLASS_Windows_Media_Core_AudioTrackSupportInfo_DEFINED
#define RUNTIMECLASS_Windows_Media_Core_AudioTrackSupportInfo_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Windows_Media_Core_AudioTrackSupportInfo[] = L"Windows.Media.Core.AudioTrackSupportInfo";
#endif
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x30000

/*
 *
 * Class Windows.Media.Core.ChapterCue
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 4.0
 *
 * RuntimeClass can be activated.
 *   Type can be activated via RoActivateInstance starting with version 4.0 of the Windows.Foundation.UniversalApiContract API contract
 *
 * Class implements the following interfaces:
 *    Windows.Media.Core.IChapterCue ** Default Interface **
 *    Windows.Media.Core.IMediaCue
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x40000
#ifndef RUNTIMECLASS_Windows_Media_Core_ChapterCue_DEFINED
#define RUNTIMECLASS_Windows_Media_Core_ChapterCue_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Windows_Media_Core_ChapterCue[] = L"Windows.Media.Core.ChapterCue";
#endif
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x40000

/*
 *
 * Class Windows.Media.Core.CodecInfo
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 4.0
 *
 * Class implements the following interfaces:
 *    Windows.Media.Core.ICodecInfo ** Default Interface **
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x40000
#ifndef RUNTIMECLASS_Windows_Media_Core_CodecInfo_DEFINED
#define RUNTIMECLASS_Windows_Media_Core_CodecInfo_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Windows_Media_Core_CodecInfo[] = L"Windows.Media.Core.CodecInfo";
#endif
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x40000

/*
 *
 * Class Windows.Media.Core.CodecQuery
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 4.0
 *
 * RuntimeClass can be activated.
 *   Type can be activated via RoActivateInstance starting with version 4.0 of the Windows.Foundation.UniversalApiContract API contract
 *
 * Class implements the following interfaces:
 *    Windows.Media.Core.ICodecQuery ** Default Interface **
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x40000
#ifndef RUNTIMECLASS_Windows_Media_Core_CodecQuery_DEFINED
#define RUNTIMECLASS_Windows_Media_Core_CodecQuery_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Windows_Media_Core_CodecQuery[] = L"Windows.Media.Core.CodecQuery";
#endif
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x40000

/*
 *
 * Class Windows.Media.Core.CodecSubtypes
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 4.0
 *
 * RuntimeClass contains static methods.
 *   Static Methods exist on the Windows.Media.Core.ICodecSubtypesStatics interface starting with version 4.0 of the Windows.Foundation.UniversalApiContract API contract
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x40000
#ifndef RUNTIMECLASS_Windows_Media_Core_CodecSubtypes_DEFINED
#define RUNTIMECLASS_Windows_Media_Core_CodecSubtypes_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Windows_Media_Core_CodecSubtypes[] = L"Windows.Media.Core.CodecSubtypes";
#endif
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x40000

/*
 *
 * Class Windows.Media.Core.DataCue
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * RuntimeClass can be activated.
 *   Type can be activated via RoActivateInstance starting with version 1.0 of the Windows.Foundation.UniversalApiContract API contract
 *
 * Class implements the following interfaces:
 *    Windows.Media.Core.IDataCue ** Default Interface **
 *    Windows.Media.Core.IMediaCue
 *    Windows.Media.Core.IDataCue2
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#ifndef RUNTIMECLASS_Windows_Media_Core_DataCue_DEFINED
#define RUNTIMECLASS_Windows_Media_Core_DataCue_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Windows_Media_Core_DataCue[] = L"Windows.Media.Core.DataCue";
#endif
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Class Windows.Media.Core.FaceDetectedEventArgs
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Class implements the following interfaces:
 *    Windows.Media.Core.IFaceDetectedEventArgs ** Default Interface **
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#ifndef RUNTIMECLASS_Windows_Media_Core_FaceDetectedEventArgs_DEFINED
#define RUNTIMECLASS_Windows_Media_Core_FaceDetectedEventArgs_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Windows_Media_Core_FaceDetectedEventArgs[] = L"Windows.Media.Core.FaceDetectedEventArgs";
#endif
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Class Windows.Media.Core.FaceDetectionEffect
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Class implements the following interfaces:
 *    Windows.Media.Core.IFaceDetectionEffect ** Default Interface **
 *    Windows.Media.IMediaExtension
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#ifndef RUNTIMECLASS_Windows_Media_Core_FaceDetectionEffect_DEFINED
#define RUNTIMECLASS_Windows_Media_Core_FaceDetectionEffect_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Windows_Media_Core_FaceDetectionEffect[] = L"Windows.Media.Core.FaceDetectionEffect";
#endif
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Class Windows.Media.Core.FaceDetectionEffectDefinition
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * RuntimeClass can be activated.
 *   Type can be activated via RoActivateInstance starting with version 1.0 of the Windows.Foundation.UniversalApiContract API contract
 *
 * Class implements the following interfaces:
 *    Windows.Media.Effects.IVideoEffectDefinition ** Default Interface **
 *    Windows.Media.Core.IFaceDetectionEffectDefinition
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#ifndef RUNTIMECLASS_Windows_Media_Core_FaceDetectionEffectDefinition_DEFINED
#define RUNTIMECLASS_Windows_Media_Core_FaceDetectionEffectDefinition_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Windows_Media_Core_FaceDetectionEffectDefinition[] = L"Windows.Media.Core.FaceDetectionEffectDefinition";
#endif
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Class Windows.Media.Core.FaceDetectionEffectFrame
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Class implements the following interfaces:
 *    Windows.Media.Core.IFaceDetectionEffectFrame ** Default Interface **
 *    Windows.Media.IMediaFrame
 *    Windows.Foundation.IClosable
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#ifndef RUNTIMECLASS_Windows_Media_Core_FaceDetectionEffectFrame_DEFINED
#define RUNTIMECLASS_Windows_Media_Core_FaceDetectionEffectFrame_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Windows_Media_Core_FaceDetectionEffectFrame[] = L"Windows.Media.Core.FaceDetectionEffectFrame";
#endif
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Class Windows.Media.Core.HighDynamicRangeControl
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Class implements the following interfaces:
 *    Windows.Media.Core.IHighDynamicRangeControl ** Default Interface **
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#ifndef RUNTIMECLASS_Windows_Media_Core_HighDynamicRangeControl_DEFINED
#define RUNTIMECLASS_Windows_Media_Core_HighDynamicRangeControl_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Windows_Media_Core_HighDynamicRangeControl[] = L"Windows.Media.Core.HighDynamicRangeControl";
#endif
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Class Windows.Media.Core.HighDynamicRangeOutput
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Class implements the following interfaces:
 *    Windows.Media.Core.IHighDynamicRangeOutput ** Default Interface **
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#ifndef RUNTIMECLASS_Windows_Media_Core_HighDynamicRangeOutput_DEFINED
#define RUNTIMECLASS_Windows_Media_Core_HighDynamicRangeOutput_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Windows_Media_Core_HighDynamicRangeOutput[] = L"Windows.Media.Core.HighDynamicRangeOutput";
#endif
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Class Windows.Media.Core.ImageCue
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 4.0
 *
 * RuntimeClass can be activated.
 *   Type can be activated via RoActivateInstance starting with version 4.0 of the Windows.Foundation.UniversalApiContract API contract
 *
 * Class implements the following interfaces:
 *    Windows.Media.Core.IImageCue ** Default Interface **
 *    Windows.Media.Core.IMediaCue
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x40000
#ifndef RUNTIMECLASS_Windows_Media_Core_ImageCue_DEFINED
#define RUNTIMECLASS_Windows_Media_Core_ImageCue_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Windows_Media_Core_ImageCue[] = L"Windows.Media.Core.ImageCue";
#endif
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x40000

/*
 *
 * Class Windows.Media.Core.InitializeMediaStreamSourceRequestedEventArgs
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 5.0
 *
 * Class implements the following interfaces:
 *    Windows.Media.Core.IInitializeMediaStreamSourceRequestedEventArgs ** Default Interface **
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x50000
#ifndef RUNTIMECLASS_Windows_Media_Core_InitializeMediaStreamSourceRequestedEventArgs_DEFINED
#define RUNTIMECLASS_Windows_Media_Core_InitializeMediaStreamSourceRequestedEventArgs_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Windows_Media_Core_InitializeMediaStreamSourceRequestedEventArgs[] = L"Windows.Media.Core.InitializeMediaStreamSourceRequestedEventArgs";
#endif
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x50000

/*
 *
 * Class Windows.Media.Core.LowLightFusion
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 5.0
 *
 * RuntimeClass contains static methods.
 *   Static Methods exist on the Windows.Media.Core.ILowLightFusionStatics interface starting with version 5.0 of the Windows.Foundation.UniversalApiContract API contract
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x50000
#ifndef RUNTIMECLASS_Windows_Media_Core_LowLightFusion_DEFINED
#define RUNTIMECLASS_Windows_Media_Core_LowLightFusion_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Windows_Media_Core_LowLightFusion[] = L"Windows.Media.Core.LowLightFusion";
#endif
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x50000

/*
 *
 * Class Windows.Media.Core.LowLightFusionResult
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 5.0
 *
 * Class implements the following interfaces:
 *    Windows.Media.Core.ILowLightFusionResult ** Default Interface **
 *    Windows.Foundation.IClosable
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x50000
#ifndef RUNTIMECLASS_Windows_Media_Core_LowLightFusionResult_DEFINED
#define RUNTIMECLASS_Windows_Media_Core_LowLightFusionResult_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Windows_Media_Core_LowLightFusionResult[] = L"Windows.Media.Core.LowLightFusionResult";
#endif
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x50000

/*
 *
 * Class Windows.Media.Core.MediaBinder
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 2.0
 *
 * RuntimeClass can be activated.
 *   Type can be activated via RoActivateInstance starting with version 2.0 of the Windows.Foundation.UniversalApiContract API contract
 *
 * Class implements the following interfaces:
 *    Windows.Media.Core.IMediaBinder ** Default Interface **
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x20000
#ifndef RUNTIMECLASS_Windows_Media_Core_MediaBinder_DEFINED
#define RUNTIMECLASS_Windows_Media_Core_MediaBinder_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Windows_Media_Core_MediaBinder[] = L"Windows.Media.Core.MediaBinder";
#endif
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x20000

/*
 *
 * Class Windows.Media.Core.MediaBindingEventArgs
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 2.0
 *
 * Class implements the following interfaces:
 *    Windows.Media.Core.IMediaBindingEventArgs ** Default Interface **
 *    Windows.Media.Core.IMediaBindingEventArgs2
 *    Windows.Media.Core.IMediaBindingEventArgs3
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x20000
#ifndef RUNTIMECLASS_Windows_Media_Core_MediaBindingEventArgs_DEFINED
#define RUNTIMECLASS_Windows_Media_Core_MediaBindingEventArgs_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Windows_Media_Core_MediaBindingEventArgs[] = L"Windows.Media.Core.MediaBindingEventArgs";
#endif
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x20000

/*
 *
 * Class Windows.Media.Core.MediaCueEventArgs
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Class implements the following interfaces:
 *    Windows.Media.Core.IMediaCueEventArgs ** Default Interface **
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#ifndef RUNTIMECLASS_Windows_Media_Core_MediaCueEventArgs_DEFINED
#define RUNTIMECLASS_Windows_Media_Core_MediaCueEventArgs_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Windows_Media_Core_MediaCueEventArgs[] = L"Windows.Media.Core.MediaCueEventArgs";
#endif
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Class Windows.Media.Core.MediaSource
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * RuntimeClass contains static methods.
 *   Static Methods exist on the Windows.Media.Core.IMediaSourceStatics interface starting with version 1.0 of the Windows.Foundation.UniversalApiContract API contract
 *   Static Methods exist on the Windows.Media.Core.IMediaSourceStatics2 interface starting with version 2.0 of the Windows.Foundation.UniversalApiContract API contract
 *   Static Methods exist on the Windows.Media.Core.IMediaSourceStatics4 interface starting with version 6.0 of the Windows.Foundation.UniversalApiContract API contract
 *   Static Methods exist on the Windows.Media.Core.IMediaSourceStatics3 interface starting with version 5.0 of the Windows.Foundation.UniversalApiContract API contract
 *
 * Class implements the following interfaces:
 *    Windows.Media.Core.IMediaSource2 ** Default Interface **
 *    Windows.Foundation.IClosable
 *    Windows.Media.Playback.IMediaPlaybackSource
 *    Windows.Media.Core.IMediaSource3
 *    Windows.Media.Core.IMediaSource4
 *    Windows.Media.Core.IMediaSource5
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#ifndef RUNTIMECLASS_Windows_Media_Core_MediaSource_DEFINED
#define RUNTIMECLASS_Windows_Media_Core_MediaSource_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Windows_Media_Core_MediaSource[] = L"Windows.Media.Core.MediaSource";
#endif
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Class Windows.Media.Core.MediaSourceAppServiceConnection
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 5.0
 *
 * RuntimeClass can be activated.
 *   Type can be activated via the Windows.Media.Core.IMediaSourceAppServiceConnectionFactory interface starting with version 5.0 of the Windows.Foundation.UniversalApiContract API contract
 *
 * Class implements the following interfaces:
 *    Windows.Media.Core.IMediaSourceAppServiceConnection ** Default Interface **
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x50000
#ifndef RUNTIMECLASS_Windows_Media_Core_MediaSourceAppServiceConnection_DEFINED
#define RUNTIMECLASS_Windows_Media_Core_MediaSourceAppServiceConnection_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Windows_Media_Core_MediaSourceAppServiceConnection[] = L"Windows.Media.Core.MediaSourceAppServiceConnection";
#endif
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x50000

/*
 *
 * Class Windows.Media.Core.MediaSourceError
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Class implements the following interfaces:
 *    Windows.Media.Core.IMediaSourceError ** Default Interface **
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#ifndef RUNTIMECLASS_Windows_Media_Core_MediaSourceError_DEFINED
#define RUNTIMECLASS_Windows_Media_Core_MediaSourceError_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Windows_Media_Core_MediaSourceError[] = L"Windows.Media.Core.MediaSourceError";
#endif
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Class Windows.Media.Core.MediaSourceOpenOperationCompletedEventArgs
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Class implements the following interfaces:
 *    Windows.Media.Core.IMediaSourceOpenOperationCompletedEventArgs ** Default Interface **
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#ifndef RUNTIMECLASS_Windows_Media_Core_MediaSourceOpenOperationCompletedEventArgs_DEFINED
#define RUNTIMECLASS_Windows_Media_Core_MediaSourceOpenOperationCompletedEventArgs_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Windows_Media_Core_MediaSourceOpenOperationCompletedEventArgs[] = L"Windows.Media.Core.MediaSourceOpenOperationCompletedEventArgs";
#endif
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Class Windows.Media.Core.MediaSourceStateChangedEventArgs
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 2.0
 *
 * Class implements the following interfaces:
 *    Windows.Media.Core.IMediaSourceStateChangedEventArgs ** Default Interface **
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x20000
#ifndef RUNTIMECLASS_Windows_Media_Core_MediaSourceStateChangedEventArgs_DEFINED
#define RUNTIMECLASS_Windows_Media_Core_MediaSourceStateChangedEventArgs_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Windows_Media_Core_MediaSourceStateChangedEventArgs[] = L"Windows.Media.Core.MediaSourceStateChangedEventArgs";
#endif
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x20000

/*
 *
 * Class Windows.Media.Core.MediaStreamSample
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * RuntimeClass contains static methods.
 *   Static Methods exist on the Windows.Media.Core.IMediaStreamSampleStatics2 interface starting with version 7.0 of the Windows.Foundation.UniversalApiContract API contract
 *   Static Methods exist on the Windows.Media.Core.IMediaStreamSampleStatics interface starting with version 1.0 of the Windows.Foundation.UniversalApiContract API contract
 *
 * Class implements the following interfaces:
 *    Windows.Media.Core.IMediaStreamSample ** Default Interface **
 *    Windows.Media.Core.IMediaStreamSample2
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#ifndef RUNTIMECLASS_Windows_Media_Core_MediaStreamSample_DEFINED
#define RUNTIMECLASS_Windows_Media_Core_MediaStreamSample_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Windows_Media_Core_MediaStreamSample[] = L"Windows.Media.Core.MediaStreamSample";
#endif
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Class Windows.Media.Core.MediaStreamSamplePropertySet
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Class implements the following interfaces:
 *    Windows.Foundation.Collections.IMap`2<Guid, Object> ** Default Interface **
 *    Windows.Foundation.Collections.IIterable`1<Windows.Foundation.Collections.IKeyValuePair`2<Guid, Object>>
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#ifndef RUNTIMECLASS_Windows_Media_Core_MediaStreamSamplePropertySet_DEFINED
#define RUNTIMECLASS_Windows_Media_Core_MediaStreamSamplePropertySet_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Windows_Media_Core_MediaStreamSamplePropertySet[] = L"Windows.Media.Core.MediaStreamSamplePropertySet";
#endif
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Class Windows.Media.Core.MediaStreamSampleProtectionProperties
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Class implements the following interfaces:
 *    Windows.Media.Core.IMediaStreamSampleProtectionProperties ** Default Interface **
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#ifndef RUNTIMECLASS_Windows_Media_Core_MediaStreamSampleProtectionProperties_DEFINED
#define RUNTIMECLASS_Windows_Media_Core_MediaStreamSampleProtectionProperties_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Windows_Media_Core_MediaStreamSampleProtectionProperties[] = L"Windows.Media.Core.MediaStreamSampleProtectionProperties";
#endif
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Class Windows.Media.Core.MediaStreamSource
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * RuntimeClass can be activated.
 *   Type can be activated via the Windows.Media.Core.IMediaStreamSourceFactory interface starting with version 1.0 of the Windows.Foundation.UniversalApiContract API contract
 *
 * Class implements the following interfaces:
 *    Windows.Media.Core.IMediaStreamSource ** Default Interface **
 *    Windows.Media.Core.IMediaSource
 *    Windows.Media.Core.IMediaStreamSource2
 *    Windows.Media.Core.IMediaStreamSource3
 *    Windows.Media.Core.IMediaStreamSource4
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#ifndef RUNTIMECLASS_Windows_Media_Core_MediaStreamSource_DEFINED
#define RUNTIMECLASS_Windows_Media_Core_MediaStreamSource_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Windows_Media_Core_MediaStreamSource[] = L"Windows.Media.Core.MediaStreamSource";
#endif
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Class Windows.Media.Core.MediaStreamSourceClosedEventArgs
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Class implements the following interfaces:
 *    Windows.Media.Core.IMediaStreamSourceClosedEventArgs ** Default Interface **
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#ifndef RUNTIMECLASS_Windows_Media_Core_MediaStreamSourceClosedEventArgs_DEFINED
#define RUNTIMECLASS_Windows_Media_Core_MediaStreamSourceClosedEventArgs_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Windows_Media_Core_MediaStreamSourceClosedEventArgs[] = L"Windows.Media.Core.MediaStreamSourceClosedEventArgs";
#endif
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Class Windows.Media.Core.MediaStreamSourceClosedRequest
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Class implements the following interfaces:
 *    Windows.Media.Core.IMediaStreamSourceClosedRequest ** Default Interface **
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#ifndef RUNTIMECLASS_Windows_Media_Core_MediaStreamSourceClosedRequest_DEFINED
#define RUNTIMECLASS_Windows_Media_Core_MediaStreamSourceClosedRequest_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Windows_Media_Core_MediaStreamSourceClosedRequest[] = L"Windows.Media.Core.MediaStreamSourceClosedRequest";
#endif
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Class Windows.Media.Core.MediaStreamSourceSampleRenderedEventArgs
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 3.0
 *
 * Class implements the following interfaces:
 *    Windows.Media.Core.IMediaStreamSourceSampleRenderedEventArgs ** Default Interface **
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x30000
#ifndef RUNTIMECLASS_Windows_Media_Core_MediaStreamSourceSampleRenderedEventArgs_DEFINED
#define RUNTIMECLASS_Windows_Media_Core_MediaStreamSourceSampleRenderedEventArgs_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Windows_Media_Core_MediaStreamSourceSampleRenderedEventArgs[] = L"Windows.Media.Core.MediaStreamSourceSampleRenderedEventArgs";
#endif
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x30000

/*
 *
 * Class Windows.Media.Core.MediaStreamSourceSampleRequest
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Class implements the following interfaces:
 *    Windows.Media.Core.IMediaStreamSourceSampleRequest ** Default Interface **
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#ifndef RUNTIMECLASS_Windows_Media_Core_MediaStreamSourceSampleRequest_DEFINED
#define RUNTIMECLASS_Windows_Media_Core_MediaStreamSourceSampleRequest_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Windows_Media_Core_MediaStreamSourceSampleRequest[] = L"Windows.Media.Core.MediaStreamSourceSampleRequest";
#endif
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Class Windows.Media.Core.MediaStreamSourceSampleRequestDeferral
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Class implements the following interfaces:
 *    Windows.Media.Core.IMediaStreamSourceSampleRequestDeferral ** Default Interface **
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#ifndef RUNTIMECLASS_Windows_Media_Core_MediaStreamSourceSampleRequestDeferral_DEFINED
#define RUNTIMECLASS_Windows_Media_Core_MediaStreamSourceSampleRequestDeferral_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Windows_Media_Core_MediaStreamSourceSampleRequestDeferral[] = L"Windows.Media.Core.MediaStreamSourceSampleRequestDeferral";
#endif
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Class Windows.Media.Core.MediaStreamSourceSampleRequestedEventArgs
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Class implements the following interfaces:
 *    Windows.Media.Core.IMediaStreamSourceSampleRequestedEventArgs ** Default Interface **
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#ifndef RUNTIMECLASS_Windows_Media_Core_MediaStreamSourceSampleRequestedEventArgs_DEFINED
#define RUNTIMECLASS_Windows_Media_Core_MediaStreamSourceSampleRequestedEventArgs_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Windows_Media_Core_MediaStreamSourceSampleRequestedEventArgs[] = L"Windows.Media.Core.MediaStreamSourceSampleRequestedEventArgs";
#endif
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Class Windows.Media.Core.MediaStreamSourceStartingEventArgs
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Class implements the following interfaces:
 *    Windows.Media.Core.IMediaStreamSourceStartingEventArgs ** Default Interface **
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#ifndef RUNTIMECLASS_Windows_Media_Core_MediaStreamSourceStartingEventArgs_DEFINED
#define RUNTIMECLASS_Windows_Media_Core_MediaStreamSourceStartingEventArgs_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Windows_Media_Core_MediaStreamSourceStartingEventArgs[] = L"Windows.Media.Core.MediaStreamSourceStartingEventArgs";
#endif
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Class Windows.Media.Core.MediaStreamSourceStartingRequest
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Class implements the following interfaces:
 *    Windows.Media.Core.IMediaStreamSourceStartingRequest ** Default Interface **
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#ifndef RUNTIMECLASS_Windows_Media_Core_MediaStreamSourceStartingRequest_DEFINED
#define RUNTIMECLASS_Windows_Media_Core_MediaStreamSourceStartingRequest_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Windows_Media_Core_MediaStreamSourceStartingRequest[] = L"Windows.Media.Core.MediaStreamSourceStartingRequest";
#endif
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Class Windows.Media.Core.MediaStreamSourceStartingRequestDeferral
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Class implements the following interfaces:
 *    Windows.Media.Core.IMediaStreamSourceStartingRequestDeferral ** Default Interface **
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#ifndef RUNTIMECLASS_Windows_Media_Core_MediaStreamSourceStartingRequestDeferral_DEFINED
#define RUNTIMECLASS_Windows_Media_Core_MediaStreamSourceStartingRequestDeferral_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Windows_Media_Core_MediaStreamSourceStartingRequestDeferral[] = L"Windows.Media.Core.MediaStreamSourceStartingRequestDeferral";
#endif
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Class Windows.Media.Core.MediaStreamSourceSwitchStreamsRequest
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Class implements the following interfaces:
 *    Windows.Media.Core.IMediaStreamSourceSwitchStreamsRequest ** Default Interface **
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#ifndef RUNTIMECLASS_Windows_Media_Core_MediaStreamSourceSwitchStreamsRequest_DEFINED
#define RUNTIMECLASS_Windows_Media_Core_MediaStreamSourceSwitchStreamsRequest_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Windows_Media_Core_MediaStreamSourceSwitchStreamsRequest[] = L"Windows.Media.Core.MediaStreamSourceSwitchStreamsRequest";
#endif
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Class Windows.Media.Core.MediaStreamSourceSwitchStreamsRequestDeferral
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Class implements the following interfaces:
 *    Windows.Media.Core.IMediaStreamSourceSwitchStreamsRequestDeferral ** Default Interface **
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#ifndef RUNTIMECLASS_Windows_Media_Core_MediaStreamSourceSwitchStreamsRequestDeferral_DEFINED
#define RUNTIMECLASS_Windows_Media_Core_MediaStreamSourceSwitchStreamsRequestDeferral_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Windows_Media_Core_MediaStreamSourceSwitchStreamsRequestDeferral[] = L"Windows.Media.Core.MediaStreamSourceSwitchStreamsRequestDeferral";
#endif
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Class Windows.Media.Core.MediaStreamSourceSwitchStreamsRequestedEventArgs
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Class implements the following interfaces:
 *    Windows.Media.Core.IMediaStreamSourceSwitchStreamsRequestedEventArgs ** Default Interface **
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#ifndef RUNTIMECLASS_Windows_Media_Core_MediaStreamSourceSwitchStreamsRequestedEventArgs_DEFINED
#define RUNTIMECLASS_Windows_Media_Core_MediaStreamSourceSwitchStreamsRequestedEventArgs_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Windows_Media_Core_MediaStreamSourceSwitchStreamsRequestedEventArgs[] = L"Windows.Media.Core.MediaStreamSourceSwitchStreamsRequestedEventArgs";
#endif
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Class Windows.Media.Core.MseSourceBuffer
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Class implements the following interfaces:
 *    Windows.Media.Core.IMseSourceBuffer ** Default Interface **
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#ifndef RUNTIMECLASS_Windows_Media_Core_MseSourceBuffer_DEFINED
#define RUNTIMECLASS_Windows_Media_Core_MseSourceBuffer_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Windows_Media_Core_MseSourceBuffer[] = L"Windows.Media.Core.MseSourceBuffer";
#endif
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Class Windows.Media.Core.MseSourceBufferList
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Class implements the following interfaces:
 *    Windows.Media.Core.IMseSourceBufferList ** Default Interface **
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#ifndef RUNTIMECLASS_Windows_Media_Core_MseSourceBufferList_DEFINED
#define RUNTIMECLASS_Windows_Media_Core_MseSourceBufferList_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Windows_Media_Core_MseSourceBufferList[] = L"Windows.Media.Core.MseSourceBufferList";
#endif
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Class Windows.Media.Core.MseStreamSource
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * RuntimeClass can be activated.
 *   Type can be activated via RoActivateInstance starting with version 1.0 of the Windows.Foundation.UniversalApiContract API contract
 *
 * RuntimeClass contains static methods.
 *   Static Methods exist on the Windows.Media.Core.IMseStreamSourceStatics interface starting with version 1.0 of the Windows.Foundation.UniversalApiContract API contract
 *
 * Class implements the following interfaces:
 *    Windows.Media.Core.IMseStreamSource ** Default Interface **
 *    Windows.Media.Core.IMediaSource
 *    Windows.Media.Core.IMseStreamSource2
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#ifndef RUNTIMECLASS_Windows_Media_Core_MseStreamSource_DEFINED
#define RUNTIMECLASS_Windows_Media_Core_MseStreamSource_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Windows_Media_Core_MseStreamSource[] = L"Windows.Media.Core.MseStreamSource";
#endif
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Class Windows.Media.Core.SceneAnalysisEffect
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Class implements the following interfaces:
 *    Windows.Media.Core.ISceneAnalysisEffect ** Default Interface **
 *    Windows.Media.IMediaExtension
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#ifndef RUNTIMECLASS_Windows_Media_Core_SceneAnalysisEffect_DEFINED
#define RUNTIMECLASS_Windows_Media_Core_SceneAnalysisEffect_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Windows_Media_Core_SceneAnalysisEffect[] = L"Windows.Media.Core.SceneAnalysisEffect";
#endif
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Class Windows.Media.Core.SceneAnalysisEffectDefinition
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * RuntimeClass can be activated.
 *   Type can be activated via RoActivateInstance starting with version 1.0 of the Windows.Foundation.UniversalApiContract API contract
 *
 * Class implements the following interfaces:
 *    Windows.Media.Effects.IVideoEffectDefinition ** Default Interface **
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#ifndef RUNTIMECLASS_Windows_Media_Core_SceneAnalysisEffectDefinition_DEFINED
#define RUNTIMECLASS_Windows_Media_Core_SceneAnalysisEffectDefinition_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Windows_Media_Core_SceneAnalysisEffectDefinition[] = L"Windows.Media.Core.SceneAnalysisEffectDefinition";
#endif
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Class Windows.Media.Core.SceneAnalysisEffectFrame
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Class implements the following interfaces:
 *    Windows.Media.Core.ISceneAnalysisEffectFrame ** Default Interface **
 *    Windows.Media.IMediaFrame
 *    Windows.Foundation.IClosable
 *    Windows.Media.Core.ISceneAnalysisEffectFrame2
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#ifndef RUNTIMECLASS_Windows_Media_Core_SceneAnalysisEffectFrame_DEFINED
#define RUNTIMECLASS_Windows_Media_Core_SceneAnalysisEffectFrame_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Windows_Media_Core_SceneAnalysisEffectFrame[] = L"Windows.Media.Core.SceneAnalysisEffectFrame";
#endif
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Class Windows.Media.Core.SceneAnalyzedEventArgs
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Class implements the following interfaces:
 *    Windows.Media.Core.ISceneAnalyzedEventArgs ** Default Interface **
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#ifndef RUNTIMECLASS_Windows_Media_Core_SceneAnalyzedEventArgs_DEFINED
#define RUNTIMECLASS_Windows_Media_Core_SceneAnalyzedEventArgs_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Windows_Media_Core_SceneAnalyzedEventArgs[] = L"Windows.Media.Core.SceneAnalyzedEventArgs";
#endif
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Class Windows.Media.Core.SpeechCue
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 4.0
 *
 * RuntimeClass can be activated.
 *   Type can be activated via RoActivateInstance starting with version 4.0 of the Windows.Foundation.UniversalApiContract API contract
 *
 * Class implements the following interfaces:
 *    Windows.Media.Core.ISpeechCue ** Default Interface **
 *    Windows.Media.Core.IMediaCue
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x40000
#ifndef RUNTIMECLASS_Windows_Media_Core_SpeechCue_DEFINED
#define RUNTIMECLASS_Windows_Media_Core_SpeechCue_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Windows_Media_Core_SpeechCue[] = L"Windows.Media.Core.SpeechCue";
#endif
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x40000

/*
 *
 * Class Windows.Media.Core.TimedMetadataStreamDescriptor
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 6.0
 *
 * RuntimeClass can be activated.
 *   Type can be activated via the Windows.Media.Core.ITimedMetadataStreamDescriptorFactory interface starting with version 6.0 of the Windows.Foundation.UniversalApiContract API contract
 *
 * Class implements the following interfaces:
 *    Windows.Media.Core.ITimedMetadataStreamDescriptor
 *    Windows.Media.Core.IMediaStreamDescriptor2
 *    Windows.Media.Core.IMediaStreamDescriptor ** Default Interface **
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x60000
#ifndef RUNTIMECLASS_Windows_Media_Core_TimedMetadataStreamDescriptor_DEFINED
#define RUNTIMECLASS_Windows_Media_Core_TimedMetadataStreamDescriptor_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Windows_Media_Core_TimedMetadataStreamDescriptor[] = L"Windows.Media.Core.TimedMetadataStreamDescriptor";
#endif
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x60000

/*
 *
 * Class Windows.Media.Core.TimedMetadataTrack
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * RuntimeClass can be activated.
 *   Type can be activated via the Windows.Media.Core.ITimedMetadataTrackFactory interface starting with version 1.0 of the Windows.Foundation.UniversalApiContract API contract
 *
 * Class implements the following interfaces:
 *    Windows.Media.Core.ITimedMetadataTrack ** Default Interface **
 *    Windows.Media.Core.IMediaTrack
 *    Windows.Media.Core.ITimedMetadataTrack2
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#ifndef RUNTIMECLASS_Windows_Media_Core_TimedMetadataTrack_DEFINED
#define RUNTIMECLASS_Windows_Media_Core_TimedMetadataTrack_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Windows_Media_Core_TimedMetadataTrack[] = L"Windows.Media.Core.TimedMetadataTrack";
#endif
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Class Windows.Media.Core.TimedMetadataTrackError
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Class implements the following interfaces:
 *    Windows.Media.Core.ITimedMetadataTrackError ** Default Interface **
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#ifndef RUNTIMECLASS_Windows_Media_Core_TimedMetadataTrackError_DEFINED
#define RUNTIMECLASS_Windows_Media_Core_TimedMetadataTrackError_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Windows_Media_Core_TimedMetadataTrackError[] = L"Windows.Media.Core.TimedMetadataTrackError";
#endif
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Class Windows.Media.Core.TimedMetadataTrackFailedEventArgs
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Class implements the following interfaces:
 *    Windows.Media.Core.ITimedMetadataTrackFailedEventArgs ** Default Interface **
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#ifndef RUNTIMECLASS_Windows_Media_Core_TimedMetadataTrackFailedEventArgs_DEFINED
#define RUNTIMECLASS_Windows_Media_Core_TimedMetadataTrackFailedEventArgs_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Windows_Media_Core_TimedMetadataTrackFailedEventArgs[] = L"Windows.Media.Core.TimedMetadataTrackFailedEventArgs";
#endif
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Class Windows.Media.Core.TimedTextCue
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * RuntimeClass can be activated.
 *   Type can be activated via RoActivateInstance starting with version 1.0 of the Windows.Foundation.UniversalApiContract API contract
 *
 * Class implements the following interfaces:
 *    Windows.Media.Core.ITimedTextCue ** Default Interface **
 *    Windows.Media.Core.IMediaCue
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#ifndef RUNTIMECLASS_Windows_Media_Core_TimedTextCue_DEFINED
#define RUNTIMECLASS_Windows_Media_Core_TimedTextCue_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Windows_Media_Core_TimedTextCue[] = L"Windows.Media.Core.TimedTextCue";
#endif
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Class Windows.Media.Core.TimedTextLine
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * RuntimeClass can be activated.
 *   Type can be activated via RoActivateInstance starting with version 1.0 of the Windows.Foundation.UniversalApiContract API contract
 *
 * Class implements the following interfaces:
 *    Windows.Media.Core.ITimedTextLine ** Default Interface **
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#ifndef RUNTIMECLASS_Windows_Media_Core_TimedTextLine_DEFINED
#define RUNTIMECLASS_Windows_Media_Core_TimedTextLine_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Windows_Media_Core_TimedTextLine[] = L"Windows.Media.Core.TimedTextLine";
#endif
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Class Windows.Media.Core.TimedTextRegion
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * RuntimeClass can be activated.
 *   Type can be activated via RoActivateInstance starting with version 1.0 of the Windows.Foundation.UniversalApiContract API contract
 *
 * Class implements the following interfaces:
 *    Windows.Media.Core.ITimedTextRegion ** Default Interface **
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#ifndef RUNTIMECLASS_Windows_Media_Core_TimedTextRegion_DEFINED
#define RUNTIMECLASS_Windows_Media_Core_TimedTextRegion_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Windows_Media_Core_TimedTextRegion[] = L"Windows.Media.Core.TimedTextRegion";
#endif
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Class Windows.Media.Core.TimedTextSource
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * RuntimeClass contains static methods.
 *   Static Methods exist on the Windows.Media.Core.ITimedTextSourceStatics2 interface starting with version 4.0 of the Windows.Foundation.UniversalApiContract API contract
 *   Static Methods exist on the Windows.Media.Core.ITimedTextSourceStatics interface starting with version 1.0 of the Windows.Foundation.UniversalApiContract API contract
 *
 * Class implements the following interfaces:
 *    Windows.Media.Core.ITimedTextSource ** Default Interface **
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#ifndef RUNTIMECLASS_Windows_Media_Core_TimedTextSource_DEFINED
#define RUNTIMECLASS_Windows_Media_Core_TimedTextSource_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Windows_Media_Core_TimedTextSource[] = L"Windows.Media.Core.TimedTextSource";
#endif
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Class Windows.Media.Core.TimedTextSourceResolveResultEventArgs
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Class implements the following interfaces:
 *    Windows.Media.Core.ITimedTextSourceResolveResultEventArgs ** Default Interface **
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#ifndef RUNTIMECLASS_Windows_Media_Core_TimedTextSourceResolveResultEventArgs_DEFINED
#define RUNTIMECLASS_Windows_Media_Core_TimedTextSourceResolveResultEventArgs_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Windows_Media_Core_TimedTextSourceResolveResultEventArgs[] = L"Windows.Media.Core.TimedTextSourceResolveResultEventArgs";
#endif
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Class Windows.Media.Core.TimedTextStyle
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * RuntimeClass can be activated.
 *   Type can be activated via RoActivateInstance starting with version 1.0 of the Windows.Foundation.UniversalApiContract API contract
 *
 * Class implements the following interfaces:
 *    Windows.Media.Core.ITimedTextStyle ** Default Interface **
 *    Windows.Media.Core.ITimedTextStyle2
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#ifndef RUNTIMECLASS_Windows_Media_Core_TimedTextStyle_DEFINED
#define RUNTIMECLASS_Windows_Media_Core_TimedTextStyle_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Windows_Media_Core_TimedTextStyle[] = L"Windows.Media.Core.TimedTextStyle";
#endif
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Class Windows.Media.Core.TimedTextSubformat
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * RuntimeClass can be activated.
 *   Type can be activated via RoActivateInstance starting with version 1.0 of the Windows.Foundation.UniversalApiContract API contract
 *
 * Class implements the following interfaces:
 *    Windows.Media.Core.ITimedTextSubformat ** Default Interface **
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#ifndef RUNTIMECLASS_Windows_Media_Core_TimedTextSubformat_DEFINED
#define RUNTIMECLASS_Windows_Media_Core_TimedTextSubformat_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Windows_Media_Core_TimedTextSubformat[] = L"Windows.Media.Core.TimedTextSubformat";
#endif
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Class Windows.Media.Core.VideoStabilizationEffect
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Class implements the following interfaces:
 *    Windows.Media.Core.IVideoStabilizationEffect ** Default Interface **
 *    Windows.Media.IMediaExtension
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#ifndef RUNTIMECLASS_Windows_Media_Core_VideoStabilizationEffect_DEFINED
#define RUNTIMECLASS_Windows_Media_Core_VideoStabilizationEffect_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Windows_Media_Core_VideoStabilizationEffect[] = L"Windows.Media.Core.VideoStabilizationEffect";
#endif
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Class Windows.Media.Core.VideoStabilizationEffectDefinition
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * RuntimeClass can be activated.
 *   Type can be activated via RoActivateInstance starting with version 1.0 of the Windows.Foundation.UniversalApiContract API contract
 *
 * Class implements the following interfaces:
 *    Windows.Media.Effects.IVideoEffectDefinition ** Default Interface **
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#ifndef RUNTIMECLASS_Windows_Media_Core_VideoStabilizationEffectDefinition_DEFINED
#define RUNTIMECLASS_Windows_Media_Core_VideoStabilizationEffectDefinition_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Windows_Media_Core_VideoStabilizationEffectDefinition[] = L"Windows.Media.Core.VideoStabilizationEffectDefinition";
#endif
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Class Windows.Media.Core.VideoStabilizationEffectEnabledChangedEventArgs
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Class implements the following interfaces:
 *    Windows.Media.Core.IVideoStabilizationEffectEnabledChangedEventArgs ** Default Interface **
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#ifndef RUNTIMECLASS_Windows_Media_Core_VideoStabilizationEffectEnabledChangedEventArgs_DEFINED
#define RUNTIMECLASS_Windows_Media_Core_VideoStabilizationEffectEnabledChangedEventArgs_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Windows_Media_Core_VideoStabilizationEffectEnabledChangedEventArgs[] = L"Windows.Media.Core.VideoStabilizationEffectEnabledChangedEventArgs";
#endif
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Class Windows.Media.Core.VideoStreamDescriptor
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * RuntimeClass can be activated.
 *   Type can be activated via the Windows.Media.Core.IVideoStreamDescriptorFactory interface starting with version 1.0 of the Windows.Foundation.UniversalApiContract API contract
 *
 * Class implements the following interfaces:
 *    Windows.Media.Core.IVideoStreamDescriptor ** Default Interface **
 *    Windows.Media.Core.IMediaStreamDescriptor
 *    Windows.Media.Core.IMediaStreamDescriptor2
 *    Windows.Media.Core.IVideoStreamDescriptor2
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#ifndef RUNTIMECLASS_Windows_Media_Core_VideoStreamDescriptor_DEFINED
#define RUNTIMECLASS_Windows_Media_Core_VideoStreamDescriptor_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Windows_Media_Core_VideoStreamDescriptor[] = L"Windows.Media.Core.VideoStreamDescriptor";
#endif
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Class Windows.Media.Core.VideoTrack
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Class implements the following interfaces:
 *    Windows.Media.Core.IMediaTrack ** Default Interface **
 *    Windows.Media.Core.IVideoTrack
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#ifndef RUNTIMECLASS_Windows_Media_Core_VideoTrack_DEFINED
#define RUNTIMECLASS_Windows_Media_Core_VideoTrack_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Windows_Media_Core_VideoTrack[] = L"Windows.Media.Core.VideoTrack";
#endif
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Class Windows.Media.Core.VideoTrackOpenFailedEventArgs
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 3.0
 *
 * Class implements the following interfaces:
 *    Windows.Media.Core.IVideoTrackOpenFailedEventArgs ** Default Interface **
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x30000
#ifndef RUNTIMECLASS_Windows_Media_Core_VideoTrackOpenFailedEventArgs_DEFINED
#define RUNTIMECLASS_Windows_Media_Core_VideoTrackOpenFailedEventArgs_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Windows_Media_Core_VideoTrackOpenFailedEventArgs[] = L"Windows.Media.Core.VideoTrackOpenFailedEventArgs";
#endif
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x30000

/*
 *
 * Class Windows.Media.Core.VideoTrackSupportInfo
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 3.0
 *
 * Class implements the following interfaces:
 *    Windows.Media.Core.IVideoTrackSupportInfo ** Default Interface **
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x30000
#ifndef RUNTIMECLASS_Windows_Media_Core_VideoTrackSupportInfo_DEFINED
#define RUNTIMECLASS_Windows_Media_Core_VideoTrackSupportInfo_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Windows_Media_Core_VideoTrackSupportInfo[] = L"Windows.Media.Core.VideoTrackSupportInfo";
#endif
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x30000

#else // !defined(__cplusplus)
/* Forward Declarations */
#ifndef ____x_ABI_CWindows_CMedia_CCore_CIAudioStreamDescriptor_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CCore_CIAudioStreamDescriptor_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CMedia_CCore_CIAudioStreamDescriptor __x_ABI_CWindows_CMedia_CCore_CIAudioStreamDescriptor;

#endif // ____x_ABI_CWindows_CMedia_CCore_CIAudioStreamDescriptor_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CCore_CIAudioStreamDescriptor2_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CCore_CIAudioStreamDescriptor2_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CMedia_CCore_CIAudioStreamDescriptor2 __x_ABI_CWindows_CMedia_CCore_CIAudioStreamDescriptor2;

#endif // ____x_ABI_CWindows_CMedia_CCore_CIAudioStreamDescriptor2_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CCore_CIAudioStreamDescriptor3_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CCore_CIAudioStreamDescriptor3_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CMedia_CCore_CIAudioStreamDescriptor3 __x_ABI_CWindows_CMedia_CCore_CIAudioStreamDescriptor3;

#endif // ____x_ABI_CWindows_CMedia_CCore_CIAudioStreamDescriptor3_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CCore_CIAudioStreamDescriptorFactory_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CCore_CIAudioStreamDescriptorFactory_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CMedia_CCore_CIAudioStreamDescriptorFactory __x_ABI_CWindows_CMedia_CCore_CIAudioStreamDescriptorFactory;

#endif // ____x_ABI_CWindows_CMedia_CCore_CIAudioStreamDescriptorFactory_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CCore_CIAudioTrack_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CCore_CIAudioTrack_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CMedia_CCore_CIAudioTrack __x_ABI_CWindows_CMedia_CCore_CIAudioTrack;

#endif // ____x_ABI_CWindows_CMedia_CCore_CIAudioTrack_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CCore_CIAudioTrackOpenFailedEventArgs_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CCore_CIAudioTrackOpenFailedEventArgs_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CMedia_CCore_CIAudioTrackOpenFailedEventArgs __x_ABI_CWindows_CMedia_CCore_CIAudioTrackOpenFailedEventArgs;

#endif // ____x_ABI_CWindows_CMedia_CCore_CIAudioTrackOpenFailedEventArgs_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CCore_CIAudioTrackSupportInfo_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CCore_CIAudioTrackSupportInfo_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CMedia_CCore_CIAudioTrackSupportInfo __x_ABI_CWindows_CMedia_CCore_CIAudioTrackSupportInfo;

#endif // ____x_ABI_CWindows_CMedia_CCore_CIAudioTrackSupportInfo_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CCore_CIChapterCue_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CCore_CIChapterCue_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CMedia_CCore_CIChapterCue __x_ABI_CWindows_CMedia_CCore_CIChapterCue;

#endif // ____x_ABI_CWindows_CMedia_CCore_CIChapterCue_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CCore_CICodecInfo_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CCore_CICodecInfo_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CMedia_CCore_CICodecInfo __x_ABI_CWindows_CMedia_CCore_CICodecInfo;

#endif // ____x_ABI_CWindows_CMedia_CCore_CICodecInfo_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CCore_CICodecQuery_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CCore_CICodecQuery_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CMedia_CCore_CICodecQuery __x_ABI_CWindows_CMedia_CCore_CICodecQuery;

#endif // ____x_ABI_CWindows_CMedia_CCore_CICodecQuery_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CCore_CICodecSubtypesStatics_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CCore_CICodecSubtypesStatics_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CMedia_CCore_CICodecSubtypesStatics __x_ABI_CWindows_CMedia_CCore_CICodecSubtypesStatics;

#endif // ____x_ABI_CWindows_CMedia_CCore_CICodecSubtypesStatics_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CCore_CIDataCue_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CCore_CIDataCue_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CMedia_CCore_CIDataCue __x_ABI_CWindows_CMedia_CCore_CIDataCue;

#endif // ____x_ABI_CWindows_CMedia_CCore_CIDataCue_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CCore_CIDataCue2_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CCore_CIDataCue2_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CMedia_CCore_CIDataCue2 __x_ABI_CWindows_CMedia_CCore_CIDataCue2;

#endif // ____x_ABI_CWindows_CMedia_CCore_CIDataCue2_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CCore_CIFaceDetectedEventArgs_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CCore_CIFaceDetectedEventArgs_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CMedia_CCore_CIFaceDetectedEventArgs __x_ABI_CWindows_CMedia_CCore_CIFaceDetectedEventArgs;

#endif // ____x_ABI_CWindows_CMedia_CCore_CIFaceDetectedEventArgs_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CCore_CIFaceDetectionEffect_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CCore_CIFaceDetectionEffect_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CMedia_CCore_CIFaceDetectionEffect __x_ABI_CWindows_CMedia_CCore_CIFaceDetectionEffect;

#endif // ____x_ABI_CWindows_CMedia_CCore_CIFaceDetectionEffect_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CCore_CIFaceDetectionEffectDefinition_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CCore_CIFaceDetectionEffectDefinition_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CMedia_CCore_CIFaceDetectionEffectDefinition __x_ABI_CWindows_CMedia_CCore_CIFaceDetectionEffectDefinition;

#endif // ____x_ABI_CWindows_CMedia_CCore_CIFaceDetectionEffectDefinition_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CCore_CIFaceDetectionEffectFrame_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CCore_CIFaceDetectionEffectFrame_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CMedia_CCore_CIFaceDetectionEffectFrame __x_ABI_CWindows_CMedia_CCore_CIFaceDetectionEffectFrame;

#endif // ____x_ABI_CWindows_CMedia_CCore_CIFaceDetectionEffectFrame_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CCore_CIHighDynamicRangeControl_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CCore_CIHighDynamicRangeControl_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CMedia_CCore_CIHighDynamicRangeControl __x_ABI_CWindows_CMedia_CCore_CIHighDynamicRangeControl;

#endif // ____x_ABI_CWindows_CMedia_CCore_CIHighDynamicRangeControl_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CCore_CIHighDynamicRangeOutput_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CCore_CIHighDynamicRangeOutput_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CMedia_CCore_CIHighDynamicRangeOutput __x_ABI_CWindows_CMedia_CCore_CIHighDynamicRangeOutput;

#endif // ____x_ABI_CWindows_CMedia_CCore_CIHighDynamicRangeOutput_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CCore_CIImageCue_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CCore_CIImageCue_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CMedia_CCore_CIImageCue __x_ABI_CWindows_CMedia_CCore_CIImageCue;

#endif // ____x_ABI_CWindows_CMedia_CCore_CIImageCue_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CCore_CIInitializeMediaStreamSourceRequestedEventArgs_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CCore_CIInitializeMediaStreamSourceRequestedEventArgs_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CMedia_CCore_CIInitializeMediaStreamSourceRequestedEventArgs __x_ABI_CWindows_CMedia_CCore_CIInitializeMediaStreamSourceRequestedEventArgs;

#endif // ____x_ABI_CWindows_CMedia_CCore_CIInitializeMediaStreamSourceRequestedEventArgs_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CCore_CILowLightFusionResult_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CCore_CILowLightFusionResult_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CMedia_CCore_CILowLightFusionResult __x_ABI_CWindows_CMedia_CCore_CILowLightFusionResult;

#endif // ____x_ABI_CWindows_CMedia_CCore_CILowLightFusionResult_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CCore_CILowLightFusionStatics_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CCore_CILowLightFusionStatics_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CMedia_CCore_CILowLightFusionStatics __x_ABI_CWindows_CMedia_CCore_CILowLightFusionStatics;

#endif // ____x_ABI_CWindows_CMedia_CCore_CILowLightFusionStatics_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CCore_CIMediaBinder_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CCore_CIMediaBinder_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CMedia_CCore_CIMediaBinder __x_ABI_CWindows_CMedia_CCore_CIMediaBinder;

#endif // ____x_ABI_CWindows_CMedia_CCore_CIMediaBinder_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CCore_CIMediaBindingEventArgs_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CCore_CIMediaBindingEventArgs_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CMedia_CCore_CIMediaBindingEventArgs __x_ABI_CWindows_CMedia_CCore_CIMediaBindingEventArgs;

#endif // ____x_ABI_CWindows_CMedia_CCore_CIMediaBindingEventArgs_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CCore_CIMediaBindingEventArgs2_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CCore_CIMediaBindingEventArgs2_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CMedia_CCore_CIMediaBindingEventArgs2 __x_ABI_CWindows_CMedia_CCore_CIMediaBindingEventArgs2;

#endif // ____x_ABI_CWindows_CMedia_CCore_CIMediaBindingEventArgs2_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CCore_CIMediaBindingEventArgs3_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CCore_CIMediaBindingEventArgs3_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CMedia_CCore_CIMediaBindingEventArgs3 __x_ABI_CWindows_CMedia_CCore_CIMediaBindingEventArgs3;

#endif // ____x_ABI_CWindows_CMedia_CCore_CIMediaBindingEventArgs3_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CCore_CIMediaCue_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CCore_CIMediaCue_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CMedia_CCore_CIMediaCue __x_ABI_CWindows_CMedia_CCore_CIMediaCue;

#endif // ____x_ABI_CWindows_CMedia_CCore_CIMediaCue_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CCore_CIMediaCueEventArgs_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CCore_CIMediaCueEventArgs_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CMedia_CCore_CIMediaCueEventArgs __x_ABI_CWindows_CMedia_CCore_CIMediaCueEventArgs;

#endif // ____x_ABI_CWindows_CMedia_CCore_CIMediaCueEventArgs_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CCore_CIMediaSource_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CCore_CIMediaSource_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CMedia_CCore_CIMediaSource __x_ABI_CWindows_CMedia_CCore_CIMediaSource;

#endif // ____x_ABI_CWindows_CMedia_CCore_CIMediaSource_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CCore_CIMediaSource2_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CCore_CIMediaSource2_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CMedia_CCore_CIMediaSource2 __x_ABI_CWindows_CMedia_CCore_CIMediaSource2;

#endif // ____x_ABI_CWindows_CMedia_CCore_CIMediaSource2_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CCore_CIMediaSource3_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CCore_CIMediaSource3_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CMedia_CCore_CIMediaSource3 __x_ABI_CWindows_CMedia_CCore_CIMediaSource3;

#endif // ____x_ABI_CWindows_CMedia_CCore_CIMediaSource3_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CCore_CIMediaSource4_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CCore_CIMediaSource4_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CMedia_CCore_CIMediaSource4 __x_ABI_CWindows_CMedia_CCore_CIMediaSource4;

#endif // ____x_ABI_CWindows_CMedia_CCore_CIMediaSource4_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CCore_CIMediaSource5_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CCore_CIMediaSource5_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CMedia_CCore_CIMediaSource5 __x_ABI_CWindows_CMedia_CCore_CIMediaSource5;

#endif // ____x_ABI_CWindows_CMedia_CCore_CIMediaSource5_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CCore_CIMediaSourceAppServiceConnection_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CCore_CIMediaSourceAppServiceConnection_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CMedia_CCore_CIMediaSourceAppServiceConnection __x_ABI_CWindows_CMedia_CCore_CIMediaSourceAppServiceConnection;

#endif // ____x_ABI_CWindows_CMedia_CCore_CIMediaSourceAppServiceConnection_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CCore_CIMediaSourceAppServiceConnectionFactory_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CCore_CIMediaSourceAppServiceConnectionFactory_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CMedia_CCore_CIMediaSourceAppServiceConnectionFactory __x_ABI_CWindows_CMedia_CCore_CIMediaSourceAppServiceConnectionFactory;

#endif // ____x_ABI_CWindows_CMedia_CCore_CIMediaSourceAppServiceConnectionFactory_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CCore_CIMediaSourceError_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CCore_CIMediaSourceError_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CMedia_CCore_CIMediaSourceError __x_ABI_CWindows_CMedia_CCore_CIMediaSourceError;

#endif // ____x_ABI_CWindows_CMedia_CCore_CIMediaSourceError_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CCore_CIMediaSourceOpenOperationCompletedEventArgs_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CCore_CIMediaSourceOpenOperationCompletedEventArgs_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CMedia_CCore_CIMediaSourceOpenOperationCompletedEventArgs __x_ABI_CWindows_CMedia_CCore_CIMediaSourceOpenOperationCompletedEventArgs;

#endif // ____x_ABI_CWindows_CMedia_CCore_CIMediaSourceOpenOperationCompletedEventArgs_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CCore_CIMediaSourceStateChangedEventArgs_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CCore_CIMediaSourceStateChangedEventArgs_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CMedia_CCore_CIMediaSourceStateChangedEventArgs __x_ABI_CWindows_CMedia_CCore_CIMediaSourceStateChangedEventArgs;

#endif // ____x_ABI_CWindows_CMedia_CCore_CIMediaSourceStateChangedEventArgs_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CCore_CIMediaSourceStatics_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CCore_CIMediaSourceStatics_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CMedia_CCore_CIMediaSourceStatics __x_ABI_CWindows_CMedia_CCore_CIMediaSourceStatics;

#endif // ____x_ABI_CWindows_CMedia_CCore_CIMediaSourceStatics_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CCore_CIMediaSourceStatics2_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CCore_CIMediaSourceStatics2_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CMedia_CCore_CIMediaSourceStatics2 __x_ABI_CWindows_CMedia_CCore_CIMediaSourceStatics2;

#endif // ____x_ABI_CWindows_CMedia_CCore_CIMediaSourceStatics2_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CCore_CIMediaSourceStatics3_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CCore_CIMediaSourceStatics3_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CMedia_CCore_CIMediaSourceStatics3 __x_ABI_CWindows_CMedia_CCore_CIMediaSourceStatics3;

#endif // ____x_ABI_CWindows_CMedia_CCore_CIMediaSourceStatics3_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CCore_CIMediaSourceStatics4_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CCore_CIMediaSourceStatics4_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CMedia_CCore_CIMediaSourceStatics4 __x_ABI_CWindows_CMedia_CCore_CIMediaSourceStatics4;

#endif // ____x_ABI_CWindows_CMedia_CCore_CIMediaSourceStatics4_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CCore_CIMediaStreamDescriptor_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CCore_CIMediaStreamDescriptor_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CMedia_CCore_CIMediaStreamDescriptor __x_ABI_CWindows_CMedia_CCore_CIMediaStreamDescriptor;

#endif // ____x_ABI_CWindows_CMedia_CCore_CIMediaStreamDescriptor_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CCore_CIMediaStreamDescriptor2_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CCore_CIMediaStreamDescriptor2_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CMedia_CCore_CIMediaStreamDescriptor2 __x_ABI_CWindows_CMedia_CCore_CIMediaStreamDescriptor2;

#endif // ____x_ABI_CWindows_CMedia_CCore_CIMediaStreamDescriptor2_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CCore_CIMediaStreamSample_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CCore_CIMediaStreamSample_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSample __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSample;

#endif // ____x_ABI_CWindows_CMedia_CCore_CIMediaStreamSample_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CCore_CIMediaStreamSample2_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CCore_CIMediaStreamSample2_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSample2 __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSample2;

#endif // ____x_ABI_CWindows_CMedia_CCore_CIMediaStreamSample2_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CCore_CIMediaStreamSampleProtectionProperties_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CCore_CIMediaStreamSampleProtectionProperties_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSampleProtectionProperties __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSampleProtectionProperties;

#endif // ____x_ABI_CWindows_CMedia_CCore_CIMediaStreamSampleProtectionProperties_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CCore_CIMediaStreamSampleStatics_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CCore_CIMediaStreamSampleStatics_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSampleStatics __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSampleStatics;

#endif // ____x_ABI_CWindows_CMedia_CCore_CIMediaStreamSampleStatics_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CCore_CIMediaStreamSampleStatics2_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CCore_CIMediaStreamSampleStatics2_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSampleStatics2 __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSampleStatics2;

#endif // ____x_ABI_CWindows_CMedia_CCore_CIMediaStreamSampleStatics2_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CCore_CIMediaStreamSource_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CCore_CIMediaStreamSource_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSource __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSource;

#endif // ____x_ABI_CWindows_CMedia_CCore_CIMediaStreamSource_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CCore_CIMediaStreamSource2_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CCore_CIMediaStreamSource2_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSource2 __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSource2;

#endif // ____x_ABI_CWindows_CMedia_CCore_CIMediaStreamSource2_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CCore_CIMediaStreamSource3_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CCore_CIMediaStreamSource3_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSource3 __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSource3;

#endif // ____x_ABI_CWindows_CMedia_CCore_CIMediaStreamSource3_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CCore_CIMediaStreamSource4_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CCore_CIMediaStreamSource4_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSource4 __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSource4;

#endif // ____x_ABI_CWindows_CMedia_CCore_CIMediaStreamSource4_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceClosedEventArgs_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceClosedEventArgs_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceClosedEventArgs __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceClosedEventArgs;

#endif // ____x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceClosedEventArgs_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceClosedRequest_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceClosedRequest_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceClosedRequest __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceClosedRequest;

#endif // ____x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceClosedRequest_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceFactory_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceFactory_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceFactory __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceFactory;

#endif // ____x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceFactory_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceSampleRenderedEventArgs_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceSampleRenderedEventArgs_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceSampleRenderedEventArgs __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceSampleRenderedEventArgs;

#endif // ____x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceSampleRenderedEventArgs_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceSampleRequest_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceSampleRequest_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceSampleRequest __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceSampleRequest;

#endif // ____x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceSampleRequest_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceSampleRequestDeferral_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceSampleRequestDeferral_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceSampleRequestDeferral __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceSampleRequestDeferral;

#endif // ____x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceSampleRequestDeferral_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceSampleRequestedEventArgs_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceSampleRequestedEventArgs_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceSampleRequestedEventArgs __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceSampleRequestedEventArgs;

#endif // ____x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceSampleRequestedEventArgs_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceStartingEventArgs_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceStartingEventArgs_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceStartingEventArgs __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceStartingEventArgs;

#endif // ____x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceStartingEventArgs_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceStartingRequest_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceStartingRequest_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceStartingRequest __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceStartingRequest;

#endif // ____x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceStartingRequest_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceStartingRequestDeferral_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceStartingRequestDeferral_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceStartingRequestDeferral __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceStartingRequestDeferral;

#endif // ____x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceStartingRequestDeferral_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceSwitchStreamsRequest_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceSwitchStreamsRequest_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceSwitchStreamsRequest __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceSwitchStreamsRequest;

#endif // ____x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceSwitchStreamsRequest_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceSwitchStreamsRequestDeferral_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceSwitchStreamsRequestDeferral_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceSwitchStreamsRequestDeferral __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceSwitchStreamsRequestDeferral;

#endif // ____x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceSwitchStreamsRequestDeferral_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceSwitchStreamsRequestedEventArgs_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceSwitchStreamsRequestedEventArgs_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceSwitchStreamsRequestedEventArgs __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceSwitchStreamsRequestedEventArgs;

#endif // ____x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceSwitchStreamsRequestedEventArgs_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CCore_CIMediaTrack_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CCore_CIMediaTrack_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CMedia_CCore_CIMediaTrack __x_ABI_CWindows_CMedia_CCore_CIMediaTrack;

#endif // ____x_ABI_CWindows_CMedia_CCore_CIMediaTrack_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CCore_CIMseSourceBuffer_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CCore_CIMseSourceBuffer_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CMedia_CCore_CIMseSourceBuffer __x_ABI_CWindows_CMedia_CCore_CIMseSourceBuffer;

#endif // ____x_ABI_CWindows_CMedia_CCore_CIMseSourceBuffer_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CCore_CIMseSourceBufferList_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CCore_CIMseSourceBufferList_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CMedia_CCore_CIMseSourceBufferList __x_ABI_CWindows_CMedia_CCore_CIMseSourceBufferList;

#endif // ____x_ABI_CWindows_CMedia_CCore_CIMseSourceBufferList_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CCore_CIMseStreamSource_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CCore_CIMseStreamSource_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CMedia_CCore_CIMseStreamSource __x_ABI_CWindows_CMedia_CCore_CIMseStreamSource;

#endif // ____x_ABI_CWindows_CMedia_CCore_CIMseStreamSource_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CCore_CIMseStreamSource2_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CCore_CIMseStreamSource2_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CMedia_CCore_CIMseStreamSource2 __x_ABI_CWindows_CMedia_CCore_CIMseStreamSource2;

#endif // ____x_ABI_CWindows_CMedia_CCore_CIMseStreamSource2_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CCore_CIMseStreamSourceStatics_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CCore_CIMseStreamSourceStatics_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CMedia_CCore_CIMseStreamSourceStatics __x_ABI_CWindows_CMedia_CCore_CIMseStreamSourceStatics;

#endif // ____x_ABI_CWindows_CMedia_CCore_CIMseStreamSourceStatics_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CCore_CISceneAnalysisEffect_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CCore_CISceneAnalysisEffect_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CMedia_CCore_CISceneAnalysisEffect __x_ABI_CWindows_CMedia_CCore_CISceneAnalysisEffect;

#endif // ____x_ABI_CWindows_CMedia_CCore_CISceneAnalysisEffect_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CCore_CISceneAnalysisEffectFrame_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CCore_CISceneAnalysisEffectFrame_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CMedia_CCore_CISceneAnalysisEffectFrame __x_ABI_CWindows_CMedia_CCore_CISceneAnalysisEffectFrame;

#endif // ____x_ABI_CWindows_CMedia_CCore_CISceneAnalysisEffectFrame_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CCore_CISceneAnalysisEffectFrame2_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CCore_CISceneAnalysisEffectFrame2_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CMedia_CCore_CISceneAnalysisEffectFrame2 __x_ABI_CWindows_CMedia_CCore_CISceneAnalysisEffectFrame2;

#endif // ____x_ABI_CWindows_CMedia_CCore_CISceneAnalysisEffectFrame2_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CCore_CISceneAnalyzedEventArgs_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CCore_CISceneAnalyzedEventArgs_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CMedia_CCore_CISceneAnalyzedEventArgs __x_ABI_CWindows_CMedia_CCore_CISceneAnalyzedEventArgs;

#endif // ____x_ABI_CWindows_CMedia_CCore_CISceneAnalyzedEventArgs_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CCore_CISingleSelectMediaTrackList_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CCore_CISingleSelectMediaTrackList_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CMedia_CCore_CISingleSelectMediaTrackList __x_ABI_CWindows_CMedia_CCore_CISingleSelectMediaTrackList;

#endif // ____x_ABI_CWindows_CMedia_CCore_CISingleSelectMediaTrackList_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CCore_CISpeechCue_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CCore_CISpeechCue_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CMedia_CCore_CISpeechCue __x_ABI_CWindows_CMedia_CCore_CISpeechCue;

#endif // ____x_ABI_CWindows_CMedia_CCore_CISpeechCue_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CCore_CITimedMetadataStreamDescriptor_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CCore_CITimedMetadataStreamDescriptor_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CMedia_CCore_CITimedMetadataStreamDescriptor __x_ABI_CWindows_CMedia_CCore_CITimedMetadataStreamDescriptor;

#endif // ____x_ABI_CWindows_CMedia_CCore_CITimedMetadataStreamDescriptor_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CCore_CITimedMetadataStreamDescriptorFactory_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CCore_CITimedMetadataStreamDescriptorFactory_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CMedia_CCore_CITimedMetadataStreamDescriptorFactory __x_ABI_CWindows_CMedia_CCore_CITimedMetadataStreamDescriptorFactory;

#endif // ____x_ABI_CWindows_CMedia_CCore_CITimedMetadataStreamDescriptorFactory_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CCore_CITimedMetadataTrack_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CCore_CITimedMetadataTrack_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CMedia_CCore_CITimedMetadataTrack __x_ABI_CWindows_CMedia_CCore_CITimedMetadataTrack;

#endif // ____x_ABI_CWindows_CMedia_CCore_CITimedMetadataTrack_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CCore_CITimedMetadataTrack2_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CCore_CITimedMetadataTrack2_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CMedia_CCore_CITimedMetadataTrack2 __x_ABI_CWindows_CMedia_CCore_CITimedMetadataTrack2;

#endif // ____x_ABI_CWindows_CMedia_CCore_CITimedMetadataTrack2_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CCore_CITimedMetadataTrackError_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CCore_CITimedMetadataTrackError_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CMedia_CCore_CITimedMetadataTrackError __x_ABI_CWindows_CMedia_CCore_CITimedMetadataTrackError;

#endif // ____x_ABI_CWindows_CMedia_CCore_CITimedMetadataTrackError_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CCore_CITimedMetadataTrackFactory_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CCore_CITimedMetadataTrackFactory_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CMedia_CCore_CITimedMetadataTrackFactory __x_ABI_CWindows_CMedia_CCore_CITimedMetadataTrackFactory;

#endif // ____x_ABI_CWindows_CMedia_CCore_CITimedMetadataTrackFactory_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CCore_CITimedMetadataTrackFailedEventArgs_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CCore_CITimedMetadataTrackFailedEventArgs_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CMedia_CCore_CITimedMetadataTrackFailedEventArgs __x_ABI_CWindows_CMedia_CCore_CITimedMetadataTrackFailedEventArgs;

#endif // ____x_ABI_CWindows_CMedia_CCore_CITimedMetadataTrackFailedEventArgs_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CCore_CITimedMetadataTrackProvider_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CCore_CITimedMetadataTrackProvider_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CMedia_CCore_CITimedMetadataTrackProvider __x_ABI_CWindows_CMedia_CCore_CITimedMetadataTrackProvider;

#endif // ____x_ABI_CWindows_CMedia_CCore_CITimedMetadataTrackProvider_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CCore_CITimedTextCue_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CCore_CITimedTextCue_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CMedia_CCore_CITimedTextCue __x_ABI_CWindows_CMedia_CCore_CITimedTextCue;

#endif // ____x_ABI_CWindows_CMedia_CCore_CITimedTextCue_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CCore_CITimedTextLine_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CCore_CITimedTextLine_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CMedia_CCore_CITimedTextLine __x_ABI_CWindows_CMedia_CCore_CITimedTextLine;

#endif // ____x_ABI_CWindows_CMedia_CCore_CITimedTextLine_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CCore_CITimedTextRegion_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CCore_CITimedTextRegion_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CMedia_CCore_CITimedTextRegion __x_ABI_CWindows_CMedia_CCore_CITimedTextRegion;

#endif // ____x_ABI_CWindows_CMedia_CCore_CITimedTextRegion_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CCore_CITimedTextSource_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CCore_CITimedTextSource_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CMedia_CCore_CITimedTextSource __x_ABI_CWindows_CMedia_CCore_CITimedTextSource;

#endif // ____x_ABI_CWindows_CMedia_CCore_CITimedTextSource_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CCore_CITimedTextSourceResolveResultEventArgs_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CCore_CITimedTextSourceResolveResultEventArgs_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CMedia_CCore_CITimedTextSourceResolveResultEventArgs __x_ABI_CWindows_CMedia_CCore_CITimedTextSourceResolveResultEventArgs;

#endif // ____x_ABI_CWindows_CMedia_CCore_CITimedTextSourceResolveResultEventArgs_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CCore_CITimedTextSourceStatics_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CCore_CITimedTextSourceStatics_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CMedia_CCore_CITimedTextSourceStatics __x_ABI_CWindows_CMedia_CCore_CITimedTextSourceStatics;

#endif // ____x_ABI_CWindows_CMedia_CCore_CITimedTextSourceStatics_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CCore_CITimedTextSourceStatics2_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CCore_CITimedTextSourceStatics2_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CMedia_CCore_CITimedTextSourceStatics2 __x_ABI_CWindows_CMedia_CCore_CITimedTextSourceStatics2;

#endif // ____x_ABI_CWindows_CMedia_CCore_CITimedTextSourceStatics2_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CCore_CITimedTextStyle_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CCore_CITimedTextStyle_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CMedia_CCore_CITimedTextStyle __x_ABI_CWindows_CMedia_CCore_CITimedTextStyle;

#endif // ____x_ABI_CWindows_CMedia_CCore_CITimedTextStyle_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CCore_CITimedTextStyle2_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CCore_CITimedTextStyle2_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CMedia_CCore_CITimedTextStyle2 __x_ABI_CWindows_CMedia_CCore_CITimedTextStyle2;

#endif // ____x_ABI_CWindows_CMedia_CCore_CITimedTextStyle2_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CCore_CITimedTextSubformat_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CCore_CITimedTextSubformat_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CMedia_CCore_CITimedTextSubformat __x_ABI_CWindows_CMedia_CCore_CITimedTextSubformat;

#endif // ____x_ABI_CWindows_CMedia_CCore_CITimedTextSubformat_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CCore_CIVideoStabilizationEffect_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CCore_CIVideoStabilizationEffect_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CMedia_CCore_CIVideoStabilizationEffect __x_ABI_CWindows_CMedia_CCore_CIVideoStabilizationEffect;

#endif // ____x_ABI_CWindows_CMedia_CCore_CIVideoStabilizationEffect_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CCore_CIVideoStabilizationEffectEnabledChangedEventArgs_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CCore_CIVideoStabilizationEffectEnabledChangedEventArgs_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CMedia_CCore_CIVideoStabilizationEffectEnabledChangedEventArgs __x_ABI_CWindows_CMedia_CCore_CIVideoStabilizationEffectEnabledChangedEventArgs;

#endif // ____x_ABI_CWindows_CMedia_CCore_CIVideoStabilizationEffectEnabledChangedEventArgs_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CCore_CIVideoStreamDescriptor_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CCore_CIVideoStreamDescriptor_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CMedia_CCore_CIVideoStreamDescriptor __x_ABI_CWindows_CMedia_CCore_CIVideoStreamDescriptor;

#endif // ____x_ABI_CWindows_CMedia_CCore_CIVideoStreamDescriptor_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CCore_CIVideoStreamDescriptor2_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CCore_CIVideoStreamDescriptor2_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CMedia_CCore_CIVideoStreamDescriptor2 __x_ABI_CWindows_CMedia_CCore_CIVideoStreamDescriptor2;

#endif // ____x_ABI_CWindows_CMedia_CCore_CIVideoStreamDescriptor2_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CCore_CIVideoStreamDescriptorFactory_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CCore_CIVideoStreamDescriptorFactory_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CMedia_CCore_CIVideoStreamDescriptorFactory __x_ABI_CWindows_CMedia_CCore_CIVideoStreamDescriptorFactory;

#endif // ____x_ABI_CWindows_CMedia_CCore_CIVideoStreamDescriptorFactory_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CCore_CIVideoTrack_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CCore_CIVideoTrack_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CMedia_CCore_CIVideoTrack __x_ABI_CWindows_CMedia_CCore_CIVideoTrack;

#endif // ____x_ABI_CWindows_CMedia_CCore_CIVideoTrack_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CCore_CIVideoTrackOpenFailedEventArgs_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CCore_CIVideoTrackOpenFailedEventArgs_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CMedia_CCore_CIVideoTrackOpenFailedEventArgs __x_ABI_CWindows_CMedia_CCore_CIVideoTrackOpenFailedEventArgs;

#endif // ____x_ABI_CWindows_CMedia_CCore_CIVideoTrackOpenFailedEventArgs_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CCore_CIVideoTrackSupportInfo_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CCore_CIVideoTrackSupportInfo_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CMedia_CCore_CIVideoTrackSupportInfo __x_ABI_CWindows_CMedia_CCore_CIVideoTrackSupportInfo;

#endif // ____x_ABI_CWindows_CMedia_CCore_CIVideoTrackSupportInfo_FWD_DEFINED__

// Parameterized interface forward declarations (C)

// Collection interface definitions

#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x40000
#if !defined(____FIIterator_1_Windows__CMedia__CCore__CCodecInfo_INTERFACE_DEFINED__)
#define ____FIIterator_1_Windows__CMedia__CCore__CCodecInfo_INTERFACE_DEFINED__

typedef interface __FIIterator_1_Windows__CMedia__CCore__CCodecInfo __FIIterator_1_Windows__CMedia__CCore__CCodecInfo;

//  Declare the parameterized interface IID.
EXTERN_C const IID IID___FIIterator_1_Windows__CMedia__CCore__CCodecInfo;

typedef struct __FIIterator_1_Windows__CMedia__CCore__CCodecInfoVtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__FIIterator_1_Windows__CMedia__CCore__CCodecInfo* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__FIIterator_1_Windows__CMedia__CCore__CCodecInfo* This);
    ULONG (STDMETHODCALLTYPE* Release)(__FIIterator_1_Windows__CMedia__CCore__CCodecInfo* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__FIIterator_1_Windows__CMedia__CCore__CCodecInfo* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__FIIterator_1_Windows__CMedia__CCore__CCodecInfo* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__FIIterator_1_Windows__CMedia__CCore__CCodecInfo* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* get_Current)(__FIIterator_1_Windows__CMedia__CCore__CCodecInfo* This,
        __x_ABI_CWindows_CMedia_CCore_CICodecInfo** result);
    HRESULT (STDMETHODCALLTYPE* get_HasCurrent)(__FIIterator_1_Windows__CMedia__CCore__CCodecInfo* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* MoveNext)(__FIIterator_1_Windows__CMedia__CCore__CCodecInfo* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__FIIterator_1_Windows__CMedia__CCore__CCodecInfo* This,
        UINT32 itemsLength,
        __x_ABI_CWindows_CMedia_CCore_CICodecInfo** items,
        UINT32* result);

    END_INTERFACE
} __FIIterator_1_Windows__CMedia__CCore__CCodecInfoVtbl;

interface __FIIterator_1_Windows__CMedia__CCore__CCodecInfo
{
    CONST_VTBL struct __FIIterator_1_Windows__CMedia__CCore__CCodecInfoVtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __FIIterator_1_Windows__CMedia__CCore__CCodecInfo_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __FIIterator_1_Windows__CMedia__CCore__CCodecInfo_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __FIIterator_1_Windows__CMedia__CCore__CCodecInfo_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __FIIterator_1_Windows__CMedia__CCore__CCodecInfo_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __FIIterator_1_Windows__CMedia__CCore__CCodecInfo_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __FIIterator_1_Windows__CMedia__CCore__CCodecInfo_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __FIIterator_1_Windows__CMedia__CCore__CCodecInfo_get_Current(This, result) \
    ((This)->lpVtbl->get_Current(This, result))

#define __FIIterator_1_Windows__CMedia__CCore__CCodecInfo_get_HasCurrent(This, result) \
    ((This)->lpVtbl->get_HasCurrent(This, result))

#define __FIIterator_1_Windows__CMedia__CCore__CCodecInfo_MoveNext(This, result) \
    ((This)->lpVtbl->MoveNext(This, result))

#define __FIIterator_1_Windows__CMedia__CCore__CCodecInfo_GetMany(This, itemsLength, items, result) \
    ((This)->lpVtbl->GetMany(This, itemsLength, items, result))

#endif /* COBJMACROS */

#endif // ____FIIterator_1_Windows__CMedia__CCore__CCodecInfo_INTERFACE_DEFINED__
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x40000

#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x40000
#if !defined(____FIIterable_1_Windows__CMedia__CCore__CCodecInfo_INTERFACE_DEFINED__)
#define ____FIIterable_1_Windows__CMedia__CCore__CCodecInfo_INTERFACE_DEFINED__

typedef interface __FIIterable_1_Windows__CMedia__CCore__CCodecInfo __FIIterable_1_Windows__CMedia__CCore__CCodecInfo;

//  Declare the parameterized interface IID.
EXTERN_C const IID IID___FIIterable_1_Windows__CMedia__CCore__CCodecInfo;

typedef struct __FIIterable_1_Windows__CMedia__CCore__CCodecInfoVtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__FIIterable_1_Windows__CMedia__CCore__CCodecInfo* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__FIIterable_1_Windows__CMedia__CCore__CCodecInfo* This);
    ULONG (STDMETHODCALLTYPE* Release)(__FIIterable_1_Windows__CMedia__CCore__CCodecInfo* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__FIIterable_1_Windows__CMedia__CCore__CCodecInfo* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__FIIterable_1_Windows__CMedia__CCore__CCodecInfo* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__FIIterable_1_Windows__CMedia__CCore__CCodecInfo* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* First)(__FIIterable_1_Windows__CMedia__CCore__CCodecInfo* This,
        __FIIterator_1_Windows__CMedia__CCore__CCodecInfo** result);

    END_INTERFACE
} __FIIterable_1_Windows__CMedia__CCore__CCodecInfoVtbl;

interface __FIIterable_1_Windows__CMedia__CCore__CCodecInfo
{
    CONST_VTBL struct __FIIterable_1_Windows__CMedia__CCore__CCodecInfoVtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __FIIterable_1_Windows__CMedia__CCore__CCodecInfo_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __FIIterable_1_Windows__CMedia__CCore__CCodecInfo_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __FIIterable_1_Windows__CMedia__CCore__CCodecInfo_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __FIIterable_1_Windows__CMedia__CCore__CCodecInfo_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __FIIterable_1_Windows__CMedia__CCore__CCodecInfo_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __FIIterable_1_Windows__CMedia__CCore__CCodecInfo_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __FIIterable_1_Windows__CMedia__CCore__CCodecInfo_First(This, result) \
    ((This)->lpVtbl->First(This, result))

#endif /* COBJMACROS */

#endif // ____FIIterable_1_Windows__CMedia__CCore__CCodecInfo_INTERFACE_DEFINED__
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x40000

#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x40000
#if !defined(____FIVectorView_1_Windows__CMedia__CCore__CCodecInfo_INTERFACE_DEFINED__)
#define ____FIVectorView_1_Windows__CMedia__CCore__CCodecInfo_INTERFACE_DEFINED__

typedef interface __FIVectorView_1_Windows__CMedia__CCore__CCodecInfo __FIVectorView_1_Windows__CMedia__CCore__CCodecInfo;

//  Declare the parameterized interface IID.
EXTERN_C const IID IID___FIVectorView_1_Windows__CMedia__CCore__CCodecInfo;

typedef struct __FIVectorView_1_Windows__CMedia__CCore__CCodecInfoVtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__FIVectorView_1_Windows__CMedia__CCore__CCodecInfo* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__FIVectorView_1_Windows__CMedia__CCore__CCodecInfo* This);
    ULONG (STDMETHODCALLTYPE* Release)(__FIVectorView_1_Windows__CMedia__CCore__CCodecInfo* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__FIVectorView_1_Windows__CMedia__CCore__CCodecInfo* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__FIVectorView_1_Windows__CMedia__CCore__CCodecInfo* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__FIVectorView_1_Windows__CMedia__CCore__CCodecInfo* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* GetAt)(__FIVectorView_1_Windows__CMedia__CCore__CCodecInfo* This,
        UINT32 index,
        __x_ABI_CWindows_CMedia_CCore_CICodecInfo** result);
    HRESULT (STDMETHODCALLTYPE* get_Size)(__FIVectorView_1_Windows__CMedia__CCore__CCodecInfo* This,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* IndexOf)(__FIVectorView_1_Windows__CMedia__CCore__CCodecInfo* This,
        __x_ABI_CWindows_CMedia_CCore_CICodecInfo* value,
        UINT32* index,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__FIVectorView_1_Windows__CMedia__CCore__CCodecInfo* This,
        UINT32 startIndex,
        UINT32 itemsLength,
        __x_ABI_CWindows_CMedia_CCore_CICodecInfo** items,
        UINT32* result);

    END_INTERFACE
} __FIVectorView_1_Windows__CMedia__CCore__CCodecInfoVtbl;

interface __FIVectorView_1_Windows__CMedia__CCore__CCodecInfo
{
    CONST_VTBL struct __FIVectorView_1_Windows__CMedia__CCore__CCodecInfoVtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __FIVectorView_1_Windows__CMedia__CCore__CCodecInfo_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __FIVectorView_1_Windows__CMedia__CCore__CCodecInfo_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __FIVectorView_1_Windows__CMedia__CCore__CCodecInfo_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __FIVectorView_1_Windows__CMedia__CCore__CCodecInfo_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __FIVectorView_1_Windows__CMedia__CCore__CCodecInfo_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __FIVectorView_1_Windows__CMedia__CCore__CCodecInfo_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __FIVectorView_1_Windows__CMedia__CCore__CCodecInfo_GetAt(This, index, result) \
    ((This)->lpVtbl->GetAt(This, index, result))

#define __FIVectorView_1_Windows__CMedia__CCore__CCodecInfo_get_Size(This, result) \
    ((This)->lpVtbl->get_Size(This, result))

#define __FIVectorView_1_Windows__CMedia__CCore__CCodecInfo_IndexOf(This, value, index, result) \
    ((This)->lpVtbl->IndexOf(This, value, index, result))

#define __FIVectorView_1_Windows__CMedia__CCore__CCodecInfo_GetMany(This, startIndex, itemsLength, items, result) \
    ((This)->lpVtbl->GetMany(This, startIndex, itemsLength, items, result))

#endif /* COBJMACROS */

#endif // ____FIVectorView_1_Windows__CMedia__CCore__CCodecInfo_INTERFACE_DEFINED__
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x40000

typedef interface __FIAsyncOperationCompletedHandler_1___FIVectorView_1_Windows__CMedia__CCore__CCodecInfo __FIAsyncOperationCompletedHandler_1___FIVectorView_1_Windows__CMedia__CCore__CCodecInfo;

#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x40000
#if !defined(____FIAsyncOperation_1___FIVectorView_1_Windows__CMedia__CCore__CCodecInfo_INTERFACE_DEFINED__)
#define ____FIAsyncOperation_1___FIVectorView_1_Windows__CMedia__CCore__CCodecInfo_INTERFACE_DEFINED__

typedef interface __FIAsyncOperation_1___FIVectorView_1_Windows__CMedia__CCore__CCodecInfo __FIAsyncOperation_1___FIVectorView_1_Windows__CMedia__CCore__CCodecInfo;

//  Declare the parameterized interface IID.
EXTERN_C const IID IID___FIAsyncOperation_1___FIVectorView_1_Windows__CMedia__CCore__CCodecInfo;

typedef struct __FIAsyncOperation_1___FIVectorView_1_Windows__CMedia__CCore__CCodecInfoVtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__FIAsyncOperation_1___FIVectorView_1_Windows__CMedia__CCore__CCodecInfo* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__FIAsyncOperation_1___FIVectorView_1_Windows__CMedia__CCore__CCodecInfo* This);
    ULONG (STDMETHODCALLTYPE* Release)(__FIAsyncOperation_1___FIVectorView_1_Windows__CMedia__CCore__CCodecInfo* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__FIAsyncOperation_1___FIVectorView_1_Windows__CMedia__CCore__CCodecInfo* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__FIAsyncOperation_1___FIVectorView_1_Windows__CMedia__CCore__CCodecInfo* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__FIAsyncOperation_1___FIVectorView_1_Windows__CMedia__CCore__CCodecInfo* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* put_Completed)(__FIAsyncOperation_1___FIVectorView_1_Windows__CMedia__CCore__CCodecInfo* This,
        __FIAsyncOperationCompletedHandler_1___FIVectorView_1_Windows__CMedia__CCore__CCodecInfo* handler);
    HRESULT (STDMETHODCALLTYPE* get_Completed)(__FIAsyncOperation_1___FIVectorView_1_Windows__CMedia__CCore__CCodecInfo* This,
        __FIAsyncOperationCompletedHandler_1___FIVectorView_1_Windows__CMedia__CCore__CCodecInfo** result);
    HRESULT (STDMETHODCALLTYPE* GetResults)(__FIAsyncOperation_1___FIVectorView_1_Windows__CMedia__CCore__CCodecInfo* This,
        __FIVectorView_1_Windows__CMedia__CCore__CCodecInfo** result);

    END_INTERFACE
} __FIAsyncOperation_1___FIVectorView_1_Windows__CMedia__CCore__CCodecInfoVtbl;

interface __FIAsyncOperation_1___FIVectorView_1_Windows__CMedia__CCore__CCodecInfo
{
    CONST_VTBL struct __FIAsyncOperation_1___FIVectorView_1_Windows__CMedia__CCore__CCodecInfoVtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __FIAsyncOperation_1___FIVectorView_1_Windows__CMedia__CCore__CCodecInfo_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __FIAsyncOperation_1___FIVectorView_1_Windows__CMedia__CCore__CCodecInfo_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __FIAsyncOperation_1___FIVectorView_1_Windows__CMedia__CCore__CCodecInfo_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __FIAsyncOperation_1___FIVectorView_1_Windows__CMedia__CCore__CCodecInfo_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __FIAsyncOperation_1___FIVectorView_1_Windows__CMedia__CCore__CCodecInfo_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __FIAsyncOperation_1___FIVectorView_1_Windows__CMedia__CCore__CCodecInfo_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __FIAsyncOperation_1___FIVectorView_1_Windows__CMedia__CCore__CCodecInfo_put_Completed(This, handler) \
    ((This)->lpVtbl->put_Completed(This, handler))

#define __FIAsyncOperation_1___FIVectorView_1_Windows__CMedia__CCore__CCodecInfo_get_Completed(This, result) \
    ((This)->lpVtbl->get_Completed(This, result))

#define __FIAsyncOperation_1___FIVectorView_1_Windows__CMedia__CCore__CCodecInfo_GetResults(This, result) \
    ((This)->lpVtbl->GetResults(This, result))

#endif /* COBJMACROS */

#endif // ____FIAsyncOperation_1___FIVectorView_1_Windows__CMedia__CCore__CCodecInfo_INTERFACE_DEFINED__
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x40000

#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x40000
#if !defined(____FIAsyncOperationCompletedHandler_1___FIVectorView_1_Windows__CMedia__CCore__CCodecInfo_INTERFACE_DEFINED__)
#define ____FIAsyncOperationCompletedHandler_1___FIVectorView_1_Windows__CMedia__CCore__CCodecInfo_INTERFACE_DEFINED__

typedef interface __FIAsyncOperationCompletedHandler_1___FIVectorView_1_Windows__CMedia__CCore__CCodecInfo __FIAsyncOperationCompletedHandler_1___FIVectorView_1_Windows__CMedia__CCore__CCodecInfo;

//  Declare the parameterized interface IID.
EXTERN_C const IID IID___FIAsyncOperationCompletedHandler_1___FIVectorView_1_Windows__CMedia__CCore__CCodecInfo;

typedef struct __FIAsyncOperationCompletedHandler_1___FIVectorView_1_Windows__CMedia__CCore__CCodecInfoVtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__FIAsyncOperationCompletedHandler_1___FIVectorView_1_Windows__CMedia__CCore__CCodecInfo* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__FIAsyncOperationCompletedHandler_1___FIVectorView_1_Windows__CMedia__CCore__CCodecInfo* This);
    ULONG (STDMETHODCALLTYPE* Release)(__FIAsyncOperationCompletedHandler_1___FIVectorView_1_Windows__CMedia__CCore__CCodecInfo* This);
    HRESULT (STDMETHODCALLTYPE* Invoke)(__FIAsyncOperationCompletedHandler_1___FIVectorView_1_Windows__CMedia__CCore__CCodecInfo* This,
        __FIAsyncOperation_1___FIVectorView_1_Windows__CMedia__CCore__CCodecInfo* asyncInfo,
        AsyncStatus asyncStatus);

    END_INTERFACE
} __FIAsyncOperationCompletedHandler_1___FIVectorView_1_Windows__CMedia__CCore__CCodecInfoVtbl;

interface __FIAsyncOperationCompletedHandler_1___FIVectorView_1_Windows__CMedia__CCore__CCodecInfo
{
    CONST_VTBL struct __FIAsyncOperationCompletedHandler_1___FIVectorView_1_Windows__CMedia__CCore__CCodecInfoVtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __FIAsyncOperationCompletedHandler_1___FIVectorView_1_Windows__CMedia__CCore__CCodecInfo_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __FIAsyncOperationCompletedHandler_1___FIVectorView_1_Windows__CMedia__CCore__CCodecInfo_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __FIAsyncOperationCompletedHandler_1___FIVectorView_1_Windows__CMedia__CCore__CCodecInfo_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __FIAsyncOperationCompletedHandler_1___FIVectorView_1_Windows__CMedia__CCore__CCodecInfo_Invoke(This, asyncInfo, asyncStatus) \
    ((This)->lpVtbl->Invoke(This, asyncInfo, asyncStatus))

#endif /* COBJMACROS */

#endif // ____FIAsyncOperationCompletedHandler_1___FIVectorView_1_Windows__CMedia__CCore__CCodecInfo_INTERFACE_DEFINED__
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x40000

typedef interface __FIAsyncOperationCompletedHandler_1_Windows__CMedia__CCore__CMediaStreamSample __FIAsyncOperationCompletedHandler_1_Windows__CMedia__CCore__CMediaStreamSample;

#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____FIAsyncOperation_1_Windows__CMedia__CCore__CMediaStreamSample_INTERFACE_DEFINED__)
#define ____FIAsyncOperation_1_Windows__CMedia__CCore__CMediaStreamSample_INTERFACE_DEFINED__

typedef interface __FIAsyncOperation_1_Windows__CMedia__CCore__CMediaStreamSample __FIAsyncOperation_1_Windows__CMedia__CCore__CMediaStreamSample;

//  Declare the parameterized interface IID.
EXTERN_C const IID IID___FIAsyncOperation_1_Windows__CMedia__CCore__CMediaStreamSample;

typedef struct __FIAsyncOperation_1_Windows__CMedia__CCore__CMediaStreamSampleVtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__FIAsyncOperation_1_Windows__CMedia__CCore__CMediaStreamSample* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__FIAsyncOperation_1_Windows__CMedia__CCore__CMediaStreamSample* This);
    ULONG (STDMETHODCALLTYPE* Release)(__FIAsyncOperation_1_Windows__CMedia__CCore__CMediaStreamSample* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__FIAsyncOperation_1_Windows__CMedia__CCore__CMediaStreamSample* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__FIAsyncOperation_1_Windows__CMedia__CCore__CMediaStreamSample* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__FIAsyncOperation_1_Windows__CMedia__CCore__CMediaStreamSample* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* put_Completed)(__FIAsyncOperation_1_Windows__CMedia__CCore__CMediaStreamSample* This,
        __FIAsyncOperationCompletedHandler_1_Windows__CMedia__CCore__CMediaStreamSample* handler);
    HRESULT (STDMETHODCALLTYPE* get_Completed)(__FIAsyncOperation_1_Windows__CMedia__CCore__CMediaStreamSample* This,
        __FIAsyncOperationCompletedHandler_1_Windows__CMedia__CCore__CMediaStreamSample** result);
    HRESULT (STDMETHODCALLTYPE* GetResults)(__FIAsyncOperation_1_Windows__CMedia__CCore__CMediaStreamSample* This,
        __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSample** result);

    END_INTERFACE
} __FIAsyncOperation_1_Windows__CMedia__CCore__CMediaStreamSampleVtbl;

interface __FIAsyncOperation_1_Windows__CMedia__CCore__CMediaStreamSample
{
    CONST_VTBL struct __FIAsyncOperation_1_Windows__CMedia__CCore__CMediaStreamSampleVtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __FIAsyncOperation_1_Windows__CMedia__CCore__CMediaStreamSample_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __FIAsyncOperation_1_Windows__CMedia__CCore__CMediaStreamSample_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __FIAsyncOperation_1_Windows__CMedia__CCore__CMediaStreamSample_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __FIAsyncOperation_1_Windows__CMedia__CCore__CMediaStreamSample_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __FIAsyncOperation_1_Windows__CMedia__CCore__CMediaStreamSample_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __FIAsyncOperation_1_Windows__CMedia__CCore__CMediaStreamSample_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __FIAsyncOperation_1_Windows__CMedia__CCore__CMediaStreamSample_put_Completed(This, handler) \
    ((This)->lpVtbl->put_Completed(This, handler))

#define __FIAsyncOperation_1_Windows__CMedia__CCore__CMediaStreamSample_get_Completed(This, result) \
    ((This)->lpVtbl->get_Completed(This, result))

#define __FIAsyncOperation_1_Windows__CMedia__CCore__CMediaStreamSample_GetResults(This, result) \
    ((This)->lpVtbl->GetResults(This, result))

#endif /* COBJMACROS */

#endif // ____FIAsyncOperation_1_Windows__CMedia__CCore__CMediaStreamSample_INTERFACE_DEFINED__
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____FIAsyncOperationCompletedHandler_1_Windows__CMedia__CCore__CMediaStreamSample_INTERFACE_DEFINED__)
#define ____FIAsyncOperationCompletedHandler_1_Windows__CMedia__CCore__CMediaStreamSample_INTERFACE_DEFINED__

typedef interface __FIAsyncOperationCompletedHandler_1_Windows__CMedia__CCore__CMediaStreamSample __FIAsyncOperationCompletedHandler_1_Windows__CMedia__CCore__CMediaStreamSample;

//  Declare the parameterized interface IID.
EXTERN_C const IID IID___FIAsyncOperationCompletedHandler_1_Windows__CMedia__CCore__CMediaStreamSample;

typedef struct __FIAsyncOperationCompletedHandler_1_Windows__CMedia__CCore__CMediaStreamSampleVtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__FIAsyncOperationCompletedHandler_1_Windows__CMedia__CCore__CMediaStreamSample* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__FIAsyncOperationCompletedHandler_1_Windows__CMedia__CCore__CMediaStreamSample* This);
    ULONG (STDMETHODCALLTYPE* Release)(__FIAsyncOperationCompletedHandler_1_Windows__CMedia__CCore__CMediaStreamSample* This);
    HRESULT (STDMETHODCALLTYPE* Invoke)(__FIAsyncOperationCompletedHandler_1_Windows__CMedia__CCore__CMediaStreamSample* This,
        __FIAsyncOperation_1_Windows__CMedia__CCore__CMediaStreamSample* asyncInfo,
        AsyncStatus asyncStatus);

    END_INTERFACE
} __FIAsyncOperationCompletedHandler_1_Windows__CMedia__CCore__CMediaStreamSampleVtbl;

interface __FIAsyncOperationCompletedHandler_1_Windows__CMedia__CCore__CMediaStreamSample
{
    CONST_VTBL struct __FIAsyncOperationCompletedHandler_1_Windows__CMedia__CCore__CMediaStreamSampleVtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __FIAsyncOperationCompletedHandler_1_Windows__CMedia__CCore__CMediaStreamSample_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __FIAsyncOperationCompletedHandler_1_Windows__CMedia__CCore__CMediaStreamSample_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __FIAsyncOperationCompletedHandler_1_Windows__CMedia__CCore__CMediaStreamSample_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __FIAsyncOperationCompletedHandler_1_Windows__CMedia__CCore__CMediaStreamSample_Invoke(This, asyncInfo, asyncStatus) \
    ((This)->lpVtbl->Invoke(This, asyncInfo, asyncStatus))

#endif /* COBJMACROS */

#endif // ____FIAsyncOperationCompletedHandler_1_Windows__CMedia__CCore__CMediaStreamSample_INTERFACE_DEFINED__
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

typedef interface __FIAsyncOperationProgressHandler_2_Windows__CMedia__CCore__CLowLightFusionResult_double __FIAsyncOperationProgressHandler_2_Windows__CMedia__CCore__CLowLightFusionResult_double;

typedef interface __FIAsyncOperationWithProgress_2_Windows__CMedia__CCore__CLowLightFusionResult_double __FIAsyncOperationWithProgress_2_Windows__CMedia__CCore__CLowLightFusionResult_double;

#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x50000
#if !defined(____FIAsyncOperationWithProgressCompletedHandler_2_Windows__CMedia__CCore__CLowLightFusionResult_double_INTERFACE_DEFINED__)
#define ____FIAsyncOperationWithProgressCompletedHandler_2_Windows__CMedia__CCore__CLowLightFusionResult_double_INTERFACE_DEFINED__

typedef interface __FIAsyncOperationWithProgressCompletedHandler_2_Windows__CMedia__CCore__CLowLightFusionResult_double __FIAsyncOperationWithProgressCompletedHandler_2_Windows__CMedia__CCore__CLowLightFusionResult_double;

//  Declare the parameterized interface IID.
EXTERN_C const IID IID___FIAsyncOperationWithProgressCompletedHandler_2_Windows__CMedia__CCore__CLowLightFusionResult_double;

typedef struct __FIAsyncOperationWithProgressCompletedHandler_2_Windows__CMedia__CCore__CLowLightFusionResult_doubleVtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__FIAsyncOperationWithProgressCompletedHandler_2_Windows__CMedia__CCore__CLowLightFusionResult_double* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__FIAsyncOperationWithProgressCompletedHandler_2_Windows__CMedia__CCore__CLowLightFusionResult_double* This);
    ULONG (STDMETHODCALLTYPE* Release)(__FIAsyncOperationWithProgressCompletedHandler_2_Windows__CMedia__CCore__CLowLightFusionResult_double* This);
    HRESULT (STDMETHODCALLTYPE* Invoke)(__FIAsyncOperationWithProgressCompletedHandler_2_Windows__CMedia__CCore__CLowLightFusionResult_double* This,
        __FIAsyncOperationWithProgress_2_Windows__CMedia__CCore__CLowLightFusionResult_double* asyncInfo,
        AsyncStatus asyncStatus);

    END_INTERFACE
} __FIAsyncOperationWithProgressCompletedHandler_2_Windows__CMedia__CCore__CLowLightFusionResult_doubleVtbl;

interface __FIAsyncOperationWithProgressCompletedHandler_2_Windows__CMedia__CCore__CLowLightFusionResult_double
{
    CONST_VTBL struct __FIAsyncOperationWithProgressCompletedHandler_2_Windows__CMedia__CCore__CLowLightFusionResult_doubleVtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __FIAsyncOperationWithProgressCompletedHandler_2_Windows__CMedia__CCore__CLowLightFusionResult_double_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __FIAsyncOperationWithProgressCompletedHandler_2_Windows__CMedia__CCore__CLowLightFusionResult_double_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __FIAsyncOperationWithProgressCompletedHandler_2_Windows__CMedia__CCore__CLowLightFusionResult_double_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __FIAsyncOperationWithProgressCompletedHandler_2_Windows__CMedia__CCore__CLowLightFusionResult_double_Invoke(This, asyncInfo, asyncStatus) \
    ((This)->lpVtbl->Invoke(This, asyncInfo, asyncStatus))

#endif /* COBJMACROS */

#endif // ____FIAsyncOperationWithProgressCompletedHandler_2_Windows__CMedia__CCore__CLowLightFusionResult_double_INTERFACE_DEFINED__
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x50000

#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x50000
#if !defined(____FIAsyncOperationWithProgress_2_Windows__CMedia__CCore__CLowLightFusionResult_double_INTERFACE_DEFINED__)
#define ____FIAsyncOperationWithProgress_2_Windows__CMedia__CCore__CLowLightFusionResult_double_INTERFACE_DEFINED__

typedef interface __FIAsyncOperationWithProgress_2_Windows__CMedia__CCore__CLowLightFusionResult_double __FIAsyncOperationWithProgress_2_Windows__CMedia__CCore__CLowLightFusionResult_double;

//  Declare the parameterized interface IID.
EXTERN_C const IID IID___FIAsyncOperationWithProgress_2_Windows__CMedia__CCore__CLowLightFusionResult_double;

typedef struct __FIAsyncOperationWithProgress_2_Windows__CMedia__CCore__CLowLightFusionResult_doubleVtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__FIAsyncOperationWithProgress_2_Windows__CMedia__CCore__CLowLightFusionResult_double* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__FIAsyncOperationWithProgress_2_Windows__CMedia__CCore__CLowLightFusionResult_double* This);
    ULONG (STDMETHODCALLTYPE* Release)(__FIAsyncOperationWithProgress_2_Windows__CMedia__CCore__CLowLightFusionResult_double* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__FIAsyncOperationWithProgress_2_Windows__CMedia__CCore__CLowLightFusionResult_double* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__FIAsyncOperationWithProgress_2_Windows__CMedia__CCore__CLowLightFusionResult_double* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__FIAsyncOperationWithProgress_2_Windows__CMedia__CCore__CLowLightFusionResult_double* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* put_Progress)(__FIAsyncOperationWithProgress_2_Windows__CMedia__CCore__CLowLightFusionResult_double* This,
        __FIAsyncOperationProgressHandler_2_Windows__CMedia__CCore__CLowLightFusionResult_double* handler);
    HRESULT (STDMETHODCALLTYPE* get_Progress)(__FIAsyncOperationWithProgress_2_Windows__CMedia__CCore__CLowLightFusionResult_double* This,
        __FIAsyncOperationProgressHandler_2_Windows__CMedia__CCore__CLowLightFusionResult_double** result);
    HRESULT (STDMETHODCALLTYPE* put_Completed)(__FIAsyncOperationWithProgress_2_Windows__CMedia__CCore__CLowLightFusionResult_double* This,
        __FIAsyncOperationWithProgressCompletedHandler_2_Windows__CMedia__CCore__CLowLightFusionResult_double* handler);
    HRESULT (STDMETHODCALLTYPE* get_Completed)(__FIAsyncOperationWithProgress_2_Windows__CMedia__CCore__CLowLightFusionResult_double* This,
        __FIAsyncOperationWithProgressCompletedHandler_2_Windows__CMedia__CCore__CLowLightFusionResult_double** result);
    HRESULT (STDMETHODCALLTYPE* GetResults)(__FIAsyncOperationWithProgress_2_Windows__CMedia__CCore__CLowLightFusionResult_double* This,
        __x_ABI_CWindows_CMedia_CCore_CILowLightFusionResult** result);

    END_INTERFACE
} __FIAsyncOperationWithProgress_2_Windows__CMedia__CCore__CLowLightFusionResult_doubleVtbl;

interface __FIAsyncOperationWithProgress_2_Windows__CMedia__CCore__CLowLightFusionResult_double
{
    CONST_VTBL struct __FIAsyncOperationWithProgress_2_Windows__CMedia__CCore__CLowLightFusionResult_doubleVtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __FIAsyncOperationWithProgress_2_Windows__CMedia__CCore__CLowLightFusionResult_double_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __FIAsyncOperationWithProgress_2_Windows__CMedia__CCore__CLowLightFusionResult_double_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __FIAsyncOperationWithProgress_2_Windows__CMedia__CCore__CLowLightFusionResult_double_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __FIAsyncOperationWithProgress_2_Windows__CMedia__CCore__CLowLightFusionResult_double_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __FIAsyncOperationWithProgress_2_Windows__CMedia__CCore__CLowLightFusionResult_double_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __FIAsyncOperationWithProgress_2_Windows__CMedia__CCore__CLowLightFusionResult_double_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __FIAsyncOperationWithProgress_2_Windows__CMedia__CCore__CLowLightFusionResult_double_put_Progress(This, handler) \
    ((This)->lpVtbl->put_Progress(This, handler))

#define __FIAsyncOperationWithProgress_2_Windows__CMedia__CCore__CLowLightFusionResult_double_get_Progress(This, result) \
    ((This)->lpVtbl->get_Progress(This, result))

#define __FIAsyncOperationWithProgress_2_Windows__CMedia__CCore__CLowLightFusionResult_double_put_Completed(This, handler) \
    ((This)->lpVtbl->put_Completed(This, handler))

#define __FIAsyncOperationWithProgress_2_Windows__CMedia__CCore__CLowLightFusionResult_double_get_Completed(This, result) \
    ((This)->lpVtbl->get_Completed(This, result))

#define __FIAsyncOperationWithProgress_2_Windows__CMedia__CCore__CLowLightFusionResult_double_GetResults(This, result) \
    ((This)->lpVtbl->GetResults(This, result))

#endif /* COBJMACROS */

#endif // ____FIAsyncOperationWithProgress_2_Windows__CMedia__CCore__CLowLightFusionResult_double_INTERFACE_DEFINED__
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x50000

#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x50000
#if !defined(____FIAsyncOperationProgressHandler_2_Windows__CMedia__CCore__CLowLightFusionResult_double_INTERFACE_DEFINED__)
#define ____FIAsyncOperationProgressHandler_2_Windows__CMedia__CCore__CLowLightFusionResult_double_INTERFACE_DEFINED__

typedef interface __FIAsyncOperationProgressHandler_2_Windows__CMedia__CCore__CLowLightFusionResult_double __FIAsyncOperationProgressHandler_2_Windows__CMedia__CCore__CLowLightFusionResult_double;

//  Declare the parameterized interface IID.
EXTERN_C const IID IID___FIAsyncOperationProgressHandler_2_Windows__CMedia__CCore__CLowLightFusionResult_double;

typedef struct __FIAsyncOperationProgressHandler_2_Windows__CMedia__CCore__CLowLightFusionResult_doubleVtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__FIAsyncOperationProgressHandler_2_Windows__CMedia__CCore__CLowLightFusionResult_double* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__FIAsyncOperationProgressHandler_2_Windows__CMedia__CCore__CLowLightFusionResult_double* This);
    ULONG (STDMETHODCALLTYPE* Release)(__FIAsyncOperationProgressHandler_2_Windows__CMedia__CCore__CLowLightFusionResult_double* This);
    HRESULT (STDMETHODCALLTYPE* Invoke)(__FIAsyncOperationProgressHandler_2_Windows__CMedia__CCore__CLowLightFusionResult_double* This,
        __FIAsyncOperationWithProgress_2_Windows__CMedia__CCore__CLowLightFusionResult_double* asyncInfo,
        DOUBLE progressInfo);

    END_INTERFACE
} __FIAsyncOperationProgressHandler_2_Windows__CMedia__CCore__CLowLightFusionResult_doubleVtbl;

interface __FIAsyncOperationProgressHandler_2_Windows__CMedia__CCore__CLowLightFusionResult_double
{
    CONST_VTBL struct __FIAsyncOperationProgressHandler_2_Windows__CMedia__CCore__CLowLightFusionResult_doubleVtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __FIAsyncOperationProgressHandler_2_Windows__CMedia__CCore__CLowLightFusionResult_double_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __FIAsyncOperationProgressHandler_2_Windows__CMedia__CCore__CLowLightFusionResult_double_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __FIAsyncOperationProgressHandler_2_Windows__CMedia__CCore__CLowLightFusionResult_double_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __FIAsyncOperationProgressHandler_2_Windows__CMedia__CCore__CLowLightFusionResult_double_Invoke(This, asyncInfo, progressInfo) \
    ((This)->lpVtbl->Invoke(This, asyncInfo, progressInfo))

#endif /* COBJMACROS */

#endif // ____FIAsyncOperationProgressHandler_2_Windows__CMedia__CCore__CLowLightFusionResult_double_INTERFACE_DEFINED__
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x50000

#if !defined(____FIIterator_1_HSTRING_INTERFACE_DEFINED__)
#define ____FIIterator_1_HSTRING_INTERFACE_DEFINED__

typedef interface __FIIterator_1_HSTRING __FIIterator_1_HSTRING;

//  Declare the parameterized interface IID.
EXTERN_C const IID IID___FIIterator_1_HSTRING;

typedef struct __FIIterator_1_HSTRINGVtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__FIIterator_1_HSTRING* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__FIIterator_1_HSTRING* This);
    ULONG (STDMETHODCALLTYPE* Release)(__FIIterator_1_HSTRING* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__FIIterator_1_HSTRING* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__FIIterator_1_HSTRING* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__FIIterator_1_HSTRING* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* get_Current)(__FIIterator_1_HSTRING* This,
        HSTRING* result);
    HRESULT (STDMETHODCALLTYPE* get_HasCurrent)(__FIIterator_1_HSTRING* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* MoveNext)(__FIIterator_1_HSTRING* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__FIIterator_1_HSTRING* This,
        UINT32 itemsLength,
        HSTRING* items,
        UINT32* result);

    END_INTERFACE
} __FIIterator_1_HSTRINGVtbl;

interface __FIIterator_1_HSTRING
{
    CONST_VTBL struct __FIIterator_1_HSTRINGVtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __FIIterator_1_HSTRING_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __FIIterator_1_HSTRING_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __FIIterator_1_HSTRING_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __FIIterator_1_HSTRING_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __FIIterator_1_HSTRING_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __FIIterator_1_HSTRING_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __FIIterator_1_HSTRING_get_Current(This, result) \
    ((This)->lpVtbl->get_Current(This, result))

#define __FIIterator_1_HSTRING_get_HasCurrent(This, result) \
    ((This)->lpVtbl->get_HasCurrent(This, result))

#define __FIIterator_1_HSTRING_MoveNext(This, result) \
    ((This)->lpVtbl->MoveNext(This, result))

#define __FIIterator_1_HSTRING_GetMany(This, itemsLength, items, result) \
    ((This)->lpVtbl->GetMany(This, itemsLength, items, result))

#endif /* COBJMACROS */

#endif // ____FIIterator_1_HSTRING_INTERFACE_DEFINED__

#if !defined(____FIIterable_1_HSTRING_INTERFACE_DEFINED__)
#define ____FIIterable_1_HSTRING_INTERFACE_DEFINED__

typedef interface __FIIterable_1_HSTRING __FIIterable_1_HSTRING;

//  Declare the parameterized interface IID.
EXTERN_C const IID IID___FIIterable_1_HSTRING;

typedef struct __FIIterable_1_HSTRINGVtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__FIIterable_1_HSTRING* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__FIIterable_1_HSTRING* This);
    ULONG (STDMETHODCALLTYPE* Release)(__FIIterable_1_HSTRING* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__FIIterable_1_HSTRING* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__FIIterable_1_HSTRING* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__FIIterable_1_HSTRING* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* First)(__FIIterable_1_HSTRING* This,
        __FIIterator_1_HSTRING** result);

    END_INTERFACE
} __FIIterable_1_HSTRINGVtbl;

interface __FIIterable_1_HSTRING
{
    CONST_VTBL struct __FIIterable_1_HSTRINGVtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __FIIterable_1_HSTRING_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __FIIterable_1_HSTRING_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __FIIterable_1_HSTRING_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __FIIterable_1_HSTRING_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __FIIterable_1_HSTRING_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __FIIterable_1_HSTRING_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __FIIterable_1_HSTRING_First(This, result) \
    ((This)->lpVtbl->First(This, result))

#endif /* COBJMACROS */

#endif // ____FIIterable_1_HSTRING_INTERFACE_DEFINED__

#if !defined(____FIKeyValuePair_2_GUID_IInspectable_INTERFACE_DEFINED__)
#define ____FIKeyValuePair_2_GUID_IInspectable_INTERFACE_DEFINED__

typedef interface __FIKeyValuePair_2_GUID_IInspectable __FIKeyValuePair_2_GUID_IInspectable;

//  Declare the parameterized interface IID.
EXTERN_C const IID IID___FIKeyValuePair_2_GUID_IInspectable;

typedef struct __FIKeyValuePair_2_GUID_IInspectableVtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__FIKeyValuePair_2_GUID_IInspectable* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__FIKeyValuePair_2_GUID_IInspectable* This);
    ULONG (STDMETHODCALLTYPE* Release)(__FIKeyValuePair_2_GUID_IInspectable* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__FIKeyValuePair_2_GUID_IInspectable* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__FIKeyValuePair_2_GUID_IInspectable* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__FIKeyValuePair_2_GUID_IInspectable* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* get_Key)(__FIKeyValuePair_2_GUID_IInspectable* This,
        GUID* result);
    HRESULT (STDMETHODCALLTYPE* get_Value)(__FIKeyValuePair_2_GUID_IInspectable* This,
        IInspectable** result);

    END_INTERFACE
} __FIKeyValuePair_2_GUID_IInspectableVtbl;

interface __FIKeyValuePair_2_GUID_IInspectable
{
    CONST_VTBL struct __FIKeyValuePair_2_GUID_IInspectableVtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __FIKeyValuePair_2_GUID_IInspectable_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __FIKeyValuePair_2_GUID_IInspectable_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __FIKeyValuePair_2_GUID_IInspectable_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __FIKeyValuePair_2_GUID_IInspectable_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __FIKeyValuePair_2_GUID_IInspectable_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __FIKeyValuePair_2_GUID_IInspectable_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __FIKeyValuePair_2_GUID_IInspectable_get_Key(This, result) \
    ((This)->lpVtbl->get_Key(This, result))

#define __FIKeyValuePair_2_GUID_IInspectable_get_Value(This, result) \
    ((This)->lpVtbl->get_Value(This, result))

#endif /* COBJMACROS */

#endif // ____FIKeyValuePair_2_GUID_IInspectable_INTERFACE_DEFINED__

#if !defined(____FIIterator_1___FIKeyValuePair_2_GUID_IInspectable_INTERFACE_DEFINED__)
#define ____FIIterator_1___FIKeyValuePair_2_GUID_IInspectable_INTERFACE_DEFINED__

typedef interface __FIIterator_1___FIKeyValuePair_2_GUID_IInspectable __FIIterator_1___FIKeyValuePair_2_GUID_IInspectable;

//  Declare the parameterized interface IID.
EXTERN_C const IID IID___FIIterator_1___FIKeyValuePair_2_GUID_IInspectable;

typedef struct __FIIterator_1___FIKeyValuePair_2_GUID_IInspectableVtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__FIIterator_1___FIKeyValuePair_2_GUID_IInspectable* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__FIIterator_1___FIKeyValuePair_2_GUID_IInspectable* This);
    ULONG (STDMETHODCALLTYPE* Release)(__FIIterator_1___FIKeyValuePair_2_GUID_IInspectable* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__FIIterator_1___FIKeyValuePair_2_GUID_IInspectable* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__FIIterator_1___FIKeyValuePair_2_GUID_IInspectable* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__FIIterator_1___FIKeyValuePair_2_GUID_IInspectable* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* get_Current)(__FIIterator_1___FIKeyValuePair_2_GUID_IInspectable* This,
        __FIKeyValuePair_2_GUID_IInspectable** result);
    HRESULT (STDMETHODCALLTYPE* get_HasCurrent)(__FIIterator_1___FIKeyValuePair_2_GUID_IInspectable* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* MoveNext)(__FIIterator_1___FIKeyValuePair_2_GUID_IInspectable* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__FIIterator_1___FIKeyValuePair_2_GUID_IInspectable* This,
        UINT32 itemsLength,
        __FIKeyValuePair_2_GUID_IInspectable** items,
        UINT32* result);

    END_INTERFACE
} __FIIterator_1___FIKeyValuePair_2_GUID_IInspectableVtbl;

interface __FIIterator_1___FIKeyValuePair_2_GUID_IInspectable
{
    CONST_VTBL struct __FIIterator_1___FIKeyValuePair_2_GUID_IInspectableVtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __FIIterator_1___FIKeyValuePair_2_GUID_IInspectable_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __FIIterator_1___FIKeyValuePair_2_GUID_IInspectable_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __FIIterator_1___FIKeyValuePair_2_GUID_IInspectable_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __FIIterator_1___FIKeyValuePair_2_GUID_IInspectable_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __FIIterator_1___FIKeyValuePair_2_GUID_IInspectable_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __FIIterator_1___FIKeyValuePair_2_GUID_IInspectable_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __FIIterator_1___FIKeyValuePair_2_GUID_IInspectable_get_Current(This, result) \
    ((This)->lpVtbl->get_Current(This, result))

#define __FIIterator_1___FIKeyValuePair_2_GUID_IInspectable_get_HasCurrent(This, result) \
    ((This)->lpVtbl->get_HasCurrent(This, result))

#define __FIIterator_1___FIKeyValuePair_2_GUID_IInspectable_MoveNext(This, result) \
    ((This)->lpVtbl->MoveNext(This, result))

#define __FIIterator_1___FIKeyValuePair_2_GUID_IInspectable_GetMany(This, itemsLength, items, result) \
    ((This)->lpVtbl->GetMany(This, itemsLength, items, result))

#endif /* COBJMACROS */

#endif // ____FIIterator_1___FIKeyValuePair_2_GUID_IInspectable_INTERFACE_DEFINED__

#if !defined(____FIIterable_1___FIKeyValuePair_2_GUID_IInspectable_INTERFACE_DEFINED__)
#define ____FIIterable_1___FIKeyValuePair_2_GUID_IInspectable_INTERFACE_DEFINED__

typedef interface __FIIterable_1___FIKeyValuePair_2_GUID_IInspectable __FIIterable_1___FIKeyValuePair_2_GUID_IInspectable;

//  Declare the parameterized interface IID.
EXTERN_C const IID IID___FIIterable_1___FIKeyValuePair_2_GUID_IInspectable;

typedef struct __FIIterable_1___FIKeyValuePair_2_GUID_IInspectableVtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__FIIterable_1___FIKeyValuePair_2_GUID_IInspectable* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__FIIterable_1___FIKeyValuePair_2_GUID_IInspectable* This);
    ULONG (STDMETHODCALLTYPE* Release)(__FIIterable_1___FIKeyValuePair_2_GUID_IInspectable* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__FIIterable_1___FIKeyValuePair_2_GUID_IInspectable* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__FIIterable_1___FIKeyValuePair_2_GUID_IInspectable* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__FIIterable_1___FIKeyValuePair_2_GUID_IInspectable* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* First)(__FIIterable_1___FIKeyValuePair_2_GUID_IInspectable* This,
        __FIIterator_1___FIKeyValuePair_2_GUID_IInspectable** result);

    END_INTERFACE
} __FIIterable_1___FIKeyValuePair_2_GUID_IInspectableVtbl;

interface __FIIterable_1___FIKeyValuePair_2_GUID_IInspectable
{
    CONST_VTBL struct __FIIterable_1___FIKeyValuePair_2_GUID_IInspectableVtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __FIIterable_1___FIKeyValuePair_2_GUID_IInspectable_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __FIIterable_1___FIKeyValuePair_2_GUID_IInspectable_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __FIIterable_1___FIKeyValuePair_2_GUID_IInspectable_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __FIIterable_1___FIKeyValuePair_2_GUID_IInspectable_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __FIIterable_1___FIKeyValuePair_2_GUID_IInspectable_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __FIIterable_1___FIKeyValuePair_2_GUID_IInspectable_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __FIIterable_1___FIKeyValuePair_2_GUID_IInspectable_First(This, result) \
    ((This)->lpVtbl->First(This, result))

#endif /* COBJMACROS */

#endif // ____FIIterable_1___FIKeyValuePair_2_GUID_IInspectable_INTERFACE_DEFINED__

typedef enum __x_ABI_CWindows_CGraphics_CImaging_CBitmapPixelFormat __x_ABI_CWindows_CGraphics_CImaging_CBitmapPixelFormat;

#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____FIIterator_1_Windows__CGraphics__CImaging__CBitmapPixelFormat_INTERFACE_DEFINED__)
#define ____FIIterator_1_Windows__CGraphics__CImaging__CBitmapPixelFormat_INTERFACE_DEFINED__

typedef interface __FIIterator_1_Windows__CGraphics__CImaging__CBitmapPixelFormat __FIIterator_1_Windows__CGraphics__CImaging__CBitmapPixelFormat;

//  Declare the parameterized interface IID.
EXTERN_C const IID IID___FIIterator_1_Windows__CGraphics__CImaging__CBitmapPixelFormat;

typedef struct __FIIterator_1_Windows__CGraphics__CImaging__CBitmapPixelFormatVtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__FIIterator_1_Windows__CGraphics__CImaging__CBitmapPixelFormat* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__FIIterator_1_Windows__CGraphics__CImaging__CBitmapPixelFormat* This);
    ULONG (STDMETHODCALLTYPE* Release)(__FIIterator_1_Windows__CGraphics__CImaging__CBitmapPixelFormat* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__FIIterator_1_Windows__CGraphics__CImaging__CBitmapPixelFormat* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__FIIterator_1_Windows__CGraphics__CImaging__CBitmapPixelFormat* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__FIIterator_1_Windows__CGraphics__CImaging__CBitmapPixelFormat* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* get_Current)(__FIIterator_1_Windows__CGraphics__CImaging__CBitmapPixelFormat* This,
        enum __x_ABI_CWindows_CGraphics_CImaging_CBitmapPixelFormat* result);
    HRESULT (STDMETHODCALLTYPE* get_HasCurrent)(__FIIterator_1_Windows__CGraphics__CImaging__CBitmapPixelFormat* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* MoveNext)(__FIIterator_1_Windows__CGraphics__CImaging__CBitmapPixelFormat* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__FIIterator_1_Windows__CGraphics__CImaging__CBitmapPixelFormat* This,
        UINT32 itemsLength,
        enum __x_ABI_CWindows_CGraphics_CImaging_CBitmapPixelFormat* items,
        UINT32* result);

    END_INTERFACE
} __FIIterator_1_Windows__CGraphics__CImaging__CBitmapPixelFormatVtbl;

interface __FIIterator_1_Windows__CGraphics__CImaging__CBitmapPixelFormat
{
    CONST_VTBL struct __FIIterator_1_Windows__CGraphics__CImaging__CBitmapPixelFormatVtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __FIIterator_1_Windows__CGraphics__CImaging__CBitmapPixelFormat_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __FIIterator_1_Windows__CGraphics__CImaging__CBitmapPixelFormat_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __FIIterator_1_Windows__CGraphics__CImaging__CBitmapPixelFormat_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __FIIterator_1_Windows__CGraphics__CImaging__CBitmapPixelFormat_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __FIIterator_1_Windows__CGraphics__CImaging__CBitmapPixelFormat_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __FIIterator_1_Windows__CGraphics__CImaging__CBitmapPixelFormat_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __FIIterator_1_Windows__CGraphics__CImaging__CBitmapPixelFormat_get_Current(This, result) \
    ((This)->lpVtbl->get_Current(This, result))

#define __FIIterator_1_Windows__CGraphics__CImaging__CBitmapPixelFormat_get_HasCurrent(This, result) \
    ((This)->lpVtbl->get_HasCurrent(This, result))

#define __FIIterator_1_Windows__CGraphics__CImaging__CBitmapPixelFormat_MoveNext(This, result) \
    ((This)->lpVtbl->MoveNext(This, result))

#define __FIIterator_1_Windows__CGraphics__CImaging__CBitmapPixelFormat_GetMany(This, itemsLength, items, result) \
    ((This)->lpVtbl->GetMany(This, itemsLength, items, result))

#endif /* COBJMACROS */

#endif // ____FIIterator_1_Windows__CGraphics__CImaging__CBitmapPixelFormat_INTERFACE_DEFINED__
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____FIIterable_1_Windows__CGraphics__CImaging__CBitmapPixelFormat_INTERFACE_DEFINED__)
#define ____FIIterable_1_Windows__CGraphics__CImaging__CBitmapPixelFormat_INTERFACE_DEFINED__

typedef interface __FIIterable_1_Windows__CGraphics__CImaging__CBitmapPixelFormat __FIIterable_1_Windows__CGraphics__CImaging__CBitmapPixelFormat;

//  Declare the parameterized interface IID.
EXTERN_C const IID IID___FIIterable_1_Windows__CGraphics__CImaging__CBitmapPixelFormat;

typedef struct __FIIterable_1_Windows__CGraphics__CImaging__CBitmapPixelFormatVtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__FIIterable_1_Windows__CGraphics__CImaging__CBitmapPixelFormat* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__FIIterable_1_Windows__CGraphics__CImaging__CBitmapPixelFormat* This);
    ULONG (STDMETHODCALLTYPE* Release)(__FIIterable_1_Windows__CGraphics__CImaging__CBitmapPixelFormat* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__FIIterable_1_Windows__CGraphics__CImaging__CBitmapPixelFormat* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__FIIterable_1_Windows__CGraphics__CImaging__CBitmapPixelFormat* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__FIIterable_1_Windows__CGraphics__CImaging__CBitmapPixelFormat* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* First)(__FIIterable_1_Windows__CGraphics__CImaging__CBitmapPixelFormat* This,
        __FIIterator_1_Windows__CGraphics__CImaging__CBitmapPixelFormat** result);

    END_INTERFACE
} __FIIterable_1_Windows__CGraphics__CImaging__CBitmapPixelFormatVtbl;

interface __FIIterable_1_Windows__CGraphics__CImaging__CBitmapPixelFormat
{
    CONST_VTBL struct __FIIterable_1_Windows__CGraphics__CImaging__CBitmapPixelFormatVtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __FIIterable_1_Windows__CGraphics__CImaging__CBitmapPixelFormat_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __FIIterable_1_Windows__CGraphics__CImaging__CBitmapPixelFormat_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __FIIterable_1_Windows__CGraphics__CImaging__CBitmapPixelFormat_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __FIIterable_1_Windows__CGraphics__CImaging__CBitmapPixelFormat_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __FIIterable_1_Windows__CGraphics__CImaging__CBitmapPixelFormat_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __FIIterable_1_Windows__CGraphics__CImaging__CBitmapPixelFormat_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __FIIterable_1_Windows__CGraphics__CImaging__CBitmapPixelFormat_First(This, result) \
    ((This)->lpVtbl->First(This, result))

#endif /* COBJMACROS */

#endif // ____FIIterable_1_Windows__CGraphics__CImaging__CBitmapPixelFormat_INTERFACE_DEFINED__
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

#ifndef ____x_ABI_CWindows_CGraphics_CImaging_CISoftwareBitmap_FWD_DEFINED__
#define ____x_ABI_CWindows_CGraphics_CImaging_CISoftwareBitmap_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CGraphics_CImaging_CISoftwareBitmap __x_ABI_CWindows_CGraphics_CImaging_CISoftwareBitmap;

#endif // ____x_ABI_CWindows_CGraphics_CImaging_CISoftwareBitmap_FWD_DEFINED__

#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____FIIterator_1_Windows__CGraphics__CImaging__CSoftwareBitmap_INTERFACE_DEFINED__)
#define ____FIIterator_1_Windows__CGraphics__CImaging__CSoftwareBitmap_INTERFACE_DEFINED__

typedef interface __FIIterator_1_Windows__CGraphics__CImaging__CSoftwareBitmap __FIIterator_1_Windows__CGraphics__CImaging__CSoftwareBitmap;

//  Declare the parameterized interface IID.
EXTERN_C const IID IID___FIIterator_1_Windows__CGraphics__CImaging__CSoftwareBitmap;

typedef struct __FIIterator_1_Windows__CGraphics__CImaging__CSoftwareBitmapVtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__FIIterator_1_Windows__CGraphics__CImaging__CSoftwareBitmap* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__FIIterator_1_Windows__CGraphics__CImaging__CSoftwareBitmap* This);
    ULONG (STDMETHODCALLTYPE* Release)(__FIIterator_1_Windows__CGraphics__CImaging__CSoftwareBitmap* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__FIIterator_1_Windows__CGraphics__CImaging__CSoftwareBitmap* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__FIIterator_1_Windows__CGraphics__CImaging__CSoftwareBitmap* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__FIIterator_1_Windows__CGraphics__CImaging__CSoftwareBitmap* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* get_Current)(__FIIterator_1_Windows__CGraphics__CImaging__CSoftwareBitmap* This,
        __x_ABI_CWindows_CGraphics_CImaging_CISoftwareBitmap** result);
    HRESULT (STDMETHODCALLTYPE* get_HasCurrent)(__FIIterator_1_Windows__CGraphics__CImaging__CSoftwareBitmap* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* MoveNext)(__FIIterator_1_Windows__CGraphics__CImaging__CSoftwareBitmap* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__FIIterator_1_Windows__CGraphics__CImaging__CSoftwareBitmap* This,
        UINT32 itemsLength,
        __x_ABI_CWindows_CGraphics_CImaging_CISoftwareBitmap** items,
        UINT32* result);

    END_INTERFACE
} __FIIterator_1_Windows__CGraphics__CImaging__CSoftwareBitmapVtbl;

interface __FIIterator_1_Windows__CGraphics__CImaging__CSoftwareBitmap
{
    CONST_VTBL struct __FIIterator_1_Windows__CGraphics__CImaging__CSoftwareBitmapVtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __FIIterator_1_Windows__CGraphics__CImaging__CSoftwareBitmap_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __FIIterator_1_Windows__CGraphics__CImaging__CSoftwareBitmap_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __FIIterator_1_Windows__CGraphics__CImaging__CSoftwareBitmap_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __FIIterator_1_Windows__CGraphics__CImaging__CSoftwareBitmap_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __FIIterator_1_Windows__CGraphics__CImaging__CSoftwareBitmap_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __FIIterator_1_Windows__CGraphics__CImaging__CSoftwareBitmap_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __FIIterator_1_Windows__CGraphics__CImaging__CSoftwareBitmap_get_Current(This, result) \
    ((This)->lpVtbl->get_Current(This, result))

#define __FIIterator_1_Windows__CGraphics__CImaging__CSoftwareBitmap_get_HasCurrent(This, result) \
    ((This)->lpVtbl->get_HasCurrent(This, result))

#define __FIIterator_1_Windows__CGraphics__CImaging__CSoftwareBitmap_MoveNext(This, result) \
    ((This)->lpVtbl->MoveNext(This, result))

#define __FIIterator_1_Windows__CGraphics__CImaging__CSoftwareBitmap_GetMany(This, itemsLength, items, result) \
    ((This)->lpVtbl->GetMany(This, itemsLength, items, result))

#endif /* COBJMACROS */

#endif // ____FIIterator_1_Windows__CGraphics__CImaging__CSoftwareBitmap_INTERFACE_DEFINED__
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____FIIterable_1_Windows__CGraphics__CImaging__CSoftwareBitmap_INTERFACE_DEFINED__)
#define ____FIIterable_1_Windows__CGraphics__CImaging__CSoftwareBitmap_INTERFACE_DEFINED__

typedef interface __FIIterable_1_Windows__CGraphics__CImaging__CSoftwareBitmap __FIIterable_1_Windows__CGraphics__CImaging__CSoftwareBitmap;

//  Declare the parameterized interface IID.
EXTERN_C const IID IID___FIIterable_1_Windows__CGraphics__CImaging__CSoftwareBitmap;

typedef struct __FIIterable_1_Windows__CGraphics__CImaging__CSoftwareBitmapVtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__FIIterable_1_Windows__CGraphics__CImaging__CSoftwareBitmap* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__FIIterable_1_Windows__CGraphics__CImaging__CSoftwareBitmap* This);
    ULONG (STDMETHODCALLTYPE* Release)(__FIIterable_1_Windows__CGraphics__CImaging__CSoftwareBitmap* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__FIIterable_1_Windows__CGraphics__CImaging__CSoftwareBitmap* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__FIIterable_1_Windows__CGraphics__CImaging__CSoftwareBitmap* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__FIIterable_1_Windows__CGraphics__CImaging__CSoftwareBitmap* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* First)(__FIIterable_1_Windows__CGraphics__CImaging__CSoftwareBitmap* This,
        __FIIterator_1_Windows__CGraphics__CImaging__CSoftwareBitmap** result);

    END_INTERFACE
} __FIIterable_1_Windows__CGraphics__CImaging__CSoftwareBitmapVtbl;

interface __FIIterable_1_Windows__CGraphics__CImaging__CSoftwareBitmap
{
    CONST_VTBL struct __FIIterable_1_Windows__CGraphics__CImaging__CSoftwareBitmapVtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __FIIterable_1_Windows__CGraphics__CImaging__CSoftwareBitmap_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __FIIterable_1_Windows__CGraphics__CImaging__CSoftwareBitmap_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __FIIterable_1_Windows__CGraphics__CImaging__CSoftwareBitmap_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __FIIterable_1_Windows__CGraphics__CImaging__CSoftwareBitmap_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __FIIterable_1_Windows__CGraphics__CImaging__CSoftwareBitmap_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __FIIterable_1_Windows__CGraphics__CImaging__CSoftwareBitmap_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __FIIterable_1_Windows__CGraphics__CImaging__CSoftwareBitmap_First(This, result) \
    ((This)->lpVtbl->First(This, result))

#endif /* COBJMACROS */

#endif // ____FIIterable_1_Windows__CGraphics__CImaging__CSoftwareBitmap_INTERFACE_DEFINED__
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____FIIterator_1_Windows__CMedia__CCore__CIMediaCue_INTERFACE_DEFINED__)
#define ____FIIterator_1_Windows__CMedia__CCore__CIMediaCue_INTERFACE_DEFINED__

typedef interface __FIIterator_1_Windows__CMedia__CCore__CIMediaCue __FIIterator_1_Windows__CMedia__CCore__CIMediaCue;

//  Declare the parameterized interface IID.
EXTERN_C const IID IID___FIIterator_1_Windows__CMedia__CCore__CIMediaCue;

typedef struct __FIIterator_1_Windows__CMedia__CCore__CIMediaCueVtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__FIIterator_1_Windows__CMedia__CCore__CIMediaCue* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__FIIterator_1_Windows__CMedia__CCore__CIMediaCue* This);
    ULONG (STDMETHODCALLTYPE* Release)(__FIIterator_1_Windows__CMedia__CCore__CIMediaCue* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__FIIterator_1_Windows__CMedia__CCore__CIMediaCue* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__FIIterator_1_Windows__CMedia__CCore__CIMediaCue* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__FIIterator_1_Windows__CMedia__CCore__CIMediaCue* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* get_Current)(__FIIterator_1_Windows__CMedia__CCore__CIMediaCue* This,
        __x_ABI_CWindows_CMedia_CCore_CIMediaCue** result);
    HRESULT (STDMETHODCALLTYPE* get_HasCurrent)(__FIIterator_1_Windows__CMedia__CCore__CIMediaCue* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* MoveNext)(__FIIterator_1_Windows__CMedia__CCore__CIMediaCue* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__FIIterator_1_Windows__CMedia__CCore__CIMediaCue* This,
        UINT32 itemsLength,
        __x_ABI_CWindows_CMedia_CCore_CIMediaCue** items,
        UINT32* result);

    END_INTERFACE
} __FIIterator_1_Windows__CMedia__CCore__CIMediaCueVtbl;

interface __FIIterator_1_Windows__CMedia__CCore__CIMediaCue
{
    CONST_VTBL struct __FIIterator_1_Windows__CMedia__CCore__CIMediaCueVtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __FIIterator_1_Windows__CMedia__CCore__CIMediaCue_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __FIIterator_1_Windows__CMedia__CCore__CIMediaCue_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __FIIterator_1_Windows__CMedia__CCore__CIMediaCue_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __FIIterator_1_Windows__CMedia__CCore__CIMediaCue_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __FIIterator_1_Windows__CMedia__CCore__CIMediaCue_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __FIIterator_1_Windows__CMedia__CCore__CIMediaCue_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __FIIterator_1_Windows__CMedia__CCore__CIMediaCue_get_Current(This, result) \
    ((This)->lpVtbl->get_Current(This, result))

#define __FIIterator_1_Windows__CMedia__CCore__CIMediaCue_get_HasCurrent(This, result) \
    ((This)->lpVtbl->get_HasCurrent(This, result))

#define __FIIterator_1_Windows__CMedia__CCore__CIMediaCue_MoveNext(This, result) \
    ((This)->lpVtbl->MoveNext(This, result))

#define __FIIterator_1_Windows__CMedia__CCore__CIMediaCue_GetMany(This, itemsLength, items, result) \
    ((This)->lpVtbl->GetMany(This, itemsLength, items, result))

#endif /* COBJMACROS */

#endif // ____FIIterator_1_Windows__CMedia__CCore__CIMediaCue_INTERFACE_DEFINED__
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____FIIterable_1_Windows__CMedia__CCore__CIMediaCue_INTERFACE_DEFINED__)
#define ____FIIterable_1_Windows__CMedia__CCore__CIMediaCue_INTERFACE_DEFINED__

typedef interface __FIIterable_1_Windows__CMedia__CCore__CIMediaCue __FIIterable_1_Windows__CMedia__CCore__CIMediaCue;

//  Declare the parameterized interface IID.
EXTERN_C const IID IID___FIIterable_1_Windows__CMedia__CCore__CIMediaCue;

typedef struct __FIIterable_1_Windows__CMedia__CCore__CIMediaCueVtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__FIIterable_1_Windows__CMedia__CCore__CIMediaCue* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__FIIterable_1_Windows__CMedia__CCore__CIMediaCue* This);
    ULONG (STDMETHODCALLTYPE* Release)(__FIIterable_1_Windows__CMedia__CCore__CIMediaCue* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__FIIterable_1_Windows__CMedia__CCore__CIMediaCue* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__FIIterable_1_Windows__CMedia__CCore__CIMediaCue* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__FIIterable_1_Windows__CMedia__CCore__CIMediaCue* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* First)(__FIIterable_1_Windows__CMedia__CCore__CIMediaCue* This,
        __FIIterator_1_Windows__CMedia__CCore__CIMediaCue** result);

    END_INTERFACE
} __FIIterable_1_Windows__CMedia__CCore__CIMediaCueVtbl;

interface __FIIterable_1_Windows__CMedia__CCore__CIMediaCue
{
    CONST_VTBL struct __FIIterable_1_Windows__CMedia__CCore__CIMediaCueVtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __FIIterable_1_Windows__CMedia__CCore__CIMediaCue_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __FIIterable_1_Windows__CMedia__CCore__CIMediaCue_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __FIIterable_1_Windows__CMedia__CCore__CIMediaCue_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __FIIterable_1_Windows__CMedia__CCore__CIMediaCue_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __FIIterable_1_Windows__CMedia__CCore__CIMediaCue_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __FIIterable_1_Windows__CMedia__CCore__CIMediaCue_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __FIIterable_1_Windows__CMedia__CCore__CIMediaCue_First(This, result) \
    ((This)->lpVtbl->First(This, result))

#endif /* COBJMACROS */

#endif // ____FIIterable_1_Windows__CMedia__CCore__CIMediaCue_INTERFACE_DEFINED__
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____FIIterator_1_Windows__CMedia__CCore__CMseSourceBuffer_INTERFACE_DEFINED__)
#define ____FIIterator_1_Windows__CMedia__CCore__CMseSourceBuffer_INTERFACE_DEFINED__

typedef interface __FIIterator_1_Windows__CMedia__CCore__CMseSourceBuffer __FIIterator_1_Windows__CMedia__CCore__CMseSourceBuffer;

//  Declare the parameterized interface IID.
EXTERN_C const IID IID___FIIterator_1_Windows__CMedia__CCore__CMseSourceBuffer;

typedef struct __FIIterator_1_Windows__CMedia__CCore__CMseSourceBufferVtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__FIIterator_1_Windows__CMedia__CCore__CMseSourceBuffer* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__FIIterator_1_Windows__CMedia__CCore__CMseSourceBuffer* This);
    ULONG (STDMETHODCALLTYPE* Release)(__FIIterator_1_Windows__CMedia__CCore__CMseSourceBuffer* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__FIIterator_1_Windows__CMedia__CCore__CMseSourceBuffer* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__FIIterator_1_Windows__CMedia__CCore__CMseSourceBuffer* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__FIIterator_1_Windows__CMedia__CCore__CMseSourceBuffer* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* get_Current)(__FIIterator_1_Windows__CMedia__CCore__CMseSourceBuffer* This,
        __x_ABI_CWindows_CMedia_CCore_CIMseSourceBuffer** result);
    HRESULT (STDMETHODCALLTYPE* get_HasCurrent)(__FIIterator_1_Windows__CMedia__CCore__CMseSourceBuffer* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* MoveNext)(__FIIterator_1_Windows__CMedia__CCore__CMseSourceBuffer* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__FIIterator_1_Windows__CMedia__CCore__CMseSourceBuffer* This,
        UINT32 itemsLength,
        __x_ABI_CWindows_CMedia_CCore_CIMseSourceBuffer** items,
        UINT32* result);

    END_INTERFACE
} __FIIterator_1_Windows__CMedia__CCore__CMseSourceBufferVtbl;

interface __FIIterator_1_Windows__CMedia__CCore__CMseSourceBuffer
{
    CONST_VTBL struct __FIIterator_1_Windows__CMedia__CCore__CMseSourceBufferVtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __FIIterator_1_Windows__CMedia__CCore__CMseSourceBuffer_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __FIIterator_1_Windows__CMedia__CCore__CMseSourceBuffer_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __FIIterator_1_Windows__CMedia__CCore__CMseSourceBuffer_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __FIIterator_1_Windows__CMedia__CCore__CMseSourceBuffer_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __FIIterator_1_Windows__CMedia__CCore__CMseSourceBuffer_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __FIIterator_1_Windows__CMedia__CCore__CMseSourceBuffer_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __FIIterator_1_Windows__CMedia__CCore__CMseSourceBuffer_get_Current(This, result) \
    ((This)->lpVtbl->get_Current(This, result))

#define __FIIterator_1_Windows__CMedia__CCore__CMseSourceBuffer_get_HasCurrent(This, result) \
    ((This)->lpVtbl->get_HasCurrent(This, result))

#define __FIIterator_1_Windows__CMedia__CCore__CMseSourceBuffer_MoveNext(This, result) \
    ((This)->lpVtbl->MoveNext(This, result))

#define __FIIterator_1_Windows__CMedia__CCore__CMseSourceBuffer_GetMany(This, itemsLength, items, result) \
    ((This)->lpVtbl->GetMany(This, itemsLength, items, result))

#endif /* COBJMACROS */

#endif // ____FIIterator_1_Windows__CMedia__CCore__CMseSourceBuffer_INTERFACE_DEFINED__
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____FIIterable_1_Windows__CMedia__CCore__CMseSourceBuffer_INTERFACE_DEFINED__)
#define ____FIIterable_1_Windows__CMedia__CCore__CMseSourceBuffer_INTERFACE_DEFINED__

typedef interface __FIIterable_1_Windows__CMedia__CCore__CMseSourceBuffer __FIIterable_1_Windows__CMedia__CCore__CMseSourceBuffer;

//  Declare the parameterized interface IID.
EXTERN_C const IID IID___FIIterable_1_Windows__CMedia__CCore__CMseSourceBuffer;

typedef struct __FIIterable_1_Windows__CMedia__CCore__CMseSourceBufferVtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__FIIterable_1_Windows__CMedia__CCore__CMseSourceBuffer* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__FIIterable_1_Windows__CMedia__CCore__CMseSourceBuffer* This);
    ULONG (STDMETHODCALLTYPE* Release)(__FIIterable_1_Windows__CMedia__CCore__CMseSourceBuffer* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__FIIterable_1_Windows__CMedia__CCore__CMseSourceBuffer* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__FIIterable_1_Windows__CMedia__CCore__CMseSourceBuffer* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__FIIterable_1_Windows__CMedia__CCore__CMseSourceBuffer* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* First)(__FIIterable_1_Windows__CMedia__CCore__CMseSourceBuffer* This,
        __FIIterator_1_Windows__CMedia__CCore__CMseSourceBuffer** result);

    END_INTERFACE
} __FIIterable_1_Windows__CMedia__CCore__CMseSourceBufferVtbl;

interface __FIIterable_1_Windows__CMedia__CCore__CMseSourceBuffer
{
    CONST_VTBL struct __FIIterable_1_Windows__CMedia__CCore__CMseSourceBufferVtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __FIIterable_1_Windows__CMedia__CCore__CMseSourceBuffer_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __FIIterable_1_Windows__CMedia__CCore__CMseSourceBuffer_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __FIIterable_1_Windows__CMedia__CCore__CMseSourceBuffer_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __FIIterable_1_Windows__CMedia__CCore__CMseSourceBuffer_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __FIIterable_1_Windows__CMedia__CCore__CMseSourceBuffer_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __FIIterable_1_Windows__CMedia__CCore__CMseSourceBuffer_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __FIIterable_1_Windows__CMedia__CCore__CMseSourceBuffer_First(This, result) \
    ((This)->lpVtbl->First(This, result))

#endif /* COBJMACROS */

#endif // ____FIIterable_1_Windows__CMedia__CCore__CMseSourceBuffer_INTERFACE_DEFINED__
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

typedef struct __x_ABI_CWindows_CMedia_CCore_CMseTimeRange __x_ABI_CWindows_CMedia_CCore_CMseTimeRange;

#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____FIIterator_1_Windows__CMedia__CCore__CMseTimeRange_INTERFACE_DEFINED__)
#define ____FIIterator_1_Windows__CMedia__CCore__CMseTimeRange_INTERFACE_DEFINED__

typedef interface __FIIterator_1_Windows__CMedia__CCore__CMseTimeRange __FIIterator_1_Windows__CMedia__CCore__CMseTimeRange;

//  Declare the parameterized interface IID.
EXTERN_C const IID IID___FIIterator_1_Windows__CMedia__CCore__CMseTimeRange;

typedef struct __FIIterator_1_Windows__CMedia__CCore__CMseTimeRangeVtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__FIIterator_1_Windows__CMedia__CCore__CMseTimeRange* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__FIIterator_1_Windows__CMedia__CCore__CMseTimeRange* This);
    ULONG (STDMETHODCALLTYPE* Release)(__FIIterator_1_Windows__CMedia__CCore__CMseTimeRange* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__FIIterator_1_Windows__CMedia__CCore__CMseTimeRange* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__FIIterator_1_Windows__CMedia__CCore__CMseTimeRange* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__FIIterator_1_Windows__CMedia__CCore__CMseTimeRange* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* get_Current)(__FIIterator_1_Windows__CMedia__CCore__CMseTimeRange* This,
        struct __x_ABI_CWindows_CMedia_CCore_CMseTimeRange* result);
    HRESULT (STDMETHODCALLTYPE* get_HasCurrent)(__FIIterator_1_Windows__CMedia__CCore__CMseTimeRange* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* MoveNext)(__FIIterator_1_Windows__CMedia__CCore__CMseTimeRange* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__FIIterator_1_Windows__CMedia__CCore__CMseTimeRange* This,
        UINT32 itemsLength,
        struct __x_ABI_CWindows_CMedia_CCore_CMseTimeRange* items,
        UINT32* result);

    END_INTERFACE
} __FIIterator_1_Windows__CMedia__CCore__CMseTimeRangeVtbl;

interface __FIIterator_1_Windows__CMedia__CCore__CMseTimeRange
{
    CONST_VTBL struct __FIIterator_1_Windows__CMedia__CCore__CMseTimeRangeVtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __FIIterator_1_Windows__CMedia__CCore__CMseTimeRange_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __FIIterator_1_Windows__CMedia__CCore__CMseTimeRange_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __FIIterator_1_Windows__CMedia__CCore__CMseTimeRange_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __FIIterator_1_Windows__CMedia__CCore__CMseTimeRange_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __FIIterator_1_Windows__CMedia__CCore__CMseTimeRange_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __FIIterator_1_Windows__CMedia__CCore__CMseTimeRange_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __FIIterator_1_Windows__CMedia__CCore__CMseTimeRange_get_Current(This, result) \
    ((This)->lpVtbl->get_Current(This, result))

#define __FIIterator_1_Windows__CMedia__CCore__CMseTimeRange_get_HasCurrent(This, result) \
    ((This)->lpVtbl->get_HasCurrent(This, result))

#define __FIIterator_1_Windows__CMedia__CCore__CMseTimeRange_MoveNext(This, result) \
    ((This)->lpVtbl->MoveNext(This, result))

#define __FIIterator_1_Windows__CMedia__CCore__CMseTimeRange_GetMany(This, itemsLength, items, result) \
    ((This)->lpVtbl->GetMany(This, itemsLength, items, result))

#endif /* COBJMACROS */

#endif // ____FIIterator_1_Windows__CMedia__CCore__CMseTimeRange_INTERFACE_DEFINED__
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____FIIterable_1_Windows__CMedia__CCore__CMseTimeRange_INTERFACE_DEFINED__)
#define ____FIIterable_1_Windows__CMedia__CCore__CMseTimeRange_INTERFACE_DEFINED__

typedef interface __FIIterable_1_Windows__CMedia__CCore__CMseTimeRange __FIIterable_1_Windows__CMedia__CCore__CMseTimeRange;

//  Declare the parameterized interface IID.
EXTERN_C const IID IID___FIIterable_1_Windows__CMedia__CCore__CMseTimeRange;

typedef struct __FIIterable_1_Windows__CMedia__CCore__CMseTimeRangeVtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__FIIterable_1_Windows__CMedia__CCore__CMseTimeRange* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__FIIterable_1_Windows__CMedia__CCore__CMseTimeRange* This);
    ULONG (STDMETHODCALLTYPE* Release)(__FIIterable_1_Windows__CMedia__CCore__CMseTimeRange* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__FIIterable_1_Windows__CMedia__CCore__CMseTimeRange* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__FIIterable_1_Windows__CMedia__CCore__CMseTimeRange* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__FIIterable_1_Windows__CMedia__CCore__CMseTimeRange* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* First)(__FIIterable_1_Windows__CMedia__CCore__CMseTimeRange* This,
        __FIIterator_1_Windows__CMedia__CCore__CMseTimeRange** result);

    END_INTERFACE
} __FIIterable_1_Windows__CMedia__CCore__CMseTimeRangeVtbl;

interface __FIIterable_1_Windows__CMedia__CCore__CMseTimeRange
{
    CONST_VTBL struct __FIIterable_1_Windows__CMedia__CCore__CMseTimeRangeVtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __FIIterable_1_Windows__CMedia__CCore__CMseTimeRange_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __FIIterable_1_Windows__CMedia__CCore__CMseTimeRange_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __FIIterable_1_Windows__CMedia__CCore__CMseTimeRange_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __FIIterable_1_Windows__CMedia__CCore__CMseTimeRange_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __FIIterable_1_Windows__CMedia__CCore__CMseTimeRange_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __FIIterable_1_Windows__CMedia__CCore__CMseTimeRange_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __FIIterable_1_Windows__CMedia__CCore__CMseTimeRange_First(This, result) \
    ((This)->lpVtbl->First(This, result))

#endif /* COBJMACROS */

#endif // ____FIIterable_1_Windows__CMedia__CCore__CMseTimeRange_INTERFACE_DEFINED__
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____FIIterator_1_Windows__CMedia__CCore__CTimedMetadataTrack_INTERFACE_DEFINED__)
#define ____FIIterator_1_Windows__CMedia__CCore__CTimedMetadataTrack_INTERFACE_DEFINED__

typedef interface __FIIterator_1_Windows__CMedia__CCore__CTimedMetadataTrack __FIIterator_1_Windows__CMedia__CCore__CTimedMetadataTrack;

//  Declare the parameterized interface IID.
EXTERN_C const IID IID___FIIterator_1_Windows__CMedia__CCore__CTimedMetadataTrack;

typedef struct __FIIterator_1_Windows__CMedia__CCore__CTimedMetadataTrackVtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__FIIterator_1_Windows__CMedia__CCore__CTimedMetadataTrack* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__FIIterator_1_Windows__CMedia__CCore__CTimedMetadataTrack* This);
    ULONG (STDMETHODCALLTYPE* Release)(__FIIterator_1_Windows__CMedia__CCore__CTimedMetadataTrack* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__FIIterator_1_Windows__CMedia__CCore__CTimedMetadataTrack* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__FIIterator_1_Windows__CMedia__CCore__CTimedMetadataTrack* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__FIIterator_1_Windows__CMedia__CCore__CTimedMetadataTrack* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* get_Current)(__FIIterator_1_Windows__CMedia__CCore__CTimedMetadataTrack* This,
        __x_ABI_CWindows_CMedia_CCore_CITimedMetadataTrack** result);
    HRESULT (STDMETHODCALLTYPE* get_HasCurrent)(__FIIterator_1_Windows__CMedia__CCore__CTimedMetadataTrack* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* MoveNext)(__FIIterator_1_Windows__CMedia__CCore__CTimedMetadataTrack* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__FIIterator_1_Windows__CMedia__CCore__CTimedMetadataTrack* This,
        UINT32 itemsLength,
        __x_ABI_CWindows_CMedia_CCore_CITimedMetadataTrack** items,
        UINT32* result);

    END_INTERFACE
} __FIIterator_1_Windows__CMedia__CCore__CTimedMetadataTrackVtbl;

interface __FIIterator_1_Windows__CMedia__CCore__CTimedMetadataTrack
{
    CONST_VTBL struct __FIIterator_1_Windows__CMedia__CCore__CTimedMetadataTrackVtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __FIIterator_1_Windows__CMedia__CCore__CTimedMetadataTrack_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __FIIterator_1_Windows__CMedia__CCore__CTimedMetadataTrack_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __FIIterator_1_Windows__CMedia__CCore__CTimedMetadataTrack_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __FIIterator_1_Windows__CMedia__CCore__CTimedMetadataTrack_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __FIIterator_1_Windows__CMedia__CCore__CTimedMetadataTrack_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __FIIterator_1_Windows__CMedia__CCore__CTimedMetadataTrack_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __FIIterator_1_Windows__CMedia__CCore__CTimedMetadataTrack_get_Current(This, result) \
    ((This)->lpVtbl->get_Current(This, result))

#define __FIIterator_1_Windows__CMedia__CCore__CTimedMetadataTrack_get_HasCurrent(This, result) \
    ((This)->lpVtbl->get_HasCurrent(This, result))

#define __FIIterator_1_Windows__CMedia__CCore__CTimedMetadataTrack_MoveNext(This, result) \
    ((This)->lpVtbl->MoveNext(This, result))

#define __FIIterator_1_Windows__CMedia__CCore__CTimedMetadataTrack_GetMany(This, itemsLength, items, result) \
    ((This)->lpVtbl->GetMany(This, itemsLength, items, result))

#endif /* COBJMACROS */

#endif // ____FIIterator_1_Windows__CMedia__CCore__CTimedMetadataTrack_INTERFACE_DEFINED__
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____FIIterable_1_Windows__CMedia__CCore__CTimedMetadataTrack_INTERFACE_DEFINED__)
#define ____FIIterable_1_Windows__CMedia__CCore__CTimedMetadataTrack_INTERFACE_DEFINED__

typedef interface __FIIterable_1_Windows__CMedia__CCore__CTimedMetadataTrack __FIIterable_1_Windows__CMedia__CCore__CTimedMetadataTrack;

//  Declare the parameterized interface IID.
EXTERN_C const IID IID___FIIterable_1_Windows__CMedia__CCore__CTimedMetadataTrack;

typedef struct __FIIterable_1_Windows__CMedia__CCore__CTimedMetadataTrackVtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__FIIterable_1_Windows__CMedia__CCore__CTimedMetadataTrack* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__FIIterable_1_Windows__CMedia__CCore__CTimedMetadataTrack* This);
    ULONG (STDMETHODCALLTYPE* Release)(__FIIterable_1_Windows__CMedia__CCore__CTimedMetadataTrack* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__FIIterable_1_Windows__CMedia__CCore__CTimedMetadataTrack* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__FIIterable_1_Windows__CMedia__CCore__CTimedMetadataTrack* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__FIIterable_1_Windows__CMedia__CCore__CTimedMetadataTrack* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* First)(__FIIterable_1_Windows__CMedia__CCore__CTimedMetadataTrack* This,
        __FIIterator_1_Windows__CMedia__CCore__CTimedMetadataTrack** result);

    END_INTERFACE
} __FIIterable_1_Windows__CMedia__CCore__CTimedMetadataTrackVtbl;

interface __FIIterable_1_Windows__CMedia__CCore__CTimedMetadataTrack
{
    CONST_VTBL struct __FIIterable_1_Windows__CMedia__CCore__CTimedMetadataTrackVtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __FIIterable_1_Windows__CMedia__CCore__CTimedMetadataTrack_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __FIIterable_1_Windows__CMedia__CCore__CTimedMetadataTrack_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __FIIterable_1_Windows__CMedia__CCore__CTimedMetadataTrack_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __FIIterable_1_Windows__CMedia__CCore__CTimedMetadataTrack_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __FIIterable_1_Windows__CMedia__CCore__CTimedMetadataTrack_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __FIIterable_1_Windows__CMedia__CCore__CTimedMetadataTrack_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __FIIterable_1_Windows__CMedia__CCore__CTimedMetadataTrack_First(This, result) \
    ((This)->lpVtbl->First(This, result))

#endif /* COBJMACROS */

#endif // ____FIIterable_1_Windows__CMedia__CCore__CTimedMetadataTrack_INTERFACE_DEFINED__
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____FIIterator_1_Windows__CMedia__CCore__CTimedTextLine_INTERFACE_DEFINED__)
#define ____FIIterator_1_Windows__CMedia__CCore__CTimedTextLine_INTERFACE_DEFINED__

typedef interface __FIIterator_1_Windows__CMedia__CCore__CTimedTextLine __FIIterator_1_Windows__CMedia__CCore__CTimedTextLine;

//  Declare the parameterized interface IID.
EXTERN_C const IID IID___FIIterator_1_Windows__CMedia__CCore__CTimedTextLine;

typedef struct __FIIterator_1_Windows__CMedia__CCore__CTimedTextLineVtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__FIIterator_1_Windows__CMedia__CCore__CTimedTextLine* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__FIIterator_1_Windows__CMedia__CCore__CTimedTextLine* This);
    ULONG (STDMETHODCALLTYPE* Release)(__FIIterator_1_Windows__CMedia__CCore__CTimedTextLine* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__FIIterator_1_Windows__CMedia__CCore__CTimedTextLine* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__FIIterator_1_Windows__CMedia__CCore__CTimedTextLine* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__FIIterator_1_Windows__CMedia__CCore__CTimedTextLine* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* get_Current)(__FIIterator_1_Windows__CMedia__CCore__CTimedTextLine* This,
        __x_ABI_CWindows_CMedia_CCore_CITimedTextLine** result);
    HRESULT (STDMETHODCALLTYPE* get_HasCurrent)(__FIIterator_1_Windows__CMedia__CCore__CTimedTextLine* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* MoveNext)(__FIIterator_1_Windows__CMedia__CCore__CTimedTextLine* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__FIIterator_1_Windows__CMedia__CCore__CTimedTextLine* This,
        UINT32 itemsLength,
        __x_ABI_CWindows_CMedia_CCore_CITimedTextLine** items,
        UINT32* result);

    END_INTERFACE
} __FIIterator_1_Windows__CMedia__CCore__CTimedTextLineVtbl;

interface __FIIterator_1_Windows__CMedia__CCore__CTimedTextLine
{
    CONST_VTBL struct __FIIterator_1_Windows__CMedia__CCore__CTimedTextLineVtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __FIIterator_1_Windows__CMedia__CCore__CTimedTextLine_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __FIIterator_1_Windows__CMedia__CCore__CTimedTextLine_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __FIIterator_1_Windows__CMedia__CCore__CTimedTextLine_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __FIIterator_1_Windows__CMedia__CCore__CTimedTextLine_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __FIIterator_1_Windows__CMedia__CCore__CTimedTextLine_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __FIIterator_1_Windows__CMedia__CCore__CTimedTextLine_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __FIIterator_1_Windows__CMedia__CCore__CTimedTextLine_get_Current(This, result) \
    ((This)->lpVtbl->get_Current(This, result))

#define __FIIterator_1_Windows__CMedia__CCore__CTimedTextLine_get_HasCurrent(This, result) \
    ((This)->lpVtbl->get_HasCurrent(This, result))

#define __FIIterator_1_Windows__CMedia__CCore__CTimedTextLine_MoveNext(This, result) \
    ((This)->lpVtbl->MoveNext(This, result))

#define __FIIterator_1_Windows__CMedia__CCore__CTimedTextLine_GetMany(This, itemsLength, items, result) \
    ((This)->lpVtbl->GetMany(This, itemsLength, items, result))

#endif /* COBJMACROS */

#endif // ____FIIterator_1_Windows__CMedia__CCore__CTimedTextLine_INTERFACE_DEFINED__
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____FIIterable_1_Windows__CMedia__CCore__CTimedTextLine_INTERFACE_DEFINED__)
#define ____FIIterable_1_Windows__CMedia__CCore__CTimedTextLine_INTERFACE_DEFINED__

typedef interface __FIIterable_1_Windows__CMedia__CCore__CTimedTextLine __FIIterable_1_Windows__CMedia__CCore__CTimedTextLine;

//  Declare the parameterized interface IID.
EXTERN_C const IID IID___FIIterable_1_Windows__CMedia__CCore__CTimedTextLine;

typedef struct __FIIterable_1_Windows__CMedia__CCore__CTimedTextLineVtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__FIIterable_1_Windows__CMedia__CCore__CTimedTextLine* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__FIIterable_1_Windows__CMedia__CCore__CTimedTextLine* This);
    ULONG (STDMETHODCALLTYPE* Release)(__FIIterable_1_Windows__CMedia__CCore__CTimedTextLine* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__FIIterable_1_Windows__CMedia__CCore__CTimedTextLine* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__FIIterable_1_Windows__CMedia__CCore__CTimedTextLine* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__FIIterable_1_Windows__CMedia__CCore__CTimedTextLine* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* First)(__FIIterable_1_Windows__CMedia__CCore__CTimedTextLine* This,
        __FIIterator_1_Windows__CMedia__CCore__CTimedTextLine** result);

    END_INTERFACE
} __FIIterable_1_Windows__CMedia__CCore__CTimedTextLineVtbl;

interface __FIIterable_1_Windows__CMedia__CCore__CTimedTextLine
{
    CONST_VTBL struct __FIIterable_1_Windows__CMedia__CCore__CTimedTextLineVtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __FIIterable_1_Windows__CMedia__CCore__CTimedTextLine_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __FIIterable_1_Windows__CMedia__CCore__CTimedTextLine_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __FIIterable_1_Windows__CMedia__CCore__CTimedTextLine_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __FIIterable_1_Windows__CMedia__CCore__CTimedTextLine_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __FIIterable_1_Windows__CMedia__CCore__CTimedTextLine_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __FIIterable_1_Windows__CMedia__CCore__CTimedTextLine_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __FIIterable_1_Windows__CMedia__CCore__CTimedTextLine_First(This, result) \
    ((This)->lpVtbl->First(This, result))

#endif /* COBJMACROS */

#endif // ____FIIterable_1_Windows__CMedia__CCore__CTimedTextLine_INTERFACE_DEFINED__
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____FIIterator_1_Windows__CMedia__CCore__CTimedTextSource_INTERFACE_DEFINED__)
#define ____FIIterator_1_Windows__CMedia__CCore__CTimedTextSource_INTERFACE_DEFINED__

typedef interface __FIIterator_1_Windows__CMedia__CCore__CTimedTextSource __FIIterator_1_Windows__CMedia__CCore__CTimedTextSource;

//  Declare the parameterized interface IID.
EXTERN_C const IID IID___FIIterator_1_Windows__CMedia__CCore__CTimedTextSource;

typedef struct __FIIterator_1_Windows__CMedia__CCore__CTimedTextSourceVtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__FIIterator_1_Windows__CMedia__CCore__CTimedTextSource* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__FIIterator_1_Windows__CMedia__CCore__CTimedTextSource* This);
    ULONG (STDMETHODCALLTYPE* Release)(__FIIterator_1_Windows__CMedia__CCore__CTimedTextSource* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__FIIterator_1_Windows__CMedia__CCore__CTimedTextSource* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__FIIterator_1_Windows__CMedia__CCore__CTimedTextSource* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__FIIterator_1_Windows__CMedia__CCore__CTimedTextSource* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* get_Current)(__FIIterator_1_Windows__CMedia__CCore__CTimedTextSource* This,
        __x_ABI_CWindows_CMedia_CCore_CITimedTextSource** result);
    HRESULT (STDMETHODCALLTYPE* get_HasCurrent)(__FIIterator_1_Windows__CMedia__CCore__CTimedTextSource* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* MoveNext)(__FIIterator_1_Windows__CMedia__CCore__CTimedTextSource* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__FIIterator_1_Windows__CMedia__CCore__CTimedTextSource* This,
        UINT32 itemsLength,
        __x_ABI_CWindows_CMedia_CCore_CITimedTextSource** items,
        UINT32* result);

    END_INTERFACE
} __FIIterator_1_Windows__CMedia__CCore__CTimedTextSourceVtbl;

interface __FIIterator_1_Windows__CMedia__CCore__CTimedTextSource
{
    CONST_VTBL struct __FIIterator_1_Windows__CMedia__CCore__CTimedTextSourceVtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __FIIterator_1_Windows__CMedia__CCore__CTimedTextSource_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __FIIterator_1_Windows__CMedia__CCore__CTimedTextSource_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __FIIterator_1_Windows__CMedia__CCore__CTimedTextSource_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __FIIterator_1_Windows__CMedia__CCore__CTimedTextSource_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __FIIterator_1_Windows__CMedia__CCore__CTimedTextSource_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __FIIterator_1_Windows__CMedia__CCore__CTimedTextSource_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __FIIterator_1_Windows__CMedia__CCore__CTimedTextSource_get_Current(This, result) \
    ((This)->lpVtbl->get_Current(This, result))

#define __FIIterator_1_Windows__CMedia__CCore__CTimedTextSource_get_HasCurrent(This, result) \
    ((This)->lpVtbl->get_HasCurrent(This, result))

#define __FIIterator_1_Windows__CMedia__CCore__CTimedTextSource_MoveNext(This, result) \
    ((This)->lpVtbl->MoveNext(This, result))

#define __FIIterator_1_Windows__CMedia__CCore__CTimedTextSource_GetMany(This, itemsLength, items, result) \
    ((This)->lpVtbl->GetMany(This, itemsLength, items, result))

#endif /* COBJMACROS */

#endif // ____FIIterator_1_Windows__CMedia__CCore__CTimedTextSource_INTERFACE_DEFINED__
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____FIIterable_1_Windows__CMedia__CCore__CTimedTextSource_INTERFACE_DEFINED__)
#define ____FIIterable_1_Windows__CMedia__CCore__CTimedTextSource_INTERFACE_DEFINED__

typedef interface __FIIterable_1_Windows__CMedia__CCore__CTimedTextSource __FIIterable_1_Windows__CMedia__CCore__CTimedTextSource;

//  Declare the parameterized interface IID.
EXTERN_C const IID IID___FIIterable_1_Windows__CMedia__CCore__CTimedTextSource;

typedef struct __FIIterable_1_Windows__CMedia__CCore__CTimedTextSourceVtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__FIIterable_1_Windows__CMedia__CCore__CTimedTextSource* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__FIIterable_1_Windows__CMedia__CCore__CTimedTextSource* This);
    ULONG (STDMETHODCALLTYPE* Release)(__FIIterable_1_Windows__CMedia__CCore__CTimedTextSource* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__FIIterable_1_Windows__CMedia__CCore__CTimedTextSource* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__FIIterable_1_Windows__CMedia__CCore__CTimedTextSource* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__FIIterable_1_Windows__CMedia__CCore__CTimedTextSource* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* First)(__FIIterable_1_Windows__CMedia__CCore__CTimedTextSource* This,
        __FIIterator_1_Windows__CMedia__CCore__CTimedTextSource** result);

    END_INTERFACE
} __FIIterable_1_Windows__CMedia__CCore__CTimedTextSourceVtbl;

interface __FIIterable_1_Windows__CMedia__CCore__CTimedTextSource
{
    CONST_VTBL struct __FIIterable_1_Windows__CMedia__CCore__CTimedTextSourceVtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __FIIterable_1_Windows__CMedia__CCore__CTimedTextSource_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __FIIterable_1_Windows__CMedia__CCore__CTimedTextSource_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __FIIterable_1_Windows__CMedia__CCore__CTimedTextSource_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __FIIterable_1_Windows__CMedia__CCore__CTimedTextSource_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __FIIterable_1_Windows__CMedia__CCore__CTimedTextSource_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __FIIterable_1_Windows__CMedia__CCore__CTimedTextSource_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __FIIterable_1_Windows__CMedia__CCore__CTimedTextSource_First(This, result) \
    ((This)->lpVtbl->First(This, result))

#endif /* COBJMACROS */

#endif // ____FIIterable_1_Windows__CMedia__CCore__CTimedTextSource_INTERFACE_DEFINED__
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____FIIterator_1_Windows__CMedia__CCore__CTimedTextSubformat_INTERFACE_DEFINED__)
#define ____FIIterator_1_Windows__CMedia__CCore__CTimedTextSubformat_INTERFACE_DEFINED__

typedef interface __FIIterator_1_Windows__CMedia__CCore__CTimedTextSubformat __FIIterator_1_Windows__CMedia__CCore__CTimedTextSubformat;

//  Declare the parameterized interface IID.
EXTERN_C const IID IID___FIIterator_1_Windows__CMedia__CCore__CTimedTextSubformat;

typedef struct __FIIterator_1_Windows__CMedia__CCore__CTimedTextSubformatVtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__FIIterator_1_Windows__CMedia__CCore__CTimedTextSubformat* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__FIIterator_1_Windows__CMedia__CCore__CTimedTextSubformat* This);
    ULONG (STDMETHODCALLTYPE* Release)(__FIIterator_1_Windows__CMedia__CCore__CTimedTextSubformat* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__FIIterator_1_Windows__CMedia__CCore__CTimedTextSubformat* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__FIIterator_1_Windows__CMedia__CCore__CTimedTextSubformat* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__FIIterator_1_Windows__CMedia__CCore__CTimedTextSubformat* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* get_Current)(__FIIterator_1_Windows__CMedia__CCore__CTimedTextSubformat* This,
        __x_ABI_CWindows_CMedia_CCore_CITimedTextSubformat** result);
    HRESULT (STDMETHODCALLTYPE* get_HasCurrent)(__FIIterator_1_Windows__CMedia__CCore__CTimedTextSubformat* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* MoveNext)(__FIIterator_1_Windows__CMedia__CCore__CTimedTextSubformat* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__FIIterator_1_Windows__CMedia__CCore__CTimedTextSubformat* This,
        UINT32 itemsLength,
        __x_ABI_CWindows_CMedia_CCore_CITimedTextSubformat** items,
        UINT32* result);

    END_INTERFACE
} __FIIterator_1_Windows__CMedia__CCore__CTimedTextSubformatVtbl;

interface __FIIterator_1_Windows__CMedia__CCore__CTimedTextSubformat
{
    CONST_VTBL struct __FIIterator_1_Windows__CMedia__CCore__CTimedTextSubformatVtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __FIIterator_1_Windows__CMedia__CCore__CTimedTextSubformat_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __FIIterator_1_Windows__CMedia__CCore__CTimedTextSubformat_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __FIIterator_1_Windows__CMedia__CCore__CTimedTextSubformat_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __FIIterator_1_Windows__CMedia__CCore__CTimedTextSubformat_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __FIIterator_1_Windows__CMedia__CCore__CTimedTextSubformat_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __FIIterator_1_Windows__CMedia__CCore__CTimedTextSubformat_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __FIIterator_1_Windows__CMedia__CCore__CTimedTextSubformat_get_Current(This, result) \
    ((This)->lpVtbl->get_Current(This, result))

#define __FIIterator_1_Windows__CMedia__CCore__CTimedTextSubformat_get_HasCurrent(This, result) \
    ((This)->lpVtbl->get_HasCurrent(This, result))

#define __FIIterator_1_Windows__CMedia__CCore__CTimedTextSubformat_MoveNext(This, result) \
    ((This)->lpVtbl->MoveNext(This, result))

#define __FIIterator_1_Windows__CMedia__CCore__CTimedTextSubformat_GetMany(This, itemsLength, items, result) \
    ((This)->lpVtbl->GetMany(This, itemsLength, items, result))

#endif /* COBJMACROS */

#endif // ____FIIterator_1_Windows__CMedia__CCore__CTimedTextSubformat_INTERFACE_DEFINED__
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____FIIterable_1_Windows__CMedia__CCore__CTimedTextSubformat_INTERFACE_DEFINED__)
#define ____FIIterable_1_Windows__CMedia__CCore__CTimedTextSubformat_INTERFACE_DEFINED__

typedef interface __FIIterable_1_Windows__CMedia__CCore__CTimedTextSubformat __FIIterable_1_Windows__CMedia__CCore__CTimedTextSubformat;

//  Declare the parameterized interface IID.
EXTERN_C const IID IID___FIIterable_1_Windows__CMedia__CCore__CTimedTextSubformat;

typedef struct __FIIterable_1_Windows__CMedia__CCore__CTimedTextSubformatVtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__FIIterable_1_Windows__CMedia__CCore__CTimedTextSubformat* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__FIIterable_1_Windows__CMedia__CCore__CTimedTextSubformat* This);
    ULONG (STDMETHODCALLTYPE* Release)(__FIIterable_1_Windows__CMedia__CCore__CTimedTextSubformat* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__FIIterable_1_Windows__CMedia__CCore__CTimedTextSubformat* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__FIIterable_1_Windows__CMedia__CCore__CTimedTextSubformat* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__FIIterable_1_Windows__CMedia__CCore__CTimedTextSubformat* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* First)(__FIIterable_1_Windows__CMedia__CCore__CTimedTextSubformat* This,
        __FIIterator_1_Windows__CMedia__CCore__CTimedTextSubformat** result);

    END_INTERFACE
} __FIIterable_1_Windows__CMedia__CCore__CTimedTextSubformatVtbl;

interface __FIIterable_1_Windows__CMedia__CCore__CTimedTextSubformat
{
    CONST_VTBL struct __FIIterable_1_Windows__CMedia__CCore__CTimedTextSubformatVtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __FIIterable_1_Windows__CMedia__CCore__CTimedTextSubformat_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __FIIterable_1_Windows__CMedia__CCore__CTimedTextSubformat_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __FIIterable_1_Windows__CMedia__CCore__CTimedTextSubformat_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __FIIterable_1_Windows__CMedia__CCore__CTimedTextSubformat_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __FIIterable_1_Windows__CMedia__CCore__CTimedTextSubformat_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __FIIterable_1_Windows__CMedia__CCore__CTimedTextSubformat_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __FIIterable_1_Windows__CMedia__CCore__CTimedTextSubformat_First(This, result) \
    ((This)->lpVtbl->First(This, result))

#endif /* COBJMACROS */

#endif // ____FIIterable_1_Windows__CMedia__CCore__CTimedTextSubformat_INTERFACE_DEFINED__
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

#ifndef ____x_ABI_CWindows_CMedia_CDevices_CCore_CIFrameController_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CDevices_CCore_CIFrameController_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CMedia_CDevices_CCore_CIFrameController __x_ABI_CWindows_CMedia_CDevices_CCore_CIFrameController;

#endif // ____x_ABI_CWindows_CMedia_CDevices_CCore_CIFrameController_FWD_DEFINED__

#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____FIIterator_1_Windows__CMedia__CDevices__CCore__CFrameController_INTERFACE_DEFINED__)
#define ____FIIterator_1_Windows__CMedia__CDevices__CCore__CFrameController_INTERFACE_DEFINED__

typedef interface __FIIterator_1_Windows__CMedia__CDevices__CCore__CFrameController __FIIterator_1_Windows__CMedia__CDevices__CCore__CFrameController;

//  Declare the parameterized interface IID.
EXTERN_C const IID IID___FIIterator_1_Windows__CMedia__CDevices__CCore__CFrameController;

typedef struct __FIIterator_1_Windows__CMedia__CDevices__CCore__CFrameControllerVtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__FIIterator_1_Windows__CMedia__CDevices__CCore__CFrameController* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__FIIterator_1_Windows__CMedia__CDevices__CCore__CFrameController* This);
    ULONG (STDMETHODCALLTYPE* Release)(__FIIterator_1_Windows__CMedia__CDevices__CCore__CFrameController* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__FIIterator_1_Windows__CMedia__CDevices__CCore__CFrameController* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__FIIterator_1_Windows__CMedia__CDevices__CCore__CFrameController* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__FIIterator_1_Windows__CMedia__CDevices__CCore__CFrameController* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* get_Current)(__FIIterator_1_Windows__CMedia__CDevices__CCore__CFrameController* This,
        __x_ABI_CWindows_CMedia_CDevices_CCore_CIFrameController** result);
    HRESULT (STDMETHODCALLTYPE* get_HasCurrent)(__FIIterator_1_Windows__CMedia__CDevices__CCore__CFrameController* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* MoveNext)(__FIIterator_1_Windows__CMedia__CDevices__CCore__CFrameController* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__FIIterator_1_Windows__CMedia__CDevices__CCore__CFrameController* This,
        UINT32 itemsLength,
        __x_ABI_CWindows_CMedia_CDevices_CCore_CIFrameController** items,
        UINT32* result);

    END_INTERFACE
} __FIIterator_1_Windows__CMedia__CDevices__CCore__CFrameControllerVtbl;

interface __FIIterator_1_Windows__CMedia__CDevices__CCore__CFrameController
{
    CONST_VTBL struct __FIIterator_1_Windows__CMedia__CDevices__CCore__CFrameControllerVtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __FIIterator_1_Windows__CMedia__CDevices__CCore__CFrameController_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __FIIterator_1_Windows__CMedia__CDevices__CCore__CFrameController_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __FIIterator_1_Windows__CMedia__CDevices__CCore__CFrameController_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __FIIterator_1_Windows__CMedia__CDevices__CCore__CFrameController_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __FIIterator_1_Windows__CMedia__CDevices__CCore__CFrameController_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __FIIterator_1_Windows__CMedia__CDevices__CCore__CFrameController_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __FIIterator_1_Windows__CMedia__CDevices__CCore__CFrameController_get_Current(This, result) \
    ((This)->lpVtbl->get_Current(This, result))

#define __FIIterator_1_Windows__CMedia__CDevices__CCore__CFrameController_get_HasCurrent(This, result) \
    ((This)->lpVtbl->get_HasCurrent(This, result))

#define __FIIterator_1_Windows__CMedia__CDevices__CCore__CFrameController_MoveNext(This, result) \
    ((This)->lpVtbl->MoveNext(This, result))

#define __FIIterator_1_Windows__CMedia__CDevices__CCore__CFrameController_GetMany(This, itemsLength, items, result) \
    ((This)->lpVtbl->GetMany(This, itemsLength, items, result))

#endif /* COBJMACROS */

#endif // ____FIIterator_1_Windows__CMedia__CDevices__CCore__CFrameController_INTERFACE_DEFINED__
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____FIIterable_1_Windows__CMedia__CDevices__CCore__CFrameController_INTERFACE_DEFINED__)
#define ____FIIterable_1_Windows__CMedia__CDevices__CCore__CFrameController_INTERFACE_DEFINED__

typedef interface __FIIterable_1_Windows__CMedia__CDevices__CCore__CFrameController __FIIterable_1_Windows__CMedia__CDevices__CCore__CFrameController;

//  Declare the parameterized interface IID.
EXTERN_C const IID IID___FIIterable_1_Windows__CMedia__CDevices__CCore__CFrameController;

typedef struct __FIIterable_1_Windows__CMedia__CDevices__CCore__CFrameControllerVtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__FIIterable_1_Windows__CMedia__CDevices__CCore__CFrameController* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__FIIterable_1_Windows__CMedia__CDevices__CCore__CFrameController* This);
    ULONG (STDMETHODCALLTYPE* Release)(__FIIterable_1_Windows__CMedia__CDevices__CCore__CFrameController* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__FIIterable_1_Windows__CMedia__CDevices__CCore__CFrameController* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__FIIterable_1_Windows__CMedia__CDevices__CCore__CFrameController* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__FIIterable_1_Windows__CMedia__CDevices__CCore__CFrameController* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* First)(__FIIterable_1_Windows__CMedia__CDevices__CCore__CFrameController* This,
        __FIIterator_1_Windows__CMedia__CDevices__CCore__CFrameController** result);

    END_INTERFACE
} __FIIterable_1_Windows__CMedia__CDevices__CCore__CFrameControllerVtbl;

interface __FIIterable_1_Windows__CMedia__CDevices__CCore__CFrameController
{
    CONST_VTBL struct __FIIterable_1_Windows__CMedia__CDevices__CCore__CFrameControllerVtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __FIIterable_1_Windows__CMedia__CDevices__CCore__CFrameController_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __FIIterable_1_Windows__CMedia__CDevices__CCore__CFrameController_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __FIIterable_1_Windows__CMedia__CDevices__CCore__CFrameController_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __FIIterable_1_Windows__CMedia__CDevices__CCore__CFrameController_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __FIIterable_1_Windows__CMedia__CDevices__CCore__CFrameController_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __FIIterable_1_Windows__CMedia__CDevices__CCore__CFrameController_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __FIIterable_1_Windows__CMedia__CDevices__CCore__CFrameController_First(This, result) \
    ((This)->lpVtbl->First(This, result))

#endif /* COBJMACROS */

#endif // ____FIIterable_1_Windows__CMedia__CDevices__CCore__CFrameController_INTERFACE_DEFINED__
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

#ifndef ____x_ABI_CWindows_CMedia_CFaceAnalysis_CIDetectedFace_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CFaceAnalysis_CIDetectedFace_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CMedia_CFaceAnalysis_CIDetectedFace __x_ABI_CWindows_CMedia_CFaceAnalysis_CIDetectedFace;

#endif // ____x_ABI_CWindows_CMedia_CFaceAnalysis_CIDetectedFace_FWD_DEFINED__

#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____FIIterator_1_Windows__CMedia__CFaceAnalysis__CDetectedFace_INTERFACE_DEFINED__)
#define ____FIIterator_1_Windows__CMedia__CFaceAnalysis__CDetectedFace_INTERFACE_DEFINED__

typedef interface __FIIterator_1_Windows__CMedia__CFaceAnalysis__CDetectedFace __FIIterator_1_Windows__CMedia__CFaceAnalysis__CDetectedFace;

//  Declare the parameterized interface IID.
EXTERN_C const IID IID___FIIterator_1_Windows__CMedia__CFaceAnalysis__CDetectedFace;

typedef struct __FIIterator_1_Windows__CMedia__CFaceAnalysis__CDetectedFaceVtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__FIIterator_1_Windows__CMedia__CFaceAnalysis__CDetectedFace* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__FIIterator_1_Windows__CMedia__CFaceAnalysis__CDetectedFace* This);
    ULONG (STDMETHODCALLTYPE* Release)(__FIIterator_1_Windows__CMedia__CFaceAnalysis__CDetectedFace* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__FIIterator_1_Windows__CMedia__CFaceAnalysis__CDetectedFace* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__FIIterator_1_Windows__CMedia__CFaceAnalysis__CDetectedFace* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__FIIterator_1_Windows__CMedia__CFaceAnalysis__CDetectedFace* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* get_Current)(__FIIterator_1_Windows__CMedia__CFaceAnalysis__CDetectedFace* This,
        __x_ABI_CWindows_CMedia_CFaceAnalysis_CIDetectedFace** result);
    HRESULT (STDMETHODCALLTYPE* get_HasCurrent)(__FIIterator_1_Windows__CMedia__CFaceAnalysis__CDetectedFace* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* MoveNext)(__FIIterator_1_Windows__CMedia__CFaceAnalysis__CDetectedFace* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__FIIterator_1_Windows__CMedia__CFaceAnalysis__CDetectedFace* This,
        UINT32 itemsLength,
        __x_ABI_CWindows_CMedia_CFaceAnalysis_CIDetectedFace** items,
        UINT32* result);

    END_INTERFACE
} __FIIterator_1_Windows__CMedia__CFaceAnalysis__CDetectedFaceVtbl;

interface __FIIterator_1_Windows__CMedia__CFaceAnalysis__CDetectedFace
{
    CONST_VTBL struct __FIIterator_1_Windows__CMedia__CFaceAnalysis__CDetectedFaceVtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __FIIterator_1_Windows__CMedia__CFaceAnalysis__CDetectedFace_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __FIIterator_1_Windows__CMedia__CFaceAnalysis__CDetectedFace_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __FIIterator_1_Windows__CMedia__CFaceAnalysis__CDetectedFace_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __FIIterator_1_Windows__CMedia__CFaceAnalysis__CDetectedFace_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __FIIterator_1_Windows__CMedia__CFaceAnalysis__CDetectedFace_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __FIIterator_1_Windows__CMedia__CFaceAnalysis__CDetectedFace_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __FIIterator_1_Windows__CMedia__CFaceAnalysis__CDetectedFace_get_Current(This, result) \
    ((This)->lpVtbl->get_Current(This, result))

#define __FIIterator_1_Windows__CMedia__CFaceAnalysis__CDetectedFace_get_HasCurrent(This, result) \
    ((This)->lpVtbl->get_HasCurrent(This, result))

#define __FIIterator_1_Windows__CMedia__CFaceAnalysis__CDetectedFace_MoveNext(This, result) \
    ((This)->lpVtbl->MoveNext(This, result))

#define __FIIterator_1_Windows__CMedia__CFaceAnalysis__CDetectedFace_GetMany(This, itemsLength, items, result) \
    ((This)->lpVtbl->GetMany(This, itemsLength, items, result))

#endif /* COBJMACROS */

#endif // ____FIIterator_1_Windows__CMedia__CFaceAnalysis__CDetectedFace_INTERFACE_DEFINED__
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____FIIterable_1_Windows__CMedia__CFaceAnalysis__CDetectedFace_INTERFACE_DEFINED__)
#define ____FIIterable_1_Windows__CMedia__CFaceAnalysis__CDetectedFace_INTERFACE_DEFINED__

typedef interface __FIIterable_1_Windows__CMedia__CFaceAnalysis__CDetectedFace __FIIterable_1_Windows__CMedia__CFaceAnalysis__CDetectedFace;

//  Declare the parameterized interface IID.
EXTERN_C const IID IID___FIIterable_1_Windows__CMedia__CFaceAnalysis__CDetectedFace;

typedef struct __FIIterable_1_Windows__CMedia__CFaceAnalysis__CDetectedFaceVtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__FIIterable_1_Windows__CMedia__CFaceAnalysis__CDetectedFace* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__FIIterable_1_Windows__CMedia__CFaceAnalysis__CDetectedFace* This);
    ULONG (STDMETHODCALLTYPE* Release)(__FIIterable_1_Windows__CMedia__CFaceAnalysis__CDetectedFace* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__FIIterable_1_Windows__CMedia__CFaceAnalysis__CDetectedFace* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__FIIterable_1_Windows__CMedia__CFaceAnalysis__CDetectedFace* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__FIIterable_1_Windows__CMedia__CFaceAnalysis__CDetectedFace* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* First)(__FIIterable_1_Windows__CMedia__CFaceAnalysis__CDetectedFace* This,
        __FIIterator_1_Windows__CMedia__CFaceAnalysis__CDetectedFace** result);

    END_INTERFACE
} __FIIterable_1_Windows__CMedia__CFaceAnalysis__CDetectedFaceVtbl;

interface __FIIterable_1_Windows__CMedia__CFaceAnalysis__CDetectedFace
{
    CONST_VTBL struct __FIIterable_1_Windows__CMedia__CFaceAnalysis__CDetectedFaceVtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __FIIterable_1_Windows__CMedia__CFaceAnalysis__CDetectedFace_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __FIIterable_1_Windows__CMedia__CFaceAnalysis__CDetectedFace_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __FIIterable_1_Windows__CMedia__CFaceAnalysis__CDetectedFace_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __FIIterable_1_Windows__CMedia__CFaceAnalysis__CDetectedFace_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __FIIterable_1_Windows__CMedia__CFaceAnalysis__CDetectedFace_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __FIIterable_1_Windows__CMedia__CFaceAnalysis__CDetectedFace_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __FIIterable_1_Windows__CMedia__CFaceAnalysis__CDetectedFace_First(This, result) \
    ((This)->lpVtbl->First(This, result))

#endif /* COBJMACROS */

#endif // ____FIIterable_1_Windows__CMedia__CFaceAnalysis__CDetectedFace_INTERFACE_DEFINED__
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

typedef interface __FIMapView_2_GUID_IInspectable __FIMapView_2_GUID_IInspectable;

#if !defined(____FIMapView_2_GUID_IInspectable_INTERFACE_DEFINED__)
#define ____FIMapView_2_GUID_IInspectable_INTERFACE_DEFINED__

typedef interface __FIMapView_2_GUID_IInspectable __FIMapView_2_GUID_IInspectable;

//  Declare the parameterized interface IID.
EXTERN_C const IID IID___FIMapView_2_GUID_IInspectable;

typedef struct __FIMapView_2_GUID_IInspectableVtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__FIMapView_2_GUID_IInspectable* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__FIMapView_2_GUID_IInspectable* This);
    ULONG (STDMETHODCALLTYPE* Release)(__FIMapView_2_GUID_IInspectable* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__FIMapView_2_GUID_IInspectable* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__FIMapView_2_GUID_IInspectable* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__FIMapView_2_GUID_IInspectable* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* Lookup)(__FIMapView_2_GUID_IInspectable* This,
        GUID key,
        IInspectable** result);
    HRESULT (STDMETHODCALLTYPE* get_Size)(__FIMapView_2_GUID_IInspectable* This,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* HasKey)(__FIMapView_2_GUID_IInspectable* This,
        GUID key,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* Split)(__FIMapView_2_GUID_IInspectable* This,
        __FIMapView_2_GUID_IInspectable** first,
        __FIMapView_2_GUID_IInspectable** second);

    END_INTERFACE
} __FIMapView_2_GUID_IInspectableVtbl;

interface __FIMapView_2_GUID_IInspectable
{
    CONST_VTBL struct __FIMapView_2_GUID_IInspectableVtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __FIMapView_2_GUID_IInspectable_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __FIMapView_2_GUID_IInspectable_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __FIMapView_2_GUID_IInspectable_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __FIMapView_2_GUID_IInspectable_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __FIMapView_2_GUID_IInspectable_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __FIMapView_2_GUID_IInspectable_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __FIMapView_2_GUID_IInspectable_Lookup(This, key, result) \
    ((This)->lpVtbl->Lookup(This, key, result))

#define __FIMapView_2_GUID_IInspectable_get_Size(This, result) \
    ((This)->lpVtbl->get_Size(This, result))

#define __FIMapView_2_GUID_IInspectable_HasKey(This, key, result) \
    ((This)->lpVtbl->HasKey(This, key, result))

#define __FIMapView_2_GUID_IInspectable_Split(This, first, second) \
    ((This)->lpVtbl->Split(This, first, second))

#endif /* COBJMACROS */

#endif // ____FIMapView_2_GUID_IInspectable_INTERFACE_DEFINED__

#if !defined(____FIMap_2_GUID_IInspectable_INTERFACE_DEFINED__)
#define ____FIMap_2_GUID_IInspectable_INTERFACE_DEFINED__

typedef interface __FIMap_2_GUID_IInspectable __FIMap_2_GUID_IInspectable;

//  Declare the parameterized interface IID.
EXTERN_C const IID IID___FIMap_2_GUID_IInspectable;

typedef struct __FIMap_2_GUID_IInspectableVtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__FIMap_2_GUID_IInspectable* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__FIMap_2_GUID_IInspectable* This);
    ULONG (STDMETHODCALLTYPE* Release)(__FIMap_2_GUID_IInspectable* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__FIMap_2_GUID_IInspectable* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__FIMap_2_GUID_IInspectable* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__FIMap_2_GUID_IInspectable* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* Lookup)(__FIMap_2_GUID_IInspectable* This,
        GUID key,
        IInspectable** result);
    HRESULT (STDMETHODCALLTYPE* get_Size)(__FIMap_2_GUID_IInspectable* This,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* HasKey)(__FIMap_2_GUID_IInspectable* This,
        GUID key,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetView)(__FIMap_2_GUID_IInspectable* This,
        __FIMapView_2_GUID_IInspectable** result);
    HRESULT (STDMETHODCALLTYPE* Insert)(__FIMap_2_GUID_IInspectable* This,
        GUID key,
        IInspectable* value,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* Remove)(__FIMap_2_GUID_IInspectable* This,
        GUID key);
    HRESULT (STDMETHODCALLTYPE* Clear)(__FIMap_2_GUID_IInspectable* This);

    END_INTERFACE
} __FIMap_2_GUID_IInspectableVtbl;

interface __FIMap_2_GUID_IInspectable
{
    CONST_VTBL struct __FIMap_2_GUID_IInspectableVtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __FIMap_2_GUID_IInspectable_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __FIMap_2_GUID_IInspectable_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __FIMap_2_GUID_IInspectable_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __FIMap_2_GUID_IInspectable_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __FIMap_2_GUID_IInspectable_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __FIMap_2_GUID_IInspectable_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __FIMap_2_GUID_IInspectable_Lookup(This, key, result) \
    ((This)->lpVtbl->Lookup(This, key, result))

#define __FIMap_2_GUID_IInspectable_get_Size(This, result) \
    ((This)->lpVtbl->get_Size(This, result))

#define __FIMap_2_GUID_IInspectable_HasKey(This, key, result) \
    ((This)->lpVtbl->HasKey(This, key, result))

#define __FIMap_2_GUID_IInspectable_GetView(This, result) \
    ((This)->lpVtbl->GetView(This, result))

#define __FIMap_2_GUID_IInspectable_Insert(This, key, value, result) \
    ((This)->lpVtbl->Insert(This, key, value, result))

#define __FIMap_2_GUID_IInspectable_Remove(This, key) \
    ((This)->lpVtbl->Remove(This, key))

#define __FIMap_2_GUID_IInspectable_Clear(This) \
    ((This)->lpVtbl->Clear(This))

#endif /* COBJMACROS */

#endif // ____FIMap_2_GUID_IInspectable_INTERFACE_DEFINED__

#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____FIVectorView_1_Windows__CMedia__CCore__CTimedMetadataTrack_INTERFACE_DEFINED__)
#define ____FIVectorView_1_Windows__CMedia__CCore__CTimedMetadataTrack_INTERFACE_DEFINED__

typedef interface __FIVectorView_1_Windows__CMedia__CCore__CTimedMetadataTrack __FIVectorView_1_Windows__CMedia__CCore__CTimedMetadataTrack;

//  Declare the parameterized interface IID.
EXTERN_C const IID IID___FIVectorView_1_Windows__CMedia__CCore__CTimedMetadataTrack;

typedef struct __FIVectorView_1_Windows__CMedia__CCore__CTimedMetadataTrackVtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__FIVectorView_1_Windows__CMedia__CCore__CTimedMetadataTrack* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__FIVectorView_1_Windows__CMedia__CCore__CTimedMetadataTrack* This);
    ULONG (STDMETHODCALLTYPE* Release)(__FIVectorView_1_Windows__CMedia__CCore__CTimedMetadataTrack* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__FIVectorView_1_Windows__CMedia__CCore__CTimedMetadataTrack* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__FIVectorView_1_Windows__CMedia__CCore__CTimedMetadataTrack* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__FIVectorView_1_Windows__CMedia__CCore__CTimedMetadataTrack* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* GetAt)(__FIVectorView_1_Windows__CMedia__CCore__CTimedMetadataTrack* This,
        UINT32 index,
        __x_ABI_CWindows_CMedia_CCore_CITimedMetadataTrack** result);
    HRESULT (STDMETHODCALLTYPE* get_Size)(__FIVectorView_1_Windows__CMedia__CCore__CTimedMetadataTrack* This,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* IndexOf)(__FIVectorView_1_Windows__CMedia__CCore__CTimedMetadataTrack* This,
        __x_ABI_CWindows_CMedia_CCore_CITimedMetadataTrack* value,
        UINT32* index,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__FIVectorView_1_Windows__CMedia__CCore__CTimedMetadataTrack* This,
        UINT32 startIndex,
        UINT32 itemsLength,
        __x_ABI_CWindows_CMedia_CCore_CITimedMetadataTrack** items,
        UINT32* result);

    END_INTERFACE
} __FIVectorView_1_Windows__CMedia__CCore__CTimedMetadataTrackVtbl;

interface __FIVectorView_1_Windows__CMedia__CCore__CTimedMetadataTrack
{
    CONST_VTBL struct __FIVectorView_1_Windows__CMedia__CCore__CTimedMetadataTrackVtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __FIVectorView_1_Windows__CMedia__CCore__CTimedMetadataTrack_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __FIVectorView_1_Windows__CMedia__CCore__CTimedMetadataTrack_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __FIVectorView_1_Windows__CMedia__CCore__CTimedMetadataTrack_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __FIVectorView_1_Windows__CMedia__CCore__CTimedMetadataTrack_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __FIVectorView_1_Windows__CMedia__CCore__CTimedMetadataTrack_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __FIVectorView_1_Windows__CMedia__CCore__CTimedMetadataTrack_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __FIVectorView_1_Windows__CMedia__CCore__CTimedMetadataTrack_GetAt(This, index, result) \
    ((This)->lpVtbl->GetAt(This, index, result))

#define __FIVectorView_1_Windows__CMedia__CCore__CTimedMetadataTrack_get_Size(This, result) \
    ((This)->lpVtbl->get_Size(This, result))

#define __FIVectorView_1_Windows__CMedia__CCore__CTimedMetadataTrack_IndexOf(This, value, index, result) \
    ((This)->lpVtbl->IndexOf(This, value, index, result))

#define __FIVectorView_1_Windows__CMedia__CCore__CTimedMetadataTrack_GetMany(This, startIndex, itemsLength, items, result) \
    ((This)->lpVtbl->GetMany(This, startIndex, itemsLength, items, result))

#endif /* COBJMACROS */

#endif // ____FIVectorView_1_Windows__CMedia__CCore__CTimedMetadataTrack_INTERFACE_DEFINED__
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____FIVector_1_Windows__CMedia__CCore__CTimedMetadataTrack_INTERFACE_DEFINED__)
#define ____FIVector_1_Windows__CMedia__CCore__CTimedMetadataTrack_INTERFACE_DEFINED__

typedef interface __FIVector_1_Windows__CMedia__CCore__CTimedMetadataTrack __FIVector_1_Windows__CMedia__CCore__CTimedMetadataTrack;

//  Declare the parameterized interface IID.
EXTERN_C const IID IID___FIVector_1_Windows__CMedia__CCore__CTimedMetadataTrack;

typedef struct __FIVector_1_Windows__CMedia__CCore__CTimedMetadataTrackVtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__FIVector_1_Windows__CMedia__CCore__CTimedMetadataTrack* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__FIVector_1_Windows__CMedia__CCore__CTimedMetadataTrack* This);
    ULONG (STDMETHODCALLTYPE* Release)(__FIVector_1_Windows__CMedia__CCore__CTimedMetadataTrack* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__FIVector_1_Windows__CMedia__CCore__CTimedMetadataTrack* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__FIVector_1_Windows__CMedia__CCore__CTimedMetadataTrack* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__FIVector_1_Windows__CMedia__CCore__CTimedMetadataTrack* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* GetAt)(__FIVector_1_Windows__CMedia__CCore__CTimedMetadataTrack* This,
        UINT32 index,
        __x_ABI_CWindows_CMedia_CCore_CITimedMetadataTrack** result);
    HRESULT (STDMETHODCALLTYPE* get_Size)(__FIVector_1_Windows__CMedia__CCore__CTimedMetadataTrack* This,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* GetView)(__FIVector_1_Windows__CMedia__CCore__CTimedMetadataTrack* This,
        __FIVectorView_1_Windows__CMedia__CCore__CTimedMetadataTrack** result);
    HRESULT (STDMETHODCALLTYPE* IndexOf)(__FIVector_1_Windows__CMedia__CCore__CTimedMetadataTrack* This,
        __x_ABI_CWindows_CMedia_CCore_CITimedMetadataTrack* value,
        UINT32* index,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* SetAt)(__FIVector_1_Windows__CMedia__CCore__CTimedMetadataTrack* This,
        UINT32 index,
        __x_ABI_CWindows_CMedia_CCore_CITimedMetadataTrack* value);
    HRESULT (STDMETHODCALLTYPE* InsertAt)(__FIVector_1_Windows__CMedia__CCore__CTimedMetadataTrack* This,
        UINT32 index,
        __x_ABI_CWindows_CMedia_CCore_CITimedMetadataTrack* value);
    HRESULT (STDMETHODCALLTYPE* RemoveAt)(__FIVector_1_Windows__CMedia__CCore__CTimedMetadataTrack* This,
        UINT32 index);
    HRESULT (STDMETHODCALLTYPE* Append)(__FIVector_1_Windows__CMedia__CCore__CTimedMetadataTrack* This,
        __x_ABI_CWindows_CMedia_CCore_CITimedMetadataTrack* value);
    HRESULT (STDMETHODCALLTYPE* RemoveAtEnd)(__FIVector_1_Windows__CMedia__CCore__CTimedMetadataTrack* This);
    HRESULT (STDMETHODCALLTYPE* Clear)(__FIVector_1_Windows__CMedia__CCore__CTimedMetadataTrack* This);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__FIVector_1_Windows__CMedia__CCore__CTimedMetadataTrack* This,
        UINT32 startIndex,
        UINT32 itemsLength,
        __x_ABI_CWindows_CMedia_CCore_CITimedMetadataTrack** items,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* ReplaceAll)(__FIVector_1_Windows__CMedia__CCore__CTimedMetadataTrack* This,
        UINT32 itemsLength,
        __x_ABI_CWindows_CMedia_CCore_CITimedMetadataTrack** items);

    END_INTERFACE
} __FIVector_1_Windows__CMedia__CCore__CTimedMetadataTrackVtbl;

interface __FIVector_1_Windows__CMedia__CCore__CTimedMetadataTrack
{
    CONST_VTBL struct __FIVector_1_Windows__CMedia__CCore__CTimedMetadataTrackVtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __FIVector_1_Windows__CMedia__CCore__CTimedMetadataTrack_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __FIVector_1_Windows__CMedia__CCore__CTimedMetadataTrack_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __FIVector_1_Windows__CMedia__CCore__CTimedMetadataTrack_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __FIVector_1_Windows__CMedia__CCore__CTimedMetadataTrack_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __FIVector_1_Windows__CMedia__CCore__CTimedMetadataTrack_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __FIVector_1_Windows__CMedia__CCore__CTimedMetadataTrack_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __FIVector_1_Windows__CMedia__CCore__CTimedMetadataTrack_GetAt(This, index, result) \
    ((This)->lpVtbl->GetAt(This, index, result))

#define __FIVector_1_Windows__CMedia__CCore__CTimedMetadataTrack_get_Size(This, result) \
    ((This)->lpVtbl->get_Size(This, result))

#define __FIVector_1_Windows__CMedia__CCore__CTimedMetadataTrack_GetView(This, result) \
    ((This)->lpVtbl->GetView(This, result))

#define __FIVector_1_Windows__CMedia__CCore__CTimedMetadataTrack_IndexOf(This, value, index, result) \
    ((This)->lpVtbl->IndexOf(This, value, index, result))

#define __FIVector_1_Windows__CMedia__CCore__CTimedMetadataTrack_SetAt(This, index, value) \
    ((This)->lpVtbl->SetAt(This, index, value))

#define __FIVector_1_Windows__CMedia__CCore__CTimedMetadataTrack_InsertAt(This, index, value) \
    ((This)->lpVtbl->InsertAt(This, index, value))

#define __FIVector_1_Windows__CMedia__CCore__CTimedMetadataTrack_RemoveAt(This, index) \
    ((This)->lpVtbl->RemoveAt(This, index))

#define __FIVector_1_Windows__CMedia__CCore__CTimedMetadataTrack_Append(This, value) \
    ((This)->lpVtbl->Append(This, value))

#define __FIVector_1_Windows__CMedia__CCore__CTimedMetadataTrack_RemoveAtEnd(This) \
    ((This)->lpVtbl->RemoveAtEnd(This))

#define __FIVector_1_Windows__CMedia__CCore__CTimedMetadataTrack_Clear(This) \
    ((This)->lpVtbl->Clear(This))

#define __FIVector_1_Windows__CMedia__CCore__CTimedMetadataTrack_GetMany(This, startIndex, itemsLength, items, result) \
    ((This)->lpVtbl->GetMany(This, startIndex, itemsLength, items, result))

#define __FIVector_1_Windows__CMedia__CCore__CTimedMetadataTrack_ReplaceAll(This, itemsLength, items) \
    ((This)->lpVtbl->ReplaceAll(This, itemsLength, items))

#endif /* COBJMACROS */

#endif // ____FIVector_1_Windows__CMedia__CCore__CTimedMetadataTrack_INTERFACE_DEFINED__
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

typedef interface __FIObservableVector_1_Windows__CMedia__CCore__CTimedMetadataTrack __FIObservableVector_1_Windows__CMedia__CCore__CTimedMetadataTrack;

#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____FVectorChangedEventHandler_1_Windows__CMedia__CCore__CTimedMetadataTrack_INTERFACE_DEFINED__)
#define ____FVectorChangedEventHandler_1_Windows__CMedia__CCore__CTimedMetadataTrack_INTERFACE_DEFINED__

typedef interface __FVectorChangedEventHandler_1_Windows__CMedia__CCore__CTimedMetadataTrack __FVectorChangedEventHandler_1_Windows__CMedia__CCore__CTimedMetadataTrack;

//  Declare the parameterized interface IID.
EXTERN_C const IID IID___FVectorChangedEventHandler_1_Windows__CMedia__CCore__CTimedMetadataTrack;

typedef struct __FVectorChangedEventHandler_1_Windows__CMedia__CCore__CTimedMetadataTrackVtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__FVectorChangedEventHandler_1_Windows__CMedia__CCore__CTimedMetadataTrack* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__FVectorChangedEventHandler_1_Windows__CMedia__CCore__CTimedMetadataTrack* This);
    ULONG (STDMETHODCALLTYPE* Release)(__FVectorChangedEventHandler_1_Windows__CMedia__CCore__CTimedMetadataTrack* This);
    HRESULT (STDMETHODCALLTYPE* Invoke)(__FVectorChangedEventHandler_1_Windows__CMedia__CCore__CTimedMetadataTrack* This,
        __FIObservableVector_1_Windows__CMedia__CCore__CTimedMetadataTrack* sender,
        __x_ABI_CWindows_CFoundation_CCollections_CIVectorChangedEventArgs* event);

    END_INTERFACE
} __FVectorChangedEventHandler_1_Windows__CMedia__CCore__CTimedMetadataTrackVtbl;

interface __FVectorChangedEventHandler_1_Windows__CMedia__CCore__CTimedMetadataTrack
{
    CONST_VTBL struct __FVectorChangedEventHandler_1_Windows__CMedia__CCore__CTimedMetadataTrackVtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __FVectorChangedEventHandler_1_Windows__CMedia__CCore__CTimedMetadataTrack_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __FVectorChangedEventHandler_1_Windows__CMedia__CCore__CTimedMetadataTrack_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __FVectorChangedEventHandler_1_Windows__CMedia__CCore__CTimedMetadataTrack_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __FVectorChangedEventHandler_1_Windows__CMedia__CCore__CTimedMetadataTrack_Invoke(This, sender, event) \
    ((This)->lpVtbl->Invoke(This, sender, event))

#endif /* COBJMACROS */

#endif // ____FVectorChangedEventHandler_1_Windows__CMedia__CCore__CTimedMetadataTrack_INTERFACE_DEFINED__
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____FIObservableVector_1_Windows__CMedia__CCore__CTimedMetadataTrack_INTERFACE_DEFINED__)
#define ____FIObservableVector_1_Windows__CMedia__CCore__CTimedMetadataTrack_INTERFACE_DEFINED__

typedef interface __FIObservableVector_1_Windows__CMedia__CCore__CTimedMetadataTrack __FIObservableVector_1_Windows__CMedia__CCore__CTimedMetadataTrack;

//  Declare the parameterized interface IID.
EXTERN_C const IID IID___FIObservableVector_1_Windows__CMedia__CCore__CTimedMetadataTrack;

typedef struct __FIObservableVector_1_Windows__CMedia__CCore__CTimedMetadataTrackVtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__FIObservableVector_1_Windows__CMedia__CCore__CTimedMetadataTrack* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__FIObservableVector_1_Windows__CMedia__CCore__CTimedMetadataTrack* This);
    ULONG (STDMETHODCALLTYPE* Release)(__FIObservableVector_1_Windows__CMedia__CCore__CTimedMetadataTrack* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__FIObservableVector_1_Windows__CMedia__CCore__CTimedMetadataTrack* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__FIObservableVector_1_Windows__CMedia__CCore__CTimedMetadataTrack* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__FIObservableVector_1_Windows__CMedia__CCore__CTimedMetadataTrack* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* add_VectorChanged)(__FIObservableVector_1_Windows__CMedia__CCore__CTimedMetadataTrack* This,
        __FVectorChangedEventHandler_1_Windows__CMedia__CCore__CTimedMetadataTrack* vhnd,
        EventRegistrationToken* result);
    HRESULT (STDMETHODCALLTYPE* remove_VectorChanged)(__FIObservableVector_1_Windows__CMedia__CCore__CTimedMetadataTrack* This,
        EventRegistrationToken token);

    END_INTERFACE
} __FIObservableVector_1_Windows__CMedia__CCore__CTimedMetadataTrackVtbl;

interface __FIObservableVector_1_Windows__CMedia__CCore__CTimedMetadataTrack
{
    CONST_VTBL struct __FIObservableVector_1_Windows__CMedia__CCore__CTimedMetadataTrackVtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __FIObservableVector_1_Windows__CMedia__CCore__CTimedMetadataTrack_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __FIObservableVector_1_Windows__CMedia__CCore__CTimedMetadataTrack_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __FIObservableVector_1_Windows__CMedia__CCore__CTimedMetadataTrack_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __FIObservableVector_1_Windows__CMedia__CCore__CTimedMetadataTrack_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __FIObservableVector_1_Windows__CMedia__CCore__CTimedMetadataTrack_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __FIObservableVector_1_Windows__CMedia__CCore__CTimedMetadataTrack_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __FIObservableVector_1_Windows__CMedia__CCore__CTimedMetadataTrack_add_VectorChanged(This, vhnd, result) \
    ((This)->lpVtbl->add_VectorChanged(This, vhnd, result))

#define __FIObservableVector_1_Windows__CMedia__CCore__CTimedMetadataTrack_remove_VectorChanged(This, token) \
    ((This)->lpVtbl->remove_VectorChanged(This, token))

#endif /* COBJMACROS */

#endif // ____FIObservableVector_1_Windows__CMedia__CCore__CTimedMetadataTrack_INTERFACE_DEFINED__
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____FIVectorView_1_Windows__CMedia__CCore__CTimedTextSource_INTERFACE_DEFINED__)
#define ____FIVectorView_1_Windows__CMedia__CCore__CTimedTextSource_INTERFACE_DEFINED__

typedef interface __FIVectorView_1_Windows__CMedia__CCore__CTimedTextSource __FIVectorView_1_Windows__CMedia__CCore__CTimedTextSource;

//  Declare the parameterized interface IID.
EXTERN_C const IID IID___FIVectorView_1_Windows__CMedia__CCore__CTimedTextSource;

typedef struct __FIVectorView_1_Windows__CMedia__CCore__CTimedTextSourceVtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__FIVectorView_1_Windows__CMedia__CCore__CTimedTextSource* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__FIVectorView_1_Windows__CMedia__CCore__CTimedTextSource* This);
    ULONG (STDMETHODCALLTYPE* Release)(__FIVectorView_1_Windows__CMedia__CCore__CTimedTextSource* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__FIVectorView_1_Windows__CMedia__CCore__CTimedTextSource* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__FIVectorView_1_Windows__CMedia__CCore__CTimedTextSource* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__FIVectorView_1_Windows__CMedia__CCore__CTimedTextSource* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* GetAt)(__FIVectorView_1_Windows__CMedia__CCore__CTimedTextSource* This,
        UINT32 index,
        __x_ABI_CWindows_CMedia_CCore_CITimedTextSource** result);
    HRESULT (STDMETHODCALLTYPE* get_Size)(__FIVectorView_1_Windows__CMedia__CCore__CTimedTextSource* This,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* IndexOf)(__FIVectorView_1_Windows__CMedia__CCore__CTimedTextSource* This,
        __x_ABI_CWindows_CMedia_CCore_CITimedTextSource* value,
        UINT32* index,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__FIVectorView_1_Windows__CMedia__CCore__CTimedTextSource* This,
        UINT32 startIndex,
        UINT32 itemsLength,
        __x_ABI_CWindows_CMedia_CCore_CITimedTextSource** items,
        UINT32* result);

    END_INTERFACE
} __FIVectorView_1_Windows__CMedia__CCore__CTimedTextSourceVtbl;

interface __FIVectorView_1_Windows__CMedia__CCore__CTimedTextSource
{
    CONST_VTBL struct __FIVectorView_1_Windows__CMedia__CCore__CTimedTextSourceVtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __FIVectorView_1_Windows__CMedia__CCore__CTimedTextSource_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __FIVectorView_1_Windows__CMedia__CCore__CTimedTextSource_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __FIVectorView_1_Windows__CMedia__CCore__CTimedTextSource_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __FIVectorView_1_Windows__CMedia__CCore__CTimedTextSource_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __FIVectorView_1_Windows__CMedia__CCore__CTimedTextSource_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __FIVectorView_1_Windows__CMedia__CCore__CTimedTextSource_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __FIVectorView_1_Windows__CMedia__CCore__CTimedTextSource_GetAt(This, index, result) \
    ((This)->lpVtbl->GetAt(This, index, result))

#define __FIVectorView_1_Windows__CMedia__CCore__CTimedTextSource_get_Size(This, result) \
    ((This)->lpVtbl->get_Size(This, result))

#define __FIVectorView_1_Windows__CMedia__CCore__CTimedTextSource_IndexOf(This, value, index, result) \
    ((This)->lpVtbl->IndexOf(This, value, index, result))

#define __FIVectorView_1_Windows__CMedia__CCore__CTimedTextSource_GetMany(This, startIndex, itemsLength, items, result) \
    ((This)->lpVtbl->GetMany(This, startIndex, itemsLength, items, result))

#endif /* COBJMACROS */

#endif // ____FIVectorView_1_Windows__CMedia__CCore__CTimedTextSource_INTERFACE_DEFINED__
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____FIVector_1_Windows__CMedia__CCore__CTimedTextSource_INTERFACE_DEFINED__)
#define ____FIVector_1_Windows__CMedia__CCore__CTimedTextSource_INTERFACE_DEFINED__

typedef interface __FIVector_1_Windows__CMedia__CCore__CTimedTextSource __FIVector_1_Windows__CMedia__CCore__CTimedTextSource;

//  Declare the parameterized interface IID.
EXTERN_C const IID IID___FIVector_1_Windows__CMedia__CCore__CTimedTextSource;

typedef struct __FIVector_1_Windows__CMedia__CCore__CTimedTextSourceVtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__FIVector_1_Windows__CMedia__CCore__CTimedTextSource* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__FIVector_1_Windows__CMedia__CCore__CTimedTextSource* This);
    ULONG (STDMETHODCALLTYPE* Release)(__FIVector_1_Windows__CMedia__CCore__CTimedTextSource* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__FIVector_1_Windows__CMedia__CCore__CTimedTextSource* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__FIVector_1_Windows__CMedia__CCore__CTimedTextSource* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__FIVector_1_Windows__CMedia__CCore__CTimedTextSource* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* GetAt)(__FIVector_1_Windows__CMedia__CCore__CTimedTextSource* This,
        UINT32 index,
        __x_ABI_CWindows_CMedia_CCore_CITimedTextSource** result);
    HRESULT (STDMETHODCALLTYPE* get_Size)(__FIVector_1_Windows__CMedia__CCore__CTimedTextSource* This,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* GetView)(__FIVector_1_Windows__CMedia__CCore__CTimedTextSource* This,
        __FIVectorView_1_Windows__CMedia__CCore__CTimedTextSource** result);
    HRESULT (STDMETHODCALLTYPE* IndexOf)(__FIVector_1_Windows__CMedia__CCore__CTimedTextSource* This,
        __x_ABI_CWindows_CMedia_CCore_CITimedTextSource* value,
        UINT32* index,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* SetAt)(__FIVector_1_Windows__CMedia__CCore__CTimedTextSource* This,
        UINT32 index,
        __x_ABI_CWindows_CMedia_CCore_CITimedTextSource* value);
    HRESULT (STDMETHODCALLTYPE* InsertAt)(__FIVector_1_Windows__CMedia__CCore__CTimedTextSource* This,
        UINT32 index,
        __x_ABI_CWindows_CMedia_CCore_CITimedTextSource* value);
    HRESULT (STDMETHODCALLTYPE* RemoveAt)(__FIVector_1_Windows__CMedia__CCore__CTimedTextSource* This,
        UINT32 index);
    HRESULT (STDMETHODCALLTYPE* Append)(__FIVector_1_Windows__CMedia__CCore__CTimedTextSource* This,
        __x_ABI_CWindows_CMedia_CCore_CITimedTextSource* value);
    HRESULT (STDMETHODCALLTYPE* RemoveAtEnd)(__FIVector_1_Windows__CMedia__CCore__CTimedTextSource* This);
    HRESULT (STDMETHODCALLTYPE* Clear)(__FIVector_1_Windows__CMedia__CCore__CTimedTextSource* This);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__FIVector_1_Windows__CMedia__CCore__CTimedTextSource* This,
        UINT32 startIndex,
        UINT32 itemsLength,
        __x_ABI_CWindows_CMedia_CCore_CITimedTextSource** items,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* ReplaceAll)(__FIVector_1_Windows__CMedia__CCore__CTimedTextSource* This,
        UINT32 itemsLength,
        __x_ABI_CWindows_CMedia_CCore_CITimedTextSource** items);

    END_INTERFACE
} __FIVector_1_Windows__CMedia__CCore__CTimedTextSourceVtbl;

interface __FIVector_1_Windows__CMedia__CCore__CTimedTextSource
{
    CONST_VTBL struct __FIVector_1_Windows__CMedia__CCore__CTimedTextSourceVtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __FIVector_1_Windows__CMedia__CCore__CTimedTextSource_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __FIVector_1_Windows__CMedia__CCore__CTimedTextSource_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __FIVector_1_Windows__CMedia__CCore__CTimedTextSource_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __FIVector_1_Windows__CMedia__CCore__CTimedTextSource_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __FIVector_1_Windows__CMedia__CCore__CTimedTextSource_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __FIVector_1_Windows__CMedia__CCore__CTimedTextSource_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __FIVector_1_Windows__CMedia__CCore__CTimedTextSource_GetAt(This, index, result) \
    ((This)->lpVtbl->GetAt(This, index, result))

#define __FIVector_1_Windows__CMedia__CCore__CTimedTextSource_get_Size(This, result) \
    ((This)->lpVtbl->get_Size(This, result))

#define __FIVector_1_Windows__CMedia__CCore__CTimedTextSource_GetView(This, result) \
    ((This)->lpVtbl->GetView(This, result))

#define __FIVector_1_Windows__CMedia__CCore__CTimedTextSource_IndexOf(This, value, index, result) \
    ((This)->lpVtbl->IndexOf(This, value, index, result))

#define __FIVector_1_Windows__CMedia__CCore__CTimedTextSource_SetAt(This, index, value) \
    ((This)->lpVtbl->SetAt(This, index, value))

#define __FIVector_1_Windows__CMedia__CCore__CTimedTextSource_InsertAt(This, index, value) \
    ((This)->lpVtbl->InsertAt(This, index, value))

#define __FIVector_1_Windows__CMedia__CCore__CTimedTextSource_RemoveAt(This, index) \
    ((This)->lpVtbl->RemoveAt(This, index))

#define __FIVector_1_Windows__CMedia__CCore__CTimedTextSource_Append(This, value) \
    ((This)->lpVtbl->Append(This, value))

#define __FIVector_1_Windows__CMedia__CCore__CTimedTextSource_RemoveAtEnd(This) \
    ((This)->lpVtbl->RemoveAtEnd(This))

#define __FIVector_1_Windows__CMedia__CCore__CTimedTextSource_Clear(This) \
    ((This)->lpVtbl->Clear(This))

#define __FIVector_1_Windows__CMedia__CCore__CTimedTextSource_GetMany(This, startIndex, itemsLength, items, result) \
    ((This)->lpVtbl->GetMany(This, startIndex, itemsLength, items, result))

#define __FIVector_1_Windows__CMedia__CCore__CTimedTextSource_ReplaceAll(This, itemsLength, items) \
    ((This)->lpVtbl->ReplaceAll(This, itemsLength, items))

#endif /* COBJMACROS */

#endif // ____FIVector_1_Windows__CMedia__CCore__CTimedTextSource_INTERFACE_DEFINED__
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

typedef interface __FIObservableVector_1_Windows__CMedia__CCore__CTimedTextSource __FIObservableVector_1_Windows__CMedia__CCore__CTimedTextSource;

#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____FVectorChangedEventHandler_1_Windows__CMedia__CCore__CTimedTextSource_INTERFACE_DEFINED__)
#define ____FVectorChangedEventHandler_1_Windows__CMedia__CCore__CTimedTextSource_INTERFACE_DEFINED__

typedef interface __FVectorChangedEventHandler_1_Windows__CMedia__CCore__CTimedTextSource __FVectorChangedEventHandler_1_Windows__CMedia__CCore__CTimedTextSource;

//  Declare the parameterized interface IID.
EXTERN_C const IID IID___FVectorChangedEventHandler_1_Windows__CMedia__CCore__CTimedTextSource;

typedef struct __FVectorChangedEventHandler_1_Windows__CMedia__CCore__CTimedTextSourceVtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__FVectorChangedEventHandler_1_Windows__CMedia__CCore__CTimedTextSource* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__FVectorChangedEventHandler_1_Windows__CMedia__CCore__CTimedTextSource* This);
    ULONG (STDMETHODCALLTYPE* Release)(__FVectorChangedEventHandler_1_Windows__CMedia__CCore__CTimedTextSource* This);
    HRESULT (STDMETHODCALLTYPE* Invoke)(__FVectorChangedEventHandler_1_Windows__CMedia__CCore__CTimedTextSource* This,
        __FIObservableVector_1_Windows__CMedia__CCore__CTimedTextSource* sender,
        __x_ABI_CWindows_CFoundation_CCollections_CIVectorChangedEventArgs* event);

    END_INTERFACE
} __FVectorChangedEventHandler_1_Windows__CMedia__CCore__CTimedTextSourceVtbl;

interface __FVectorChangedEventHandler_1_Windows__CMedia__CCore__CTimedTextSource
{
    CONST_VTBL struct __FVectorChangedEventHandler_1_Windows__CMedia__CCore__CTimedTextSourceVtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __FVectorChangedEventHandler_1_Windows__CMedia__CCore__CTimedTextSource_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __FVectorChangedEventHandler_1_Windows__CMedia__CCore__CTimedTextSource_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __FVectorChangedEventHandler_1_Windows__CMedia__CCore__CTimedTextSource_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __FVectorChangedEventHandler_1_Windows__CMedia__CCore__CTimedTextSource_Invoke(This, sender, event) \
    ((This)->lpVtbl->Invoke(This, sender, event))

#endif /* COBJMACROS */

#endif // ____FVectorChangedEventHandler_1_Windows__CMedia__CCore__CTimedTextSource_INTERFACE_DEFINED__
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____FIObservableVector_1_Windows__CMedia__CCore__CTimedTextSource_INTERFACE_DEFINED__)
#define ____FIObservableVector_1_Windows__CMedia__CCore__CTimedTextSource_INTERFACE_DEFINED__

typedef interface __FIObservableVector_1_Windows__CMedia__CCore__CTimedTextSource __FIObservableVector_1_Windows__CMedia__CCore__CTimedTextSource;

//  Declare the parameterized interface IID.
EXTERN_C const IID IID___FIObservableVector_1_Windows__CMedia__CCore__CTimedTextSource;

typedef struct __FIObservableVector_1_Windows__CMedia__CCore__CTimedTextSourceVtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__FIObservableVector_1_Windows__CMedia__CCore__CTimedTextSource* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__FIObservableVector_1_Windows__CMedia__CCore__CTimedTextSource* This);
    ULONG (STDMETHODCALLTYPE* Release)(__FIObservableVector_1_Windows__CMedia__CCore__CTimedTextSource* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__FIObservableVector_1_Windows__CMedia__CCore__CTimedTextSource* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__FIObservableVector_1_Windows__CMedia__CCore__CTimedTextSource* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__FIObservableVector_1_Windows__CMedia__CCore__CTimedTextSource* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* add_VectorChanged)(__FIObservableVector_1_Windows__CMedia__CCore__CTimedTextSource* This,
        __FVectorChangedEventHandler_1_Windows__CMedia__CCore__CTimedTextSource* vhnd,
        EventRegistrationToken* result);
    HRESULT (STDMETHODCALLTYPE* remove_VectorChanged)(__FIObservableVector_1_Windows__CMedia__CCore__CTimedTextSource* This,
        EventRegistrationToken token);

    END_INTERFACE
} __FIObservableVector_1_Windows__CMedia__CCore__CTimedTextSourceVtbl;

interface __FIObservableVector_1_Windows__CMedia__CCore__CTimedTextSource
{
    CONST_VTBL struct __FIObservableVector_1_Windows__CMedia__CCore__CTimedTextSourceVtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __FIObservableVector_1_Windows__CMedia__CCore__CTimedTextSource_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __FIObservableVector_1_Windows__CMedia__CCore__CTimedTextSource_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __FIObservableVector_1_Windows__CMedia__CCore__CTimedTextSource_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __FIObservableVector_1_Windows__CMedia__CCore__CTimedTextSource_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __FIObservableVector_1_Windows__CMedia__CCore__CTimedTextSource_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __FIObservableVector_1_Windows__CMedia__CCore__CTimedTextSource_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __FIObservableVector_1_Windows__CMedia__CCore__CTimedTextSource_add_VectorChanged(This, vhnd, result) \
    ((This)->lpVtbl->add_VectorChanged(This, vhnd, result))

#define __FIObservableVector_1_Windows__CMedia__CCore__CTimedTextSource_remove_VectorChanged(This, token) \
    ((This)->lpVtbl->remove_VectorChanged(This, token))

#endif /* COBJMACROS */

#endif // ____FIObservableVector_1_Windows__CMedia__CCore__CTimedTextSource_INTERFACE_DEFINED__
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

#if !defined(____FIVectorView_1_HSTRING_INTERFACE_DEFINED__)
#define ____FIVectorView_1_HSTRING_INTERFACE_DEFINED__

typedef interface __FIVectorView_1_HSTRING __FIVectorView_1_HSTRING;

//  Declare the parameterized interface IID.
EXTERN_C const IID IID___FIVectorView_1_HSTRING;

typedef struct __FIVectorView_1_HSTRINGVtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__FIVectorView_1_HSTRING* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__FIVectorView_1_HSTRING* This);
    ULONG (STDMETHODCALLTYPE* Release)(__FIVectorView_1_HSTRING* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__FIVectorView_1_HSTRING* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__FIVectorView_1_HSTRING* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__FIVectorView_1_HSTRING* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* GetAt)(__FIVectorView_1_HSTRING* This,
        UINT32 index,
        HSTRING* result);
    HRESULT (STDMETHODCALLTYPE* get_Size)(__FIVectorView_1_HSTRING* This,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* IndexOf)(__FIVectorView_1_HSTRING* This,
        HSTRING value,
        UINT32* index,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__FIVectorView_1_HSTRING* This,
        UINT32 startIndex,
        UINT32 itemsLength,
        HSTRING* items,
        UINT32* result);

    END_INTERFACE
} __FIVectorView_1_HSTRINGVtbl;

interface __FIVectorView_1_HSTRING
{
    CONST_VTBL struct __FIVectorView_1_HSTRINGVtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __FIVectorView_1_HSTRING_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __FIVectorView_1_HSTRING_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __FIVectorView_1_HSTRING_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __FIVectorView_1_HSTRING_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __FIVectorView_1_HSTRING_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __FIVectorView_1_HSTRING_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __FIVectorView_1_HSTRING_GetAt(This, index, result) \
    ((This)->lpVtbl->GetAt(This, index, result))

#define __FIVectorView_1_HSTRING_get_Size(This, result) \
    ((This)->lpVtbl->get_Size(This, result))

#define __FIVectorView_1_HSTRING_IndexOf(This, value, index, result) \
    ((This)->lpVtbl->IndexOf(This, value, index, result))

#define __FIVectorView_1_HSTRING_GetMany(This, startIndex, itemsLength, items, result) \
    ((This)->lpVtbl->GetMany(This, startIndex, itemsLength, items, result))

#endif /* COBJMACROS */

#endif // ____FIVectorView_1_HSTRING_INTERFACE_DEFINED__

#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____FIVectorView_1_Windows__CGraphics__CImaging__CBitmapPixelFormat_INTERFACE_DEFINED__)
#define ____FIVectorView_1_Windows__CGraphics__CImaging__CBitmapPixelFormat_INTERFACE_DEFINED__

typedef interface __FIVectorView_1_Windows__CGraphics__CImaging__CBitmapPixelFormat __FIVectorView_1_Windows__CGraphics__CImaging__CBitmapPixelFormat;

//  Declare the parameterized interface IID.
EXTERN_C const IID IID___FIVectorView_1_Windows__CGraphics__CImaging__CBitmapPixelFormat;

typedef struct __FIVectorView_1_Windows__CGraphics__CImaging__CBitmapPixelFormatVtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__FIVectorView_1_Windows__CGraphics__CImaging__CBitmapPixelFormat* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__FIVectorView_1_Windows__CGraphics__CImaging__CBitmapPixelFormat* This);
    ULONG (STDMETHODCALLTYPE* Release)(__FIVectorView_1_Windows__CGraphics__CImaging__CBitmapPixelFormat* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__FIVectorView_1_Windows__CGraphics__CImaging__CBitmapPixelFormat* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__FIVectorView_1_Windows__CGraphics__CImaging__CBitmapPixelFormat* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__FIVectorView_1_Windows__CGraphics__CImaging__CBitmapPixelFormat* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* GetAt)(__FIVectorView_1_Windows__CGraphics__CImaging__CBitmapPixelFormat* This,
        UINT32 index,
        enum __x_ABI_CWindows_CGraphics_CImaging_CBitmapPixelFormat* result);
    HRESULT (STDMETHODCALLTYPE* get_Size)(__FIVectorView_1_Windows__CGraphics__CImaging__CBitmapPixelFormat* This,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* IndexOf)(__FIVectorView_1_Windows__CGraphics__CImaging__CBitmapPixelFormat* This,
        enum __x_ABI_CWindows_CGraphics_CImaging_CBitmapPixelFormat value,
        UINT32* index,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__FIVectorView_1_Windows__CGraphics__CImaging__CBitmapPixelFormat* This,
        UINT32 startIndex,
        UINT32 itemsLength,
        enum __x_ABI_CWindows_CGraphics_CImaging_CBitmapPixelFormat* items,
        UINT32* result);

    END_INTERFACE
} __FIVectorView_1_Windows__CGraphics__CImaging__CBitmapPixelFormatVtbl;

interface __FIVectorView_1_Windows__CGraphics__CImaging__CBitmapPixelFormat
{
    CONST_VTBL struct __FIVectorView_1_Windows__CGraphics__CImaging__CBitmapPixelFormatVtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __FIVectorView_1_Windows__CGraphics__CImaging__CBitmapPixelFormat_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __FIVectorView_1_Windows__CGraphics__CImaging__CBitmapPixelFormat_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __FIVectorView_1_Windows__CGraphics__CImaging__CBitmapPixelFormat_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __FIVectorView_1_Windows__CGraphics__CImaging__CBitmapPixelFormat_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __FIVectorView_1_Windows__CGraphics__CImaging__CBitmapPixelFormat_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __FIVectorView_1_Windows__CGraphics__CImaging__CBitmapPixelFormat_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __FIVectorView_1_Windows__CGraphics__CImaging__CBitmapPixelFormat_GetAt(This, index, result) \
    ((This)->lpVtbl->GetAt(This, index, result))

#define __FIVectorView_1_Windows__CGraphics__CImaging__CBitmapPixelFormat_get_Size(This, result) \
    ((This)->lpVtbl->get_Size(This, result))

#define __FIVectorView_1_Windows__CGraphics__CImaging__CBitmapPixelFormat_IndexOf(This, value, index, result) \
    ((This)->lpVtbl->IndexOf(This, value, index, result))

#define __FIVectorView_1_Windows__CGraphics__CImaging__CBitmapPixelFormat_GetMany(This, startIndex, itemsLength, items, result) \
    ((This)->lpVtbl->GetMany(This, startIndex, itemsLength, items, result))

#endif /* COBJMACROS */

#endif // ____FIVectorView_1_Windows__CGraphics__CImaging__CBitmapPixelFormat_INTERFACE_DEFINED__
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____FIVectorView_1_Windows__CMedia__CCore__CIMediaCue_INTERFACE_DEFINED__)
#define ____FIVectorView_1_Windows__CMedia__CCore__CIMediaCue_INTERFACE_DEFINED__

typedef interface __FIVectorView_1_Windows__CMedia__CCore__CIMediaCue __FIVectorView_1_Windows__CMedia__CCore__CIMediaCue;

//  Declare the parameterized interface IID.
EXTERN_C const IID IID___FIVectorView_1_Windows__CMedia__CCore__CIMediaCue;

typedef struct __FIVectorView_1_Windows__CMedia__CCore__CIMediaCueVtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__FIVectorView_1_Windows__CMedia__CCore__CIMediaCue* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__FIVectorView_1_Windows__CMedia__CCore__CIMediaCue* This);
    ULONG (STDMETHODCALLTYPE* Release)(__FIVectorView_1_Windows__CMedia__CCore__CIMediaCue* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__FIVectorView_1_Windows__CMedia__CCore__CIMediaCue* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__FIVectorView_1_Windows__CMedia__CCore__CIMediaCue* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__FIVectorView_1_Windows__CMedia__CCore__CIMediaCue* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* GetAt)(__FIVectorView_1_Windows__CMedia__CCore__CIMediaCue* This,
        UINT32 index,
        __x_ABI_CWindows_CMedia_CCore_CIMediaCue** result);
    HRESULT (STDMETHODCALLTYPE* get_Size)(__FIVectorView_1_Windows__CMedia__CCore__CIMediaCue* This,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* IndexOf)(__FIVectorView_1_Windows__CMedia__CCore__CIMediaCue* This,
        __x_ABI_CWindows_CMedia_CCore_CIMediaCue* value,
        UINT32* index,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__FIVectorView_1_Windows__CMedia__CCore__CIMediaCue* This,
        UINT32 startIndex,
        UINT32 itemsLength,
        __x_ABI_CWindows_CMedia_CCore_CIMediaCue** items,
        UINT32* result);

    END_INTERFACE
} __FIVectorView_1_Windows__CMedia__CCore__CIMediaCueVtbl;

interface __FIVectorView_1_Windows__CMedia__CCore__CIMediaCue
{
    CONST_VTBL struct __FIVectorView_1_Windows__CMedia__CCore__CIMediaCueVtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __FIVectorView_1_Windows__CMedia__CCore__CIMediaCue_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __FIVectorView_1_Windows__CMedia__CCore__CIMediaCue_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __FIVectorView_1_Windows__CMedia__CCore__CIMediaCue_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __FIVectorView_1_Windows__CMedia__CCore__CIMediaCue_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __FIVectorView_1_Windows__CMedia__CCore__CIMediaCue_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __FIVectorView_1_Windows__CMedia__CCore__CIMediaCue_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __FIVectorView_1_Windows__CMedia__CCore__CIMediaCue_GetAt(This, index, result) \
    ((This)->lpVtbl->GetAt(This, index, result))

#define __FIVectorView_1_Windows__CMedia__CCore__CIMediaCue_get_Size(This, result) \
    ((This)->lpVtbl->get_Size(This, result))

#define __FIVectorView_1_Windows__CMedia__CCore__CIMediaCue_IndexOf(This, value, index, result) \
    ((This)->lpVtbl->IndexOf(This, value, index, result))

#define __FIVectorView_1_Windows__CMedia__CCore__CIMediaCue_GetMany(This, startIndex, itemsLength, items, result) \
    ((This)->lpVtbl->GetMany(This, startIndex, itemsLength, items, result))

#endif /* COBJMACROS */

#endif // ____FIVectorView_1_Windows__CMedia__CCore__CIMediaCue_INTERFACE_DEFINED__
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____FIVectorView_1_Windows__CMedia__CCore__CMseSourceBuffer_INTERFACE_DEFINED__)
#define ____FIVectorView_1_Windows__CMedia__CCore__CMseSourceBuffer_INTERFACE_DEFINED__

typedef interface __FIVectorView_1_Windows__CMedia__CCore__CMseSourceBuffer __FIVectorView_1_Windows__CMedia__CCore__CMseSourceBuffer;

//  Declare the parameterized interface IID.
EXTERN_C const IID IID___FIVectorView_1_Windows__CMedia__CCore__CMseSourceBuffer;

typedef struct __FIVectorView_1_Windows__CMedia__CCore__CMseSourceBufferVtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__FIVectorView_1_Windows__CMedia__CCore__CMseSourceBuffer* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__FIVectorView_1_Windows__CMedia__CCore__CMseSourceBuffer* This);
    ULONG (STDMETHODCALLTYPE* Release)(__FIVectorView_1_Windows__CMedia__CCore__CMseSourceBuffer* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__FIVectorView_1_Windows__CMedia__CCore__CMseSourceBuffer* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__FIVectorView_1_Windows__CMedia__CCore__CMseSourceBuffer* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__FIVectorView_1_Windows__CMedia__CCore__CMseSourceBuffer* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* GetAt)(__FIVectorView_1_Windows__CMedia__CCore__CMseSourceBuffer* This,
        UINT32 index,
        __x_ABI_CWindows_CMedia_CCore_CIMseSourceBuffer** result);
    HRESULT (STDMETHODCALLTYPE* get_Size)(__FIVectorView_1_Windows__CMedia__CCore__CMseSourceBuffer* This,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* IndexOf)(__FIVectorView_1_Windows__CMedia__CCore__CMseSourceBuffer* This,
        __x_ABI_CWindows_CMedia_CCore_CIMseSourceBuffer* value,
        UINT32* index,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__FIVectorView_1_Windows__CMedia__CCore__CMseSourceBuffer* This,
        UINT32 startIndex,
        UINT32 itemsLength,
        __x_ABI_CWindows_CMedia_CCore_CIMseSourceBuffer** items,
        UINT32* result);

    END_INTERFACE
} __FIVectorView_1_Windows__CMedia__CCore__CMseSourceBufferVtbl;

interface __FIVectorView_1_Windows__CMedia__CCore__CMseSourceBuffer
{
    CONST_VTBL struct __FIVectorView_1_Windows__CMedia__CCore__CMseSourceBufferVtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __FIVectorView_1_Windows__CMedia__CCore__CMseSourceBuffer_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __FIVectorView_1_Windows__CMedia__CCore__CMseSourceBuffer_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __FIVectorView_1_Windows__CMedia__CCore__CMseSourceBuffer_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __FIVectorView_1_Windows__CMedia__CCore__CMseSourceBuffer_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __FIVectorView_1_Windows__CMedia__CCore__CMseSourceBuffer_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __FIVectorView_1_Windows__CMedia__CCore__CMseSourceBuffer_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __FIVectorView_1_Windows__CMedia__CCore__CMseSourceBuffer_GetAt(This, index, result) \
    ((This)->lpVtbl->GetAt(This, index, result))

#define __FIVectorView_1_Windows__CMedia__CCore__CMseSourceBuffer_get_Size(This, result) \
    ((This)->lpVtbl->get_Size(This, result))

#define __FIVectorView_1_Windows__CMedia__CCore__CMseSourceBuffer_IndexOf(This, value, index, result) \
    ((This)->lpVtbl->IndexOf(This, value, index, result))

#define __FIVectorView_1_Windows__CMedia__CCore__CMseSourceBuffer_GetMany(This, startIndex, itemsLength, items, result) \
    ((This)->lpVtbl->GetMany(This, startIndex, itemsLength, items, result))

#endif /* COBJMACROS */

#endif // ____FIVectorView_1_Windows__CMedia__CCore__CMseSourceBuffer_INTERFACE_DEFINED__
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____FIVectorView_1_Windows__CMedia__CCore__CMseTimeRange_INTERFACE_DEFINED__)
#define ____FIVectorView_1_Windows__CMedia__CCore__CMseTimeRange_INTERFACE_DEFINED__

typedef interface __FIVectorView_1_Windows__CMedia__CCore__CMseTimeRange __FIVectorView_1_Windows__CMedia__CCore__CMseTimeRange;

//  Declare the parameterized interface IID.
EXTERN_C const IID IID___FIVectorView_1_Windows__CMedia__CCore__CMseTimeRange;

typedef struct __FIVectorView_1_Windows__CMedia__CCore__CMseTimeRangeVtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__FIVectorView_1_Windows__CMedia__CCore__CMseTimeRange* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__FIVectorView_1_Windows__CMedia__CCore__CMseTimeRange* This);
    ULONG (STDMETHODCALLTYPE* Release)(__FIVectorView_1_Windows__CMedia__CCore__CMseTimeRange* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__FIVectorView_1_Windows__CMedia__CCore__CMseTimeRange* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__FIVectorView_1_Windows__CMedia__CCore__CMseTimeRange* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__FIVectorView_1_Windows__CMedia__CCore__CMseTimeRange* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* GetAt)(__FIVectorView_1_Windows__CMedia__CCore__CMseTimeRange* This,
        UINT32 index,
        struct __x_ABI_CWindows_CMedia_CCore_CMseTimeRange* result);
    HRESULT (STDMETHODCALLTYPE* get_Size)(__FIVectorView_1_Windows__CMedia__CCore__CMseTimeRange* This,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* IndexOf)(__FIVectorView_1_Windows__CMedia__CCore__CMseTimeRange* This,
        struct __x_ABI_CWindows_CMedia_CCore_CMseTimeRange value,
        UINT32* index,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__FIVectorView_1_Windows__CMedia__CCore__CMseTimeRange* This,
        UINT32 startIndex,
        UINT32 itemsLength,
        struct __x_ABI_CWindows_CMedia_CCore_CMseTimeRange* items,
        UINT32* result);

    END_INTERFACE
} __FIVectorView_1_Windows__CMedia__CCore__CMseTimeRangeVtbl;

interface __FIVectorView_1_Windows__CMedia__CCore__CMseTimeRange
{
    CONST_VTBL struct __FIVectorView_1_Windows__CMedia__CCore__CMseTimeRangeVtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __FIVectorView_1_Windows__CMedia__CCore__CMseTimeRange_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __FIVectorView_1_Windows__CMedia__CCore__CMseTimeRange_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __FIVectorView_1_Windows__CMedia__CCore__CMseTimeRange_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __FIVectorView_1_Windows__CMedia__CCore__CMseTimeRange_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __FIVectorView_1_Windows__CMedia__CCore__CMseTimeRange_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __FIVectorView_1_Windows__CMedia__CCore__CMseTimeRange_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __FIVectorView_1_Windows__CMedia__CCore__CMseTimeRange_GetAt(This, index, result) \
    ((This)->lpVtbl->GetAt(This, index, result))

#define __FIVectorView_1_Windows__CMedia__CCore__CMseTimeRange_get_Size(This, result) \
    ((This)->lpVtbl->get_Size(This, result))

#define __FIVectorView_1_Windows__CMedia__CCore__CMseTimeRange_IndexOf(This, value, index, result) \
    ((This)->lpVtbl->IndexOf(This, value, index, result))

#define __FIVectorView_1_Windows__CMedia__CCore__CMseTimeRange_GetMany(This, startIndex, itemsLength, items, result) \
    ((This)->lpVtbl->GetMany(This, startIndex, itemsLength, items, result))

#endif /* COBJMACROS */

#endif // ____FIVectorView_1_Windows__CMedia__CCore__CMseTimeRange_INTERFACE_DEFINED__
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____FIVectorView_1_Windows__CMedia__CCore__CTimedTextLine_INTERFACE_DEFINED__)
#define ____FIVectorView_1_Windows__CMedia__CCore__CTimedTextLine_INTERFACE_DEFINED__

typedef interface __FIVectorView_1_Windows__CMedia__CCore__CTimedTextLine __FIVectorView_1_Windows__CMedia__CCore__CTimedTextLine;

//  Declare the parameterized interface IID.
EXTERN_C const IID IID___FIVectorView_1_Windows__CMedia__CCore__CTimedTextLine;

typedef struct __FIVectorView_1_Windows__CMedia__CCore__CTimedTextLineVtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__FIVectorView_1_Windows__CMedia__CCore__CTimedTextLine* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__FIVectorView_1_Windows__CMedia__CCore__CTimedTextLine* This);
    ULONG (STDMETHODCALLTYPE* Release)(__FIVectorView_1_Windows__CMedia__CCore__CTimedTextLine* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__FIVectorView_1_Windows__CMedia__CCore__CTimedTextLine* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__FIVectorView_1_Windows__CMedia__CCore__CTimedTextLine* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__FIVectorView_1_Windows__CMedia__CCore__CTimedTextLine* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* GetAt)(__FIVectorView_1_Windows__CMedia__CCore__CTimedTextLine* This,
        UINT32 index,
        __x_ABI_CWindows_CMedia_CCore_CITimedTextLine** result);
    HRESULT (STDMETHODCALLTYPE* get_Size)(__FIVectorView_1_Windows__CMedia__CCore__CTimedTextLine* This,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* IndexOf)(__FIVectorView_1_Windows__CMedia__CCore__CTimedTextLine* This,
        __x_ABI_CWindows_CMedia_CCore_CITimedTextLine* value,
        UINT32* index,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__FIVectorView_1_Windows__CMedia__CCore__CTimedTextLine* This,
        UINT32 startIndex,
        UINT32 itemsLength,
        __x_ABI_CWindows_CMedia_CCore_CITimedTextLine** items,
        UINT32* result);

    END_INTERFACE
} __FIVectorView_1_Windows__CMedia__CCore__CTimedTextLineVtbl;

interface __FIVectorView_1_Windows__CMedia__CCore__CTimedTextLine
{
    CONST_VTBL struct __FIVectorView_1_Windows__CMedia__CCore__CTimedTextLineVtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __FIVectorView_1_Windows__CMedia__CCore__CTimedTextLine_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __FIVectorView_1_Windows__CMedia__CCore__CTimedTextLine_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __FIVectorView_1_Windows__CMedia__CCore__CTimedTextLine_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __FIVectorView_1_Windows__CMedia__CCore__CTimedTextLine_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __FIVectorView_1_Windows__CMedia__CCore__CTimedTextLine_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __FIVectorView_1_Windows__CMedia__CCore__CTimedTextLine_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __FIVectorView_1_Windows__CMedia__CCore__CTimedTextLine_GetAt(This, index, result) \
    ((This)->lpVtbl->GetAt(This, index, result))

#define __FIVectorView_1_Windows__CMedia__CCore__CTimedTextLine_get_Size(This, result) \
    ((This)->lpVtbl->get_Size(This, result))

#define __FIVectorView_1_Windows__CMedia__CCore__CTimedTextLine_IndexOf(This, value, index, result) \
    ((This)->lpVtbl->IndexOf(This, value, index, result))

#define __FIVectorView_1_Windows__CMedia__CCore__CTimedTextLine_GetMany(This, startIndex, itemsLength, items, result) \
    ((This)->lpVtbl->GetMany(This, startIndex, itemsLength, items, result))

#endif /* COBJMACROS */

#endif // ____FIVectorView_1_Windows__CMedia__CCore__CTimedTextLine_INTERFACE_DEFINED__
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____FIVectorView_1_Windows__CMedia__CCore__CTimedTextSubformat_INTERFACE_DEFINED__)
#define ____FIVectorView_1_Windows__CMedia__CCore__CTimedTextSubformat_INTERFACE_DEFINED__

typedef interface __FIVectorView_1_Windows__CMedia__CCore__CTimedTextSubformat __FIVectorView_1_Windows__CMedia__CCore__CTimedTextSubformat;

//  Declare the parameterized interface IID.
EXTERN_C const IID IID___FIVectorView_1_Windows__CMedia__CCore__CTimedTextSubformat;

typedef struct __FIVectorView_1_Windows__CMedia__CCore__CTimedTextSubformatVtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__FIVectorView_1_Windows__CMedia__CCore__CTimedTextSubformat* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__FIVectorView_1_Windows__CMedia__CCore__CTimedTextSubformat* This);
    ULONG (STDMETHODCALLTYPE* Release)(__FIVectorView_1_Windows__CMedia__CCore__CTimedTextSubformat* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__FIVectorView_1_Windows__CMedia__CCore__CTimedTextSubformat* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__FIVectorView_1_Windows__CMedia__CCore__CTimedTextSubformat* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__FIVectorView_1_Windows__CMedia__CCore__CTimedTextSubformat* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* GetAt)(__FIVectorView_1_Windows__CMedia__CCore__CTimedTextSubformat* This,
        UINT32 index,
        __x_ABI_CWindows_CMedia_CCore_CITimedTextSubformat** result);
    HRESULT (STDMETHODCALLTYPE* get_Size)(__FIVectorView_1_Windows__CMedia__CCore__CTimedTextSubformat* This,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* IndexOf)(__FIVectorView_1_Windows__CMedia__CCore__CTimedTextSubformat* This,
        __x_ABI_CWindows_CMedia_CCore_CITimedTextSubformat* value,
        UINT32* index,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__FIVectorView_1_Windows__CMedia__CCore__CTimedTextSubformat* This,
        UINT32 startIndex,
        UINT32 itemsLength,
        __x_ABI_CWindows_CMedia_CCore_CITimedTextSubformat** items,
        UINT32* result);

    END_INTERFACE
} __FIVectorView_1_Windows__CMedia__CCore__CTimedTextSubformatVtbl;

interface __FIVectorView_1_Windows__CMedia__CCore__CTimedTextSubformat
{
    CONST_VTBL struct __FIVectorView_1_Windows__CMedia__CCore__CTimedTextSubformatVtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __FIVectorView_1_Windows__CMedia__CCore__CTimedTextSubformat_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __FIVectorView_1_Windows__CMedia__CCore__CTimedTextSubformat_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __FIVectorView_1_Windows__CMedia__CCore__CTimedTextSubformat_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __FIVectorView_1_Windows__CMedia__CCore__CTimedTextSubformat_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __FIVectorView_1_Windows__CMedia__CCore__CTimedTextSubformat_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __FIVectorView_1_Windows__CMedia__CCore__CTimedTextSubformat_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __FIVectorView_1_Windows__CMedia__CCore__CTimedTextSubformat_GetAt(This, index, result) \
    ((This)->lpVtbl->GetAt(This, index, result))

#define __FIVectorView_1_Windows__CMedia__CCore__CTimedTextSubformat_get_Size(This, result) \
    ((This)->lpVtbl->get_Size(This, result))

#define __FIVectorView_1_Windows__CMedia__CCore__CTimedTextSubformat_IndexOf(This, value, index, result) \
    ((This)->lpVtbl->IndexOf(This, value, index, result))

#define __FIVectorView_1_Windows__CMedia__CCore__CTimedTextSubformat_GetMany(This, startIndex, itemsLength, items, result) \
    ((This)->lpVtbl->GetMany(This, startIndex, itemsLength, items, result))

#endif /* COBJMACROS */

#endif // ____FIVectorView_1_Windows__CMedia__CCore__CTimedTextSubformat_INTERFACE_DEFINED__
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____FIVectorView_1_Windows__CMedia__CDevices__CCore__CFrameController_INTERFACE_DEFINED__)
#define ____FIVectorView_1_Windows__CMedia__CDevices__CCore__CFrameController_INTERFACE_DEFINED__

typedef interface __FIVectorView_1_Windows__CMedia__CDevices__CCore__CFrameController __FIVectorView_1_Windows__CMedia__CDevices__CCore__CFrameController;

//  Declare the parameterized interface IID.
EXTERN_C const IID IID___FIVectorView_1_Windows__CMedia__CDevices__CCore__CFrameController;

typedef struct __FIVectorView_1_Windows__CMedia__CDevices__CCore__CFrameControllerVtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__FIVectorView_1_Windows__CMedia__CDevices__CCore__CFrameController* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__FIVectorView_1_Windows__CMedia__CDevices__CCore__CFrameController* This);
    ULONG (STDMETHODCALLTYPE* Release)(__FIVectorView_1_Windows__CMedia__CDevices__CCore__CFrameController* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__FIVectorView_1_Windows__CMedia__CDevices__CCore__CFrameController* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__FIVectorView_1_Windows__CMedia__CDevices__CCore__CFrameController* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__FIVectorView_1_Windows__CMedia__CDevices__CCore__CFrameController* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* GetAt)(__FIVectorView_1_Windows__CMedia__CDevices__CCore__CFrameController* This,
        UINT32 index,
        __x_ABI_CWindows_CMedia_CDevices_CCore_CIFrameController** result);
    HRESULT (STDMETHODCALLTYPE* get_Size)(__FIVectorView_1_Windows__CMedia__CDevices__CCore__CFrameController* This,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* IndexOf)(__FIVectorView_1_Windows__CMedia__CDevices__CCore__CFrameController* This,
        __x_ABI_CWindows_CMedia_CDevices_CCore_CIFrameController* value,
        UINT32* index,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__FIVectorView_1_Windows__CMedia__CDevices__CCore__CFrameController* This,
        UINT32 startIndex,
        UINT32 itemsLength,
        __x_ABI_CWindows_CMedia_CDevices_CCore_CIFrameController** items,
        UINT32* result);

    END_INTERFACE
} __FIVectorView_1_Windows__CMedia__CDevices__CCore__CFrameControllerVtbl;

interface __FIVectorView_1_Windows__CMedia__CDevices__CCore__CFrameController
{
    CONST_VTBL struct __FIVectorView_1_Windows__CMedia__CDevices__CCore__CFrameControllerVtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __FIVectorView_1_Windows__CMedia__CDevices__CCore__CFrameController_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __FIVectorView_1_Windows__CMedia__CDevices__CCore__CFrameController_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __FIVectorView_1_Windows__CMedia__CDevices__CCore__CFrameController_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __FIVectorView_1_Windows__CMedia__CDevices__CCore__CFrameController_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __FIVectorView_1_Windows__CMedia__CDevices__CCore__CFrameController_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __FIVectorView_1_Windows__CMedia__CDevices__CCore__CFrameController_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __FIVectorView_1_Windows__CMedia__CDevices__CCore__CFrameController_GetAt(This, index, result) \
    ((This)->lpVtbl->GetAt(This, index, result))

#define __FIVectorView_1_Windows__CMedia__CDevices__CCore__CFrameController_get_Size(This, result) \
    ((This)->lpVtbl->get_Size(This, result))

#define __FIVectorView_1_Windows__CMedia__CDevices__CCore__CFrameController_IndexOf(This, value, index, result) \
    ((This)->lpVtbl->IndexOf(This, value, index, result))

#define __FIVectorView_1_Windows__CMedia__CDevices__CCore__CFrameController_GetMany(This, startIndex, itemsLength, items, result) \
    ((This)->lpVtbl->GetMany(This, startIndex, itemsLength, items, result))

#endif /* COBJMACROS */

#endif // ____FIVectorView_1_Windows__CMedia__CDevices__CCore__CFrameController_INTERFACE_DEFINED__
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____FIVectorView_1_Windows__CMedia__CFaceAnalysis__CDetectedFace_INTERFACE_DEFINED__)
#define ____FIVectorView_1_Windows__CMedia__CFaceAnalysis__CDetectedFace_INTERFACE_DEFINED__

typedef interface __FIVectorView_1_Windows__CMedia__CFaceAnalysis__CDetectedFace __FIVectorView_1_Windows__CMedia__CFaceAnalysis__CDetectedFace;

//  Declare the parameterized interface IID.
EXTERN_C const IID IID___FIVectorView_1_Windows__CMedia__CFaceAnalysis__CDetectedFace;

typedef struct __FIVectorView_1_Windows__CMedia__CFaceAnalysis__CDetectedFaceVtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__FIVectorView_1_Windows__CMedia__CFaceAnalysis__CDetectedFace* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__FIVectorView_1_Windows__CMedia__CFaceAnalysis__CDetectedFace* This);
    ULONG (STDMETHODCALLTYPE* Release)(__FIVectorView_1_Windows__CMedia__CFaceAnalysis__CDetectedFace* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__FIVectorView_1_Windows__CMedia__CFaceAnalysis__CDetectedFace* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__FIVectorView_1_Windows__CMedia__CFaceAnalysis__CDetectedFace* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__FIVectorView_1_Windows__CMedia__CFaceAnalysis__CDetectedFace* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* GetAt)(__FIVectorView_1_Windows__CMedia__CFaceAnalysis__CDetectedFace* This,
        UINT32 index,
        __x_ABI_CWindows_CMedia_CFaceAnalysis_CIDetectedFace** result);
    HRESULT (STDMETHODCALLTYPE* get_Size)(__FIVectorView_1_Windows__CMedia__CFaceAnalysis__CDetectedFace* This,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* IndexOf)(__FIVectorView_1_Windows__CMedia__CFaceAnalysis__CDetectedFace* This,
        __x_ABI_CWindows_CMedia_CFaceAnalysis_CIDetectedFace* value,
        UINT32* index,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__FIVectorView_1_Windows__CMedia__CFaceAnalysis__CDetectedFace* This,
        UINT32 startIndex,
        UINT32 itemsLength,
        __x_ABI_CWindows_CMedia_CFaceAnalysis_CIDetectedFace** items,
        UINT32* result);

    END_INTERFACE
} __FIVectorView_1_Windows__CMedia__CFaceAnalysis__CDetectedFaceVtbl;

interface __FIVectorView_1_Windows__CMedia__CFaceAnalysis__CDetectedFace
{
    CONST_VTBL struct __FIVectorView_1_Windows__CMedia__CFaceAnalysis__CDetectedFaceVtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __FIVectorView_1_Windows__CMedia__CFaceAnalysis__CDetectedFace_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __FIVectorView_1_Windows__CMedia__CFaceAnalysis__CDetectedFace_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __FIVectorView_1_Windows__CMedia__CFaceAnalysis__CDetectedFace_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __FIVectorView_1_Windows__CMedia__CFaceAnalysis__CDetectedFace_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __FIVectorView_1_Windows__CMedia__CFaceAnalysis__CDetectedFace_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __FIVectorView_1_Windows__CMedia__CFaceAnalysis__CDetectedFace_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __FIVectorView_1_Windows__CMedia__CFaceAnalysis__CDetectedFace_GetAt(This, index, result) \
    ((This)->lpVtbl->GetAt(This, index, result))

#define __FIVectorView_1_Windows__CMedia__CFaceAnalysis__CDetectedFace_get_Size(This, result) \
    ((This)->lpVtbl->get_Size(This, result))

#define __FIVectorView_1_Windows__CMedia__CFaceAnalysis__CDetectedFace_IndexOf(This, value, index, result) \
    ((This)->lpVtbl->IndexOf(This, value, index, result))

#define __FIVectorView_1_Windows__CMedia__CFaceAnalysis__CDetectedFace_GetMany(This, startIndex, itemsLength, items, result) \
    ((This)->lpVtbl->GetMany(This, startIndex, itemsLength, items, result))

#endif /* COBJMACROS */

#endif // ____FIVectorView_1_Windows__CMedia__CFaceAnalysis__CDetectedFace_INTERFACE_DEFINED__
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____FIVector_1_Windows__CMedia__CCore__CTimedTextLine_INTERFACE_DEFINED__)
#define ____FIVector_1_Windows__CMedia__CCore__CTimedTextLine_INTERFACE_DEFINED__

typedef interface __FIVector_1_Windows__CMedia__CCore__CTimedTextLine __FIVector_1_Windows__CMedia__CCore__CTimedTextLine;

//  Declare the parameterized interface IID.
EXTERN_C const IID IID___FIVector_1_Windows__CMedia__CCore__CTimedTextLine;

typedef struct __FIVector_1_Windows__CMedia__CCore__CTimedTextLineVtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__FIVector_1_Windows__CMedia__CCore__CTimedTextLine* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__FIVector_1_Windows__CMedia__CCore__CTimedTextLine* This);
    ULONG (STDMETHODCALLTYPE* Release)(__FIVector_1_Windows__CMedia__CCore__CTimedTextLine* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__FIVector_1_Windows__CMedia__CCore__CTimedTextLine* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__FIVector_1_Windows__CMedia__CCore__CTimedTextLine* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__FIVector_1_Windows__CMedia__CCore__CTimedTextLine* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* GetAt)(__FIVector_1_Windows__CMedia__CCore__CTimedTextLine* This,
        UINT32 index,
        __x_ABI_CWindows_CMedia_CCore_CITimedTextLine** result);
    HRESULT (STDMETHODCALLTYPE* get_Size)(__FIVector_1_Windows__CMedia__CCore__CTimedTextLine* This,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* GetView)(__FIVector_1_Windows__CMedia__CCore__CTimedTextLine* This,
        __FIVectorView_1_Windows__CMedia__CCore__CTimedTextLine** result);
    HRESULT (STDMETHODCALLTYPE* IndexOf)(__FIVector_1_Windows__CMedia__CCore__CTimedTextLine* This,
        __x_ABI_CWindows_CMedia_CCore_CITimedTextLine* value,
        UINT32* index,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* SetAt)(__FIVector_1_Windows__CMedia__CCore__CTimedTextLine* This,
        UINT32 index,
        __x_ABI_CWindows_CMedia_CCore_CITimedTextLine* value);
    HRESULT (STDMETHODCALLTYPE* InsertAt)(__FIVector_1_Windows__CMedia__CCore__CTimedTextLine* This,
        UINT32 index,
        __x_ABI_CWindows_CMedia_CCore_CITimedTextLine* value);
    HRESULT (STDMETHODCALLTYPE* RemoveAt)(__FIVector_1_Windows__CMedia__CCore__CTimedTextLine* This,
        UINT32 index);
    HRESULT (STDMETHODCALLTYPE* Append)(__FIVector_1_Windows__CMedia__CCore__CTimedTextLine* This,
        __x_ABI_CWindows_CMedia_CCore_CITimedTextLine* value);
    HRESULT (STDMETHODCALLTYPE* RemoveAtEnd)(__FIVector_1_Windows__CMedia__CCore__CTimedTextLine* This);
    HRESULT (STDMETHODCALLTYPE* Clear)(__FIVector_1_Windows__CMedia__CCore__CTimedTextLine* This);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__FIVector_1_Windows__CMedia__CCore__CTimedTextLine* This,
        UINT32 startIndex,
        UINT32 itemsLength,
        __x_ABI_CWindows_CMedia_CCore_CITimedTextLine** items,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* ReplaceAll)(__FIVector_1_Windows__CMedia__CCore__CTimedTextLine* This,
        UINT32 itemsLength,
        __x_ABI_CWindows_CMedia_CCore_CITimedTextLine** items);

    END_INTERFACE
} __FIVector_1_Windows__CMedia__CCore__CTimedTextLineVtbl;

interface __FIVector_1_Windows__CMedia__CCore__CTimedTextLine
{
    CONST_VTBL struct __FIVector_1_Windows__CMedia__CCore__CTimedTextLineVtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __FIVector_1_Windows__CMedia__CCore__CTimedTextLine_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __FIVector_1_Windows__CMedia__CCore__CTimedTextLine_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __FIVector_1_Windows__CMedia__CCore__CTimedTextLine_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __FIVector_1_Windows__CMedia__CCore__CTimedTextLine_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __FIVector_1_Windows__CMedia__CCore__CTimedTextLine_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __FIVector_1_Windows__CMedia__CCore__CTimedTextLine_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __FIVector_1_Windows__CMedia__CCore__CTimedTextLine_GetAt(This, index, result) \
    ((This)->lpVtbl->GetAt(This, index, result))

#define __FIVector_1_Windows__CMedia__CCore__CTimedTextLine_get_Size(This, result) \
    ((This)->lpVtbl->get_Size(This, result))

#define __FIVector_1_Windows__CMedia__CCore__CTimedTextLine_GetView(This, result) \
    ((This)->lpVtbl->GetView(This, result))

#define __FIVector_1_Windows__CMedia__CCore__CTimedTextLine_IndexOf(This, value, index, result) \
    ((This)->lpVtbl->IndexOf(This, value, index, result))

#define __FIVector_1_Windows__CMedia__CCore__CTimedTextLine_SetAt(This, index, value) \
    ((This)->lpVtbl->SetAt(This, index, value))

#define __FIVector_1_Windows__CMedia__CCore__CTimedTextLine_InsertAt(This, index, value) \
    ((This)->lpVtbl->InsertAt(This, index, value))

#define __FIVector_1_Windows__CMedia__CCore__CTimedTextLine_RemoveAt(This, index) \
    ((This)->lpVtbl->RemoveAt(This, index))

#define __FIVector_1_Windows__CMedia__CCore__CTimedTextLine_Append(This, value) \
    ((This)->lpVtbl->Append(This, value))

#define __FIVector_1_Windows__CMedia__CCore__CTimedTextLine_RemoveAtEnd(This) \
    ((This)->lpVtbl->RemoveAtEnd(This))

#define __FIVector_1_Windows__CMedia__CCore__CTimedTextLine_Clear(This) \
    ((This)->lpVtbl->Clear(This))

#define __FIVector_1_Windows__CMedia__CCore__CTimedTextLine_GetMany(This, startIndex, itemsLength, items, result) \
    ((This)->lpVtbl->GetMany(This, startIndex, itemsLength, items, result))

#define __FIVector_1_Windows__CMedia__CCore__CTimedTextLine_ReplaceAll(This, itemsLength, items) \
    ((This)->lpVtbl->ReplaceAll(This, itemsLength, items))

#endif /* COBJMACROS */

#endif // ____FIVector_1_Windows__CMedia__CCore__CTimedTextLine_INTERFACE_DEFINED__
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____FIVector_1_Windows__CMedia__CCore__CTimedTextSubformat_INTERFACE_DEFINED__)
#define ____FIVector_1_Windows__CMedia__CCore__CTimedTextSubformat_INTERFACE_DEFINED__

typedef interface __FIVector_1_Windows__CMedia__CCore__CTimedTextSubformat __FIVector_1_Windows__CMedia__CCore__CTimedTextSubformat;

//  Declare the parameterized interface IID.
EXTERN_C const IID IID___FIVector_1_Windows__CMedia__CCore__CTimedTextSubformat;

typedef struct __FIVector_1_Windows__CMedia__CCore__CTimedTextSubformatVtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__FIVector_1_Windows__CMedia__CCore__CTimedTextSubformat* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__FIVector_1_Windows__CMedia__CCore__CTimedTextSubformat* This);
    ULONG (STDMETHODCALLTYPE* Release)(__FIVector_1_Windows__CMedia__CCore__CTimedTextSubformat* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__FIVector_1_Windows__CMedia__CCore__CTimedTextSubformat* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__FIVector_1_Windows__CMedia__CCore__CTimedTextSubformat* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__FIVector_1_Windows__CMedia__CCore__CTimedTextSubformat* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* GetAt)(__FIVector_1_Windows__CMedia__CCore__CTimedTextSubformat* This,
        UINT32 index,
        __x_ABI_CWindows_CMedia_CCore_CITimedTextSubformat** result);
    HRESULT (STDMETHODCALLTYPE* get_Size)(__FIVector_1_Windows__CMedia__CCore__CTimedTextSubformat* This,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* GetView)(__FIVector_1_Windows__CMedia__CCore__CTimedTextSubformat* This,
        __FIVectorView_1_Windows__CMedia__CCore__CTimedTextSubformat** result);
    HRESULT (STDMETHODCALLTYPE* IndexOf)(__FIVector_1_Windows__CMedia__CCore__CTimedTextSubformat* This,
        __x_ABI_CWindows_CMedia_CCore_CITimedTextSubformat* value,
        UINT32* index,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* SetAt)(__FIVector_1_Windows__CMedia__CCore__CTimedTextSubformat* This,
        UINT32 index,
        __x_ABI_CWindows_CMedia_CCore_CITimedTextSubformat* value);
    HRESULT (STDMETHODCALLTYPE* InsertAt)(__FIVector_1_Windows__CMedia__CCore__CTimedTextSubformat* This,
        UINT32 index,
        __x_ABI_CWindows_CMedia_CCore_CITimedTextSubformat* value);
    HRESULT (STDMETHODCALLTYPE* RemoveAt)(__FIVector_1_Windows__CMedia__CCore__CTimedTextSubformat* This,
        UINT32 index);
    HRESULT (STDMETHODCALLTYPE* Append)(__FIVector_1_Windows__CMedia__CCore__CTimedTextSubformat* This,
        __x_ABI_CWindows_CMedia_CCore_CITimedTextSubformat* value);
    HRESULT (STDMETHODCALLTYPE* RemoveAtEnd)(__FIVector_1_Windows__CMedia__CCore__CTimedTextSubformat* This);
    HRESULT (STDMETHODCALLTYPE* Clear)(__FIVector_1_Windows__CMedia__CCore__CTimedTextSubformat* This);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__FIVector_1_Windows__CMedia__CCore__CTimedTextSubformat* This,
        UINT32 startIndex,
        UINT32 itemsLength,
        __x_ABI_CWindows_CMedia_CCore_CITimedTextSubformat** items,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* ReplaceAll)(__FIVector_1_Windows__CMedia__CCore__CTimedTextSubformat* This,
        UINT32 itemsLength,
        __x_ABI_CWindows_CMedia_CCore_CITimedTextSubformat** items);

    END_INTERFACE
} __FIVector_1_Windows__CMedia__CCore__CTimedTextSubformatVtbl;

interface __FIVector_1_Windows__CMedia__CCore__CTimedTextSubformat
{
    CONST_VTBL struct __FIVector_1_Windows__CMedia__CCore__CTimedTextSubformatVtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __FIVector_1_Windows__CMedia__CCore__CTimedTextSubformat_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __FIVector_1_Windows__CMedia__CCore__CTimedTextSubformat_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __FIVector_1_Windows__CMedia__CCore__CTimedTextSubformat_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __FIVector_1_Windows__CMedia__CCore__CTimedTextSubformat_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __FIVector_1_Windows__CMedia__CCore__CTimedTextSubformat_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __FIVector_1_Windows__CMedia__CCore__CTimedTextSubformat_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __FIVector_1_Windows__CMedia__CCore__CTimedTextSubformat_GetAt(This, index, result) \
    ((This)->lpVtbl->GetAt(This, index, result))

#define __FIVector_1_Windows__CMedia__CCore__CTimedTextSubformat_get_Size(This, result) \
    ((This)->lpVtbl->get_Size(This, result))

#define __FIVector_1_Windows__CMedia__CCore__CTimedTextSubformat_GetView(This, result) \
    ((This)->lpVtbl->GetView(This, result))

#define __FIVector_1_Windows__CMedia__CCore__CTimedTextSubformat_IndexOf(This, value, index, result) \
    ((This)->lpVtbl->IndexOf(This, value, index, result))

#define __FIVector_1_Windows__CMedia__CCore__CTimedTextSubformat_SetAt(This, index, value) \
    ((This)->lpVtbl->SetAt(This, index, value))

#define __FIVector_1_Windows__CMedia__CCore__CTimedTextSubformat_InsertAt(This, index, value) \
    ((This)->lpVtbl->InsertAt(This, index, value))

#define __FIVector_1_Windows__CMedia__CCore__CTimedTextSubformat_RemoveAt(This, index) \
    ((This)->lpVtbl->RemoveAt(This, index))

#define __FIVector_1_Windows__CMedia__CCore__CTimedTextSubformat_Append(This, value) \
    ((This)->lpVtbl->Append(This, value))

#define __FIVector_1_Windows__CMedia__CCore__CTimedTextSubformat_RemoveAtEnd(This) \
    ((This)->lpVtbl->RemoveAtEnd(This))

#define __FIVector_1_Windows__CMedia__CCore__CTimedTextSubformat_Clear(This) \
    ((This)->lpVtbl->Clear(This))

#define __FIVector_1_Windows__CMedia__CCore__CTimedTextSubformat_GetMany(This, startIndex, itemsLength, items, result) \
    ((This)->lpVtbl->GetMany(This, startIndex, itemsLength, items, result))

#define __FIVector_1_Windows__CMedia__CCore__CTimedTextSubformat_ReplaceAll(This, itemsLength, items) \
    ((This)->lpVtbl->ReplaceAll(This, itemsLength, items))

#endif /* COBJMACROS */

#endif // ____FIVector_1_Windows__CMedia__CCore__CTimedTextSubformat_INTERFACE_DEFINED__
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

#if !defined(____FIReference_1_double_INTERFACE_DEFINED__)
#define ____FIReference_1_double_INTERFACE_DEFINED__

typedef interface __FIReference_1_double __FIReference_1_double;

//  Declare the parameterized interface IID.
EXTERN_C const IID IID___FIReference_1_double;

typedef struct __FIReference_1_doubleVtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__FIReference_1_double* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__FIReference_1_double* This);
    ULONG (STDMETHODCALLTYPE* Release)(__FIReference_1_double* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__FIReference_1_double* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__FIReference_1_double* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__FIReference_1_double* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* get_Value)(__FIReference_1_double* This,
        DOUBLE* result);

    END_INTERFACE
} __FIReference_1_doubleVtbl;

interface __FIReference_1_double
{
    CONST_VTBL struct __FIReference_1_doubleVtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __FIReference_1_double_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __FIReference_1_double_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __FIReference_1_double_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __FIReference_1_double_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __FIReference_1_double_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __FIReference_1_double_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __FIReference_1_double_get_Value(This, result) \
    ((This)->lpVtbl->get_Value(This, result))

#endif /* COBJMACROS */

#endif // ____FIReference_1_double_INTERFACE_DEFINED__

#if !defined(____FIReference_1_int_INTERFACE_DEFINED__)
#define ____FIReference_1_int_INTERFACE_DEFINED__

typedef interface __FIReference_1_int __FIReference_1_int;

//  Declare the parameterized interface IID.
EXTERN_C const IID IID___FIReference_1_int;

typedef struct __FIReference_1_intVtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__FIReference_1_int* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__FIReference_1_int* This);
    ULONG (STDMETHODCALLTYPE* Release)(__FIReference_1_int* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__FIReference_1_int* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__FIReference_1_int* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__FIReference_1_int* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* get_Value)(__FIReference_1_int* This,
        INT32* result);

    END_INTERFACE
} __FIReference_1_intVtbl;

interface __FIReference_1_int
{
    CONST_VTBL struct __FIReference_1_intVtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __FIReference_1_int_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __FIReference_1_int_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __FIReference_1_int_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __FIReference_1_int_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __FIReference_1_int_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __FIReference_1_int_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __FIReference_1_int_get_Value(This, result) \
    ((This)->lpVtbl->get_Value(This, result))

#endif /* COBJMACROS */

#endif // ____FIReference_1_int_INTERFACE_DEFINED__

#if !defined(____FIReference_1_UINT32_INTERFACE_DEFINED__)
#define ____FIReference_1_UINT32_INTERFACE_DEFINED__

typedef interface __FIReference_1_UINT32 __FIReference_1_UINT32;

//  Declare the parameterized interface IID.
EXTERN_C const IID IID___FIReference_1_UINT32;

typedef struct __FIReference_1_UINT32Vtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__FIReference_1_UINT32* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__FIReference_1_UINT32* This);
    ULONG (STDMETHODCALLTYPE* Release)(__FIReference_1_UINT32* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__FIReference_1_UINT32* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__FIReference_1_UINT32* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__FIReference_1_UINT32* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* get_Value)(__FIReference_1_UINT32* This,
        UINT32* result);

    END_INTERFACE
} __FIReference_1_UINT32Vtbl;

interface __FIReference_1_UINT32
{
    CONST_VTBL struct __FIReference_1_UINT32Vtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __FIReference_1_UINT32_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __FIReference_1_UINT32_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __FIReference_1_UINT32_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __FIReference_1_UINT32_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __FIReference_1_UINT32_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __FIReference_1_UINT32_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __FIReference_1_UINT32_get_Value(This, result) \
    ((This)->lpVtbl->get_Value(This, result))

#endif /* COBJMACROS */

#endif // ____FIReference_1_UINT32_INTERFACE_DEFINED__

typedef struct __x_ABI_CWindows_CFoundation_CTimeSpan __x_ABI_CWindows_CFoundation_CTimeSpan;

#if WINDOWS_FOUNDATION_FOUNDATIONCONTRACT_VERSION >= 0x10000
#if !defined(____FIReference_1_Windows__CFoundation__CTimeSpan_INTERFACE_DEFINED__)
#define ____FIReference_1_Windows__CFoundation__CTimeSpan_INTERFACE_DEFINED__

typedef interface __FIReference_1_Windows__CFoundation__CTimeSpan __FIReference_1_Windows__CFoundation__CTimeSpan;

//  Declare the parameterized interface IID.
EXTERN_C const IID IID___FIReference_1_Windows__CFoundation__CTimeSpan;

typedef struct __FIReference_1_Windows__CFoundation__CTimeSpanVtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__FIReference_1_Windows__CFoundation__CTimeSpan* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__FIReference_1_Windows__CFoundation__CTimeSpan* This);
    ULONG (STDMETHODCALLTYPE* Release)(__FIReference_1_Windows__CFoundation__CTimeSpan* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__FIReference_1_Windows__CFoundation__CTimeSpan* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__FIReference_1_Windows__CFoundation__CTimeSpan* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__FIReference_1_Windows__CFoundation__CTimeSpan* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* get_Value)(__FIReference_1_Windows__CFoundation__CTimeSpan* This,
        struct __x_ABI_CWindows_CFoundation_CTimeSpan* result);

    END_INTERFACE
} __FIReference_1_Windows__CFoundation__CTimeSpanVtbl;

interface __FIReference_1_Windows__CFoundation__CTimeSpan
{
    CONST_VTBL struct __FIReference_1_Windows__CFoundation__CTimeSpanVtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __FIReference_1_Windows__CFoundation__CTimeSpan_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __FIReference_1_Windows__CFoundation__CTimeSpan_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __FIReference_1_Windows__CFoundation__CTimeSpan_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __FIReference_1_Windows__CFoundation__CTimeSpan_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __FIReference_1_Windows__CFoundation__CTimeSpan_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __FIReference_1_Windows__CFoundation__CTimeSpan_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __FIReference_1_Windows__CFoundation__CTimeSpan_get_Value(This, result) \
    ((This)->lpVtbl->get_Value(This, result))

#endif /* COBJMACROS */

#endif // ____FIReference_1_Windows__CFoundation__CTimeSpan_INTERFACE_DEFINED__
#endif // WINDOWS_FOUNDATION_FOUNDATIONCONTRACT_VERSION >= 0x10000

#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____FIReference_1_Windows__CMedia__CCore__CMseTimeRange_INTERFACE_DEFINED__)
#define ____FIReference_1_Windows__CMedia__CCore__CMseTimeRange_INTERFACE_DEFINED__

typedef interface __FIReference_1_Windows__CMedia__CCore__CMseTimeRange __FIReference_1_Windows__CMedia__CCore__CMseTimeRange;

//  Declare the parameterized interface IID.
EXTERN_C const IID IID___FIReference_1_Windows__CMedia__CCore__CMseTimeRange;

typedef struct __FIReference_1_Windows__CMedia__CCore__CMseTimeRangeVtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__FIReference_1_Windows__CMedia__CCore__CMseTimeRange* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__FIReference_1_Windows__CMedia__CCore__CMseTimeRange* This);
    ULONG (STDMETHODCALLTYPE* Release)(__FIReference_1_Windows__CMedia__CCore__CMseTimeRange* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__FIReference_1_Windows__CMedia__CCore__CMseTimeRange* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__FIReference_1_Windows__CMedia__CCore__CMseTimeRange* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__FIReference_1_Windows__CMedia__CCore__CMseTimeRange* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* get_Value)(__FIReference_1_Windows__CMedia__CCore__CMseTimeRange* This,
        struct __x_ABI_CWindows_CMedia_CCore_CMseTimeRange* result);

    END_INTERFACE
} __FIReference_1_Windows__CMedia__CCore__CMseTimeRangeVtbl;

interface __FIReference_1_Windows__CMedia__CCore__CMseTimeRange
{
    CONST_VTBL struct __FIReference_1_Windows__CMedia__CCore__CMseTimeRangeVtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __FIReference_1_Windows__CMedia__CCore__CMseTimeRange_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __FIReference_1_Windows__CMedia__CCore__CMseTimeRange_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __FIReference_1_Windows__CMedia__CCore__CMseTimeRange_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __FIReference_1_Windows__CMedia__CCore__CMseTimeRange_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __FIReference_1_Windows__CMedia__CCore__CMseTimeRange_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __FIReference_1_Windows__CMedia__CCore__CMseTimeRange_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __FIReference_1_Windows__CMedia__CCore__CMseTimeRange_get_Value(This, result) \
    ((This)->lpVtbl->get_Value(This, result))

#endif /* COBJMACROS */

#endif // ____FIReference_1_Windows__CMedia__CCore__CMseTimeRange_INTERFACE_DEFINED__
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x30000
#if !defined(____FITypedEventHandler_2_Windows__CMedia__CCore__CAudioTrack_Windows__CMedia__CCore__CAudioTrackOpenFailedEventArgs_INTERFACE_DEFINED__)
#define ____FITypedEventHandler_2_Windows__CMedia__CCore__CAudioTrack_Windows__CMedia__CCore__CAudioTrackOpenFailedEventArgs_INTERFACE_DEFINED__

typedef interface __FITypedEventHandler_2_Windows__CMedia__CCore__CAudioTrack_Windows__CMedia__CCore__CAudioTrackOpenFailedEventArgs __FITypedEventHandler_2_Windows__CMedia__CCore__CAudioTrack_Windows__CMedia__CCore__CAudioTrackOpenFailedEventArgs;

//  Declare the parameterized interface IID.
EXTERN_C const IID IID___FITypedEventHandler_2_Windows__CMedia__CCore__CAudioTrack_Windows__CMedia__CCore__CAudioTrackOpenFailedEventArgs;

typedef struct __FITypedEventHandler_2_Windows__CMedia__CCore__CAudioTrack_Windows__CMedia__CCore__CAudioTrackOpenFailedEventArgsVtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__FITypedEventHandler_2_Windows__CMedia__CCore__CAudioTrack_Windows__CMedia__CCore__CAudioTrackOpenFailedEventArgs* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__FITypedEventHandler_2_Windows__CMedia__CCore__CAudioTrack_Windows__CMedia__CCore__CAudioTrackOpenFailedEventArgs* This);
    ULONG (STDMETHODCALLTYPE* Release)(__FITypedEventHandler_2_Windows__CMedia__CCore__CAudioTrack_Windows__CMedia__CCore__CAudioTrackOpenFailedEventArgs* This);
    HRESULT (STDMETHODCALLTYPE* Invoke)(__FITypedEventHandler_2_Windows__CMedia__CCore__CAudioTrack_Windows__CMedia__CCore__CAudioTrackOpenFailedEventArgs* This,
        __x_ABI_CWindows_CMedia_CCore_CIMediaTrack* sender,
        __x_ABI_CWindows_CMedia_CCore_CIAudioTrackOpenFailedEventArgs* args);

    END_INTERFACE
} __FITypedEventHandler_2_Windows__CMedia__CCore__CAudioTrack_Windows__CMedia__CCore__CAudioTrackOpenFailedEventArgsVtbl;

interface __FITypedEventHandler_2_Windows__CMedia__CCore__CAudioTrack_Windows__CMedia__CCore__CAudioTrackOpenFailedEventArgs
{
    CONST_VTBL struct __FITypedEventHandler_2_Windows__CMedia__CCore__CAudioTrack_Windows__CMedia__CCore__CAudioTrackOpenFailedEventArgsVtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __FITypedEventHandler_2_Windows__CMedia__CCore__CAudioTrack_Windows__CMedia__CCore__CAudioTrackOpenFailedEventArgs_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __FITypedEventHandler_2_Windows__CMedia__CCore__CAudioTrack_Windows__CMedia__CCore__CAudioTrackOpenFailedEventArgs_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __FITypedEventHandler_2_Windows__CMedia__CCore__CAudioTrack_Windows__CMedia__CCore__CAudioTrackOpenFailedEventArgs_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __FITypedEventHandler_2_Windows__CMedia__CCore__CAudioTrack_Windows__CMedia__CCore__CAudioTrackOpenFailedEventArgs_Invoke(This, sender, args) \
    ((This)->lpVtbl->Invoke(This, sender, args))

#endif /* COBJMACROS */

#endif // ____FITypedEventHandler_2_Windows__CMedia__CCore__CAudioTrack_Windows__CMedia__CCore__CAudioTrackOpenFailedEventArgs_INTERFACE_DEFINED__
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x30000
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____FITypedEventHandler_2_Windows__CMedia__CCore__CFaceDetectionEffect_Windows__CMedia__CCore__CFaceDetectedEventArgs_INTERFACE_DEFINED__)
#define ____FITypedEventHandler_2_Windows__CMedia__CCore__CFaceDetectionEffect_Windows__CMedia__CCore__CFaceDetectedEventArgs_INTERFACE_DEFINED__

typedef interface __FITypedEventHandler_2_Windows__CMedia__CCore__CFaceDetectionEffect_Windows__CMedia__CCore__CFaceDetectedEventArgs __FITypedEventHandler_2_Windows__CMedia__CCore__CFaceDetectionEffect_Windows__CMedia__CCore__CFaceDetectedEventArgs;

//  Declare the parameterized interface IID.
EXTERN_C const IID IID___FITypedEventHandler_2_Windows__CMedia__CCore__CFaceDetectionEffect_Windows__CMedia__CCore__CFaceDetectedEventArgs;

typedef struct __FITypedEventHandler_2_Windows__CMedia__CCore__CFaceDetectionEffect_Windows__CMedia__CCore__CFaceDetectedEventArgsVtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__FITypedEventHandler_2_Windows__CMedia__CCore__CFaceDetectionEffect_Windows__CMedia__CCore__CFaceDetectedEventArgs* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__FITypedEventHandler_2_Windows__CMedia__CCore__CFaceDetectionEffect_Windows__CMedia__CCore__CFaceDetectedEventArgs* This);
    ULONG (STDMETHODCALLTYPE* Release)(__FITypedEventHandler_2_Windows__CMedia__CCore__CFaceDetectionEffect_Windows__CMedia__CCore__CFaceDetectedEventArgs* This);
    HRESULT (STDMETHODCALLTYPE* Invoke)(__FITypedEventHandler_2_Windows__CMedia__CCore__CFaceDetectionEffect_Windows__CMedia__CCore__CFaceDetectedEventArgs* This,
        __x_ABI_CWindows_CMedia_CCore_CIFaceDetectionEffect* sender,
        __x_ABI_CWindows_CMedia_CCore_CIFaceDetectedEventArgs* args);

    END_INTERFACE
} __FITypedEventHandler_2_Windows__CMedia__CCore__CFaceDetectionEffect_Windows__CMedia__CCore__CFaceDetectedEventArgsVtbl;

interface __FITypedEventHandler_2_Windows__CMedia__CCore__CFaceDetectionEffect_Windows__CMedia__CCore__CFaceDetectedEventArgs
{
    CONST_VTBL struct __FITypedEventHandler_2_Windows__CMedia__CCore__CFaceDetectionEffect_Windows__CMedia__CCore__CFaceDetectedEventArgsVtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __FITypedEventHandler_2_Windows__CMedia__CCore__CFaceDetectionEffect_Windows__CMedia__CCore__CFaceDetectedEventArgs_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __FITypedEventHandler_2_Windows__CMedia__CCore__CFaceDetectionEffect_Windows__CMedia__CCore__CFaceDetectedEventArgs_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __FITypedEventHandler_2_Windows__CMedia__CCore__CFaceDetectionEffect_Windows__CMedia__CCore__CFaceDetectedEventArgs_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __FITypedEventHandler_2_Windows__CMedia__CCore__CFaceDetectionEffect_Windows__CMedia__CCore__CFaceDetectedEventArgs_Invoke(This, sender, args) \
    ((This)->lpVtbl->Invoke(This, sender, args))

#endif /* COBJMACROS */

#endif // ____FITypedEventHandler_2_Windows__CMedia__CCore__CFaceDetectionEffect_Windows__CMedia__CCore__CFaceDetectedEventArgs_INTERFACE_DEFINED__
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____FITypedEventHandler_2_Windows__CMedia__CCore__CISingleSelectMediaTrackList_IInspectable_INTERFACE_DEFINED__)
#define ____FITypedEventHandler_2_Windows__CMedia__CCore__CISingleSelectMediaTrackList_IInspectable_INTERFACE_DEFINED__

typedef interface __FITypedEventHandler_2_Windows__CMedia__CCore__CISingleSelectMediaTrackList_IInspectable __FITypedEventHandler_2_Windows__CMedia__CCore__CISingleSelectMediaTrackList_IInspectable;

//  Declare the parameterized interface IID.
EXTERN_C const IID IID___FITypedEventHandler_2_Windows__CMedia__CCore__CISingleSelectMediaTrackList_IInspectable;

typedef struct __FITypedEventHandler_2_Windows__CMedia__CCore__CISingleSelectMediaTrackList_IInspectableVtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__FITypedEventHandler_2_Windows__CMedia__CCore__CISingleSelectMediaTrackList_IInspectable* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__FITypedEventHandler_2_Windows__CMedia__CCore__CISingleSelectMediaTrackList_IInspectable* This);
    ULONG (STDMETHODCALLTYPE* Release)(__FITypedEventHandler_2_Windows__CMedia__CCore__CISingleSelectMediaTrackList_IInspectable* This);
    HRESULT (STDMETHODCALLTYPE* Invoke)(__FITypedEventHandler_2_Windows__CMedia__CCore__CISingleSelectMediaTrackList_IInspectable* This,
        __x_ABI_CWindows_CMedia_CCore_CISingleSelectMediaTrackList* sender,
        IInspectable* args);

    END_INTERFACE
} __FITypedEventHandler_2_Windows__CMedia__CCore__CISingleSelectMediaTrackList_IInspectableVtbl;

interface __FITypedEventHandler_2_Windows__CMedia__CCore__CISingleSelectMediaTrackList_IInspectable
{
    CONST_VTBL struct __FITypedEventHandler_2_Windows__CMedia__CCore__CISingleSelectMediaTrackList_IInspectableVtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __FITypedEventHandler_2_Windows__CMedia__CCore__CISingleSelectMediaTrackList_IInspectable_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __FITypedEventHandler_2_Windows__CMedia__CCore__CISingleSelectMediaTrackList_IInspectable_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __FITypedEventHandler_2_Windows__CMedia__CCore__CISingleSelectMediaTrackList_IInspectable_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __FITypedEventHandler_2_Windows__CMedia__CCore__CISingleSelectMediaTrackList_IInspectable_Invoke(This, sender, args) \
    ((This)->lpVtbl->Invoke(This, sender, args))

#endif /* COBJMACROS */

#endif // ____FITypedEventHandler_2_Windows__CMedia__CCore__CISingleSelectMediaTrackList_IInspectable_INTERFACE_DEFINED__
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x20000
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x20000
#if !defined(____FITypedEventHandler_2_Windows__CMedia__CCore__CMediaBinder_Windows__CMedia__CCore__CMediaBindingEventArgs_INTERFACE_DEFINED__)
#define ____FITypedEventHandler_2_Windows__CMedia__CCore__CMediaBinder_Windows__CMedia__CCore__CMediaBindingEventArgs_INTERFACE_DEFINED__

typedef interface __FITypedEventHandler_2_Windows__CMedia__CCore__CMediaBinder_Windows__CMedia__CCore__CMediaBindingEventArgs __FITypedEventHandler_2_Windows__CMedia__CCore__CMediaBinder_Windows__CMedia__CCore__CMediaBindingEventArgs;

//  Declare the parameterized interface IID.
EXTERN_C const IID IID___FITypedEventHandler_2_Windows__CMedia__CCore__CMediaBinder_Windows__CMedia__CCore__CMediaBindingEventArgs;

typedef struct __FITypedEventHandler_2_Windows__CMedia__CCore__CMediaBinder_Windows__CMedia__CCore__CMediaBindingEventArgsVtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__FITypedEventHandler_2_Windows__CMedia__CCore__CMediaBinder_Windows__CMedia__CCore__CMediaBindingEventArgs* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__FITypedEventHandler_2_Windows__CMedia__CCore__CMediaBinder_Windows__CMedia__CCore__CMediaBindingEventArgs* This);
    ULONG (STDMETHODCALLTYPE* Release)(__FITypedEventHandler_2_Windows__CMedia__CCore__CMediaBinder_Windows__CMedia__CCore__CMediaBindingEventArgs* This);
    HRESULT (STDMETHODCALLTYPE* Invoke)(__FITypedEventHandler_2_Windows__CMedia__CCore__CMediaBinder_Windows__CMedia__CCore__CMediaBindingEventArgs* This,
        __x_ABI_CWindows_CMedia_CCore_CIMediaBinder* sender,
        __x_ABI_CWindows_CMedia_CCore_CIMediaBindingEventArgs* args);

    END_INTERFACE
} __FITypedEventHandler_2_Windows__CMedia__CCore__CMediaBinder_Windows__CMedia__CCore__CMediaBindingEventArgsVtbl;

interface __FITypedEventHandler_2_Windows__CMedia__CCore__CMediaBinder_Windows__CMedia__CCore__CMediaBindingEventArgs
{
    CONST_VTBL struct __FITypedEventHandler_2_Windows__CMedia__CCore__CMediaBinder_Windows__CMedia__CCore__CMediaBindingEventArgsVtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __FITypedEventHandler_2_Windows__CMedia__CCore__CMediaBinder_Windows__CMedia__CCore__CMediaBindingEventArgs_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __FITypedEventHandler_2_Windows__CMedia__CCore__CMediaBinder_Windows__CMedia__CCore__CMediaBindingEventArgs_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __FITypedEventHandler_2_Windows__CMedia__CCore__CMediaBinder_Windows__CMedia__CCore__CMediaBindingEventArgs_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __FITypedEventHandler_2_Windows__CMedia__CCore__CMediaBinder_Windows__CMedia__CCore__CMediaBindingEventArgs_Invoke(This, sender, args) \
    ((This)->lpVtbl->Invoke(This, sender, args))

#endif /* COBJMACROS */

#endif // ____FITypedEventHandler_2_Windows__CMedia__CCore__CMediaBinder_Windows__CMedia__CCore__CMediaBindingEventArgs_INTERFACE_DEFINED__
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x20000
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x20000

#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x20000
#if !defined(____FITypedEventHandler_2_Windows__CMedia__CCore__CMediaBindingEventArgs_IInspectable_INTERFACE_DEFINED__)
#define ____FITypedEventHandler_2_Windows__CMedia__CCore__CMediaBindingEventArgs_IInspectable_INTERFACE_DEFINED__

typedef interface __FITypedEventHandler_2_Windows__CMedia__CCore__CMediaBindingEventArgs_IInspectable __FITypedEventHandler_2_Windows__CMedia__CCore__CMediaBindingEventArgs_IInspectable;

//  Declare the parameterized interface IID.
EXTERN_C const IID IID___FITypedEventHandler_2_Windows__CMedia__CCore__CMediaBindingEventArgs_IInspectable;

typedef struct __FITypedEventHandler_2_Windows__CMedia__CCore__CMediaBindingEventArgs_IInspectableVtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__FITypedEventHandler_2_Windows__CMedia__CCore__CMediaBindingEventArgs_IInspectable* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__FITypedEventHandler_2_Windows__CMedia__CCore__CMediaBindingEventArgs_IInspectable* This);
    ULONG (STDMETHODCALLTYPE* Release)(__FITypedEventHandler_2_Windows__CMedia__CCore__CMediaBindingEventArgs_IInspectable* This);
    HRESULT (STDMETHODCALLTYPE* Invoke)(__FITypedEventHandler_2_Windows__CMedia__CCore__CMediaBindingEventArgs_IInspectable* This,
        __x_ABI_CWindows_CMedia_CCore_CIMediaBindingEventArgs* sender,
        IInspectable* args);

    END_INTERFACE
} __FITypedEventHandler_2_Windows__CMedia__CCore__CMediaBindingEventArgs_IInspectableVtbl;

interface __FITypedEventHandler_2_Windows__CMedia__CCore__CMediaBindingEventArgs_IInspectable
{
    CONST_VTBL struct __FITypedEventHandler_2_Windows__CMedia__CCore__CMediaBindingEventArgs_IInspectableVtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __FITypedEventHandler_2_Windows__CMedia__CCore__CMediaBindingEventArgs_IInspectable_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __FITypedEventHandler_2_Windows__CMedia__CCore__CMediaBindingEventArgs_IInspectable_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __FITypedEventHandler_2_Windows__CMedia__CCore__CMediaBindingEventArgs_IInspectable_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __FITypedEventHandler_2_Windows__CMedia__CCore__CMediaBindingEventArgs_IInspectable_Invoke(This, sender, args) \
    ((This)->lpVtbl->Invoke(This, sender, args))

#endif /* COBJMACROS */

#endif // ____FITypedEventHandler_2_Windows__CMedia__CCore__CMediaBindingEventArgs_IInspectable_INTERFACE_DEFINED__
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x20000

#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____FITypedEventHandler_2_Windows__CMedia__CCore__CMediaSource_Windows__CMedia__CCore__CMediaSourceOpenOperationCompletedEventArgs_INTERFACE_DEFINED__)
#define ____FITypedEventHandler_2_Windows__CMedia__CCore__CMediaSource_Windows__CMedia__CCore__CMediaSourceOpenOperationCompletedEventArgs_INTERFACE_DEFINED__

typedef interface __FITypedEventHandler_2_Windows__CMedia__CCore__CMediaSource_Windows__CMedia__CCore__CMediaSourceOpenOperationCompletedEventArgs __FITypedEventHandler_2_Windows__CMedia__CCore__CMediaSource_Windows__CMedia__CCore__CMediaSourceOpenOperationCompletedEventArgs;

//  Declare the parameterized interface IID.
EXTERN_C const IID IID___FITypedEventHandler_2_Windows__CMedia__CCore__CMediaSource_Windows__CMedia__CCore__CMediaSourceOpenOperationCompletedEventArgs;

typedef struct __FITypedEventHandler_2_Windows__CMedia__CCore__CMediaSource_Windows__CMedia__CCore__CMediaSourceOpenOperationCompletedEventArgsVtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__FITypedEventHandler_2_Windows__CMedia__CCore__CMediaSource_Windows__CMedia__CCore__CMediaSourceOpenOperationCompletedEventArgs* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__FITypedEventHandler_2_Windows__CMedia__CCore__CMediaSource_Windows__CMedia__CCore__CMediaSourceOpenOperationCompletedEventArgs* This);
    ULONG (STDMETHODCALLTYPE* Release)(__FITypedEventHandler_2_Windows__CMedia__CCore__CMediaSource_Windows__CMedia__CCore__CMediaSourceOpenOperationCompletedEventArgs* This);
    HRESULT (STDMETHODCALLTYPE* Invoke)(__FITypedEventHandler_2_Windows__CMedia__CCore__CMediaSource_Windows__CMedia__CCore__CMediaSourceOpenOperationCompletedEventArgs* This,
        __x_ABI_CWindows_CMedia_CCore_CIMediaSource2* sender,
        __x_ABI_CWindows_CMedia_CCore_CIMediaSourceOpenOperationCompletedEventArgs* args);

    END_INTERFACE
} __FITypedEventHandler_2_Windows__CMedia__CCore__CMediaSource_Windows__CMedia__CCore__CMediaSourceOpenOperationCompletedEventArgsVtbl;

interface __FITypedEventHandler_2_Windows__CMedia__CCore__CMediaSource_Windows__CMedia__CCore__CMediaSourceOpenOperationCompletedEventArgs
{
    CONST_VTBL struct __FITypedEventHandler_2_Windows__CMedia__CCore__CMediaSource_Windows__CMedia__CCore__CMediaSourceOpenOperationCompletedEventArgsVtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __FITypedEventHandler_2_Windows__CMedia__CCore__CMediaSource_Windows__CMedia__CCore__CMediaSourceOpenOperationCompletedEventArgs_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __FITypedEventHandler_2_Windows__CMedia__CCore__CMediaSource_Windows__CMedia__CCore__CMediaSourceOpenOperationCompletedEventArgs_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __FITypedEventHandler_2_Windows__CMedia__CCore__CMediaSource_Windows__CMedia__CCore__CMediaSourceOpenOperationCompletedEventArgs_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __FITypedEventHandler_2_Windows__CMedia__CCore__CMediaSource_Windows__CMedia__CCore__CMediaSourceOpenOperationCompletedEventArgs_Invoke(This, sender, args) \
    ((This)->lpVtbl->Invoke(This, sender, args))

#endif /* COBJMACROS */

#endif // ____FITypedEventHandler_2_Windows__CMedia__CCore__CMediaSource_Windows__CMedia__CCore__CMediaSourceOpenOperationCompletedEventArgs_INTERFACE_DEFINED__
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x20000
#if !defined(____FITypedEventHandler_2_Windows__CMedia__CCore__CMediaSource_Windows__CMedia__CCore__CMediaSourceStateChangedEventArgs_INTERFACE_DEFINED__)
#define ____FITypedEventHandler_2_Windows__CMedia__CCore__CMediaSource_Windows__CMedia__CCore__CMediaSourceStateChangedEventArgs_INTERFACE_DEFINED__

typedef interface __FITypedEventHandler_2_Windows__CMedia__CCore__CMediaSource_Windows__CMedia__CCore__CMediaSourceStateChangedEventArgs __FITypedEventHandler_2_Windows__CMedia__CCore__CMediaSource_Windows__CMedia__CCore__CMediaSourceStateChangedEventArgs;

//  Declare the parameterized interface IID.
EXTERN_C const IID IID___FITypedEventHandler_2_Windows__CMedia__CCore__CMediaSource_Windows__CMedia__CCore__CMediaSourceStateChangedEventArgs;

typedef struct __FITypedEventHandler_2_Windows__CMedia__CCore__CMediaSource_Windows__CMedia__CCore__CMediaSourceStateChangedEventArgsVtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__FITypedEventHandler_2_Windows__CMedia__CCore__CMediaSource_Windows__CMedia__CCore__CMediaSourceStateChangedEventArgs* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__FITypedEventHandler_2_Windows__CMedia__CCore__CMediaSource_Windows__CMedia__CCore__CMediaSourceStateChangedEventArgs* This);
    ULONG (STDMETHODCALLTYPE* Release)(__FITypedEventHandler_2_Windows__CMedia__CCore__CMediaSource_Windows__CMedia__CCore__CMediaSourceStateChangedEventArgs* This);
    HRESULT (STDMETHODCALLTYPE* Invoke)(__FITypedEventHandler_2_Windows__CMedia__CCore__CMediaSource_Windows__CMedia__CCore__CMediaSourceStateChangedEventArgs* This,
        __x_ABI_CWindows_CMedia_CCore_CIMediaSource2* sender,
        __x_ABI_CWindows_CMedia_CCore_CIMediaSourceStateChangedEventArgs* args);

    END_INTERFACE
} __FITypedEventHandler_2_Windows__CMedia__CCore__CMediaSource_Windows__CMedia__CCore__CMediaSourceStateChangedEventArgsVtbl;

interface __FITypedEventHandler_2_Windows__CMedia__CCore__CMediaSource_Windows__CMedia__CCore__CMediaSourceStateChangedEventArgs
{
    CONST_VTBL struct __FITypedEventHandler_2_Windows__CMedia__CCore__CMediaSource_Windows__CMedia__CCore__CMediaSourceStateChangedEventArgsVtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __FITypedEventHandler_2_Windows__CMedia__CCore__CMediaSource_Windows__CMedia__CCore__CMediaSourceStateChangedEventArgs_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __FITypedEventHandler_2_Windows__CMedia__CCore__CMediaSource_Windows__CMedia__CCore__CMediaSourceStateChangedEventArgs_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __FITypedEventHandler_2_Windows__CMedia__CCore__CMediaSource_Windows__CMedia__CCore__CMediaSourceStateChangedEventArgs_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __FITypedEventHandler_2_Windows__CMedia__CCore__CMediaSource_Windows__CMedia__CCore__CMediaSourceStateChangedEventArgs_Invoke(This, sender, args) \
    ((This)->lpVtbl->Invoke(This, sender, args))

#endif /* COBJMACROS */

#endif // ____FITypedEventHandler_2_Windows__CMedia__CCore__CMediaSource_Windows__CMedia__CCore__CMediaSourceStateChangedEventArgs_INTERFACE_DEFINED__
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x20000
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x50000
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x50000
#if !defined(____FITypedEventHandler_2_Windows__CMedia__CCore__CMediaSourceAppServiceConnection_Windows__CMedia__CCore__CInitializeMediaStreamSourceRequestedEventArgs_INTERFACE_DEFINED__)
#define ____FITypedEventHandler_2_Windows__CMedia__CCore__CMediaSourceAppServiceConnection_Windows__CMedia__CCore__CInitializeMediaStreamSourceRequestedEventArgs_INTERFACE_DEFINED__

typedef interface __FITypedEventHandler_2_Windows__CMedia__CCore__CMediaSourceAppServiceConnection_Windows__CMedia__CCore__CInitializeMediaStreamSourceRequestedEventArgs __FITypedEventHandler_2_Windows__CMedia__CCore__CMediaSourceAppServiceConnection_Windows__CMedia__CCore__CInitializeMediaStreamSourceRequestedEventArgs;

//  Declare the parameterized interface IID.
EXTERN_C const IID IID___FITypedEventHandler_2_Windows__CMedia__CCore__CMediaSourceAppServiceConnection_Windows__CMedia__CCore__CInitializeMediaStreamSourceRequestedEventArgs;

typedef struct __FITypedEventHandler_2_Windows__CMedia__CCore__CMediaSourceAppServiceConnection_Windows__CMedia__CCore__CInitializeMediaStreamSourceRequestedEventArgsVtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__FITypedEventHandler_2_Windows__CMedia__CCore__CMediaSourceAppServiceConnection_Windows__CMedia__CCore__CInitializeMediaStreamSourceRequestedEventArgs* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__FITypedEventHandler_2_Windows__CMedia__CCore__CMediaSourceAppServiceConnection_Windows__CMedia__CCore__CInitializeMediaStreamSourceRequestedEventArgs* This);
    ULONG (STDMETHODCALLTYPE* Release)(__FITypedEventHandler_2_Windows__CMedia__CCore__CMediaSourceAppServiceConnection_Windows__CMedia__CCore__CInitializeMediaStreamSourceRequestedEventArgs* This);
    HRESULT (STDMETHODCALLTYPE* Invoke)(__FITypedEventHandler_2_Windows__CMedia__CCore__CMediaSourceAppServiceConnection_Windows__CMedia__CCore__CInitializeMediaStreamSourceRequestedEventArgs* This,
        __x_ABI_CWindows_CMedia_CCore_CIMediaSourceAppServiceConnection* sender,
        __x_ABI_CWindows_CMedia_CCore_CIInitializeMediaStreamSourceRequestedEventArgs* args);

    END_INTERFACE
} __FITypedEventHandler_2_Windows__CMedia__CCore__CMediaSourceAppServiceConnection_Windows__CMedia__CCore__CInitializeMediaStreamSourceRequestedEventArgsVtbl;

interface __FITypedEventHandler_2_Windows__CMedia__CCore__CMediaSourceAppServiceConnection_Windows__CMedia__CCore__CInitializeMediaStreamSourceRequestedEventArgs
{
    CONST_VTBL struct __FITypedEventHandler_2_Windows__CMedia__CCore__CMediaSourceAppServiceConnection_Windows__CMedia__CCore__CInitializeMediaStreamSourceRequestedEventArgsVtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __FITypedEventHandler_2_Windows__CMedia__CCore__CMediaSourceAppServiceConnection_Windows__CMedia__CCore__CInitializeMediaStreamSourceRequestedEventArgs_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __FITypedEventHandler_2_Windows__CMedia__CCore__CMediaSourceAppServiceConnection_Windows__CMedia__CCore__CInitializeMediaStreamSourceRequestedEventArgs_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __FITypedEventHandler_2_Windows__CMedia__CCore__CMediaSourceAppServiceConnection_Windows__CMedia__CCore__CInitializeMediaStreamSourceRequestedEventArgs_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __FITypedEventHandler_2_Windows__CMedia__CCore__CMediaSourceAppServiceConnection_Windows__CMedia__CCore__CInitializeMediaStreamSourceRequestedEventArgs_Invoke(This, sender, args) \
    ((This)->lpVtbl->Invoke(This, sender, args))

#endif /* COBJMACROS */

#endif // ____FITypedEventHandler_2_Windows__CMedia__CCore__CMediaSourceAppServiceConnection_Windows__CMedia__CCore__CInitializeMediaStreamSourceRequestedEventArgs_INTERFACE_DEFINED__
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x50000
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x50000

#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____FITypedEventHandler_2_Windows__CMedia__CCore__CMediaStreamSample_IInspectable_INTERFACE_DEFINED__)
#define ____FITypedEventHandler_2_Windows__CMedia__CCore__CMediaStreamSample_IInspectable_INTERFACE_DEFINED__

typedef interface __FITypedEventHandler_2_Windows__CMedia__CCore__CMediaStreamSample_IInspectable __FITypedEventHandler_2_Windows__CMedia__CCore__CMediaStreamSample_IInspectable;

//  Declare the parameterized interface IID.
EXTERN_C const IID IID___FITypedEventHandler_2_Windows__CMedia__CCore__CMediaStreamSample_IInspectable;

typedef struct __FITypedEventHandler_2_Windows__CMedia__CCore__CMediaStreamSample_IInspectableVtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__FITypedEventHandler_2_Windows__CMedia__CCore__CMediaStreamSample_IInspectable* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__FITypedEventHandler_2_Windows__CMedia__CCore__CMediaStreamSample_IInspectable* This);
    ULONG (STDMETHODCALLTYPE* Release)(__FITypedEventHandler_2_Windows__CMedia__CCore__CMediaStreamSample_IInspectable* This);
    HRESULT (STDMETHODCALLTYPE* Invoke)(__FITypedEventHandler_2_Windows__CMedia__CCore__CMediaStreamSample_IInspectable* This,
        __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSample* sender,
        IInspectable* args);

    END_INTERFACE
} __FITypedEventHandler_2_Windows__CMedia__CCore__CMediaStreamSample_IInspectableVtbl;

interface __FITypedEventHandler_2_Windows__CMedia__CCore__CMediaStreamSample_IInspectable
{
    CONST_VTBL struct __FITypedEventHandler_2_Windows__CMedia__CCore__CMediaStreamSample_IInspectableVtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __FITypedEventHandler_2_Windows__CMedia__CCore__CMediaStreamSample_IInspectable_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __FITypedEventHandler_2_Windows__CMedia__CCore__CMediaStreamSample_IInspectable_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __FITypedEventHandler_2_Windows__CMedia__CCore__CMediaStreamSample_IInspectable_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __FITypedEventHandler_2_Windows__CMedia__CCore__CMediaStreamSample_IInspectable_Invoke(This, sender, args) \
    ((This)->lpVtbl->Invoke(This, sender, args))

#endif /* COBJMACROS */

#endif // ____FITypedEventHandler_2_Windows__CMedia__CCore__CMediaStreamSample_IInspectable_INTERFACE_DEFINED__
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____FITypedEventHandler_2_Windows__CMedia__CCore__CMediaStreamSource_IInspectable_INTERFACE_DEFINED__)
#define ____FITypedEventHandler_2_Windows__CMedia__CCore__CMediaStreamSource_IInspectable_INTERFACE_DEFINED__

typedef interface __FITypedEventHandler_2_Windows__CMedia__CCore__CMediaStreamSource_IInspectable __FITypedEventHandler_2_Windows__CMedia__CCore__CMediaStreamSource_IInspectable;

//  Declare the parameterized interface IID.
EXTERN_C const IID IID___FITypedEventHandler_2_Windows__CMedia__CCore__CMediaStreamSource_IInspectable;

typedef struct __FITypedEventHandler_2_Windows__CMedia__CCore__CMediaStreamSource_IInspectableVtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__FITypedEventHandler_2_Windows__CMedia__CCore__CMediaStreamSource_IInspectable* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__FITypedEventHandler_2_Windows__CMedia__CCore__CMediaStreamSource_IInspectable* This);
    ULONG (STDMETHODCALLTYPE* Release)(__FITypedEventHandler_2_Windows__CMedia__CCore__CMediaStreamSource_IInspectable* This);
    HRESULT (STDMETHODCALLTYPE* Invoke)(__FITypedEventHandler_2_Windows__CMedia__CCore__CMediaStreamSource_IInspectable* This,
        __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSource* sender,
        IInspectable* args);

    END_INTERFACE
} __FITypedEventHandler_2_Windows__CMedia__CCore__CMediaStreamSource_IInspectableVtbl;

interface __FITypedEventHandler_2_Windows__CMedia__CCore__CMediaStreamSource_IInspectable
{
    CONST_VTBL struct __FITypedEventHandler_2_Windows__CMedia__CCore__CMediaStreamSource_IInspectableVtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __FITypedEventHandler_2_Windows__CMedia__CCore__CMediaStreamSource_IInspectable_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __FITypedEventHandler_2_Windows__CMedia__CCore__CMediaStreamSource_IInspectable_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __FITypedEventHandler_2_Windows__CMedia__CCore__CMediaStreamSource_IInspectable_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __FITypedEventHandler_2_Windows__CMedia__CCore__CMediaStreamSource_IInspectable_Invoke(This, sender, args) \
    ((This)->lpVtbl->Invoke(This, sender, args))

#endif /* COBJMACROS */

#endif // ____FITypedEventHandler_2_Windows__CMedia__CCore__CMediaStreamSource_IInspectable_INTERFACE_DEFINED__
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____FITypedEventHandler_2_Windows__CMedia__CCore__CMediaStreamSource_Windows__CMedia__CCore__CMediaStreamSourceClosedEventArgs_INTERFACE_DEFINED__)
#define ____FITypedEventHandler_2_Windows__CMedia__CCore__CMediaStreamSource_Windows__CMedia__CCore__CMediaStreamSourceClosedEventArgs_INTERFACE_DEFINED__

typedef interface __FITypedEventHandler_2_Windows__CMedia__CCore__CMediaStreamSource_Windows__CMedia__CCore__CMediaStreamSourceClosedEventArgs __FITypedEventHandler_2_Windows__CMedia__CCore__CMediaStreamSource_Windows__CMedia__CCore__CMediaStreamSourceClosedEventArgs;

//  Declare the parameterized interface IID.
EXTERN_C const IID IID___FITypedEventHandler_2_Windows__CMedia__CCore__CMediaStreamSource_Windows__CMedia__CCore__CMediaStreamSourceClosedEventArgs;

typedef struct __FITypedEventHandler_2_Windows__CMedia__CCore__CMediaStreamSource_Windows__CMedia__CCore__CMediaStreamSourceClosedEventArgsVtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__FITypedEventHandler_2_Windows__CMedia__CCore__CMediaStreamSource_Windows__CMedia__CCore__CMediaStreamSourceClosedEventArgs* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__FITypedEventHandler_2_Windows__CMedia__CCore__CMediaStreamSource_Windows__CMedia__CCore__CMediaStreamSourceClosedEventArgs* This);
    ULONG (STDMETHODCALLTYPE* Release)(__FITypedEventHandler_2_Windows__CMedia__CCore__CMediaStreamSource_Windows__CMedia__CCore__CMediaStreamSourceClosedEventArgs* This);
    HRESULT (STDMETHODCALLTYPE* Invoke)(__FITypedEventHandler_2_Windows__CMedia__CCore__CMediaStreamSource_Windows__CMedia__CCore__CMediaStreamSourceClosedEventArgs* This,
        __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSource* sender,
        __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceClosedEventArgs* args);

    END_INTERFACE
} __FITypedEventHandler_2_Windows__CMedia__CCore__CMediaStreamSource_Windows__CMedia__CCore__CMediaStreamSourceClosedEventArgsVtbl;

interface __FITypedEventHandler_2_Windows__CMedia__CCore__CMediaStreamSource_Windows__CMedia__CCore__CMediaStreamSourceClosedEventArgs
{
    CONST_VTBL struct __FITypedEventHandler_2_Windows__CMedia__CCore__CMediaStreamSource_Windows__CMedia__CCore__CMediaStreamSourceClosedEventArgsVtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __FITypedEventHandler_2_Windows__CMedia__CCore__CMediaStreamSource_Windows__CMedia__CCore__CMediaStreamSourceClosedEventArgs_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __FITypedEventHandler_2_Windows__CMedia__CCore__CMediaStreamSource_Windows__CMedia__CCore__CMediaStreamSourceClosedEventArgs_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __FITypedEventHandler_2_Windows__CMedia__CCore__CMediaStreamSource_Windows__CMedia__CCore__CMediaStreamSourceClosedEventArgs_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __FITypedEventHandler_2_Windows__CMedia__CCore__CMediaStreamSource_Windows__CMedia__CCore__CMediaStreamSourceClosedEventArgs_Invoke(This, sender, args) \
    ((This)->lpVtbl->Invoke(This, sender, args))

#endif /* COBJMACROS */

#endif // ____FITypedEventHandler_2_Windows__CMedia__CCore__CMediaStreamSource_Windows__CMedia__CCore__CMediaStreamSourceClosedEventArgs_INTERFACE_DEFINED__
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x30000
#if !defined(____FITypedEventHandler_2_Windows__CMedia__CCore__CMediaStreamSource_Windows__CMedia__CCore__CMediaStreamSourceSampleRenderedEventArgs_INTERFACE_DEFINED__)
#define ____FITypedEventHandler_2_Windows__CMedia__CCore__CMediaStreamSource_Windows__CMedia__CCore__CMediaStreamSourceSampleRenderedEventArgs_INTERFACE_DEFINED__

typedef interface __FITypedEventHandler_2_Windows__CMedia__CCore__CMediaStreamSource_Windows__CMedia__CCore__CMediaStreamSourceSampleRenderedEventArgs __FITypedEventHandler_2_Windows__CMedia__CCore__CMediaStreamSource_Windows__CMedia__CCore__CMediaStreamSourceSampleRenderedEventArgs;

//  Declare the parameterized interface IID.
EXTERN_C const IID IID___FITypedEventHandler_2_Windows__CMedia__CCore__CMediaStreamSource_Windows__CMedia__CCore__CMediaStreamSourceSampleRenderedEventArgs;

typedef struct __FITypedEventHandler_2_Windows__CMedia__CCore__CMediaStreamSource_Windows__CMedia__CCore__CMediaStreamSourceSampleRenderedEventArgsVtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__FITypedEventHandler_2_Windows__CMedia__CCore__CMediaStreamSource_Windows__CMedia__CCore__CMediaStreamSourceSampleRenderedEventArgs* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__FITypedEventHandler_2_Windows__CMedia__CCore__CMediaStreamSource_Windows__CMedia__CCore__CMediaStreamSourceSampleRenderedEventArgs* This);
    ULONG (STDMETHODCALLTYPE* Release)(__FITypedEventHandler_2_Windows__CMedia__CCore__CMediaStreamSource_Windows__CMedia__CCore__CMediaStreamSourceSampleRenderedEventArgs* This);
    HRESULT (STDMETHODCALLTYPE* Invoke)(__FITypedEventHandler_2_Windows__CMedia__CCore__CMediaStreamSource_Windows__CMedia__CCore__CMediaStreamSourceSampleRenderedEventArgs* This,
        __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSource* sender,
        __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceSampleRenderedEventArgs* args);

    END_INTERFACE
} __FITypedEventHandler_2_Windows__CMedia__CCore__CMediaStreamSource_Windows__CMedia__CCore__CMediaStreamSourceSampleRenderedEventArgsVtbl;

interface __FITypedEventHandler_2_Windows__CMedia__CCore__CMediaStreamSource_Windows__CMedia__CCore__CMediaStreamSourceSampleRenderedEventArgs
{
    CONST_VTBL struct __FITypedEventHandler_2_Windows__CMedia__CCore__CMediaStreamSource_Windows__CMedia__CCore__CMediaStreamSourceSampleRenderedEventArgsVtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __FITypedEventHandler_2_Windows__CMedia__CCore__CMediaStreamSource_Windows__CMedia__CCore__CMediaStreamSourceSampleRenderedEventArgs_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __FITypedEventHandler_2_Windows__CMedia__CCore__CMediaStreamSource_Windows__CMedia__CCore__CMediaStreamSourceSampleRenderedEventArgs_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __FITypedEventHandler_2_Windows__CMedia__CCore__CMediaStreamSource_Windows__CMedia__CCore__CMediaStreamSourceSampleRenderedEventArgs_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __FITypedEventHandler_2_Windows__CMedia__CCore__CMediaStreamSource_Windows__CMedia__CCore__CMediaStreamSourceSampleRenderedEventArgs_Invoke(This, sender, args) \
    ((This)->lpVtbl->Invoke(This, sender, args))

#endif /* COBJMACROS */

#endif // ____FITypedEventHandler_2_Windows__CMedia__CCore__CMediaStreamSource_Windows__CMedia__CCore__CMediaStreamSourceSampleRenderedEventArgs_INTERFACE_DEFINED__
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x30000
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____FITypedEventHandler_2_Windows__CMedia__CCore__CMediaStreamSource_Windows__CMedia__CCore__CMediaStreamSourceSampleRequestedEventArgs_INTERFACE_DEFINED__)
#define ____FITypedEventHandler_2_Windows__CMedia__CCore__CMediaStreamSource_Windows__CMedia__CCore__CMediaStreamSourceSampleRequestedEventArgs_INTERFACE_DEFINED__

typedef interface __FITypedEventHandler_2_Windows__CMedia__CCore__CMediaStreamSource_Windows__CMedia__CCore__CMediaStreamSourceSampleRequestedEventArgs __FITypedEventHandler_2_Windows__CMedia__CCore__CMediaStreamSource_Windows__CMedia__CCore__CMediaStreamSourceSampleRequestedEventArgs;

//  Declare the parameterized interface IID.
EXTERN_C const IID IID___FITypedEventHandler_2_Windows__CMedia__CCore__CMediaStreamSource_Windows__CMedia__CCore__CMediaStreamSourceSampleRequestedEventArgs;

typedef struct __FITypedEventHandler_2_Windows__CMedia__CCore__CMediaStreamSource_Windows__CMedia__CCore__CMediaStreamSourceSampleRequestedEventArgsVtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__FITypedEventHandler_2_Windows__CMedia__CCore__CMediaStreamSource_Windows__CMedia__CCore__CMediaStreamSourceSampleRequestedEventArgs* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__FITypedEventHandler_2_Windows__CMedia__CCore__CMediaStreamSource_Windows__CMedia__CCore__CMediaStreamSourceSampleRequestedEventArgs* This);
    ULONG (STDMETHODCALLTYPE* Release)(__FITypedEventHandler_2_Windows__CMedia__CCore__CMediaStreamSource_Windows__CMedia__CCore__CMediaStreamSourceSampleRequestedEventArgs* This);
    HRESULT (STDMETHODCALLTYPE* Invoke)(__FITypedEventHandler_2_Windows__CMedia__CCore__CMediaStreamSource_Windows__CMedia__CCore__CMediaStreamSourceSampleRequestedEventArgs* This,
        __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSource* sender,
        __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceSampleRequestedEventArgs* args);

    END_INTERFACE
} __FITypedEventHandler_2_Windows__CMedia__CCore__CMediaStreamSource_Windows__CMedia__CCore__CMediaStreamSourceSampleRequestedEventArgsVtbl;

interface __FITypedEventHandler_2_Windows__CMedia__CCore__CMediaStreamSource_Windows__CMedia__CCore__CMediaStreamSourceSampleRequestedEventArgs
{
    CONST_VTBL struct __FITypedEventHandler_2_Windows__CMedia__CCore__CMediaStreamSource_Windows__CMedia__CCore__CMediaStreamSourceSampleRequestedEventArgsVtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __FITypedEventHandler_2_Windows__CMedia__CCore__CMediaStreamSource_Windows__CMedia__CCore__CMediaStreamSourceSampleRequestedEventArgs_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __FITypedEventHandler_2_Windows__CMedia__CCore__CMediaStreamSource_Windows__CMedia__CCore__CMediaStreamSourceSampleRequestedEventArgs_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __FITypedEventHandler_2_Windows__CMedia__CCore__CMediaStreamSource_Windows__CMedia__CCore__CMediaStreamSourceSampleRequestedEventArgs_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __FITypedEventHandler_2_Windows__CMedia__CCore__CMediaStreamSource_Windows__CMedia__CCore__CMediaStreamSourceSampleRequestedEventArgs_Invoke(This, sender, args) \
    ((This)->lpVtbl->Invoke(This, sender, args))

#endif /* COBJMACROS */

#endif // ____FITypedEventHandler_2_Windows__CMedia__CCore__CMediaStreamSource_Windows__CMedia__CCore__CMediaStreamSourceSampleRequestedEventArgs_INTERFACE_DEFINED__
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____FITypedEventHandler_2_Windows__CMedia__CCore__CMediaStreamSource_Windows__CMedia__CCore__CMediaStreamSourceStartingEventArgs_INTERFACE_DEFINED__)
#define ____FITypedEventHandler_2_Windows__CMedia__CCore__CMediaStreamSource_Windows__CMedia__CCore__CMediaStreamSourceStartingEventArgs_INTERFACE_DEFINED__

typedef interface __FITypedEventHandler_2_Windows__CMedia__CCore__CMediaStreamSource_Windows__CMedia__CCore__CMediaStreamSourceStartingEventArgs __FITypedEventHandler_2_Windows__CMedia__CCore__CMediaStreamSource_Windows__CMedia__CCore__CMediaStreamSourceStartingEventArgs;

//  Declare the parameterized interface IID.
EXTERN_C const IID IID___FITypedEventHandler_2_Windows__CMedia__CCore__CMediaStreamSource_Windows__CMedia__CCore__CMediaStreamSourceStartingEventArgs;

typedef struct __FITypedEventHandler_2_Windows__CMedia__CCore__CMediaStreamSource_Windows__CMedia__CCore__CMediaStreamSourceStartingEventArgsVtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__FITypedEventHandler_2_Windows__CMedia__CCore__CMediaStreamSource_Windows__CMedia__CCore__CMediaStreamSourceStartingEventArgs* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__FITypedEventHandler_2_Windows__CMedia__CCore__CMediaStreamSource_Windows__CMedia__CCore__CMediaStreamSourceStartingEventArgs* This);
    ULONG (STDMETHODCALLTYPE* Release)(__FITypedEventHandler_2_Windows__CMedia__CCore__CMediaStreamSource_Windows__CMedia__CCore__CMediaStreamSourceStartingEventArgs* This);
    HRESULT (STDMETHODCALLTYPE* Invoke)(__FITypedEventHandler_2_Windows__CMedia__CCore__CMediaStreamSource_Windows__CMedia__CCore__CMediaStreamSourceStartingEventArgs* This,
        __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSource* sender,
        __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceStartingEventArgs* args);

    END_INTERFACE
} __FITypedEventHandler_2_Windows__CMedia__CCore__CMediaStreamSource_Windows__CMedia__CCore__CMediaStreamSourceStartingEventArgsVtbl;

interface __FITypedEventHandler_2_Windows__CMedia__CCore__CMediaStreamSource_Windows__CMedia__CCore__CMediaStreamSourceStartingEventArgs
{
    CONST_VTBL struct __FITypedEventHandler_2_Windows__CMedia__CCore__CMediaStreamSource_Windows__CMedia__CCore__CMediaStreamSourceStartingEventArgsVtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __FITypedEventHandler_2_Windows__CMedia__CCore__CMediaStreamSource_Windows__CMedia__CCore__CMediaStreamSourceStartingEventArgs_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __FITypedEventHandler_2_Windows__CMedia__CCore__CMediaStreamSource_Windows__CMedia__CCore__CMediaStreamSourceStartingEventArgs_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __FITypedEventHandler_2_Windows__CMedia__CCore__CMediaStreamSource_Windows__CMedia__CCore__CMediaStreamSourceStartingEventArgs_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __FITypedEventHandler_2_Windows__CMedia__CCore__CMediaStreamSource_Windows__CMedia__CCore__CMediaStreamSourceStartingEventArgs_Invoke(This, sender, args) \
    ((This)->lpVtbl->Invoke(This, sender, args))

#endif /* COBJMACROS */

#endif // ____FITypedEventHandler_2_Windows__CMedia__CCore__CMediaStreamSource_Windows__CMedia__CCore__CMediaStreamSourceStartingEventArgs_INTERFACE_DEFINED__
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____FITypedEventHandler_2_Windows__CMedia__CCore__CMediaStreamSource_Windows__CMedia__CCore__CMediaStreamSourceSwitchStreamsRequestedEventArgs_INTERFACE_DEFINED__)
#define ____FITypedEventHandler_2_Windows__CMedia__CCore__CMediaStreamSource_Windows__CMedia__CCore__CMediaStreamSourceSwitchStreamsRequestedEventArgs_INTERFACE_DEFINED__

typedef interface __FITypedEventHandler_2_Windows__CMedia__CCore__CMediaStreamSource_Windows__CMedia__CCore__CMediaStreamSourceSwitchStreamsRequestedEventArgs __FITypedEventHandler_2_Windows__CMedia__CCore__CMediaStreamSource_Windows__CMedia__CCore__CMediaStreamSourceSwitchStreamsRequestedEventArgs;

//  Declare the parameterized interface IID.
EXTERN_C const IID IID___FITypedEventHandler_2_Windows__CMedia__CCore__CMediaStreamSource_Windows__CMedia__CCore__CMediaStreamSourceSwitchStreamsRequestedEventArgs;

typedef struct __FITypedEventHandler_2_Windows__CMedia__CCore__CMediaStreamSource_Windows__CMedia__CCore__CMediaStreamSourceSwitchStreamsRequestedEventArgsVtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__FITypedEventHandler_2_Windows__CMedia__CCore__CMediaStreamSource_Windows__CMedia__CCore__CMediaStreamSourceSwitchStreamsRequestedEventArgs* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__FITypedEventHandler_2_Windows__CMedia__CCore__CMediaStreamSource_Windows__CMedia__CCore__CMediaStreamSourceSwitchStreamsRequestedEventArgs* This);
    ULONG (STDMETHODCALLTYPE* Release)(__FITypedEventHandler_2_Windows__CMedia__CCore__CMediaStreamSource_Windows__CMedia__CCore__CMediaStreamSourceSwitchStreamsRequestedEventArgs* This);
    HRESULT (STDMETHODCALLTYPE* Invoke)(__FITypedEventHandler_2_Windows__CMedia__CCore__CMediaStreamSource_Windows__CMedia__CCore__CMediaStreamSourceSwitchStreamsRequestedEventArgs* This,
        __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSource* sender,
        __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceSwitchStreamsRequestedEventArgs* args);

    END_INTERFACE
} __FITypedEventHandler_2_Windows__CMedia__CCore__CMediaStreamSource_Windows__CMedia__CCore__CMediaStreamSourceSwitchStreamsRequestedEventArgsVtbl;

interface __FITypedEventHandler_2_Windows__CMedia__CCore__CMediaStreamSource_Windows__CMedia__CCore__CMediaStreamSourceSwitchStreamsRequestedEventArgs
{
    CONST_VTBL struct __FITypedEventHandler_2_Windows__CMedia__CCore__CMediaStreamSource_Windows__CMedia__CCore__CMediaStreamSourceSwitchStreamsRequestedEventArgsVtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __FITypedEventHandler_2_Windows__CMedia__CCore__CMediaStreamSource_Windows__CMedia__CCore__CMediaStreamSourceSwitchStreamsRequestedEventArgs_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __FITypedEventHandler_2_Windows__CMedia__CCore__CMediaStreamSource_Windows__CMedia__CCore__CMediaStreamSourceSwitchStreamsRequestedEventArgs_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __FITypedEventHandler_2_Windows__CMedia__CCore__CMediaStreamSource_Windows__CMedia__CCore__CMediaStreamSourceSwitchStreamsRequestedEventArgs_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __FITypedEventHandler_2_Windows__CMedia__CCore__CMediaStreamSource_Windows__CMedia__CCore__CMediaStreamSourceSwitchStreamsRequestedEventArgs_Invoke(This, sender, args) \
    ((This)->lpVtbl->Invoke(This, sender, args))

#endif /* COBJMACROS */

#endif // ____FITypedEventHandler_2_Windows__CMedia__CCore__CMediaStreamSource_Windows__CMedia__CCore__CMediaStreamSourceSwitchStreamsRequestedEventArgs_INTERFACE_DEFINED__
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____FITypedEventHandler_2_Windows__CMedia__CCore__CMseSourceBuffer_IInspectable_INTERFACE_DEFINED__)
#define ____FITypedEventHandler_2_Windows__CMedia__CCore__CMseSourceBuffer_IInspectable_INTERFACE_DEFINED__

typedef interface __FITypedEventHandler_2_Windows__CMedia__CCore__CMseSourceBuffer_IInspectable __FITypedEventHandler_2_Windows__CMedia__CCore__CMseSourceBuffer_IInspectable;

//  Declare the parameterized interface IID.
EXTERN_C const IID IID___FITypedEventHandler_2_Windows__CMedia__CCore__CMseSourceBuffer_IInspectable;

typedef struct __FITypedEventHandler_2_Windows__CMedia__CCore__CMseSourceBuffer_IInspectableVtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__FITypedEventHandler_2_Windows__CMedia__CCore__CMseSourceBuffer_IInspectable* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__FITypedEventHandler_2_Windows__CMedia__CCore__CMseSourceBuffer_IInspectable* This);
    ULONG (STDMETHODCALLTYPE* Release)(__FITypedEventHandler_2_Windows__CMedia__CCore__CMseSourceBuffer_IInspectable* This);
    HRESULT (STDMETHODCALLTYPE* Invoke)(__FITypedEventHandler_2_Windows__CMedia__CCore__CMseSourceBuffer_IInspectable* This,
        __x_ABI_CWindows_CMedia_CCore_CIMseSourceBuffer* sender,
        IInspectable* args);

    END_INTERFACE
} __FITypedEventHandler_2_Windows__CMedia__CCore__CMseSourceBuffer_IInspectableVtbl;

interface __FITypedEventHandler_2_Windows__CMedia__CCore__CMseSourceBuffer_IInspectable
{
    CONST_VTBL struct __FITypedEventHandler_2_Windows__CMedia__CCore__CMseSourceBuffer_IInspectableVtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __FITypedEventHandler_2_Windows__CMedia__CCore__CMseSourceBuffer_IInspectable_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __FITypedEventHandler_2_Windows__CMedia__CCore__CMseSourceBuffer_IInspectable_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __FITypedEventHandler_2_Windows__CMedia__CCore__CMseSourceBuffer_IInspectable_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __FITypedEventHandler_2_Windows__CMedia__CCore__CMseSourceBuffer_IInspectable_Invoke(This, sender, args) \
    ((This)->lpVtbl->Invoke(This, sender, args))

#endif /* COBJMACROS */

#endif // ____FITypedEventHandler_2_Windows__CMedia__CCore__CMseSourceBuffer_IInspectable_INTERFACE_DEFINED__
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____FITypedEventHandler_2_Windows__CMedia__CCore__CMseSourceBufferList_IInspectable_INTERFACE_DEFINED__)
#define ____FITypedEventHandler_2_Windows__CMedia__CCore__CMseSourceBufferList_IInspectable_INTERFACE_DEFINED__

typedef interface __FITypedEventHandler_2_Windows__CMedia__CCore__CMseSourceBufferList_IInspectable __FITypedEventHandler_2_Windows__CMedia__CCore__CMseSourceBufferList_IInspectable;

//  Declare the parameterized interface IID.
EXTERN_C const IID IID___FITypedEventHandler_2_Windows__CMedia__CCore__CMseSourceBufferList_IInspectable;

typedef struct __FITypedEventHandler_2_Windows__CMedia__CCore__CMseSourceBufferList_IInspectableVtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__FITypedEventHandler_2_Windows__CMedia__CCore__CMseSourceBufferList_IInspectable* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__FITypedEventHandler_2_Windows__CMedia__CCore__CMseSourceBufferList_IInspectable* This);
    ULONG (STDMETHODCALLTYPE* Release)(__FITypedEventHandler_2_Windows__CMedia__CCore__CMseSourceBufferList_IInspectable* This);
    HRESULT (STDMETHODCALLTYPE* Invoke)(__FITypedEventHandler_2_Windows__CMedia__CCore__CMseSourceBufferList_IInspectable* This,
        __x_ABI_CWindows_CMedia_CCore_CIMseSourceBufferList* sender,
        IInspectable* args);

    END_INTERFACE
} __FITypedEventHandler_2_Windows__CMedia__CCore__CMseSourceBufferList_IInspectableVtbl;

interface __FITypedEventHandler_2_Windows__CMedia__CCore__CMseSourceBufferList_IInspectable
{
    CONST_VTBL struct __FITypedEventHandler_2_Windows__CMedia__CCore__CMseSourceBufferList_IInspectableVtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __FITypedEventHandler_2_Windows__CMedia__CCore__CMseSourceBufferList_IInspectable_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __FITypedEventHandler_2_Windows__CMedia__CCore__CMseSourceBufferList_IInspectable_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __FITypedEventHandler_2_Windows__CMedia__CCore__CMseSourceBufferList_IInspectable_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __FITypedEventHandler_2_Windows__CMedia__CCore__CMseSourceBufferList_IInspectable_Invoke(This, sender, args) \
    ((This)->lpVtbl->Invoke(This, sender, args))

#endif /* COBJMACROS */

#endif // ____FITypedEventHandler_2_Windows__CMedia__CCore__CMseSourceBufferList_IInspectable_INTERFACE_DEFINED__
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____FITypedEventHandler_2_Windows__CMedia__CCore__CMseStreamSource_IInspectable_INTERFACE_DEFINED__)
#define ____FITypedEventHandler_2_Windows__CMedia__CCore__CMseStreamSource_IInspectable_INTERFACE_DEFINED__

typedef interface __FITypedEventHandler_2_Windows__CMedia__CCore__CMseStreamSource_IInspectable __FITypedEventHandler_2_Windows__CMedia__CCore__CMseStreamSource_IInspectable;

//  Declare the parameterized interface IID.
EXTERN_C const IID IID___FITypedEventHandler_2_Windows__CMedia__CCore__CMseStreamSource_IInspectable;

typedef struct __FITypedEventHandler_2_Windows__CMedia__CCore__CMseStreamSource_IInspectableVtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__FITypedEventHandler_2_Windows__CMedia__CCore__CMseStreamSource_IInspectable* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__FITypedEventHandler_2_Windows__CMedia__CCore__CMseStreamSource_IInspectable* This);
    ULONG (STDMETHODCALLTYPE* Release)(__FITypedEventHandler_2_Windows__CMedia__CCore__CMseStreamSource_IInspectable* This);
    HRESULT (STDMETHODCALLTYPE* Invoke)(__FITypedEventHandler_2_Windows__CMedia__CCore__CMseStreamSource_IInspectable* This,
        __x_ABI_CWindows_CMedia_CCore_CIMseStreamSource* sender,
        IInspectable* args);

    END_INTERFACE
} __FITypedEventHandler_2_Windows__CMedia__CCore__CMseStreamSource_IInspectableVtbl;

interface __FITypedEventHandler_2_Windows__CMedia__CCore__CMseStreamSource_IInspectable
{
    CONST_VTBL struct __FITypedEventHandler_2_Windows__CMedia__CCore__CMseStreamSource_IInspectableVtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __FITypedEventHandler_2_Windows__CMedia__CCore__CMseStreamSource_IInspectable_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __FITypedEventHandler_2_Windows__CMedia__CCore__CMseStreamSource_IInspectable_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __FITypedEventHandler_2_Windows__CMedia__CCore__CMseStreamSource_IInspectable_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __FITypedEventHandler_2_Windows__CMedia__CCore__CMseStreamSource_IInspectable_Invoke(This, sender, args) \
    ((This)->lpVtbl->Invoke(This, sender, args))

#endif /* COBJMACROS */

#endif // ____FITypedEventHandler_2_Windows__CMedia__CCore__CMseStreamSource_IInspectable_INTERFACE_DEFINED__
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____FITypedEventHandler_2_Windows__CMedia__CCore__CSceneAnalysisEffect_Windows__CMedia__CCore__CSceneAnalyzedEventArgs_INTERFACE_DEFINED__)
#define ____FITypedEventHandler_2_Windows__CMedia__CCore__CSceneAnalysisEffect_Windows__CMedia__CCore__CSceneAnalyzedEventArgs_INTERFACE_DEFINED__

typedef interface __FITypedEventHandler_2_Windows__CMedia__CCore__CSceneAnalysisEffect_Windows__CMedia__CCore__CSceneAnalyzedEventArgs __FITypedEventHandler_2_Windows__CMedia__CCore__CSceneAnalysisEffect_Windows__CMedia__CCore__CSceneAnalyzedEventArgs;

//  Declare the parameterized interface IID.
EXTERN_C const IID IID___FITypedEventHandler_2_Windows__CMedia__CCore__CSceneAnalysisEffect_Windows__CMedia__CCore__CSceneAnalyzedEventArgs;

typedef struct __FITypedEventHandler_2_Windows__CMedia__CCore__CSceneAnalysisEffect_Windows__CMedia__CCore__CSceneAnalyzedEventArgsVtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__FITypedEventHandler_2_Windows__CMedia__CCore__CSceneAnalysisEffect_Windows__CMedia__CCore__CSceneAnalyzedEventArgs* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__FITypedEventHandler_2_Windows__CMedia__CCore__CSceneAnalysisEffect_Windows__CMedia__CCore__CSceneAnalyzedEventArgs* This);
    ULONG (STDMETHODCALLTYPE* Release)(__FITypedEventHandler_2_Windows__CMedia__CCore__CSceneAnalysisEffect_Windows__CMedia__CCore__CSceneAnalyzedEventArgs* This);
    HRESULT (STDMETHODCALLTYPE* Invoke)(__FITypedEventHandler_2_Windows__CMedia__CCore__CSceneAnalysisEffect_Windows__CMedia__CCore__CSceneAnalyzedEventArgs* This,
        __x_ABI_CWindows_CMedia_CCore_CISceneAnalysisEffect* sender,
        __x_ABI_CWindows_CMedia_CCore_CISceneAnalyzedEventArgs* args);

    END_INTERFACE
} __FITypedEventHandler_2_Windows__CMedia__CCore__CSceneAnalysisEffect_Windows__CMedia__CCore__CSceneAnalyzedEventArgsVtbl;

interface __FITypedEventHandler_2_Windows__CMedia__CCore__CSceneAnalysisEffect_Windows__CMedia__CCore__CSceneAnalyzedEventArgs
{
    CONST_VTBL struct __FITypedEventHandler_2_Windows__CMedia__CCore__CSceneAnalysisEffect_Windows__CMedia__CCore__CSceneAnalyzedEventArgsVtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __FITypedEventHandler_2_Windows__CMedia__CCore__CSceneAnalysisEffect_Windows__CMedia__CCore__CSceneAnalyzedEventArgs_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __FITypedEventHandler_2_Windows__CMedia__CCore__CSceneAnalysisEffect_Windows__CMedia__CCore__CSceneAnalyzedEventArgs_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __FITypedEventHandler_2_Windows__CMedia__CCore__CSceneAnalysisEffect_Windows__CMedia__CCore__CSceneAnalyzedEventArgs_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __FITypedEventHandler_2_Windows__CMedia__CCore__CSceneAnalysisEffect_Windows__CMedia__CCore__CSceneAnalyzedEventArgs_Invoke(This, sender, args) \
    ((This)->lpVtbl->Invoke(This, sender, args))

#endif /* COBJMACROS */

#endif // ____FITypedEventHandler_2_Windows__CMedia__CCore__CSceneAnalysisEffect_Windows__CMedia__CCore__CSceneAnalyzedEventArgs_INTERFACE_DEFINED__
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____FITypedEventHandler_2_Windows__CMedia__CCore__CTimedMetadataTrack_Windows__CMedia__CCore__CMediaCueEventArgs_INTERFACE_DEFINED__)
#define ____FITypedEventHandler_2_Windows__CMedia__CCore__CTimedMetadataTrack_Windows__CMedia__CCore__CMediaCueEventArgs_INTERFACE_DEFINED__

typedef interface __FITypedEventHandler_2_Windows__CMedia__CCore__CTimedMetadataTrack_Windows__CMedia__CCore__CMediaCueEventArgs __FITypedEventHandler_2_Windows__CMedia__CCore__CTimedMetadataTrack_Windows__CMedia__CCore__CMediaCueEventArgs;

//  Declare the parameterized interface IID.
EXTERN_C const IID IID___FITypedEventHandler_2_Windows__CMedia__CCore__CTimedMetadataTrack_Windows__CMedia__CCore__CMediaCueEventArgs;

typedef struct __FITypedEventHandler_2_Windows__CMedia__CCore__CTimedMetadataTrack_Windows__CMedia__CCore__CMediaCueEventArgsVtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__FITypedEventHandler_2_Windows__CMedia__CCore__CTimedMetadataTrack_Windows__CMedia__CCore__CMediaCueEventArgs* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__FITypedEventHandler_2_Windows__CMedia__CCore__CTimedMetadataTrack_Windows__CMedia__CCore__CMediaCueEventArgs* This);
    ULONG (STDMETHODCALLTYPE* Release)(__FITypedEventHandler_2_Windows__CMedia__CCore__CTimedMetadataTrack_Windows__CMedia__CCore__CMediaCueEventArgs* This);
    HRESULT (STDMETHODCALLTYPE* Invoke)(__FITypedEventHandler_2_Windows__CMedia__CCore__CTimedMetadataTrack_Windows__CMedia__CCore__CMediaCueEventArgs* This,
        __x_ABI_CWindows_CMedia_CCore_CITimedMetadataTrack* sender,
        __x_ABI_CWindows_CMedia_CCore_CIMediaCueEventArgs* args);

    END_INTERFACE
} __FITypedEventHandler_2_Windows__CMedia__CCore__CTimedMetadataTrack_Windows__CMedia__CCore__CMediaCueEventArgsVtbl;

interface __FITypedEventHandler_2_Windows__CMedia__CCore__CTimedMetadataTrack_Windows__CMedia__CCore__CMediaCueEventArgs
{
    CONST_VTBL struct __FITypedEventHandler_2_Windows__CMedia__CCore__CTimedMetadataTrack_Windows__CMedia__CCore__CMediaCueEventArgsVtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __FITypedEventHandler_2_Windows__CMedia__CCore__CTimedMetadataTrack_Windows__CMedia__CCore__CMediaCueEventArgs_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __FITypedEventHandler_2_Windows__CMedia__CCore__CTimedMetadataTrack_Windows__CMedia__CCore__CMediaCueEventArgs_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __FITypedEventHandler_2_Windows__CMedia__CCore__CTimedMetadataTrack_Windows__CMedia__CCore__CMediaCueEventArgs_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __FITypedEventHandler_2_Windows__CMedia__CCore__CTimedMetadataTrack_Windows__CMedia__CCore__CMediaCueEventArgs_Invoke(This, sender, args) \
    ((This)->lpVtbl->Invoke(This, sender, args))

#endif /* COBJMACROS */

#endif // ____FITypedEventHandler_2_Windows__CMedia__CCore__CTimedMetadataTrack_Windows__CMedia__CCore__CMediaCueEventArgs_INTERFACE_DEFINED__
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____FITypedEventHandler_2_Windows__CMedia__CCore__CTimedMetadataTrack_Windows__CMedia__CCore__CTimedMetadataTrackFailedEventArgs_INTERFACE_DEFINED__)
#define ____FITypedEventHandler_2_Windows__CMedia__CCore__CTimedMetadataTrack_Windows__CMedia__CCore__CTimedMetadataTrackFailedEventArgs_INTERFACE_DEFINED__

typedef interface __FITypedEventHandler_2_Windows__CMedia__CCore__CTimedMetadataTrack_Windows__CMedia__CCore__CTimedMetadataTrackFailedEventArgs __FITypedEventHandler_2_Windows__CMedia__CCore__CTimedMetadataTrack_Windows__CMedia__CCore__CTimedMetadataTrackFailedEventArgs;

//  Declare the parameterized interface IID.
EXTERN_C const IID IID___FITypedEventHandler_2_Windows__CMedia__CCore__CTimedMetadataTrack_Windows__CMedia__CCore__CTimedMetadataTrackFailedEventArgs;

typedef struct __FITypedEventHandler_2_Windows__CMedia__CCore__CTimedMetadataTrack_Windows__CMedia__CCore__CTimedMetadataTrackFailedEventArgsVtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__FITypedEventHandler_2_Windows__CMedia__CCore__CTimedMetadataTrack_Windows__CMedia__CCore__CTimedMetadataTrackFailedEventArgs* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__FITypedEventHandler_2_Windows__CMedia__CCore__CTimedMetadataTrack_Windows__CMedia__CCore__CTimedMetadataTrackFailedEventArgs* This);
    ULONG (STDMETHODCALLTYPE* Release)(__FITypedEventHandler_2_Windows__CMedia__CCore__CTimedMetadataTrack_Windows__CMedia__CCore__CTimedMetadataTrackFailedEventArgs* This);
    HRESULT (STDMETHODCALLTYPE* Invoke)(__FITypedEventHandler_2_Windows__CMedia__CCore__CTimedMetadataTrack_Windows__CMedia__CCore__CTimedMetadataTrackFailedEventArgs* This,
        __x_ABI_CWindows_CMedia_CCore_CITimedMetadataTrack* sender,
        __x_ABI_CWindows_CMedia_CCore_CITimedMetadataTrackFailedEventArgs* args);

    END_INTERFACE
} __FITypedEventHandler_2_Windows__CMedia__CCore__CTimedMetadataTrack_Windows__CMedia__CCore__CTimedMetadataTrackFailedEventArgsVtbl;

interface __FITypedEventHandler_2_Windows__CMedia__CCore__CTimedMetadataTrack_Windows__CMedia__CCore__CTimedMetadataTrackFailedEventArgs
{
    CONST_VTBL struct __FITypedEventHandler_2_Windows__CMedia__CCore__CTimedMetadataTrack_Windows__CMedia__CCore__CTimedMetadataTrackFailedEventArgsVtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __FITypedEventHandler_2_Windows__CMedia__CCore__CTimedMetadataTrack_Windows__CMedia__CCore__CTimedMetadataTrackFailedEventArgs_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __FITypedEventHandler_2_Windows__CMedia__CCore__CTimedMetadataTrack_Windows__CMedia__CCore__CTimedMetadataTrackFailedEventArgs_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __FITypedEventHandler_2_Windows__CMedia__CCore__CTimedMetadataTrack_Windows__CMedia__CCore__CTimedMetadataTrackFailedEventArgs_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __FITypedEventHandler_2_Windows__CMedia__CCore__CTimedMetadataTrack_Windows__CMedia__CCore__CTimedMetadataTrackFailedEventArgs_Invoke(This, sender, args) \
    ((This)->lpVtbl->Invoke(This, sender, args))

#endif /* COBJMACROS */

#endif // ____FITypedEventHandler_2_Windows__CMedia__CCore__CTimedMetadataTrack_Windows__CMedia__CCore__CTimedMetadataTrackFailedEventArgs_INTERFACE_DEFINED__
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____FITypedEventHandler_2_Windows__CMedia__CCore__CTimedTextSource_Windows__CMedia__CCore__CTimedTextSourceResolveResultEventArgs_INTERFACE_DEFINED__)
#define ____FITypedEventHandler_2_Windows__CMedia__CCore__CTimedTextSource_Windows__CMedia__CCore__CTimedTextSourceResolveResultEventArgs_INTERFACE_DEFINED__

typedef interface __FITypedEventHandler_2_Windows__CMedia__CCore__CTimedTextSource_Windows__CMedia__CCore__CTimedTextSourceResolveResultEventArgs __FITypedEventHandler_2_Windows__CMedia__CCore__CTimedTextSource_Windows__CMedia__CCore__CTimedTextSourceResolveResultEventArgs;

//  Declare the parameterized interface IID.
EXTERN_C const IID IID___FITypedEventHandler_2_Windows__CMedia__CCore__CTimedTextSource_Windows__CMedia__CCore__CTimedTextSourceResolveResultEventArgs;

typedef struct __FITypedEventHandler_2_Windows__CMedia__CCore__CTimedTextSource_Windows__CMedia__CCore__CTimedTextSourceResolveResultEventArgsVtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__FITypedEventHandler_2_Windows__CMedia__CCore__CTimedTextSource_Windows__CMedia__CCore__CTimedTextSourceResolveResultEventArgs* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__FITypedEventHandler_2_Windows__CMedia__CCore__CTimedTextSource_Windows__CMedia__CCore__CTimedTextSourceResolveResultEventArgs* This);
    ULONG (STDMETHODCALLTYPE* Release)(__FITypedEventHandler_2_Windows__CMedia__CCore__CTimedTextSource_Windows__CMedia__CCore__CTimedTextSourceResolveResultEventArgs* This);
    HRESULT (STDMETHODCALLTYPE* Invoke)(__FITypedEventHandler_2_Windows__CMedia__CCore__CTimedTextSource_Windows__CMedia__CCore__CTimedTextSourceResolveResultEventArgs* This,
        __x_ABI_CWindows_CMedia_CCore_CITimedTextSource* sender,
        __x_ABI_CWindows_CMedia_CCore_CITimedTextSourceResolveResultEventArgs* args);

    END_INTERFACE
} __FITypedEventHandler_2_Windows__CMedia__CCore__CTimedTextSource_Windows__CMedia__CCore__CTimedTextSourceResolveResultEventArgsVtbl;

interface __FITypedEventHandler_2_Windows__CMedia__CCore__CTimedTextSource_Windows__CMedia__CCore__CTimedTextSourceResolveResultEventArgs
{
    CONST_VTBL struct __FITypedEventHandler_2_Windows__CMedia__CCore__CTimedTextSource_Windows__CMedia__CCore__CTimedTextSourceResolveResultEventArgsVtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __FITypedEventHandler_2_Windows__CMedia__CCore__CTimedTextSource_Windows__CMedia__CCore__CTimedTextSourceResolveResultEventArgs_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __FITypedEventHandler_2_Windows__CMedia__CCore__CTimedTextSource_Windows__CMedia__CCore__CTimedTextSourceResolveResultEventArgs_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __FITypedEventHandler_2_Windows__CMedia__CCore__CTimedTextSource_Windows__CMedia__CCore__CTimedTextSourceResolveResultEventArgs_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __FITypedEventHandler_2_Windows__CMedia__CCore__CTimedTextSource_Windows__CMedia__CCore__CTimedTextSourceResolveResultEventArgs_Invoke(This, sender, args) \
    ((This)->lpVtbl->Invoke(This, sender, args))

#endif /* COBJMACROS */

#endif // ____FITypedEventHandler_2_Windows__CMedia__CCore__CTimedTextSource_Windows__CMedia__CCore__CTimedTextSourceResolveResultEventArgs_INTERFACE_DEFINED__
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____FITypedEventHandler_2_Windows__CMedia__CCore__CVideoStabilizationEffect_Windows__CMedia__CCore__CVideoStabilizationEffectEnabledChangedEventArgs_INTERFACE_DEFINED__)
#define ____FITypedEventHandler_2_Windows__CMedia__CCore__CVideoStabilizationEffect_Windows__CMedia__CCore__CVideoStabilizationEffectEnabledChangedEventArgs_INTERFACE_DEFINED__

typedef interface __FITypedEventHandler_2_Windows__CMedia__CCore__CVideoStabilizationEffect_Windows__CMedia__CCore__CVideoStabilizationEffectEnabledChangedEventArgs __FITypedEventHandler_2_Windows__CMedia__CCore__CVideoStabilizationEffect_Windows__CMedia__CCore__CVideoStabilizationEffectEnabledChangedEventArgs;

//  Declare the parameterized interface IID.
EXTERN_C const IID IID___FITypedEventHandler_2_Windows__CMedia__CCore__CVideoStabilizationEffect_Windows__CMedia__CCore__CVideoStabilizationEffectEnabledChangedEventArgs;

typedef struct __FITypedEventHandler_2_Windows__CMedia__CCore__CVideoStabilizationEffect_Windows__CMedia__CCore__CVideoStabilizationEffectEnabledChangedEventArgsVtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__FITypedEventHandler_2_Windows__CMedia__CCore__CVideoStabilizationEffect_Windows__CMedia__CCore__CVideoStabilizationEffectEnabledChangedEventArgs* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__FITypedEventHandler_2_Windows__CMedia__CCore__CVideoStabilizationEffect_Windows__CMedia__CCore__CVideoStabilizationEffectEnabledChangedEventArgs* This);
    ULONG (STDMETHODCALLTYPE* Release)(__FITypedEventHandler_2_Windows__CMedia__CCore__CVideoStabilizationEffect_Windows__CMedia__CCore__CVideoStabilizationEffectEnabledChangedEventArgs* This);
    HRESULT (STDMETHODCALLTYPE* Invoke)(__FITypedEventHandler_2_Windows__CMedia__CCore__CVideoStabilizationEffect_Windows__CMedia__CCore__CVideoStabilizationEffectEnabledChangedEventArgs* This,
        __x_ABI_CWindows_CMedia_CCore_CIVideoStabilizationEffect* sender,
        __x_ABI_CWindows_CMedia_CCore_CIVideoStabilizationEffectEnabledChangedEventArgs* args);

    END_INTERFACE
} __FITypedEventHandler_2_Windows__CMedia__CCore__CVideoStabilizationEffect_Windows__CMedia__CCore__CVideoStabilizationEffectEnabledChangedEventArgsVtbl;

interface __FITypedEventHandler_2_Windows__CMedia__CCore__CVideoStabilizationEffect_Windows__CMedia__CCore__CVideoStabilizationEffectEnabledChangedEventArgs
{
    CONST_VTBL struct __FITypedEventHandler_2_Windows__CMedia__CCore__CVideoStabilizationEffect_Windows__CMedia__CCore__CVideoStabilizationEffectEnabledChangedEventArgsVtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __FITypedEventHandler_2_Windows__CMedia__CCore__CVideoStabilizationEffect_Windows__CMedia__CCore__CVideoStabilizationEffectEnabledChangedEventArgs_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __FITypedEventHandler_2_Windows__CMedia__CCore__CVideoStabilizationEffect_Windows__CMedia__CCore__CVideoStabilizationEffectEnabledChangedEventArgs_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __FITypedEventHandler_2_Windows__CMedia__CCore__CVideoStabilizationEffect_Windows__CMedia__CCore__CVideoStabilizationEffectEnabledChangedEventArgs_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __FITypedEventHandler_2_Windows__CMedia__CCore__CVideoStabilizationEffect_Windows__CMedia__CCore__CVideoStabilizationEffectEnabledChangedEventArgs_Invoke(This, sender, args) \
    ((This)->lpVtbl->Invoke(This, sender, args))

#endif /* COBJMACROS */

#endif // ____FITypedEventHandler_2_Windows__CMedia__CCore__CVideoStabilizationEffect_Windows__CMedia__CCore__CVideoStabilizationEffectEnabledChangedEventArgs_INTERFACE_DEFINED__
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x30000
#if !defined(____FITypedEventHandler_2_Windows__CMedia__CCore__CVideoTrack_Windows__CMedia__CCore__CVideoTrackOpenFailedEventArgs_INTERFACE_DEFINED__)
#define ____FITypedEventHandler_2_Windows__CMedia__CCore__CVideoTrack_Windows__CMedia__CCore__CVideoTrackOpenFailedEventArgs_INTERFACE_DEFINED__

typedef interface __FITypedEventHandler_2_Windows__CMedia__CCore__CVideoTrack_Windows__CMedia__CCore__CVideoTrackOpenFailedEventArgs __FITypedEventHandler_2_Windows__CMedia__CCore__CVideoTrack_Windows__CMedia__CCore__CVideoTrackOpenFailedEventArgs;

//  Declare the parameterized interface IID.
EXTERN_C const IID IID___FITypedEventHandler_2_Windows__CMedia__CCore__CVideoTrack_Windows__CMedia__CCore__CVideoTrackOpenFailedEventArgs;

typedef struct __FITypedEventHandler_2_Windows__CMedia__CCore__CVideoTrack_Windows__CMedia__CCore__CVideoTrackOpenFailedEventArgsVtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__FITypedEventHandler_2_Windows__CMedia__CCore__CVideoTrack_Windows__CMedia__CCore__CVideoTrackOpenFailedEventArgs* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__FITypedEventHandler_2_Windows__CMedia__CCore__CVideoTrack_Windows__CMedia__CCore__CVideoTrackOpenFailedEventArgs* This);
    ULONG (STDMETHODCALLTYPE* Release)(__FITypedEventHandler_2_Windows__CMedia__CCore__CVideoTrack_Windows__CMedia__CCore__CVideoTrackOpenFailedEventArgs* This);
    HRESULT (STDMETHODCALLTYPE* Invoke)(__FITypedEventHandler_2_Windows__CMedia__CCore__CVideoTrack_Windows__CMedia__CCore__CVideoTrackOpenFailedEventArgs* This,
        __x_ABI_CWindows_CMedia_CCore_CIMediaTrack* sender,
        __x_ABI_CWindows_CMedia_CCore_CIVideoTrackOpenFailedEventArgs* args);

    END_INTERFACE
} __FITypedEventHandler_2_Windows__CMedia__CCore__CVideoTrack_Windows__CMedia__CCore__CVideoTrackOpenFailedEventArgsVtbl;

interface __FITypedEventHandler_2_Windows__CMedia__CCore__CVideoTrack_Windows__CMedia__CCore__CVideoTrackOpenFailedEventArgs
{
    CONST_VTBL struct __FITypedEventHandler_2_Windows__CMedia__CCore__CVideoTrack_Windows__CMedia__CCore__CVideoTrackOpenFailedEventArgsVtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __FITypedEventHandler_2_Windows__CMedia__CCore__CVideoTrack_Windows__CMedia__CCore__CVideoTrackOpenFailedEventArgs_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __FITypedEventHandler_2_Windows__CMedia__CCore__CVideoTrack_Windows__CMedia__CCore__CVideoTrackOpenFailedEventArgs_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __FITypedEventHandler_2_Windows__CMedia__CCore__CVideoTrack_Windows__CMedia__CCore__CVideoTrackOpenFailedEventArgs_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __FITypedEventHandler_2_Windows__CMedia__CCore__CVideoTrack_Windows__CMedia__CCore__CVideoTrackOpenFailedEventArgs_Invoke(This, sender, args) \
    ((This)->lpVtbl->Invoke(This, sender, args))

#endif /* COBJMACROS */

#endif // ____FITypedEventHandler_2_Windows__CMedia__CCore__CVideoTrack_Windows__CMedia__CCore__CVideoTrackOpenFailedEventArgs_INTERFACE_DEFINED__
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x30000
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

#ifndef ____x_ABI_CWindows_CApplicationModel_CAppService_CIAppServiceConnection_FWD_DEFINED__
#define ____x_ABI_CWindows_CApplicationModel_CAppService_CIAppServiceConnection_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CApplicationModel_CAppService_CIAppServiceConnection __x_ABI_CWindows_CApplicationModel_CAppService_CIAppServiceConnection;

#endif // ____x_ABI_CWindows_CApplicationModel_CAppService_CIAppServiceConnection_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CFoundation_CCollections_CIVectorChangedEventArgs_FWD_DEFINED__
#define ____x_ABI_CWindows_CFoundation_CCollections_CIVectorChangedEventArgs_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CFoundation_CCollections_CIVectorChangedEventArgs __x_ABI_CWindows_CFoundation_CCollections_CIVectorChangedEventArgs;

#endif // ____x_ABI_CWindows_CFoundation_CCollections_CIVectorChangedEventArgs_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CFoundation_CCollections_CIPropertySet_FWD_DEFINED__
#define ____x_ABI_CWindows_CFoundation_CCollections_CIPropertySet_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CFoundation_CCollections_CIPropertySet __x_ABI_CWindows_CFoundation_CCollections_CIPropertySet;

#endif // ____x_ABI_CWindows_CFoundation_CCollections_CIPropertySet_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CFoundation_CIDeferral_FWD_DEFINED__
#define ____x_ABI_CWindows_CFoundation_CIDeferral_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CFoundation_CIDeferral __x_ABI_CWindows_CFoundation_CIDeferral;

#endif // ____x_ABI_CWindows_CFoundation_CIDeferral_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CFoundation_CIAsyncAction_FWD_DEFINED__
#define ____x_ABI_CWindows_CFoundation_CIAsyncAction_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CFoundation_CIAsyncAction __x_ABI_CWindows_CFoundation_CIAsyncAction;

#endif // ____x_ABI_CWindows_CFoundation_CIAsyncAction_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CFoundation_CIClosable_FWD_DEFINED__
#define ____x_ABI_CWindows_CFoundation_CIClosable_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CFoundation_CIClosable __x_ABI_CWindows_CFoundation_CIClosable;

#endif // ____x_ABI_CWindows_CFoundation_CIClosable_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CFoundation_CIPropertyValue_FWD_DEFINED__
#define ____x_ABI_CWindows_CFoundation_CIPropertyValue_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CFoundation_CIPropertyValue __x_ABI_CWindows_CFoundation_CIPropertyValue;

#endif // ____x_ABI_CWindows_CFoundation_CIPropertyValue_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CFoundation_CIUriRuntimeClass_FWD_DEFINED__
#define ____x_ABI_CWindows_CFoundation_CIUriRuntimeClass_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CFoundation_CIUriRuntimeClass __x_ABI_CWindows_CFoundation_CIUriRuntimeClass;

#endif // ____x_ABI_CWindows_CFoundation_CIUriRuntimeClass_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CGraphics_CDirectX_CDirect3D11_CIDirect3DSurface_FWD_DEFINED__
#define ____x_ABI_CWindows_CGraphics_CDirectX_CDirect3D11_CIDirect3DSurface_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CGraphics_CDirectX_CDirect3D11_CIDirect3DSurface __x_ABI_CWindows_CGraphics_CDirectX_CDirect3D11_CIDirect3DSurface;

#endif // ____x_ABI_CWindows_CGraphics_CDirectX_CDirect3D11_CIDirect3DSurface_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CCapture_CICapturedFrameControlValues_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CCapture_CICapturedFrameControlValues_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CMedia_CCapture_CICapturedFrameControlValues __x_ABI_CWindows_CMedia_CCapture_CICapturedFrameControlValues;

#endif // ____x_ABI_CWindows_CMedia_CCapture_CICapturedFrameControlValues_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CCapture_CFrames_CIMediaFrameSource_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CCapture_CFrames_CIMediaFrameSource_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CMedia_CCapture_CFrames_CIMediaFrameSource __x_ABI_CWindows_CMedia_CCapture_CFrames_CIMediaFrameSource;

#endif // ____x_ABI_CWindows_CMedia_CCapture_CFrames_CIMediaFrameSource_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CCapture_CIVideoStreamConfiguration_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CCapture_CIVideoStreamConfiguration_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CMedia_CCapture_CIVideoStreamConfiguration __x_ABI_CWindows_CMedia_CCapture_CIVideoStreamConfiguration;

#endif // ____x_ABI_CWindows_CMedia_CCapture_CIVideoStreamConfiguration_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CDevices_CIVideoDeviceController_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CDevices_CIVideoDeviceController_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CMedia_CDevices_CIVideoDeviceController __x_ABI_CWindows_CMedia_CDevices_CIVideoDeviceController;

#endif // ____x_ABI_CWindows_CMedia_CDevices_CIVideoDeviceController_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CEffects_CIVideoEffectDefinition_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CEffects_CIVideoEffectDefinition_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CMedia_CEffects_CIVideoEffectDefinition __x_ABI_CWindows_CMedia_CEffects_CIVideoEffectDefinition;

#endif // ____x_ABI_CWindows_CMedia_CEffects_CIVideoEffectDefinition_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CIMediaExtension_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CIMediaExtension_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CMedia_CIMediaExtension __x_ABI_CWindows_CMedia_CIMediaExtension;

#endif // ____x_ABI_CWindows_CMedia_CIMediaExtension_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CIMediaFrame_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CIMediaFrame_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CMedia_CIMediaFrame __x_ABI_CWindows_CMedia_CIMediaFrame;

#endif // ____x_ABI_CWindows_CMedia_CIMediaFrame_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CMediaProperties_CIAudioEncodingProperties_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CMediaProperties_CIAudioEncodingProperties_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CMedia_CMediaProperties_CIAudioEncodingProperties __x_ABI_CWindows_CMedia_CMediaProperties_CIAudioEncodingProperties;

#endif // ____x_ABI_CWindows_CMedia_CMediaProperties_CIAudioEncodingProperties_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CMediaProperties_CIMediaEncodingProperties_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CMediaProperties_CIMediaEncodingProperties_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CMedia_CMediaProperties_CIMediaEncodingProperties __x_ABI_CWindows_CMedia_CMediaProperties_CIMediaEncodingProperties;

#endif // ____x_ABI_CWindows_CMedia_CMediaProperties_CIMediaEncodingProperties_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CMediaProperties_CIVideoEncodingProperties_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CMediaProperties_CIVideoEncodingProperties_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CMedia_CMediaProperties_CIVideoEncodingProperties __x_ABI_CWindows_CMedia_CMediaProperties_CIVideoEncodingProperties;

#endif // ____x_ABI_CWindows_CMedia_CMediaProperties_CIVideoEncodingProperties_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CPlayback_CIMediaPlaybackSource_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CPlayback_CIMediaPlaybackSource_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CMedia_CPlayback_CIMediaPlaybackSource __x_ABI_CWindows_CMedia_CPlayback_CIMediaPlaybackSource;

#endif // ____x_ABI_CWindows_CMedia_CPlayback_CIMediaPlaybackSource_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CPlayback_CIMediaPlaybackItem_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CPlayback_CIMediaPlaybackItem_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CMedia_CPlayback_CIMediaPlaybackItem __x_ABI_CWindows_CMedia_CPlayback_CIMediaPlaybackItem;

#endif // ____x_ABI_CWindows_CMedia_CPlayback_CIMediaPlaybackItem_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CProtection_CIMediaProtectionManager_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CProtection_CIMediaProtectionManager_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CMedia_CProtection_CIMediaProtectionManager __x_ABI_CWindows_CMedia_CProtection_CIMediaProtectionManager;

#endif // ____x_ABI_CWindows_CMedia_CProtection_CIMediaProtectionManager_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CMedia_CStreaming_CAdaptive_CIAdaptiveMediaSource_FWD_DEFINED__
#define ____x_ABI_CWindows_CMedia_CStreaming_CAdaptive_CIAdaptiveMediaSource_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CMedia_CStreaming_CAdaptive_CIAdaptiveMediaSource __x_ABI_CWindows_CMedia_CStreaming_CAdaptive_CIAdaptiveMediaSource;

#endif // ____x_ABI_CWindows_CMedia_CStreaming_CAdaptive_CIAdaptiveMediaSource_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CNetworking_CBackgroundTransfer_CIDownloadOperation_FWD_DEFINED__
#define ____x_ABI_CWindows_CNetworking_CBackgroundTransfer_CIDownloadOperation_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CNetworking_CBackgroundTransfer_CIDownloadOperation __x_ABI_CWindows_CNetworking_CBackgroundTransfer_CIDownloadOperation;

#endif // ____x_ABI_CWindows_CNetworking_CBackgroundTransfer_CIDownloadOperation_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CStorage_CFileProperties_CIMusicProperties_FWD_DEFINED__
#define ____x_ABI_CWindows_CStorage_CFileProperties_CIMusicProperties_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CStorage_CFileProperties_CIMusicProperties __x_ABI_CWindows_CStorage_CFileProperties_CIMusicProperties;

#endif // ____x_ABI_CWindows_CStorage_CFileProperties_CIMusicProperties_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CStorage_CFileProperties_CIVideoProperties_FWD_DEFINED__
#define ____x_ABI_CWindows_CStorage_CFileProperties_CIVideoProperties_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CStorage_CFileProperties_CIVideoProperties __x_ABI_CWindows_CStorage_CFileProperties_CIVideoProperties;

#endif // ____x_ABI_CWindows_CStorage_CFileProperties_CIVideoProperties_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CStorage_CIStorageFile_FWD_DEFINED__
#define ____x_ABI_CWindows_CStorage_CIStorageFile_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CStorage_CIStorageFile __x_ABI_CWindows_CStorage_CIStorageFile;

#endif // ____x_ABI_CWindows_CStorage_CIStorageFile_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CStorage_CStreams_CIBuffer_FWD_DEFINED__
#define ____x_ABI_CWindows_CStorage_CStreams_CIBuffer_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CStorage_CStreams_CIBuffer __x_ABI_CWindows_CStorage_CStreams_CIBuffer;

#endif // ____x_ABI_CWindows_CStorage_CStreams_CIBuffer_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CStorage_CStreams_CIInputStream_FWD_DEFINED__
#define ____x_ABI_CWindows_CStorage_CStreams_CIInputStream_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CStorage_CStreams_CIInputStream __x_ABI_CWindows_CStorage_CStreams_CIInputStream;

#endif // ____x_ABI_CWindows_CStorage_CStreams_CIInputStream_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CStorage_CStreams_CIRandomAccessStream_FWD_DEFINED__
#define ____x_ABI_CWindows_CStorage_CStreams_CIRandomAccessStream_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CStorage_CStreams_CIRandomAccessStream __x_ABI_CWindows_CStorage_CStreams_CIRandomAccessStream;

#endif // ____x_ABI_CWindows_CStorage_CStreams_CIRandomAccessStream_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CStorage_CStreams_CIRandomAccessStreamReference_FWD_DEFINED__
#define ____x_ABI_CWindows_CStorage_CStreams_CIRandomAccessStreamReference_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CStorage_CStreams_CIRandomAccessStreamReference __x_ABI_CWindows_CStorage_CStreams_CIRandomAccessStreamReference;

#endif // ____x_ABI_CWindows_CStorage_CStreams_CIRandomAccessStreamReference_FWD_DEFINED__

typedef struct __x_ABI_CWindows_CUI_CColor __x_ABI_CWindows_CUI_CColor;

typedef enum __x_ABI_CWindows_CMedia_CCore_CAudioDecoderDegradation __x_ABI_CWindows_CMedia_CCore_CAudioDecoderDegradation;

typedef enum __x_ABI_CWindows_CMedia_CCore_CAudioDecoderDegradationReason __x_ABI_CWindows_CMedia_CCore_CAudioDecoderDegradationReason;

typedef enum __x_ABI_CWindows_CMedia_CCore_CCodecCategory __x_ABI_CWindows_CMedia_CCore_CCodecCategory;

typedef enum __x_ABI_CWindows_CMedia_CCore_CCodecKind __x_ABI_CWindows_CMedia_CCore_CCodecKind;

typedef enum __x_ABI_CWindows_CMedia_CCore_CFaceDetectionMode __x_ABI_CWindows_CMedia_CCore_CFaceDetectionMode;

typedef enum __x_ABI_CWindows_CMedia_CCore_CMediaDecoderStatus __x_ABI_CWindows_CMedia_CCore_CMediaDecoderStatus;

typedef enum __x_ABI_CWindows_CMedia_CCore_CMediaSourceState __x_ABI_CWindows_CMedia_CCore_CMediaSourceState;

typedef enum __x_ABI_CWindows_CMedia_CCore_CMediaSourceStatus __x_ABI_CWindows_CMedia_CCore_CMediaSourceStatus;

typedef enum __x_ABI_CWindows_CMedia_CCore_CMediaStreamSourceClosedReason __x_ABI_CWindows_CMedia_CCore_CMediaStreamSourceClosedReason;

typedef enum __x_ABI_CWindows_CMedia_CCore_CMediaStreamSourceErrorStatus __x_ABI_CWindows_CMedia_CCore_CMediaStreamSourceErrorStatus;

typedef enum __x_ABI_CWindows_CMedia_CCore_CMediaTrackKind __x_ABI_CWindows_CMedia_CCore_CMediaTrackKind;

typedef enum __x_ABI_CWindows_CMedia_CCore_CMseAppendMode __x_ABI_CWindows_CMedia_CCore_CMseAppendMode;

typedef enum __x_ABI_CWindows_CMedia_CCore_CMseEndOfStreamStatus __x_ABI_CWindows_CMedia_CCore_CMseEndOfStreamStatus;

typedef enum __x_ABI_CWindows_CMedia_CCore_CMseReadyState __x_ABI_CWindows_CMedia_CCore_CMseReadyState;

typedef enum __x_ABI_CWindows_CMedia_CCore_CSceneAnalysisRecommendation __x_ABI_CWindows_CMedia_CCore_CSceneAnalysisRecommendation;

typedef enum __x_ABI_CWindows_CMedia_CCore_CTimedMetadataKind __x_ABI_CWindows_CMedia_CCore_CTimedMetadataKind;

typedef enum __x_ABI_CWindows_CMedia_CCore_CTimedMetadataTrackErrorCode __x_ABI_CWindows_CMedia_CCore_CTimedMetadataTrackErrorCode;

typedef enum __x_ABI_CWindows_CMedia_CCore_CTimedTextDisplayAlignment __x_ABI_CWindows_CMedia_CCore_CTimedTextDisplayAlignment;

typedef enum __x_ABI_CWindows_CMedia_CCore_CTimedTextFlowDirection __x_ABI_CWindows_CMedia_CCore_CTimedTextFlowDirection;

typedef enum __x_ABI_CWindows_CMedia_CCore_CTimedTextFontStyle __x_ABI_CWindows_CMedia_CCore_CTimedTextFontStyle;

typedef enum __x_ABI_CWindows_CMedia_CCore_CTimedTextLineAlignment __x_ABI_CWindows_CMedia_CCore_CTimedTextLineAlignment;

typedef enum __x_ABI_CWindows_CMedia_CCore_CTimedTextScrollMode __x_ABI_CWindows_CMedia_CCore_CTimedTextScrollMode;

typedef enum __x_ABI_CWindows_CMedia_CCore_CTimedTextUnit __x_ABI_CWindows_CMedia_CCore_CTimedTextUnit;

typedef enum __x_ABI_CWindows_CMedia_CCore_CTimedTextWeight __x_ABI_CWindows_CMedia_CCore_CTimedTextWeight;

typedef enum __x_ABI_CWindows_CMedia_CCore_CTimedTextWrapping __x_ABI_CWindows_CMedia_CCore_CTimedTextWrapping;

typedef enum __x_ABI_CWindows_CMedia_CCore_CTimedTextWritingMode __x_ABI_CWindows_CMedia_CCore_CTimedTextWritingMode;

typedef enum __x_ABI_CWindows_CMedia_CCore_CVideoStabilizationEffectEnabledChangedReason __x_ABI_CWindows_CMedia_CCore_CVideoStabilizationEffectEnabledChangedReason;

typedef struct __x_ABI_CWindows_CMedia_CCore_CTimedTextDouble __x_ABI_CWindows_CMedia_CCore_CTimedTextDouble;

typedef struct __x_ABI_CWindows_CMedia_CCore_CTimedTextPadding __x_ABI_CWindows_CMedia_CCore_CTimedTextPadding;

typedef struct __x_ABI_CWindows_CMedia_CCore_CTimedTextPoint __x_ABI_CWindows_CMedia_CCore_CTimedTextPoint;

typedef struct __x_ABI_CWindows_CMedia_CCore_CTimedTextSize __x_ABI_CWindows_CMedia_CCore_CTimedTextSize;

/*
 *
 * Struct Windows.Media.Core.AudioDecoderDegradation
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 3.0
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x30000
enum __x_ABI_CWindows_CMedia_CCore_CAudioDecoderDegradation
{
    AudioDecoderDegradation_None = 0,
    AudioDecoderDegradation_DownmixTo2Channels = 1,
    AudioDecoderDegradation_DownmixTo6Channels = 2,
    AudioDecoderDegradation_DownmixTo8Channels = 3,
};
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x30000

/*
 *
 * Struct Windows.Media.Core.AudioDecoderDegradationReason
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 3.0
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x30000
enum __x_ABI_CWindows_CMedia_CCore_CAudioDecoderDegradationReason
{
    AudioDecoderDegradationReason_None = 0,
    AudioDecoderDegradationReason_LicensingRequirement = 1,
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x40000
    AudioDecoderDegradationReason_SpatialAudioNotSupported = 2,
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x40000
};
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x30000

/*
 *
 * Struct Windows.Media.Core.CodecCategory
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 4.0
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x40000
enum __x_ABI_CWindows_CMedia_CCore_CCodecCategory
{
    CodecCategory_Encoder = 0,
    CodecCategory_Decoder = 1,
};
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x40000

/*
 *
 * Struct Windows.Media.Core.CodecKind
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 4.0
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x40000
enum __x_ABI_CWindows_CMedia_CCore_CCodecKind
{
    CodecKind_Audio = 0,
    CodecKind_Video = 1,
};
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x40000

/*
 *
 * Struct Windows.Media.Core.FaceDetectionMode
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
enum __x_ABI_CWindows_CMedia_CCore_CFaceDetectionMode
{
    FaceDetectionMode_HighPerformance = 0,
    FaceDetectionMode_Balanced = 1,
    FaceDetectionMode_HighQuality = 2,
};
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Struct Windows.Media.Core.MediaDecoderStatus
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 3.0
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x30000
enum __x_ABI_CWindows_CMedia_CCore_CMediaDecoderStatus
{
    MediaDecoderStatus_FullySupported = 0,
    MediaDecoderStatus_UnsupportedSubtype = 1,
    MediaDecoderStatus_UnsupportedEncoderProperties = 2,
    MediaDecoderStatus_Degraded = 3,
};
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x30000

/*
 *
 * Struct Windows.Media.Core.MediaSourceState
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 2.0
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x20000
enum __x_ABI_CWindows_CMedia_CCore_CMediaSourceState
{
    MediaSourceState_Initial = 0,
    MediaSourceState_Opening = 1,
    MediaSourceState_Opened = 2,
    MediaSourceState_Failed = 3,
    MediaSourceState_Closed = 4,
};
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x20000

/*
 *
 * Struct Windows.Media.Core.MediaSourceStatus
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 3.0
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x30000
enum __x_ABI_CWindows_CMedia_CCore_CMediaSourceStatus
{
    MediaSourceStatus_FullySupported = 0,
    MediaSourceStatus_Unknown = 1,
};
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x30000

/*
 *
 * Struct Windows.Media.Core.MediaStreamSourceClosedReason
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
enum __x_ABI_CWindows_CMedia_CCore_CMediaStreamSourceClosedReason
{
    MediaStreamSourceClosedReason_Done = 0,
    MediaStreamSourceClosedReason_UnknownError = 1,
    MediaStreamSourceClosedReason_AppReportedError = 2,
    MediaStreamSourceClosedReason_UnsupportedProtectionSystem = 3,
    MediaStreamSourceClosedReason_ProtectionSystemFailure = 4,
    MediaStreamSourceClosedReason_UnsupportedEncodingFormat = 5,
    MediaStreamSourceClosedReason_MissingSampleRequestedEventHandler = 6,
};
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Struct Windows.Media.Core.MediaStreamSourceErrorStatus
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
enum __x_ABI_CWindows_CMedia_CCore_CMediaStreamSourceErrorStatus
{
    MediaStreamSourceErrorStatus_Other = 0,
    MediaStreamSourceErrorStatus_OutOfMemory = 1,
    MediaStreamSourceErrorStatus_FailedToOpenFile = 2,
    MediaStreamSourceErrorStatus_FailedToConnectToServer = 3,
    MediaStreamSourceErrorStatus_ConnectionToServerLost = 4,
    MediaStreamSourceErrorStatus_UnspecifiedNetworkError = 5,
    MediaStreamSourceErrorStatus_DecodeError = 6,
    MediaStreamSourceErrorStatus_UnsupportedMediaFormat = 7,
};
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Struct Windows.Media.Core.MediaTrackKind
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
enum __x_ABI_CWindows_CMedia_CCore_CMediaTrackKind
{
    MediaTrackKind_Audio = 0,
    MediaTrackKind_Video = 1,
    MediaTrackKind_TimedMetadata = 2,
};
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Struct Windows.Media.Core.MseAppendMode
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
enum __x_ABI_CWindows_CMedia_CCore_CMseAppendMode
{
    MseAppendMode_Segments = 0,
    MseAppendMode_Sequence = 1,
};
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Struct Windows.Media.Core.MseEndOfStreamStatus
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
enum __x_ABI_CWindows_CMedia_CCore_CMseEndOfStreamStatus
{
    MseEndOfStreamStatus_Success = 0,
    MseEndOfStreamStatus_NetworkError = 1,
    MseEndOfStreamStatus_DecodeError = 2,
    MseEndOfStreamStatus_UnknownError = 3,
};
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Struct Windows.Media.Core.MseReadyState
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
enum __x_ABI_CWindows_CMedia_CCore_CMseReadyState
{
    MseReadyState_Closed = 0,
    MseReadyState_Open = 1,
    MseReadyState_Ended = 2,
};
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Struct Windows.Media.Core.SceneAnalysisRecommendation
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 5.0
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x50000
enum __x_ABI_CWindows_CMedia_CCore_CSceneAnalysisRecommendation
{
    SceneAnalysisRecommendation_Standard = 0,
    SceneAnalysisRecommendation_Hdr = 1,
    SceneAnalysisRecommendation_LowLight = 2,
};
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x50000

/*
 *
 * Struct Windows.Media.Core.TimedMetadataKind
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
enum __x_ABI_CWindows_CMedia_CCore_CTimedMetadataKind
{
    TimedMetadataKind_Caption = 0,
    TimedMetadataKind_Chapter = 1,
    TimedMetadataKind_Custom = 2,
    TimedMetadataKind_Data = 3,
    TimedMetadataKind_Description = 4,
    TimedMetadataKind_Subtitle = 5,
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x40000
    TimedMetadataKind_ImageSubtitle = 6,
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x40000
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x40000
    TimedMetadataKind_Speech = 7,
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x40000
};
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Struct Windows.Media.Core.TimedMetadataTrackErrorCode
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
enum __x_ABI_CWindows_CMedia_CCore_CTimedMetadataTrackErrorCode
{
    TimedMetadataTrackErrorCode_None = 0,
    TimedMetadataTrackErrorCode_DataFormatError = 1,
    TimedMetadataTrackErrorCode_NetworkError = 2,
    TimedMetadataTrackErrorCode_InternalError = 3,
};
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Struct Windows.Media.Core.TimedTextDisplayAlignment
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
enum __x_ABI_CWindows_CMedia_CCore_CTimedTextDisplayAlignment
{
    TimedTextDisplayAlignment_Before = 0,
    TimedTextDisplayAlignment_After = 1,
    TimedTextDisplayAlignment_Center = 2,
};
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Struct Windows.Media.Core.TimedTextFlowDirection
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
enum __x_ABI_CWindows_CMedia_CCore_CTimedTextFlowDirection
{
    TimedTextFlowDirection_LeftToRight = 0,
    TimedTextFlowDirection_RightToLeft = 1,
};
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Struct Windows.Media.Core.TimedTextFontStyle
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 4.0
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x40000
enum __x_ABI_CWindows_CMedia_CCore_CTimedTextFontStyle
{
    TimedTextFontStyle_Normal = 0,
    TimedTextFontStyle_Oblique = 1,
    TimedTextFontStyle_Italic = 2,
};
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x40000

/*
 *
 * Struct Windows.Media.Core.TimedTextLineAlignment
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
enum __x_ABI_CWindows_CMedia_CCore_CTimedTextLineAlignment
{
    TimedTextLineAlignment_Start = 0,
    TimedTextLineAlignment_End = 1,
    TimedTextLineAlignment_Center = 2,
};
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Struct Windows.Media.Core.TimedTextScrollMode
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
enum __x_ABI_CWindows_CMedia_CCore_CTimedTextScrollMode
{
    TimedTextScrollMode_Popon = 0,
    TimedTextScrollMode_Rollup = 1,
};
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Struct Windows.Media.Core.TimedTextUnit
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
enum __x_ABI_CWindows_CMedia_CCore_CTimedTextUnit
{
    TimedTextUnit_Pixels = 0,
    TimedTextUnit_Percentage = 1,
};
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Struct Windows.Media.Core.TimedTextWeight
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
enum __x_ABI_CWindows_CMedia_CCore_CTimedTextWeight
{
    TimedTextWeight_Normal = 400,
    TimedTextWeight_Bold = 700,
};
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Struct Windows.Media.Core.TimedTextWrapping
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
enum __x_ABI_CWindows_CMedia_CCore_CTimedTextWrapping
{
    TimedTextWrapping_NoWrap = 0,
    TimedTextWrapping_Wrap = 1,
};
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Struct Windows.Media.Core.TimedTextWritingMode
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
enum __x_ABI_CWindows_CMedia_CCore_CTimedTextWritingMode
{
    TimedTextWritingMode_LeftRightTopBottom = 0,
    TimedTextWritingMode_RightLeftTopBottom = 1,
    TimedTextWritingMode_TopBottomRightLeft = 2,
    TimedTextWritingMode_TopBottomLeftRight = 3,
    TimedTextWritingMode_LeftRight = 4,
    TimedTextWritingMode_RightLeft = 5,
    TimedTextWritingMode_TopBottom = 6,
};
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Struct Windows.Media.Core.VideoStabilizationEffectEnabledChangedReason
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
enum __x_ABI_CWindows_CMedia_CCore_CVideoStabilizationEffectEnabledChangedReason
{
    VideoStabilizationEffectEnabledChangedReason_Programmatic = 0,
    VideoStabilizationEffectEnabledChangedReason_PixelRateTooHigh = 1,
    VideoStabilizationEffectEnabledChangedReason_RunningSlowly = 2,
};
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Struct Windows.Media.Core.MseTimeRange
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
struct __x_ABI_CWindows_CMedia_CCore_CMseTimeRange
{
    struct __x_ABI_CWindows_CFoundation_CTimeSpan Start;
    struct __x_ABI_CWindows_CFoundation_CTimeSpan End;
};
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Struct Windows.Media.Core.TimedTextDouble
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
struct __x_ABI_CWindows_CMedia_CCore_CTimedTextDouble
{
    DOUBLE Value;
    enum __x_ABI_CWindows_CMedia_CCore_CTimedTextUnit Unit;
};
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Struct Windows.Media.Core.TimedTextPadding
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
struct __x_ABI_CWindows_CMedia_CCore_CTimedTextPadding
{
    DOUBLE Before;
    DOUBLE After;
    DOUBLE Start;
    DOUBLE End;
    enum __x_ABI_CWindows_CMedia_CCore_CTimedTextUnit Unit;
};
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Struct Windows.Media.Core.TimedTextPoint
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
struct __x_ABI_CWindows_CMedia_CCore_CTimedTextPoint
{
    DOUBLE X;
    DOUBLE Y;
    enum __x_ABI_CWindows_CMedia_CCore_CTimedTextUnit Unit;
};
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Struct Windows.Media.Core.TimedTextSize
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
struct __x_ABI_CWindows_CMedia_CCore_CTimedTextSize
{
    DOUBLE Height;
    DOUBLE Width;
    enum __x_ABI_CWindows_CMedia_CCore_CTimedTextUnit Unit;
};
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Interface Windows.Media.Core.IAudioStreamDescriptor
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Interface is a part of the implementation of type Windows.Media.Core.AudioStreamDescriptor
 *
 * Any object which implements this interface must also implement the following interfaces:
 *     Windows.Media.Core.IMediaStreamDescriptor
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____x_ABI_CWindows_CMedia_CCore_CIAudioStreamDescriptor_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CMedia_CCore_CIAudioStreamDescriptor_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Media_Core_IAudioStreamDescriptor[] = L"Windows.Media.Core.IAudioStreamDescriptor";
typedef struct __x_ABI_CWindows_CMedia_CCore_CIAudioStreamDescriptorVtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CMedia_CCore_CIAudioStreamDescriptor* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CMedia_CCore_CIAudioStreamDescriptor* This);
    ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CMedia_CCore_CIAudioStreamDescriptor* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CMedia_CCore_CIAudioStreamDescriptor* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CMedia_CCore_CIAudioStreamDescriptor* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CMedia_CCore_CIAudioStreamDescriptor* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* get_EncodingProperties)(__x_ABI_CWindows_CMedia_CCore_CIAudioStreamDescriptor* This,
        __x_ABI_CWindows_CMedia_CMediaProperties_CIAudioEncodingProperties** encodingProperties);

    END_INTERFACE
} __x_ABI_CWindows_CMedia_CCore_CIAudioStreamDescriptorVtbl;

interface __x_ABI_CWindows_CMedia_CCore_CIAudioStreamDescriptor
{
    CONST_VTBL struct __x_ABI_CWindows_CMedia_CCore_CIAudioStreamDescriptorVtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __x_ABI_CWindows_CMedia_CCore_CIAudioStreamDescriptor_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __x_ABI_CWindows_CMedia_CCore_CIAudioStreamDescriptor_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __x_ABI_CWindows_CMedia_CCore_CIAudioStreamDescriptor_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __x_ABI_CWindows_CMedia_CCore_CIAudioStreamDescriptor_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __x_ABI_CWindows_CMedia_CCore_CIAudioStreamDescriptor_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __x_ABI_CWindows_CMedia_CCore_CIAudioStreamDescriptor_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __x_ABI_CWindows_CMedia_CCore_CIAudioStreamDescriptor_get_EncodingProperties(This, encodingProperties) \
    ((This)->lpVtbl->get_EncodingProperties(This, encodingProperties))

#endif /* COBJMACROS */

EXTERN_C const IID IID___x_ABI_CWindows_CMedia_CCore_CIAudioStreamDescriptor;
#endif /* !defined(____x_ABI_CWindows_CMedia_CCore_CIAudioStreamDescriptor_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Interface Windows.Media.Core.IAudioStreamDescriptor2
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 3.0
 *
 * Interface is a part of the implementation of type Windows.Media.Core.AudioStreamDescriptor
 *
 * Any object which implements this interface must also implement the following interfaces:
 *     Windows.Media.Core.IMediaStreamDescriptor
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x30000
#if !defined(____x_ABI_CWindows_CMedia_CCore_CIAudioStreamDescriptor2_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CMedia_CCore_CIAudioStreamDescriptor2_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Media_Core_IAudioStreamDescriptor2[] = L"Windows.Media.Core.IAudioStreamDescriptor2";
typedef struct __x_ABI_CWindows_CMedia_CCore_CIAudioStreamDescriptor2Vtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CMedia_CCore_CIAudioStreamDescriptor2* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CMedia_CCore_CIAudioStreamDescriptor2* This);
    ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CMedia_CCore_CIAudioStreamDescriptor2* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CMedia_CCore_CIAudioStreamDescriptor2* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CMedia_CCore_CIAudioStreamDescriptor2* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CMedia_CCore_CIAudioStreamDescriptor2* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* put_LeadingEncoderPadding)(__x_ABI_CWindows_CMedia_CCore_CIAudioStreamDescriptor2* This,
        __FIReference_1_UINT32* value);
    HRESULT (STDMETHODCALLTYPE* get_LeadingEncoderPadding)(__x_ABI_CWindows_CMedia_CCore_CIAudioStreamDescriptor2* This,
        __FIReference_1_UINT32** value);
    HRESULT (STDMETHODCALLTYPE* put_TrailingEncoderPadding)(__x_ABI_CWindows_CMedia_CCore_CIAudioStreamDescriptor2* This,
        __FIReference_1_UINT32* value);
    HRESULT (STDMETHODCALLTYPE* get_TrailingEncoderPadding)(__x_ABI_CWindows_CMedia_CCore_CIAudioStreamDescriptor2* This,
        __FIReference_1_UINT32** value);

    END_INTERFACE
} __x_ABI_CWindows_CMedia_CCore_CIAudioStreamDescriptor2Vtbl;

interface __x_ABI_CWindows_CMedia_CCore_CIAudioStreamDescriptor2
{
    CONST_VTBL struct __x_ABI_CWindows_CMedia_CCore_CIAudioStreamDescriptor2Vtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __x_ABI_CWindows_CMedia_CCore_CIAudioStreamDescriptor2_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __x_ABI_CWindows_CMedia_CCore_CIAudioStreamDescriptor2_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __x_ABI_CWindows_CMedia_CCore_CIAudioStreamDescriptor2_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __x_ABI_CWindows_CMedia_CCore_CIAudioStreamDescriptor2_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __x_ABI_CWindows_CMedia_CCore_CIAudioStreamDescriptor2_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __x_ABI_CWindows_CMedia_CCore_CIAudioStreamDescriptor2_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __x_ABI_CWindows_CMedia_CCore_CIAudioStreamDescriptor2_put_LeadingEncoderPadding(This, value) \
    ((This)->lpVtbl->put_LeadingEncoderPadding(This, value))

#define __x_ABI_CWindows_CMedia_CCore_CIAudioStreamDescriptor2_get_LeadingEncoderPadding(This, value) \
    ((This)->lpVtbl->get_LeadingEncoderPadding(This, value))

#define __x_ABI_CWindows_CMedia_CCore_CIAudioStreamDescriptor2_put_TrailingEncoderPadding(This, value) \
    ((This)->lpVtbl->put_TrailingEncoderPadding(This, value))

#define __x_ABI_CWindows_CMedia_CCore_CIAudioStreamDescriptor2_get_TrailingEncoderPadding(This, value) \
    ((This)->lpVtbl->get_TrailingEncoderPadding(This, value))

#endif /* COBJMACROS */

EXTERN_C const IID IID___x_ABI_CWindows_CMedia_CCore_CIAudioStreamDescriptor2;
#endif /* !defined(____x_ABI_CWindows_CMedia_CCore_CIAudioStreamDescriptor2_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x30000

/*
 *
 * Interface Windows.Media.Core.IAudioStreamDescriptor3
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 6.0
 *
 * Interface is a part of the implementation of type Windows.Media.Core.AudioStreamDescriptor
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x60000
#if !defined(____x_ABI_CWindows_CMedia_CCore_CIAudioStreamDescriptor3_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CMedia_CCore_CIAudioStreamDescriptor3_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Media_Core_IAudioStreamDescriptor3[] = L"Windows.Media.Core.IAudioStreamDescriptor3";
typedef struct __x_ABI_CWindows_CMedia_CCore_CIAudioStreamDescriptor3Vtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CMedia_CCore_CIAudioStreamDescriptor3* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CMedia_CCore_CIAudioStreamDescriptor3* This);
    ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CMedia_CCore_CIAudioStreamDescriptor3* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CMedia_CCore_CIAudioStreamDescriptor3* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CMedia_CCore_CIAudioStreamDescriptor3* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CMedia_CCore_CIAudioStreamDescriptor3* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* Copy)(__x_ABI_CWindows_CMedia_CCore_CIAudioStreamDescriptor3* This,
        __x_ABI_CWindows_CMedia_CCore_CIAudioStreamDescriptor** result);

    END_INTERFACE
} __x_ABI_CWindows_CMedia_CCore_CIAudioStreamDescriptor3Vtbl;

interface __x_ABI_CWindows_CMedia_CCore_CIAudioStreamDescriptor3
{
    CONST_VTBL struct __x_ABI_CWindows_CMedia_CCore_CIAudioStreamDescriptor3Vtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __x_ABI_CWindows_CMedia_CCore_CIAudioStreamDescriptor3_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __x_ABI_CWindows_CMedia_CCore_CIAudioStreamDescriptor3_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __x_ABI_CWindows_CMedia_CCore_CIAudioStreamDescriptor3_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __x_ABI_CWindows_CMedia_CCore_CIAudioStreamDescriptor3_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __x_ABI_CWindows_CMedia_CCore_CIAudioStreamDescriptor3_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __x_ABI_CWindows_CMedia_CCore_CIAudioStreamDescriptor3_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __x_ABI_CWindows_CMedia_CCore_CIAudioStreamDescriptor3_Copy(This, result) \
    ((This)->lpVtbl->Copy(This, result))

#endif /* COBJMACROS */

EXTERN_C const IID IID___x_ABI_CWindows_CMedia_CCore_CIAudioStreamDescriptor3;
#endif /* !defined(____x_ABI_CWindows_CMedia_CCore_CIAudioStreamDescriptor3_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x60000

/*
 *
 * Interface Windows.Media.Core.IAudioStreamDescriptorFactory
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Interface is a part of the implementation of type Windows.Media.Core.AudioStreamDescriptor
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____x_ABI_CWindows_CMedia_CCore_CIAudioStreamDescriptorFactory_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CMedia_CCore_CIAudioStreamDescriptorFactory_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Media_Core_IAudioStreamDescriptorFactory[] = L"Windows.Media.Core.IAudioStreamDescriptorFactory";
typedef struct __x_ABI_CWindows_CMedia_CCore_CIAudioStreamDescriptorFactoryVtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CMedia_CCore_CIAudioStreamDescriptorFactory* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CMedia_CCore_CIAudioStreamDescriptorFactory* This);
    ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CMedia_CCore_CIAudioStreamDescriptorFactory* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CMedia_CCore_CIAudioStreamDescriptorFactory* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CMedia_CCore_CIAudioStreamDescriptorFactory* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CMedia_CCore_CIAudioStreamDescriptorFactory* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* Create)(__x_ABI_CWindows_CMedia_CCore_CIAudioStreamDescriptorFactory* This,
        __x_ABI_CWindows_CMedia_CMediaProperties_CIAudioEncodingProperties* encodingProperties,
        __x_ABI_CWindows_CMedia_CCore_CIAudioStreamDescriptor** result);

    END_INTERFACE
} __x_ABI_CWindows_CMedia_CCore_CIAudioStreamDescriptorFactoryVtbl;

interface __x_ABI_CWindows_CMedia_CCore_CIAudioStreamDescriptorFactory
{
    CONST_VTBL struct __x_ABI_CWindows_CMedia_CCore_CIAudioStreamDescriptorFactoryVtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __x_ABI_CWindows_CMedia_CCore_CIAudioStreamDescriptorFactory_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __x_ABI_CWindows_CMedia_CCore_CIAudioStreamDescriptorFactory_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __x_ABI_CWindows_CMedia_CCore_CIAudioStreamDescriptorFactory_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __x_ABI_CWindows_CMedia_CCore_CIAudioStreamDescriptorFactory_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __x_ABI_CWindows_CMedia_CCore_CIAudioStreamDescriptorFactory_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __x_ABI_CWindows_CMedia_CCore_CIAudioStreamDescriptorFactory_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __x_ABI_CWindows_CMedia_CCore_CIAudioStreamDescriptorFactory_Create(This, encodingProperties, result) \
    ((This)->lpVtbl->Create(This, encodingProperties, result))

#endif /* COBJMACROS */

EXTERN_C const IID IID___x_ABI_CWindows_CMedia_CCore_CIAudioStreamDescriptorFactory;
#endif /* !defined(____x_ABI_CWindows_CMedia_CCore_CIAudioStreamDescriptorFactory_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Interface Windows.Media.Core.IAudioTrack
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 3.0
 *
 * Interface is a part of the implementation of type Windows.Media.Core.AudioTrack
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x30000
#if !defined(____x_ABI_CWindows_CMedia_CCore_CIAudioTrack_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CMedia_CCore_CIAudioTrack_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Media_Core_IAudioTrack[] = L"Windows.Media.Core.IAudioTrack";
typedef struct __x_ABI_CWindows_CMedia_CCore_CIAudioTrackVtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CMedia_CCore_CIAudioTrack* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CMedia_CCore_CIAudioTrack* This);
    ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CMedia_CCore_CIAudioTrack* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CMedia_CCore_CIAudioTrack* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CMedia_CCore_CIAudioTrack* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CMedia_CCore_CIAudioTrack* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* add_OpenFailed)(__x_ABI_CWindows_CMedia_CCore_CIAudioTrack* This,
        __FITypedEventHandler_2_Windows__CMedia__CCore__CAudioTrack_Windows__CMedia__CCore__CAudioTrackOpenFailedEventArgs* handler,
        EventRegistrationToken* token);
    HRESULT (STDMETHODCALLTYPE* remove_OpenFailed)(__x_ABI_CWindows_CMedia_CCore_CIAudioTrack* This,
        EventRegistrationToken token);
    HRESULT (STDMETHODCALLTYPE* GetEncodingProperties)(__x_ABI_CWindows_CMedia_CCore_CIAudioTrack* This,
        __x_ABI_CWindows_CMedia_CMediaProperties_CIAudioEncodingProperties** value);
    HRESULT (STDMETHODCALLTYPE* get_PlaybackItem)(__x_ABI_CWindows_CMedia_CCore_CIAudioTrack* This,
        __x_ABI_CWindows_CMedia_CPlayback_CIMediaPlaybackItem** value);
    HRESULT (STDMETHODCALLTYPE* get_Name)(__x_ABI_CWindows_CMedia_CCore_CIAudioTrack* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_SupportInfo)(__x_ABI_CWindows_CMedia_CCore_CIAudioTrack* This,
        __x_ABI_CWindows_CMedia_CCore_CIAudioTrackSupportInfo** value);

    END_INTERFACE
} __x_ABI_CWindows_CMedia_CCore_CIAudioTrackVtbl;

interface __x_ABI_CWindows_CMedia_CCore_CIAudioTrack
{
    CONST_VTBL struct __x_ABI_CWindows_CMedia_CCore_CIAudioTrackVtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __x_ABI_CWindows_CMedia_CCore_CIAudioTrack_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __x_ABI_CWindows_CMedia_CCore_CIAudioTrack_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __x_ABI_CWindows_CMedia_CCore_CIAudioTrack_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __x_ABI_CWindows_CMedia_CCore_CIAudioTrack_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __x_ABI_CWindows_CMedia_CCore_CIAudioTrack_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __x_ABI_CWindows_CMedia_CCore_CIAudioTrack_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __x_ABI_CWindows_CMedia_CCore_CIAudioTrack_add_OpenFailed(This, handler, token) \
    ((This)->lpVtbl->add_OpenFailed(This, handler, token))

#define __x_ABI_CWindows_CMedia_CCore_CIAudioTrack_remove_OpenFailed(This, token) \
    ((This)->lpVtbl->remove_OpenFailed(This, token))

#define __x_ABI_CWindows_CMedia_CCore_CIAudioTrack_GetEncodingProperties(This, value) \
    ((This)->lpVtbl->GetEncodingProperties(This, value))

#define __x_ABI_CWindows_CMedia_CCore_CIAudioTrack_get_PlaybackItem(This, value) \
    ((This)->lpVtbl->get_PlaybackItem(This, value))

#define __x_ABI_CWindows_CMedia_CCore_CIAudioTrack_get_Name(This, value) \
    ((This)->lpVtbl->get_Name(This, value))

#define __x_ABI_CWindows_CMedia_CCore_CIAudioTrack_get_SupportInfo(This, value) \
    ((This)->lpVtbl->get_SupportInfo(This, value))

#endif /* COBJMACROS */

EXTERN_C const IID IID___x_ABI_CWindows_CMedia_CCore_CIAudioTrack;
#endif /* !defined(____x_ABI_CWindows_CMedia_CCore_CIAudioTrack_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x30000

/*
 *
 * Interface Windows.Media.Core.IAudioTrackOpenFailedEventArgs
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 3.0
 *
 * Interface is a part of the implementation of type Windows.Media.Core.AudioTrackOpenFailedEventArgs
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x30000
#if !defined(____x_ABI_CWindows_CMedia_CCore_CIAudioTrackOpenFailedEventArgs_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CMedia_CCore_CIAudioTrackOpenFailedEventArgs_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Media_Core_IAudioTrackOpenFailedEventArgs[] = L"Windows.Media.Core.IAudioTrackOpenFailedEventArgs";
typedef struct __x_ABI_CWindows_CMedia_CCore_CIAudioTrackOpenFailedEventArgsVtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CMedia_CCore_CIAudioTrackOpenFailedEventArgs* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CMedia_CCore_CIAudioTrackOpenFailedEventArgs* This);
    ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CMedia_CCore_CIAudioTrackOpenFailedEventArgs* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CMedia_CCore_CIAudioTrackOpenFailedEventArgs* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CMedia_CCore_CIAudioTrackOpenFailedEventArgs* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CMedia_CCore_CIAudioTrackOpenFailedEventArgs* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* get_ExtendedError)(__x_ABI_CWindows_CMedia_CCore_CIAudioTrackOpenFailedEventArgs* This,
        HRESULT* value);

    END_INTERFACE
} __x_ABI_CWindows_CMedia_CCore_CIAudioTrackOpenFailedEventArgsVtbl;

interface __x_ABI_CWindows_CMedia_CCore_CIAudioTrackOpenFailedEventArgs
{
    CONST_VTBL struct __x_ABI_CWindows_CMedia_CCore_CIAudioTrackOpenFailedEventArgsVtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __x_ABI_CWindows_CMedia_CCore_CIAudioTrackOpenFailedEventArgs_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __x_ABI_CWindows_CMedia_CCore_CIAudioTrackOpenFailedEventArgs_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __x_ABI_CWindows_CMedia_CCore_CIAudioTrackOpenFailedEventArgs_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __x_ABI_CWindows_CMedia_CCore_CIAudioTrackOpenFailedEventArgs_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __x_ABI_CWindows_CMedia_CCore_CIAudioTrackOpenFailedEventArgs_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __x_ABI_CWindows_CMedia_CCore_CIAudioTrackOpenFailedEventArgs_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __x_ABI_CWindows_CMedia_CCore_CIAudioTrackOpenFailedEventArgs_get_ExtendedError(This, value) \
    ((This)->lpVtbl->get_ExtendedError(This, value))

#endif /* COBJMACROS */

EXTERN_C const IID IID___x_ABI_CWindows_CMedia_CCore_CIAudioTrackOpenFailedEventArgs;
#endif /* !defined(____x_ABI_CWindows_CMedia_CCore_CIAudioTrackOpenFailedEventArgs_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x30000

/*
 *
 * Interface Windows.Media.Core.IAudioTrackSupportInfo
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 3.0
 *
 * Interface is a part of the implementation of type Windows.Media.Core.AudioTrackSupportInfo
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x30000
#if !defined(____x_ABI_CWindows_CMedia_CCore_CIAudioTrackSupportInfo_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CMedia_CCore_CIAudioTrackSupportInfo_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Media_Core_IAudioTrackSupportInfo[] = L"Windows.Media.Core.IAudioTrackSupportInfo";
typedef struct __x_ABI_CWindows_CMedia_CCore_CIAudioTrackSupportInfoVtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CMedia_CCore_CIAudioTrackSupportInfo* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CMedia_CCore_CIAudioTrackSupportInfo* This);
    ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CMedia_CCore_CIAudioTrackSupportInfo* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CMedia_CCore_CIAudioTrackSupportInfo* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CMedia_CCore_CIAudioTrackSupportInfo* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CMedia_CCore_CIAudioTrackSupportInfo* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* get_DecoderStatus)(__x_ABI_CWindows_CMedia_CCore_CIAudioTrackSupportInfo* This,
        enum __x_ABI_CWindows_CMedia_CCore_CMediaDecoderStatus* value);
    HRESULT (STDMETHODCALLTYPE* get_Degradation)(__x_ABI_CWindows_CMedia_CCore_CIAudioTrackSupportInfo* This,
        enum __x_ABI_CWindows_CMedia_CCore_CAudioDecoderDegradation* value);
    HRESULT (STDMETHODCALLTYPE* get_DegradationReason)(__x_ABI_CWindows_CMedia_CCore_CIAudioTrackSupportInfo* This,
        enum __x_ABI_CWindows_CMedia_CCore_CAudioDecoderDegradationReason* value);
    HRESULT (STDMETHODCALLTYPE* get_MediaSourceStatus)(__x_ABI_CWindows_CMedia_CCore_CIAudioTrackSupportInfo* This,
        enum __x_ABI_CWindows_CMedia_CCore_CMediaSourceStatus* value);

    END_INTERFACE
} __x_ABI_CWindows_CMedia_CCore_CIAudioTrackSupportInfoVtbl;

interface __x_ABI_CWindows_CMedia_CCore_CIAudioTrackSupportInfo
{
    CONST_VTBL struct __x_ABI_CWindows_CMedia_CCore_CIAudioTrackSupportInfoVtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __x_ABI_CWindows_CMedia_CCore_CIAudioTrackSupportInfo_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __x_ABI_CWindows_CMedia_CCore_CIAudioTrackSupportInfo_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __x_ABI_CWindows_CMedia_CCore_CIAudioTrackSupportInfo_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __x_ABI_CWindows_CMedia_CCore_CIAudioTrackSupportInfo_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __x_ABI_CWindows_CMedia_CCore_CIAudioTrackSupportInfo_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __x_ABI_CWindows_CMedia_CCore_CIAudioTrackSupportInfo_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __x_ABI_CWindows_CMedia_CCore_CIAudioTrackSupportInfo_get_DecoderStatus(This, value) \
    ((This)->lpVtbl->get_DecoderStatus(This, value))

#define __x_ABI_CWindows_CMedia_CCore_CIAudioTrackSupportInfo_get_Degradation(This, value) \
    ((This)->lpVtbl->get_Degradation(This, value))

#define __x_ABI_CWindows_CMedia_CCore_CIAudioTrackSupportInfo_get_DegradationReason(This, value) \
    ((This)->lpVtbl->get_DegradationReason(This, value))

#define __x_ABI_CWindows_CMedia_CCore_CIAudioTrackSupportInfo_get_MediaSourceStatus(This, value) \
    ((This)->lpVtbl->get_MediaSourceStatus(This, value))

#endif /* COBJMACROS */

EXTERN_C const IID IID___x_ABI_CWindows_CMedia_CCore_CIAudioTrackSupportInfo;
#endif /* !defined(____x_ABI_CWindows_CMedia_CCore_CIAudioTrackSupportInfo_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x30000

/*
 *
 * Interface Windows.Media.Core.IChapterCue
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 4.0
 *
 * Interface is a part of the implementation of type Windows.Media.Core.ChapterCue
 *
 * Any object which implements this interface must also implement the following interfaces:
 *     Windows.Media.Core.IMediaCue
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x40000
#if !defined(____x_ABI_CWindows_CMedia_CCore_CIChapterCue_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CMedia_CCore_CIChapterCue_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Media_Core_IChapterCue[] = L"Windows.Media.Core.IChapterCue";
typedef struct __x_ABI_CWindows_CMedia_CCore_CIChapterCueVtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CMedia_CCore_CIChapterCue* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CMedia_CCore_CIChapterCue* This);
    ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CMedia_CCore_CIChapterCue* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CMedia_CCore_CIChapterCue* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CMedia_CCore_CIChapterCue* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CMedia_CCore_CIChapterCue* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* put_Title)(__x_ABI_CWindows_CMedia_CCore_CIChapterCue* This,
        HSTRING value);
    HRESULT (STDMETHODCALLTYPE* get_Title)(__x_ABI_CWindows_CMedia_CCore_CIChapterCue* This,
        HSTRING* value);

    END_INTERFACE
} __x_ABI_CWindows_CMedia_CCore_CIChapterCueVtbl;

interface __x_ABI_CWindows_CMedia_CCore_CIChapterCue
{
    CONST_VTBL struct __x_ABI_CWindows_CMedia_CCore_CIChapterCueVtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __x_ABI_CWindows_CMedia_CCore_CIChapterCue_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __x_ABI_CWindows_CMedia_CCore_CIChapterCue_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __x_ABI_CWindows_CMedia_CCore_CIChapterCue_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __x_ABI_CWindows_CMedia_CCore_CIChapterCue_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __x_ABI_CWindows_CMedia_CCore_CIChapterCue_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __x_ABI_CWindows_CMedia_CCore_CIChapterCue_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __x_ABI_CWindows_CMedia_CCore_CIChapterCue_put_Title(This, value) \
    ((This)->lpVtbl->put_Title(This, value))

#define __x_ABI_CWindows_CMedia_CCore_CIChapterCue_get_Title(This, value) \
    ((This)->lpVtbl->get_Title(This, value))

#endif /* COBJMACROS */

EXTERN_C const IID IID___x_ABI_CWindows_CMedia_CCore_CIChapterCue;
#endif /* !defined(____x_ABI_CWindows_CMedia_CCore_CIChapterCue_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x40000

/*
 *
 * Interface Windows.Media.Core.ICodecInfo
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 4.0
 *
 * Interface is a part of the implementation of type Windows.Media.Core.CodecInfo
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x40000
#if !defined(____x_ABI_CWindows_CMedia_CCore_CICodecInfo_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CMedia_CCore_CICodecInfo_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Media_Core_ICodecInfo[] = L"Windows.Media.Core.ICodecInfo";
typedef struct __x_ABI_CWindows_CMedia_CCore_CICodecInfoVtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CMedia_CCore_CICodecInfo* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CMedia_CCore_CICodecInfo* This);
    ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CMedia_CCore_CICodecInfo* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CMedia_CCore_CICodecInfo* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CMedia_CCore_CICodecInfo* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CMedia_CCore_CICodecInfo* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* get_Kind)(__x_ABI_CWindows_CMedia_CCore_CICodecInfo* This,
        enum __x_ABI_CWindows_CMedia_CCore_CCodecKind* value);
    HRESULT (STDMETHODCALLTYPE* get_Category)(__x_ABI_CWindows_CMedia_CCore_CICodecInfo* This,
        enum __x_ABI_CWindows_CMedia_CCore_CCodecCategory* value);
    HRESULT (STDMETHODCALLTYPE* get_Subtypes)(__x_ABI_CWindows_CMedia_CCore_CICodecInfo* This,
        __FIVectorView_1_HSTRING** value);
    HRESULT (STDMETHODCALLTYPE* get_DisplayName)(__x_ABI_CWindows_CMedia_CCore_CICodecInfo* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_IsTrusted)(__x_ABI_CWindows_CMedia_CCore_CICodecInfo* This,
        boolean* value);

    END_INTERFACE
} __x_ABI_CWindows_CMedia_CCore_CICodecInfoVtbl;

interface __x_ABI_CWindows_CMedia_CCore_CICodecInfo
{
    CONST_VTBL struct __x_ABI_CWindows_CMedia_CCore_CICodecInfoVtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __x_ABI_CWindows_CMedia_CCore_CICodecInfo_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __x_ABI_CWindows_CMedia_CCore_CICodecInfo_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __x_ABI_CWindows_CMedia_CCore_CICodecInfo_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __x_ABI_CWindows_CMedia_CCore_CICodecInfo_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __x_ABI_CWindows_CMedia_CCore_CICodecInfo_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __x_ABI_CWindows_CMedia_CCore_CICodecInfo_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __x_ABI_CWindows_CMedia_CCore_CICodecInfo_get_Kind(This, value) \
    ((This)->lpVtbl->get_Kind(This, value))

#define __x_ABI_CWindows_CMedia_CCore_CICodecInfo_get_Category(This, value) \
    ((This)->lpVtbl->get_Category(This, value))

#define __x_ABI_CWindows_CMedia_CCore_CICodecInfo_get_Subtypes(This, value) \
    ((This)->lpVtbl->get_Subtypes(This, value))

#define __x_ABI_CWindows_CMedia_CCore_CICodecInfo_get_DisplayName(This, value) \
    ((This)->lpVtbl->get_DisplayName(This, value))

#define __x_ABI_CWindows_CMedia_CCore_CICodecInfo_get_IsTrusted(This, value) \
    ((This)->lpVtbl->get_IsTrusted(This, value))

#endif /* COBJMACROS */

EXTERN_C const IID IID___x_ABI_CWindows_CMedia_CCore_CICodecInfo;
#endif /* !defined(____x_ABI_CWindows_CMedia_CCore_CICodecInfo_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x40000

/*
 *
 * Interface Windows.Media.Core.ICodecQuery
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 4.0
 *
 * Interface is a part of the implementation of type Windows.Media.Core.CodecQuery
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x40000
#if !defined(____x_ABI_CWindows_CMedia_CCore_CICodecQuery_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CMedia_CCore_CICodecQuery_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Media_Core_ICodecQuery[] = L"Windows.Media.Core.ICodecQuery";
typedef struct __x_ABI_CWindows_CMedia_CCore_CICodecQueryVtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CMedia_CCore_CICodecQuery* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CMedia_CCore_CICodecQuery* This);
    ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CMedia_CCore_CICodecQuery* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CMedia_CCore_CICodecQuery* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CMedia_CCore_CICodecQuery* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CMedia_CCore_CICodecQuery* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* FindAllAsync)(__x_ABI_CWindows_CMedia_CCore_CICodecQuery* This,
        enum __x_ABI_CWindows_CMedia_CCore_CCodecKind kind,
        enum __x_ABI_CWindows_CMedia_CCore_CCodecCategory category,
        HSTRING subType,
        __FIAsyncOperation_1___FIVectorView_1_Windows__CMedia__CCore__CCodecInfo** value);

    END_INTERFACE
} __x_ABI_CWindows_CMedia_CCore_CICodecQueryVtbl;

interface __x_ABI_CWindows_CMedia_CCore_CICodecQuery
{
    CONST_VTBL struct __x_ABI_CWindows_CMedia_CCore_CICodecQueryVtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __x_ABI_CWindows_CMedia_CCore_CICodecQuery_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __x_ABI_CWindows_CMedia_CCore_CICodecQuery_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __x_ABI_CWindows_CMedia_CCore_CICodecQuery_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __x_ABI_CWindows_CMedia_CCore_CICodecQuery_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __x_ABI_CWindows_CMedia_CCore_CICodecQuery_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __x_ABI_CWindows_CMedia_CCore_CICodecQuery_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __x_ABI_CWindows_CMedia_CCore_CICodecQuery_FindAllAsync(This, kind, category, subType, value) \
    ((This)->lpVtbl->FindAllAsync(This, kind, category, subType, value))

#endif /* COBJMACROS */

EXTERN_C const IID IID___x_ABI_CWindows_CMedia_CCore_CICodecQuery;
#endif /* !defined(____x_ABI_CWindows_CMedia_CCore_CICodecQuery_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x40000

/*
 *
 * Interface Windows.Media.Core.ICodecSubtypesStatics
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 4.0
 *
 * Interface is a part of the implementation of type Windows.Media.Core.CodecSubtypes
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x40000
#if !defined(____x_ABI_CWindows_CMedia_CCore_CICodecSubtypesStatics_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CMedia_CCore_CICodecSubtypesStatics_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Media_Core_ICodecSubtypesStatics[] = L"Windows.Media.Core.ICodecSubtypesStatics";
typedef struct __x_ABI_CWindows_CMedia_CCore_CICodecSubtypesStaticsVtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CMedia_CCore_CICodecSubtypesStatics* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CMedia_CCore_CICodecSubtypesStatics* This);
    ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CMedia_CCore_CICodecSubtypesStatics* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CMedia_CCore_CICodecSubtypesStatics* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CMedia_CCore_CICodecSubtypesStatics* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CMedia_CCore_CICodecSubtypesStatics* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* get_VideoFormatDV25)(__x_ABI_CWindows_CMedia_CCore_CICodecSubtypesStatics* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_VideoFormatDV50)(__x_ABI_CWindows_CMedia_CCore_CICodecSubtypesStatics* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_VideoFormatDvc)(__x_ABI_CWindows_CMedia_CCore_CICodecSubtypesStatics* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_VideoFormatDvh1)(__x_ABI_CWindows_CMedia_CCore_CICodecSubtypesStatics* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_VideoFormatDvhD)(__x_ABI_CWindows_CMedia_CCore_CICodecSubtypesStatics* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_VideoFormatDvsd)(__x_ABI_CWindows_CMedia_CCore_CICodecSubtypesStatics* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_VideoFormatDvsl)(__x_ABI_CWindows_CMedia_CCore_CICodecSubtypesStatics* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_VideoFormatH263)(__x_ABI_CWindows_CMedia_CCore_CICodecSubtypesStatics* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_VideoFormatH264)(__x_ABI_CWindows_CMedia_CCore_CICodecSubtypesStatics* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_VideoFormatH265)(__x_ABI_CWindows_CMedia_CCore_CICodecSubtypesStatics* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_VideoFormatH264ES)(__x_ABI_CWindows_CMedia_CCore_CICodecSubtypesStatics* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_VideoFormatHevc)(__x_ABI_CWindows_CMedia_CCore_CICodecSubtypesStatics* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_VideoFormatHevcES)(__x_ABI_CWindows_CMedia_CCore_CICodecSubtypesStatics* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_VideoFormatM4S2)(__x_ABI_CWindows_CMedia_CCore_CICodecSubtypesStatics* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_VideoFormatMjpg)(__x_ABI_CWindows_CMedia_CCore_CICodecSubtypesStatics* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_VideoFormatMP43)(__x_ABI_CWindows_CMedia_CCore_CICodecSubtypesStatics* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_VideoFormatMP4S)(__x_ABI_CWindows_CMedia_CCore_CICodecSubtypesStatics* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_VideoFormatMP4V)(__x_ABI_CWindows_CMedia_CCore_CICodecSubtypesStatics* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_VideoFormatMpeg2)(__x_ABI_CWindows_CMedia_CCore_CICodecSubtypesStatics* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_VideoFormatVP80)(__x_ABI_CWindows_CMedia_CCore_CICodecSubtypesStatics* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_VideoFormatVP90)(__x_ABI_CWindows_CMedia_CCore_CICodecSubtypesStatics* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_VideoFormatMpg1)(__x_ABI_CWindows_CMedia_CCore_CICodecSubtypesStatics* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_VideoFormatMss1)(__x_ABI_CWindows_CMedia_CCore_CICodecSubtypesStatics* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_VideoFormatMss2)(__x_ABI_CWindows_CMedia_CCore_CICodecSubtypesStatics* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_VideoFormatWmv1)(__x_ABI_CWindows_CMedia_CCore_CICodecSubtypesStatics* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_VideoFormatWmv2)(__x_ABI_CWindows_CMedia_CCore_CICodecSubtypesStatics* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_VideoFormatWmv3)(__x_ABI_CWindows_CMedia_CCore_CICodecSubtypesStatics* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_VideoFormatWvc1)(__x_ABI_CWindows_CMedia_CCore_CICodecSubtypesStatics* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_VideoFormat420O)(__x_ABI_CWindows_CMedia_CCore_CICodecSubtypesStatics* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_AudioFormatAac)(__x_ABI_CWindows_CMedia_CCore_CICodecSubtypesStatics* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_AudioFormatAdts)(__x_ABI_CWindows_CMedia_CCore_CICodecSubtypesStatics* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_AudioFormatAlac)(__x_ABI_CWindows_CMedia_CCore_CICodecSubtypesStatics* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_AudioFormatAmrNB)(__x_ABI_CWindows_CMedia_CCore_CICodecSubtypesStatics* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_AudioFormatAmrWB)(__x_ABI_CWindows_CMedia_CCore_CICodecSubtypesStatics* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_AudioFormatAmrWP)(__x_ABI_CWindows_CMedia_CCore_CICodecSubtypesStatics* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_AudioFormatDolbyAC3)(__x_ABI_CWindows_CMedia_CCore_CICodecSubtypesStatics* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_AudioFormatDolbyAC3Spdif)(__x_ABI_CWindows_CMedia_CCore_CICodecSubtypesStatics* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_AudioFormatDolbyDDPlus)(__x_ABI_CWindows_CMedia_CCore_CICodecSubtypesStatics* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_AudioFormatDrm)(__x_ABI_CWindows_CMedia_CCore_CICodecSubtypesStatics* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_AudioFormatDts)(__x_ABI_CWindows_CMedia_CCore_CICodecSubtypesStatics* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_AudioFormatFlac)(__x_ABI_CWindows_CMedia_CCore_CICodecSubtypesStatics* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_AudioFormatFloat)(__x_ABI_CWindows_CMedia_CCore_CICodecSubtypesStatics* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_AudioFormatMP3)(__x_ABI_CWindows_CMedia_CCore_CICodecSubtypesStatics* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_AudioFormatMPeg)(__x_ABI_CWindows_CMedia_CCore_CICodecSubtypesStatics* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_AudioFormatMsp1)(__x_ABI_CWindows_CMedia_CCore_CICodecSubtypesStatics* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_AudioFormatOpus)(__x_ABI_CWindows_CMedia_CCore_CICodecSubtypesStatics* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_AudioFormatPcm)(__x_ABI_CWindows_CMedia_CCore_CICodecSubtypesStatics* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_AudioFormatWmaSpdif)(__x_ABI_CWindows_CMedia_CCore_CICodecSubtypesStatics* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_AudioFormatWMAudioLossless)(__x_ABI_CWindows_CMedia_CCore_CICodecSubtypesStatics* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_AudioFormatWMAudioV8)(__x_ABI_CWindows_CMedia_CCore_CICodecSubtypesStatics* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_AudioFormatWMAudioV9)(__x_ABI_CWindows_CMedia_CCore_CICodecSubtypesStatics* This,
        HSTRING* value);

    END_INTERFACE
} __x_ABI_CWindows_CMedia_CCore_CICodecSubtypesStaticsVtbl;

interface __x_ABI_CWindows_CMedia_CCore_CICodecSubtypesStatics
{
    CONST_VTBL struct __x_ABI_CWindows_CMedia_CCore_CICodecSubtypesStaticsVtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __x_ABI_CWindows_CMedia_CCore_CICodecSubtypesStatics_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __x_ABI_CWindows_CMedia_CCore_CICodecSubtypesStatics_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __x_ABI_CWindows_CMedia_CCore_CICodecSubtypesStatics_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __x_ABI_CWindows_CMedia_CCore_CICodecSubtypesStatics_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __x_ABI_CWindows_CMedia_CCore_CICodecSubtypesStatics_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __x_ABI_CWindows_CMedia_CCore_CICodecSubtypesStatics_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __x_ABI_CWindows_CMedia_CCore_CICodecSubtypesStatics_get_VideoFormatDV25(This, value) \
    ((This)->lpVtbl->get_VideoFormatDV25(This, value))

#define __x_ABI_CWindows_CMedia_CCore_CICodecSubtypesStatics_get_VideoFormatDV50(This, value) \
    ((This)->lpVtbl->get_VideoFormatDV50(This, value))

#define __x_ABI_CWindows_CMedia_CCore_CICodecSubtypesStatics_get_VideoFormatDvc(This, value) \
    ((This)->lpVtbl->get_VideoFormatDvc(This, value))

#define __x_ABI_CWindows_CMedia_CCore_CICodecSubtypesStatics_get_VideoFormatDvh1(This, value) \
    ((This)->lpVtbl->get_VideoFormatDvh1(This, value))

#define __x_ABI_CWindows_CMedia_CCore_CICodecSubtypesStatics_get_VideoFormatDvhD(This, value) \
    ((This)->lpVtbl->get_VideoFormatDvhD(This, value))

#define __x_ABI_CWindows_CMedia_CCore_CICodecSubtypesStatics_get_VideoFormatDvsd(This, value) \
    ((This)->lpVtbl->get_VideoFormatDvsd(This, value))

#define __x_ABI_CWindows_CMedia_CCore_CICodecSubtypesStatics_get_VideoFormatDvsl(This, value) \
    ((This)->lpVtbl->get_VideoFormatDvsl(This, value))

#define __x_ABI_CWindows_CMedia_CCore_CICodecSubtypesStatics_get_VideoFormatH263(This, value) \
    ((This)->lpVtbl->get_VideoFormatH263(This, value))

#define __x_ABI_CWindows_CMedia_CCore_CICodecSubtypesStatics_get_VideoFormatH264(This, value) \
    ((This)->lpVtbl->get_VideoFormatH264(This, value))

#define __x_ABI_CWindows_CMedia_CCore_CICodecSubtypesStatics_get_VideoFormatH265(This, value) \
    ((This)->lpVtbl->get_VideoFormatH265(This, value))

#define __x_ABI_CWindows_CMedia_CCore_CICodecSubtypesStatics_get_VideoFormatH264ES(This, value) \
    ((This)->lpVtbl->get_VideoFormatH264ES(This, value))

#define __x_ABI_CWindows_CMedia_CCore_CICodecSubtypesStatics_get_VideoFormatHevc(This, value) \
    ((This)->lpVtbl->get_VideoFormatHevc(This, value))

#define __x_ABI_CWindows_CMedia_CCore_CICodecSubtypesStatics_get_VideoFormatHevcES(This, value) \
    ((This)->lpVtbl->get_VideoFormatHevcES(This, value))

#define __x_ABI_CWindows_CMedia_CCore_CICodecSubtypesStatics_get_VideoFormatM4S2(This, value) \
    ((This)->lpVtbl->get_VideoFormatM4S2(This, value))

#define __x_ABI_CWindows_CMedia_CCore_CICodecSubtypesStatics_get_VideoFormatMjpg(This, value) \
    ((This)->lpVtbl->get_VideoFormatMjpg(This, value))

#define __x_ABI_CWindows_CMedia_CCore_CICodecSubtypesStatics_get_VideoFormatMP43(This, value) \
    ((This)->lpVtbl->get_VideoFormatMP43(This, value))

#define __x_ABI_CWindows_CMedia_CCore_CICodecSubtypesStatics_get_VideoFormatMP4S(This, value) \
    ((This)->lpVtbl->get_VideoFormatMP4S(This, value))

#define __x_ABI_CWindows_CMedia_CCore_CICodecSubtypesStatics_get_VideoFormatMP4V(This, value) \
    ((This)->lpVtbl->get_VideoFormatMP4V(This, value))

#define __x_ABI_CWindows_CMedia_CCore_CICodecSubtypesStatics_get_VideoFormatMpeg2(This, value) \
    ((This)->lpVtbl->get_VideoFormatMpeg2(This, value))

#define __x_ABI_CWindows_CMedia_CCore_CICodecSubtypesStatics_get_VideoFormatVP80(This, value) \
    ((This)->lpVtbl->get_VideoFormatVP80(This, value))

#define __x_ABI_CWindows_CMedia_CCore_CICodecSubtypesStatics_get_VideoFormatVP90(This, value) \
    ((This)->lpVtbl->get_VideoFormatVP90(This, value))

#define __x_ABI_CWindows_CMedia_CCore_CICodecSubtypesStatics_get_VideoFormatMpg1(This, value) \
    ((This)->lpVtbl->get_VideoFormatMpg1(This, value))

#define __x_ABI_CWindows_CMedia_CCore_CICodecSubtypesStatics_get_VideoFormatMss1(This, value) \
    ((This)->lpVtbl->get_VideoFormatMss1(This, value))

#define __x_ABI_CWindows_CMedia_CCore_CICodecSubtypesStatics_get_VideoFormatMss2(This, value) \
    ((This)->lpVtbl->get_VideoFormatMss2(This, value))

#define __x_ABI_CWindows_CMedia_CCore_CICodecSubtypesStatics_get_VideoFormatWmv1(This, value) \
    ((This)->lpVtbl->get_VideoFormatWmv1(This, value))

#define __x_ABI_CWindows_CMedia_CCore_CICodecSubtypesStatics_get_VideoFormatWmv2(This, value) \
    ((This)->lpVtbl->get_VideoFormatWmv2(This, value))

#define __x_ABI_CWindows_CMedia_CCore_CICodecSubtypesStatics_get_VideoFormatWmv3(This, value) \
    ((This)->lpVtbl->get_VideoFormatWmv3(This, value))

#define __x_ABI_CWindows_CMedia_CCore_CICodecSubtypesStatics_get_VideoFormatWvc1(This, value) \
    ((This)->lpVtbl->get_VideoFormatWvc1(This, value))

#define __x_ABI_CWindows_CMedia_CCore_CICodecSubtypesStatics_get_VideoFormat420O(This, value) \
    ((This)->lpVtbl->get_VideoFormat420O(This, value))

#define __x_ABI_CWindows_CMedia_CCore_CICodecSubtypesStatics_get_AudioFormatAac(This, value) \
    ((This)->lpVtbl->get_AudioFormatAac(This, value))

#define __x_ABI_CWindows_CMedia_CCore_CICodecSubtypesStatics_get_AudioFormatAdts(This, value) \
    ((This)->lpVtbl->get_AudioFormatAdts(This, value))

#define __x_ABI_CWindows_CMedia_CCore_CICodecSubtypesStatics_get_AudioFormatAlac(This, value) \
    ((This)->lpVtbl->get_AudioFormatAlac(This, value))

#define __x_ABI_CWindows_CMedia_CCore_CICodecSubtypesStatics_get_AudioFormatAmrNB(This, value) \
    ((This)->lpVtbl->get_AudioFormatAmrNB(This, value))

#define __x_ABI_CWindows_CMedia_CCore_CICodecSubtypesStatics_get_AudioFormatAmrWB(This, value) \
    ((This)->lpVtbl->get_AudioFormatAmrWB(This, value))

#define __x_ABI_CWindows_CMedia_CCore_CICodecSubtypesStatics_get_AudioFormatAmrWP(This, value) \
    ((This)->lpVtbl->get_AudioFormatAmrWP(This, value))

#define __x_ABI_CWindows_CMedia_CCore_CICodecSubtypesStatics_get_AudioFormatDolbyAC3(This, value) \
    ((This)->lpVtbl->get_AudioFormatDolbyAC3(This, value))

#define __x_ABI_CWindows_CMedia_CCore_CICodecSubtypesStatics_get_AudioFormatDolbyAC3Spdif(This, value) \
    ((This)->lpVtbl->get_AudioFormatDolbyAC3Spdif(This, value))

#define __x_ABI_CWindows_CMedia_CCore_CICodecSubtypesStatics_get_AudioFormatDolbyDDPlus(This, value) \
    ((This)->lpVtbl->get_AudioFormatDolbyDDPlus(This, value))

#define __x_ABI_CWindows_CMedia_CCore_CICodecSubtypesStatics_get_AudioFormatDrm(This, value) \
    ((This)->lpVtbl->get_AudioFormatDrm(This, value))

#define __x_ABI_CWindows_CMedia_CCore_CICodecSubtypesStatics_get_AudioFormatDts(This, value) \
    ((This)->lpVtbl->get_AudioFormatDts(This, value))

#define __x_ABI_CWindows_CMedia_CCore_CICodecSubtypesStatics_get_AudioFormatFlac(This, value) \
    ((This)->lpVtbl->get_AudioFormatFlac(This, value))

#define __x_ABI_CWindows_CMedia_CCore_CICodecSubtypesStatics_get_AudioFormatFloat(This, value) \
    ((This)->lpVtbl->get_AudioFormatFloat(This, value))

#define __x_ABI_CWindows_CMedia_CCore_CICodecSubtypesStatics_get_AudioFormatMP3(This, value) \
    ((This)->lpVtbl->get_AudioFormatMP3(This, value))

#define __x_ABI_CWindows_CMedia_CCore_CICodecSubtypesStatics_get_AudioFormatMPeg(This, value) \
    ((This)->lpVtbl->get_AudioFormatMPeg(This, value))

#define __x_ABI_CWindows_CMedia_CCore_CICodecSubtypesStatics_get_AudioFormatMsp1(This, value) \
    ((This)->lpVtbl->get_AudioFormatMsp1(This, value))

#define __x_ABI_CWindows_CMedia_CCore_CICodecSubtypesStatics_get_AudioFormatOpus(This, value) \
    ((This)->lpVtbl->get_AudioFormatOpus(This, value))

#define __x_ABI_CWindows_CMedia_CCore_CICodecSubtypesStatics_get_AudioFormatPcm(This, value) \
    ((This)->lpVtbl->get_AudioFormatPcm(This, value))

#define __x_ABI_CWindows_CMedia_CCore_CICodecSubtypesStatics_get_AudioFormatWmaSpdif(This, value) \
    ((This)->lpVtbl->get_AudioFormatWmaSpdif(This, value))

#define __x_ABI_CWindows_CMedia_CCore_CICodecSubtypesStatics_get_AudioFormatWMAudioLossless(This, value) \
    ((This)->lpVtbl->get_AudioFormatWMAudioLossless(This, value))

#define __x_ABI_CWindows_CMedia_CCore_CICodecSubtypesStatics_get_AudioFormatWMAudioV8(This, value) \
    ((This)->lpVtbl->get_AudioFormatWMAudioV8(This, value))

#define __x_ABI_CWindows_CMedia_CCore_CICodecSubtypesStatics_get_AudioFormatWMAudioV9(This, value) \
    ((This)->lpVtbl->get_AudioFormatWMAudioV9(This, value))

#endif /* COBJMACROS */

EXTERN_C const IID IID___x_ABI_CWindows_CMedia_CCore_CICodecSubtypesStatics;
#endif /* !defined(____x_ABI_CWindows_CMedia_CCore_CICodecSubtypesStatics_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x40000

/*
 *
 * Interface Windows.Media.Core.IDataCue
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Interface is a part of the implementation of type Windows.Media.Core.DataCue
 *
 * Any object which implements this interface must also implement the following interfaces:
 *     Windows.Media.Core.IMediaCue
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____x_ABI_CWindows_CMedia_CCore_CIDataCue_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CMedia_CCore_CIDataCue_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Media_Core_IDataCue[] = L"Windows.Media.Core.IDataCue";
typedef struct __x_ABI_CWindows_CMedia_CCore_CIDataCueVtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CMedia_CCore_CIDataCue* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CMedia_CCore_CIDataCue* This);
    ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CMedia_CCore_CIDataCue* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CMedia_CCore_CIDataCue* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CMedia_CCore_CIDataCue* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CMedia_CCore_CIDataCue* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* put_Data)(__x_ABI_CWindows_CMedia_CCore_CIDataCue* This,
        __x_ABI_CWindows_CStorage_CStreams_CIBuffer* value);
    HRESULT (STDMETHODCALLTYPE* get_Data)(__x_ABI_CWindows_CMedia_CCore_CIDataCue* This,
        __x_ABI_CWindows_CStorage_CStreams_CIBuffer** value);

    END_INTERFACE
} __x_ABI_CWindows_CMedia_CCore_CIDataCueVtbl;

interface __x_ABI_CWindows_CMedia_CCore_CIDataCue
{
    CONST_VTBL struct __x_ABI_CWindows_CMedia_CCore_CIDataCueVtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __x_ABI_CWindows_CMedia_CCore_CIDataCue_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __x_ABI_CWindows_CMedia_CCore_CIDataCue_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __x_ABI_CWindows_CMedia_CCore_CIDataCue_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __x_ABI_CWindows_CMedia_CCore_CIDataCue_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __x_ABI_CWindows_CMedia_CCore_CIDataCue_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __x_ABI_CWindows_CMedia_CCore_CIDataCue_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __x_ABI_CWindows_CMedia_CCore_CIDataCue_put_Data(This, value) \
    ((This)->lpVtbl->put_Data(This, value))

#define __x_ABI_CWindows_CMedia_CCore_CIDataCue_get_Data(This, value) \
    ((This)->lpVtbl->get_Data(This, value))

#endif /* COBJMACROS */

EXTERN_C const IID IID___x_ABI_CWindows_CMedia_CCore_CIDataCue;
#endif /* !defined(____x_ABI_CWindows_CMedia_CCore_CIDataCue_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Interface Windows.Media.Core.IDataCue2
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 4.0
 *
 * Interface is a part of the implementation of type Windows.Media.Core.DataCue
 *
 * Any object which implements this interface must also implement the following interfaces:
 *     Windows.Media.Core.IDataCue
 *     Windows.Media.Core.IMediaCue
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x40000
#if !defined(____x_ABI_CWindows_CMedia_CCore_CIDataCue2_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CMedia_CCore_CIDataCue2_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Media_Core_IDataCue2[] = L"Windows.Media.Core.IDataCue2";
typedef struct __x_ABI_CWindows_CMedia_CCore_CIDataCue2Vtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CMedia_CCore_CIDataCue2* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CMedia_CCore_CIDataCue2* This);
    ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CMedia_CCore_CIDataCue2* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CMedia_CCore_CIDataCue2* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CMedia_CCore_CIDataCue2* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CMedia_CCore_CIDataCue2* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* get_Properties)(__x_ABI_CWindows_CMedia_CCore_CIDataCue2* This,
        __x_ABI_CWindows_CFoundation_CCollections_CIPropertySet** value);

    END_INTERFACE
} __x_ABI_CWindows_CMedia_CCore_CIDataCue2Vtbl;

interface __x_ABI_CWindows_CMedia_CCore_CIDataCue2
{
    CONST_VTBL struct __x_ABI_CWindows_CMedia_CCore_CIDataCue2Vtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __x_ABI_CWindows_CMedia_CCore_CIDataCue2_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __x_ABI_CWindows_CMedia_CCore_CIDataCue2_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __x_ABI_CWindows_CMedia_CCore_CIDataCue2_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __x_ABI_CWindows_CMedia_CCore_CIDataCue2_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __x_ABI_CWindows_CMedia_CCore_CIDataCue2_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __x_ABI_CWindows_CMedia_CCore_CIDataCue2_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __x_ABI_CWindows_CMedia_CCore_CIDataCue2_get_Properties(This, value) \
    ((This)->lpVtbl->get_Properties(This, value))

#endif /* COBJMACROS */

EXTERN_C const IID IID___x_ABI_CWindows_CMedia_CCore_CIDataCue2;
#endif /* !defined(____x_ABI_CWindows_CMedia_CCore_CIDataCue2_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x40000

/*
 *
 * Interface Windows.Media.Core.IFaceDetectedEventArgs
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Interface is a part of the implementation of type Windows.Media.Core.FaceDetectedEventArgs
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____x_ABI_CWindows_CMedia_CCore_CIFaceDetectedEventArgs_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CMedia_CCore_CIFaceDetectedEventArgs_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Media_Core_IFaceDetectedEventArgs[] = L"Windows.Media.Core.IFaceDetectedEventArgs";
typedef struct __x_ABI_CWindows_CMedia_CCore_CIFaceDetectedEventArgsVtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CMedia_CCore_CIFaceDetectedEventArgs* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CMedia_CCore_CIFaceDetectedEventArgs* This);
    ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CMedia_CCore_CIFaceDetectedEventArgs* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CMedia_CCore_CIFaceDetectedEventArgs* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CMedia_CCore_CIFaceDetectedEventArgs* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CMedia_CCore_CIFaceDetectedEventArgs* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* get_ResultFrame)(__x_ABI_CWindows_CMedia_CCore_CIFaceDetectedEventArgs* This,
        __x_ABI_CWindows_CMedia_CCore_CIFaceDetectionEffectFrame** value);

    END_INTERFACE
} __x_ABI_CWindows_CMedia_CCore_CIFaceDetectedEventArgsVtbl;

interface __x_ABI_CWindows_CMedia_CCore_CIFaceDetectedEventArgs
{
    CONST_VTBL struct __x_ABI_CWindows_CMedia_CCore_CIFaceDetectedEventArgsVtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __x_ABI_CWindows_CMedia_CCore_CIFaceDetectedEventArgs_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __x_ABI_CWindows_CMedia_CCore_CIFaceDetectedEventArgs_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __x_ABI_CWindows_CMedia_CCore_CIFaceDetectedEventArgs_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __x_ABI_CWindows_CMedia_CCore_CIFaceDetectedEventArgs_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __x_ABI_CWindows_CMedia_CCore_CIFaceDetectedEventArgs_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __x_ABI_CWindows_CMedia_CCore_CIFaceDetectedEventArgs_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __x_ABI_CWindows_CMedia_CCore_CIFaceDetectedEventArgs_get_ResultFrame(This, value) \
    ((This)->lpVtbl->get_ResultFrame(This, value))

#endif /* COBJMACROS */

EXTERN_C const IID IID___x_ABI_CWindows_CMedia_CCore_CIFaceDetectedEventArgs;
#endif /* !defined(____x_ABI_CWindows_CMedia_CCore_CIFaceDetectedEventArgs_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Interface Windows.Media.Core.IFaceDetectionEffect
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Interface is a part of the implementation of type Windows.Media.Core.FaceDetectionEffect
 *
 * Any object which implements this interface must also implement the following interfaces:
 *     Windows.Media.IMediaExtension
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____x_ABI_CWindows_CMedia_CCore_CIFaceDetectionEffect_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CMedia_CCore_CIFaceDetectionEffect_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Media_Core_IFaceDetectionEffect[] = L"Windows.Media.Core.IFaceDetectionEffect";
typedef struct __x_ABI_CWindows_CMedia_CCore_CIFaceDetectionEffectVtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CMedia_CCore_CIFaceDetectionEffect* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CMedia_CCore_CIFaceDetectionEffect* This);
    ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CMedia_CCore_CIFaceDetectionEffect* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CMedia_CCore_CIFaceDetectionEffect* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CMedia_CCore_CIFaceDetectionEffect* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CMedia_CCore_CIFaceDetectionEffect* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* put_Enabled)(__x_ABI_CWindows_CMedia_CCore_CIFaceDetectionEffect* This,
        boolean value);
    HRESULT (STDMETHODCALLTYPE* get_Enabled)(__x_ABI_CWindows_CMedia_CCore_CIFaceDetectionEffect* This,
        boolean* value);
    HRESULT (STDMETHODCALLTYPE* put_DesiredDetectionInterval)(__x_ABI_CWindows_CMedia_CCore_CIFaceDetectionEffect* This,
        struct __x_ABI_CWindows_CFoundation_CTimeSpan value);
    HRESULT (STDMETHODCALLTYPE* get_DesiredDetectionInterval)(__x_ABI_CWindows_CMedia_CCore_CIFaceDetectionEffect* This,
        struct __x_ABI_CWindows_CFoundation_CTimeSpan* value);
    HRESULT (STDMETHODCALLTYPE* add_FaceDetected)(__x_ABI_CWindows_CMedia_CCore_CIFaceDetectionEffect* This,
        __FITypedEventHandler_2_Windows__CMedia__CCore__CFaceDetectionEffect_Windows__CMedia__CCore__CFaceDetectedEventArgs* handler,
        EventRegistrationToken* cookie);
    HRESULT (STDMETHODCALLTYPE* remove_FaceDetected)(__x_ABI_CWindows_CMedia_CCore_CIFaceDetectionEffect* This,
        EventRegistrationToken cookie);

    END_INTERFACE
} __x_ABI_CWindows_CMedia_CCore_CIFaceDetectionEffectVtbl;

interface __x_ABI_CWindows_CMedia_CCore_CIFaceDetectionEffect
{
    CONST_VTBL struct __x_ABI_CWindows_CMedia_CCore_CIFaceDetectionEffectVtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __x_ABI_CWindows_CMedia_CCore_CIFaceDetectionEffect_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __x_ABI_CWindows_CMedia_CCore_CIFaceDetectionEffect_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __x_ABI_CWindows_CMedia_CCore_CIFaceDetectionEffect_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __x_ABI_CWindows_CMedia_CCore_CIFaceDetectionEffect_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __x_ABI_CWindows_CMedia_CCore_CIFaceDetectionEffect_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __x_ABI_CWindows_CMedia_CCore_CIFaceDetectionEffect_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __x_ABI_CWindows_CMedia_CCore_CIFaceDetectionEffect_put_Enabled(This, value) \
    ((This)->lpVtbl->put_Enabled(This, value))

#define __x_ABI_CWindows_CMedia_CCore_CIFaceDetectionEffect_get_Enabled(This, value) \
    ((This)->lpVtbl->get_Enabled(This, value))

#define __x_ABI_CWindows_CMedia_CCore_CIFaceDetectionEffect_put_DesiredDetectionInterval(This, value) \
    ((This)->lpVtbl->put_DesiredDetectionInterval(This, value))

#define __x_ABI_CWindows_CMedia_CCore_CIFaceDetectionEffect_get_DesiredDetectionInterval(This, value) \
    ((This)->lpVtbl->get_DesiredDetectionInterval(This, value))

#define __x_ABI_CWindows_CMedia_CCore_CIFaceDetectionEffect_add_FaceDetected(This, handler, cookie) \
    ((This)->lpVtbl->add_FaceDetected(This, handler, cookie))

#define __x_ABI_CWindows_CMedia_CCore_CIFaceDetectionEffect_remove_FaceDetected(This, cookie) \
    ((This)->lpVtbl->remove_FaceDetected(This, cookie))

#endif /* COBJMACROS */

EXTERN_C const IID IID___x_ABI_CWindows_CMedia_CCore_CIFaceDetectionEffect;
#endif /* !defined(____x_ABI_CWindows_CMedia_CCore_CIFaceDetectionEffect_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Interface Windows.Media.Core.IFaceDetectionEffectDefinition
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Interface is a part of the implementation of type Windows.Media.Core.FaceDetectionEffectDefinition
 *
 * Any object which implements this interface must also implement the following interfaces:
 *     Windows.Media.Effects.IVideoEffectDefinition
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____x_ABI_CWindows_CMedia_CCore_CIFaceDetectionEffectDefinition_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CMedia_CCore_CIFaceDetectionEffectDefinition_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Media_Core_IFaceDetectionEffectDefinition[] = L"Windows.Media.Core.IFaceDetectionEffectDefinition";
typedef struct __x_ABI_CWindows_CMedia_CCore_CIFaceDetectionEffectDefinitionVtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CMedia_CCore_CIFaceDetectionEffectDefinition* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CMedia_CCore_CIFaceDetectionEffectDefinition* This);
    ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CMedia_CCore_CIFaceDetectionEffectDefinition* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CMedia_CCore_CIFaceDetectionEffectDefinition* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CMedia_CCore_CIFaceDetectionEffectDefinition* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CMedia_CCore_CIFaceDetectionEffectDefinition* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* put_DetectionMode)(__x_ABI_CWindows_CMedia_CCore_CIFaceDetectionEffectDefinition* This,
        enum __x_ABI_CWindows_CMedia_CCore_CFaceDetectionMode value);
    HRESULT (STDMETHODCALLTYPE* get_DetectionMode)(__x_ABI_CWindows_CMedia_CCore_CIFaceDetectionEffectDefinition* This,
        enum __x_ABI_CWindows_CMedia_CCore_CFaceDetectionMode* value);
    HRESULT (STDMETHODCALLTYPE* put_SynchronousDetectionEnabled)(__x_ABI_CWindows_CMedia_CCore_CIFaceDetectionEffectDefinition* This,
        boolean value);
    HRESULT (STDMETHODCALLTYPE* get_SynchronousDetectionEnabled)(__x_ABI_CWindows_CMedia_CCore_CIFaceDetectionEffectDefinition* This,
        boolean* value);

    END_INTERFACE
} __x_ABI_CWindows_CMedia_CCore_CIFaceDetectionEffectDefinitionVtbl;

interface __x_ABI_CWindows_CMedia_CCore_CIFaceDetectionEffectDefinition
{
    CONST_VTBL struct __x_ABI_CWindows_CMedia_CCore_CIFaceDetectionEffectDefinitionVtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __x_ABI_CWindows_CMedia_CCore_CIFaceDetectionEffectDefinition_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __x_ABI_CWindows_CMedia_CCore_CIFaceDetectionEffectDefinition_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __x_ABI_CWindows_CMedia_CCore_CIFaceDetectionEffectDefinition_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __x_ABI_CWindows_CMedia_CCore_CIFaceDetectionEffectDefinition_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __x_ABI_CWindows_CMedia_CCore_CIFaceDetectionEffectDefinition_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __x_ABI_CWindows_CMedia_CCore_CIFaceDetectionEffectDefinition_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __x_ABI_CWindows_CMedia_CCore_CIFaceDetectionEffectDefinition_put_DetectionMode(This, value) \
    ((This)->lpVtbl->put_DetectionMode(This, value))

#define __x_ABI_CWindows_CMedia_CCore_CIFaceDetectionEffectDefinition_get_DetectionMode(This, value) \
    ((This)->lpVtbl->get_DetectionMode(This, value))

#define __x_ABI_CWindows_CMedia_CCore_CIFaceDetectionEffectDefinition_put_SynchronousDetectionEnabled(This, value) \
    ((This)->lpVtbl->put_SynchronousDetectionEnabled(This, value))

#define __x_ABI_CWindows_CMedia_CCore_CIFaceDetectionEffectDefinition_get_SynchronousDetectionEnabled(This, value) \
    ((This)->lpVtbl->get_SynchronousDetectionEnabled(This, value))

#endif /* COBJMACROS */

EXTERN_C const IID IID___x_ABI_CWindows_CMedia_CCore_CIFaceDetectionEffectDefinition;
#endif /* !defined(____x_ABI_CWindows_CMedia_CCore_CIFaceDetectionEffectDefinition_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Interface Windows.Media.Core.IFaceDetectionEffectFrame
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Interface is a part of the implementation of type Windows.Media.Core.FaceDetectionEffectFrame
 *
 * Any object which implements this interface must also implement the following interfaces:
 *     Windows.Media.IMediaFrame
 *     Windows.Foundation.IClosable
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____x_ABI_CWindows_CMedia_CCore_CIFaceDetectionEffectFrame_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CMedia_CCore_CIFaceDetectionEffectFrame_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Media_Core_IFaceDetectionEffectFrame[] = L"Windows.Media.Core.IFaceDetectionEffectFrame";
typedef struct __x_ABI_CWindows_CMedia_CCore_CIFaceDetectionEffectFrameVtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CMedia_CCore_CIFaceDetectionEffectFrame* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CMedia_CCore_CIFaceDetectionEffectFrame* This);
    ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CMedia_CCore_CIFaceDetectionEffectFrame* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CMedia_CCore_CIFaceDetectionEffectFrame* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CMedia_CCore_CIFaceDetectionEffectFrame* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CMedia_CCore_CIFaceDetectionEffectFrame* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* get_DetectedFaces)(__x_ABI_CWindows_CMedia_CCore_CIFaceDetectionEffectFrame* This,
        __FIVectorView_1_Windows__CMedia__CFaceAnalysis__CDetectedFace** value);

    END_INTERFACE
} __x_ABI_CWindows_CMedia_CCore_CIFaceDetectionEffectFrameVtbl;

interface __x_ABI_CWindows_CMedia_CCore_CIFaceDetectionEffectFrame
{
    CONST_VTBL struct __x_ABI_CWindows_CMedia_CCore_CIFaceDetectionEffectFrameVtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __x_ABI_CWindows_CMedia_CCore_CIFaceDetectionEffectFrame_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __x_ABI_CWindows_CMedia_CCore_CIFaceDetectionEffectFrame_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __x_ABI_CWindows_CMedia_CCore_CIFaceDetectionEffectFrame_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __x_ABI_CWindows_CMedia_CCore_CIFaceDetectionEffectFrame_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __x_ABI_CWindows_CMedia_CCore_CIFaceDetectionEffectFrame_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __x_ABI_CWindows_CMedia_CCore_CIFaceDetectionEffectFrame_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __x_ABI_CWindows_CMedia_CCore_CIFaceDetectionEffectFrame_get_DetectedFaces(This, value) \
    ((This)->lpVtbl->get_DetectedFaces(This, value))

#endif /* COBJMACROS */

EXTERN_C const IID IID___x_ABI_CWindows_CMedia_CCore_CIFaceDetectionEffectFrame;
#endif /* !defined(____x_ABI_CWindows_CMedia_CCore_CIFaceDetectionEffectFrame_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Interface Windows.Media.Core.IHighDynamicRangeControl
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Interface is a part of the implementation of type Windows.Media.Core.HighDynamicRangeControl
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____x_ABI_CWindows_CMedia_CCore_CIHighDynamicRangeControl_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CMedia_CCore_CIHighDynamicRangeControl_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Media_Core_IHighDynamicRangeControl[] = L"Windows.Media.Core.IHighDynamicRangeControl";
typedef struct __x_ABI_CWindows_CMedia_CCore_CIHighDynamicRangeControlVtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CMedia_CCore_CIHighDynamicRangeControl* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CMedia_CCore_CIHighDynamicRangeControl* This);
    ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CMedia_CCore_CIHighDynamicRangeControl* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CMedia_CCore_CIHighDynamicRangeControl* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CMedia_CCore_CIHighDynamicRangeControl* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CMedia_CCore_CIHighDynamicRangeControl* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* put_Enabled)(__x_ABI_CWindows_CMedia_CCore_CIHighDynamicRangeControl* This,
        boolean value);
    HRESULT (STDMETHODCALLTYPE* get_Enabled)(__x_ABI_CWindows_CMedia_CCore_CIHighDynamicRangeControl* This,
        boolean* value);

    END_INTERFACE
} __x_ABI_CWindows_CMedia_CCore_CIHighDynamicRangeControlVtbl;

interface __x_ABI_CWindows_CMedia_CCore_CIHighDynamicRangeControl
{
    CONST_VTBL struct __x_ABI_CWindows_CMedia_CCore_CIHighDynamicRangeControlVtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __x_ABI_CWindows_CMedia_CCore_CIHighDynamicRangeControl_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __x_ABI_CWindows_CMedia_CCore_CIHighDynamicRangeControl_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __x_ABI_CWindows_CMedia_CCore_CIHighDynamicRangeControl_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __x_ABI_CWindows_CMedia_CCore_CIHighDynamicRangeControl_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __x_ABI_CWindows_CMedia_CCore_CIHighDynamicRangeControl_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __x_ABI_CWindows_CMedia_CCore_CIHighDynamicRangeControl_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __x_ABI_CWindows_CMedia_CCore_CIHighDynamicRangeControl_put_Enabled(This, value) \
    ((This)->lpVtbl->put_Enabled(This, value))

#define __x_ABI_CWindows_CMedia_CCore_CIHighDynamicRangeControl_get_Enabled(This, value) \
    ((This)->lpVtbl->get_Enabled(This, value))

#endif /* COBJMACROS */

EXTERN_C const IID IID___x_ABI_CWindows_CMedia_CCore_CIHighDynamicRangeControl;
#endif /* !defined(____x_ABI_CWindows_CMedia_CCore_CIHighDynamicRangeControl_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Interface Windows.Media.Core.IHighDynamicRangeOutput
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Interface is a part of the implementation of type Windows.Media.Core.HighDynamicRangeOutput
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____x_ABI_CWindows_CMedia_CCore_CIHighDynamicRangeOutput_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CMedia_CCore_CIHighDynamicRangeOutput_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Media_Core_IHighDynamicRangeOutput[] = L"Windows.Media.Core.IHighDynamicRangeOutput";
typedef struct __x_ABI_CWindows_CMedia_CCore_CIHighDynamicRangeOutputVtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CMedia_CCore_CIHighDynamicRangeOutput* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CMedia_CCore_CIHighDynamicRangeOutput* This);
    ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CMedia_CCore_CIHighDynamicRangeOutput* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CMedia_CCore_CIHighDynamicRangeOutput* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CMedia_CCore_CIHighDynamicRangeOutput* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CMedia_CCore_CIHighDynamicRangeOutput* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* get_Certainty)(__x_ABI_CWindows_CMedia_CCore_CIHighDynamicRangeOutput* This,
        DOUBLE* value);
    HRESULT (STDMETHODCALLTYPE* get_FrameControllers)(__x_ABI_CWindows_CMedia_CCore_CIHighDynamicRangeOutput* This,
        __FIVectorView_1_Windows__CMedia__CDevices__CCore__CFrameController** value);

    END_INTERFACE
} __x_ABI_CWindows_CMedia_CCore_CIHighDynamicRangeOutputVtbl;

interface __x_ABI_CWindows_CMedia_CCore_CIHighDynamicRangeOutput
{
    CONST_VTBL struct __x_ABI_CWindows_CMedia_CCore_CIHighDynamicRangeOutputVtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __x_ABI_CWindows_CMedia_CCore_CIHighDynamicRangeOutput_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __x_ABI_CWindows_CMedia_CCore_CIHighDynamicRangeOutput_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __x_ABI_CWindows_CMedia_CCore_CIHighDynamicRangeOutput_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __x_ABI_CWindows_CMedia_CCore_CIHighDynamicRangeOutput_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __x_ABI_CWindows_CMedia_CCore_CIHighDynamicRangeOutput_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __x_ABI_CWindows_CMedia_CCore_CIHighDynamicRangeOutput_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __x_ABI_CWindows_CMedia_CCore_CIHighDynamicRangeOutput_get_Certainty(This, value) \
    ((This)->lpVtbl->get_Certainty(This, value))

#define __x_ABI_CWindows_CMedia_CCore_CIHighDynamicRangeOutput_get_FrameControllers(This, value) \
    ((This)->lpVtbl->get_FrameControllers(This, value))

#endif /* COBJMACROS */

EXTERN_C const IID IID___x_ABI_CWindows_CMedia_CCore_CIHighDynamicRangeOutput;
#endif /* !defined(____x_ABI_CWindows_CMedia_CCore_CIHighDynamicRangeOutput_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Interface Windows.Media.Core.IImageCue
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 4.0
 *
 * Interface is a part of the implementation of type Windows.Media.Core.ImageCue
 *
 * Any object which implements this interface must also implement the following interfaces:
 *     Windows.Media.Core.IMediaCue
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x40000
#if !defined(____x_ABI_CWindows_CMedia_CCore_CIImageCue_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CMedia_CCore_CIImageCue_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Media_Core_IImageCue[] = L"Windows.Media.Core.IImageCue";
typedef struct __x_ABI_CWindows_CMedia_CCore_CIImageCueVtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CMedia_CCore_CIImageCue* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CMedia_CCore_CIImageCue* This);
    ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CMedia_CCore_CIImageCue* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CMedia_CCore_CIImageCue* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CMedia_CCore_CIImageCue* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CMedia_CCore_CIImageCue* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* get_Position)(__x_ABI_CWindows_CMedia_CCore_CIImageCue* This,
        struct __x_ABI_CWindows_CMedia_CCore_CTimedTextPoint* value);
    HRESULT (STDMETHODCALLTYPE* put_Position)(__x_ABI_CWindows_CMedia_CCore_CIImageCue* This,
        struct __x_ABI_CWindows_CMedia_CCore_CTimedTextPoint value);
    HRESULT (STDMETHODCALLTYPE* get_Extent)(__x_ABI_CWindows_CMedia_CCore_CIImageCue* This,
        struct __x_ABI_CWindows_CMedia_CCore_CTimedTextSize* value);
    HRESULT (STDMETHODCALLTYPE* put_Extent)(__x_ABI_CWindows_CMedia_CCore_CIImageCue* This,
        struct __x_ABI_CWindows_CMedia_CCore_CTimedTextSize value);
    HRESULT (STDMETHODCALLTYPE* put_SoftwareBitmap)(__x_ABI_CWindows_CMedia_CCore_CIImageCue* This,
        __x_ABI_CWindows_CGraphics_CImaging_CISoftwareBitmap* value);
    HRESULT (STDMETHODCALLTYPE* get_SoftwareBitmap)(__x_ABI_CWindows_CMedia_CCore_CIImageCue* This,
        __x_ABI_CWindows_CGraphics_CImaging_CISoftwareBitmap** value);

    END_INTERFACE
} __x_ABI_CWindows_CMedia_CCore_CIImageCueVtbl;

interface __x_ABI_CWindows_CMedia_CCore_CIImageCue
{
    CONST_VTBL struct __x_ABI_CWindows_CMedia_CCore_CIImageCueVtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __x_ABI_CWindows_CMedia_CCore_CIImageCue_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __x_ABI_CWindows_CMedia_CCore_CIImageCue_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __x_ABI_CWindows_CMedia_CCore_CIImageCue_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __x_ABI_CWindows_CMedia_CCore_CIImageCue_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __x_ABI_CWindows_CMedia_CCore_CIImageCue_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __x_ABI_CWindows_CMedia_CCore_CIImageCue_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __x_ABI_CWindows_CMedia_CCore_CIImageCue_get_Position(This, value) \
    ((This)->lpVtbl->get_Position(This, value))

#define __x_ABI_CWindows_CMedia_CCore_CIImageCue_put_Position(This, value) \
    ((This)->lpVtbl->put_Position(This, value))

#define __x_ABI_CWindows_CMedia_CCore_CIImageCue_get_Extent(This, value) \
    ((This)->lpVtbl->get_Extent(This, value))

#define __x_ABI_CWindows_CMedia_CCore_CIImageCue_put_Extent(This, value) \
    ((This)->lpVtbl->put_Extent(This, value))

#define __x_ABI_CWindows_CMedia_CCore_CIImageCue_put_SoftwareBitmap(This, value) \
    ((This)->lpVtbl->put_SoftwareBitmap(This, value))

#define __x_ABI_CWindows_CMedia_CCore_CIImageCue_get_SoftwareBitmap(This, value) \
    ((This)->lpVtbl->get_SoftwareBitmap(This, value))

#endif /* COBJMACROS */

EXTERN_C const IID IID___x_ABI_CWindows_CMedia_CCore_CIImageCue;
#endif /* !defined(____x_ABI_CWindows_CMedia_CCore_CIImageCue_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x40000

/*
 *
 * Interface Windows.Media.Core.IInitializeMediaStreamSourceRequestedEventArgs
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 5.0
 *
 * Interface is a part of the implementation of type Windows.Media.Core.InitializeMediaStreamSourceRequestedEventArgs
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x50000
#if !defined(____x_ABI_CWindows_CMedia_CCore_CIInitializeMediaStreamSourceRequestedEventArgs_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CMedia_CCore_CIInitializeMediaStreamSourceRequestedEventArgs_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Media_Core_IInitializeMediaStreamSourceRequestedEventArgs[] = L"Windows.Media.Core.IInitializeMediaStreamSourceRequestedEventArgs";
typedef struct __x_ABI_CWindows_CMedia_CCore_CIInitializeMediaStreamSourceRequestedEventArgsVtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CMedia_CCore_CIInitializeMediaStreamSourceRequestedEventArgs* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CMedia_CCore_CIInitializeMediaStreamSourceRequestedEventArgs* This);
    ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CMedia_CCore_CIInitializeMediaStreamSourceRequestedEventArgs* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CMedia_CCore_CIInitializeMediaStreamSourceRequestedEventArgs* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CMedia_CCore_CIInitializeMediaStreamSourceRequestedEventArgs* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CMedia_CCore_CIInitializeMediaStreamSourceRequestedEventArgs* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* get_Source)(__x_ABI_CWindows_CMedia_CCore_CIInitializeMediaStreamSourceRequestedEventArgs* This,
        __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSource** value);
    HRESULT (STDMETHODCALLTYPE* get_RandomAccessStream)(__x_ABI_CWindows_CMedia_CCore_CIInitializeMediaStreamSourceRequestedEventArgs* This,
        __x_ABI_CWindows_CStorage_CStreams_CIRandomAccessStream** value);
    HRESULT (STDMETHODCALLTYPE* GetDeferral)(__x_ABI_CWindows_CMedia_CCore_CIInitializeMediaStreamSourceRequestedEventArgs* This,
        __x_ABI_CWindows_CFoundation_CIDeferral** result);

    END_INTERFACE
} __x_ABI_CWindows_CMedia_CCore_CIInitializeMediaStreamSourceRequestedEventArgsVtbl;

interface __x_ABI_CWindows_CMedia_CCore_CIInitializeMediaStreamSourceRequestedEventArgs
{
    CONST_VTBL struct __x_ABI_CWindows_CMedia_CCore_CIInitializeMediaStreamSourceRequestedEventArgsVtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __x_ABI_CWindows_CMedia_CCore_CIInitializeMediaStreamSourceRequestedEventArgs_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __x_ABI_CWindows_CMedia_CCore_CIInitializeMediaStreamSourceRequestedEventArgs_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __x_ABI_CWindows_CMedia_CCore_CIInitializeMediaStreamSourceRequestedEventArgs_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __x_ABI_CWindows_CMedia_CCore_CIInitializeMediaStreamSourceRequestedEventArgs_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __x_ABI_CWindows_CMedia_CCore_CIInitializeMediaStreamSourceRequestedEventArgs_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __x_ABI_CWindows_CMedia_CCore_CIInitializeMediaStreamSourceRequestedEventArgs_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __x_ABI_CWindows_CMedia_CCore_CIInitializeMediaStreamSourceRequestedEventArgs_get_Source(This, value) \
    ((This)->lpVtbl->get_Source(This, value))

#define __x_ABI_CWindows_CMedia_CCore_CIInitializeMediaStreamSourceRequestedEventArgs_get_RandomAccessStream(This, value) \
    ((This)->lpVtbl->get_RandomAccessStream(This, value))

#define __x_ABI_CWindows_CMedia_CCore_CIInitializeMediaStreamSourceRequestedEventArgs_GetDeferral(This, result) \
    ((This)->lpVtbl->GetDeferral(This, result))

#endif /* COBJMACROS */

EXTERN_C const IID IID___x_ABI_CWindows_CMedia_CCore_CIInitializeMediaStreamSourceRequestedEventArgs;
#endif /* !defined(____x_ABI_CWindows_CMedia_CCore_CIInitializeMediaStreamSourceRequestedEventArgs_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x50000

/*
 *
 * Interface Windows.Media.Core.ILowLightFusionResult
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 5.0
 *
 * Interface is a part of the implementation of type Windows.Media.Core.LowLightFusionResult
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x50000
#if !defined(____x_ABI_CWindows_CMedia_CCore_CILowLightFusionResult_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CMedia_CCore_CILowLightFusionResult_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Media_Core_ILowLightFusionResult[] = L"Windows.Media.Core.ILowLightFusionResult";
typedef struct __x_ABI_CWindows_CMedia_CCore_CILowLightFusionResultVtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CMedia_CCore_CILowLightFusionResult* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CMedia_CCore_CILowLightFusionResult* This);
    ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CMedia_CCore_CILowLightFusionResult* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CMedia_CCore_CILowLightFusionResult* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CMedia_CCore_CILowLightFusionResult* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CMedia_CCore_CILowLightFusionResult* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* get_Frame)(__x_ABI_CWindows_CMedia_CCore_CILowLightFusionResult* This,
        __x_ABI_CWindows_CGraphics_CImaging_CISoftwareBitmap** value);

    END_INTERFACE
} __x_ABI_CWindows_CMedia_CCore_CILowLightFusionResultVtbl;

interface __x_ABI_CWindows_CMedia_CCore_CILowLightFusionResult
{
    CONST_VTBL struct __x_ABI_CWindows_CMedia_CCore_CILowLightFusionResultVtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __x_ABI_CWindows_CMedia_CCore_CILowLightFusionResult_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __x_ABI_CWindows_CMedia_CCore_CILowLightFusionResult_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __x_ABI_CWindows_CMedia_CCore_CILowLightFusionResult_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __x_ABI_CWindows_CMedia_CCore_CILowLightFusionResult_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __x_ABI_CWindows_CMedia_CCore_CILowLightFusionResult_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __x_ABI_CWindows_CMedia_CCore_CILowLightFusionResult_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __x_ABI_CWindows_CMedia_CCore_CILowLightFusionResult_get_Frame(This, value) \
    ((This)->lpVtbl->get_Frame(This, value))

#endif /* COBJMACROS */

EXTERN_C const IID IID___x_ABI_CWindows_CMedia_CCore_CILowLightFusionResult;
#endif /* !defined(____x_ABI_CWindows_CMedia_CCore_CILowLightFusionResult_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x50000

/*
 *
 * Interface Windows.Media.Core.ILowLightFusionStatics
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 5.0
 *
 * Interface is a part of the implementation of type Windows.Media.Core.LowLightFusion
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x50000
#if !defined(____x_ABI_CWindows_CMedia_CCore_CILowLightFusionStatics_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CMedia_CCore_CILowLightFusionStatics_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Media_Core_ILowLightFusionStatics[] = L"Windows.Media.Core.ILowLightFusionStatics";
typedef struct __x_ABI_CWindows_CMedia_CCore_CILowLightFusionStaticsVtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CMedia_CCore_CILowLightFusionStatics* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CMedia_CCore_CILowLightFusionStatics* This);
    ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CMedia_CCore_CILowLightFusionStatics* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CMedia_CCore_CILowLightFusionStatics* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CMedia_CCore_CILowLightFusionStatics* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CMedia_CCore_CILowLightFusionStatics* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* get_SupportedBitmapPixelFormats)(__x_ABI_CWindows_CMedia_CCore_CILowLightFusionStatics* This,
        __FIVectorView_1_Windows__CGraphics__CImaging__CBitmapPixelFormat** value);
    HRESULT (STDMETHODCALLTYPE* get_MaxSupportedFrameCount)(__x_ABI_CWindows_CMedia_CCore_CILowLightFusionStatics* This,
        INT32* value);
    HRESULT (STDMETHODCALLTYPE* FuseAsync)(__x_ABI_CWindows_CMedia_CCore_CILowLightFusionStatics* This,
        __FIIterable_1_Windows__CGraphics__CImaging__CSoftwareBitmap* frameSet,
        __FIAsyncOperationWithProgress_2_Windows__CMedia__CCore__CLowLightFusionResult_double** result);

    END_INTERFACE
} __x_ABI_CWindows_CMedia_CCore_CILowLightFusionStaticsVtbl;

interface __x_ABI_CWindows_CMedia_CCore_CILowLightFusionStatics
{
    CONST_VTBL struct __x_ABI_CWindows_CMedia_CCore_CILowLightFusionStaticsVtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __x_ABI_CWindows_CMedia_CCore_CILowLightFusionStatics_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __x_ABI_CWindows_CMedia_CCore_CILowLightFusionStatics_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __x_ABI_CWindows_CMedia_CCore_CILowLightFusionStatics_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __x_ABI_CWindows_CMedia_CCore_CILowLightFusionStatics_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __x_ABI_CWindows_CMedia_CCore_CILowLightFusionStatics_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __x_ABI_CWindows_CMedia_CCore_CILowLightFusionStatics_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __x_ABI_CWindows_CMedia_CCore_CILowLightFusionStatics_get_SupportedBitmapPixelFormats(This, value) \
    ((This)->lpVtbl->get_SupportedBitmapPixelFormats(This, value))

#define __x_ABI_CWindows_CMedia_CCore_CILowLightFusionStatics_get_MaxSupportedFrameCount(This, value) \
    ((This)->lpVtbl->get_MaxSupportedFrameCount(This, value))

#define __x_ABI_CWindows_CMedia_CCore_CILowLightFusionStatics_FuseAsync(This, frameSet, result) \
    ((This)->lpVtbl->FuseAsync(This, frameSet, result))

#endif /* COBJMACROS */

EXTERN_C const IID IID___x_ABI_CWindows_CMedia_CCore_CILowLightFusionStatics;
#endif /* !defined(____x_ABI_CWindows_CMedia_CCore_CILowLightFusionStatics_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x50000

/*
 *
 * Interface Windows.Media.Core.IMediaBinder
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 2.0
 *
 * Interface is a part of the implementation of type Windows.Media.Core.MediaBinder
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x20000
#if !defined(____x_ABI_CWindows_CMedia_CCore_CIMediaBinder_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CMedia_CCore_CIMediaBinder_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Media_Core_IMediaBinder[] = L"Windows.Media.Core.IMediaBinder";
typedef struct __x_ABI_CWindows_CMedia_CCore_CIMediaBinderVtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CMedia_CCore_CIMediaBinder* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CMedia_CCore_CIMediaBinder* This);
    ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CMedia_CCore_CIMediaBinder* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CMedia_CCore_CIMediaBinder* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CMedia_CCore_CIMediaBinder* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CMedia_CCore_CIMediaBinder* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* add_Binding)(__x_ABI_CWindows_CMedia_CCore_CIMediaBinder* This,
        __FITypedEventHandler_2_Windows__CMedia__CCore__CMediaBinder_Windows__CMedia__CCore__CMediaBindingEventArgs* handler,
        EventRegistrationToken* token);
    HRESULT (STDMETHODCALLTYPE* remove_Binding)(__x_ABI_CWindows_CMedia_CCore_CIMediaBinder* This,
        EventRegistrationToken token);
    HRESULT (STDMETHODCALLTYPE* get_Token)(__x_ABI_CWindows_CMedia_CCore_CIMediaBinder* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* put_Token)(__x_ABI_CWindows_CMedia_CCore_CIMediaBinder* This,
        HSTRING value);
    HRESULT (STDMETHODCALLTYPE* get_Source)(__x_ABI_CWindows_CMedia_CCore_CIMediaBinder* This,
        __x_ABI_CWindows_CMedia_CCore_CIMediaSource2** value);

    END_INTERFACE
} __x_ABI_CWindows_CMedia_CCore_CIMediaBinderVtbl;

interface __x_ABI_CWindows_CMedia_CCore_CIMediaBinder
{
    CONST_VTBL struct __x_ABI_CWindows_CMedia_CCore_CIMediaBinderVtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __x_ABI_CWindows_CMedia_CCore_CIMediaBinder_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __x_ABI_CWindows_CMedia_CCore_CIMediaBinder_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __x_ABI_CWindows_CMedia_CCore_CIMediaBinder_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __x_ABI_CWindows_CMedia_CCore_CIMediaBinder_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __x_ABI_CWindows_CMedia_CCore_CIMediaBinder_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __x_ABI_CWindows_CMedia_CCore_CIMediaBinder_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __x_ABI_CWindows_CMedia_CCore_CIMediaBinder_add_Binding(This, handler, token) \
    ((This)->lpVtbl->add_Binding(This, handler, token))

#define __x_ABI_CWindows_CMedia_CCore_CIMediaBinder_remove_Binding(This, token) \
    ((This)->lpVtbl->remove_Binding(This, token))

#define __x_ABI_CWindows_CMedia_CCore_CIMediaBinder_get_Token(This, value) \
    ((This)->lpVtbl->get_Token(This, value))

#define __x_ABI_CWindows_CMedia_CCore_CIMediaBinder_put_Token(This, value) \
    ((This)->lpVtbl->put_Token(This, value))

#define __x_ABI_CWindows_CMedia_CCore_CIMediaBinder_get_Source(This, value) \
    ((This)->lpVtbl->get_Source(This, value))

#endif /* COBJMACROS */

EXTERN_C const IID IID___x_ABI_CWindows_CMedia_CCore_CIMediaBinder;
#endif /* !defined(____x_ABI_CWindows_CMedia_CCore_CIMediaBinder_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x20000

/*
 *
 * Interface Windows.Media.Core.IMediaBindingEventArgs
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 2.0
 *
 * Interface is a part of the implementation of type Windows.Media.Core.MediaBindingEventArgs
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x20000
#if !defined(____x_ABI_CWindows_CMedia_CCore_CIMediaBindingEventArgs_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CMedia_CCore_CIMediaBindingEventArgs_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Media_Core_IMediaBindingEventArgs[] = L"Windows.Media.Core.IMediaBindingEventArgs";
typedef struct __x_ABI_CWindows_CMedia_CCore_CIMediaBindingEventArgsVtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CMedia_CCore_CIMediaBindingEventArgs* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CMedia_CCore_CIMediaBindingEventArgs* This);
    ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CMedia_CCore_CIMediaBindingEventArgs* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CMedia_CCore_CIMediaBindingEventArgs* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CMedia_CCore_CIMediaBindingEventArgs* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CMedia_CCore_CIMediaBindingEventArgs* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* add_Canceled)(__x_ABI_CWindows_CMedia_CCore_CIMediaBindingEventArgs* This,
        __FITypedEventHandler_2_Windows__CMedia__CCore__CMediaBindingEventArgs_IInspectable* handler,
        EventRegistrationToken* token);
    HRESULT (STDMETHODCALLTYPE* remove_Canceled)(__x_ABI_CWindows_CMedia_CCore_CIMediaBindingEventArgs* This,
        EventRegistrationToken token);
    HRESULT (STDMETHODCALLTYPE* get_MediaBinder)(__x_ABI_CWindows_CMedia_CCore_CIMediaBindingEventArgs* This,
        __x_ABI_CWindows_CMedia_CCore_CIMediaBinder** value);
    HRESULT (STDMETHODCALLTYPE* GetDeferral)(__x_ABI_CWindows_CMedia_CCore_CIMediaBindingEventArgs* This,
        __x_ABI_CWindows_CFoundation_CIDeferral** deferral);
    HRESULT (STDMETHODCALLTYPE* SetUri)(__x_ABI_CWindows_CMedia_CCore_CIMediaBindingEventArgs* This,
        __x_ABI_CWindows_CFoundation_CIUriRuntimeClass* uri);
    HRESULT (STDMETHODCALLTYPE* SetStream)(__x_ABI_CWindows_CMedia_CCore_CIMediaBindingEventArgs* This,
        __x_ABI_CWindows_CStorage_CStreams_CIRandomAccessStream* stream,
        HSTRING contentType);
    HRESULT (STDMETHODCALLTYPE* SetStreamReference)(__x_ABI_CWindows_CMedia_CCore_CIMediaBindingEventArgs* This,
        __x_ABI_CWindows_CStorage_CStreams_CIRandomAccessStreamReference* stream,
        HSTRING contentType);

    END_INTERFACE
} __x_ABI_CWindows_CMedia_CCore_CIMediaBindingEventArgsVtbl;

interface __x_ABI_CWindows_CMedia_CCore_CIMediaBindingEventArgs
{
    CONST_VTBL struct __x_ABI_CWindows_CMedia_CCore_CIMediaBindingEventArgsVtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __x_ABI_CWindows_CMedia_CCore_CIMediaBindingEventArgs_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __x_ABI_CWindows_CMedia_CCore_CIMediaBindingEventArgs_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __x_ABI_CWindows_CMedia_CCore_CIMediaBindingEventArgs_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __x_ABI_CWindows_CMedia_CCore_CIMediaBindingEventArgs_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __x_ABI_CWindows_CMedia_CCore_CIMediaBindingEventArgs_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __x_ABI_CWindows_CMedia_CCore_CIMediaBindingEventArgs_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __x_ABI_CWindows_CMedia_CCore_CIMediaBindingEventArgs_add_Canceled(This, handler, token) \
    ((This)->lpVtbl->add_Canceled(This, handler, token))

#define __x_ABI_CWindows_CMedia_CCore_CIMediaBindingEventArgs_remove_Canceled(This, token) \
    ((This)->lpVtbl->remove_Canceled(This, token))

#define __x_ABI_CWindows_CMedia_CCore_CIMediaBindingEventArgs_get_MediaBinder(This, value) \
    ((This)->lpVtbl->get_MediaBinder(This, value))

#define __x_ABI_CWindows_CMedia_CCore_CIMediaBindingEventArgs_GetDeferral(This, deferral) \
    ((This)->lpVtbl->GetDeferral(This, deferral))

#define __x_ABI_CWindows_CMedia_CCore_CIMediaBindingEventArgs_SetUri(This, uri) \
    ((This)->lpVtbl->SetUri(This, uri))

#define __x_ABI_CWindows_CMedia_CCore_CIMediaBindingEventArgs_SetStream(This, stream, contentType) \
    ((This)->lpVtbl->SetStream(This, stream, contentType))

#define __x_ABI_CWindows_CMedia_CCore_CIMediaBindingEventArgs_SetStreamReference(This, stream, contentType) \
    ((This)->lpVtbl->SetStreamReference(This, stream, contentType))

#endif /* COBJMACROS */

EXTERN_C const IID IID___x_ABI_CWindows_CMedia_CCore_CIMediaBindingEventArgs;
#endif /* !defined(____x_ABI_CWindows_CMedia_CCore_CIMediaBindingEventArgs_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x20000

/*
 *
 * Interface Windows.Media.Core.IMediaBindingEventArgs2
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 4.0
 *
 * Interface is a part of the implementation of type Windows.Media.Core.MediaBindingEventArgs
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x40000
#if !defined(____x_ABI_CWindows_CMedia_CCore_CIMediaBindingEventArgs2_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CMedia_CCore_CIMediaBindingEventArgs2_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Media_Core_IMediaBindingEventArgs2[] = L"Windows.Media.Core.IMediaBindingEventArgs2";
typedef struct __x_ABI_CWindows_CMedia_CCore_CIMediaBindingEventArgs2Vtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CMedia_CCore_CIMediaBindingEventArgs2* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CMedia_CCore_CIMediaBindingEventArgs2* This);
    ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CMedia_CCore_CIMediaBindingEventArgs2* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CMedia_CCore_CIMediaBindingEventArgs2* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CMedia_CCore_CIMediaBindingEventArgs2* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CMedia_CCore_CIMediaBindingEventArgs2* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* SetAdaptiveMediaSource)(__x_ABI_CWindows_CMedia_CCore_CIMediaBindingEventArgs2* This,
        __x_ABI_CWindows_CMedia_CStreaming_CAdaptive_CIAdaptiveMediaSource* mediaSource);
    HRESULT (STDMETHODCALLTYPE* SetStorageFile)(__x_ABI_CWindows_CMedia_CCore_CIMediaBindingEventArgs2* This,
        __x_ABI_CWindows_CStorage_CIStorageFile* file);

    END_INTERFACE
} __x_ABI_CWindows_CMedia_CCore_CIMediaBindingEventArgs2Vtbl;

interface __x_ABI_CWindows_CMedia_CCore_CIMediaBindingEventArgs2
{
    CONST_VTBL struct __x_ABI_CWindows_CMedia_CCore_CIMediaBindingEventArgs2Vtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __x_ABI_CWindows_CMedia_CCore_CIMediaBindingEventArgs2_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __x_ABI_CWindows_CMedia_CCore_CIMediaBindingEventArgs2_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __x_ABI_CWindows_CMedia_CCore_CIMediaBindingEventArgs2_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __x_ABI_CWindows_CMedia_CCore_CIMediaBindingEventArgs2_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __x_ABI_CWindows_CMedia_CCore_CIMediaBindingEventArgs2_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __x_ABI_CWindows_CMedia_CCore_CIMediaBindingEventArgs2_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __x_ABI_CWindows_CMedia_CCore_CIMediaBindingEventArgs2_SetAdaptiveMediaSource(This, mediaSource) \
    ((This)->lpVtbl->SetAdaptiveMediaSource(This, mediaSource))

#define __x_ABI_CWindows_CMedia_CCore_CIMediaBindingEventArgs2_SetStorageFile(This, file) \
    ((This)->lpVtbl->SetStorageFile(This, file))

#endif /* COBJMACROS */

EXTERN_C const IID IID___x_ABI_CWindows_CMedia_CCore_CIMediaBindingEventArgs2;
#endif /* !defined(____x_ABI_CWindows_CMedia_CCore_CIMediaBindingEventArgs2_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x40000

/*
 *
 * Interface Windows.Media.Core.IMediaBindingEventArgs3
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 6.0
 *
 * Interface is a part of the implementation of type Windows.Media.Core.MediaBindingEventArgs
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x60000
#if !defined(____x_ABI_CWindows_CMedia_CCore_CIMediaBindingEventArgs3_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CMedia_CCore_CIMediaBindingEventArgs3_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Media_Core_IMediaBindingEventArgs3[] = L"Windows.Media.Core.IMediaBindingEventArgs3";
typedef struct __x_ABI_CWindows_CMedia_CCore_CIMediaBindingEventArgs3Vtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CMedia_CCore_CIMediaBindingEventArgs3* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CMedia_CCore_CIMediaBindingEventArgs3* This);
    ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CMedia_CCore_CIMediaBindingEventArgs3* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CMedia_CCore_CIMediaBindingEventArgs3* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CMedia_CCore_CIMediaBindingEventArgs3* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CMedia_CCore_CIMediaBindingEventArgs3* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* SetDownloadOperation)(__x_ABI_CWindows_CMedia_CCore_CIMediaBindingEventArgs3* This,
        __x_ABI_CWindows_CNetworking_CBackgroundTransfer_CIDownloadOperation* downloadOperation);

    END_INTERFACE
} __x_ABI_CWindows_CMedia_CCore_CIMediaBindingEventArgs3Vtbl;

interface __x_ABI_CWindows_CMedia_CCore_CIMediaBindingEventArgs3
{
    CONST_VTBL struct __x_ABI_CWindows_CMedia_CCore_CIMediaBindingEventArgs3Vtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __x_ABI_CWindows_CMedia_CCore_CIMediaBindingEventArgs3_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __x_ABI_CWindows_CMedia_CCore_CIMediaBindingEventArgs3_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __x_ABI_CWindows_CMedia_CCore_CIMediaBindingEventArgs3_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __x_ABI_CWindows_CMedia_CCore_CIMediaBindingEventArgs3_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __x_ABI_CWindows_CMedia_CCore_CIMediaBindingEventArgs3_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __x_ABI_CWindows_CMedia_CCore_CIMediaBindingEventArgs3_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __x_ABI_CWindows_CMedia_CCore_CIMediaBindingEventArgs3_SetDownloadOperation(This, downloadOperation) \
    ((This)->lpVtbl->SetDownloadOperation(This, downloadOperation))

#endif /* COBJMACROS */

EXTERN_C const IID IID___x_ABI_CWindows_CMedia_CCore_CIMediaBindingEventArgs3;
#endif /* !defined(____x_ABI_CWindows_CMedia_CCore_CIMediaBindingEventArgs3_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x60000

/*
 *
 * Interface Windows.Media.Core.IMediaCue
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____x_ABI_CWindows_CMedia_CCore_CIMediaCue_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CMedia_CCore_CIMediaCue_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Media_Core_IMediaCue[] = L"Windows.Media.Core.IMediaCue";
typedef struct __x_ABI_CWindows_CMedia_CCore_CIMediaCueVtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CMedia_CCore_CIMediaCue* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CMedia_CCore_CIMediaCue* This);
    ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CMedia_CCore_CIMediaCue* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CMedia_CCore_CIMediaCue* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CMedia_CCore_CIMediaCue* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CMedia_CCore_CIMediaCue* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* put_StartTime)(__x_ABI_CWindows_CMedia_CCore_CIMediaCue* This,
        struct __x_ABI_CWindows_CFoundation_CTimeSpan value);
    HRESULT (STDMETHODCALLTYPE* get_StartTime)(__x_ABI_CWindows_CMedia_CCore_CIMediaCue* This,
        struct __x_ABI_CWindows_CFoundation_CTimeSpan* value);
    HRESULT (STDMETHODCALLTYPE* put_Duration)(__x_ABI_CWindows_CMedia_CCore_CIMediaCue* This,
        struct __x_ABI_CWindows_CFoundation_CTimeSpan value);
    HRESULT (STDMETHODCALLTYPE* get_Duration)(__x_ABI_CWindows_CMedia_CCore_CIMediaCue* This,
        struct __x_ABI_CWindows_CFoundation_CTimeSpan* value);
    HRESULT (STDMETHODCALLTYPE* put_Id)(__x_ABI_CWindows_CMedia_CCore_CIMediaCue* This,
        HSTRING value);
    HRESULT (STDMETHODCALLTYPE* get_Id)(__x_ABI_CWindows_CMedia_CCore_CIMediaCue* This,
        HSTRING* value);

    END_INTERFACE
} __x_ABI_CWindows_CMedia_CCore_CIMediaCueVtbl;

interface __x_ABI_CWindows_CMedia_CCore_CIMediaCue
{
    CONST_VTBL struct __x_ABI_CWindows_CMedia_CCore_CIMediaCueVtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __x_ABI_CWindows_CMedia_CCore_CIMediaCue_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __x_ABI_CWindows_CMedia_CCore_CIMediaCue_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __x_ABI_CWindows_CMedia_CCore_CIMediaCue_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __x_ABI_CWindows_CMedia_CCore_CIMediaCue_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __x_ABI_CWindows_CMedia_CCore_CIMediaCue_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __x_ABI_CWindows_CMedia_CCore_CIMediaCue_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __x_ABI_CWindows_CMedia_CCore_CIMediaCue_put_StartTime(This, value) \
    ((This)->lpVtbl->put_StartTime(This, value))

#define __x_ABI_CWindows_CMedia_CCore_CIMediaCue_get_StartTime(This, value) \
    ((This)->lpVtbl->get_StartTime(This, value))

#define __x_ABI_CWindows_CMedia_CCore_CIMediaCue_put_Duration(This, value) \
    ((This)->lpVtbl->put_Duration(This, value))

#define __x_ABI_CWindows_CMedia_CCore_CIMediaCue_get_Duration(This, value) \
    ((This)->lpVtbl->get_Duration(This, value))

#define __x_ABI_CWindows_CMedia_CCore_CIMediaCue_put_Id(This, value) \
    ((This)->lpVtbl->put_Id(This, value))

#define __x_ABI_CWindows_CMedia_CCore_CIMediaCue_get_Id(This, value) \
    ((This)->lpVtbl->get_Id(This, value))

#endif /* COBJMACROS */

EXTERN_C const IID IID___x_ABI_CWindows_CMedia_CCore_CIMediaCue;
#endif /* !defined(____x_ABI_CWindows_CMedia_CCore_CIMediaCue_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Interface Windows.Media.Core.IMediaCueEventArgs
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Interface is a part of the implementation of type Windows.Media.Core.MediaCueEventArgs
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____x_ABI_CWindows_CMedia_CCore_CIMediaCueEventArgs_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CMedia_CCore_CIMediaCueEventArgs_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Media_Core_IMediaCueEventArgs[] = L"Windows.Media.Core.IMediaCueEventArgs";
typedef struct __x_ABI_CWindows_CMedia_CCore_CIMediaCueEventArgsVtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CMedia_CCore_CIMediaCueEventArgs* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CMedia_CCore_CIMediaCueEventArgs* This);
    ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CMedia_CCore_CIMediaCueEventArgs* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CMedia_CCore_CIMediaCueEventArgs* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CMedia_CCore_CIMediaCueEventArgs* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CMedia_CCore_CIMediaCueEventArgs* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* get_Cue)(__x_ABI_CWindows_CMedia_CCore_CIMediaCueEventArgs* This,
        __x_ABI_CWindows_CMedia_CCore_CIMediaCue** value);

    END_INTERFACE
} __x_ABI_CWindows_CMedia_CCore_CIMediaCueEventArgsVtbl;

interface __x_ABI_CWindows_CMedia_CCore_CIMediaCueEventArgs
{
    CONST_VTBL struct __x_ABI_CWindows_CMedia_CCore_CIMediaCueEventArgsVtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __x_ABI_CWindows_CMedia_CCore_CIMediaCueEventArgs_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __x_ABI_CWindows_CMedia_CCore_CIMediaCueEventArgs_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __x_ABI_CWindows_CMedia_CCore_CIMediaCueEventArgs_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __x_ABI_CWindows_CMedia_CCore_CIMediaCueEventArgs_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __x_ABI_CWindows_CMedia_CCore_CIMediaCueEventArgs_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __x_ABI_CWindows_CMedia_CCore_CIMediaCueEventArgs_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __x_ABI_CWindows_CMedia_CCore_CIMediaCueEventArgs_get_Cue(This, value) \
    ((This)->lpVtbl->get_Cue(This, value))

#endif /* COBJMACROS */

EXTERN_C const IID IID___x_ABI_CWindows_CMedia_CCore_CIMediaCueEventArgs;
#endif /* !defined(____x_ABI_CWindows_CMedia_CCore_CIMediaCueEventArgs_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Interface Windows.Media.Core.IMediaSource
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____x_ABI_CWindows_CMedia_CCore_CIMediaSource_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CMedia_CCore_CIMediaSource_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Media_Core_IMediaSource[] = L"Windows.Media.Core.IMediaSource";
typedef struct __x_ABI_CWindows_CMedia_CCore_CIMediaSourceVtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CMedia_CCore_CIMediaSource* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CMedia_CCore_CIMediaSource* This);
    ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CMedia_CCore_CIMediaSource* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CMedia_CCore_CIMediaSource* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CMedia_CCore_CIMediaSource* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CMedia_CCore_CIMediaSource* This,
        TrustLevel* trustLevel);

    END_INTERFACE
} __x_ABI_CWindows_CMedia_CCore_CIMediaSourceVtbl;

interface __x_ABI_CWindows_CMedia_CCore_CIMediaSource
{
    CONST_VTBL struct __x_ABI_CWindows_CMedia_CCore_CIMediaSourceVtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __x_ABI_CWindows_CMedia_CCore_CIMediaSource_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __x_ABI_CWindows_CMedia_CCore_CIMediaSource_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __x_ABI_CWindows_CMedia_CCore_CIMediaSource_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __x_ABI_CWindows_CMedia_CCore_CIMediaSource_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __x_ABI_CWindows_CMedia_CCore_CIMediaSource_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __x_ABI_CWindows_CMedia_CCore_CIMediaSource_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#endif /* COBJMACROS */

EXTERN_C const IID IID___x_ABI_CWindows_CMedia_CCore_CIMediaSource;
#endif /* !defined(____x_ABI_CWindows_CMedia_CCore_CIMediaSource_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Interface Windows.Media.Core.IMediaSource2
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Interface is a part of the implementation of type Windows.Media.Core.MediaSource
 *
 * Any object which implements this interface must also implement the following interfaces:
 *     Windows.Media.Playback.IMediaPlaybackSource
 *     Windows.Foundation.IClosable
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____x_ABI_CWindows_CMedia_CCore_CIMediaSource2_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CMedia_CCore_CIMediaSource2_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Media_Core_IMediaSource2[] = L"Windows.Media.Core.IMediaSource2";
typedef struct __x_ABI_CWindows_CMedia_CCore_CIMediaSource2Vtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CMedia_CCore_CIMediaSource2* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CMedia_CCore_CIMediaSource2* This);
    ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CMedia_CCore_CIMediaSource2* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CMedia_CCore_CIMediaSource2* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CMedia_CCore_CIMediaSource2* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CMedia_CCore_CIMediaSource2* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* add_OpenOperationCompleted)(__x_ABI_CWindows_CMedia_CCore_CIMediaSource2* This,
        __FITypedEventHandler_2_Windows__CMedia__CCore__CMediaSource_Windows__CMedia__CCore__CMediaSourceOpenOperationCompletedEventArgs* handler,
        EventRegistrationToken* token);
    HRESULT (STDMETHODCALLTYPE* remove_OpenOperationCompleted)(__x_ABI_CWindows_CMedia_CCore_CIMediaSource2* This,
        EventRegistrationToken token);
    HRESULT (STDMETHODCALLTYPE* get_CustomProperties)(__x_ABI_CWindows_CMedia_CCore_CIMediaSource2* This,
        __x_ABI_CWindows_CFoundation_CCollections_CIPropertySet** value);
    HRESULT (STDMETHODCALLTYPE* get_Duration)(__x_ABI_CWindows_CMedia_CCore_CIMediaSource2* This,
        __FIReference_1_Windows__CFoundation__CTimeSpan** value);
    HRESULT (STDMETHODCALLTYPE* get_IsOpen)(__x_ABI_CWindows_CMedia_CCore_CIMediaSource2* This,
        boolean* value);
    HRESULT (STDMETHODCALLTYPE* get_ExternalTimedTextSources)(__x_ABI_CWindows_CMedia_CCore_CIMediaSource2* This,
        __FIObservableVector_1_Windows__CMedia__CCore__CTimedTextSource** value);
    HRESULT (STDMETHODCALLTYPE* get_ExternalTimedMetadataTracks)(__x_ABI_CWindows_CMedia_CCore_CIMediaSource2* This,
        __FIObservableVector_1_Windows__CMedia__CCore__CTimedMetadataTrack** value);

    END_INTERFACE
} __x_ABI_CWindows_CMedia_CCore_CIMediaSource2Vtbl;

interface __x_ABI_CWindows_CMedia_CCore_CIMediaSource2
{
    CONST_VTBL struct __x_ABI_CWindows_CMedia_CCore_CIMediaSource2Vtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __x_ABI_CWindows_CMedia_CCore_CIMediaSource2_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __x_ABI_CWindows_CMedia_CCore_CIMediaSource2_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __x_ABI_CWindows_CMedia_CCore_CIMediaSource2_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __x_ABI_CWindows_CMedia_CCore_CIMediaSource2_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __x_ABI_CWindows_CMedia_CCore_CIMediaSource2_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __x_ABI_CWindows_CMedia_CCore_CIMediaSource2_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __x_ABI_CWindows_CMedia_CCore_CIMediaSource2_add_OpenOperationCompleted(This, handler, token) \
    ((This)->lpVtbl->add_OpenOperationCompleted(This, handler, token))

#define __x_ABI_CWindows_CMedia_CCore_CIMediaSource2_remove_OpenOperationCompleted(This, token) \
    ((This)->lpVtbl->remove_OpenOperationCompleted(This, token))

#define __x_ABI_CWindows_CMedia_CCore_CIMediaSource2_get_CustomProperties(This, value) \
    ((This)->lpVtbl->get_CustomProperties(This, value))

#define __x_ABI_CWindows_CMedia_CCore_CIMediaSource2_get_Duration(This, value) \
    ((This)->lpVtbl->get_Duration(This, value))

#define __x_ABI_CWindows_CMedia_CCore_CIMediaSource2_get_IsOpen(This, value) \
    ((This)->lpVtbl->get_IsOpen(This, value))

#define __x_ABI_CWindows_CMedia_CCore_CIMediaSource2_get_ExternalTimedTextSources(This, value) \
    ((This)->lpVtbl->get_ExternalTimedTextSources(This, value))

#define __x_ABI_CWindows_CMedia_CCore_CIMediaSource2_get_ExternalTimedMetadataTracks(This, value) \
    ((This)->lpVtbl->get_ExternalTimedMetadataTracks(This, value))

#endif /* COBJMACROS */

EXTERN_C const IID IID___x_ABI_CWindows_CMedia_CCore_CIMediaSource2;
#endif /* !defined(____x_ABI_CWindows_CMedia_CCore_CIMediaSource2_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Interface Windows.Media.Core.IMediaSource3
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 2.0
 *
 * Interface is a part of the implementation of type Windows.Media.Core.MediaSource
 *
 * Any object which implements this interface must also implement the following interfaces:
 *     Windows.Media.Core.IMediaSource2
 *     Windows.Media.Playback.IMediaPlaybackSource
 *     Windows.Foundation.IClosable
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x20000
#if !defined(____x_ABI_CWindows_CMedia_CCore_CIMediaSource3_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CMedia_CCore_CIMediaSource3_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Media_Core_IMediaSource3[] = L"Windows.Media.Core.IMediaSource3";
typedef struct __x_ABI_CWindows_CMedia_CCore_CIMediaSource3Vtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CMedia_CCore_CIMediaSource3* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CMedia_CCore_CIMediaSource3* This);
    ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CMedia_CCore_CIMediaSource3* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CMedia_CCore_CIMediaSource3* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CMedia_CCore_CIMediaSource3* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CMedia_CCore_CIMediaSource3* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* add_StateChanged)(__x_ABI_CWindows_CMedia_CCore_CIMediaSource3* This,
        __FITypedEventHandler_2_Windows__CMedia__CCore__CMediaSource_Windows__CMedia__CCore__CMediaSourceStateChangedEventArgs* handler,
        EventRegistrationToken* token);
    HRESULT (STDMETHODCALLTYPE* remove_StateChanged)(__x_ABI_CWindows_CMedia_CCore_CIMediaSource3* This,
        EventRegistrationToken token);
    HRESULT (STDMETHODCALLTYPE* get_State)(__x_ABI_CWindows_CMedia_CCore_CIMediaSource3* This,
        enum __x_ABI_CWindows_CMedia_CCore_CMediaSourceState* value);
    HRESULT (STDMETHODCALLTYPE* Reset)(__x_ABI_CWindows_CMedia_CCore_CIMediaSource3* This);

    END_INTERFACE
} __x_ABI_CWindows_CMedia_CCore_CIMediaSource3Vtbl;

interface __x_ABI_CWindows_CMedia_CCore_CIMediaSource3
{
    CONST_VTBL struct __x_ABI_CWindows_CMedia_CCore_CIMediaSource3Vtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __x_ABI_CWindows_CMedia_CCore_CIMediaSource3_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __x_ABI_CWindows_CMedia_CCore_CIMediaSource3_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __x_ABI_CWindows_CMedia_CCore_CIMediaSource3_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __x_ABI_CWindows_CMedia_CCore_CIMediaSource3_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __x_ABI_CWindows_CMedia_CCore_CIMediaSource3_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __x_ABI_CWindows_CMedia_CCore_CIMediaSource3_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __x_ABI_CWindows_CMedia_CCore_CIMediaSource3_add_StateChanged(This, handler, token) \
    ((This)->lpVtbl->add_StateChanged(This, handler, token))

#define __x_ABI_CWindows_CMedia_CCore_CIMediaSource3_remove_StateChanged(This, token) \
    ((This)->lpVtbl->remove_StateChanged(This, token))

#define __x_ABI_CWindows_CMedia_CCore_CIMediaSource3_get_State(This, value) \
    ((This)->lpVtbl->get_State(This, value))

#define __x_ABI_CWindows_CMedia_CCore_CIMediaSource3_Reset(This) \
    ((This)->lpVtbl->Reset(This))

#endif /* COBJMACROS */

EXTERN_C const IID IID___x_ABI_CWindows_CMedia_CCore_CIMediaSource3;
#endif /* !defined(____x_ABI_CWindows_CMedia_CCore_CIMediaSource3_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x20000

/*
 *
 * Interface Windows.Media.Core.IMediaSource4
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 4.0
 *
 * Interface is a part of the implementation of type Windows.Media.Core.MediaSource
 *
 * Any object which implements this interface must also implement the following interfaces:
 *     Windows.Media.Core.IMediaSource3
 *     Windows.Media.Core.IMediaSource2
 *     Windows.Media.Playback.IMediaPlaybackSource
 *     Windows.Foundation.IClosable
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x40000
#if !defined(____x_ABI_CWindows_CMedia_CCore_CIMediaSource4_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CMedia_CCore_CIMediaSource4_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Media_Core_IMediaSource4[] = L"Windows.Media.Core.IMediaSource4";
typedef struct __x_ABI_CWindows_CMedia_CCore_CIMediaSource4Vtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CMedia_CCore_CIMediaSource4* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CMedia_CCore_CIMediaSource4* This);
    ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CMedia_CCore_CIMediaSource4* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CMedia_CCore_CIMediaSource4* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CMedia_CCore_CIMediaSource4* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CMedia_CCore_CIMediaSource4* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* get_AdaptiveMediaSource)(__x_ABI_CWindows_CMedia_CCore_CIMediaSource4* This,
        __x_ABI_CWindows_CMedia_CStreaming_CAdaptive_CIAdaptiveMediaSource** value);
    HRESULT (STDMETHODCALLTYPE* get_MediaStreamSource)(__x_ABI_CWindows_CMedia_CCore_CIMediaSource4* This,
        __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSource** value);
    HRESULT (STDMETHODCALLTYPE* get_MseStreamSource)(__x_ABI_CWindows_CMedia_CCore_CIMediaSource4* This,
        __x_ABI_CWindows_CMedia_CCore_CIMseStreamSource** value);
    HRESULT (STDMETHODCALLTYPE* get_Uri)(__x_ABI_CWindows_CMedia_CCore_CIMediaSource4* This,
        __x_ABI_CWindows_CFoundation_CIUriRuntimeClass** value);
    HRESULT (STDMETHODCALLTYPE* OpenAsync)(__x_ABI_CWindows_CMedia_CCore_CIMediaSource4* This,
        __x_ABI_CWindows_CFoundation_CIAsyncAction** operation);

    END_INTERFACE
} __x_ABI_CWindows_CMedia_CCore_CIMediaSource4Vtbl;

interface __x_ABI_CWindows_CMedia_CCore_CIMediaSource4
{
    CONST_VTBL struct __x_ABI_CWindows_CMedia_CCore_CIMediaSource4Vtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __x_ABI_CWindows_CMedia_CCore_CIMediaSource4_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __x_ABI_CWindows_CMedia_CCore_CIMediaSource4_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __x_ABI_CWindows_CMedia_CCore_CIMediaSource4_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __x_ABI_CWindows_CMedia_CCore_CIMediaSource4_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __x_ABI_CWindows_CMedia_CCore_CIMediaSource4_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __x_ABI_CWindows_CMedia_CCore_CIMediaSource4_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __x_ABI_CWindows_CMedia_CCore_CIMediaSource4_get_AdaptiveMediaSource(This, value) \
    ((This)->lpVtbl->get_AdaptiveMediaSource(This, value))

#define __x_ABI_CWindows_CMedia_CCore_CIMediaSource4_get_MediaStreamSource(This, value) \
    ((This)->lpVtbl->get_MediaStreamSource(This, value))

#define __x_ABI_CWindows_CMedia_CCore_CIMediaSource4_get_MseStreamSource(This, value) \
    ((This)->lpVtbl->get_MseStreamSource(This, value))

#define __x_ABI_CWindows_CMedia_CCore_CIMediaSource4_get_Uri(This, value) \
    ((This)->lpVtbl->get_Uri(This, value))

#define __x_ABI_CWindows_CMedia_CCore_CIMediaSource4_OpenAsync(This, operation) \
    ((This)->lpVtbl->OpenAsync(This, operation))

#endif /* COBJMACROS */

EXTERN_C const IID IID___x_ABI_CWindows_CMedia_CCore_CIMediaSource4;
#endif /* !defined(____x_ABI_CWindows_CMedia_CCore_CIMediaSource4_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x40000

/*
 *
 * Interface Windows.Media.Core.IMediaSource5
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 6.0
 *
 * Interface is a part of the implementation of type Windows.Media.Core.MediaSource
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x60000
#if !defined(____x_ABI_CWindows_CMedia_CCore_CIMediaSource5_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CMedia_CCore_CIMediaSource5_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Media_Core_IMediaSource5[] = L"Windows.Media.Core.IMediaSource5";
typedef struct __x_ABI_CWindows_CMedia_CCore_CIMediaSource5Vtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CMedia_CCore_CIMediaSource5* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CMedia_CCore_CIMediaSource5* This);
    ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CMedia_CCore_CIMediaSource5* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CMedia_CCore_CIMediaSource5* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CMedia_CCore_CIMediaSource5* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CMedia_CCore_CIMediaSource5* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* get_DownloadOperation)(__x_ABI_CWindows_CMedia_CCore_CIMediaSource5* This,
        __x_ABI_CWindows_CNetworking_CBackgroundTransfer_CIDownloadOperation** value);

    END_INTERFACE
} __x_ABI_CWindows_CMedia_CCore_CIMediaSource5Vtbl;

interface __x_ABI_CWindows_CMedia_CCore_CIMediaSource5
{
    CONST_VTBL struct __x_ABI_CWindows_CMedia_CCore_CIMediaSource5Vtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __x_ABI_CWindows_CMedia_CCore_CIMediaSource5_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __x_ABI_CWindows_CMedia_CCore_CIMediaSource5_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __x_ABI_CWindows_CMedia_CCore_CIMediaSource5_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __x_ABI_CWindows_CMedia_CCore_CIMediaSource5_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __x_ABI_CWindows_CMedia_CCore_CIMediaSource5_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __x_ABI_CWindows_CMedia_CCore_CIMediaSource5_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __x_ABI_CWindows_CMedia_CCore_CIMediaSource5_get_DownloadOperation(This, value) \
    ((This)->lpVtbl->get_DownloadOperation(This, value))

#endif /* COBJMACROS */

EXTERN_C const IID IID___x_ABI_CWindows_CMedia_CCore_CIMediaSource5;
#endif /* !defined(____x_ABI_CWindows_CMedia_CCore_CIMediaSource5_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x60000

/*
 *
 * Interface Windows.Media.Core.IMediaSourceAppServiceConnection
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 5.0
 *
 * Interface is a part of the implementation of type Windows.Media.Core.MediaSourceAppServiceConnection
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x50000
#if !defined(____x_ABI_CWindows_CMedia_CCore_CIMediaSourceAppServiceConnection_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CMedia_CCore_CIMediaSourceAppServiceConnection_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Media_Core_IMediaSourceAppServiceConnection[] = L"Windows.Media.Core.IMediaSourceAppServiceConnection";
typedef struct __x_ABI_CWindows_CMedia_CCore_CIMediaSourceAppServiceConnectionVtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CMedia_CCore_CIMediaSourceAppServiceConnection* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CMedia_CCore_CIMediaSourceAppServiceConnection* This);
    ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CMedia_CCore_CIMediaSourceAppServiceConnection* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CMedia_CCore_CIMediaSourceAppServiceConnection* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CMedia_CCore_CIMediaSourceAppServiceConnection* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CMedia_CCore_CIMediaSourceAppServiceConnection* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* add_InitializeMediaStreamSourceRequested)(__x_ABI_CWindows_CMedia_CCore_CIMediaSourceAppServiceConnection* This,
        __FITypedEventHandler_2_Windows__CMedia__CCore__CMediaSourceAppServiceConnection_Windows__CMedia__CCore__CInitializeMediaStreamSourceRequestedEventArgs* handler,
        EventRegistrationToken* token);
    HRESULT (STDMETHODCALLTYPE* remove_InitializeMediaStreamSourceRequested)(__x_ABI_CWindows_CMedia_CCore_CIMediaSourceAppServiceConnection* This,
        EventRegistrationToken token);
    HRESULT (STDMETHODCALLTYPE* Start)(__x_ABI_CWindows_CMedia_CCore_CIMediaSourceAppServiceConnection* This);

    END_INTERFACE
} __x_ABI_CWindows_CMedia_CCore_CIMediaSourceAppServiceConnectionVtbl;

interface __x_ABI_CWindows_CMedia_CCore_CIMediaSourceAppServiceConnection
{
    CONST_VTBL struct __x_ABI_CWindows_CMedia_CCore_CIMediaSourceAppServiceConnectionVtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __x_ABI_CWindows_CMedia_CCore_CIMediaSourceAppServiceConnection_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __x_ABI_CWindows_CMedia_CCore_CIMediaSourceAppServiceConnection_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __x_ABI_CWindows_CMedia_CCore_CIMediaSourceAppServiceConnection_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __x_ABI_CWindows_CMedia_CCore_CIMediaSourceAppServiceConnection_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __x_ABI_CWindows_CMedia_CCore_CIMediaSourceAppServiceConnection_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __x_ABI_CWindows_CMedia_CCore_CIMediaSourceAppServiceConnection_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __x_ABI_CWindows_CMedia_CCore_CIMediaSourceAppServiceConnection_add_InitializeMediaStreamSourceRequested(This, handler, token) \
    ((This)->lpVtbl->add_InitializeMediaStreamSourceRequested(This, handler, token))

#define __x_ABI_CWindows_CMedia_CCore_CIMediaSourceAppServiceConnection_remove_InitializeMediaStreamSourceRequested(This, token) \
    ((This)->lpVtbl->remove_InitializeMediaStreamSourceRequested(This, token))

#define __x_ABI_CWindows_CMedia_CCore_CIMediaSourceAppServiceConnection_Start(This) \
    ((This)->lpVtbl->Start(This))

#endif /* COBJMACROS */

EXTERN_C const IID IID___x_ABI_CWindows_CMedia_CCore_CIMediaSourceAppServiceConnection;
#endif /* !defined(____x_ABI_CWindows_CMedia_CCore_CIMediaSourceAppServiceConnection_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x50000

/*
 *
 * Interface Windows.Media.Core.IMediaSourceAppServiceConnectionFactory
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 5.0
 *
 * Interface is a part of the implementation of type Windows.Media.Core.MediaSourceAppServiceConnection
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x50000
#if !defined(____x_ABI_CWindows_CMedia_CCore_CIMediaSourceAppServiceConnectionFactory_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CMedia_CCore_CIMediaSourceAppServiceConnectionFactory_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Media_Core_IMediaSourceAppServiceConnectionFactory[] = L"Windows.Media.Core.IMediaSourceAppServiceConnectionFactory";
typedef struct __x_ABI_CWindows_CMedia_CCore_CIMediaSourceAppServiceConnectionFactoryVtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CMedia_CCore_CIMediaSourceAppServiceConnectionFactory* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CMedia_CCore_CIMediaSourceAppServiceConnectionFactory* This);
    ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CMedia_CCore_CIMediaSourceAppServiceConnectionFactory* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CMedia_CCore_CIMediaSourceAppServiceConnectionFactory* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CMedia_CCore_CIMediaSourceAppServiceConnectionFactory* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CMedia_CCore_CIMediaSourceAppServiceConnectionFactory* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* Create)(__x_ABI_CWindows_CMedia_CCore_CIMediaSourceAppServiceConnectionFactory* This,
        __x_ABI_CWindows_CApplicationModel_CAppService_CIAppServiceConnection* appServiceConnection,
        __x_ABI_CWindows_CMedia_CCore_CIMediaSourceAppServiceConnection** result);

    END_INTERFACE
} __x_ABI_CWindows_CMedia_CCore_CIMediaSourceAppServiceConnectionFactoryVtbl;

interface __x_ABI_CWindows_CMedia_CCore_CIMediaSourceAppServiceConnectionFactory
{
    CONST_VTBL struct __x_ABI_CWindows_CMedia_CCore_CIMediaSourceAppServiceConnectionFactoryVtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __x_ABI_CWindows_CMedia_CCore_CIMediaSourceAppServiceConnectionFactory_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __x_ABI_CWindows_CMedia_CCore_CIMediaSourceAppServiceConnectionFactory_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __x_ABI_CWindows_CMedia_CCore_CIMediaSourceAppServiceConnectionFactory_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __x_ABI_CWindows_CMedia_CCore_CIMediaSourceAppServiceConnectionFactory_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __x_ABI_CWindows_CMedia_CCore_CIMediaSourceAppServiceConnectionFactory_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __x_ABI_CWindows_CMedia_CCore_CIMediaSourceAppServiceConnectionFactory_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __x_ABI_CWindows_CMedia_CCore_CIMediaSourceAppServiceConnectionFactory_Create(This, appServiceConnection, result) \
    ((This)->lpVtbl->Create(This, appServiceConnection, result))

#endif /* COBJMACROS */

EXTERN_C const IID IID___x_ABI_CWindows_CMedia_CCore_CIMediaSourceAppServiceConnectionFactory;
#endif /* !defined(____x_ABI_CWindows_CMedia_CCore_CIMediaSourceAppServiceConnectionFactory_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x50000

/*
 *
 * Interface Windows.Media.Core.IMediaSourceError
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Interface is a part of the implementation of type Windows.Media.Core.MediaSourceError
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____x_ABI_CWindows_CMedia_CCore_CIMediaSourceError_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CMedia_CCore_CIMediaSourceError_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Media_Core_IMediaSourceError[] = L"Windows.Media.Core.IMediaSourceError";
typedef struct __x_ABI_CWindows_CMedia_CCore_CIMediaSourceErrorVtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CMedia_CCore_CIMediaSourceError* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CMedia_CCore_CIMediaSourceError* This);
    ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CMedia_CCore_CIMediaSourceError* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CMedia_CCore_CIMediaSourceError* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CMedia_CCore_CIMediaSourceError* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CMedia_CCore_CIMediaSourceError* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* get_ExtendedError)(__x_ABI_CWindows_CMedia_CCore_CIMediaSourceError* This,
        HRESULT* value);

    END_INTERFACE
} __x_ABI_CWindows_CMedia_CCore_CIMediaSourceErrorVtbl;

interface __x_ABI_CWindows_CMedia_CCore_CIMediaSourceError
{
    CONST_VTBL struct __x_ABI_CWindows_CMedia_CCore_CIMediaSourceErrorVtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __x_ABI_CWindows_CMedia_CCore_CIMediaSourceError_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __x_ABI_CWindows_CMedia_CCore_CIMediaSourceError_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __x_ABI_CWindows_CMedia_CCore_CIMediaSourceError_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __x_ABI_CWindows_CMedia_CCore_CIMediaSourceError_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __x_ABI_CWindows_CMedia_CCore_CIMediaSourceError_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __x_ABI_CWindows_CMedia_CCore_CIMediaSourceError_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __x_ABI_CWindows_CMedia_CCore_CIMediaSourceError_get_ExtendedError(This, value) \
    ((This)->lpVtbl->get_ExtendedError(This, value))

#endif /* COBJMACROS */

EXTERN_C const IID IID___x_ABI_CWindows_CMedia_CCore_CIMediaSourceError;
#endif /* !defined(____x_ABI_CWindows_CMedia_CCore_CIMediaSourceError_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Interface Windows.Media.Core.IMediaSourceOpenOperationCompletedEventArgs
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Interface is a part of the implementation of type Windows.Media.Core.MediaSourceOpenOperationCompletedEventArgs
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____x_ABI_CWindows_CMedia_CCore_CIMediaSourceOpenOperationCompletedEventArgs_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CMedia_CCore_CIMediaSourceOpenOperationCompletedEventArgs_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Media_Core_IMediaSourceOpenOperationCompletedEventArgs[] = L"Windows.Media.Core.IMediaSourceOpenOperationCompletedEventArgs";
typedef struct __x_ABI_CWindows_CMedia_CCore_CIMediaSourceOpenOperationCompletedEventArgsVtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CMedia_CCore_CIMediaSourceOpenOperationCompletedEventArgs* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CMedia_CCore_CIMediaSourceOpenOperationCompletedEventArgs* This);
    ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CMedia_CCore_CIMediaSourceOpenOperationCompletedEventArgs* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CMedia_CCore_CIMediaSourceOpenOperationCompletedEventArgs* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CMedia_CCore_CIMediaSourceOpenOperationCompletedEventArgs* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CMedia_CCore_CIMediaSourceOpenOperationCompletedEventArgs* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* get_Error)(__x_ABI_CWindows_CMedia_CCore_CIMediaSourceOpenOperationCompletedEventArgs* This,
        __x_ABI_CWindows_CMedia_CCore_CIMediaSourceError** value);

    END_INTERFACE
} __x_ABI_CWindows_CMedia_CCore_CIMediaSourceOpenOperationCompletedEventArgsVtbl;

interface __x_ABI_CWindows_CMedia_CCore_CIMediaSourceOpenOperationCompletedEventArgs
{
    CONST_VTBL struct __x_ABI_CWindows_CMedia_CCore_CIMediaSourceOpenOperationCompletedEventArgsVtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __x_ABI_CWindows_CMedia_CCore_CIMediaSourceOpenOperationCompletedEventArgs_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __x_ABI_CWindows_CMedia_CCore_CIMediaSourceOpenOperationCompletedEventArgs_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __x_ABI_CWindows_CMedia_CCore_CIMediaSourceOpenOperationCompletedEventArgs_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __x_ABI_CWindows_CMedia_CCore_CIMediaSourceOpenOperationCompletedEventArgs_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __x_ABI_CWindows_CMedia_CCore_CIMediaSourceOpenOperationCompletedEventArgs_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __x_ABI_CWindows_CMedia_CCore_CIMediaSourceOpenOperationCompletedEventArgs_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __x_ABI_CWindows_CMedia_CCore_CIMediaSourceOpenOperationCompletedEventArgs_get_Error(This, value) \
    ((This)->lpVtbl->get_Error(This, value))

#endif /* COBJMACROS */

EXTERN_C const IID IID___x_ABI_CWindows_CMedia_CCore_CIMediaSourceOpenOperationCompletedEventArgs;
#endif /* !defined(____x_ABI_CWindows_CMedia_CCore_CIMediaSourceOpenOperationCompletedEventArgs_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Interface Windows.Media.Core.IMediaSourceStateChangedEventArgs
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 2.0
 *
 * Interface is a part of the implementation of type Windows.Media.Core.MediaSourceStateChangedEventArgs
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x20000
#if !defined(____x_ABI_CWindows_CMedia_CCore_CIMediaSourceStateChangedEventArgs_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CMedia_CCore_CIMediaSourceStateChangedEventArgs_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Media_Core_IMediaSourceStateChangedEventArgs[] = L"Windows.Media.Core.IMediaSourceStateChangedEventArgs";
typedef struct __x_ABI_CWindows_CMedia_CCore_CIMediaSourceStateChangedEventArgsVtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CMedia_CCore_CIMediaSourceStateChangedEventArgs* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CMedia_CCore_CIMediaSourceStateChangedEventArgs* This);
    ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CMedia_CCore_CIMediaSourceStateChangedEventArgs* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CMedia_CCore_CIMediaSourceStateChangedEventArgs* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CMedia_CCore_CIMediaSourceStateChangedEventArgs* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CMedia_CCore_CIMediaSourceStateChangedEventArgs* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* get_OldState)(__x_ABI_CWindows_CMedia_CCore_CIMediaSourceStateChangedEventArgs* This,
        enum __x_ABI_CWindows_CMedia_CCore_CMediaSourceState* value);
    HRESULT (STDMETHODCALLTYPE* get_NewState)(__x_ABI_CWindows_CMedia_CCore_CIMediaSourceStateChangedEventArgs* This,
        enum __x_ABI_CWindows_CMedia_CCore_CMediaSourceState* value);

    END_INTERFACE
} __x_ABI_CWindows_CMedia_CCore_CIMediaSourceStateChangedEventArgsVtbl;

interface __x_ABI_CWindows_CMedia_CCore_CIMediaSourceStateChangedEventArgs
{
    CONST_VTBL struct __x_ABI_CWindows_CMedia_CCore_CIMediaSourceStateChangedEventArgsVtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __x_ABI_CWindows_CMedia_CCore_CIMediaSourceStateChangedEventArgs_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __x_ABI_CWindows_CMedia_CCore_CIMediaSourceStateChangedEventArgs_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __x_ABI_CWindows_CMedia_CCore_CIMediaSourceStateChangedEventArgs_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __x_ABI_CWindows_CMedia_CCore_CIMediaSourceStateChangedEventArgs_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __x_ABI_CWindows_CMedia_CCore_CIMediaSourceStateChangedEventArgs_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __x_ABI_CWindows_CMedia_CCore_CIMediaSourceStateChangedEventArgs_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __x_ABI_CWindows_CMedia_CCore_CIMediaSourceStateChangedEventArgs_get_OldState(This, value) \
    ((This)->lpVtbl->get_OldState(This, value))

#define __x_ABI_CWindows_CMedia_CCore_CIMediaSourceStateChangedEventArgs_get_NewState(This, value) \
    ((This)->lpVtbl->get_NewState(This, value))

#endif /* COBJMACROS */

EXTERN_C const IID IID___x_ABI_CWindows_CMedia_CCore_CIMediaSourceStateChangedEventArgs;
#endif /* !defined(____x_ABI_CWindows_CMedia_CCore_CIMediaSourceStateChangedEventArgs_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x20000

/*
 *
 * Interface Windows.Media.Core.IMediaSourceStatics
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Interface is a part of the implementation of type Windows.Media.Core.MediaSource
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____x_ABI_CWindows_CMedia_CCore_CIMediaSourceStatics_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CMedia_CCore_CIMediaSourceStatics_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Media_Core_IMediaSourceStatics[] = L"Windows.Media.Core.IMediaSourceStatics";
typedef struct __x_ABI_CWindows_CMedia_CCore_CIMediaSourceStaticsVtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CMedia_CCore_CIMediaSourceStatics* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CMedia_CCore_CIMediaSourceStatics* This);
    ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CMedia_CCore_CIMediaSourceStatics* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CMedia_CCore_CIMediaSourceStatics* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CMedia_CCore_CIMediaSourceStatics* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CMedia_CCore_CIMediaSourceStatics* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* CreateFromAdaptiveMediaSource)(__x_ABI_CWindows_CMedia_CCore_CIMediaSourceStatics* This,
        __x_ABI_CWindows_CMedia_CStreaming_CAdaptive_CIAdaptiveMediaSource* mediaSource,
        __x_ABI_CWindows_CMedia_CCore_CIMediaSource2** result);
    HRESULT (STDMETHODCALLTYPE* CreateFromMediaStreamSource)(__x_ABI_CWindows_CMedia_CCore_CIMediaSourceStatics* This,
        __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSource* mediaSource,
        __x_ABI_CWindows_CMedia_CCore_CIMediaSource2** result);
    HRESULT (STDMETHODCALLTYPE* CreateFromMseStreamSource)(__x_ABI_CWindows_CMedia_CCore_CIMediaSourceStatics* This,
        __x_ABI_CWindows_CMedia_CCore_CIMseStreamSource* mediaSource,
        __x_ABI_CWindows_CMedia_CCore_CIMediaSource2** result);
    HRESULT (STDMETHODCALLTYPE* CreateFromIMediaSource)(__x_ABI_CWindows_CMedia_CCore_CIMediaSourceStatics* This,
        __x_ABI_CWindows_CMedia_CCore_CIMediaSource* mediaSource,
        __x_ABI_CWindows_CMedia_CCore_CIMediaSource2** result);
    HRESULT (STDMETHODCALLTYPE* CreateFromStorageFile)(__x_ABI_CWindows_CMedia_CCore_CIMediaSourceStatics* This,
        __x_ABI_CWindows_CStorage_CIStorageFile* file,
        __x_ABI_CWindows_CMedia_CCore_CIMediaSource2** result);
    HRESULT (STDMETHODCALLTYPE* CreateFromStream)(__x_ABI_CWindows_CMedia_CCore_CIMediaSourceStatics* This,
        __x_ABI_CWindows_CStorage_CStreams_CIRandomAccessStream* stream,
        HSTRING contentType,
        __x_ABI_CWindows_CMedia_CCore_CIMediaSource2** result);
    HRESULT (STDMETHODCALLTYPE* CreateFromStreamReference)(__x_ABI_CWindows_CMedia_CCore_CIMediaSourceStatics* This,
        __x_ABI_CWindows_CStorage_CStreams_CIRandomAccessStreamReference* stream,
        HSTRING contentType,
        __x_ABI_CWindows_CMedia_CCore_CIMediaSource2** result);
    HRESULT (STDMETHODCALLTYPE* CreateFromUri)(__x_ABI_CWindows_CMedia_CCore_CIMediaSourceStatics* This,
        __x_ABI_CWindows_CFoundation_CIUriRuntimeClass* uri,
        __x_ABI_CWindows_CMedia_CCore_CIMediaSource2** result);

    END_INTERFACE
} __x_ABI_CWindows_CMedia_CCore_CIMediaSourceStaticsVtbl;

interface __x_ABI_CWindows_CMedia_CCore_CIMediaSourceStatics
{
    CONST_VTBL struct __x_ABI_CWindows_CMedia_CCore_CIMediaSourceStaticsVtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __x_ABI_CWindows_CMedia_CCore_CIMediaSourceStatics_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __x_ABI_CWindows_CMedia_CCore_CIMediaSourceStatics_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __x_ABI_CWindows_CMedia_CCore_CIMediaSourceStatics_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __x_ABI_CWindows_CMedia_CCore_CIMediaSourceStatics_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __x_ABI_CWindows_CMedia_CCore_CIMediaSourceStatics_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __x_ABI_CWindows_CMedia_CCore_CIMediaSourceStatics_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __x_ABI_CWindows_CMedia_CCore_CIMediaSourceStatics_CreateFromAdaptiveMediaSource(This, mediaSource, result) \
    ((This)->lpVtbl->CreateFromAdaptiveMediaSource(This, mediaSource, result))

#define __x_ABI_CWindows_CMedia_CCore_CIMediaSourceStatics_CreateFromMediaStreamSource(This, mediaSource, result) \
    ((This)->lpVtbl->CreateFromMediaStreamSource(This, mediaSource, result))

#define __x_ABI_CWindows_CMedia_CCore_CIMediaSourceStatics_CreateFromMseStreamSource(This, mediaSource, result) \
    ((This)->lpVtbl->CreateFromMseStreamSource(This, mediaSource, result))

#define __x_ABI_CWindows_CMedia_CCore_CIMediaSourceStatics_CreateFromIMediaSource(This, mediaSource, result) \
    ((This)->lpVtbl->CreateFromIMediaSource(This, mediaSource, result))

#define __x_ABI_CWindows_CMedia_CCore_CIMediaSourceStatics_CreateFromStorageFile(This, file, result) \
    ((This)->lpVtbl->CreateFromStorageFile(This, file, result))

#define __x_ABI_CWindows_CMedia_CCore_CIMediaSourceStatics_CreateFromStream(This, stream, contentType, result) \
    ((This)->lpVtbl->CreateFromStream(This, stream, contentType, result))

#define __x_ABI_CWindows_CMedia_CCore_CIMediaSourceStatics_CreateFromStreamReference(This, stream, contentType, result) \
    ((This)->lpVtbl->CreateFromStreamReference(This, stream, contentType, result))

#define __x_ABI_CWindows_CMedia_CCore_CIMediaSourceStatics_CreateFromUri(This, uri, result) \
    ((This)->lpVtbl->CreateFromUri(This, uri, result))

#endif /* COBJMACROS */

EXTERN_C const IID IID___x_ABI_CWindows_CMedia_CCore_CIMediaSourceStatics;
#endif /* !defined(____x_ABI_CWindows_CMedia_CCore_CIMediaSourceStatics_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Interface Windows.Media.Core.IMediaSourceStatics2
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 2.0
 *
 * Interface is a part of the implementation of type Windows.Media.Core.MediaSource
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x20000
#if !defined(____x_ABI_CWindows_CMedia_CCore_CIMediaSourceStatics2_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CMedia_CCore_CIMediaSourceStatics2_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Media_Core_IMediaSourceStatics2[] = L"Windows.Media.Core.IMediaSourceStatics2";
typedef struct __x_ABI_CWindows_CMedia_CCore_CIMediaSourceStatics2Vtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CMedia_CCore_CIMediaSourceStatics2* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CMedia_CCore_CIMediaSourceStatics2* This);
    ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CMedia_CCore_CIMediaSourceStatics2* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CMedia_CCore_CIMediaSourceStatics2* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CMedia_CCore_CIMediaSourceStatics2* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CMedia_CCore_CIMediaSourceStatics2* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* CreateFromMediaBinder)(__x_ABI_CWindows_CMedia_CCore_CIMediaSourceStatics2* This,
        __x_ABI_CWindows_CMedia_CCore_CIMediaBinder* binder,
        __x_ABI_CWindows_CMedia_CCore_CIMediaSource2** result);

    END_INTERFACE
} __x_ABI_CWindows_CMedia_CCore_CIMediaSourceStatics2Vtbl;

interface __x_ABI_CWindows_CMedia_CCore_CIMediaSourceStatics2
{
    CONST_VTBL struct __x_ABI_CWindows_CMedia_CCore_CIMediaSourceStatics2Vtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __x_ABI_CWindows_CMedia_CCore_CIMediaSourceStatics2_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __x_ABI_CWindows_CMedia_CCore_CIMediaSourceStatics2_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __x_ABI_CWindows_CMedia_CCore_CIMediaSourceStatics2_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __x_ABI_CWindows_CMedia_CCore_CIMediaSourceStatics2_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __x_ABI_CWindows_CMedia_CCore_CIMediaSourceStatics2_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __x_ABI_CWindows_CMedia_CCore_CIMediaSourceStatics2_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __x_ABI_CWindows_CMedia_CCore_CIMediaSourceStatics2_CreateFromMediaBinder(This, binder, result) \
    ((This)->lpVtbl->CreateFromMediaBinder(This, binder, result))

#endif /* COBJMACROS */

EXTERN_C const IID IID___x_ABI_CWindows_CMedia_CCore_CIMediaSourceStatics2;
#endif /* !defined(____x_ABI_CWindows_CMedia_CCore_CIMediaSourceStatics2_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x20000

/*
 *
 * Interface Windows.Media.Core.IMediaSourceStatics3
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 5.0
 *
 * Interface is a part of the implementation of type Windows.Media.Core.MediaSource
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x50000
#if !defined(____x_ABI_CWindows_CMedia_CCore_CIMediaSourceStatics3_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CMedia_CCore_CIMediaSourceStatics3_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Media_Core_IMediaSourceStatics3[] = L"Windows.Media.Core.IMediaSourceStatics3";
typedef struct __x_ABI_CWindows_CMedia_CCore_CIMediaSourceStatics3Vtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CMedia_CCore_CIMediaSourceStatics3* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CMedia_CCore_CIMediaSourceStatics3* This);
    ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CMedia_CCore_CIMediaSourceStatics3* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CMedia_CCore_CIMediaSourceStatics3* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CMedia_CCore_CIMediaSourceStatics3* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CMedia_CCore_CIMediaSourceStatics3* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* CreateFromMediaFrameSource)(__x_ABI_CWindows_CMedia_CCore_CIMediaSourceStatics3* This,
        __x_ABI_CWindows_CMedia_CCapture_CFrames_CIMediaFrameSource* frameSource,
        __x_ABI_CWindows_CMedia_CCore_CIMediaSource2** result);

    END_INTERFACE
} __x_ABI_CWindows_CMedia_CCore_CIMediaSourceStatics3Vtbl;

interface __x_ABI_CWindows_CMedia_CCore_CIMediaSourceStatics3
{
    CONST_VTBL struct __x_ABI_CWindows_CMedia_CCore_CIMediaSourceStatics3Vtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __x_ABI_CWindows_CMedia_CCore_CIMediaSourceStatics3_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __x_ABI_CWindows_CMedia_CCore_CIMediaSourceStatics3_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __x_ABI_CWindows_CMedia_CCore_CIMediaSourceStatics3_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __x_ABI_CWindows_CMedia_CCore_CIMediaSourceStatics3_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __x_ABI_CWindows_CMedia_CCore_CIMediaSourceStatics3_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __x_ABI_CWindows_CMedia_CCore_CIMediaSourceStatics3_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __x_ABI_CWindows_CMedia_CCore_CIMediaSourceStatics3_CreateFromMediaFrameSource(This, frameSource, result) \
    ((This)->lpVtbl->CreateFromMediaFrameSource(This, frameSource, result))

#endif /* COBJMACROS */

EXTERN_C const IID IID___x_ABI_CWindows_CMedia_CCore_CIMediaSourceStatics3;
#endif /* !defined(____x_ABI_CWindows_CMedia_CCore_CIMediaSourceStatics3_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x50000

/*
 *
 * Interface Windows.Media.Core.IMediaSourceStatics4
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 6.0
 *
 * Interface is a part of the implementation of type Windows.Media.Core.MediaSource
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x60000
#if !defined(____x_ABI_CWindows_CMedia_CCore_CIMediaSourceStatics4_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CMedia_CCore_CIMediaSourceStatics4_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Media_Core_IMediaSourceStatics4[] = L"Windows.Media.Core.IMediaSourceStatics4";
typedef struct __x_ABI_CWindows_CMedia_CCore_CIMediaSourceStatics4Vtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CMedia_CCore_CIMediaSourceStatics4* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CMedia_CCore_CIMediaSourceStatics4* This);
    ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CMedia_CCore_CIMediaSourceStatics4* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CMedia_CCore_CIMediaSourceStatics4* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CMedia_CCore_CIMediaSourceStatics4* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CMedia_CCore_CIMediaSourceStatics4* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* CreateFromDownloadOperation)(__x_ABI_CWindows_CMedia_CCore_CIMediaSourceStatics4* This,
        __x_ABI_CWindows_CNetworking_CBackgroundTransfer_CIDownloadOperation* downloadOperation,
        __x_ABI_CWindows_CMedia_CCore_CIMediaSource2** result);

    END_INTERFACE
} __x_ABI_CWindows_CMedia_CCore_CIMediaSourceStatics4Vtbl;

interface __x_ABI_CWindows_CMedia_CCore_CIMediaSourceStatics4
{
    CONST_VTBL struct __x_ABI_CWindows_CMedia_CCore_CIMediaSourceStatics4Vtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __x_ABI_CWindows_CMedia_CCore_CIMediaSourceStatics4_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __x_ABI_CWindows_CMedia_CCore_CIMediaSourceStatics4_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __x_ABI_CWindows_CMedia_CCore_CIMediaSourceStatics4_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __x_ABI_CWindows_CMedia_CCore_CIMediaSourceStatics4_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __x_ABI_CWindows_CMedia_CCore_CIMediaSourceStatics4_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __x_ABI_CWindows_CMedia_CCore_CIMediaSourceStatics4_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __x_ABI_CWindows_CMedia_CCore_CIMediaSourceStatics4_CreateFromDownloadOperation(This, downloadOperation, result) \
    ((This)->lpVtbl->CreateFromDownloadOperation(This, downloadOperation, result))

#endif /* COBJMACROS */

EXTERN_C const IID IID___x_ABI_CWindows_CMedia_CCore_CIMediaSourceStatics4;
#endif /* !defined(____x_ABI_CWindows_CMedia_CCore_CIMediaSourceStatics4_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x60000

/*
 *
 * Interface Windows.Media.Core.IMediaStreamDescriptor
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____x_ABI_CWindows_CMedia_CCore_CIMediaStreamDescriptor_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CMedia_CCore_CIMediaStreamDescriptor_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Media_Core_IMediaStreamDescriptor[] = L"Windows.Media.Core.IMediaStreamDescriptor";
typedef struct __x_ABI_CWindows_CMedia_CCore_CIMediaStreamDescriptorVtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CMedia_CCore_CIMediaStreamDescriptor* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CMedia_CCore_CIMediaStreamDescriptor* This);
    ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CMedia_CCore_CIMediaStreamDescriptor* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CMedia_CCore_CIMediaStreamDescriptor* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CMedia_CCore_CIMediaStreamDescriptor* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CMedia_CCore_CIMediaStreamDescriptor* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* get_IsSelected)(__x_ABI_CWindows_CMedia_CCore_CIMediaStreamDescriptor* This,
        boolean* selected);
    HRESULT (STDMETHODCALLTYPE* put_Name)(__x_ABI_CWindows_CMedia_CCore_CIMediaStreamDescriptor* This,
        HSTRING value);
    HRESULT (STDMETHODCALLTYPE* get_Name)(__x_ABI_CWindows_CMedia_CCore_CIMediaStreamDescriptor* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* put_Language)(__x_ABI_CWindows_CMedia_CCore_CIMediaStreamDescriptor* This,
        HSTRING value);
    HRESULT (STDMETHODCALLTYPE* get_Language)(__x_ABI_CWindows_CMedia_CCore_CIMediaStreamDescriptor* This,
        HSTRING* value);

    END_INTERFACE
} __x_ABI_CWindows_CMedia_CCore_CIMediaStreamDescriptorVtbl;

interface __x_ABI_CWindows_CMedia_CCore_CIMediaStreamDescriptor
{
    CONST_VTBL struct __x_ABI_CWindows_CMedia_CCore_CIMediaStreamDescriptorVtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __x_ABI_CWindows_CMedia_CCore_CIMediaStreamDescriptor_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __x_ABI_CWindows_CMedia_CCore_CIMediaStreamDescriptor_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __x_ABI_CWindows_CMedia_CCore_CIMediaStreamDescriptor_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __x_ABI_CWindows_CMedia_CCore_CIMediaStreamDescriptor_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __x_ABI_CWindows_CMedia_CCore_CIMediaStreamDescriptor_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __x_ABI_CWindows_CMedia_CCore_CIMediaStreamDescriptor_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __x_ABI_CWindows_CMedia_CCore_CIMediaStreamDescriptor_get_IsSelected(This, selected) \
    ((This)->lpVtbl->get_IsSelected(This, selected))

#define __x_ABI_CWindows_CMedia_CCore_CIMediaStreamDescriptor_put_Name(This, value) \
    ((This)->lpVtbl->put_Name(This, value))

#define __x_ABI_CWindows_CMedia_CCore_CIMediaStreamDescriptor_get_Name(This, value) \
    ((This)->lpVtbl->get_Name(This, value))

#define __x_ABI_CWindows_CMedia_CCore_CIMediaStreamDescriptor_put_Language(This, value) \
    ((This)->lpVtbl->put_Language(This, value))

#define __x_ABI_CWindows_CMedia_CCore_CIMediaStreamDescriptor_get_Language(This, value) \
    ((This)->lpVtbl->get_Language(This, value))

#endif /* COBJMACROS */

EXTERN_C const IID IID___x_ABI_CWindows_CMedia_CCore_CIMediaStreamDescriptor;
#endif /* !defined(____x_ABI_CWindows_CMedia_CCore_CIMediaStreamDescriptor_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Interface Windows.Media.Core.IMediaStreamDescriptor2
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 5.0
 *
 * Any object which implements this interface must also implement the following interfaces:
 *     Windows.Media.Core.IMediaStreamDescriptor
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x50000
#if !defined(____x_ABI_CWindows_CMedia_CCore_CIMediaStreamDescriptor2_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CMedia_CCore_CIMediaStreamDescriptor2_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Media_Core_IMediaStreamDescriptor2[] = L"Windows.Media.Core.IMediaStreamDescriptor2";
typedef struct __x_ABI_CWindows_CMedia_CCore_CIMediaStreamDescriptor2Vtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CMedia_CCore_CIMediaStreamDescriptor2* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CMedia_CCore_CIMediaStreamDescriptor2* This);
    ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CMedia_CCore_CIMediaStreamDescriptor2* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CMedia_CCore_CIMediaStreamDescriptor2* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CMedia_CCore_CIMediaStreamDescriptor2* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CMedia_CCore_CIMediaStreamDescriptor2* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* put_Label)(__x_ABI_CWindows_CMedia_CCore_CIMediaStreamDescriptor2* This,
        HSTRING value);
    HRESULT (STDMETHODCALLTYPE* get_Label)(__x_ABI_CWindows_CMedia_CCore_CIMediaStreamDescriptor2* This,
        HSTRING* value);

    END_INTERFACE
} __x_ABI_CWindows_CMedia_CCore_CIMediaStreamDescriptor2Vtbl;

interface __x_ABI_CWindows_CMedia_CCore_CIMediaStreamDescriptor2
{
    CONST_VTBL struct __x_ABI_CWindows_CMedia_CCore_CIMediaStreamDescriptor2Vtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __x_ABI_CWindows_CMedia_CCore_CIMediaStreamDescriptor2_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __x_ABI_CWindows_CMedia_CCore_CIMediaStreamDescriptor2_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __x_ABI_CWindows_CMedia_CCore_CIMediaStreamDescriptor2_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __x_ABI_CWindows_CMedia_CCore_CIMediaStreamDescriptor2_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __x_ABI_CWindows_CMedia_CCore_CIMediaStreamDescriptor2_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __x_ABI_CWindows_CMedia_CCore_CIMediaStreamDescriptor2_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __x_ABI_CWindows_CMedia_CCore_CIMediaStreamDescriptor2_put_Label(This, value) \
    ((This)->lpVtbl->put_Label(This, value))

#define __x_ABI_CWindows_CMedia_CCore_CIMediaStreamDescriptor2_get_Label(This, value) \
    ((This)->lpVtbl->get_Label(This, value))

#endif /* COBJMACROS */

EXTERN_C const IID IID___x_ABI_CWindows_CMedia_CCore_CIMediaStreamDescriptor2;
#endif /* !defined(____x_ABI_CWindows_CMedia_CCore_CIMediaStreamDescriptor2_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x50000

/*
 *
 * Interface Windows.Media.Core.IMediaStreamSample
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Interface is a part of the implementation of type Windows.Media.Core.MediaStreamSample
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____x_ABI_CWindows_CMedia_CCore_CIMediaStreamSample_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CMedia_CCore_CIMediaStreamSample_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Media_Core_IMediaStreamSample[] = L"Windows.Media.Core.IMediaStreamSample";
typedef struct __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSampleVtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CMedia_CCore_CIMediaStreamSample* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CMedia_CCore_CIMediaStreamSample* This);
    ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CMedia_CCore_CIMediaStreamSample* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CMedia_CCore_CIMediaStreamSample* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CMedia_CCore_CIMediaStreamSample* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CMedia_CCore_CIMediaStreamSample* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* add_Processed)(__x_ABI_CWindows_CMedia_CCore_CIMediaStreamSample* This,
        __FITypedEventHandler_2_Windows__CMedia__CCore__CMediaStreamSample_IInspectable* handler,
        EventRegistrationToken* token);
    HRESULT (STDMETHODCALLTYPE* remove_Processed)(__x_ABI_CWindows_CMedia_CCore_CIMediaStreamSample* This,
        EventRegistrationToken token);
    HRESULT (STDMETHODCALLTYPE* get_Buffer)(__x_ABI_CWindows_CMedia_CCore_CIMediaStreamSample* This,
        __x_ABI_CWindows_CStorage_CStreams_CIBuffer** value);
    HRESULT (STDMETHODCALLTYPE* get_Timestamp)(__x_ABI_CWindows_CMedia_CCore_CIMediaStreamSample* This,
        struct __x_ABI_CWindows_CFoundation_CTimeSpan* value);
    HRESULT (STDMETHODCALLTYPE* get_ExtendedProperties)(__x_ABI_CWindows_CMedia_CCore_CIMediaStreamSample* This,
        __FIMap_2_GUID_IInspectable** value);
    HRESULT (STDMETHODCALLTYPE* get_Protection)(__x_ABI_CWindows_CMedia_CCore_CIMediaStreamSample* This,
        __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSampleProtectionProperties** value);
    HRESULT (STDMETHODCALLTYPE* put_DecodeTimestamp)(__x_ABI_CWindows_CMedia_CCore_CIMediaStreamSample* This,
        struct __x_ABI_CWindows_CFoundation_CTimeSpan value);
    HRESULT (STDMETHODCALLTYPE* get_DecodeTimestamp)(__x_ABI_CWindows_CMedia_CCore_CIMediaStreamSample* This,
        struct __x_ABI_CWindows_CFoundation_CTimeSpan* value);
    HRESULT (STDMETHODCALLTYPE* put_Duration)(__x_ABI_CWindows_CMedia_CCore_CIMediaStreamSample* This,
        struct __x_ABI_CWindows_CFoundation_CTimeSpan value);
    HRESULT (STDMETHODCALLTYPE* get_Duration)(__x_ABI_CWindows_CMedia_CCore_CIMediaStreamSample* This,
        struct __x_ABI_CWindows_CFoundation_CTimeSpan* value);
    HRESULT (STDMETHODCALLTYPE* put_KeyFrame)(__x_ABI_CWindows_CMedia_CCore_CIMediaStreamSample* This,
        boolean value);
    HRESULT (STDMETHODCALLTYPE* get_KeyFrame)(__x_ABI_CWindows_CMedia_CCore_CIMediaStreamSample* This,
        boolean* value);
    HRESULT (STDMETHODCALLTYPE* put_Discontinuous)(__x_ABI_CWindows_CMedia_CCore_CIMediaStreamSample* This,
        boolean value);
    HRESULT (STDMETHODCALLTYPE* get_Discontinuous)(__x_ABI_CWindows_CMedia_CCore_CIMediaStreamSample* This,
        boolean* value);

    END_INTERFACE
} __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSampleVtbl;

interface __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSample
{
    CONST_VTBL struct __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSampleVtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSample_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSample_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSample_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSample_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSample_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSample_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSample_add_Processed(This, handler, token) \
    ((This)->lpVtbl->add_Processed(This, handler, token))

#define __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSample_remove_Processed(This, token) \
    ((This)->lpVtbl->remove_Processed(This, token))

#define __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSample_get_Buffer(This, value) \
    ((This)->lpVtbl->get_Buffer(This, value))

#define __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSample_get_Timestamp(This, value) \
    ((This)->lpVtbl->get_Timestamp(This, value))

#define __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSample_get_ExtendedProperties(This, value) \
    ((This)->lpVtbl->get_ExtendedProperties(This, value))

#define __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSample_get_Protection(This, value) \
    ((This)->lpVtbl->get_Protection(This, value))

#define __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSample_put_DecodeTimestamp(This, value) \
    ((This)->lpVtbl->put_DecodeTimestamp(This, value))

#define __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSample_get_DecodeTimestamp(This, value) \
    ((This)->lpVtbl->get_DecodeTimestamp(This, value))

#define __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSample_put_Duration(This, value) \
    ((This)->lpVtbl->put_Duration(This, value))

#define __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSample_get_Duration(This, value) \
    ((This)->lpVtbl->get_Duration(This, value))

#define __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSample_put_KeyFrame(This, value) \
    ((This)->lpVtbl->put_KeyFrame(This, value))

#define __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSample_get_KeyFrame(This, value) \
    ((This)->lpVtbl->get_KeyFrame(This, value))

#define __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSample_put_Discontinuous(This, value) \
    ((This)->lpVtbl->put_Discontinuous(This, value))

#define __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSample_get_Discontinuous(This, value) \
    ((This)->lpVtbl->get_Discontinuous(This, value))

#endif /* COBJMACROS */

EXTERN_C const IID IID___x_ABI_CWindows_CMedia_CCore_CIMediaStreamSample;
#endif /* !defined(____x_ABI_CWindows_CMedia_CCore_CIMediaStreamSample_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Interface Windows.Media.Core.IMediaStreamSample2
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 7.0
 *
 * Interface is a part of the implementation of type Windows.Media.Core.MediaStreamSample
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x70000
#if !defined(____x_ABI_CWindows_CMedia_CCore_CIMediaStreamSample2_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CMedia_CCore_CIMediaStreamSample2_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Media_Core_IMediaStreamSample2[] = L"Windows.Media.Core.IMediaStreamSample2";
typedef struct __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSample2Vtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CMedia_CCore_CIMediaStreamSample2* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CMedia_CCore_CIMediaStreamSample2* This);
    ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CMedia_CCore_CIMediaStreamSample2* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CMedia_CCore_CIMediaStreamSample2* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CMedia_CCore_CIMediaStreamSample2* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CMedia_CCore_CIMediaStreamSample2* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* get_Direct3D11Surface)(__x_ABI_CWindows_CMedia_CCore_CIMediaStreamSample2* This,
        __x_ABI_CWindows_CGraphics_CDirectX_CDirect3D11_CIDirect3DSurface** value);

    END_INTERFACE
} __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSample2Vtbl;

interface __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSample2
{
    CONST_VTBL struct __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSample2Vtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSample2_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSample2_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSample2_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSample2_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSample2_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSample2_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSample2_get_Direct3D11Surface(This, value) \
    ((This)->lpVtbl->get_Direct3D11Surface(This, value))

#endif /* COBJMACROS */

EXTERN_C const IID IID___x_ABI_CWindows_CMedia_CCore_CIMediaStreamSample2;
#endif /* !defined(____x_ABI_CWindows_CMedia_CCore_CIMediaStreamSample2_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x70000

/*
 *
 * Interface Windows.Media.Core.IMediaStreamSampleProtectionProperties
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Interface is a part of the implementation of type Windows.Media.Core.MediaStreamSampleProtectionProperties
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____x_ABI_CWindows_CMedia_CCore_CIMediaStreamSampleProtectionProperties_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CMedia_CCore_CIMediaStreamSampleProtectionProperties_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Media_Core_IMediaStreamSampleProtectionProperties[] = L"Windows.Media.Core.IMediaStreamSampleProtectionProperties";
typedef struct __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSampleProtectionPropertiesVtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CMedia_CCore_CIMediaStreamSampleProtectionProperties* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CMedia_CCore_CIMediaStreamSampleProtectionProperties* This);
    ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CMedia_CCore_CIMediaStreamSampleProtectionProperties* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CMedia_CCore_CIMediaStreamSampleProtectionProperties* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CMedia_CCore_CIMediaStreamSampleProtectionProperties* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CMedia_CCore_CIMediaStreamSampleProtectionProperties* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* SetKeyIdentifier)(__x_ABI_CWindows_CMedia_CCore_CIMediaStreamSampleProtectionProperties* This,
        UINT32 valueLength,
        BYTE* value);
    HRESULT (STDMETHODCALLTYPE* GetKeyIdentifier)(__x_ABI_CWindows_CMedia_CCore_CIMediaStreamSampleProtectionProperties* This,
        UINT32* valueLength,
        BYTE** value);
    HRESULT (STDMETHODCALLTYPE* SetInitializationVector)(__x_ABI_CWindows_CMedia_CCore_CIMediaStreamSampleProtectionProperties* This,
        UINT32 valueLength,
        BYTE* value);
    HRESULT (STDMETHODCALLTYPE* GetInitializationVector)(__x_ABI_CWindows_CMedia_CCore_CIMediaStreamSampleProtectionProperties* This,
        UINT32* valueLength,
        BYTE** value);
    HRESULT (STDMETHODCALLTYPE* SetSubSampleMapping)(__x_ABI_CWindows_CMedia_CCore_CIMediaStreamSampleProtectionProperties* This,
        UINT32 valueLength,
        BYTE* value);
    HRESULT (STDMETHODCALLTYPE* GetSubSampleMapping)(__x_ABI_CWindows_CMedia_CCore_CIMediaStreamSampleProtectionProperties* This,
        UINT32* valueLength,
        BYTE** value);

    END_INTERFACE
} __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSampleProtectionPropertiesVtbl;

interface __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSampleProtectionProperties
{
    CONST_VTBL struct __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSampleProtectionPropertiesVtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSampleProtectionProperties_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSampleProtectionProperties_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSampleProtectionProperties_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSampleProtectionProperties_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSampleProtectionProperties_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSampleProtectionProperties_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSampleProtectionProperties_SetKeyIdentifier(This, valueLength, value) \
    ((This)->lpVtbl->SetKeyIdentifier(This, valueLength, value))

#define __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSampleProtectionProperties_GetKeyIdentifier(This, valueLength, value) \
    ((This)->lpVtbl->GetKeyIdentifier(This, valueLength, value))

#define __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSampleProtectionProperties_SetInitializationVector(This, valueLength, value) \
    ((This)->lpVtbl->SetInitializationVector(This, valueLength, value))

#define __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSampleProtectionProperties_GetInitializationVector(This, valueLength, value) \
    ((This)->lpVtbl->GetInitializationVector(This, valueLength, value))

#define __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSampleProtectionProperties_SetSubSampleMapping(This, valueLength, value) \
    ((This)->lpVtbl->SetSubSampleMapping(This, valueLength, value))

#define __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSampleProtectionProperties_GetSubSampleMapping(This, valueLength, value) \
    ((This)->lpVtbl->GetSubSampleMapping(This, valueLength, value))

#endif /* COBJMACROS */

EXTERN_C const IID IID___x_ABI_CWindows_CMedia_CCore_CIMediaStreamSampleProtectionProperties;
#endif /* !defined(____x_ABI_CWindows_CMedia_CCore_CIMediaStreamSampleProtectionProperties_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Interface Windows.Media.Core.IMediaStreamSampleStatics
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Interface is a part of the implementation of type Windows.Media.Core.MediaStreamSample
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____x_ABI_CWindows_CMedia_CCore_CIMediaStreamSampleStatics_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CMedia_CCore_CIMediaStreamSampleStatics_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Media_Core_IMediaStreamSampleStatics[] = L"Windows.Media.Core.IMediaStreamSampleStatics";
typedef struct __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSampleStaticsVtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CMedia_CCore_CIMediaStreamSampleStatics* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CMedia_CCore_CIMediaStreamSampleStatics* This);
    ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CMedia_CCore_CIMediaStreamSampleStatics* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CMedia_CCore_CIMediaStreamSampleStatics* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CMedia_CCore_CIMediaStreamSampleStatics* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CMedia_CCore_CIMediaStreamSampleStatics* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* CreateFromBuffer)(__x_ABI_CWindows_CMedia_CCore_CIMediaStreamSampleStatics* This,
        __x_ABI_CWindows_CStorage_CStreams_CIBuffer* buffer,
        struct __x_ABI_CWindows_CFoundation_CTimeSpan timestamp,
        __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSample** value);
    HRESULT (STDMETHODCALLTYPE* CreateFromStreamAsync)(__x_ABI_CWindows_CMedia_CCore_CIMediaStreamSampleStatics* This,
        __x_ABI_CWindows_CStorage_CStreams_CIInputStream* stream,
        UINT32 count,
        struct __x_ABI_CWindows_CFoundation_CTimeSpan timestamp,
        __FIAsyncOperation_1_Windows__CMedia__CCore__CMediaStreamSample** value);

    END_INTERFACE
} __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSampleStaticsVtbl;

interface __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSampleStatics
{
    CONST_VTBL struct __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSampleStaticsVtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSampleStatics_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSampleStatics_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSampleStatics_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSampleStatics_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSampleStatics_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSampleStatics_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSampleStatics_CreateFromBuffer(This, buffer, timestamp, value) \
    ((This)->lpVtbl->CreateFromBuffer(This, buffer, timestamp, value))

#define __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSampleStatics_CreateFromStreamAsync(This, stream, count, timestamp, value) \
    ((This)->lpVtbl->CreateFromStreamAsync(This, stream, count, timestamp, value))

#endif /* COBJMACROS */

EXTERN_C const IID IID___x_ABI_CWindows_CMedia_CCore_CIMediaStreamSampleStatics;
#endif /* !defined(____x_ABI_CWindows_CMedia_CCore_CIMediaStreamSampleStatics_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Interface Windows.Media.Core.IMediaStreamSampleStatics2
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 7.0
 *
 * Interface is a part of the implementation of type Windows.Media.Core.MediaStreamSample
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x70000
#if !defined(____x_ABI_CWindows_CMedia_CCore_CIMediaStreamSampleStatics2_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CMedia_CCore_CIMediaStreamSampleStatics2_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Media_Core_IMediaStreamSampleStatics2[] = L"Windows.Media.Core.IMediaStreamSampleStatics2";
typedef struct __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSampleStatics2Vtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CMedia_CCore_CIMediaStreamSampleStatics2* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CMedia_CCore_CIMediaStreamSampleStatics2* This);
    ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CMedia_CCore_CIMediaStreamSampleStatics2* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CMedia_CCore_CIMediaStreamSampleStatics2* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CMedia_CCore_CIMediaStreamSampleStatics2* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CMedia_CCore_CIMediaStreamSampleStatics2* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* CreateFromDirect3D11Surface)(__x_ABI_CWindows_CMedia_CCore_CIMediaStreamSampleStatics2* This,
        __x_ABI_CWindows_CGraphics_CDirectX_CDirect3D11_CIDirect3DSurface* surface,
        struct __x_ABI_CWindows_CFoundation_CTimeSpan timestamp,
        __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSample** result);

    END_INTERFACE
} __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSampleStatics2Vtbl;

interface __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSampleStatics2
{
    CONST_VTBL struct __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSampleStatics2Vtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSampleStatics2_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSampleStatics2_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSampleStatics2_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSampleStatics2_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSampleStatics2_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSampleStatics2_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSampleStatics2_CreateFromDirect3D11Surface(This, surface, timestamp, result) \
    ((This)->lpVtbl->CreateFromDirect3D11Surface(This, surface, timestamp, result))

#endif /* COBJMACROS */

EXTERN_C const IID IID___x_ABI_CWindows_CMedia_CCore_CIMediaStreamSampleStatics2;
#endif /* !defined(____x_ABI_CWindows_CMedia_CCore_CIMediaStreamSampleStatics2_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x70000

/*
 *
 * Interface Windows.Media.Core.IMediaStreamSource
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Interface is a part of the implementation of type Windows.Media.Core.MediaStreamSource
 *
 * Any object which implements this interface must also implement the following interfaces:
 *     Windows.Media.Core.IMediaSource
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____x_ABI_CWindows_CMedia_CCore_CIMediaStreamSource_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CMedia_CCore_CIMediaStreamSource_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Media_Core_IMediaStreamSource[] = L"Windows.Media.Core.IMediaStreamSource";
typedef struct __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceVtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CMedia_CCore_CIMediaStreamSource* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CMedia_CCore_CIMediaStreamSource* This);
    ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CMedia_CCore_CIMediaStreamSource* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CMedia_CCore_CIMediaStreamSource* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CMedia_CCore_CIMediaStreamSource* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CMedia_CCore_CIMediaStreamSource* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* add_Closed)(__x_ABI_CWindows_CMedia_CCore_CIMediaStreamSource* This,
        __FITypedEventHandler_2_Windows__CMedia__CCore__CMediaStreamSource_Windows__CMedia__CCore__CMediaStreamSourceClosedEventArgs* handler,
        EventRegistrationToken* token);
    HRESULT (STDMETHODCALLTYPE* remove_Closed)(__x_ABI_CWindows_CMedia_CCore_CIMediaStreamSource* This,
        EventRegistrationToken token);
    HRESULT (STDMETHODCALLTYPE* add_Starting)(__x_ABI_CWindows_CMedia_CCore_CIMediaStreamSource* This,
        __FITypedEventHandler_2_Windows__CMedia__CCore__CMediaStreamSource_Windows__CMedia__CCore__CMediaStreamSourceStartingEventArgs* handler,
        EventRegistrationToken* token);
    HRESULT (STDMETHODCALLTYPE* remove_Starting)(__x_ABI_CWindows_CMedia_CCore_CIMediaStreamSource* This,
        EventRegistrationToken token);
    HRESULT (STDMETHODCALLTYPE* add_Paused)(__x_ABI_CWindows_CMedia_CCore_CIMediaStreamSource* This,
        __FITypedEventHandler_2_Windows__CMedia__CCore__CMediaStreamSource_IInspectable* handler,
        EventRegistrationToken* token);
    HRESULT (STDMETHODCALLTYPE* remove_Paused)(__x_ABI_CWindows_CMedia_CCore_CIMediaStreamSource* This,
        EventRegistrationToken token);
    HRESULT (STDMETHODCALLTYPE* add_SampleRequested)(__x_ABI_CWindows_CMedia_CCore_CIMediaStreamSource* This,
        __FITypedEventHandler_2_Windows__CMedia__CCore__CMediaStreamSource_Windows__CMedia__CCore__CMediaStreamSourceSampleRequestedEventArgs* handler,
        EventRegistrationToken* token);
    HRESULT (STDMETHODCALLTYPE* remove_SampleRequested)(__x_ABI_CWindows_CMedia_CCore_CIMediaStreamSource* This,
        EventRegistrationToken token);
    HRESULT (STDMETHODCALLTYPE* add_SwitchStreamsRequested)(__x_ABI_CWindows_CMedia_CCore_CIMediaStreamSource* This,
        __FITypedEventHandler_2_Windows__CMedia__CCore__CMediaStreamSource_Windows__CMedia__CCore__CMediaStreamSourceSwitchStreamsRequestedEventArgs* handler,
        EventRegistrationToken* token);
    HRESULT (STDMETHODCALLTYPE* remove_SwitchStreamsRequested)(__x_ABI_CWindows_CMedia_CCore_CIMediaStreamSource* This,
        EventRegistrationToken token);
    HRESULT (STDMETHODCALLTYPE* NotifyError)(__x_ABI_CWindows_CMedia_CCore_CIMediaStreamSource* This,
        enum __x_ABI_CWindows_CMedia_CCore_CMediaStreamSourceErrorStatus errorStatus);
    HRESULT (STDMETHODCALLTYPE* AddStreamDescriptor)(__x_ABI_CWindows_CMedia_CCore_CIMediaStreamSource* This,
        __x_ABI_CWindows_CMedia_CCore_CIMediaStreamDescriptor* descriptor);
    HRESULT (STDMETHODCALLTYPE* put_MediaProtectionManager)(__x_ABI_CWindows_CMedia_CCore_CIMediaStreamSource* This,
        __x_ABI_CWindows_CMedia_CProtection_CIMediaProtectionManager* value);
    HRESULT (STDMETHODCALLTYPE* get_MediaProtectionManager)(__x_ABI_CWindows_CMedia_CCore_CIMediaStreamSource* This,
        __x_ABI_CWindows_CMedia_CProtection_CIMediaProtectionManager** value);
    HRESULT (STDMETHODCALLTYPE* put_Duration)(__x_ABI_CWindows_CMedia_CCore_CIMediaStreamSource* This,
        struct __x_ABI_CWindows_CFoundation_CTimeSpan value);
    HRESULT (STDMETHODCALLTYPE* get_Duration)(__x_ABI_CWindows_CMedia_CCore_CIMediaStreamSource* This,
        struct __x_ABI_CWindows_CFoundation_CTimeSpan* value);
    HRESULT (STDMETHODCALLTYPE* put_CanSeek)(__x_ABI_CWindows_CMedia_CCore_CIMediaStreamSource* This,
        boolean value);
    HRESULT (STDMETHODCALLTYPE* get_CanSeek)(__x_ABI_CWindows_CMedia_CCore_CIMediaStreamSource* This,
        boolean* value);
    HRESULT (STDMETHODCALLTYPE* put_BufferTime)(__x_ABI_CWindows_CMedia_CCore_CIMediaStreamSource* This,
        struct __x_ABI_CWindows_CFoundation_CTimeSpan value);
    HRESULT (STDMETHODCALLTYPE* get_BufferTime)(__x_ABI_CWindows_CMedia_CCore_CIMediaStreamSource* This,
        struct __x_ABI_CWindows_CFoundation_CTimeSpan* value);
    HRESULT (STDMETHODCALLTYPE* SetBufferedRange)(__x_ABI_CWindows_CMedia_CCore_CIMediaStreamSource* This,
        struct __x_ABI_CWindows_CFoundation_CTimeSpan startOffset,
        struct __x_ABI_CWindows_CFoundation_CTimeSpan endOffset);
    HRESULT (STDMETHODCALLTYPE* get_MusicProperties)(__x_ABI_CWindows_CMedia_CCore_CIMediaStreamSource* This,
        __x_ABI_CWindows_CStorage_CFileProperties_CIMusicProperties** value);
    HRESULT (STDMETHODCALLTYPE* get_VideoProperties)(__x_ABI_CWindows_CMedia_CCore_CIMediaStreamSource* This,
        __x_ABI_CWindows_CStorage_CFileProperties_CIVideoProperties** value);
    HRESULT (STDMETHODCALLTYPE* put_Thumbnail)(__x_ABI_CWindows_CMedia_CCore_CIMediaStreamSource* This,
        __x_ABI_CWindows_CStorage_CStreams_CIRandomAccessStreamReference* value);
    HRESULT (STDMETHODCALLTYPE* get_Thumbnail)(__x_ABI_CWindows_CMedia_CCore_CIMediaStreamSource* This,
        __x_ABI_CWindows_CStorage_CStreams_CIRandomAccessStreamReference** value);
    HRESULT (STDMETHODCALLTYPE* AddProtectionKey)(__x_ABI_CWindows_CMedia_CCore_CIMediaStreamSource* This,
        __x_ABI_CWindows_CMedia_CCore_CIMediaStreamDescriptor* streamDescriptor,
        UINT32 keyIdentifierLength,
        BYTE* keyIdentifier,
        UINT32 licenseDataLength,
        BYTE* licenseData);

    END_INTERFACE
} __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceVtbl;

interface __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSource
{
    CONST_VTBL struct __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceVtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSource_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSource_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSource_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSource_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSource_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSource_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSource_add_Closed(This, handler, token) \
    ((This)->lpVtbl->add_Closed(This, handler, token))

#define __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSource_remove_Closed(This, token) \
    ((This)->lpVtbl->remove_Closed(This, token))

#define __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSource_add_Starting(This, handler, token) \
    ((This)->lpVtbl->add_Starting(This, handler, token))

#define __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSource_remove_Starting(This, token) \
    ((This)->lpVtbl->remove_Starting(This, token))

#define __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSource_add_Paused(This, handler, token) \
    ((This)->lpVtbl->add_Paused(This, handler, token))

#define __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSource_remove_Paused(This, token) \
    ((This)->lpVtbl->remove_Paused(This, token))

#define __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSource_add_SampleRequested(This, handler, token) \
    ((This)->lpVtbl->add_SampleRequested(This, handler, token))

#define __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSource_remove_SampleRequested(This, token) \
    ((This)->lpVtbl->remove_SampleRequested(This, token))

#define __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSource_add_SwitchStreamsRequested(This, handler, token) \
    ((This)->lpVtbl->add_SwitchStreamsRequested(This, handler, token))

#define __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSource_remove_SwitchStreamsRequested(This, token) \
    ((This)->lpVtbl->remove_SwitchStreamsRequested(This, token))

#define __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSource_NotifyError(This, errorStatus) \
    ((This)->lpVtbl->NotifyError(This, errorStatus))

#define __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSource_AddStreamDescriptor(This, descriptor) \
    ((This)->lpVtbl->AddStreamDescriptor(This, descriptor))

#define __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSource_put_MediaProtectionManager(This, value) \
    ((This)->lpVtbl->put_MediaProtectionManager(This, value))

#define __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSource_get_MediaProtectionManager(This, value) \
    ((This)->lpVtbl->get_MediaProtectionManager(This, value))

#define __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSource_put_Duration(This, value) \
    ((This)->lpVtbl->put_Duration(This, value))

#define __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSource_get_Duration(This, value) \
    ((This)->lpVtbl->get_Duration(This, value))

#define __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSource_put_CanSeek(This, value) \
    ((This)->lpVtbl->put_CanSeek(This, value))

#define __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSource_get_CanSeek(This, value) \
    ((This)->lpVtbl->get_CanSeek(This, value))

#define __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSource_put_BufferTime(This, value) \
    ((This)->lpVtbl->put_BufferTime(This, value))

#define __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSource_get_BufferTime(This, value) \
    ((This)->lpVtbl->get_BufferTime(This, value))

#define __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSource_SetBufferedRange(This, startOffset, endOffset) \
    ((This)->lpVtbl->SetBufferedRange(This, startOffset, endOffset))

#define __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSource_get_MusicProperties(This, value) \
    ((This)->lpVtbl->get_MusicProperties(This, value))

#define __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSource_get_VideoProperties(This, value) \
    ((This)->lpVtbl->get_VideoProperties(This, value))

#define __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSource_put_Thumbnail(This, value) \
    ((This)->lpVtbl->put_Thumbnail(This, value))

#define __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSource_get_Thumbnail(This, value) \
    ((This)->lpVtbl->get_Thumbnail(This, value))

#define __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSource_AddProtectionKey(This, streamDescriptor, keyIdentifierLength, keyIdentifier, licenseDataLength, licenseData) \
    ((This)->lpVtbl->AddProtectionKey(This, streamDescriptor, keyIdentifierLength, keyIdentifier, licenseDataLength, licenseData))

#endif /* COBJMACROS */

EXTERN_C const IID IID___x_ABI_CWindows_CMedia_CCore_CIMediaStreamSource;
#endif /* !defined(____x_ABI_CWindows_CMedia_CCore_CIMediaStreamSource_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Interface Windows.Media.Core.IMediaStreamSource2
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 3.0
 *
 * Interface is a part of the implementation of type Windows.Media.Core.MediaStreamSource
 *
 * Any object which implements this interface must also implement the following interfaces:
 *     Windows.Media.Core.IMediaStreamSource
 *     Windows.Media.Core.IMediaSource
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x30000
#if !defined(____x_ABI_CWindows_CMedia_CCore_CIMediaStreamSource2_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CMedia_CCore_CIMediaStreamSource2_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Media_Core_IMediaStreamSource2[] = L"Windows.Media.Core.IMediaStreamSource2";
typedef struct __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSource2Vtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CMedia_CCore_CIMediaStreamSource2* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CMedia_CCore_CIMediaStreamSource2* This);
    ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CMedia_CCore_CIMediaStreamSource2* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CMedia_CCore_CIMediaStreamSource2* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CMedia_CCore_CIMediaStreamSource2* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CMedia_CCore_CIMediaStreamSource2* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* add_SampleRendered)(__x_ABI_CWindows_CMedia_CCore_CIMediaStreamSource2* This,
        __FITypedEventHandler_2_Windows__CMedia__CCore__CMediaStreamSource_Windows__CMedia__CCore__CMediaStreamSourceSampleRenderedEventArgs* handler,
        EventRegistrationToken* token);
    HRESULT (STDMETHODCALLTYPE* remove_SampleRendered)(__x_ABI_CWindows_CMedia_CCore_CIMediaStreamSource2* This,
        EventRegistrationToken token);

    END_INTERFACE
} __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSource2Vtbl;

interface __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSource2
{
    CONST_VTBL struct __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSource2Vtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSource2_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSource2_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSource2_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSource2_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSource2_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSource2_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSource2_add_SampleRendered(This, handler, token) \
    ((This)->lpVtbl->add_SampleRendered(This, handler, token))

#define __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSource2_remove_SampleRendered(This, token) \
    ((This)->lpVtbl->remove_SampleRendered(This, token))

#endif /* COBJMACROS */

EXTERN_C const IID IID___x_ABI_CWindows_CMedia_CCore_CIMediaStreamSource2;
#endif /* !defined(____x_ABI_CWindows_CMedia_CCore_CIMediaStreamSource2_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x30000

/*
 *
 * Interface Windows.Media.Core.IMediaStreamSource3
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 4.0
 *
 * Interface is a part of the implementation of type Windows.Media.Core.MediaStreamSource
 *
 * Any object which implements this interface must also implement the following interfaces:
 *     Windows.Media.Core.IMediaStreamSource
 *     Windows.Media.Core.IMediaSource
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x40000
#if !defined(____x_ABI_CWindows_CMedia_CCore_CIMediaStreamSource3_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CMedia_CCore_CIMediaStreamSource3_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Media_Core_IMediaStreamSource3[] = L"Windows.Media.Core.IMediaStreamSource3";
typedef struct __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSource3Vtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CMedia_CCore_CIMediaStreamSource3* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CMedia_CCore_CIMediaStreamSource3* This);
    ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CMedia_CCore_CIMediaStreamSource3* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CMedia_CCore_CIMediaStreamSource3* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CMedia_CCore_CIMediaStreamSource3* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CMedia_CCore_CIMediaStreamSource3* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* put_MaxSupportedPlaybackRate)(__x_ABI_CWindows_CMedia_CCore_CIMediaStreamSource3* This,
        __FIReference_1_double* value);
    HRESULT (STDMETHODCALLTYPE* get_MaxSupportedPlaybackRate)(__x_ABI_CWindows_CMedia_CCore_CIMediaStreamSource3* This,
        __FIReference_1_double** value);

    END_INTERFACE
} __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSource3Vtbl;

interface __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSource3
{
    CONST_VTBL struct __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSource3Vtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSource3_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSource3_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSource3_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSource3_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSource3_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSource3_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSource3_put_MaxSupportedPlaybackRate(This, value) \
    ((This)->lpVtbl->put_MaxSupportedPlaybackRate(This, value))

#define __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSource3_get_MaxSupportedPlaybackRate(This, value) \
    ((This)->lpVtbl->get_MaxSupportedPlaybackRate(This, value))

#endif /* COBJMACROS */

EXTERN_C const IID IID___x_ABI_CWindows_CMedia_CCore_CIMediaStreamSource3;
#endif /* !defined(____x_ABI_CWindows_CMedia_CCore_CIMediaStreamSource3_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x40000

/*
 *
 * Interface Windows.Media.Core.IMediaStreamSource4
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 5.0
 *
 * Interface is a part of the implementation of type Windows.Media.Core.MediaStreamSource
 *
 * Any object which implements this interface must also implement the following interfaces:
 *     Windows.Media.Core.IMediaStreamSource
 *     Windows.Media.Core.IMediaSource
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x50000
#if !defined(____x_ABI_CWindows_CMedia_CCore_CIMediaStreamSource4_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CMedia_CCore_CIMediaStreamSource4_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Media_Core_IMediaStreamSource4[] = L"Windows.Media.Core.IMediaStreamSource4";
typedef struct __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSource4Vtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CMedia_CCore_CIMediaStreamSource4* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CMedia_CCore_CIMediaStreamSource4* This);
    ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CMedia_CCore_CIMediaStreamSource4* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CMedia_CCore_CIMediaStreamSource4* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CMedia_CCore_CIMediaStreamSource4* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CMedia_CCore_CIMediaStreamSource4* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* put_IsLive)(__x_ABI_CWindows_CMedia_CCore_CIMediaStreamSource4* This,
        boolean value);
    HRESULT (STDMETHODCALLTYPE* get_IsLive)(__x_ABI_CWindows_CMedia_CCore_CIMediaStreamSource4* This,
        boolean* value);

    END_INTERFACE
} __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSource4Vtbl;

interface __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSource4
{
    CONST_VTBL struct __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSource4Vtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSource4_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSource4_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSource4_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSource4_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSource4_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSource4_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSource4_put_IsLive(This, value) \
    ((This)->lpVtbl->put_IsLive(This, value))

#define __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSource4_get_IsLive(This, value) \
    ((This)->lpVtbl->get_IsLive(This, value))

#endif /* COBJMACROS */

EXTERN_C const IID IID___x_ABI_CWindows_CMedia_CCore_CIMediaStreamSource4;
#endif /* !defined(____x_ABI_CWindows_CMedia_CCore_CIMediaStreamSource4_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x50000

/*
 *
 * Interface Windows.Media.Core.IMediaStreamSourceClosedEventArgs
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Interface is a part of the implementation of type Windows.Media.Core.MediaStreamSourceClosedEventArgs
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceClosedEventArgs_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceClosedEventArgs_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Media_Core_IMediaStreamSourceClosedEventArgs[] = L"Windows.Media.Core.IMediaStreamSourceClosedEventArgs";
typedef struct __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceClosedEventArgsVtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceClosedEventArgs* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceClosedEventArgs* This);
    ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceClosedEventArgs* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceClosedEventArgs* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceClosedEventArgs* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceClosedEventArgs* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* get_Request)(__x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceClosedEventArgs* This,
        __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceClosedRequest** value);

    END_INTERFACE
} __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceClosedEventArgsVtbl;

interface __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceClosedEventArgs
{
    CONST_VTBL struct __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceClosedEventArgsVtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceClosedEventArgs_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceClosedEventArgs_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceClosedEventArgs_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceClosedEventArgs_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceClosedEventArgs_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceClosedEventArgs_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceClosedEventArgs_get_Request(This, value) \
    ((This)->lpVtbl->get_Request(This, value))

#endif /* COBJMACROS */

EXTERN_C const IID IID___x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceClosedEventArgs;
#endif /* !defined(____x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceClosedEventArgs_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Interface Windows.Media.Core.IMediaStreamSourceClosedRequest
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Interface is a part of the implementation of type Windows.Media.Core.MediaStreamSourceClosedRequest
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceClosedRequest_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceClosedRequest_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Media_Core_IMediaStreamSourceClosedRequest[] = L"Windows.Media.Core.IMediaStreamSourceClosedRequest";
typedef struct __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceClosedRequestVtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceClosedRequest* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceClosedRequest* This);
    ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceClosedRequest* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceClosedRequest* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceClosedRequest* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceClosedRequest* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* get_Reason)(__x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceClosedRequest* This,
        enum __x_ABI_CWindows_CMedia_CCore_CMediaStreamSourceClosedReason* value);

    END_INTERFACE
} __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceClosedRequestVtbl;

interface __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceClosedRequest
{
    CONST_VTBL struct __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceClosedRequestVtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceClosedRequest_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceClosedRequest_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceClosedRequest_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceClosedRequest_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceClosedRequest_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceClosedRequest_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceClosedRequest_get_Reason(This, value) \
    ((This)->lpVtbl->get_Reason(This, value))

#endif /* COBJMACROS */

EXTERN_C const IID IID___x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceClosedRequest;
#endif /* !defined(____x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceClosedRequest_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Interface Windows.Media.Core.IMediaStreamSourceFactory
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Interface is a part of the implementation of type Windows.Media.Core.MediaStreamSource
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceFactory_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceFactory_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Media_Core_IMediaStreamSourceFactory[] = L"Windows.Media.Core.IMediaStreamSourceFactory";
typedef struct __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceFactoryVtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceFactory* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceFactory* This);
    ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceFactory* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceFactory* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceFactory* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceFactory* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* CreateFromDescriptor)(__x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceFactory* This,
        __x_ABI_CWindows_CMedia_CCore_CIMediaStreamDescriptor* descriptor,
        __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSource** result);
    HRESULT (STDMETHODCALLTYPE* CreateFromDescriptors)(__x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceFactory* This,
        __x_ABI_CWindows_CMedia_CCore_CIMediaStreamDescriptor* descriptor,
        __x_ABI_CWindows_CMedia_CCore_CIMediaStreamDescriptor* descriptor2,
        __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSource** result);

    END_INTERFACE
} __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceFactoryVtbl;

interface __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceFactory
{
    CONST_VTBL struct __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceFactoryVtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceFactory_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceFactory_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceFactory_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceFactory_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceFactory_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceFactory_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceFactory_CreateFromDescriptor(This, descriptor, result) \
    ((This)->lpVtbl->CreateFromDescriptor(This, descriptor, result))

#define __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceFactory_CreateFromDescriptors(This, descriptor, descriptor2, result) \
    ((This)->lpVtbl->CreateFromDescriptors(This, descriptor, descriptor2, result))

#endif /* COBJMACROS */

EXTERN_C const IID IID___x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceFactory;
#endif /* !defined(____x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceFactory_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Interface Windows.Media.Core.IMediaStreamSourceSampleRenderedEventArgs
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 3.0
 *
 * Interface is a part of the implementation of type Windows.Media.Core.MediaStreamSourceSampleRenderedEventArgs
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x30000
#if !defined(____x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceSampleRenderedEventArgs_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceSampleRenderedEventArgs_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Media_Core_IMediaStreamSourceSampleRenderedEventArgs[] = L"Windows.Media.Core.IMediaStreamSourceSampleRenderedEventArgs";
typedef struct __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceSampleRenderedEventArgsVtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceSampleRenderedEventArgs* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceSampleRenderedEventArgs* This);
    ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceSampleRenderedEventArgs* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceSampleRenderedEventArgs* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceSampleRenderedEventArgs* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceSampleRenderedEventArgs* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* get_SampleLag)(__x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceSampleRenderedEventArgs* This,
        struct __x_ABI_CWindows_CFoundation_CTimeSpan* value);

    END_INTERFACE
} __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceSampleRenderedEventArgsVtbl;

interface __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceSampleRenderedEventArgs
{
    CONST_VTBL struct __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceSampleRenderedEventArgsVtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceSampleRenderedEventArgs_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceSampleRenderedEventArgs_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceSampleRenderedEventArgs_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceSampleRenderedEventArgs_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceSampleRenderedEventArgs_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceSampleRenderedEventArgs_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceSampleRenderedEventArgs_get_SampleLag(This, value) \
    ((This)->lpVtbl->get_SampleLag(This, value))

#endif /* COBJMACROS */

EXTERN_C const IID IID___x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceSampleRenderedEventArgs;
#endif /* !defined(____x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceSampleRenderedEventArgs_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x30000

/*
 *
 * Interface Windows.Media.Core.IMediaStreamSourceSampleRequest
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Interface is a part of the implementation of type Windows.Media.Core.MediaStreamSourceSampleRequest
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceSampleRequest_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceSampleRequest_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Media_Core_IMediaStreamSourceSampleRequest[] = L"Windows.Media.Core.IMediaStreamSourceSampleRequest";
typedef struct __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceSampleRequestVtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceSampleRequest* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceSampleRequest* This);
    ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceSampleRequest* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceSampleRequest* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceSampleRequest* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceSampleRequest* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* get_StreamDescriptor)(__x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceSampleRequest* This,
        __x_ABI_CWindows_CMedia_CCore_CIMediaStreamDescriptor** value);
    HRESULT (STDMETHODCALLTYPE* GetDeferral)(__x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceSampleRequest* This,
        __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceSampleRequestDeferral** deferral);
    HRESULT (STDMETHODCALLTYPE* put_Sample)(__x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceSampleRequest* This,
        __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSample* value);
    HRESULT (STDMETHODCALLTYPE* get_Sample)(__x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceSampleRequest* This,
        __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSample** value);
    HRESULT (STDMETHODCALLTYPE* ReportSampleProgress)(__x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceSampleRequest* This,
        UINT32 progress);

    END_INTERFACE
} __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceSampleRequestVtbl;

interface __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceSampleRequest
{
    CONST_VTBL struct __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceSampleRequestVtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceSampleRequest_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceSampleRequest_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceSampleRequest_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceSampleRequest_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceSampleRequest_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceSampleRequest_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceSampleRequest_get_StreamDescriptor(This, value) \
    ((This)->lpVtbl->get_StreamDescriptor(This, value))

#define __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceSampleRequest_GetDeferral(This, deferral) \
    ((This)->lpVtbl->GetDeferral(This, deferral))

#define __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceSampleRequest_put_Sample(This, value) \
    ((This)->lpVtbl->put_Sample(This, value))

#define __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceSampleRequest_get_Sample(This, value) \
    ((This)->lpVtbl->get_Sample(This, value))

#define __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceSampleRequest_ReportSampleProgress(This, progress) \
    ((This)->lpVtbl->ReportSampleProgress(This, progress))

#endif /* COBJMACROS */

EXTERN_C const IID IID___x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceSampleRequest;
#endif /* !defined(____x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceSampleRequest_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Interface Windows.Media.Core.IMediaStreamSourceSampleRequestDeferral
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Interface is a part of the implementation of type Windows.Media.Core.MediaStreamSourceSampleRequestDeferral
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceSampleRequestDeferral_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceSampleRequestDeferral_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Media_Core_IMediaStreamSourceSampleRequestDeferral[] = L"Windows.Media.Core.IMediaStreamSourceSampleRequestDeferral";
typedef struct __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceSampleRequestDeferralVtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceSampleRequestDeferral* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceSampleRequestDeferral* This);
    ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceSampleRequestDeferral* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceSampleRequestDeferral* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceSampleRequestDeferral* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceSampleRequestDeferral* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* Complete)(__x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceSampleRequestDeferral* This);

    END_INTERFACE
} __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceSampleRequestDeferralVtbl;

interface __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceSampleRequestDeferral
{
    CONST_VTBL struct __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceSampleRequestDeferralVtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceSampleRequestDeferral_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceSampleRequestDeferral_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceSampleRequestDeferral_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceSampleRequestDeferral_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceSampleRequestDeferral_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceSampleRequestDeferral_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceSampleRequestDeferral_Complete(This) \
    ((This)->lpVtbl->Complete(This))

#endif /* COBJMACROS */

EXTERN_C const IID IID___x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceSampleRequestDeferral;
#endif /* !defined(____x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceSampleRequestDeferral_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Interface Windows.Media.Core.IMediaStreamSourceSampleRequestedEventArgs
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Interface is a part of the implementation of type Windows.Media.Core.MediaStreamSourceSampleRequestedEventArgs
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceSampleRequestedEventArgs_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceSampleRequestedEventArgs_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Media_Core_IMediaStreamSourceSampleRequestedEventArgs[] = L"Windows.Media.Core.IMediaStreamSourceSampleRequestedEventArgs";
typedef struct __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceSampleRequestedEventArgsVtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceSampleRequestedEventArgs* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceSampleRequestedEventArgs* This);
    ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceSampleRequestedEventArgs* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceSampleRequestedEventArgs* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceSampleRequestedEventArgs* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceSampleRequestedEventArgs* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* get_Request)(__x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceSampleRequestedEventArgs* This,
        __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceSampleRequest** value);

    END_INTERFACE
} __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceSampleRequestedEventArgsVtbl;

interface __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceSampleRequestedEventArgs
{
    CONST_VTBL struct __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceSampleRequestedEventArgsVtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceSampleRequestedEventArgs_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceSampleRequestedEventArgs_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceSampleRequestedEventArgs_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceSampleRequestedEventArgs_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceSampleRequestedEventArgs_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceSampleRequestedEventArgs_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceSampleRequestedEventArgs_get_Request(This, value) \
    ((This)->lpVtbl->get_Request(This, value))

#endif /* COBJMACROS */

EXTERN_C const IID IID___x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceSampleRequestedEventArgs;
#endif /* !defined(____x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceSampleRequestedEventArgs_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Interface Windows.Media.Core.IMediaStreamSourceStartingEventArgs
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Interface is a part of the implementation of type Windows.Media.Core.MediaStreamSourceStartingEventArgs
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceStartingEventArgs_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceStartingEventArgs_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Media_Core_IMediaStreamSourceStartingEventArgs[] = L"Windows.Media.Core.IMediaStreamSourceStartingEventArgs";
typedef struct __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceStartingEventArgsVtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceStartingEventArgs* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceStartingEventArgs* This);
    ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceStartingEventArgs* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceStartingEventArgs* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceStartingEventArgs* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceStartingEventArgs* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* get_Request)(__x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceStartingEventArgs* This,
        __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceStartingRequest** value);

    END_INTERFACE
} __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceStartingEventArgsVtbl;

interface __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceStartingEventArgs
{
    CONST_VTBL struct __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceStartingEventArgsVtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceStartingEventArgs_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceStartingEventArgs_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceStartingEventArgs_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceStartingEventArgs_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceStartingEventArgs_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceStartingEventArgs_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceStartingEventArgs_get_Request(This, value) \
    ((This)->lpVtbl->get_Request(This, value))

#endif /* COBJMACROS */

EXTERN_C const IID IID___x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceStartingEventArgs;
#endif /* !defined(____x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceStartingEventArgs_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Interface Windows.Media.Core.IMediaStreamSourceStartingRequest
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Interface is a part of the implementation of type Windows.Media.Core.MediaStreamSourceStartingRequest
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceStartingRequest_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceStartingRequest_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Media_Core_IMediaStreamSourceStartingRequest[] = L"Windows.Media.Core.IMediaStreamSourceStartingRequest";
typedef struct __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceStartingRequestVtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceStartingRequest* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceStartingRequest* This);
    ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceStartingRequest* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceStartingRequest* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceStartingRequest* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceStartingRequest* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* get_StartPosition)(__x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceStartingRequest* This,
        __FIReference_1_Windows__CFoundation__CTimeSpan** value);
    HRESULT (STDMETHODCALLTYPE* GetDeferral)(__x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceStartingRequest* This,
        __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceStartingRequestDeferral** deferral);
    HRESULT (STDMETHODCALLTYPE* SetActualStartPosition)(__x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceStartingRequest* This,
        struct __x_ABI_CWindows_CFoundation_CTimeSpan position);

    END_INTERFACE
} __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceStartingRequestVtbl;

interface __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceStartingRequest
{
    CONST_VTBL struct __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceStartingRequestVtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceStartingRequest_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceStartingRequest_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceStartingRequest_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceStartingRequest_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceStartingRequest_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceStartingRequest_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceStartingRequest_get_StartPosition(This, value) \
    ((This)->lpVtbl->get_StartPosition(This, value))

#define __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceStartingRequest_GetDeferral(This, deferral) \
    ((This)->lpVtbl->GetDeferral(This, deferral))

#define __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceStartingRequest_SetActualStartPosition(This, position) \
    ((This)->lpVtbl->SetActualStartPosition(This, position))

#endif /* COBJMACROS */

EXTERN_C const IID IID___x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceStartingRequest;
#endif /* !defined(____x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceStartingRequest_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Interface Windows.Media.Core.IMediaStreamSourceStartingRequestDeferral
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Interface is a part of the implementation of type Windows.Media.Core.MediaStreamSourceStartingRequestDeferral
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceStartingRequestDeferral_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceStartingRequestDeferral_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Media_Core_IMediaStreamSourceStartingRequestDeferral[] = L"Windows.Media.Core.IMediaStreamSourceStartingRequestDeferral";
typedef struct __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceStartingRequestDeferralVtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceStartingRequestDeferral* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceStartingRequestDeferral* This);
    ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceStartingRequestDeferral* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceStartingRequestDeferral* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceStartingRequestDeferral* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceStartingRequestDeferral* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* Complete)(__x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceStartingRequestDeferral* This);

    END_INTERFACE
} __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceStartingRequestDeferralVtbl;

interface __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceStartingRequestDeferral
{
    CONST_VTBL struct __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceStartingRequestDeferralVtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceStartingRequestDeferral_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceStartingRequestDeferral_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceStartingRequestDeferral_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceStartingRequestDeferral_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceStartingRequestDeferral_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceStartingRequestDeferral_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceStartingRequestDeferral_Complete(This) \
    ((This)->lpVtbl->Complete(This))

#endif /* COBJMACROS */

EXTERN_C const IID IID___x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceStartingRequestDeferral;
#endif /* !defined(____x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceStartingRequestDeferral_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Interface Windows.Media.Core.IMediaStreamSourceSwitchStreamsRequest
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Interface is a part of the implementation of type Windows.Media.Core.MediaStreamSourceSwitchStreamsRequest
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceSwitchStreamsRequest_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceSwitchStreamsRequest_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Media_Core_IMediaStreamSourceSwitchStreamsRequest[] = L"Windows.Media.Core.IMediaStreamSourceSwitchStreamsRequest";
typedef struct __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceSwitchStreamsRequestVtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceSwitchStreamsRequest* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceSwitchStreamsRequest* This);
    ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceSwitchStreamsRequest* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceSwitchStreamsRequest* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceSwitchStreamsRequest* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceSwitchStreamsRequest* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* get_OldStreamDescriptor)(__x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceSwitchStreamsRequest* This,
        __x_ABI_CWindows_CMedia_CCore_CIMediaStreamDescriptor** value);
    HRESULT (STDMETHODCALLTYPE* get_NewStreamDescriptor)(__x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceSwitchStreamsRequest* This,
        __x_ABI_CWindows_CMedia_CCore_CIMediaStreamDescriptor** value);
    HRESULT (STDMETHODCALLTYPE* GetDeferral)(__x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceSwitchStreamsRequest* This,
        __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceSwitchStreamsRequestDeferral** deferral);

    END_INTERFACE
} __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceSwitchStreamsRequestVtbl;

interface __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceSwitchStreamsRequest
{
    CONST_VTBL struct __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceSwitchStreamsRequestVtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceSwitchStreamsRequest_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceSwitchStreamsRequest_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceSwitchStreamsRequest_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceSwitchStreamsRequest_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceSwitchStreamsRequest_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceSwitchStreamsRequest_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceSwitchStreamsRequest_get_OldStreamDescriptor(This, value) \
    ((This)->lpVtbl->get_OldStreamDescriptor(This, value))

#define __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceSwitchStreamsRequest_get_NewStreamDescriptor(This, value) \
    ((This)->lpVtbl->get_NewStreamDescriptor(This, value))

#define __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceSwitchStreamsRequest_GetDeferral(This, deferral) \
    ((This)->lpVtbl->GetDeferral(This, deferral))

#endif /* COBJMACROS */

EXTERN_C const IID IID___x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceSwitchStreamsRequest;
#endif /* !defined(____x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceSwitchStreamsRequest_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Interface Windows.Media.Core.IMediaStreamSourceSwitchStreamsRequestDeferral
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Interface is a part of the implementation of type Windows.Media.Core.MediaStreamSourceSwitchStreamsRequestDeferral
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceSwitchStreamsRequestDeferral_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceSwitchStreamsRequestDeferral_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Media_Core_IMediaStreamSourceSwitchStreamsRequestDeferral[] = L"Windows.Media.Core.IMediaStreamSourceSwitchStreamsRequestDeferral";
typedef struct __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceSwitchStreamsRequestDeferralVtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceSwitchStreamsRequestDeferral* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceSwitchStreamsRequestDeferral* This);
    ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceSwitchStreamsRequestDeferral* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceSwitchStreamsRequestDeferral* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceSwitchStreamsRequestDeferral* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceSwitchStreamsRequestDeferral* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* Complete)(__x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceSwitchStreamsRequestDeferral* This);

    END_INTERFACE
} __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceSwitchStreamsRequestDeferralVtbl;

interface __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceSwitchStreamsRequestDeferral
{
    CONST_VTBL struct __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceSwitchStreamsRequestDeferralVtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceSwitchStreamsRequestDeferral_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceSwitchStreamsRequestDeferral_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceSwitchStreamsRequestDeferral_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceSwitchStreamsRequestDeferral_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceSwitchStreamsRequestDeferral_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceSwitchStreamsRequestDeferral_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceSwitchStreamsRequestDeferral_Complete(This) \
    ((This)->lpVtbl->Complete(This))

#endif /* COBJMACROS */

EXTERN_C const IID IID___x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceSwitchStreamsRequestDeferral;
#endif /* !defined(____x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceSwitchStreamsRequestDeferral_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Interface Windows.Media.Core.IMediaStreamSourceSwitchStreamsRequestedEventArgs
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Interface is a part of the implementation of type Windows.Media.Core.MediaStreamSourceSwitchStreamsRequestedEventArgs
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceSwitchStreamsRequestedEventArgs_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceSwitchStreamsRequestedEventArgs_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Media_Core_IMediaStreamSourceSwitchStreamsRequestedEventArgs[] = L"Windows.Media.Core.IMediaStreamSourceSwitchStreamsRequestedEventArgs";
typedef struct __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceSwitchStreamsRequestedEventArgsVtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceSwitchStreamsRequestedEventArgs* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceSwitchStreamsRequestedEventArgs* This);
    ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceSwitchStreamsRequestedEventArgs* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceSwitchStreamsRequestedEventArgs* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceSwitchStreamsRequestedEventArgs* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceSwitchStreamsRequestedEventArgs* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* get_Request)(__x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceSwitchStreamsRequestedEventArgs* This,
        __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceSwitchStreamsRequest** value);

    END_INTERFACE
} __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceSwitchStreamsRequestedEventArgsVtbl;

interface __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceSwitchStreamsRequestedEventArgs
{
    CONST_VTBL struct __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceSwitchStreamsRequestedEventArgsVtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceSwitchStreamsRequestedEventArgs_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceSwitchStreamsRequestedEventArgs_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceSwitchStreamsRequestedEventArgs_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceSwitchStreamsRequestedEventArgs_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceSwitchStreamsRequestedEventArgs_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceSwitchStreamsRequestedEventArgs_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceSwitchStreamsRequestedEventArgs_get_Request(This, value) \
    ((This)->lpVtbl->get_Request(This, value))

#endif /* COBJMACROS */

EXTERN_C const IID IID___x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceSwitchStreamsRequestedEventArgs;
#endif /* !defined(____x_ABI_CWindows_CMedia_CCore_CIMediaStreamSourceSwitchStreamsRequestedEventArgs_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Interface Windows.Media.Core.IMediaTrack
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____x_ABI_CWindows_CMedia_CCore_CIMediaTrack_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CMedia_CCore_CIMediaTrack_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Media_Core_IMediaTrack[] = L"Windows.Media.Core.IMediaTrack";
typedef struct __x_ABI_CWindows_CMedia_CCore_CIMediaTrackVtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CMedia_CCore_CIMediaTrack* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CMedia_CCore_CIMediaTrack* This);
    ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CMedia_CCore_CIMediaTrack* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CMedia_CCore_CIMediaTrack* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CMedia_CCore_CIMediaTrack* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CMedia_CCore_CIMediaTrack* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* get_Id)(__x_ABI_CWindows_CMedia_CCore_CIMediaTrack* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_Language)(__x_ABI_CWindows_CMedia_CCore_CIMediaTrack* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_TrackKind)(__x_ABI_CWindows_CMedia_CCore_CIMediaTrack* This,
        enum __x_ABI_CWindows_CMedia_CCore_CMediaTrackKind* value);
    HRESULT (STDMETHODCALLTYPE* put_Label)(__x_ABI_CWindows_CMedia_CCore_CIMediaTrack* This,
        HSTRING value);
    HRESULT (STDMETHODCALLTYPE* get_Label)(__x_ABI_CWindows_CMedia_CCore_CIMediaTrack* This,
        HSTRING* value);

    END_INTERFACE
} __x_ABI_CWindows_CMedia_CCore_CIMediaTrackVtbl;

interface __x_ABI_CWindows_CMedia_CCore_CIMediaTrack
{
    CONST_VTBL struct __x_ABI_CWindows_CMedia_CCore_CIMediaTrackVtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __x_ABI_CWindows_CMedia_CCore_CIMediaTrack_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __x_ABI_CWindows_CMedia_CCore_CIMediaTrack_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __x_ABI_CWindows_CMedia_CCore_CIMediaTrack_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __x_ABI_CWindows_CMedia_CCore_CIMediaTrack_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __x_ABI_CWindows_CMedia_CCore_CIMediaTrack_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __x_ABI_CWindows_CMedia_CCore_CIMediaTrack_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __x_ABI_CWindows_CMedia_CCore_CIMediaTrack_get_Id(This, value) \
    ((This)->lpVtbl->get_Id(This, value))

#define __x_ABI_CWindows_CMedia_CCore_CIMediaTrack_get_Language(This, value) \
    ((This)->lpVtbl->get_Language(This, value))

#define __x_ABI_CWindows_CMedia_CCore_CIMediaTrack_get_TrackKind(This, value) \
    ((This)->lpVtbl->get_TrackKind(This, value))

#define __x_ABI_CWindows_CMedia_CCore_CIMediaTrack_put_Label(This, value) \
    ((This)->lpVtbl->put_Label(This, value))

#define __x_ABI_CWindows_CMedia_CCore_CIMediaTrack_get_Label(This, value) \
    ((This)->lpVtbl->get_Label(This, value))

#endif /* COBJMACROS */

EXTERN_C const IID IID___x_ABI_CWindows_CMedia_CCore_CIMediaTrack;
#endif /* !defined(____x_ABI_CWindows_CMedia_CCore_CIMediaTrack_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Interface Windows.Media.Core.IMseSourceBuffer
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Interface is a part of the implementation of type Windows.Media.Core.MseSourceBuffer
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____x_ABI_CWindows_CMedia_CCore_CIMseSourceBuffer_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CMedia_CCore_CIMseSourceBuffer_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Media_Core_IMseSourceBuffer[] = L"Windows.Media.Core.IMseSourceBuffer";
typedef struct __x_ABI_CWindows_CMedia_CCore_CIMseSourceBufferVtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CMedia_CCore_CIMseSourceBuffer* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CMedia_CCore_CIMseSourceBuffer* This);
    ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CMedia_CCore_CIMseSourceBuffer* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CMedia_CCore_CIMseSourceBuffer* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CMedia_CCore_CIMseSourceBuffer* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CMedia_CCore_CIMseSourceBuffer* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* add_UpdateStarting)(__x_ABI_CWindows_CMedia_CCore_CIMseSourceBuffer* This,
        __FITypedEventHandler_2_Windows__CMedia__CCore__CMseSourceBuffer_IInspectable* handler,
        EventRegistrationToken* token);
    HRESULT (STDMETHODCALLTYPE* remove_UpdateStarting)(__x_ABI_CWindows_CMedia_CCore_CIMseSourceBuffer* This,
        EventRegistrationToken token);
    HRESULT (STDMETHODCALLTYPE* add_Updated)(__x_ABI_CWindows_CMedia_CCore_CIMseSourceBuffer* This,
        __FITypedEventHandler_2_Windows__CMedia__CCore__CMseSourceBuffer_IInspectable* handler,
        EventRegistrationToken* token);
    HRESULT (STDMETHODCALLTYPE* remove_Updated)(__x_ABI_CWindows_CMedia_CCore_CIMseSourceBuffer* This,
        EventRegistrationToken token);
    HRESULT (STDMETHODCALLTYPE* add_UpdateEnded)(__x_ABI_CWindows_CMedia_CCore_CIMseSourceBuffer* This,
        __FITypedEventHandler_2_Windows__CMedia__CCore__CMseSourceBuffer_IInspectable* handler,
        EventRegistrationToken* token);
    HRESULT (STDMETHODCALLTYPE* remove_UpdateEnded)(__x_ABI_CWindows_CMedia_CCore_CIMseSourceBuffer* This,
        EventRegistrationToken token);
    HRESULT (STDMETHODCALLTYPE* add_ErrorOccurred)(__x_ABI_CWindows_CMedia_CCore_CIMseSourceBuffer* This,
        __FITypedEventHandler_2_Windows__CMedia__CCore__CMseSourceBuffer_IInspectable* handler,
        EventRegistrationToken* token);
    HRESULT (STDMETHODCALLTYPE* remove_ErrorOccurred)(__x_ABI_CWindows_CMedia_CCore_CIMseSourceBuffer* This,
        EventRegistrationToken token);
    HRESULT (STDMETHODCALLTYPE* add_Aborted)(__x_ABI_CWindows_CMedia_CCore_CIMseSourceBuffer* This,
        __FITypedEventHandler_2_Windows__CMedia__CCore__CMseSourceBuffer_IInspectable* handler,
        EventRegistrationToken* token);
    HRESULT (STDMETHODCALLTYPE* remove_Aborted)(__x_ABI_CWindows_CMedia_CCore_CIMseSourceBuffer* This,
        EventRegistrationToken token);
    HRESULT (STDMETHODCALLTYPE* get_Mode)(__x_ABI_CWindows_CMedia_CCore_CIMseSourceBuffer* This,
        enum __x_ABI_CWindows_CMedia_CCore_CMseAppendMode* value);
    HRESULT (STDMETHODCALLTYPE* put_Mode)(__x_ABI_CWindows_CMedia_CCore_CIMseSourceBuffer* This,
        enum __x_ABI_CWindows_CMedia_CCore_CMseAppendMode value);
    HRESULT (STDMETHODCALLTYPE* get_IsUpdating)(__x_ABI_CWindows_CMedia_CCore_CIMseSourceBuffer* This,
        boolean* value);
    HRESULT (STDMETHODCALLTYPE* get_Buffered)(__x_ABI_CWindows_CMedia_CCore_CIMseSourceBuffer* This,
        __FIVectorView_1_Windows__CMedia__CCore__CMseTimeRange** value);
    HRESULT (STDMETHODCALLTYPE* get_TimestampOffset)(__x_ABI_CWindows_CMedia_CCore_CIMseSourceBuffer* This,
        struct __x_ABI_CWindows_CFoundation_CTimeSpan* value);
    HRESULT (STDMETHODCALLTYPE* put_TimestampOffset)(__x_ABI_CWindows_CMedia_CCore_CIMseSourceBuffer* This,
        struct __x_ABI_CWindows_CFoundation_CTimeSpan value);
    HRESULT (STDMETHODCALLTYPE* get_AppendWindowStart)(__x_ABI_CWindows_CMedia_CCore_CIMseSourceBuffer* This,
        struct __x_ABI_CWindows_CFoundation_CTimeSpan* value);
    HRESULT (STDMETHODCALLTYPE* put_AppendWindowStart)(__x_ABI_CWindows_CMedia_CCore_CIMseSourceBuffer* This,
        struct __x_ABI_CWindows_CFoundation_CTimeSpan value);
    HRESULT (STDMETHODCALLTYPE* get_AppendWindowEnd)(__x_ABI_CWindows_CMedia_CCore_CIMseSourceBuffer* This,
        __FIReference_1_Windows__CFoundation__CTimeSpan** value);
    HRESULT (STDMETHODCALLTYPE* put_AppendWindowEnd)(__x_ABI_CWindows_CMedia_CCore_CIMseSourceBuffer* This,
        __FIReference_1_Windows__CFoundation__CTimeSpan* value);
    HRESULT (STDMETHODCALLTYPE* AppendBuffer)(__x_ABI_CWindows_CMedia_CCore_CIMseSourceBuffer* This,
        __x_ABI_CWindows_CStorage_CStreams_CIBuffer* buffer);
    HRESULT (STDMETHODCALLTYPE* AppendStream)(__x_ABI_CWindows_CMedia_CCore_CIMseSourceBuffer* This,
        __x_ABI_CWindows_CStorage_CStreams_CIInputStream* stream);
    HRESULT (STDMETHODCALLTYPE* AppendStreamMaxSize)(__x_ABI_CWindows_CMedia_CCore_CIMseSourceBuffer* This,
        __x_ABI_CWindows_CStorage_CStreams_CIInputStream* stream,
        UINT64 maxSize);
    HRESULT (STDMETHODCALLTYPE* Abort)(__x_ABI_CWindows_CMedia_CCore_CIMseSourceBuffer* This);
    HRESULT (STDMETHODCALLTYPE* Remove)(__x_ABI_CWindows_CMedia_CCore_CIMseSourceBuffer* This,
        struct __x_ABI_CWindows_CFoundation_CTimeSpan start,
        __FIReference_1_Windows__CFoundation__CTimeSpan* end);

    END_INTERFACE
} __x_ABI_CWindows_CMedia_CCore_CIMseSourceBufferVtbl;

interface __x_ABI_CWindows_CMedia_CCore_CIMseSourceBuffer
{
    CONST_VTBL struct __x_ABI_CWindows_CMedia_CCore_CIMseSourceBufferVtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __x_ABI_CWindows_CMedia_CCore_CIMseSourceBuffer_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __x_ABI_CWindows_CMedia_CCore_CIMseSourceBuffer_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __x_ABI_CWindows_CMedia_CCore_CIMseSourceBuffer_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __x_ABI_CWindows_CMedia_CCore_CIMseSourceBuffer_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __x_ABI_CWindows_CMedia_CCore_CIMseSourceBuffer_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __x_ABI_CWindows_CMedia_CCore_CIMseSourceBuffer_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __x_ABI_CWindows_CMedia_CCore_CIMseSourceBuffer_add_UpdateStarting(This, handler, token) \
    ((This)->lpVtbl->add_UpdateStarting(This, handler, token))

#define __x_ABI_CWindows_CMedia_CCore_CIMseSourceBuffer_remove_UpdateStarting(This, token) \
    ((This)->lpVtbl->remove_UpdateStarting(This, token))

#define __x_ABI_CWindows_CMedia_CCore_CIMseSourceBuffer_add_Updated(This, handler, token) \
    ((This)->lpVtbl->add_Updated(This, handler, token))

#define __x_ABI_CWindows_CMedia_CCore_CIMseSourceBuffer_remove_Updated(This, token) \
    ((This)->lpVtbl->remove_Updated(This, token))

#define __x_ABI_CWindows_CMedia_CCore_CIMseSourceBuffer_add_UpdateEnded(This, handler, token) \
    ((This)->lpVtbl->add_UpdateEnded(This, handler, token))

#define __x_ABI_CWindows_CMedia_CCore_CIMseSourceBuffer_remove_UpdateEnded(This, token) \
    ((This)->lpVtbl->remove_UpdateEnded(This, token))

#define __x_ABI_CWindows_CMedia_CCore_CIMseSourceBuffer_add_ErrorOccurred(This, handler, token) \
    ((This)->lpVtbl->add_ErrorOccurred(This, handler, token))

#define __x_ABI_CWindows_CMedia_CCore_CIMseSourceBuffer_remove_ErrorOccurred(This, token) \
    ((This)->lpVtbl->remove_ErrorOccurred(This, token))

#define __x_ABI_CWindows_CMedia_CCore_CIMseSourceBuffer_add_Aborted(This, handler, token) \
    ((This)->lpVtbl->add_Aborted(This, handler, token))

#define __x_ABI_CWindows_CMedia_CCore_CIMseSourceBuffer_remove_Aborted(This, token) \
    ((This)->lpVtbl->remove_Aborted(This, token))

#define __x_ABI_CWindows_CMedia_CCore_CIMseSourceBuffer_get_Mode(This, value) \
    ((This)->lpVtbl->get_Mode(This, value))

#define __x_ABI_CWindows_CMedia_CCore_CIMseSourceBuffer_put_Mode(This, value) \
    ((This)->lpVtbl->put_Mode(This, value))

#define __x_ABI_CWindows_CMedia_CCore_CIMseSourceBuffer_get_IsUpdating(This, value) \
    ((This)->lpVtbl->get_IsUpdating(This, value))

#define __x_ABI_CWindows_CMedia_CCore_CIMseSourceBuffer_get_Buffered(This, value) \
    ((This)->lpVtbl->get_Buffered(This, value))

#define __x_ABI_CWindows_CMedia_CCore_CIMseSourceBuffer_get_TimestampOffset(This, value) \
    ((This)->lpVtbl->get_TimestampOffset(This, value))

#define __x_ABI_CWindows_CMedia_CCore_CIMseSourceBuffer_put_TimestampOffset(This, value) \
    ((This)->lpVtbl->put_TimestampOffset(This, value))

#define __x_ABI_CWindows_CMedia_CCore_CIMseSourceBuffer_get_AppendWindowStart(This, value) \
    ((This)->lpVtbl->get_AppendWindowStart(This, value))

#define __x_ABI_CWindows_CMedia_CCore_CIMseSourceBuffer_put_AppendWindowStart(This, value) \
    ((This)->lpVtbl->put_AppendWindowStart(This, value))

#define __x_ABI_CWindows_CMedia_CCore_CIMseSourceBuffer_get_AppendWindowEnd(This, value) \
    ((This)->lpVtbl->get_AppendWindowEnd(This, value))

#define __x_ABI_CWindows_CMedia_CCore_CIMseSourceBuffer_put_AppendWindowEnd(This, value) \
    ((This)->lpVtbl->put_AppendWindowEnd(This, value))

#define __x_ABI_CWindows_CMedia_CCore_CIMseSourceBuffer_AppendBuffer(This, buffer) \
    ((This)->lpVtbl->AppendBuffer(This, buffer))

#define __x_ABI_CWindows_CMedia_CCore_CIMseSourceBuffer_AppendStream(This, stream) \
    ((This)->lpVtbl->AppendStream(This, stream))

#define __x_ABI_CWindows_CMedia_CCore_CIMseSourceBuffer_AppendStreamMaxSize(This, stream, maxSize) \
    ((This)->lpVtbl->AppendStreamMaxSize(This, stream, maxSize))

#define __x_ABI_CWindows_CMedia_CCore_CIMseSourceBuffer_Abort(This) \
    ((This)->lpVtbl->Abort(This))

#define __x_ABI_CWindows_CMedia_CCore_CIMseSourceBuffer_Remove(This, start, end) \
    ((This)->lpVtbl->Remove(This, start, end))

#endif /* COBJMACROS */

EXTERN_C const IID IID___x_ABI_CWindows_CMedia_CCore_CIMseSourceBuffer;
#endif /* !defined(____x_ABI_CWindows_CMedia_CCore_CIMseSourceBuffer_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Interface Windows.Media.Core.IMseSourceBufferList
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Interface is a part of the implementation of type Windows.Media.Core.MseSourceBufferList
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____x_ABI_CWindows_CMedia_CCore_CIMseSourceBufferList_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CMedia_CCore_CIMseSourceBufferList_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Media_Core_IMseSourceBufferList[] = L"Windows.Media.Core.IMseSourceBufferList";
typedef struct __x_ABI_CWindows_CMedia_CCore_CIMseSourceBufferListVtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CMedia_CCore_CIMseSourceBufferList* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CMedia_CCore_CIMseSourceBufferList* This);
    ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CMedia_CCore_CIMseSourceBufferList* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CMedia_CCore_CIMseSourceBufferList* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CMedia_CCore_CIMseSourceBufferList* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CMedia_CCore_CIMseSourceBufferList* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* add_SourceBufferAdded)(__x_ABI_CWindows_CMedia_CCore_CIMseSourceBufferList* This,
        __FITypedEventHandler_2_Windows__CMedia__CCore__CMseSourceBufferList_IInspectable* handler,
        EventRegistrationToken* token);
    HRESULT (STDMETHODCALLTYPE* remove_SourceBufferAdded)(__x_ABI_CWindows_CMedia_CCore_CIMseSourceBufferList* This,
        EventRegistrationToken token);
    HRESULT (STDMETHODCALLTYPE* add_SourceBufferRemoved)(__x_ABI_CWindows_CMedia_CCore_CIMseSourceBufferList* This,
        __FITypedEventHandler_2_Windows__CMedia__CCore__CMseSourceBufferList_IInspectable* handler,
        EventRegistrationToken* token);
    HRESULT (STDMETHODCALLTYPE* remove_SourceBufferRemoved)(__x_ABI_CWindows_CMedia_CCore_CIMseSourceBufferList* This,
        EventRegistrationToken token);
    HRESULT (STDMETHODCALLTYPE* get_Buffers)(__x_ABI_CWindows_CMedia_CCore_CIMseSourceBufferList* This,
        __FIVectorView_1_Windows__CMedia__CCore__CMseSourceBuffer** value);

    END_INTERFACE
} __x_ABI_CWindows_CMedia_CCore_CIMseSourceBufferListVtbl;

interface __x_ABI_CWindows_CMedia_CCore_CIMseSourceBufferList
{
    CONST_VTBL struct __x_ABI_CWindows_CMedia_CCore_CIMseSourceBufferListVtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __x_ABI_CWindows_CMedia_CCore_CIMseSourceBufferList_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __x_ABI_CWindows_CMedia_CCore_CIMseSourceBufferList_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __x_ABI_CWindows_CMedia_CCore_CIMseSourceBufferList_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __x_ABI_CWindows_CMedia_CCore_CIMseSourceBufferList_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __x_ABI_CWindows_CMedia_CCore_CIMseSourceBufferList_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __x_ABI_CWindows_CMedia_CCore_CIMseSourceBufferList_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __x_ABI_CWindows_CMedia_CCore_CIMseSourceBufferList_add_SourceBufferAdded(This, handler, token) \
    ((This)->lpVtbl->add_SourceBufferAdded(This, handler, token))

#define __x_ABI_CWindows_CMedia_CCore_CIMseSourceBufferList_remove_SourceBufferAdded(This, token) \
    ((This)->lpVtbl->remove_SourceBufferAdded(This, token))

#define __x_ABI_CWindows_CMedia_CCore_CIMseSourceBufferList_add_SourceBufferRemoved(This, handler, token) \
    ((This)->lpVtbl->add_SourceBufferRemoved(This, handler, token))

#define __x_ABI_CWindows_CMedia_CCore_CIMseSourceBufferList_remove_SourceBufferRemoved(This, token) \
    ((This)->lpVtbl->remove_SourceBufferRemoved(This, token))

#define __x_ABI_CWindows_CMedia_CCore_CIMseSourceBufferList_get_Buffers(This, value) \
    ((This)->lpVtbl->get_Buffers(This, value))

#endif /* COBJMACROS */

EXTERN_C const IID IID___x_ABI_CWindows_CMedia_CCore_CIMseSourceBufferList;
#endif /* !defined(____x_ABI_CWindows_CMedia_CCore_CIMseSourceBufferList_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Interface Windows.Media.Core.IMseStreamSource
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Interface is a part of the implementation of type Windows.Media.Core.MseStreamSource
 *
 * Any object which implements this interface must also implement the following interfaces:
 *     Windows.Media.Core.IMediaSource
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____x_ABI_CWindows_CMedia_CCore_CIMseStreamSource_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CMedia_CCore_CIMseStreamSource_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Media_Core_IMseStreamSource[] = L"Windows.Media.Core.IMseStreamSource";
typedef struct __x_ABI_CWindows_CMedia_CCore_CIMseStreamSourceVtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CMedia_CCore_CIMseStreamSource* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CMedia_CCore_CIMseStreamSource* This);
    ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CMedia_CCore_CIMseStreamSource* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CMedia_CCore_CIMseStreamSource* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CMedia_CCore_CIMseStreamSource* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CMedia_CCore_CIMseStreamSource* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* add_Opened)(__x_ABI_CWindows_CMedia_CCore_CIMseStreamSource* This,
        __FITypedEventHandler_2_Windows__CMedia__CCore__CMseStreamSource_IInspectable* handler,
        EventRegistrationToken* token);
    HRESULT (STDMETHODCALLTYPE* remove_Opened)(__x_ABI_CWindows_CMedia_CCore_CIMseStreamSource* This,
        EventRegistrationToken token);
    HRESULT (STDMETHODCALLTYPE* add_Ended)(__x_ABI_CWindows_CMedia_CCore_CIMseStreamSource* This,
        __FITypedEventHandler_2_Windows__CMedia__CCore__CMseStreamSource_IInspectable* handler,
        EventRegistrationToken* token);
    HRESULT (STDMETHODCALLTYPE* remove_Ended)(__x_ABI_CWindows_CMedia_CCore_CIMseStreamSource* This,
        EventRegistrationToken token);
    HRESULT (STDMETHODCALLTYPE* add_Closed)(__x_ABI_CWindows_CMedia_CCore_CIMseStreamSource* This,
        __FITypedEventHandler_2_Windows__CMedia__CCore__CMseStreamSource_IInspectable* handler,
        EventRegistrationToken* token);
    HRESULT (STDMETHODCALLTYPE* remove_Closed)(__x_ABI_CWindows_CMedia_CCore_CIMseStreamSource* This,
        EventRegistrationToken token);
    HRESULT (STDMETHODCALLTYPE* get_SourceBuffers)(__x_ABI_CWindows_CMedia_CCore_CIMseStreamSource* This,
        __x_ABI_CWindows_CMedia_CCore_CIMseSourceBufferList** value);
    HRESULT (STDMETHODCALLTYPE* get_ActiveSourceBuffers)(__x_ABI_CWindows_CMedia_CCore_CIMseStreamSource* This,
        __x_ABI_CWindows_CMedia_CCore_CIMseSourceBufferList** value);
    HRESULT (STDMETHODCALLTYPE* get_ReadyState)(__x_ABI_CWindows_CMedia_CCore_CIMseStreamSource* This,
        enum __x_ABI_CWindows_CMedia_CCore_CMseReadyState* value);
    HRESULT (STDMETHODCALLTYPE* get_Duration)(__x_ABI_CWindows_CMedia_CCore_CIMseStreamSource* This,
        __FIReference_1_Windows__CFoundation__CTimeSpan** value);
    HRESULT (STDMETHODCALLTYPE* put_Duration)(__x_ABI_CWindows_CMedia_CCore_CIMseStreamSource* This,
        __FIReference_1_Windows__CFoundation__CTimeSpan* value);
    HRESULT (STDMETHODCALLTYPE* AddSourceBuffer)(__x_ABI_CWindows_CMedia_CCore_CIMseStreamSource* This,
        HSTRING mimeType,
        __x_ABI_CWindows_CMedia_CCore_CIMseSourceBuffer** buffer);
    HRESULT (STDMETHODCALLTYPE* RemoveSourceBuffer)(__x_ABI_CWindows_CMedia_CCore_CIMseStreamSource* This,
        __x_ABI_CWindows_CMedia_CCore_CIMseSourceBuffer* buffer);
    HRESULT (STDMETHODCALLTYPE* EndOfStream)(__x_ABI_CWindows_CMedia_CCore_CIMseStreamSource* This,
        enum __x_ABI_CWindows_CMedia_CCore_CMseEndOfStreamStatus status);

    END_INTERFACE
} __x_ABI_CWindows_CMedia_CCore_CIMseStreamSourceVtbl;

interface __x_ABI_CWindows_CMedia_CCore_CIMseStreamSource
{
    CONST_VTBL struct __x_ABI_CWindows_CMedia_CCore_CIMseStreamSourceVtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __x_ABI_CWindows_CMedia_CCore_CIMseStreamSource_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __x_ABI_CWindows_CMedia_CCore_CIMseStreamSource_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __x_ABI_CWindows_CMedia_CCore_CIMseStreamSource_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __x_ABI_CWindows_CMedia_CCore_CIMseStreamSource_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __x_ABI_CWindows_CMedia_CCore_CIMseStreamSource_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __x_ABI_CWindows_CMedia_CCore_CIMseStreamSource_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __x_ABI_CWindows_CMedia_CCore_CIMseStreamSource_add_Opened(This, handler, token) \
    ((This)->lpVtbl->add_Opened(This, handler, token))

#define __x_ABI_CWindows_CMedia_CCore_CIMseStreamSource_remove_Opened(This, token) \
    ((This)->lpVtbl->remove_Opened(This, token))

#define __x_ABI_CWindows_CMedia_CCore_CIMseStreamSource_add_Ended(This, handler, token) \
    ((This)->lpVtbl->add_Ended(This, handler, token))

#define __x_ABI_CWindows_CMedia_CCore_CIMseStreamSource_remove_Ended(This, token) \
    ((This)->lpVtbl->remove_Ended(This, token))

#define __x_ABI_CWindows_CMedia_CCore_CIMseStreamSource_add_Closed(This, handler, token) \
    ((This)->lpVtbl->add_Closed(This, handler, token))

#define __x_ABI_CWindows_CMedia_CCore_CIMseStreamSource_remove_Closed(This, token) \
    ((This)->lpVtbl->remove_Closed(This, token))

#define __x_ABI_CWindows_CMedia_CCore_CIMseStreamSource_get_SourceBuffers(This, value) \
    ((This)->lpVtbl->get_SourceBuffers(This, value))

#define __x_ABI_CWindows_CMedia_CCore_CIMseStreamSource_get_ActiveSourceBuffers(This, value) \
    ((This)->lpVtbl->get_ActiveSourceBuffers(This, value))

#define __x_ABI_CWindows_CMedia_CCore_CIMseStreamSource_get_ReadyState(This, value) \
    ((This)->lpVtbl->get_ReadyState(This, value))

#define __x_ABI_CWindows_CMedia_CCore_CIMseStreamSource_get_Duration(This, value) \
    ((This)->lpVtbl->get_Duration(This, value))

#define __x_ABI_CWindows_CMedia_CCore_CIMseStreamSource_put_Duration(This, value) \
    ((This)->lpVtbl->put_Duration(This, value))

#define __x_ABI_CWindows_CMedia_CCore_CIMseStreamSource_AddSourceBuffer(This, mimeType, buffer) \
    ((This)->lpVtbl->AddSourceBuffer(This, mimeType, buffer))

#define __x_ABI_CWindows_CMedia_CCore_CIMseStreamSource_RemoveSourceBuffer(This, buffer) \
    ((This)->lpVtbl->RemoveSourceBuffer(This, buffer))

#define __x_ABI_CWindows_CMedia_CCore_CIMseStreamSource_EndOfStream(This, status) \
    ((This)->lpVtbl->EndOfStream(This, status))

#endif /* COBJMACROS */

EXTERN_C const IID IID___x_ABI_CWindows_CMedia_CCore_CIMseStreamSource;
#endif /* !defined(____x_ABI_CWindows_CMedia_CCore_CIMseStreamSource_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Interface Windows.Media.Core.IMseStreamSource2
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 5.0
 *
 * Interface is a part of the implementation of type Windows.Media.Core.MseStreamSource
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x50000
#if !defined(____x_ABI_CWindows_CMedia_CCore_CIMseStreamSource2_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CMedia_CCore_CIMseStreamSource2_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Media_Core_IMseStreamSource2[] = L"Windows.Media.Core.IMseStreamSource2";
typedef struct __x_ABI_CWindows_CMedia_CCore_CIMseStreamSource2Vtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CMedia_CCore_CIMseStreamSource2* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CMedia_CCore_CIMseStreamSource2* This);
    ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CMedia_CCore_CIMseStreamSource2* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CMedia_CCore_CIMseStreamSource2* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CMedia_CCore_CIMseStreamSource2* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CMedia_CCore_CIMseStreamSource2* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* get_LiveSeekableRange)(__x_ABI_CWindows_CMedia_CCore_CIMseStreamSource2* This,
        __FIReference_1_Windows__CMedia__CCore__CMseTimeRange** value);
    HRESULT (STDMETHODCALLTYPE* put_LiveSeekableRange)(__x_ABI_CWindows_CMedia_CCore_CIMseStreamSource2* This,
        __FIReference_1_Windows__CMedia__CCore__CMseTimeRange* value);

    END_INTERFACE
} __x_ABI_CWindows_CMedia_CCore_CIMseStreamSource2Vtbl;

interface __x_ABI_CWindows_CMedia_CCore_CIMseStreamSource2
{
    CONST_VTBL struct __x_ABI_CWindows_CMedia_CCore_CIMseStreamSource2Vtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __x_ABI_CWindows_CMedia_CCore_CIMseStreamSource2_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __x_ABI_CWindows_CMedia_CCore_CIMseStreamSource2_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __x_ABI_CWindows_CMedia_CCore_CIMseStreamSource2_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __x_ABI_CWindows_CMedia_CCore_CIMseStreamSource2_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __x_ABI_CWindows_CMedia_CCore_CIMseStreamSource2_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __x_ABI_CWindows_CMedia_CCore_CIMseStreamSource2_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __x_ABI_CWindows_CMedia_CCore_CIMseStreamSource2_get_LiveSeekableRange(This, value) \
    ((This)->lpVtbl->get_LiveSeekableRange(This, value))

#define __x_ABI_CWindows_CMedia_CCore_CIMseStreamSource2_put_LiveSeekableRange(This, value) \
    ((This)->lpVtbl->put_LiveSeekableRange(This, value))

#endif /* COBJMACROS */

EXTERN_C const IID IID___x_ABI_CWindows_CMedia_CCore_CIMseStreamSource2;
#endif /* !defined(____x_ABI_CWindows_CMedia_CCore_CIMseStreamSource2_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x50000

/*
 *
 * Interface Windows.Media.Core.IMseStreamSourceStatics
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Interface is a part of the implementation of type Windows.Media.Core.MseStreamSource
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____x_ABI_CWindows_CMedia_CCore_CIMseStreamSourceStatics_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CMedia_CCore_CIMseStreamSourceStatics_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Media_Core_IMseStreamSourceStatics[] = L"Windows.Media.Core.IMseStreamSourceStatics";
typedef struct __x_ABI_CWindows_CMedia_CCore_CIMseStreamSourceStaticsVtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CMedia_CCore_CIMseStreamSourceStatics* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CMedia_CCore_CIMseStreamSourceStatics* This);
    ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CMedia_CCore_CIMseStreamSourceStatics* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CMedia_CCore_CIMseStreamSourceStatics* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CMedia_CCore_CIMseStreamSourceStatics* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CMedia_CCore_CIMseStreamSourceStatics* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* IsContentTypeSupported)(__x_ABI_CWindows_CMedia_CCore_CIMseStreamSourceStatics* This,
        HSTRING contentType,
        boolean* value);

    END_INTERFACE
} __x_ABI_CWindows_CMedia_CCore_CIMseStreamSourceStaticsVtbl;

interface __x_ABI_CWindows_CMedia_CCore_CIMseStreamSourceStatics
{
    CONST_VTBL struct __x_ABI_CWindows_CMedia_CCore_CIMseStreamSourceStaticsVtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __x_ABI_CWindows_CMedia_CCore_CIMseStreamSourceStatics_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __x_ABI_CWindows_CMedia_CCore_CIMseStreamSourceStatics_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __x_ABI_CWindows_CMedia_CCore_CIMseStreamSourceStatics_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __x_ABI_CWindows_CMedia_CCore_CIMseStreamSourceStatics_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __x_ABI_CWindows_CMedia_CCore_CIMseStreamSourceStatics_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __x_ABI_CWindows_CMedia_CCore_CIMseStreamSourceStatics_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __x_ABI_CWindows_CMedia_CCore_CIMseStreamSourceStatics_IsContentTypeSupported(This, contentType, value) \
    ((This)->lpVtbl->IsContentTypeSupported(This, contentType, value))

#endif /* COBJMACROS */

EXTERN_C const IID IID___x_ABI_CWindows_CMedia_CCore_CIMseStreamSourceStatics;
#endif /* !defined(____x_ABI_CWindows_CMedia_CCore_CIMseStreamSourceStatics_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Interface Windows.Media.Core.ISceneAnalysisEffect
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Interface is a part of the implementation of type Windows.Media.Core.SceneAnalysisEffect
 *
 * Any object which implements this interface must also implement the following interfaces:
 *     Windows.Media.IMediaExtension
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____x_ABI_CWindows_CMedia_CCore_CISceneAnalysisEffect_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CMedia_CCore_CISceneAnalysisEffect_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Media_Core_ISceneAnalysisEffect[] = L"Windows.Media.Core.ISceneAnalysisEffect";
typedef struct __x_ABI_CWindows_CMedia_CCore_CISceneAnalysisEffectVtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CMedia_CCore_CISceneAnalysisEffect* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CMedia_CCore_CISceneAnalysisEffect* This);
    ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CMedia_CCore_CISceneAnalysisEffect* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CMedia_CCore_CISceneAnalysisEffect* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CMedia_CCore_CISceneAnalysisEffect* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CMedia_CCore_CISceneAnalysisEffect* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* get_HighDynamicRangeAnalyzer)(__x_ABI_CWindows_CMedia_CCore_CISceneAnalysisEffect* This,
        __x_ABI_CWindows_CMedia_CCore_CIHighDynamicRangeControl** value);
    HRESULT (STDMETHODCALLTYPE* put_DesiredAnalysisInterval)(__x_ABI_CWindows_CMedia_CCore_CISceneAnalysisEffect* This,
        struct __x_ABI_CWindows_CFoundation_CTimeSpan value);
    HRESULT (STDMETHODCALLTYPE* get_DesiredAnalysisInterval)(__x_ABI_CWindows_CMedia_CCore_CISceneAnalysisEffect* This,
        struct __x_ABI_CWindows_CFoundation_CTimeSpan* value);
    HRESULT (STDMETHODCALLTYPE* add_SceneAnalyzed)(__x_ABI_CWindows_CMedia_CCore_CISceneAnalysisEffect* This,
        __FITypedEventHandler_2_Windows__CMedia__CCore__CSceneAnalysisEffect_Windows__CMedia__CCore__CSceneAnalyzedEventArgs* handler,
        EventRegistrationToken* cookie);
    HRESULT (STDMETHODCALLTYPE* remove_SceneAnalyzed)(__x_ABI_CWindows_CMedia_CCore_CISceneAnalysisEffect* This,
        EventRegistrationToken cookie);

    END_INTERFACE
} __x_ABI_CWindows_CMedia_CCore_CISceneAnalysisEffectVtbl;

interface __x_ABI_CWindows_CMedia_CCore_CISceneAnalysisEffect
{
    CONST_VTBL struct __x_ABI_CWindows_CMedia_CCore_CISceneAnalysisEffectVtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __x_ABI_CWindows_CMedia_CCore_CISceneAnalysisEffect_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __x_ABI_CWindows_CMedia_CCore_CISceneAnalysisEffect_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __x_ABI_CWindows_CMedia_CCore_CISceneAnalysisEffect_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __x_ABI_CWindows_CMedia_CCore_CISceneAnalysisEffect_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __x_ABI_CWindows_CMedia_CCore_CISceneAnalysisEffect_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __x_ABI_CWindows_CMedia_CCore_CISceneAnalysisEffect_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __x_ABI_CWindows_CMedia_CCore_CISceneAnalysisEffect_get_HighDynamicRangeAnalyzer(This, value) \
    ((This)->lpVtbl->get_HighDynamicRangeAnalyzer(This, value))

#define __x_ABI_CWindows_CMedia_CCore_CISceneAnalysisEffect_put_DesiredAnalysisInterval(This, value) \
    ((This)->lpVtbl->put_DesiredAnalysisInterval(This, value))

#define __x_ABI_CWindows_CMedia_CCore_CISceneAnalysisEffect_get_DesiredAnalysisInterval(This, value) \
    ((This)->lpVtbl->get_DesiredAnalysisInterval(This, value))

#define __x_ABI_CWindows_CMedia_CCore_CISceneAnalysisEffect_add_SceneAnalyzed(This, handler, cookie) \
    ((This)->lpVtbl->add_SceneAnalyzed(This, handler, cookie))

#define __x_ABI_CWindows_CMedia_CCore_CISceneAnalysisEffect_remove_SceneAnalyzed(This, cookie) \
    ((This)->lpVtbl->remove_SceneAnalyzed(This, cookie))

#endif /* COBJMACROS */

EXTERN_C const IID IID___x_ABI_CWindows_CMedia_CCore_CISceneAnalysisEffect;
#endif /* !defined(____x_ABI_CWindows_CMedia_CCore_CISceneAnalysisEffect_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Interface Windows.Media.Core.ISceneAnalysisEffectFrame
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Interface is a part of the implementation of type Windows.Media.Core.SceneAnalysisEffectFrame
 *
 * Any object which implements this interface must also implement the following interfaces:
 *     Windows.Media.IMediaFrame
 *     Windows.Foundation.IClosable
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____x_ABI_CWindows_CMedia_CCore_CISceneAnalysisEffectFrame_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CMedia_CCore_CISceneAnalysisEffectFrame_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Media_Core_ISceneAnalysisEffectFrame[] = L"Windows.Media.Core.ISceneAnalysisEffectFrame";
typedef struct __x_ABI_CWindows_CMedia_CCore_CISceneAnalysisEffectFrameVtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CMedia_CCore_CISceneAnalysisEffectFrame* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CMedia_CCore_CISceneAnalysisEffectFrame* This);
    ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CMedia_CCore_CISceneAnalysisEffectFrame* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CMedia_CCore_CISceneAnalysisEffectFrame* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CMedia_CCore_CISceneAnalysisEffectFrame* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CMedia_CCore_CISceneAnalysisEffectFrame* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* get_FrameControlValues)(__x_ABI_CWindows_CMedia_CCore_CISceneAnalysisEffectFrame* This,
        __x_ABI_CWindows_CMedia_CCapture_CICapturedFrameControlValues** value);
    HRESULT (STDMETHODCALLTYPE* get_HighDynamicRange)(__x_ABI_CWindows_CMedia_CCore_CISceneAnalysisEffectFrame* This,
        __x_ABI_CWindows_CMedia_CCore_CIHighDynamicRangeOutput** value);

    END_INTERFACE
} __x_ABI_CWindows_CMedia_CCore_CISceneAnalysisEffectFrameVtbl;

interface __x_ABI_CWindows_CMedia_CCore_CISceneAnalysisEffectFrame
{
    CONST_VTBL struct __x_ABI_CWindows_CMedia_CCore_CISceneAnalysisEffectFrameVtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __x_ABI_CWindows_CMedia_CCore_CISceneAnalysisEffectFrame_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __x_ABI_CWindows_CMedia_CCore_CISceneAnalysisEffectFrame_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __x_ABI_CWindows_CMedia_CCore_CISceneAnalysisEffectFrame_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __x_ABI_CWindows_CMedia_CCore_CISceneAnalysisEffectFrame_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __x_ABI_CWindows_CMedia_CCore_CISceneAnalysisEffectFrame_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __x_ABI_CWindows_CMedia_CCore_CISceneAnalysisEffectFrame_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __x_ABI_CWindows_CMedia_CCore_CISceneAnalysisEffectFrame_get_FrameControlValues(This, value) \
    ((This)->lpVtbl->get_FrameControlValues(This, value))

#define __x_ABI_CWindows_CMedia_CCore_CISceneAnalysisEffectFrame_get_HighDynamicRange(This, value) \
    ((This)->lpVtbl->get_HighDynamicRange(This, value))

#endif /* COBJMACROS */

EXTERN_C const IID IID___x_ABI_CWindows_CMedia_CCore_CISceneAnalysisEffectFrame;
#endif /* !defined(____x_ABI_CWindows_CMedia_CCore_CISceneAnalysisEffectFrame_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Interface Windows.Media.Core.ISceneAnalysisEffectFrame2
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 5.0
 *
 * Interface is a part of the implementation of type Windows.Media.Core.SceneAnalysisEffectFrame
 *
 * Any object which implements this interface must also implement the following interfaces:
 *     Windows.Media.IMediaFrame
 *     Windows.Foundation.IClosable
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x50000
#if !defined(____x_ABI_CWindows_CMedia_CCore_CISceneAnalysisEffectFrame2_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CMedia_CCore_CISceneAnalysisEffectFrame2_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Media_Core_ISceneAnalysisEffectFrame2[] = L"Windows.Media.Core.ISceneAnalysisEffectFrame2";
typedef struct __x_ABI_CWindows_CMedia_CCore_CISceneAnalysisEffectFrame2Vtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CMedia_CCore_CISceneAnalysisEffectFrame2* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CMedia_CCore_CISceneAnalysisEffectFrame2* This);
    ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CMedia_CCore_CISceneAnalysisEffectFrame2* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CMedia_CCore_CISceneAnalysisEffectFrame2* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CMedia_CCore_CISceneAnalysisEffectFrame2* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CMedia_CCore_CISceneAnalysisEffectFrame2* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* get_AnalysisRecommendation)(__x_ABI_CWindows_CMedia_CCore_CISceneAnalysisEffectFrame2* This,
        enum __x_ABI_CWindows_CMedia_CCore_CSceneAnalysisRecommendation* value);

    END_INTERFACE
} __x_ABI_CWindows_CMedia_CCore_CISceneAnalysisEffectFrame2Vtbl;

interface __x_ABI_CWindows_CMedia_CCore_CISceneAnalysisEffectFrame2
{
    CONST_VTBL struct __x_ABI_CWindows_CMedia_CCore_CISceneAnalysisEffectFrame2Vtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __x_ABI_CWindows_CMedia_CCore_CISceneAnalysisEffectFrame2_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __x_ABI_CWindows_CMedia_CCore_CISceneAnalysisEffectFrame2_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __x_ABI_CWindows_CMedia_CCore_CISceneAnalysisEffectFrame2_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __x_ABI_CWindows_CMedia_CCore_CISceneAnalysisEffectFrame2_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __x_ABI_CWindows_CMedia_CCore_CISceneAnalysisEffectFrame2_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __x_ABI_CWindows_CMedia_CCore_CISceneAnalysisEffectFrame2_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __x_ABI_CWindows_CMedia_CCore_CISceneAnalysisEffectFrame2_get_AnalysisRecommendation(This, value) \
    ((This)->lpVtbl->get_AnalysisRecommendation(This, value))

#endif /* COBJMACROS */

EXTERN_C const IID IID___x_ABI_CWindows_CMedia_CCore_CISceneAnalysisEffectFrame2;
#endif /* !defined(____x_ABI_CWindows_CMedia_CCore_CISceneAnalysisEffectFrame2_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x50000

/*
 *
 * Interface Windows.Media.Core.ISceneAnalyzedEventArgs
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Interface is a part of the implementation of type Windows.Media.Core.SceneAnalyzedEventArgs
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____x_ABI_CWindows_CMedia_CCore_CISceneAnalyzedEventArgs_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CMedia_CCore_CISceneAnalyzedEventArgs_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Media_Core_ISceneAnalyzedEventArgs[] = L"Windows.Media.Core.ISceneAnalyzedEventArgs";
typedef struct __x_ABI_CWindows_CMedia_CCore_CISceneAnalyzedEventArgsVtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CMedia_CCore_CISceneAnalyzedEventArgs* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CMedia_CCore_CISceneAnalyzedEventArgs* This);
    ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CMedia_CCore_CISceneAnalyzedEventArgs* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CMedia_CCore_CISceneAnalyzedEventArgs* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CMedia_CCore_CISceneAnalyzedEventArgs* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CMedia_CCore_CISceneAnalyzedEventArgs* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* get_ResultFrame)(__x_ABI_CWindows_CMedia_CCore_CISceneAnalyzedEventArgs* This,
        __x_ABI_CWindows_CMedia_CCore_CISceneAnalysisEffectFrame** value);

    END_INTERFACE
} __x_ABI_CWindows_CMedia_CCore_CISceneAnalyzedEventArgsVtbl;

interface __x_ABI_CWindows_CMedia_CCore_CISceneAnalyzedEventArgs
{
    CONST_VTBL struct __x_ABI_CWindows_CMedia_CCore_CISceneAnalyzedEventArgsVtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __x_ABI_CWindows_CMedia_CCore_CISceneAnalyzedEventArgs_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __x_ABI_CWindows_CMedia_CCore_CISceneAnalyzedEventArgs_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __x_ABI_CWindows_CMedia_CCore_CISceneAnalyzedEventArgs_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __x_ABI_CWindows_CMedia_CCore_CISceneAnalyzedEventArgs_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __x_ABI_CWindows_CMedia_CCore_CISceneAnalyzedEventArgs_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __x_ABI_CWindows_CMedia_CCore_CISceneAnalyzedEventArgs_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __x_ABI_CWindows_CMedia_CCore_CISceneAnalyzedEventArgs_get_ResultFrame(This, value) \
    ((This)->lpVtbl->get_ResultFrame(This, value))

#endif /* COBJMACROS */

EXTERN_C const IID IID___x_ABI_CWindows_CMedia_CCore_CISceneAnalyzedEventArgs;
#endif /* !defined(____x_ABI_CWindows_CMedia_CCore_CISceneAnalyzedEventArgs_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Interface Windows.Media.Core.ISingleSelectMediaTrackList
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____x_ABI_CWindows_CMedia_CCore_CISingleSelectMediaTrackList_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CMedia_CCore_CISingleSelectMediaTrackList_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Media_Core_ISingleSelectMediaTrackList[] = L"Windows.Media.Core.ISingleSelectMediaTrackList";
typedef struct __x_ABI_CWindows_CMedia_CCore_CISingleSelectMediaTrackListVtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CMedia_CCore_CISingleSelectMediaTrackList* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CMedia_CCore_CISingleSelectMediaTrackList* This);
    ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CMedia_CCore_CISingleSelectMediaTrackList* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CMedia_CCore_CISingleSelectMediaTrackList* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CMedia_CCore_CISingleSelectMediaTrackList* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CMedia_CCore_CISingleSelectMediaTrackList* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* add_SelectedIndexChanged)(__x_ABI_CWindows_CMedia_CCore_CISingleSelectMediaTrackList* This,
        __FITypedEventHandler_2_Windows__CMedia__CCore__CISingleSelectMediaTrackList_IInspectable* handler,
        EventRegistrationToken* token);
    HRESULT (STDMETHODCALLTYPE* remove_SelectedIndexChanged)(__x_ABI_CWindows_CMedia_CCore_CISingleSelectMediaTrackList* This,
        EventRegistrationToken token);
    HRESULT (STDMETHODCALLTYPE* put_SelectedIndex)(__x_ABI_CWindows_CMedia_CCore_CISingleSelectMediaTrackList* This,
        INT32 value);
    HRESULT (STDMETHODCALLTYPE* get_SelectedIndex)(__x_ABI_CWindows_CMedia_CCore_CISingleSelectMediaTrackList* This,
        INT32* value);

    END_INTERFACE
} __x_ABI_CWindows_CMedia_CCore_CISingleSelectMediaTrackListVtbl;

interface __x_ABI_CWindows_CMedia_CCore_CISingleSelectMediaTrackList
{
    CONST_VTBL struct __x_ABI_CWindows_CMedia_CCore_CISingleSelectMediaTrackListVtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __x_ABI_CWindows_CMedia_CCore_CISingleSelectMediaTrackList_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __x_ABI_CWindows_CMedia_CCore_CISingleSelectMediaTrackList_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __x_ABI_CWindows_CMedia_CCore_CISingleSelectMediaTrackList_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __x_ABI_CWindows_CMedia_CCore_CISingleSelectMediaTrackList_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __x_ABI_CWindows_CMedia_CCore_CISingleSelectMediaTrackList_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __x_ABI_CWindows_CMedia_CCore_CISingleSelectMediaTrackList_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __x_ABI_CWindows_CMedia_CCore_CISingleSelectMediaTrackList_add_SelectedIndexChanged(This, handler, token) \
    ((This)->lpVtbl->add_SelectedIndexChanged(This, handler, token))

#define __x_ABI_CWindows_CMedia_CCore_CISingleSelectMediaTrackList_remove_SelectedIndexChanged(This, token) \
    ((This)->lpVtbl->remove_SelectedIndexChanged(This, token))

#define __x_ABI_CWindows_CMedia_CCore_CISingleSelectMediaTrackList_put_SelectedIndex(This, value) \
    ((This)->lpVtbl->put_SelectedIndex(This, value))

#define __x_ABI_CWindows_CMedia_CCore_CISingleSelectMediaTrackList_get_SelectedIndex(This, value) \
    ((This)->lpVtbl->get_SelectedIndex(This, value))

#endif /* COBJMACROS */

EXTERN_C const IID IID___x_ABI_CWindows_CMedia_CCore_CISingleSelectMediaTrackList;
#endif /* !defined(____x_ABI_CWindows_CMedia_CCore_CISingleSelectMediaTrackList_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Interface Windows.Media.Core.ISpeechCue
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 4.0
 *
 * Interface is a part of the implementation of type Windows.Media.Core.SpeechCue
 *
 * Any object which implements this interface must also implement the following interfaces:
 *     Windows.Media.Core.IMediaCue
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x40000
#if !defined(____x_ABI_CWindows_CMedia_CCore_CISpeechCue_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CMedia_CCore_CISpeechCue_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Media_Core_ISpeechCue[] = L"Windows.Media.Core.ISpeechCue";
typedef struct __x_ABI_CWindows_CMedia_CCore_CISpeechCueVtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CMedia_CCore_CISpeechCue* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CMedia_CCore_CISpeechCue* This);
    ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CMedia_CCore_CISpeechCue* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CMedia_CCore_CISpeechCue* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CMedia_CCore_CISpeechCue* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CMedia_CCore_CISpeechCue* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* get_Text)(__x_ABI_CWindows_CMedia_CCore_CISpeechCue* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* put_Text)(__x_ABI_CWindows_CMedia_CCore_CISpeechCue* This,
        HSTRING value);
    HRESULT (STDMETHODCALLTYPE* get_StartPositionInInput)(__x_ABI_CWindows_CMedia_CCore_CISpeechCue* This,
        __FIReference_1_int** value);
    HRESULT (STDMETHODCALLTYPE* put_StartPositionInInput)(__x_ABI_CWindows_CMedia_CCore_CISpeechCue* This,
        __FIReference_1_int* value);
    HRESULT (STDMETHODCALLTYPE* get_EndPositionInInput)(__x_ABI_CWindows_CMedia_CCore_CISpeechCue* This,
        __FIReference_1_int** value);
    HRESULT (STDMETHODCALLTYPE* put_EndPositionInInput)(__x_ABI_CWindows_CMedia_CCore_CISpeechCue* This,
        __FIReference_1_int* value);

    END_INTERFACE
} __x_ABI_CWindows_CMedia_CCore_CISpeechCueVtbl;

interface __x_ABI_CWindows_CMedia_CCore_CISpeechCue
{
    CONST_VTBL struct __x_ABI_CWindows_CMedia_CCore_CISpeechCueVtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __x_ABI_CWindows_CMedia_CCore_CISpeechCue_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __x_ABI_CWindows_CMedia_CCore_CISpeechCue_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __x_ABI_CWindows_CMedia_CCore_CISpeechCue_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __x_ABI_CWindows_CMedia_CCore_CISpeechCue_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __x_ABI_CWindows_CMedia_CCore_CISpeechCue_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __x_ABI_CWindows_CMedia_CCore_CISpeechCue_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __x_ABI_CWindows_CMedia_CCore_CISpeechCue_get_Text(This, value) \
    ((This)->lpVtbl->get_Text(This, value))

#define __x_ABI_CWindows_CMedia_CCore_CISpeechCue_put_Text(This, value) \
    ((This)->lpVtbl->put_Text(This, value))

#define __x_ABI_CWindows_CMedia_CCore_CISpeechCue_get_StartPositionInInput(This, value) \
    ((This)->lpVtbl->get_StartPositionInInput(This, value))

#define __x_ABI_CWindows_CMedia_CCore_CISpeechCue_put_StartPositionInInput(This, value) \
    ((This)->lpVtbl->put_StartPositionInInput(This, value))

#define __x_ABI_CWindows_CMedia_CCore_CISpeechCue_get_EndPositionInInput(This, value) \
    ((This)->lpVtbl->get_EndPositionInInput(This, value))

#define __x_ABI_CWindows_CMedia_CCore_CISpeechCue_put_EndPositionInInput(This, value) \
    ((This)->lpVtbl->put_EndPositionInInput(This, value))

#endif /* COBJMACROS */

EXTERN_C const IID IID___x_ABI_CWindows_CMedia_CCore_CISpeechCue;
#endif /* !defined(____x_ABI_CWindows_CMedia_CCore_CISpeechCue_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x40000

/*
 *
 * Interface Windows.Media.Core.ITimedMetadataStreamDescriptor
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 6.0
 *
 * Interface is a part of the implementation of type Windows.Media.Core.TimedMetadataStreamDescriptor
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x60000
#if !defined(____x_ABI_CWindows_CMedia_CCore_CITimedMetadataStreamDescriptor_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CMedia_CCore_CITimedMetadataStreamDescriptor_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Media_Core_ITimedMetadataStreamDescriptor[] = L"Windows.Media.Core.ITimedMetadataStreamDescriptor";
typedef struct __x_ABI_CWindows_CMedia_CCore_CITimedMetadataStreamDescriptorVtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CMedia_CCore_CITimedMetadataStreamDescriptor* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CMedia_CCore_CITimedMetadataStreamDescriptor* This);
    ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CMedia_CCore_CITimedMetadataStreamDescriptor* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CMedia_CCore_CITimedMetadataStreamDescriptor* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CMedia_CCore_CITimedMetadataStreamDescriptor* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CMedia_CCore_CITimedMetadataStreamDescriptor* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* get_EncodingProperties)(__x_ABI_CWindows_CMedia_CCore_CITimedMetadataStreamDescriptor* This,
        __x_ABI_CWindows_CMedia_CMediaProperties_CIMediaEncodingProperties** value);
    HRESULT (STDMETHODCALLTYPE* Copy)(__x_ABI_CWindows_CMedia_CCore_CITimedMetadataStreamDescriptor* This,
        __x_ABI_CWindows_CMedia_CCore_CIMediaStreamDescriptor** result);

    END_INTERFACE
} __x_ABI_CWindows_CMedia_CCore_CITimedMetadataStreamDescriptorVtbl;

interface __x_ABI_CWindows_CMedia_CCore_CITimedMetadataStreamDescriptor
{
    CONST_VTBL struct __x_ABI_CWindows_CMedia_CCore_CITimedMetadataStreamDescriptorVtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __x_ABI_CWindows_CMedia_CCore_CITimedMetadataStreamDescriptor_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __x_ABI_CWindows_CMedia_CCore_CITimedMetadataStreamDescriptor_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __x_ABI_CWindows_CMedia_CCore_CITimedMetadataStreamDescriptor_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __x_ABI_CWindows_CMedia_CCore_CITimedMetadataStreamDescriptor_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __x_ABI_CWindows_CMedia_CCore_CITimedMetadataStreamDescriptor_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __x_ABI_CWindows_CMedia_CCore_CITimedMetadataStreamDescriptor_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __x_ABI_CWindows_CMedia_CCore_CITimedMetadataStreamDescriptor_get_EncodingProperties(This, value) \
    ((This)->lpVtbl->get_EncodingProperties(This, value))

#define __x_ABI_CWindows_CMedia_CCore_CITimedMetadataStreamDescriptor_Copy(This, result) \
    ((This)->lpVtbl->Copy(This, result))

#endif /* COBJMACROS */

EXTERN_C const IID IID___x_ABI_CWindows_CMedia_CCore_CITimedMetadataStreamDescriptor;
#endif /* !defined(____x_ABI_CWindows_CMedia_CCore_CITimedMetadataStreamDescriptor_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x60000

/*
 *
 * Interface Windows.Media.Core.ITimedMetadataStreamDescriptorFactory
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 6.0
 *
 * Interface is a part of the implementation of type Windows.Media.Core.TimedMetadataStreamDescriptor
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x60000
#if !defined(____x_ABI_CWindows_CMedia_CCore_CITimedMetadataStreamDescriptorFactory_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CMedia_CCore_CITimedMetadataStreamDescriptorFactory_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Media_Core_ITimedMetadataStreamDescriptorFactory[] = L"Windows.Media.Core.ITimedMetadataStreamDescriptorFactory";
typedef struct __x_ABI_CWindows_CMedia_CCore_CITimedMetadataStreamDescriptorFactoryVtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CMedia_CCore_CITimedMetadataStreamDescriptorFactory* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CMedia_CCore_CITimedMetadataStreamDescriptorFactory* This);
    ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CMedia_CCore_CITimedMetadataStreamDescriptorFactory* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CMedia_CCore_CITimedMetadataStreamDescriptorFactory* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CMedia_CCore_CITimedMetadataStreamDescriptorFactory* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CMedia_CCore_CITimedMetadataStreamDescriptorFactory* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* Create)(__x_ABI_CWindows_CMedia_CCore_CITimedMetadataStreamDescriptorFactory* This,
        __x_ABI_CWindows_CMedia_CMediaProperties_CIMediaEncodingProperties* encodingProperties,
        __x_ABI_CWindows_CMedia_CCore_CIMediaStreamDescriptor** result);

    END_INTERFACE
} __x_ABI_CWindows_CMedia_CCore_CITimedMetadataStreamDescriptorFactoryVtbl;

interface __x_ABI_CWindows_CMedia_CCore_CITimedMetadataStreamDescriptorFactory
{
    CONST_VTBL struct __x_ABI_CWindows_CMedia_CCore_CITimedMetadataStreamDescriptorFactoryVtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __x_ABI_CWindows_CMedia_CCore_CITimedMetadataStreamDescriptorFactory_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __x_ABI_CWindows_CMedia_CCore_CITimedMetadataStreamDescriptorFactory_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __x_ABI_CWindows_CMedia_CCore_CITimedMetadataStreamDescriptorFactory_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __x_ABI_CWindows_CMedia_CCore_CITimedMetadataStreamDescriptorFactory_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __x_ABI_CWindows_CMedia_CCore_CITimedMetadataStreamDescriptorFactory_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __x_ABI_CWindows_CMedia_CCore_CITimedMetadataStreamDescriptorFactory_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __x_ABI_CWindows_CMedia_CCore_CITimedMetadataStreamDescriptorFactory_Create(This, encodingProperties, result) \
    ((This)->lpVtbl->Create(This, encodingProperties, result))

#endif /* COBJMACROS */

EXTERN_C const IID IID___x_ABI_CWindows_CMedia_CCore_CITimedMetadataStreamDescriptorFactory;
#endif /* !defined(____x_ABI_CWindows_CMedia_CCore_CITimedMetadataStreamDescriptorFactory_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x60000

/*
 *
 * Interface Windows.Media.Core.ITimedMetadataTrack
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Interface is a part of the implementation of type Windows.Media.Core.TimedMetadataTrack
 *
 * Any object which implements this interface must also implement the following interfaces:
 *     Windows.Media.Core.IMediaTrack
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____x_ABI_CWindows_CMedia_CCore_CITimedMetadataTrack_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CMedia_CCore_CITimedMetadataTrack_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Media_Core_ITimedMetadataTrack[] = L"Windows.Media.Core.ITimedMetadataTrack";
typedef struct __x_ABI_CWindows_CMedia_CCore_CITimedMetadataTrackVtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CMedia_CCore_CITimedMetadataTrack* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CMedia_CCore_CITimedMetadataTrack* This);
    ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CMedia_CCore_CITimedMetadataTrack* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CMedia_CCore_CITimedMetadataTrack* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CMedia_CCore_CITimedMetadataTrack* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CMedia_CCore_CITimedMetadataTrack* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* add_CueEntered)(__x_ABI_CWindows_CMedia_CCore_CITimedMetadataTrack* This,
        __FITypedEventHandler_2_Windows__CMedia__CCore__CTimedMetadataTrack_Windows__CMedia__CCore__CMediaCueEventArgs* handler,
        EventRegistrationToken* token);
    HRESULT (STDMETHODCALLTYPE* remove_CueEntered)(__x_ABI_CWindows_CMedia_CCore_CITimedMetadataTrack* This,
        EventRegistrationToken token);
    HRESULT (STDMETHODCALLTYPE* add_CueExited)(__x_ABI_CWindows_CMedia_CCore_CITimedMetadataTrack* This,
        __FITypedEventHandler_2_Windows__CMedia__CCore__CTimedMetadataTrack_Windows__CMedia__CCore__CMediaCueEventArgs* handler,
        EventRegistrationToken* token);
    HRESULT (STDMETHODCALLTYPE* remove_CueExited)(__x_ABI_CWindows_CMedia_CCore_CITimedMetadataTrack* This,
        EventRegistrationToken token);
    HRESULT (STDMETHODCALLTYPE* add_TrackFailed)(__x_ABI_CWindows_CMedia_CCore_CITimedMetadataTrack* This,
        __FITypedEventHandler_2_Windows__CMedia__CCore__CTimedMetadataTrack_Windows__CMedia__CCore__CTimedMetadataTrackFailedEventArgs* handler,
        EventRegistrationToken* token);
    HRESULT (STDMETHODCALLTYPE* remove_TrackFailed)(__x_ABI_CWindows_CMedia_CCore_CITimedMetadataTrack* This,
        EventRegistrationToken token);
    HRESULT (STDMETHODCALLTYPE* get_Cues)(__x_ABI_CWindows_CMedia_CCore_CITimedMetadataTrack* This,
        __FIVectorView_1_Windows__CMedia__CCore__CIMediaCue** value);
    HRESULT (STDMETHODCALLTYPE* get_ActiveCues)(__x_ABI_CWindows_CMedia_CCore_CITimedMetadataTrack* This,
        __FIVectorView_1_Windows__CMedia__CCore__CIMediaCue** value);
    HRESULT (STDMETHODCALLTYPE* get_TimedMetadataKind)(__x_ABI_CWindows_CMedia_CCore_CITimedMetadataTrack* This,
        enum __x_ABI_CWindows_CMedia_CCore_CTimedMetadataKind* value);
    HRESULT (STDMETHODCALLTYPE* get_DispatchType)(__x_ABI_CWindows_CMedia_CCore_CITimedMetadataTrack* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* AddCue)(__x_ABI_CWindows_CMedia_CCore_CITimedMetadataTrack* This,
        __x_ABI_CWindows_CMedia_CCore_CIMediaCue* cue);
    HRESULT (STDMETHODCALLTYPE* RemoveCue)(__x_ABI_CWindows_CMedia_CCore_CITimedMetadataTrack* This,
        __x_ABI_CWindows_CMedia_CCore_CIMediaCue* cue);

    END_INTERFACE
} __x_ABI_CWindows_CMedia_CCore_CITimedMetadataTrackVtbl;

interface __x_ABI_CWindows_CMedia_CCore_CITimedMetadataTrack
{
    CONST_VTBL struct __x_ABI_CWindows_CMedia_CCore_CITimedMetadataTrackVtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __x_ABI_CWindows_CMedia_CCore_CITimedMetadataTrack_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __x_ABI_CWindows_CMedia_CCore_CITimedMetadataTrack_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __x_ABI_CWindows_CMedia_CCore_CITimedMetadataTrack_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __x_ABI_CWindows_CMedia_CCore_CITimedMetadataTrack_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __x_ABI_CWindows_CMedia_CCore_CITimedMetadataTrack_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __x_ABI_CWindows_CMedia_CCore_CITimedMetadataTrack_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __x_ABI_CWindows_CMedia_CCore_CITimedMetadataTrack_add_CueEntered(This, handler, token) \
    ((This)->lpVtbl->add_CueEntered(This, handler, token))

#define __x_ABI_CWindows_CMedia_CCore_CITimedMetadataTrack_remove_CueEntered(This, token) \
    ((This)->lpVtbl->remove_CueEntered(This, token))

#define __x_ABI_CWindows_CMedia_CCore_CITimedMetadataTrack_add_CueExited(This, handler, token) \
    ((This)->lpVtbl->add_CueExited(This, handler, token))

#define __x_ABI_CWindows_CMedia_CCore_CITimedMetadataTrack_remove_CueExited(This, token) \
    ((This)->lpVtbl->remove_CueExited(This, token))

#define __x_ABI_CWindows_CMedia_CCore_CITimedMetadataTrack_add_TrackFailed(This, handler, token) \
    ((This)->lpVtbl->add_TrackFailed(This, handler, token))

#define __x_ABI_CWindows_CMedia_CCore_CITimedMetadataTrack_remove_TrackFailed(This, token) \
    ((This)->lpVtbl->remove_TrackFailed(This, token))

#define __x_ABI_CWindows_CMedia_CCore_CITimedMetadataTrack_get_Cues(This, value) \
    ((This)->lpVtbl->get_Cues(This, value))

#define __x_ABI_CWindows_CMedia_CCore_CITimedMetadataTrack_get_ActiveCues(This, value) \
    ((This)->lpVtbl->get_ActiveCues(This, value))

#define __x_ABI_CWindows_CMedia_CCore_CITimedMetadataTrack_get_TimedMetadataKind(This, value) \
    ((This)->lpVtbl->get_TimedMetadataKind(This, value))

#define __x_ABI_CWindows_CMedia_CCore_CITimedMetadataTrack_get_DispatchType(This, value) \
    ((This)->lpVtbl->get_DispatchType(This, value))

#define __x_ABI_CWindows_CMedia_CCore_CITimedMetadataTrack_AddCue(This, cue) \
    ((This)->lpVtbl->AddCue(This, cue))

#define __x_ABI_CWindows_CMedia_CCore_CITimedMetadataTrack_RemoveCue(This, cue) \
    ((This)->lpVtbl->RemoveCue(This, cue))

#endif /* COBJMACROS */

EXTERN_C const IID IID___x_ABI_CWindows_CMedia_CCore_CITimedMetadataTrack;
#endif /* !defined(____x_ABI_CWindows_CMedia_CCore_CITimedMetadataTrack_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Interface Windows.Media.Core.ITimedMetadataTrack2
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 3.0
 *
 * Interface is a part of the implementation of type Windows.Media.Core.TimedMetadataTrack
 *
 * Any object which implements this interface must also implement the following interfaces:
 *     Windows.Media.Core.ITimedMetadataTrack
 *     Windows.Media.Core.IMediaTrack
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x30000
#if !defined(____x_ABI_CWindows_CMedia_CCore_CITimedMetadataTrack2_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CMedia_CCore_CITimedMetadataTrack2_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Media_Core_ITimedMetadataTrack2[] = L"Windows.Media.Core.ITimedMetadataTrack2";
typedef struct __x_ABI_CWindows_CMedia_CCore_CITimedMetadataTrack2Vtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CMedia_CCore_CITimedMetadataTrack2* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CMedia_CCore_CITimedMetadataTrack2* This);
    ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CMedia_CCore_CITimedMetadataTrack2* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CMedia_CCore_CITimedMetadataTrack2* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CMedia_CCore_CITimedMetadataTrack2* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CMedia_CCore_CITimedMetadataTrack2* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* get_PlaybackItem)(__x_ABI_CWindows_CMedia_CCore_CITimedMetadataTrack2* This,
        __x_ABI_CWindows_CMedia_CPlayback_CIMediaPlaybackItem** value);
    HRESULT (STDMETHODCALLTYPE* get_Name)(__x_ABI_CWindows_CMedia_CCore_CITimedMetadataTrack2* This,
        HSTRING* value);

    END_INTERFACE
} __x_ABI_CWindows_CMedia_CCore_CITimedMetadataTrack2Vtbl;

interface __x_ABI_CWindows_CMedia_CCore_CITimedMetadataTrack2
{
    CONST_VTBL struct __x_ABI_CWindows_CMedia_CCore_CITimedMetadataTrack2Vtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __x_ABI_CWindows_CMedia_CCore_CITimedMetadataTrack2_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __x_ABI_CWindows_CMedia_CCore_CITimedMetadataTrack2_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __x_ABI_CWindows_CMedia_CCore_CITimedMetadataTrack2_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __x_ABI_CWindows_CMedia_CCore_CITimedMetadataTrack2_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __x_ABI_CWindows_CMedia_CCore_CITimedMetadataTrack2_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __x_ABI_CWindows_CMedia_CCore_CITimedMetadataTrack2_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __x_ABI_CWindows_CMedia_CCore_CITimedMetadataTrack2_get_PlaybackItem(This, value) \
    ((This)->lpVtbl->get_PlaybackItem(This, value))

#define __x_ABI_CWindows_CMedia_CCore_CITimedMetadataTrack2_get_Name(This, value) \
    ((This)->lpVtbl->get_Name(This, value))

#endif /* COBJMACROS */

EXTERN_C const IID IID___x_ABI_CWindows_CMedia_CCore_CITimedMetadataTrack2;
#endif /* !defined(____x_ABI_CWindows_CMedia_CCore_CITimedMetadataTrack2_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x30000

/*
 *
 * Interface Windows.Media.Core.ITimedMetadataTrackError
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Interface is a part of the implementation of type Windows.Media.Core.TimedMetadataTrackError
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____x_ABI_CWindows_CMedia_CCore_CITimedMetadataTrackError_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CMedia_CCore_CITimedMetadataTrackError_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Media_Core_ITimedMetadataTrackError[] = L"Windows.Media.Core.ITimedMetadataTrackError";
typedef struct __x_ABI_CWindows_CMedia_CCore_CITimedMetadataTrackErrorVtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CMedia_CCore_CITimedMetadataTrackError* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CMedia_CCore_CITimedMetadataTrackError* This);
    ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CMedia_CCore_CITimedMetadataTrackError* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CMedia_CCore_CITimedMetadataTrackError* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CMedia_CCore_CITimedMetadataTrackError* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CMedia_CCore_CITimedMetadataTrackError* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* get_ErrorCode)(__x_ABI_CWindows_CMedia_CCore_CITimedMetadataTrackError* This,
        enum __x_ABI_CWindows_CMedia_CCore_CTimedMetadataTrackErrorCode* value);
    HRESULT (STDMETHODCALLTYPE* get_ExtendedError)(__x_ABI_CWindows_CMedia_CCore_CITimedMetadataTrackError* This,
        HRESULT* value);

    END_INTERFACE
} __x_ABI_CWindows_CMedia_CCore_CITimedMetadataTrackErrorVtbl;

interface __x_ABI_CWindows_CMedia_CCore_CITimedMetadataTrackError
{
    CONST_VTBL struct __x_ABI_CWindows_CMedia_CCore_CITimedMetadataTrackErrorVtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __x_ABI_CWindows_CMedia_CCore_CITimedMetadataTrackError_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __x_ABI_CWindows_CMedia_CCore_CITimedMetadataTrackError_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __x_ABI_CWindows_CMedia_CCore_CITimedMetadataTrackError_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __x_ABI_CWindows_CMedia_CCore_CITimedMetadataTrackError_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __x_ABI_CWindows_CMedia_CCore_CITimedMetadataTrackError_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __x_ABI_CWindows_CMedia_CCore_CITimedMetadataTrackError_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __x_ABI_CWindows_CMedia_CCore_CITimedMetadataTrackError_get_ErrorCode(This, value) \
    ((This)->lpVtbl->get_ErrorCode(This, value))

#define __x_ABI_CWindows_CMedia_CCore_CITimedMetadataTrackError_get_ExtendedError(This, value) \
    ((This)->lpVtbl->get_ExtendedError(This, value))

#endif /* COBJMACROS */

EXTERN_C const IID IID___x_ABI_CWindows_CMedia_CCore_CITimedMetadataTrackError;
#endif /* !defined(____x_ABI_CWindows_CMedia_CCore_CITimedMetadataTrackError_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Interface Windows.Media.Core.ITimedMetadataTrackFactory
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Interface is a part of the implementation of type Windows.Media.Core.TimedMetadataTrack
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____x_ABI_CWindows_CMedia_CCore_CITimedMetadataTrackFactory_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CMedia_CCore_CITimedMetadataTrackFactory_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Media_Core_ITimedMetadataTrackFactory[] = L"Windows.Media.Core.ITimedMetadataTrackFactory";
typedef struct __x_ABI_CWindows_CMedia_CCore_CITimedMetadataTrackFactoryVtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CMedia_CCore_CITimedMetadataTrackFactory* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CMedia_CCore_CITimedMetadataTrackFactory* This);
    ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CMedia_CCore_CITimedMetadataTrackFactory* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CMedia_CCore_CITimedMetadataTrackFactory* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CMedia_CCore_CITimedMetadataTrackFactory* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CMedia_CCore_CITimedMetadataTrackFactory* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* Create)(__x_ABI_CWindows_CMedia_CCore_CITimedMetadataTrackFactory* This,
        HSTRING id,
        HSTRING language,
        enum __x_ABI_CWindows_CMedia_CCore_CTimedMetadataKind kind,
        __x_ABI_CWindows_CMedia_CCore_CITimedMetadataTrack** value);

    END_INTERFACE
} __x_ABI_CWindows_CMedia_CCore_CITimedMetadataTrackFactoryVtbl;

interface __x_ABI_CWindows_CMedia_CCore_CITimedMetadataTrackFactory
{
    CONST_VTBL struct __x_ABI_CWindows_CMedia_CCore_CITimedMetadataTrackFactoryVtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __x_ABI_CWindows_CMedia_CCore_CITimedMetadataTrackFactory_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __x_ABI_CWindows_CMedia_CCore_CITimedMetadataTrackFactory_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __x_ABI_CWindows_CMedia_CCore_CITimedMetadataTrackFactory_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __x_ABI_CWindows_CMedia_CCore_CITimedMetadataTrackFactory_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __x_ABI_CWindows_CMedia_CCore_CITimedMetadataTrackFactory_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __x_ABI_CWindows_CMedia_CCore_CITimedMetadataTrackFactory_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __x_ABI_CWindows_CMedia_CCore_CITimedMetadataTrackFactory_Create(This, id, language, kind, value) \
    ((This)->lpVtbl->Create(This, id, language, kind, value))

#endif /* COBJMACROS */

EXTERN_C const IID IID___x_ABI_CWindows_CMedia_CCore_CITimedMetadataTrackFactory;
#endif /* !defined(____x_ABI_CWindows_CMedia_CCore_CITimedMetadataTrackFactory_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Interface Windows.Media.Core.ITimedMetadataTrackFailedEventArgs
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Interface is a part of the implementation of type Windows.Media.Core.TimedMetadataTrackFailedEventArgs
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____x_ABI_CWindows_CMedia_CCore_CITimedMetadataTrackFailedEventArgs_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CMedia_CCore_CITimedMetadataTrackFailedEventArgs_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Media_Core_ITimedMetadataTrackFailedEventArgs[] = L"Windows.Media.Core.ITimedMetadataTrackFailedEventArgs";
typedef struct __x_ABI_CWindows_CMedia_CCore_CITimedMetadataTrackFailedEventArgsVtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CMedia_CCore_CITimedMetadataTrackFailedEventArgs* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CMedia_CCore_CITimedMetadataTrackFailedEventArgs* This);
    ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CMedia_CCore_CITimedMetadataTrackFailedEventArgs* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CMedia_CCore_CITimedMetadataTrackFailedEventArgs* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CMedia_CCore_CITimedMetadataTrackFailedEventArgs* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CMedia_CCore_CITimedMetadataTrackFailedEventArgs* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* get_Error)(__x_ABI_CWindows_CMedia_CCore_CITimedMetadataTrackFailedEventArgs* This,
        __x_ABI_CWindows_CMedia_CCore_CITimedMetadataTrackError** value);

    END_INTERFACE
} __x_ABI_CWindows_CMedia_CCore_CITimedMetadataTrackFailedEventArgsVtbl;

interface __x_ABI_CWindows_CMedia_CCore_CITimedMetadataTrackFailedEventArgs
{
    CONST_VTBL struct __x_ABI_CWindows_CMedia_CCore_CITimedMetadataTrackFailedEventArgsVtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __x_ABI_CWindows_CMedia_CCore_CITimedMetadataTrackFailedEventArgs_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __x_ABI_CWindows_CMedia_CCore_CITimedMetadataTrackFailedEventArgs_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __x_ABI_CWindows_CMedia_CCore_CITimedMetadataTrackFailedEventArgs_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __x_ABI_CWindows_CMedia_CCore_CITimedMetadataTrackFailedEventArgs_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __x_ABI_CWindows_CMedia_CCore_CITimedMetadataTrackFailedEventArgs_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __x_ABI_CWindows_CMedia_CCore_CITimedMetadataTrackFailedEventArgs_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __x_ABI_CWindows_CMedia_CCore_CITimedMetadataTrackFailedEventArgs_get_Error(This, value) \
    ((This)->lpVtbl->get_Error(This, value))

#endif /* COBJMACROS */

EXTERN_C const IID IID___x_ABI_CWindows_CMedia_CCore_CITimedMetadataTrackFailedEventArgs;
#endif /* !defined(____x_ABI_CWindows_CMedia_CCore_CITimedMetadataTrackFailedEventArgs_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Interface Windows.Media.Core.ITimedMetadataTrackProvider
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 4.0
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x40000
#if !defined(____x_ABI_CWindows_CMedia_CCore_CITimedMetadataTrackProvider_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CMedia_CCore_CITimedMetadataTrackProvider_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Media_Core_ITimedMetadataTrackProvider[] = L"Windows.Media.Core.ITimedMetadataTrackProvider";
typedef struct __x_ABI_CWindows_CMedia_CCore_CITimedMetadataTrackProviderVtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CMedia_CCore_CITimedMetadataTrackProvider* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CMedia_CCore_CITimedMetadataTrackProvider* This);
    ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CMedia_CCore_CITimedMetadataTrackProvider* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CMedia_CCore_CITimedMetadataTrackProvider* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CMedia_CCore_CITimedMetadataTrackProvider* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CMedia_CCore_CITimedMetadataTrackProvider* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* get_TimedMetadataTracks)(__x_ABI_CWindows_CMedia_CCore_CITimedMetadataTrackProvider* This,
        __FIVectorView_1_Windows__CMedia__CCore__CTimedMetadataTrack** value);

    END_INTERFACE
} __x_ABI_CWindows_CMedia_CCore_CITimedMetadataTrackProviderVtbl;

interface __x_ABI_CWindows_CMedia_CCore_CITimedMetadataTrackProvider
{
    CONST_VTBL struct __x_ABI_CWindows_CMedia_CCore_CITimedMetadataTrackProviderVtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __x_ABI_CWindows_CMedia_CCore_CITimedMetadataTrackProvider_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __x_ABI_CWindows_CMedia_CCore_CITimedMetadataTrackProvider_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __x_ABI_CWindows_CMedia_CCore_CITimedMetadataTrackProvider_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __x_ABI_CWindows_CMedia_CCore_CITimedMetadataTrackProvider_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __x_ABI_CWindows_CMedia_CCore_CITimedMetadataTrackProvider_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __x_ABI_CWindows_CMedia_CCore_CITimedMetadataTrackProvider_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __x_ABI_CWindows_CMedia_CCore_CITimedMetadataTrackProvider_get_TimedMetadataTracks(This, value) \
    ((This)->lpVtbl->get_TimedMetadataTracks(This, value))

#endif /* COBJMACROS */

EXTERN_C const IID IID___x_ABI_CWindows_CMedia_CCore_CITimedMetadataTrackProvider;
#endif /* !defined(____x_ABI_CWindows_CMedia_CCore_CITimedMetadataTrackProvider_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x40000

/*
 *
 * Interface Windows.Media.Core.ITimedTextCue
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Interface is a part of the implementation of type Windows.Media.Core.TimedTextCue
 *
 * Any object which implements this interface must also implement the following interfaces:
 *     Windows.Media.Core.IMediaCue
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____x_ABI_CWindows_CMedia_CCore_CITimedTextCue_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CMedia_CCore_CITimedTextCue_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Media_Core_ITimedTextCue[] = L"Windows.Media.Core.ITimedTextCue";
typedef struct __x_ABI_CWindows_CMedia_CCore_CITimedTextCueVtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CMedia_CCore_CITimedTextCue* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CMedia_CCore_CITimedTextCue* This);
    ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CMedia_CCore_CITimedTextCue* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CMedia_CCore_CITimedTextCue* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CMedia_CCore_CITimedTextCue* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CMedia_CCore_CITimedTextCue* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* get_CueRegion)(__x_ABI_CWindows_CMedia_CCore_CITimedTextCue* This,
        __x_ABI_CWindows_CMedia_CCore_CITimedTextRegion** value);
    HRESULT (STDMETHODCALLTYPE* put_CueRegion)(__x_ABI_CWindows_CMedia_CCore_CITimedTextCue* This,
        __x_ABI_CWindows_CMedia_CCore_CITimedTextRegion* value);
    HRESULT (STDMETHODCALLTYPE* get_CueStyle)(__x_ABI_CWindows_CMedia_CCore_CITimedTextCue* This,
        __x_ABI_CWindows_CMedia_CCore_CITimedTextStyle** value);
    HRESULT (STDMETHODCALLTYPE* put_CueStyle)(__x_ABI_CWindows_CMedia_CCore_CITimedTextCue* This,
        __x_ABI_CWindows_CMedia_CCore_CITimedTextStyle* value);
    HRESULT (STDMETHODCALLTYPE* get_Lines)(__x_ABI_CWindows_CMedia_CCore_CITimedTextCue* This,
        __FIVector_1_Windows__CMedia__CCore__CTimedTextLine** value);

    END_INTERFACE
} __x_ABI_CWindows_CMedia_CCore_CITimedTextCueVtbl;

interface __x_ABI_CWindows_CMedia_CCore_CITimedTextCue
{
    CONST_VTBL struct __x_ABI_CWindows_CMedia_CCore_CITimedTextCueVtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __x_ABI_CWindows_CMedia_CCore_CITimedTextCue_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __x_ABI_CWindows_CMedia_CCore_CITimedTextCue_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __x_ABI_CWindows_CMedia_CCore_CITimedTextCue_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __x_ABI_CWindows_CMedia_CCore_CITimedTextCue_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __x_ABI_CWindows_CMedia_CCore_CITimedTextCue_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __x_ABI_CWindows_CMedia_CCore_CITimedTextCue_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __x_ABI_CWindows_CMedia_CCore_CITimedTextCue_get_CueRegion(This, value) \
    ((This)->lpVtbl->get_CueRegion(This, value))

#define __x_ABI_CWindows_CMedia_CCore_CITimedTextCue_put_CueRegion(This, value) \
    ((This)->lpVtbl->put_CueRegion(This, value))

#define __x_ABI_CWindows_CMedia_CCore_CITimedTextCue_get_CueStyle(This, value) \
    ((This)->lpVtbl->get_CueStyle(This, value))

#define __x_ABI_CWindows_CMedia_CCore_CITimedTextCue_put_CueStyle(This, value) \
    ((This)->lpVtbl->put_CueStyle(This, value))

#define __x_ABI_CWindows_CMedia_CCore_CITimedTextCue_get_Lines(This, value) \
    ((This)->lpVtbl->get_Lines(This, value))

#endif /* COBJMACROS */

EXTERN_C const IID IID___x_ABI_CWindows_CMedia_CCore_CITimedTextCue;
#endif /* !defined(____x_ABI_CWindows_CMedia_CCore_CITimedTextCue_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Interface Windows.Media.Core.ITimedTextLine
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Interface is a part of the implementation of type Windows.Media.Core.TimedTextLine
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____x_ABI_CWindows_CMedia_CCore_CITimedTextLine_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CMedia_CCore_CITimedTextLine_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Media_Core_ITimedTextLine[] = L"Windows.Media.Core.ITimedTextLine";
typedef struct __x_ABI_CWindows_CMedia_CCore_CITimedTextLineVtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CMedia_CCore_CITimedTextLine* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CMedia_CCore_CITimedTextLine* This);
    ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CMedia_CCore_CITimedTextLine* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CMedia_CCore_CITimedTextLine* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CMedia_CCore_CITimedTextLine* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CMedia_CCore_CITimedTextLine* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* get_Text)(__x_ABI_CWindows_CMedia_CCore_CITimedTextLine* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* put_Text)(__x_ABI_CWindows_CMedia_CCore_CITimedTextLine* This,
        HSTRING value);
    HRESULT (STDMETHODCALLTYPE* get_Subformats)(__x_ABI_CWindows_CMedia_CCore_CITimedTextLine* This,
        __FIVector_1_Windows__CMedia__CCore__CTimedTextSubformat** value);

    END_INTERFACE
} __x_ABI_CWindows_CMedia_CCore_CITimedTextLineVtbl;

interface __x_ABI_CWindows_CMedia_CCore_CITimedTextLine
{
    CONST_VTBL struct __x_ABI_CWindows_CMedia_CCore_CITimedTextLineVtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __x_ABI_CWindows_CMedia_CCore_CITimedTextLine_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __x_ABI_CWindows_CMedia_CCore_CITimedTextLine_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __x_ABI_CWindows_CMedia_CCore_CITimedTextLine_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __x_ABI_CWindows_CMedia_CCore_CITimedTextLine_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __x_ABI_CWindows_CMedia_CCore_CITimedTextLine_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __x_ABI_CWindows_CMedia_CCore_CITimedTextLine_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __x_ABI_CWindows_CMedia_CCore_CITimedTextLine_get_Text(This, value) \
    ((This)->lpVtbl->get_Text(This, value))

#define __x_ABI_CWindows_CMedia_CCore_CITimedTextLine_put_Text(This, value) \
    ((This)->lpVtbl->put_Text(This, value))

#define __x_ABI_CWindows_CMedia_CCore_CITimedTextLine_get_Subformats(This, value) \
    ((This)->lpVtbl->get_Subformats(This, value))

#endif /* COBJMACROS */

EXTERN_C const IID IID___x_ABI_CWindows_CMedia_CCore_CITimedTextLine;
#endif /* !defined(____x_ABI_CWindows_CMedia_CCore_CITimedTextLine_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Interface Windows.Media.Core.ITimedTextRegion
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Interface is a part of the implementation of type Windows.Media.Core.TimedTextRegion
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____x_ABI_CWindows_CMedia_CCore_CITimedTextRegion_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CMedia_CCore_CITimedTextRegion_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Media_Core_ITimedTextRegion[] = L"Windows.Media.Core.ITimedTextRegion";
typedef struct __x_ABI_CWindows_CMedia_CCore_CITimedTextRegionVtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CMedia_CCore_CITimedTextRegion* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CMedia_CCore_CITimedTextRegion* This);
    ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CMedia_CCore_CITimedTextRegion* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CMedia_CCore_CITimedTextRegion* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CMedia_CCore_CITimedTextRegion* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CMedia_CCore_CITimedTextRegion* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* get_Name)(__x_ABI_CWindows_CMedia_CCore_CITimedTextRegion* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* put_Name)(__x_ABI_CWindows_CMedia_CCore_CITimedTextRegion* This,
        HSTRING value);
    HRESULT (STDMETHODCALLTYPE* get_Position)(__x_ABI_CWindows_CMedia_CCore_CITimedTextRegion* This,
        struct __x_ABI_CWindows_CMedia_CCore_CTimedTextPoint* value);
    HRESULT (STDMETHODCALLTYPE* put_Position)(__x_ABI_CWindows_CMedia_CCore_CITimedTextRegion* This,
        struct __x_ABI_CWindows_CMedia_CCore_CTimedTextPoint value);
    HRESULT (STDMETHODCALLTYPE* get_Extent)(__x_ABI_CWindows_CMedia_CCore_CITimedTextRegion* This,
        struct __x_ABI_CWindows_CMedia_CCore_CTimedTextSize* value);
    HRESULT (STDMETHODCALLTYPE* put_Extent)(__x_ABI_CWindows_CMedia_CCore_CITimedTextRegion* This,
        struct __x_ABI_CWindows_CMedia_CCore_CTimedTextSize value);
    HRESULT (STDMETHODCALLTYPE* get_Background)(__x_ABI_CWindows_CMedia_CCore_CITimedTextRegion* This,
        struct __x_ABI_CWindows_CUI_CColor* value);
    HRESULT (STDMETHODCALLTYPE* put_Background)(__x_ABI_CWindows_CMedia_CCore_CITimedTextRegion* This,
        struct __x_ABI_CWindows_CUI_CColor value);
    HRESULT (STDMETHODCALLTYPE* get_WritingMode)(__x_ABI_CWindows_CMedia_CCore_CITimedTextRegion* This,
        enum __x_ABI_CWindows_CMedia_CCore_CTimedTextWritingMode* value);
    HRESULT (STDMETHODCALLTYPE* put_WritingMode)(__x_ABI_CWindows_CMedia_CCore_CITimedTextRegion* This,
        enum __x_ABI_CWindows_CMedia_CCore_CTimedTextWritingMode value);
    HRESULT (STDMETHODCALLTYPE* get_DisplayAlignment)(__x_ABI_CWindows_CMedia_CCore_CITimedTextRegion* This,
        enum __x_ABI_CWindows_CMedia_CCore_CTimedTextDisplayAlignment* value);
    HRESULT (STDMETHODCALLTYPE* put_DisplayAlignment)(__x_ABI_CWindows_CMedia_CCore_CITimedTextRegion* This,
        enum __x_ABI_CWindows_CMedia_CCore_CTimedTextDisplayAlignment value);
    HRESULT (STDMETHODCALLTYPE* get_LineHeight)(__x_ABI_CWindows_CMedia_CCore_CITimedTextRegion* This,
        struct __x_ABI_CWindows_CMedia_CCore_CTimedTextDouble* value);
    HRESULT (STDMETHODCALLTYPE* put_LineHeight)(__x_ABI_CWindows_CMedia_CCore_CITimedTextRegion* This,
        struct __x_ABI_CWindows_CMedia_CCore_CTimedTextDouble value);
    HRESULT (STDMETHODCALLTYPE* get_IsOverflowClipped)(__x_ABI_CWindows_CMedia_CCore_CITimedTextRegion* This,
        boolean* value);
    HRESULT (STDMETHODCALLTYPE* put_IsOverflowClipped)(__x_ABI_CWindows_CMedia_CCore_CITimedTextRegion* This,
        boolean value);
    HRESULT (STDMETHODCALLTYPE* get_Padding)(__x_ABI_CWindows_CMedia_CCore_CITimedTextRegion* This,
        struct __x_ABI_CWindows_CMedia_CCore_CTimedTextPadding* value);
    HRESULT (STDMETHODCALLTYPE* put_Padding)(__x_ABI_CWindows_CMedia_CCore_CITimedTextRegion* This,
        struct __x_ABI_CWindows_CMedia_CCore_CTimedTextPadding value);
    HRESULT (STDMETHODCALLTYPE* get_TextWrapping)(__x_ABI_CWindows_CMedia_CCore_CITimedTextRegion* This,
        enum __x_ABI_CWindows_CMedia_CCore_CTimedTextWrapping* value);
    HRESULT (STDMETHODCALLTYPE* put_TextWrapping)(__x_ABI_CWindows_CMedia_CCore_CITimedTextRegion* This,
        enum __x_ABI_CWindows_CMedia_CCore_CTimedTextWrapping value);
    HRESULT (STDMETHODCALLTYPE* get_ZIndex)(__x_ABI_CWindows_CMedia_CCore_CITimedTextRegion* This,
        INT32* value);
    HRESULT (STDMETHODCALLTYPE* put_ZIndex)(__x_ABI_CWindows_CMedia_CCore_CITimedTextRegion* This,
        INT32 value);
    HRESULT (STDMETHODCALLTYPE* get_ScrollMode)(__x_ABI_CWindows_CMedia_CCore_CITimedTextRegion* This,
        enum __x_ABI_CWindows_CMedia_CCore_CTimedTextScrollMode* value);
    HRESULT (STDMETHODCALLTYPE* put_ScrollMode)(__x_ABI_CWindows_CMedia_CCore_CITimedTextRegion* This,
        enum __x_ABI_CWindows_CMedia_CCore_CTimedTextScrollMode value);

    END_INTERFACE
} __x_ABI_CWindows_CMedia_CCore_CITimedTextRegionVtbl;

interface __x_ABI_CWindows_CMedia_CCore_CITimedTextRegion
{
    CONST_VTBL struct __x_ABI_CWindows_CMedia_CCore_CITimedTextRegionVtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __x_ABI_CWindows_CMedia_CCore_CITimedTextRegion_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __x_ABI_CWindows_CMedia_CCore_CITimedTextRegion_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __x_ABI_CWindows_CMedia_CCore_CITimedTextRegion_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __x_ABI_CWindows_CMedia_CCore_CITimedTextRegion_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __x_ABI_CWindows_CMedia_CCore_CITimedTextRegion_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __x_ABI_CWindows_CMedia_CCore_CITimedTextRegion_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __x_ABI_CWindows_CMedia_CCore_CITimedTextRegion_get_Name(This, value) \
    ((This)->lpVtbl->get_Name(This, value))

#define __x_ABI_CWindows_CMedia_CCore_CITimedTextRegion_put_Name(This, value) \
    ((This)->lpVtbl->put_Name(This, value))

#define __x_ABI_CWindows_CMedia_CCore_CITimedTextRegion_get_Position(This, value) \
    ((This)->lpVtbl->get_Position(This, value))

#define __x_ABI_CWindows_CMedia_CCore_CITimedTextRegion_put_Position(This, value) \
    ((This)->lpVtbl->put_Position(This, value))

#define __x_ABI_CWindows_CMedia_CCore_CITimedTextRegion_get_Extent(This, value) \
    ((This)->lpVtbl->get_Extent(This, value))

#define __x_ABI_CWindows_CMedia_CCore_CITimedTextRegion_put_Extent(This, value) \
    ((This)->lpVtbl->put_Extent(This, value))

#define __x_ABI_CWindows_CMedia_CCore_CITimedTextRegion_get_Background(This, value) \
    ((This)->lpVtbl->get_Background(This, value))

#define __x_ABI_CWindows_CMedia_CCore_CITimedTextRegion_put_Background(This, value) \
    ((This)->lpVtbl->put_Background(This, value))

#define __x_ABI_CWindows_CMedia_CCore_CITimedTextRegion_get_WritingMode(This, value) \
    ((This)->lpVtbl->get_WritingMode(This, value))

#define __x_ABI_CWindows_CMedia_CCore_CITimedTextRegion_put_WritingMode(This, value) \
    ((This)->lpVtbl->put_WritingMode(This, value))

#define __x_ABI_CWindows_CMedia_CCore_CITimedTextRegion_get_DisplayAlignment(This, value) \
    ((This)->lpVtbl->get_DisplayAlignment(This, value))

#define __x_ABI_CWindows_CMedia_CCore_CITimedTextRegion_put_DisplayAlignment(This, value) \
    ((This)->lpVtbl->put_DisplayAlignment(This, value))

#define __x_ABI_CWindows_CMedia_CCore_CITimedTextRegion_get_LineHeight(This, value) \
    ((This)->lpVtbl->get_LineHeight(This, value))

#define __x_ABI_CWindows_CMedia_CCore_CITimedTextRegion_put_LineHeight(This, value) \
    ((This)->lpVtbl->put_LineHeight(This, value))

#define __x_ABI_CWindows_CMedia_CCore_CITimedTextRegion_get_IsOverflowClipped(This, value) \
    ((This)->lpVtbl->get_IsOverflowClipped(This, value))

#define __x_ABI_CWindows_CMedia_CCore_CITimedTextRegion_put_IsOverflowClipped(This, value) \
    ((This)->lpVtbl->put_IsOverflowClipped(This, value))

#define __x_ABI_CWindows_CMedia_CCore_CITimedTextRegion_get_Padding(This, value) \
    ((This)->lpVtbl->get_Padding(This, value))

#define __x_ABI_CWindows_CMedia_CCore_CITimedTextRegion_put_Padding(This, value) \
    ((This)->lpVtbl->put_Padding(This, value))

#define __x_ABI_CWindows_CMedia_CCore_CITimedTextRegion_get_TextWrapping(This, value) \
    ((This)->lpVtbl->get_TextWrapping(This, value))

#define __x_ABI_CWindows_CMedia_CCore_CITimedTextRegion_put_TextWrapping(This, value) \
    ((This)->lpVtbl->put_TextWrapping(This, value))

#define __x_ABI_CWindows_CMedia_CCore_CITimedTextRegion_get_ZIndex(This, value) \
    ((This)->lpVtbl->get_ZIndex(This, value))

#define __x_ABI_CWindows_CMedia_CCore_CITimedTextRegion_put_ZIndex(This, value) \
    ((This)->lpVtbl->put_ZIndex(This, value))

#define __x_ABI_CWindows_CMedia_CCore_CITimedTextRegion_get_ScrollMode(This, value) \
    ((This)->lpVtbl->get_ScrollMode(This, value))

#define __x_ABI_CWindows_CMedia_CCore_CITimedTextRegion_put_ScrollMode(This, value) \
    ((This)->lpVtbl->put_ScrollMode(This, value))

#endif /* COBJMACROS */

EXTERN_C const IID IID___x_ABI_CWindows_CMedia_CCore_CITimedTextRegion;
#endif /* !defined(____x_ABI_CWindows_CMedia_CCore_CITimedTextRegion_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Interface Windows.Media.Core.ITimedTextSource
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Interface is a part of the implementation of type Windows.Media.Core.TimedTextSource
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____x_ABI_CWindows_CMedia_CCore_CITimedTextSource_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CMedia_CCore_CITimedTextSource_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Media_Core_ITimedTextSource[] = L"Windows.Media.Core.ITimedTextSource";
typedef struct __x_ABI_CWindows_CMedia_CCore_CITimedTextSourceVtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CMedia_CCore_CITimedTextSource* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CMedia_CCore_CITimedTextSource* This);
    ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CMedia_CCore_CITimedTextSource* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CMedia_CCore_CITimedTextSource* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CMedia_CCore_CITimedTextSource* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CMedia_CCore_CITimedTextSource* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* add_Resolved)(__x_ABI_CWindows_CMedia_CCore_CITimedTextSource* This,
        __FITypedEventHandler_2_Windows__CMedia__CCore__CTimedTextSource_Windows__CMedia__CCore__CTimedTextSourceResolveResultEventArgs* handler,
        EventRegistrationToken* token);
    HRESULT (STDMETHODCALLTYPE* remove_Resolved)(__x_ABI_CWindows_CMedia_CCore_CITimedTextSource* This,
        EventRegistrationToken token);

    END_INTERFACE
} __x_ABI_CWindows_CMedia_CCore_CITimedTextSourceVtbl;

interface __x_ABI_CWindows_CMedia_CCore_CITimedTextSource
{
    CONST_VTBL struct __x_ABI_CWindows_CMedia_CCore_CITimedTextSourceVtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __x_ABI_CWindows_CMedia_CCore_CITimedTextSource_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __x_ABI_CWindows_CMedia_CCore_CITimedTextSource_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __x_ABI_CWindows_CMedia_CCore_CITimedTextSource_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __x_ABI_CWindows_CMedia_CCore_CITimedTextSource_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __x_ABI_CWindows_CMedia_CCore_CITimedTextSource_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __x_ABI_CWindows_CMedia_CCore_CITimedTextSource_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __x_ABI_CWindows_CMedia_CCore_CITimedTextSource_add_Resolved(This, handler, token) \
    ((This)->lpVtbl->add_Resolved(This, handler, token))

#define __x_ABI_CWindows_CMedia_CCore_CITimedTextSource_remove_Resolved(This, token) \
    ((This)->lpVtbl->remove_Resolved(This, token))

#endif /* COBJMACROS */

EXTERN_C const IID IID___x_ABI_CWindows_CMedia_CCore_CITimedTextSource;
#endif /* !defined(____x_ABI_CWindows_CMedia_CCore_CITimedTextSource_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Interface Windows.Media.Core.ITimedTextSourceResolveResultEventArgs
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Interface is a part of the implementation of type Windows.Media.Core.TimedTextSourceResolveResultEventArgs
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____x_ABI_CWindows_CMedia_CCore_CITimedTextSourceResolveResultEventArgs_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CMedia_CCore_CITimedTextSourceResolveResultEventArgs_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Media_Core_ITimedTextSourceResolveResultEventArgs[] = L"Windows.Media.Core.ITimedTextSourceResolveResultEventArgs";
typedef struct __x_ABI_CWindows_CMedia_CCore_CITimedTextSourceResolveResultEventArgsVtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CMedia_CCore_CITimedTextSourceResolveResultEventArgs* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CMedia_CCore_CITimedTextSourceResolveResultEventArgs* This);
    ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CMedia_CCore_CITimedTextSourceResolveResultEventArgs* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CMedia_CCore_CITimedTextSourceResolveResultEventArgs* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CMedia_CCore_CITimedTextSourceResolveResultEventArgs* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CMedia_CCore_CITimedTextSourceResolveResultEventArgs* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* get_Error)(__x_ABI_CWindows_CMedia_CCore_CITimedTextSourceResolveResultEventArgs* This,
        __x_ABI_CWindows_CMedia_CCore_CITimedMetadataTrackError** value);
    HRESULT (STDMETHODCALLTYPE* get_Tracks)(__x_ABI_CWindows_CMedia_CCore_CITimedTextSourceResolveResultEventArgs* This,
        __FIVectorView_1_Windows__CMedia__CCore__CTimedMetadataTrack** value);

    END_INTERFACE
} __x_ABI_CWindows_CMedia_CCore_CITimedTextSourceResolveResultEventArgsVtbl;

interface __x_ABI_CWindows_CMedia_CCore_CITimedTextSourceResolveResultEventArgs
{
    CONST_VTBL struct __x_ABI_CWindows_CMedia_CCore_CITimedTextSourceResolveResultEventArgsVtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __x_ABI_CWindows_CMedia_CCore_CITimedTextSourceResolveResultEventArgs_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __x_ABI_CWindows_CMedia_CCore_CITimedTextSourceResolveResultEventArgs_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __x_ABI_CWindows_CMedia_CCore_CITimedTextSourceResolveResultEventArgs_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __x_ABI_CWindows_CMedia_CCore_CITimedTextSourceResolveResultEventArgs_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __x_ABI_CWindows_CMedia_CCore_CITimedTextSourceResolveResultEventArgs_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __x_ABI_CWindows_CMedia_CCore_CITimedTextSourceResolveResultEventArgs_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __x_ABI_CWindows_CMedia_CCore_CITimedTextSourceResolveResultEventArgs_get_Error(This, value) \
    ((This)->lpVtbl->get_Error(This, value))

#define __x_ABI_CWindows_CMedia_CCore_CITimedTextSourceResolveResultEventArgs_get_Tracks(This, value) \
    ((This)->lpVtbl->get_Tracks(This, value))

#endif /* COBJMACROS */

EXTERN_C const IID IID___x_ABI_CWindows_CMedia_CCore_CITimedTextSourceResolveResultEventArgs;
#endif /* !defined(____x_ABI_CWindows_CMedia_CCore_CITimedTextSourceResolveResultEventArgs_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Interface Windows.Media.Core.ITimedTextSourceStatics
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Interface is a part of the implementation of type Windows.Media.Core.TimedTextSource
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____x_ABI_CWindows_CMedia_CCore_CITimedTextSourceStatics_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CMedia_CCore_CITimedTextSourceStatics_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Media_Core_ITimedTextSourceStatics[] = L"Windows.Media.Core.ITimedTextSourceStatics";
typedef struct __x_ABI_CWindows_CMedia_CCore_CITimedTextSourceStaticsVtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CMedia_CCore_CITimedTextSourceStatics* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CMedia_CCore_CITimedTextSourceStatics* This);
    ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CMedia_CCore_CITimedTextSourceStatics* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CMedia_CCore_CITimedTextSourceStatics* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CMedia_CCore_CITimedTextSourceStatics* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CMedia_CCore_CITimedTextSourceStatics* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* CreateFromStream)(__x_ABI_CWindows_CMedia_CCore_CITimedTextSourceStatics* This,
        __x_ABI_CWindows_CStorage_CStreams_CIRandomAccessStream* stream,
        __x_ABI_CWindows_CMedia_CCore_CITimedTextSource** value);
    HRESULT (STDMETHODCALLTYPE* CreateFromUri)(__x_ABI_CWindows_CMedia_CCore_CITimedTextSourceStatics* This,
        __x_ABI_CWindows_CFoundation_CIUriRuntimeClass* uri,
        __x_ABI_CWindows_CMedia_CCore_CITimedTextSource** value);
    HRESULT (STDMETHODCALLTYPE* CreateFromStreamWithLanguage)(__x_ABI_CWindows_CMedia_CCore_CITimedTextSourceStatics* This,
        __x_ABI_CWindows_CStorage_CStreams_CIRandomAccessStream* stream,
        HSTRING defaultLanguage,
        __x_ABI_CWindows_CMedia_CCore_CITimedTextSource** value);
    HRESULT (STDMETHODCALLTYPE* CreateFromUriWithLanguage)(__x_ABI_CWindows_CMedia_CCore_CITimedTextSourceStatics* This,
        __x_ABI_CWindows_CFoundation_CIUriRuntimeClass* uri,
        HSTRING defaultLanguage,
        __x_ABI_CWindows_CMedia_CCore_CITimedTextSource** value);

    END_INTERFACE
} __x_ABI_CWindows_CMedia_CCore_CITimedTextSourceStaticsVtbl;

interface __x_ABI_CWindows_CMedia_CCore_CITimedTextSourceStatics
{
    CONST_VTBL struct __x_ABI_CWindows_CMedia_CCore_CITimedTextSourceStaticsVtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __x_ABI_CWindows_CMedia_CCore_CITimedTextSourceStatics_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __x_ABI_CWindows_CMedia_CCore_CITimedTextSourceStatics_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __x_ABI_CWindows_CMedia_CCore_CITimedTextSourceStatics_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __x_ABI_CWindows_CMedia_CCore_CITimedTextSourceStatics_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __x_ABI_CWindows_CMedia_CCore_CITimedTextSourceStatics_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __x_ABI_CWindows_CMedia_CCore_CITimedTextSourceStatics_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __x_ABI_CWindows_CMedia_CCore_CITimedTextSourceStatics_CreateFromStream(This, stream, value) \
    ((This)->lpVtbl->CreateFromStream(This, stream, value))

#define __x_ABI_CWindows_CMedia_CCore_CITimedTextSourceStatics_CreateFromUri(This, uri, value) \
    ((This)->lpVtbl->CreateFromUri(This, uri, value))

#define __x_ABI_CWindows_CMedia_CCore_CITimedTextSourceStatics_CreateFromStreamWithLanguage(This, stream, defaultLanguage, value) \
    ((This)->lpVtbl->CreateFromStreamWithLanguage(This, stream, defaultLanguage, value))

#define __x_ABI_CWindows_CMedia_CCore_CITimedTextSourceStatics_CreateFromUriWithLanguage(This, uri, defaultLanguage, value) \
    ((This)->lpVtbl->CreateFromUriWithLanguage(This, uri, defaultLanguage, value))

#endif /* COBJMACROS */

EXTERN_C const IID IID___x_ABI_CWindows_CMedia_CCore_CITimedTextSourceStatics;
#endif /* !defined(____x_ABI_CWindows_CMedia_CCore_CITimedTextSourceStatics_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Interface Windows.Media.Core.ITimedTextSourceStatics2
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 4.0
 *
 * Interface is a part of the implementation of type Windows.Media.Core.TimedTextSource
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x40000
#if !defined(____x_ABI_CWindows_CMedia_CCore_CITimedTextSourceStatics2_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CMedia_CCore_CITimedTextSourceStatics2_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Media_Core_ITimedTextSourceStatics2[] = L"Windows.Media.Core.ITimedTextSourceStatics2";
typedef struct __x_ABI_CWindows_CMedia_CCore_CITimedTextSourceStatics2Vtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CMedia_CCore_CITimedTextSourceStatics2* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CMedia_CCore_CITimedTextSourceStatics2* This);
    ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CMedia_CCore_CITimedTextSourceStatics2* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CMedia_CCore_CITimedTextSourceStatics2* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CMedia_CCore_CITimedTextSourceStatics2* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CMedia_CCore_CITimedTextSourceStatics2* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* CreateFromStreamWithIndex)(__x_ABI_CWindows_CMedia_CCore_CITimedTextSourceStatics2* This,
        __x_ABI_CWindows_CStorage_CStreams_CIRandomAccessStream* stream,
        __x_ABI_CWindows_CStorage_CStreams_CIRandomAccessStream* indexStream,
        __x_ABI_CWindows_CMedia_CCore_CITimedTextSource** result);
    HRESULT (STDMETHODCALLTYPE* CreateFromUriWithIndex)(__x_ABI_CWindows_CMedia_CCore_CITimedTextSourceStatics2* This,
        __x_ABI_CWindows_CFoundation_CIUriRuntimeClass* uri,
        __x_ABI_CWindows_CFoundation_CIUriRuntimeClass* indexUri,
        __x_ABI_CWindows_CMedia_CCore_CITimedTextSource** result);
    HRESULT (STDMETHODCALLTYPE* CreateFromStreamWithIndexAndLanguage)(__x_ABI_CWindows_CMedia_CCore_CITimedTextSourceStatics2* This,
        __x_ABI_CWindows_CStorage_CStreams_CIRandomAccessStream* stream,
        __x_ABI_CWindows_CStorage_CStreams_CIRandomAccessStream* indexStream,
        HSTRING defaultLanguage,
        __x_ABI_CWindows_CMedia_CCore_CITimedTextSource** result);
    HRESULT (STDMETHODCALLTYPE* CreateFromUriWithIndexAndLanguage)(__x_ABI_CWindows_CMedia_CCore_CITimedTextSourceStatics2* This,
        __x_ABI_CWindows_CFoundation_CIUriRuntimeClass* uri,
        __x_ABI_CWindows_CFoundation_CIUriRuntimeClass* indexUri,
        HSTRING defaultLanguage,
        __x_ABI_CWindows_CMedia_CCore_CITimedTextSource** result);

    END_INTERFACE
} __x_ABI_CWindows_CMedia_CCore_CITimedTextSourceStatics2Vtbl;

interface __x_ABI_CWindows_CMedia_CCore_CITimedTextSourceStatics2
{
    CONST_VTBL struct __x_ABI_CWindows_CMedia_CCore_CITimedTextSourceStatics2Vtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __x_ABI_CWindows_CMedia_CCore_CITimedTextSourceStatics2_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __x_ABI_CWindows_CMedia_CCore_CITimedTextSourceStatics2_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __x_ABI_CWindows_CMedia_CCore_CITimedTextSourceStatics2_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __x_ABI_CWindows_CMedia_CCore_CITimedTextSourceStatics2_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __x_ABI_CWindows_CMedia_CCore_CITimedTextSourceStatics2_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __x_ABI_CWindows_CMedia_CCore_CITimedTextSourceStatics2_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __x_ABI_CWindows_CMedia_CCore_CITimedTextSourceStatics2_CreateFromStreamWithIndex(This, stream, indexStream, result) \
    ((This)->lpVtbl->CreateFromStreamWithIndex(This, stream, indexStream, result))

#define __x_ABI_CWindows_CMedia_CCore_CITimedTextSourceStatics2_CreateFromUriWithIndex(This, uri, indexUri, result) \
    ((This)->lpVtbl->CreateFromUriWithIndex(This, uri, indexUri, result))

#define __x_ABI_CWindows_CMedia_CCore_CITimedTextSourceStatics2_CreateFromStreamWithIndexAndLanguage(This, stream, indexStream, defaultLanguage, result) \
    ((This)->lpVtbl->CreateFromStreamWithIndexAndLanguage(This, stream, indexStream, defaultLanguage, result))

#define __x_ABI_CWindows_CMedia_CCore_CITimedTextSourceStatics2_CreateFromUriWithIndexAndLanguage(This, uri, indexUri, defaultLanguage, result) \
    ((This)->lpVtbl->CreateFromUriWithIndexAndLanguage(This, uri, indexUri, defaultLanguage, result))

#endif /* COBJMACROS */

EXTERN_C const IID IID___x_ABI_CWindows_CMedia_CCore_CITimedTextSourceStatics2;
#endif /* !defined(____x_ABI_CWindows_CMedia_CCore_CITimedTextSourceStatics2_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x40000

/*
 *
 * Interface Windows.Media.Core.ITimedTextStyle
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Interface is a part of the implementation of type Windows.Media.Core.TimedTextStyle
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____x_ABI_CWindows_CMedia_CCore_CITimedTextStyle_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CMedia_CCore_CITimedTextStyle_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Media_Core_ITimedTextStyle[] = L"Windows.Media.Core.ITimedTextStyle";
typedef struct __x_ABI_CWindows_CMedia_CCore_CITimedTextStyleVtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CMedia_CCore_CITimedTextStyle* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CMedia_CCore_CITimedTextStyle* This);
    ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CMedia_CCore_CITimedTextStyle* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CMedia_CCore_CITimedTextStyle* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CMedia_CCore_CITimedTextStyle* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CMedia_CCore_CITimedTextStyle* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* get_Name)(__x_ABI_CWindows_CMedia_CCore_CITimedTextStyle* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* put_Name)(__x_ABI_CWindows_CMedia_CCore_CITimedTextStyle* This,
        HSTRING value);
    HRESULT (STDMETHODCALLTYPE* get_FontFamily)(__x_ABI_CWindows_CMedia_CCore_CITimedTextStyle* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* put_FontFamily)(__x_ABI_CWindows_CMedia_CCore_CITimedTextStyle* This,
        HSTRING value);
    HRESULT (STDMETHODCALLTYPE* get_FontSize)(__x_ABI_CWindows_CMedia_CCore_CITimedTextStyle* This,
        struct __x_ABI_CWindows_CMedia_CCore_CTimedTextDouble* value);
    HRESULT (STDMETHODCALLTYPE* put_FontSize)(__x_ABI_CWindows_CMedia_CCore_CITimedTextStyle* This,
        struct __x_ABI_CWindows_CMedia_CCore_CTimedTextDouble value);
    HRESULT (STDMETHODCALLTYPE* get_FontWeight)(__x_ABI_CWindows_CMedia_CCore_CITimedTextStyle* This,
        enum __x_ABI_CWindows_CMedia_CCore_CTimedTextWeight* value);
    HRESULT (STDMETHODCALLTYPE* put_FontWeight)(__x_ABI_CWindows_CMedia_CCore_CITimedTextStyle* This,
        enum __x_ABI_CWindows_CMedia_CCore_CTimedTextWeight value);
    HRESULT (STDMETHODCALLTYPE* get_Foreground)(__x_ABI_CWindows_CMedia_CCore_CITimedTextStyle* This,
        struct __x_ABI_CWindows_CUI_CColor* value);
    HRESULT (STDMETHODCALLTYPE* put_Foreground)(__x_ABI_CWindows_CMedia_CCore_CITimedTextStyle* This,
        struct __x_ABI_CWindows_CUI_CColor value);
    HRESULT (STDMETHODCALLTYPE* get_Background)(__x_ABI_CWindows_CMedia_CCore_CITimedTextStyle* This,
        struct __x_ABI_CWindows_CUI_CColor* value);
    HRESULT (STDMETHODCALLTYPE* put_Background)(__x_ABI_CWindows_CMedia_CCore_CITimedTextStyle* This,
        struct __x_ABI_CWindows_CUI_CColor value);
    HRESULT (STDMETHODCALLTYPE* get_IsBackgroundAlwaysShown)(__x_ABI_CWindows_CMedia_CCore_CITimedTextStyle* This,
        boolean* value);
    HRESULT (STDMETHODCALLTYPE* put_IsBackgroundAlwaysShown)(__x_ABI_CWindows_CMedia_CCore_CITimedTextStyle* This,
        boolean value);
    HRESULT (STDMETHODCALLTYPE* get_FlowDirection)(__x_ABI_CWindows_CMedia_CCore_CITimedTextStyle* This,
        enum __x_ABI_CWindows_CMedia_CCore_CTimedTextFlowDirection* value);
    HRESULT (STDMETHODCALLTYPE* put_FlowDirection)(__x_ABI_CWindows_CMedia_CCore_CITimedTextStyle* This,
        enum __x_ABI_CWindows_CMedia_CCore_CTimedTextFlowDirection value);
    HRESULT (STDMETHODCALLTYPE* get_LineAlignment)(__x_ABI_CWindows_CMedia_CCore_CITimedTextStyle* This,
        enum __x_ABI_CWindows_CMedia_CCore_CTimedTextLineAlignment* value);
    HRESULT (STDMETHODCALLTYPE* put_LineAlignment)(__x_ABI_CWindows_CMedia_CCore_CITimedTextStyle* This,
        enum __x_ABI_CWindows_CMedia_CCore_CTimedTextLineAlignment value);
    HRESULT (STDMETHODCALLTYPE* get_OutlineColor)(__x_ABI_CWindows_CMedia_CCore_CITimedTextStyle* This,
        struct __x_ABI_CWindows_CUI_CColor* value);
    HRESULT (STDMETHODCALLTYPE* put_OutlineColor)(__x_ABI_CWindows_CMedia_CCore_CITimedTextStyle* This,
        struct __x_ABI_CWindows_CUI_CColor value);
    HRESULT (STDMETHODCALLTYPE* get_OutlineThickness)(__x_ABI_CWindows_CMedia_CCore_CITimedTextStyle* This,
        struct __x_ABI_CWindows_CMedia_CCore_CTimedTextDouble* value);
    HRESULT (STDMETHODCALLTYPE* put_OutlineThickness)(__x_ABI_CWindows_CMedia_CCore_CITimedTextStyle* This,
        struct __x_ABI_CWindows_CMedia_CCore_CTimedTextDouble value);
    HRESULT (STDMETHODCALLTYPE* get_OutlineRadius)(__x_ABI_CWindows_CMedia_CCore_CITimedTextStyle* This,
        struct __x_ABI_CWindows_CMedia_CCore_CTimedTextDouble* value);
    HRESULT (STDMETHODCALLTYPE* put_OutlineRadius)(__x_ABI_CWindows_CMedia_CCore_CITimedTextStyle* This,
        struct __x_ABI_CWindows_CMedia_CCore_CTimedTextDouble value);

    END_INTERFACE
} __x_ABI_CWindows_CMedia_CCore_CITimedTextStyleVtbl;

interface __x_ABI_CWindows_CMedia_CCore_CITimedTextStyle
{
    CONST_VTBL struct __x_ABI_CWindows_CMedia_CCore_CITimedTextStyleVtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __x_ABI_CWindows_CMedia_CCore_CITimedTextStyle_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __x_ABI_CWindows_CMedia_CCore_CITimedTextStyle_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __x_ABI_CWindows_CMedia_CCore_CITimedTextStyle_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __x_ABI_CWindows_CMedia_CCore_CITimedTextStyle_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __x_ABI_CWindows_CMedia_CCore_CITimedTextStyle_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __x_ABI_CWindows_CMedia_CCore_CITimedTextStyle_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __x_ABI_CWindows_CMedia_CCore_CITimedTextStyle_get_Name(This, value) \
    ((This)->lpVtbl->get_Name(This, value))

#define __x_ABI_CWindows_CMedia_CCore_CITimedTextStyle_put_Name(This, value) \
    ((This)->lpVtbl->put_Name(This, value))

#define __x_ABI_CWindows_CMedia_CCore_CITimedTextStyle_get_FontFamily(This, value) \
    ((This)->lpVtbl->get_FontFamily(This, value))

#define __x_ABI_CWindows_CMedia_CCore_CITimedTextStyle_put_FontFamily(This, value) \
    ((This)->lpVtbl->put_FontFamily(This, value))

#define __x_ABI_CWindows_CMedia_CCore_CITimedTextStyle_get_FontSize(This, value) \
    ((This)->lpVtbl->get_FontSize(This, value))

#define __x_ABI_CWindows_CMedia_CCore_CITimedTextStyle_put_FontSize(This, value) \
    ((This)->lpVtbl->put_FontSize(This, value))

#define __x_ABI_CWindows_CMedia_CCore_CITimedTextStyle_get_FontWeight(This, value) \
    ((This)->lpVtbl->get_FontWeight(This, value))

#define __x_ABI_CWindows_CMedia_CCore_CITimedTextStyle_put_FontWeight(This, value) \
    ((This)->lpVtbl->put_FontWeight(This, value))

#define __x_ABI_CWindows_CMedia_CCore_CITimedTextStyle_get_Foreground(This, value) \
    ((This)->lpVtbl->get_Foreground(This, value))

#define __x_ABI_CWindows_CMedia_CCore_CITimedTextStyle_put_Foreground(This, value) \
    ((This)->lpVtbl->put_Foreground(This, value))

#define __x_ABI_CWindows_CMedia_CCore_CITimedTextStyle_get_Background(This, value) \
    ((This)->lpVtbl->get_Background(This, value))

#define __x_ABI_CWindows_CMedia_CCore_CITimedTextStyle_put_Background(This, value) \
    ((This)->lpVtbl->put_Background(This, value))

#define __x_ABI_CWindows_CMedia_CCore_CITimedTextStyle_get_IsBackgroundAlwaysShown(This, value) \
    ((This)->lpVtbl->get_IsBackgroundAlwaysShown(This, value))

#define __x_ABI_CWindows_CMedia_CCore_CITimedTextStyle_put_IsBackgroundAlwaysShown(This, value) \
    ((This)->lpVtbl->put_IsBackgroundAlwaysShown(This, value))

#define __x_ABI_CWindows_CMedia_CCore_CITimedTextStyle_get_FlowDirection(This, value) \
    ((This)->lpVtbl->get_FlowDirection(This, value))

#define __x_ABI_CWindows_CMedia_CCore_CITimedTextStyle_put_FlowDirection(This, value) \
    ((This)->lpVtbl->put_FlowDirection(This, value))

#define __x_ABI_CWindows_CMedia_CCore_CITimedTextStyle_get_LineAlignment(This, value) \
    ((This)->lpVtbl->get_LineAlignment(This, value))

#define __x_ABI_CWindows_CMedia_CCore_CITimedTextStyle_put_LineAlignment(This, value) \
    ((This)->lpVtbl->put_LineAlignment(This, value))

#define __x_ABI_CWindows_CMedia_CCore_CITimedTextStyle_get_OutlineColor(This, value) \
    ((This)->lpVtbl->get_OutlineColor(This, value))

#define __x_ABI_CWindows_CMedia_CCore_CITimedTextStyle_put_OutlineColor(This, value) \
    ((This)->lpVtbl->put_OutlineColor(This, value))

#define __x_ABI_CWindows_CMedia_CCore_CITimedTextStyle_get_OutlineThickness(This, value) \
    ((This)->lpVtbl->get_OutlineThickness(This, value))

#define __x_ABI_CWindows_CMedia_CCore_CITimedTextStyle_put_OutlineThickness(This, value) \
    ((This)->lpVtbl->put_OutlineThickness(This, value))

#define __x_ABI_CWindows_CMedia_CCore_CITimedTextStyle_get_OutlineRadius(This, value) \
    ((This)->lpVtbl->get_OutlineRadius(This, value))

#define __x_ABI_CWindows_CMedia_CCore_CITimedTextStyle_put_OutlineRadius(This, value) \
    ((This)->lpVtbl->put_OutlineRadius(This, value))

#endif /* COBJMACROS */

EXTERN_C const IID IID___x_ABI_CWindows_CMedia_CCore_CITimedTextStyle;
#endif /* !defined(____x_ABI_CWindows_CMedia_CCore_CITimedTextStyle_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Interface Windows.Media.Core.ITimedTextStyle2
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 4.0
 *
 * Interface is a part of the implementation of type Windows.Media.Core.TimedTextStyle
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x40000
#if !defined(____x_ABI_CWindows_CMedia_CCore_CITimedTextStyle2_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CMedia_CCore_CITimedTextStyle2_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Media_Core_ITimedTextStyle2[] = L"Windows.Media.Core.ITimedTextStyle2";
typedef struct __x_ABI_CWindows_CMedia_CCore_CITimedTextStyle2Vtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CMedia_CCore_CITimedTextStyle2* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CMedia_CCore_CITimedTextStyle2* This);
    ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CMedia_CCore_CITimedTextStyle2* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CMedia_CCore_CITimedTextStyle2* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CMedia_CCore_CITimedTextStyle2* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CMedia_CCore_CITimedTextStyle2* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* get_FontStyle)(__x_ABI_CWindows_CMedia_CCore_CITimedTextStyle2* This,
        enum __x_ABI_CWindows_CMedia_CCore_CTimedTextFontStyle* value);
    HRESULT (STDMETHODCALLTYPE* put_FontStyle)(__x_ABI_CWindows_CMedia_CCore_CITimedTextStyle2* This,
        enum __x_ABI_CWindows_CMedia_CCore_CTimedTextFontStyle value);
    HRESULT (STDMETHODCALLTYPE* get_IsUnderlineEnabled)(__x_ABI_CWindows_CMedia_CCore_CITimedTextStyle2* This,
        boolean* value);
    HRESULT (STDMETHODCALLTYPE* put_IsUnderlineEnabled)(__x_ABI_CWindows_CMedia_CCore_CITimedTextStyle2* This,
        boolean value);
    HRESULT (STDMETHODCALLTYPE* get_IsLineThroughEnabled)(__x_ABI_CWindows_CMedia_CCore_CITimedTextStyle2* This,
        boolean* value);
    HRESULT (STDMETHODCALLTYPE* put_IsLineThroughEnabled)(__x_ABI_CWindows_CMedia_CCore_CITimedTextStyle2* This,
        boolean value);
    HRESULT (STDMETHODCALLTYPE* get_IsOverlineEnabled)(__x_ABI_CWindows_CMedia_CCore_CITimedTextStyle2* This,
        boolean* value);
    HRESULT (STDMETHODCALLTYPE* put_IsOverlineEnabled)(__x_ABI_CWindows_CMedia_CCore_CITimedTextStyle2* This,
        boolean value);

    END_INTERFACE
} __x_ABI_CWindows_CMedia_CCore_CITimedTextStyle2Vtbl;

interface __x_ABI_CWindows_CMedia_CCore_CITimedTextStyle2
{
    CONST_VTBL struct __x_ABI_CWindows_CMedia_CCore_CITimedTextStyle2Vtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __x_ABI_CWindows_CMedia_CCore_CITimedTextStyle2_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __x_ABI_CWindows_CMedia_CCore_CITimedTextStyle2_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __x_ABI_CWindows_CMedia_CCore_CITimedTextStyle2_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __x_ABI_CWindows_CMedia_CCore_CITimedTextStyle2_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __x_ABI_CWindows_CMedia_CCore_CITimedTextStyle2_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __x_ABI_CWindows_CMedia_CCore_CITimedTextStyle2_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __x_ABI_CWindows_CMedia_CCore_CITimedTextStyle2_get_FontStyle(This, value) \
    ((This)->lpVtbl->get_FontStyle(This, value))

#define __x_ABI_CWindows_CMedia_CCore_CITimedTextStyle2_put_FontStyle(This, value) \
    ((This)->lpVtbl->put_FontStyle(This, value))

#define __x_ABI_CWindows_CMedia_CCore_CITimedTextStyle2_get_IsUnderlineEnabled(This, value) \
    ((This)->lpVtbl->get_IsUnderlineEnabled(This, value))

#define __x_ABI_CWindows_CMedia_CCore_CITimedTextStyle2_put_IsUnderlineEnabled(This, value) \
    ((This)->lpVtbl->put_IsUnderlineEnabled(This, value))

#define __x_ABI_CWindows_CMedia_CCore_CITimedTextStyle2_get_IsLineThroughEnabled(This, value) \
    ((This)->lpVtbl->get_IsLineThroughEnabled(This, value))

#define __x_ABI_CWindows_CMedia_CCore_CITimedTextStyle2_put_IsLineThroughEnabled(This, value) \
    ((This)->lpVtbl->put_IsLineThroughEnabled(This, value))

#define __x_ABI_CWindows_CMedia_CCore_CITimedTextStyle2_get_IsOverlineEnabled(This, value) \
    ((This)->lpVtbl->get_IsOverlineEnabled(This, value))

#define __x_ABI_CWindows_CMedia_CCore_CITimedTextStyle2_put_IsOverlineEnabled(This, value) \
    ((This)->lpVtbl->put_IsOverlineEnabled(This, value))

#endif /* COBJMACROS */

EXTERN_C const IID IID___x_ABI_CWindows_CMedia_CCore_CITimedTextStyle2;
#endif /* !defined(____x_ABI_CWindows_CMedia_CCore_CITimedTextStyle2_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x40000

/*
 *
 * Interface Windows.Media.Core.ITimedTextSubformat
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Interface is a part of the implementation of type Windows.Media.Core.TimedTextSubformat
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____x_ABI_CWindows_CMedia_CCore_CITimedTextSubformat_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CMedia_CCore_CITimedTextSubformat_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Media_Core_ITimedTextSubformat[] = L"Windows.Media.Core.ITimedTextSubformat";
typedef struct __x_ABI_CWindows_CMedia_CCore_CITimedTextSubformatVtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CMedia_CCore_CITimedTextSubformat* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CMedia_CCore_CITimedTextSubformat* This);
    ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CMedia_CCore_CITimedTextSubformat* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CMedia_CCore_CITimedTextSubformat* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CMedia_CCore_CITimedTextSubformat* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CMedia_CCore_CITimedTextSubformat* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* get_StartIndex)(__x_ABI_CWindows_CMedia_CCore_CITimedTextSubformat* This,
        INT32* value);
    HRESULT (STDMETHODCALLTYPE* put_StartIndex)(__x_ABI_CWindows_CMedia_CCore_CITimedTextSubformat* This,
        INT32 value);
    HRESULT (STDMETHODCALLTYPE* get_Length)(__x_ABI_CWindows_CMedia_CCore_CITimedTextSubformat* This,
        INT32* value);
    HRESULT (STDMETHODCALLTYPE* put_Length)(__x_ABI_CWindows_CMedia_CCore_CITimedTextSubformat* This,
        INT32 value);
    HRESULT (STDMETHODCALLTYPE* get_SubformatStyle)(__x_ABI_CWindows_CMedia_CCore_CITimedTextSubformat* This,
        __x_ABI_CWindows_CMedia_CCore_CITimedTextStyle** value);
    HRESULT (STDMETHODCALLTYPE* put_SubformatStyle)(__x_ABI_CWindows_CMedia_CCore_CITimedTextSubformat* This,
        __x_ABI_CWindows_CMedia_CCore_CITimedTextStyle* value);

    END_INTERFACE
} __x_ABI_CWindows_CMedia_CCore_CITimedTextSubformatVtbl;

interface __x_ABI_CWindows_CMedia_CCore_CITimedTextSubformat
{
    CONST_VTBL struct __x_ABI_CWindows_CMedia_CCore_CITimedTextSubformatVtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __x_ABI_CWindows_CMedia_CCore_CITimedTextSubformat_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __x_ABI_CWindows_CMedia_CCore_CITimedTextSubformat_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __x_ABI_CWindows_CMedia_CCore_CITimedTextSubformat_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __x_ABI_CWindows_CMedia_CCore_CITimedTextSubformat_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __x_ABI_CWindows_CMedia_CCore_CITimedTextSubformat_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __x_ABI_CWindows_CMedia_CCore_CITimedTextSubformat_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __x_ABI_CWindows_CMedia_CCore_CITimedTextSubformat_get_StartIndex(This, value) \
    ((This)->lpVtbl->get_StartIndex(This, value))

#define __x_ABI_CWindows_CMedia_CCore_CITimedTextSubformat_put_StartIndex(This, value) \
    ((This)->lpVtbl->put_StartIndex(This, value))

#define __x_ABI_CWindows_CMedia_CCore_CITimedTextSubformat_get_Length(This, value) \
    ((This)->lpVtbl->get_Length(This, value))

#define __x_ABI_CWindows_CMedia_CCore_CITimedTextSubformat_put_Length(This, value) \
    ((This)->lpVtbl->put_Length(This, value))

#define __x_ABI_CWindows_CMedia_CCore_CITimedTextSubformat_get_SubformatStyle(This, value) \
    ((This)->lpVtbl->get_SubformatStyle(This, value))

#define __x_ABI_CWindows_CMedia_CCore_CITimedTextSubformat_put_SubformatStyle(This, value) \
    ((This)->lpVtbl->put_SubformatStyle(This, value))

#endif /* COBJMACROS */

EXTERN_C const IID IID___x_ABI_CWindows_CMedia_CCore_CITimedTextSubformat;
#endif /* !defined(____x_ABI_CWindows_CMedia_CCore_CITimedTextSubformat_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Interface Windows.Media.Core.IVideoStabilizationEffect
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Interface is a part of the implementation of type Windows.Media.Core.VideoStabilizationEffect
 *
 * Any object which implements this interface must also implement the following interfaces:
 *     Windows.Media.IMediaExtension
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____x_ABI_CWindows_CMedia_CCore_CIVideoStabilizationEffect_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CMedia_CCore_CIVideoStabilizationEffect_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Media_Core_IVideoStabilizationEffect[] = L"Windows.Media.Core.IVideoStabilizationEffect";
typedef struct __x_ABI_CWindows_CMedia_CCore_CIVideoStabilizationEffectVtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CMedia_CCore_CIVideoStabilizationEffect* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CMedia_CCore_CIVideoStabilizationEffect* This);
    ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CMedia_CCore_CIVideoStabilizationEffect* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CMedia_CCore_CIVideoStabilizationEffect* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CMedia_CCore_CIVideoStabilizationEffect* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CMedia_CCore_CIVideoStabilizationEffect* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* put_Enabled)(__x_ABI_CWindows_CMedia_CCore_CIVideoStabilizationEffect* This,
        boolean value);
    HRESULT (STDMETHODCALLTYPE* get_Enabled)(__x_ABI_CWindows_CMedia_CCore_CIVideoStabilizationEffect* This,
        boolean* value);
    HRESULT (STDMETHODCALLTYPE* add_EnabledChanged)(__x_ABI_CWindows_CMedia_CCore_CIVideoStabilizationEffect* This,
        __FITypedEventHandler_2_Windows__CMedia__CCore__CVideoStabilizationEffect_Windows__CMedia__CCore__CVideoStabilizationEffectEnabledChangedEventArgs* handler,
        EventRegistrationToken* cookie);
    HRESULT (STDMETHODCALLTYPE* remove_EnabledChanged)(__x_ABI_CWindows_CMedia_CCore_CIVideoStabilizationEffect* This,
        EventRegistrationToken cookie);
    HRESULT (STDMETHODCALLTYPE* GetRecommendedStreamConfiguration)(__x_ABI_CWindows_CMedia_CCore_CIVideoStabilizationEffect* This,
        __x_ABI_CWindows_CMedia_CDevices_CIVideoDeviceController* controller,
        __x_ABI_CWindows_CMedia_CMediaProperties_CIVideoEncodingProperties* desiredProperties,
        __x_ABI_CWindows_CMedia_CCapture_CIVideoStreamConfiguration** value);

    END_INTERFACE
} __x_ABI_CWindows_CMedia_CCore_CIVideoStabilizationEffectVtbl;

interface __x_ABI_CWindows_CMedia_CCore_CIVideoStabilizationEffect
{
    CONST_VTBL struct __x_ABI_CWindows_CMedia_CCore_CIVideoStabilizationEffectVtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __x_ABI_CWindows_CMedia_CCore_CIVideoStabilizationEffect_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __x_ABI_CWindows_CMedia_CCore_CIVideoStabilizationEffect_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __x_ABI_CWindows_CMedia_CCore_CIVideoStabilizationEffect_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __x_ABI_CWindows_CMedia_CCore_CIVideoStabilizationEffect_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __x_ABI_CWindows_CMedia_CCore_CIVideoStabilizationEffect_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __x_ABI_CWindows_CMedia_CCore_CIVideoStabilizationEffect_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __x_ABI_CWindows_CMedia_CCore_CIVideoStabilizationEffect_put_Enabled(This, value) \
    ((This)->lpVtbl->put_Enabled(This, value))

#define __x_ABI_CWindows_CMedia_CCore_CIVideoStabilizationEffect_get_Enabled(This, value) \
    ((This)->lpVtbl->get_Enabled(This, value))

#define __x_ABI_CWindows_CMedia_CCore_CIVideoStabilizationEffect_add_EnabledChanged(This, handler, cookie) \
    ((This)->lpVtbl->add_EnabledChanged(This, handler, cookie))

#define __x_ABI_CWindows_CMedia_CCore_CIVideoStabilizationEffect_remove_EnabledChanged(This, cookie) \
    ((This)->lpVtbl->remove_EnabledChanged(This, cookie))

#define __x_ABI_CWindows_CMedia_CCore_CIVideoStabilizationEffect_GetRecommendedStreamConfiguration(This, controller, desiredProperties, value) \
    ((This)->lpVtbl->GetRecommendedStreamConfiguration(This, controller, desiredProperties, value))

#endif /* COBJMACROS */

EXTERN_C const IID IID___x_ABI_CWindows_CMedia_CCore_CIVideoStabilizationEffect;
#endif /* !defined(____x_ABI_CWindows_CMedia_CCore_CIVideoStabilizationEffect_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Interface Windows.Media.Core.IVideoStabilizationEffectEnabledChangedEventArgs
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Interface is a part of the implementation of type Windows.Media.Core.VideoStabilizationEffectEnabledChangedEventArgs
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____x_ABI_CWindows_CMedia_CCore_CIVideoStabilizationEffectEnabledChangedEventArgs_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CMedia_CCore_CIVideoStabilizationEffectEnabledChangedEventArgs_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Media_Core_IVideoStabilizationEffectEnabledChangedEventArgs[] = L"Windows.Media.Core.IVideoStabilizationEffectEnabledChangedEventArgs";
typedef struct __x_ABI_CWindows_CMedia_CCore_CIVideoStabilizationEffectEnabledChangedEventArgsVtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CMedia_CCore_CIVideoStabilizationEffectEnabledChangedEventArgs* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CMedia_CCore_CIVideoStabilizationEffectEnabledChangedEventArgs* This);
    ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CMedia_CCore_CIVideoStabilizationEffectEnabledChangedEventArgs* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CMedia_CCore_CIVideoStabilizationEffectEnabledChangedEventArgs* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CMedia_CCore_CIVideoStabilizationEffectEnabledChangedEventArgs* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CMedia_CCore_CIVideoStabilizationEffectEnabledChangedEventArgs* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* get_Reason)(__x_ABI_CWindows_CMedia_CCore_CIVideoStabilizationEffectEnabledChangedEventArgs* This,
        enum __x_ABI_CWindows_CMedia_CCore_CVideoStabilizationEffectEnabledChangedReason* value);

    END_INTERFACE
} __x_ABI_CWindows_CMedia_CCore_CIVideoStabilizationEffectEnabledChangedEventArgsVtbl;

interface __x_ABI_CWindows_CMedia_CCore_CIVideoStabilizationEffectEnabledChangedEventArgs
{
    CONST_VTBL struct __x_ABI_CWindows_CMedia_CCore_CIVideoStabilizationEffectEnabledChangedEventArgsVtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __x_ABI_CWindows_CMedia_CCore_CIVideoStabilizationEffectEnabledChangedEventArgs_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __x_ABI_CWindows_CMedia_CCore_CIVideoStabilizationEffectEnabledChangedEventArgs_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __x_ABI_CWindows_CMedia_CCore_CIVideoStabilizationEffectEnabledChangedEventArgs_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __x_ABI_CWindows_CMedia_CCore_CIVideoStabilizationEffectEnabledChangedEventArgs_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __x_ABI_CWindows_CMedia_CCore_CIVideoStabilizationEffectEnabledChangedEventArgs_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __x_ABI_CWindows_CMedia_CCore_CIVideoStabilizationEffectEnabledChangedEventArgs_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __x_ABI_CWindows_CMedia_CCore_CIVideoStabilizationEffectEnabledChangedEventArgs_get_Reason(This, value) \
    ((This)->lpVtbl->get_Reason(This, value))

#endif /* COBJMACROS */

EXTERN_C const IID IID___x_ABI_CWindows_CMedia_CCore_CIVideoStabilizationEffectEnabledChangedEventArgs;
#endif /* !defined(____x_ABI_CWindows_CMedia_CCore_CIVideoStabilizationEffectEnabledChangedEventArgs_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Interface Windows.Media.Core.IVideoStreamDescriptor
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Interface is a part of the implementation of type Windows.Media.Core.VideoStreamDescriptor
 *
 * Any object which implements this interface must also implement the following interfaces:
 *     Windows.Media.Core.IMediaStreamDescriptor
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____x_ABI_CWindows_CMedia_CCore_CIVideoStreamDescriptor_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CMedia_CCore_CIVideoStreamDescriptor_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Media_Core_IVideoStreamDescriptor[] = L"Windows.Media.Core.IVideoStreamDescriptor";
typedef struct __x_ABI_CWindows_CMedia_CCore_CIVideoStreamDescriptorVtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CMedia_CCore_CIVideoStreamDescriptor* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CMedia_CCore_CIVideoStreamDescriptor* This);
    ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CMedia_CCore_CIVideoStreamDescriptor* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CMedia_CCore_CIVideoStreamDescriptor* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CMedia_CCore_CIVideoStreamDescriptor* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CMedia_CCore_CIVideoStreamDescriptor* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* get_EncodingProperties)(__x_ABI_CWindows_CMedia_CCore_CIVideoStreamDescriptor* This,
        __x_ABI_CWindows_CMedia_CMediaProperties_CIVideoEncodingProperties** encodingProperties);

    END_INTERFACE
} __x_ABI_CWindows_CMedia_CCore_CIVideoStreamDescriptorVtbl;

interface __x_ABI_CWindows_CMedia_CCore_CIVideoStreamDescriptor
{
    CONST_VTBL struct __x_ABI_CWindows_CMedia_CCore_CIVideoStreamDescriptorVtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __x_ABI_CWindows_CMedia_CCore_CIVideoStreamDescriptor_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __x_ABI_CWindows_CMedia_CCore_CIVideoStreamDescriptor_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __x_ABI_CWindows_CMedia_CCore_CIVideoStreamDescriptor_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __x_ABI_CWindows_CMedia_CCore_CIVideoStreamDescriptor_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __x_ABI_CWindows_CMedia_CCore_CIVideoStreamDescriptor_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __x_ABI_CWindows_CMedia_CCore_CIVideoStreamDescriptor_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __x_ABI_CWindows_CMedia_CCore_CIVideoStreamDescriptor_get_EncodingProperties(This, encodingProperties) \
    ((This)->lpVtbl->get_EncodingProperties(This, encodingProperties))

#endif /* COBJMACROS */

EXTERN_C const IID IID___x_ABI_CWindows_CMedia_CCore_CIVideoStreamDescriptor;
#endif /* !defined(____x_ABI_CWindows_CMedia_CCore_CIVideoStreamDescriptor_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Interface Windows.Media.Core.IVideoStreamDescriptor2
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 6.0
 *
 * Interface is a part of the implementation of type Windows.Media.Core.VideoStreamDescriptor
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x60000
#if !defined(____x_ABI_CWindows_CMedia_CCore_CIVideoStreamDescriptor2_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CMedia_CCore_CIVideoStreamDescriptor2_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Media_Core_IVideoStreamDescriptor2[] = L"Windows.Media.Core.IVideoStreamDescriptor2";
typedef struct __x_ABI_CWindows_CMedia_CCore_CIVideoStreamDescriptor2Vtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CMedia_CCore_CIVideoStreamDescriptor2* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CMedia_CCore_CIVideoStreamDescriptor2* This);
    ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CMedia_CCore_CIVideoStreamDescriptor2* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CMedia_CCore_CIVideoStreamDescriptor2* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CMedia_CCore_CIVideoStreamDescriptor2* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CMedia_CCore_CIVideoStreamDescriptor2* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* Copy)(__x_ABI_CWindows_CMedia_CCore_CIVideoStreamDescriptor2* This,
        __x_ABI_CWindows_CMedia_CCore_CIVideoStreamDescriptor** result);

    END_INTERFACE
} __x_ABI_CWindows_CMedia_CCore_CIVideoStreamDescriptor2Vtbl;

interface __x_ABI_CWindows_CMedia_CCore_CIVideoStreamDescriptor2
{
    CONST_VTBL struct __x_ABI_CWindows_CMedia_CCore_CIVideoStreamDescriptor2Vtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __x_ABI_CWindows_CMedia_CCore_CIVideoStreamDescriptor2_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __x_ABI_CWindows_CMedia_CCore_CIVideoStreamDescriptor2_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __x_ABI_CWindows_CMedia_CCore_CIVideoStreamDescriptor2_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __x_ABI_CWindows_CMedia_CCore_CIVideoStreamDescriptor2_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __x_ABI_CWindows_CMedia_CCore_CIVideoStreamDescriptor2_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __x_ABI_CWindows_CMedia_CCore_CIVideoStreamDescriptor2_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __x_ABI_CWindows_CMedia_CCore_CIVideoStreamDescriptor2_Copy(This, result) \
    ((This)->lpVtbl->Copy(This, result))

#endif /* COBJMACROS */

EXTERN_C const IID IID___x_ABI_CWindows_CMedia_CCore_CIVideoStreamDescriptor2;
#endif /* !defined(____x_ABI_CWindows_CMedia_CCore_CIVideoStreamDescriptor2_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x60000

/*
 *
 * Interface Windows.Media.Core.IVideoStreamDescriptorFactory
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Interface is a part of the implementation of type Windows.Media.Core.VideoStreamDescriptor
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____x_ABI_CWindows_CMedia_CCore_CIVideoStreamDescriptorFactory_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CMedia_CCore_CIVideoStreamDescriptorFactory_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Media_Core_IVideoStreamDescriptorFactory[] = L"Windows.Media.Core.IVideoStreamDescriptorFactory";
typedef struct __x_ABI_CWindows_CMedia_CCore_CIVideoStreamDescriptorFactoryVtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CMedia_CCore_CIVideoStreamDescriptorFactory* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CMedia_CCore_CIVideoStreamDescriptorFactory* This);
    ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CMedia_CCore_CIVideoStreamDescriptorFactory* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CMedia_CCore_CIVideoStreamDescriptorFactory* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CMedia_CCore_CIVideoStreamDescriptorFactory* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CMedia_CCore_CIVideoStreamDescriptorFactory* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* Create)(__x_ABI_CWindows_CMedia_CCore_CIVideoStreamDescriptorFactory* This,
        __x_ABI_CWindows_CMedia_CMediaProperties_CIVideoEncodingProperties* encodingProperties,
        __x_ABI_CWindows_CMedia_CCore_CIVideoStreamDescriptor** result);

    END_INTERFACE
} __x_ABI_CWindows_CMedia_CCore_CIVideoStreamDescriptorFactoryVtbl;

interface __x_ABI_CWindows_CMedia_CCore_CIVideoStreamDescriptorFactory
{
    CONST_VTBL struct __x_ABI_CWindows_CMedia_CCore_CIVideoStreamDescriptorFactoryVtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __x_ABI_CWindows_CMedia_CCore_CIVideoStreamDescriptorFactory_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __x_ABI_CWindows_CMedia_CCore_CIVideoStreamDescriptorFactory_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __x_ABI_CWindows_CMedia_CCore_CIVideoStreamDescriptorFactory_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __x_ABI_CWindows_CMedia_CCore_CIVideoStreamDescriptorFactory_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __x_ABI_CWindows_CMedia_CCore_CIVideoStreamDescriptorFactory_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __x_ABI_CWindows_CMedia_CCore_CIVideoStreamDescriptorFactory_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __x_ABI_CWindows_CMedia_CCore_CIVideoStreamDescriptorFactory_Create(This, encodingProperties, result) \
    ((This)->lpVtbl->Create(This, encodingProperties, result))

#endif /* COBJMACROS */

EXTERN_C const IID IID___x_ABI_CWindows_CMedia_CCore_CIVideoStreamDescriptorFactory;
#endif /* !defined(____x_ABI_CWindows_CMedia_CCore_CIVideoStreamDescriptorFactory_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Interface Windows.Media.Core.IVideoTrack
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 3.0
 *
 * Interface is a part of the implementation of type Windows.Media.Core.VideoTrack
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x30000
#if !defined(____x_ABI_CWindows_CMedia_CCore_CIVideoTrack_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CMedia_CCore_CIVideoTrack_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Media_Core_IVideoTrack[] = L"Windows.Media.Core.IVideoTrack";
typedef struct __x_ABI_CWindows_CMedia_CCore_CIVideoTrackVtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CMedia_CCore_CIVideoTrack* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CMedia_CCore_CIVideoTrack* This);
    ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CMedia_CCore_CIVideoTrack* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CMedia_CCore_CIVideoTrack* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CMedia_CCore_CIVideoTrack* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CMedia_CCore_CIVideoTrack* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* add_OpenFailed)(__x_ABI_CWindows_CMedia_CCore_CIVideoTrack* This,
        __FITypedEventHandler_2_Windows__CMedia__CCore__CVideoTrack_Windows__CMedia__CCore__CVideoTrackOpenFailedEventArgs* handler,
        EventRegistrationToken* token);
    HRESULT (STDMETHODCALLTYPE* remove_OpenFailed)(__x_ABI_CWindows_CMedia_CCore_CIVideoTrack* This,
        EventRegistrationToken token);
    HRESULT (STDMETHODCALLTYPE* GetEncodingProperties)(__x_ABI_CWindows_CMedia_CCore_CIVideoTrack* This,
        __x_ABI_CWindows_CMedia_CMediaProperties_CIVideoEncodingProperties** value);
    HRESULT (STDMETHODCALLTYPE* get_PlaybackItem)(__x_ABI_CWindows_CMedia_CCore_CIVideoTrack* This,
        __x_ABI_CWindows_CMedia_CPlayback_CIMediaPlaybackItem** value);
    HRESULT (STDMETHODCALLTYPE* get_Name)(__x_ABI_CWindows_CMedia_CCore_CIVideoTrack* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_SupportInfo)(__x_ABI_CWindows_CMedia_CCore_CIVideoTrack* This,
        __x_ABI_CWindows_CMedia_CCore_CIVideoTrackSupportInfo** value);

    END_INTERFACE
} __x_ABI_CWindows_CMedia_CCore_CIVideoTrackVtbl;

interface __x_ABI_CWindows_CMedia_CCore_CIVideoTrack
{
    CONST_VTBL struct __x_ABI_CWindows_CMedia_CCore_CIVideoTrackVtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __x_ABI_CWindows_CMedia_CCore_CIVideoTrack_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __x_ABI_CWindows_CMedia_CCore_CIVideoTrack_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __x_ABI_CWindows_CMedia_CCore_CIVideoTrack_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __x_ABI_CWindows_CMedia_CCore_CIVideoTrack_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __x_ABI_CWindows_CMedia_CCore_CIVideoTrack_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __x_ABI_CWindows_CMedia_CCore_CIVideoTrack_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __x_ABI_CWindows_CMedia_CCore_CIVideoTrack_add_OpenFailed(This, handler, token) \
    ((This)->lpVtbl->add_OpenFailed(This, handler, token))

#define __x_ABI_CWindows_CMedia_CCore_CIVideoTrack_remove_OpenFailed(This, token) \
    ((This)->lpVtbl->remove_OpenFailed(This, token))

#define __x_ABI_CWindows_CMedia_CCore_CIVideoTrack_GetEncodingProperties(This, value) \
    ((This)->lpVtbl->GetEncodingProperties(This, value))

#define __x_ABI_CWindows_CMedia_CCore_CIVideoTrack_get_PlaybackItem(This, value) \
    ((This)->lpVtbl->get_PlaybackItem(This, value))

#define __x_ABI_CWindows_CMedia_CCore_CIVideoTrack_get_Name(This, value) \
    ((This)->lpVtbl->get_Name(This, value))

#define __x_ABI_CWindows_CMedia_CCore_CIVideoTrack_get_SupportInfo(This, value) \
    ((This)->lpVtbl->get_SupportInfo(This, value))

#endif /* COBJMACROS */

EXTERN_C const IID IID___x_ABI_CWindows_CMedia_CCore_CIVideoTrack;
#endif /* !defined(____x_ABI_CWindows_CMedia_CCore_CIVideoTrack_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x30000

/*
 *
 * Interface Windows.Media.Core.IVideoTrackOpenFailedEventArgs
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 3.0
 *
 * Interface is a part of the implementation of type Windows.Media.Core.VideoTrackOpenFailedEventArgs
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x30000
#if !defined(____x_ABI_CWindows_CMedia_CCore_CIVideoTrackOpenFailedEventArgs_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CMedia_CCore_CIVideoTrackOpenFailedEventArgs_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Media_Core_IVideoTrackOpenFailedEventArgs[] = L"Windows.Media.Core.IVideoTrackOpenFailedEventArgs";
typedef struct __x_ABI_CWindows_CMedia_CCore_CIVideoTrackOpenFailedEventArgsVtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CMedia_CCore_CIVideoTrackOpenFailedEventArgs* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CMedia_CCore_CIVideoTrackOpenFailedEventArgs* This);
    ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CMedia_CCore_CIVideoTrackOpenFailedEventArgs* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CMedia_CCore_CIVideoTrackOpenFailedEventArgs* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CMedia_CCore_CIVideoTrackOpenFailedEventArgs* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CMedia_CCore_CIVideoTrackOpenFailedEventArgs* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* get_ExtendedError)(__x_ABI_CWindows_CMedia_CCore_CIVideoTrackOpenFailedEventArgs* This,
        HRESULT* value);

    END_INTERFACE
} __x_ABI_CWindows_CMedia_CCore_CIVideoTrackOpenFailedEventArgsVtbl;

interface __x_ABI_CWindows_CMedia_CCore_CIVideoTrackOpenFailedEventArgs
{
    CONST_VTBL struct __x_ABI_CWindows_CMedia_CCore_CIVideoTrackOpenFailedEventArgsVtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __x_ABI_CWindows_CMedia_CCore_CIVideoTrackOpenFailedEventArgs_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __x_ABI_CWindows_CMedia_CCore_CIVideoTrackOpenFailedEventArgs_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __x_ABI_CWindows_CMedia_CCore_CIVideoTrackOpenFailedEventArgs_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __x_ABI_CWindows_CMedia_CCore_CIVideoTrackOpenFailedEventArgs_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __x_ABI_CWindows_CMedia_CCore_CIVideoTrackOpenFailedEventArgs_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __x_ABI_CWindows_CMedia_CCore_CIVideoTrackOpenFailedEventArgs_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __x_ABI_CWindows_CMedia_CCore_CIVideoTrackOpenFailedEventArgs_get_ExtendedError(This, value) \
    ((This)->lpVtbl->get_ExtendedError(This, value))

#endif /* COBJMACROS */

EXTERN_C const IID IID___x_ABI_CWindows_CMedia_CCore_CIVideoTrackOpenFailedEventArgs;
#endif /* !defined(____x_ABI_CWindows_CMedia_CCore_CIVideoTrackOpenFailedEventArgs_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x30000

/*
 *
 * Interface Windows.Media.Core.IVideoTrackSupportInfo
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 3.0
 *
 * Interface is a part of the implementation of type Windows.Media.Core.VideoTrackSupportInfo
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x30000
#if !defined(____x_ABI_CWindows_CMedia_CCore_CIVideoTrackSupportInfo_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CMedia_CCore_CIVideoTrackSupportInfo_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_Media_Core_IVideoTrackSupportInfo[] = L"Windows.Media.Core.IVideoTrackSupportInfo";
typedef struct __x_ABI_CWindows_CMedia_CCore_CIVideoTrackSupportInfoVtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CMedia_CCore_CIVideoTrackSupportInfo* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CMedia_CCore_CIVideoTrackSupportInfo* This);
    ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CMedia_CCore_CIVideoTrackSupportInfo* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CMedia_CCore_CIVideoTrackSupportInfo* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CMedia_CCore_CIVideoTrackSupportInfo* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CMedia_CCore_CIVideoTrackSupportInfo* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* get_DecoderStatus)(__x_ABI_CWindows_CMedia_CCore_CIVideoTrackSupportInfo* This,
        enum __x_ABI_CWindows_CMedia_CCore_CMediaDecoderStatus* value);
    HRESULT (STDMETHODCALLTYPE* get_MediaSourceStatus)(__x_ABI_CWindows_CMedia_CCore_CIVideoTrackSupportInfo* This,
        enum __x_ABI_CWindows_CMedia_CCore_CMediaSourceStatus* value);

    END_INTERFACE
} __x_ABI_CWindows_CMedia_CCore_CIVideoTrackSupportInfoVtbl;

interface __x_ABI_CWindows_CMedia_CCore_CIVideoTrackSupportInfo
{
    CONST_VTBL struct __x_ABI_CWindows_CMedia_CCore_CIVideoTrackSupportInfoVtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __x_ABI_CWindows_CMedia_CCore_CIVideoTrackSupportInfo_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __x_ABI_CWindows_CMedia_CCore_CIVideoTrackSupportInfo_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __x_ABI_CWindows_CMedia_CCore_CIVideoTrackSupportInfo_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __x_ABI_CWindows_CMedia_CCore_CIVideoTrackSupportInfo_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __x_ABI_CWindows_CMedia_CCore_CIVideoTrackSupportInfo_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __x_ABI_CWindows_CMedia_CCore_CIVideoTrackSupportInfo_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __x_ABI_CWindows_CMedia_CCore_CIVideoTrackSupportInfo_get_DecoderStatus(This, value) \
    ((This)->lpVtbl->get_DecoderStatus(This, value))

#define __x_ABI_CWindows_CMedia_CCore_CIVideoTrackSupportInfo_get_MediaSourceStatus(This, value) \
    ((This)->lpVtbl->get_MediaSourceStatus(This, value))

#endif /* COBJMACROS */

EXTERN_C const IID IID___x_ABI_CWindows_CMedia_CCore_CIVideoTrackSupportInfo;
#endif /* !defined(____x_ABI_CWindows_CMedia_CCore_CIVideoTrackSupportInfo_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x30000

/*
 *
 * Class Windows.Media.Core.AudioStreamDescriptor
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * RuntimeClass can be activated.
 *   Type can be activated via the Windows.Media.Core.IAudioStreamDescriptorFactory interface starting with version 1.0 of the Windows.Foundation.UniversalApiContract API contract
 *
 * Class implements the following interfaces:
 *    Windows.Media.Core.IAudioStreamDescriptor ** Default Interface **
 *    Windows.Media.Core.IMediaStreamDescriptor
 *    Windows.Media.Core.IAudioStreamDescriptor2
 *    Windows.Media.Core.IMediaStreamDescriptor2
 *    Windows.Media.Core.IAudioStreamDescriptor3
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#ifndef RUNTIMECLASS_Windows_Media_Core_AudioStreamDescriptor_DEFINED
#define RUNTIMECLASS_Windows_Media_Core_AudioStreamDescriptor_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Windows_Media_Core_AudioStreamDescriptor[] = L"Windows.Media.Core.AudioStreamDescriptor";
#endif
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Class Windows.Media.Core.AudioTrack
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Class implements the following interfaces:
 *    Windows.Media.Core.IMediaTrack ** Default Interface **
 *    Windows.Media.Core.IAudioTrack
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#ifndef RUNTIMECLASS_Windows_Media_Core_AudioTrack_DEFINED
#define RUNTIMECLASS_Windows_Media_Core_AudioTrack_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Windows_Media_Core_AudioTrack[] = L"Windows.Media.Core.AudioTrack";
#endif
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Class Windows.Media.Core.AudioTrackOpenFailedEventArgs
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 3.0
 *
 * Class implements the following interfaces:
 *    Windows.Media.Core.IAudioTrackOpenFailedEventArgs ** Default Interface **
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x30000
#ifndef RUNTIMECLASS_Windows_Media_Core_AudioTrackOpenFailedEventArgs_DEFINED
#define RUNTIMECLASS_Windows_Media_Core_AudioTrackOpenFailedEventArgs_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Windows_Media_Core_AudioTrackOpenFailedEventArgs[] = L"Windows.Media.Core.AudioTrackOpenFailedEventArgs";
#endif
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x30000

/*
 *
 * Class Windows.Media.Core.AudioTrackSupportInfo
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 3.0
 *
 * Class implements the following interfaces:
 *    Windows.Media.Core.IAudioTrackSupportInfo ** Default Interface **
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x30000
#ifndef RUNTIMECLASS_Windows_Media_Core_AudioTrackSupportInfo_DEFINED
#define RUNTIMECLASS_Windows_Media_Core_AudioTrackSupportInfo_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Windows_Media_Core_AudioTrackSupportInfo[] = L"Windows.Media.Core.AudioTrackSupportInfo";
#endif
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x30000

/*
 *
 * Class Windows.Media.Core.ChapterCue
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 4.0
 *
 * RuntimeClass can be activated.
 *   Type can be activated via RoActivateInstance starting with version 4.0 of the Windows.Foundation.UniversalApiContract API contract
 *
 * Class implements the following interfaces:
 *    Windows.Media.Core.IChapterCue ** Default Interface **
 *    Windows.Media.Core.IMediaCue
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x40000
#ifndef RUNTIMECLASS_Windows_Media_Core_ChapterCue_DEFINED
#define RUNTIMECLASS_Windows_Media_Core_ChapterCue_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Windows_Media_Core_ChapterCue[] = L"Windows.Media.Core.ChapterCue";
#endif
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x40000

/*
 *
 * Class Windows.Media.Core.CodecInfo
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 4.0
 *
 * Class implements the following interfaces:
 *    Windows.Media.Core.ICodecInfo ** Default Interface **
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x40000
#ifndef RUNTIMECLASS_Windows_Media_Core_CodecInfo_DEFINED
#define RUNTIMECLASS_Windows_Media_Core_CodecInfo_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Windows_Media_Core_CodecInfo[] = L"Windows.Media.Core.CodecInfo";
#endif
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x40000

/*
 *
 * Class Windows.Media.Core.CodecQuery
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 4.0
 *
 * RuntimeClass can be activated.
 *   Type can be activated via RoActivateInstance starting with version 4.0 of the Windows.Foundation.UniversalApiContract API contract
 *
 * Class implements the following interfaces:
 *    Windows.Media.Core.ICodecQuery ** Default Interface **
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x40000
#ifndef RUNTIMECLASS_Windows_Media_Core_CodecQuery_DEFINED
#define RUNTIMECLASS_Windows_Media_Core_CodecQuery_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Windows_Media_Core_CodecQuery[] = L"Windows.Media.Core.CodecQuery";
#endif
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x40000

/*
 *
 * Class Windows.Media.Core.CodecSubtypes
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 4.0
 *
 * RuntimeClass contains static methods.
 *   Static Methods exist on the Windows.Media.Core.ICodecSubtypesStatics interface starting with version 4.0 of the Windows.Foundation.UniversalApiContract API contract
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x40000
#ifndef RUNTIMECLASS_Windows_Media_Core_CodecSubtypes_DEFINED
#define RUNTIMECLASS_Windows_Media_Core_CodecSubtypes_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Windows_Media_Core_CodecSubtypes[] = L"Windows.Media.Core.CodecSubtypes";
#endif
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x40000

/*
 *
 * Class Windows.Media.Core.DataCue
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * RuntimeClass can be activated.
 *   Type can be activated via RoActivateInstance starting with version 1.0 of the Windows.Foundation.UniversalApiContract API contract
 *
 * Class implements the following interfaces:
 *    Windows.Media.Core.IDataCue ** Default Interface **
 *    Windows.Media.Core.IMediaCue
 *    Windows.Media.Core.IDataCue2
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#ifndef RUNTIMECLASS_Windows_Media_Core_DataCue_DEFINED
#define RUNTIMECLASS_Windows_Media_Core_DataCue_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Windows_Media_Core_DataCue[] = L"Windows.Media.Core.DataCue";
#endif
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Class Windows.Media.Core.FaceDetectedEventArgs
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Class implements the following interfaces:
 *    Windows.Media.Core.IFaceDetectedEventArgs ** Default Interface **
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#ifndef RUNTIMECLASS_Windows_Media_Core_FaceDetectedEventArgs_DEFINED
#define RUNTIMECLASS_Windows_Media_Core_FaceDetectedEventArgs_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Windows_Media_Core_FaceDetectedEventArgs[] = L"Windows.Media.Core.FaceDetectedEventArgs";
#endif
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Class Windows.Media.Core.FaceDetectionEffect
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Class implements the following interfaces:
 *    Windows.Media.Core.IFaceDetectionEffect ** Default Interface **
 *    Windows.Media.IMediaExtension
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#ifndef RUNTIMECLASS_Windows_Media_Core_FaceDetectionEffect_DEFINED
#define RUNTIMECLASS_Windows_Media_Core_FaceDetectionEffect_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Windows_Media_Core_FaceDetectionEffect[] = L"Windows.Media.Core.FaceDetectionEffect";
#endif
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Class Windows.Media.Core.FaceDetectionEffectDefinition
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * RuntimeClass can be activated.
 *   Type can be activated via RoActivateInstance starting with version 1.0 of the Windows.Foundation.UniversalApiContract API contract
 *
 * Class implements the following interfaces:
 *    Windows.Media.Effects.IVideoEffectDefinition ** Default Interface **
 *    Windows.Media.Core.IFaceDetectionEffectDefinition
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#ifndef RUNTIMECLASS_Windows_Media_Core_FaceDetectionEffectDefinition_DEFINED
#define RUNTIMECLASS_Windows_Media_Core_FaceDetectionEffectDefinition_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Windows_Media_Core_FaceDetectionEffectDefinition[] = L"Windows.Media.Core.FaceDetectionEffectDefinition";
#endif
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Class Windows.Media.Core.FaceDetectionEffectFrame
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Class implements the following interfaces:
 *    Windows.Media.Core.IFaceDetectionEffectFrame ** Default Interface **
 *    Windows.Media.IMediaFrame
 *    Windows.Foundation.IClosable
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#ifndef RUNTIMECLASS_Windows_Media_Core_FaceDetectionEffectFrame_DEFINED
#define RUNTIMECLASS_Windows_Media_Core_FaceDetectionEffectFrame_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Windows_Media_Core_FaceDetectionEffectFrame[] = L"Windows.Media.Core.FaceDetectionEffectFrame";
#endif
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Class Windows.Media.Core.HighDynamicRangeControl
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Class implements the following interfaces:
 *    Windows.Media.Core.IHighDynamicRangeControl ** Default Interface **
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#ifndef RUNTIMECLASS_Windows_Media_Core_HighDynamicRangeControl_DEFINED
#define RUNTIMECLASS_Windows_Media_Core_HighDynamicRangeControl_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Windows_Media_Core_HighDynamicRangeControl[] = L"Windows.Media.Core.HighDynamicRangeControl";
#endif
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Class Windows.Media.Core.HighDynamicRangeOutput
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Class implements the following interfaces:
 *    Windows.Media.Core.IHighDynamicRangeOutput ** Default Interface **
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#ifndef RUNTIMECLASS_Windows_Media_Core_HighDynamicRangeOutput_DEFINED
#define RUNTIMECLASS_Windows_Media_Core_HighDynamicRangeOutput_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Windows_Media_Core_HighDynamicRangeOutput[] = L"Windows.Media.Core.HighDynamicRangeOutput";
#endif
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Class Windows.Media.Core.ImageCue
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 4.0
 *
 * RuntimeClass can be activated.
 *   Type can be activated via RoActivateInstance starting with version 4.0 of the Windows.Foundation.UniversalApiContract API contract
 *
 * Class implements the following interfaces:
 *    Windows.Media.Core.IImageCue ** Default Interface **
 *    Windows.Media.Core.IMediaCue
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x40000
#ifndef RUNTIMECLASS_Windows_Media_Core_ImageCue_DEFINED
#define RUNTIMECLASS_Windows_Media_Core_ImageCue_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Windows_Media_Core_ImageCue[] = L"Windows.Media.Core.ImageCue";
#endif
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x40000

/*
 *
 * Class Windows.Media.Core.InitializeMediaStreamSourceRequestedEventArgs
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 5.0
 *
 * Class implements the following interfaces:
 *    Windows.Media.Core.IInitializeMediaStreamSourceRequestedEventArgs ** Default Interface **
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x50000
#ifndef RUNTIMECLASS_Windows_Media_Core_InitializeMediaStreamSourceRequestedEventArgs_DEFINED
#define RUNTIMECLASS_Windows_Media_Core_InitializeMediaStreamSourceRequestedEventArgs_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Windows_Media_Core_InitializeMediaStreamSourceRequestedEventArgs[] = L"Windows.Media.Core.InitializeMediaStreamSourceRequestedEventArgs";
#endif
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x50000

/*
 *
 * Class Windows.Media.Core.LowLightFusion
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 5.0
 *
 * RuntimeClass contains static methods.
 *   Static Methods exist on the Windows.Media.Core.ILowLightFusionStatics interface starting with version 5.0 of the Windows.Foundation.UniversalApiContract API contract
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x50000
#ifndef RUNTIMECLASS_Windows_Media_Core_LowLightFusion_DEFINED
#define RUNTIMECLASS_Windows_Media_Core_LowLightFusion_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Windows_Media_Core_LowLightFusion[] = L"Windows.Media.Core.LowLightFusion";
#endif
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x50000

/*
 *
 * Class Windows.Media.Core.LowLightFusionResult
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 5.0
 *
 * Class implements the following interfaces:
 *    Windows.Media.Core.ILowLightFusionResult ** Default Interface **
 *    Windows.Foundation.IClosable
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x50000
#ifndef RUNTIMECLASS_Windows_Media_Core_LowLightFusionResult_DEFINED
#define RUNTIMECLASS_Windows_Media_Core_LowLightFusionResult_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Windows_Media_Core_LowLightFusionResult[] = L"Windows.Media.Core.LowLightFusionResult";
#endif
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x50000

/*
 *
 * Class Windows.Media.Core.MediaBinder
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 2.0
 *
 * RuntimeClass can be activated.
 *   Type can be activated via RoActivateInstance starting with version 2.0 of the Windows.Foundation.UniversalApiContract API contract
 *
 * Class implements the following interfaces:
 *    Windows.Media.Core.IMediaBinder ** Default Interface **
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x20000
#ifndef RUNTIMECLASS_Windows_Media_Core_MediaBinder_DEFINED
#define RUNTIMECLASS_Windows_Media_Core_MediaBinder_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Windows_Media_Core_MediaBinder[] = L"Windows.Media.Core.MediaBinder";
#endif
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x20000

/*
 *
 * Class Windows.Media.Core.MediaBindingEventArgs
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 2.0
 *
 * Class implements the following interfaces:
 *    Windows.Media.Core.IMediaBindingEventArgs ** Default Interface **
 *    Windows.Media.Core.IMediaBindingEventArgs2
 *    Windows.Media.Core.IMediaBindingEventArgs3
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x20000
#ifndef RUNTIMECLASS_Windows_Media_Core_MediaBindingEventArgs_DEFINED
#define RUNTIMECLASS_Windows_Media_Core_MediaBindingEventArgs_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Windows_Media_Core_MediaBindingEventArgs[] = L"Windows.Media.Core.MediaBindingEventArgs";
#endif
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x20000

/*
 *
 * Class Windows.Media.Core.MediaCueEventArgs
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Class implements the following interfaces:
 *    Windows.Media.Core.IMediaCueEventArgs ** Default Interface **
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#ifndef RUNTIMECLASS_Windows_Media_Core_MediaCueEventArgs_DEFINED
#define RUNTIMECLASS_Windows_Media_Core_MediaCueEventArgs_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Windows_Media_Core_MediaCueEventArgs[] = L"Windows.Media.Core.MediaCueEventArgs";
#endif
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Class Windows.Media.Core.MediaSource
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * RuntimeClass contains static methods.
 *   Static Methods exist on the Windows.Media.Core.IMediaSourceStatics interface starting with version 1.0 of the Windows.Foundation.UniversalApiContract API contract
 *   Static Methods exist on the Windows.Media.Core.IMediaSourceStatics2 interface starting with version 2.0 of the Windows.Foundation.UniversalApiContract API contract
 *   Static Methods exist on the Windows.Media.Core.IMediaSourceStatics4 interface starting with version 6.0 of the Windows.Foundation.UniversalApiContract API contract
 *   Static Methods exist on the Windows.Media.Core.IMediaSourceStatics3 interface starting with version 5.0 of the Windows.Foundation.UniversalApiContract API contract
 *
 * Class implements the following interfaces:
 *    Windows.Media.Core.IMediaSource2 ** Default Interface **
 *    Windows.Foundation.IClosable
 *    Windows.Media.Playback.IMediaPlaybackSource
 *    Windows.Media.Core.IMediaSource3
 *    Windows.Media.Core.IMediaSource4
 *    Windows.Media.Core.IMediaSource5
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#ifndef RUNTIMECLASS_Windows_Media_Core_MediaSource_DEFINED
#define RUNTIMECLASS_Windows_Media_Core_MediaSource_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Windows_Media_Core_MediaSource[] = L"Windows.Media.Core.MediaSource";
#endif
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Class Windows.Media.Core.MediaSourceAppServiceConnection
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 5.0
 *
 * RuntimeClass can be activated.
 *   Type can be activated via the Windows.Media.Core.IMediaSourceAppServiceConnectionFactory interface starting with version 5.0 of the Windows.Foundation.UniversalApiContract API contract
 *
 * Class implements the following interfaces:
 *    Windows.Media.Core.IMediaSourceAppServiceConnection ** Default Interface **
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x50000
#ifndef RUNTIMECLASS_Windows_Media_Core_MediaSourceAppServiceConnection_DEFINED
#define RUNTIMECLASS_Windows_Media_Core_MediaSourceAppServiceConnection_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Windows_Media_Core_MediaSourceAppServiceConnection[] = L"Windows.Media.Core.MediaSourceAppServiceConnection";
#endif
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x50000

/*
 *
 * Class Windows.Media.Core.MediaSourceError
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Class implements the following interfaces:
 *    Windows.Media.Core.IMediaSourceError ** Default Interface **
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#ifndef RUNTIMECLASS_Windows_Media_Core_MediaSourceError_DEFINED
#define RUNTIMECLASS_Windows_Media_Core_MediaSourceError_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Windows_Media_Core_MediaSourceError[] = L"Windows.Media.Core.MediaSourceError";
#endif
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Class Windows.Media.Core.MediaSourceOpenOperationCompletedEventArgs
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Class implements the following interfaces:
 *    Windows.Media.Core.IMediaSourceOpenOperationCompletedEventArgs ** Default Interface **
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#ifndef RUNTIMECLASS_Windows_Media_Core_MediaSourceOpenOperationCompletedEventArgs_DEFINED
#define RUNTIMECLASS_Windows_Media_Core_MediaSourceOpenOperationCompletedEventArgs_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Windows_Media_Core_MediaSourceOpenOperationCompletedEventArgs[] = L"Windows.Media.Core.MediaSourceOpenOperationCompletedEventArgs";
#endif
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Class Windows.Media.Core.MediaSourceStateChangedEventArgs
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 2.0
 *
 * Class implements the following interfaces:
 *    Windows.Media.Core.IMediaSourceStateChangedEventArgs ** Default Interface **
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x20000
#ifndef RUNTIMECLASS_Windows_Media_Core_MediaSourceStateChangedEventArgs_DEFINED
#define RUNTIMECLASS_Windows_Media_Core_MediaSourceStateChangedEventArgs_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Windows_Media_Core_MediaSourceStateChangedEventArgs[] = L"Windows.Media.Core.MediaSourceStateChangedEventArgs";
#endif
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x20000

/*
 *
 * Class Windows.Media.Core.MediaStreamSample
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * RuntimeClass contains static methods.
 *   Static Methods exist on the Windows.Media.Core.IMediaStreamSampleStatics2 interface starting with version 7.0 of the Windows.Foundation.UniversalApiContract API contract
 *   Static Methods exist on the Windows.Media.Core.IMediaStreamSampleStatics interface starting with version 1.0 of the Windows.Foundation.UniversalApiContract API contract
 *
 * Class implements the following interfaces:
 *    Windows.Media.Core.IMediaStreamSample ** Default Interface **
 *    Windows.Media.Core.IMediaStreamSample2
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#ifndef RUNTIMECLASS_Windows_Media_Core_MediaStreamSample_DEFINED
#define RUNTIMECLASS_Windows_Media_Core_MediaStreamSample_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Windows_Media_Core_MediaStreamSample[] = L"Windows.Media.Core.MediaStreamSample";
#endif
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Class Windows.Media.Core.MediaStreamSamplePropertySet
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Class implements the following interfaces:
 *    Windows.Foundation.Collections.IMap`2<Guid, Object> ** Default Interface **
 *    Windows.Foundation.Collections.IIterable`1<Windows.Foundation.Collections.IKeyValuePair`2<Guid, Object>>
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#ifndef RUNTIMECLASS_Windows_Media_Core_MediaStreamSamplePropertySet_DEFINED
#define RUNTIMECLASS_Windows_Media_Core_MediaStreamSamplePropertySet_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Windows_Media_Core_MediaStreamSamplePropertySet[] = L"Windows.Media.Core.MediaStreamSamplePropertySet";
#endif
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Class Windows.Media.Core.MediaStreamSampleProtectionProperties
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Class implements the following interfaces:
 *    Windows.Media.Core.IMediaStreamSampleProtectionProperties ** Default Interface **
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#ifndef RUNTIMECLASS_Windows_Media_Core_MediaStreamSampleProtectionProperties_DEFINED
#define RUNTIMECLASS_Windows_Media_Core_MediaStreamSampleProtectionProperties_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Windows_Media_Core_MediaStreamSampleProtectionProperties[] = L"Windows.Media.Core.MediaStreamSampleProtectionProperties";
#endif
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Class Windows.Media.Core.MediaStreamSource
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * RuntimeClass can be activated.
 *   Type can be activated via the Windows.Media.Core.IMediaStreamSourceFactory interface starting with version 1.0 of the Windows.Foundation.UniversalApiContract API contract
 *
 * Class implements the following interfaces:
 *    Windows.Media.Core.IMediaStreamSource ** Default Interface **
 *    Windows.Media.Core.IMediaSource
 *    Windows.Media.Core.IMediaStreamSource2
 *    Windows.Media.Core.IMediaStreamSource3
 *    Windows.Media.Core.IMediaStreamSource4
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#ifndef RUNTIMECLASS_Windows_Media_Core_MediaStreamSource_DEFINED
#define RUNTIMECLASS_Windows_Media_Core_MediaStreamSource_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Windows_Media_Core_MediaStreamSource[] = L"Windows.Media.Core.MediaStreamSource";
#endif
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Class Windows.Media.Core.MediaStreamSourceClosedEventArgs
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Class implements the following interfaces:
 *    Windows.Media.Core.IMediaStreamSourceClosedEventArgs ** Default Interface **
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#ifndef RUNTIMECLASS_Windows_Media_Core_MediaStreamSourceClosedEventArgs_DEFINED
#define RUNTIMECLASS_Windows_Media_Core_MediaStreamSourceClosedEventArgs_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Windows_Media_Core_MediaStreamSourceClosedEventArgs[] = L"Windows.Media.Core.MediaStreamSourceClosedEventArgs";
#endif
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Class Windows.Media.Core.MediaStreamSourceClosedRequest
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Class implements the following interfaces:
 *    Windows.Media.Core.IMediaStreamSourceClosedRequest ** Default Interface **
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#ifndef RUNTIMECLASS_Windows_Media_Core_MediaStreamSourceClosedRequest_DEFINED
#define RUNTIMECLASS_Windows_Media_Core_MediaStreamSourceClosedRequest_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Windows_Media_Core_MediaStreamSourceClosedRequest[] = L"Windows.Media.Core.MediaStreamSourceClosedRequest";
#endif
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Class Windows.Media.Core.MediaStreamSourceSampleRenderedEventArgs
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 3.0
 *
 * Class implements the following interfaces:
 *    Windows.Media.Core.IMediaStreamSourceSampleRenderedEventArgs ** Default Interface **
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x30000
#ifndef RUNTIMECLASS_Windows_Media_Core_MediaStreamSourceSampleRenderedEventArgs_DEFINED
#define RUNTIMECLASS_Windows_Media_Core_MediaStreamSourceSampleRenderedEventArgs_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Windows_Media_Core_MediaStreamSourceSampleRenderedEventArgs[] = L"Windows.Media.Core.MediaStreamSourceSampleRenderedEventArgs";
#endif
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x30000

/*
 *
 * Class Windows.Media.Core.MediaStreamSourceSampleRequest
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Class implements the following interfaces:
 *    Windows.Media.Core.IMediaStreamSourceSampleRequest ** Default Interface **
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#ifndef RUNTIMECLASS_Windows_Media_Core_MediaStreamSourceSampleRequest_DEFINED
#define RUNTIMECLASS_Windows_Media_Core_MediaStreamSourceSampleRequest_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Windows_Media_Core_MediaStreamSourceSampleRequest[] = L"Windows.Media.Core.MediaStreamSourceSampleRequest";
#endif
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Class Windows.Media.Core.MediaStreamSourceSampleRequestDeferral
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Class implements the following interfaces:
 *    Windows.Media.Core.IMediaStreamSourceSampleRequestDeferral ** Default Interface **
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#ifndef RUNTIMECLASS_Windows_Media_Core_MediaStreamSourceSampleRequestDeferral_DEFINED
#define RUNTIMECLASS_Windows_Media_Core_MediaStreamSourceSampleRequestDeferral_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Windows_Media_Core_MediaStreamSourceSampleRequestDeferral[] = L"Windows.Media.Core.MediaStreamSourceSampleRequestDeferral";
#endif
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Class Windows.Media.Core.MediaStreamSourceSampleRequestedEventArgs
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Class implements the following interfaces:
 *    Windows.Media.Core.IMediaStreamSourceSampleRequestedEventArgs ** Default Interface **
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#ifndef RUNTIMECLASS_Windows_Media_Core_MediaStreamSourceSampleRequestedEventArgs_DEFINED
#define RUNTIMECLASS_Windows_Media_Core_MediaStreamSourceSampleRequestedEventArgs_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Windows_Media_Core_MediaStreamSourceSampleRequestedEventArgs[] = L"Windows.Media.Core.MediaStreamSourceSampleRequestedEventArgs";
#endif
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Class Windows.Media.Core.MediaStreamSourceStartingEventArgs
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Class implements the following interfaces:
 *    Windows.Media.Core.IMediaStreamSourceStartingEventArgs ** Default Interface **
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#ifndef RUNTIMECLASS_Windows_Media_Core_MediaStreamSourceStartingEventArgs_DEFINED
#define RUNTIMECLASS_Windows_Media_Core_MediaStreamSourceStartingEventArgs_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Windows_Media_Core_MediaStreamSourceStartingEventArgs[] = L"Windows.Media.Core.MediaStreamSourceStartingEventArgs";
#endif
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Class Windows.Media.Core.MediaStreamSourceStartingRequest
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Class implements the following interfaces:
 *    Windows.Media.Core.IMediaStreamSourceStartingRequest ** Default Interface **
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#ifndef RUNTIMECLASS_Windows_Media_Core_MediaStreamSourceStartingRequest_DEFINED
#define RUNTIMECLASS_Windows_Media_Core_MediaStreamSourceStartingRequest_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Windows_Media_Core_MediaStreamSourceStartingRequest[] = L"Windows.Media.Core.MediaStreamSourceStartingRequest";
#endif
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Class Windows.Media.Core.MediaStreamSourceStartingRequestDeferral
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Class implements the following interfaces:
 *    Windows.Media.Core.IMediaStreamSourceStartingRequestDeferral ** Default Interface **
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#ifndef RUNTIMECLASS_Windows_Media_Core_MediaStreamSourceStartingRequestDeferral_DEFINED
#define RUNTIMECLASS_Windows_Media_Core_MediaStreamSourceStartingRequestDeferral_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Windows_Media_Core_MediaStreamSourceStartingRequestDeferral[] = L"Windows.Media.Core.MediaStreamSourceStartingRequestDeferral";
#endif
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Class Windows.Media.Core.MediaStreamSourceSwitchStreamsRequest
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Class implements the following interfaces:
 *    Windows.Media.Core.IMediaStreamSourceSwitchStreamsRequest ** Default Interface **
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#ifndef RUNTIMECLASS_Windows_Media_Core_MediaStreamSourceSwitchStreamsRequest_DEFINED
#define RUNTIMECLASS_Windows_Media_Core_MediaStreamSourceSwitchStreamsRequest_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Windows_Media_Core_MediaStreamSourceSwitchStreamsRequest[] = L"Windows.Media.Core.MediaStreamSourceSwitchStreamsRequest";
#endif
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Class Windows.Media.Core.MediaStreamSourceSwitchStreamsRequestDeferral
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Class implements the following interfaces:
 *    Windows.Media.Core.IMediaStreamSourceSwitchStreamsRequestDeferral ** Default Interface **
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#ifndef RUNTIMECLASS_Windows_Media_Core_MediaStreamSourceSwitchStreamsRequestDeferral_DEFINED
#define RUNTIMECLASS_Windows_Media_Core_MediaStreamSourceSwitchStreamsRequestDeferral_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Windows_Media_Core_MediaStreamSourceSwitchStreamsRequestDeferral[] = L"Windows.Media.Core.MediaStreamSourceSwitchStreamsRequestDeferral";
#endif
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Class Windows.Media.Core.MediaStreamSourceSwitchStreamsRequestedEventArgs
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Class implements the following interfaces:
 *    Windows.Media.Core.IMediaStreamSourceSwitchStreamsRequestedEventArgs ** Default Interface **
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#ifndef RUNTIMECLASS_Windows_Media_Core_MediaStreamSourceSwitchStreamsRequestedEventArgs_DEFINED
#define RUNTIMECLASS_Windows_Media_Core_MediaStreamSourceSwitchStreamsRequestedEventArgs_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Windows_Media_Core_MediaStreamSourceSwitchStreamsRequestedEventArgs[] = L"Windows.Media.Core.MediaStreamSourceSwitchStreamsRequestedEventArgs";
#endif
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Class Windows.Media.Core.MseSourceBuffer
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Class implements the following interfaces:
 *    Windows.Media.Core.IMseSourceBuffer ** Default Interface **
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#ifndef RUNTIMECLASS_Windows_Media_Core_MseSourceBuffer_DEFINED
#define RUNTIMECLASS_Windows_Media_Core_MseSourceBuffer_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Windows_Media_Core_MseSourceBuffer[] = L"Windows.Media.Core.MseSourceBuffer";
#endif
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Class Windows.Media.Core.MseSourceBufferList
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Class implements the following interfaces:
 *    Windows.Media.Core.IMseSourceBufferList ** Default Interface **
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#ifndef RUNTIMECLASS_Windows_Media_Core_MseSourceBufferList_DEFINED
#define RUNTIMECLASS_Windows_Media_Core_MseSourceBufferList_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Windows_Media_Core_MseSourceBufferList[] = L"Windows.Media.Core.MseSourceBufferList";
#endif
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Class Windows.Media.Core.MseStreamSource
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * RuntimeClass can be activated.
 *   Type can be activated via RoActivateInstance starting with version 1.0 of the Windows.Foundation.UniversalApiContract API contract
 *
 * RuntimeClass contains static methods.
 *   Static Methods exist on the Windows.Media.Core.IMseStreamSourceStatics interface starting with version 1.0 of the Windows.Foundation.UniversalApiContract API contract
 *
 * Class implements the following interfaces:
 *    Windows.Media.Core.IMseStreamSource ** Default Interface **
 *    Windows.Media.Core.IMediaSource
 *    Windows.Media.Core.IMseStreamSource2
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#ifndef RUNTIMECLASS_Windows_Media_Core_MseStreamSource_DEFINED
#define RUNTIMECLASS_Windows_Media_Core_MseStreamSource_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Windows_Media_Core_MseStreamSource[] = L"Windows.Media.Core.MseStreamSource";
#endif
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Class Windows.Media.Core.SceneAnalysisEffect
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Class implements the following interfaces:
 *    Windows.Media.Core.ISceneAnalysisEffect ** Default Interface **
 *    Windows.Media.IMediaExtension
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#ifndef RUNTIMECLASS_Windows_Media_Core_SceneAnalysisEffect_DEFINED
#define RUNTIMECLASS_Windows_Media_Core_SceneAnalysisEffect_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Windows_Media_Core_SceneAnalysisEffect[] = L"Windows.Media.Core.SceneAnalysisEffect";
#endif
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Class Windows.Media.Core.SceneAnalysisEffectDefinition
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * RuntimeClass can be activated.
 *   Type can be activated via RoActivateInstance starting with version 1.0 of the Windows.Foundation.UniversalApiContract API contract
 *
 * Class implements the following interfaces:
 *    Windows.Media.Effects.IVideoEffectDefinition ** Default Interface **
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#ifndef RUNTIMECLASS_Windows_Media_Core_SceneAnalysisEffectDefinition_DEFINED
#define RUNTIMECLASS_Windows_Media_Core_SceneAnalysisEffectDefinition_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Windows_Media_Core_SceneAnalysisEffectDefinition[] = L"Windows.Media.Core.SceneAnalysisEffectDefinition";
#endif
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Class Windows.Media.Core.SceneAnalysisEffectFrame
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Class implements the following interfaces:
 *    Windows.Media.Core.ISceneAnalysisEffectFrame ** Default Interface **
 *    Windows.Media.IMediaFrame
 *    Windows.Foundation.IClosable
 *    Windows.Media.Core.ISceneAnalysisEffectFrame2
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#ifndef RUNTIMECLASS_Windows_Media_Core_SceneAnalysisEffectFrame_DEFINED
#define RUNTIMECLASS_Windows_Media_Core_SceneAnalysisEffectFrame_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Windows_Media_Core_SceneAnalysisEffectFrame[] = L"Windows.Media.Core.SceneAnalysisEffectFrame";
#endif
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Class Windows.Media.Core.SceneAnalyzedEventArgs
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Class implements the following interfaces:
 *    Windows.Media.Core.ISceneAnalyzedEventArgs ** Default Interface **
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#ifndef RUNTIMECLASS_Windows_Media_Core_SceneAnalyzedEventArgs_DEFINED
#define RUNTIMECLASS_Windows_Media_Core_SceneAnalyzedEventArgs_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Windows_Media_Core_SceneAnalyzedEventArgs[] = L"Windows.Media.Core.SceneAnalyzedEventArgs";
#endif
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Class Windows.Media.Core.SpeechCue
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 4.0
 *
 * RuntimeClass can be activated.
 *   Type can be activated via RoActivateInstance starting with version 4.0 of the Windows.Foundation.UniversalApiContract API contract
 *
 * Class implements the following interfaces:
 *    Windows.Media.Core.ISpeechCue ** Default Interface **
 *    Windows.Media.Core.IMediaCue
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x40000
#ifndef RUNTIMECLASS_Windows_Media_Core_SpeechCue_DEFINED
#define RUNTIMECLASS_Windows_Media_Core_SpeechCue_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Windows_Media_Core_SpeechCue[] = L"Windows.Media.Core.SpeechCue";
#endif
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x40000

/*
 *
 * Class Windows.Media.Core.TimedMetadataStreamDescriptor
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 6.0
 *
 * RuntimeClass can be activated.
 *   Type can be activated via the Windows.Media.Core.ITimedMetadataStreamDescriptorFactory interface starting with version 6.0 of the Windows.Foundation.UniversalApiContract API contract
 *
 * Class implements the following interfaces:
 *    Windows.Media.Core.ITimedMetadataStreamDescriptor
 *    Windows.Media.Core.IMediaStreamDescriptor2
 *    Windows.Media.Core.IMediaStreamDescriptor ** Default Interface **
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x60000
#ifndef RUNTIMECLASS_Windows_Media_Core_TimedMetadataStreamDescriptor_DEFINED
#define RUNTIMECLASS_Windows_Media_Core_TimedMetadataStreamDescriptor_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Windows_Media_Core_TimedMetadataStreamDescriptor[] = L"Windows.Media.Core.TimedMetadataStreamDescriptor";
#endif
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x60000

/*
 *
 * Class Windows.Media.Core.TimedMetadataTrack
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * RuntimeClass can be activated.
 *   Type can be activated via the Windows.Media.Core.ITimedMetadataTrackFactory interface starting with version 1.0 of the Windows.Foundation.UniversalApiContract API contract
 *
 * Class implements the following interfaces:
 *    Windows.Media.Core.ITimedMetadataTrack ** Default Interface **
 *    Windows.Media.Core.IMediaTrack
 *    Windows.Media.Core.ITimedMetadataTrack2
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#ifndef RUNTIMECLASS_Windows_Media_Core_TimedMetadataTrack_DEFINED
#define RUNTIMECLASS_Windows_Media_Core_TimedMetadataTrack_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Windows_Media_Core_TimedMetadataTrack[] = L"Windows.Media.Core.TimedMetadataTrack";
#endif
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Class Windows.Media.Core.TimedMetadataTrackError
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Class implements the following interfaces:
 *    Windows.Media.Core.ITimedMetadataTrackError ** Default Interface **
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#ifndef RUNTIMECLASS_Windows_Media_Core_TimedMetadataTrackError_DEFINED
#define RUNTIMECLASS_Windows_Media_Core_TimedMetadataTrackError_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Windows_Media_Core_TimedMetadataTrackError[] = L"Windows.Media.Core.TimedMetadataTrackError";
#endif
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Class Windows.Media.Core.TimedMetadataTrackFailedEventArgs
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Class implements the following interfaces:
 *    Windows.Media.Core.ITimedMetadataTrackFailedEventArgs ** Default Interface **
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#ifndef RUNTIMECLASS_Windows_Media_Core_TimedMetadataTrackFailedEventArgs_DEFINED
#define RUNTIMECLASS_Windows_Media_Core_TimedMetadataTrackFailedEventArgs_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Windows_Media_Core_TimedMetadataTrackFailedEventArgs[] = L"Windows.Media.Core.TimedMetadataTrackFailedEventArgs";
#endif
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Class Windows.Media.Core.TimedTextCue
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * RuntimeClass can be activated.
 *   Type can be activated via RoActivateInstance starting with version 1.0 of the Windows.Foundation.UniversalApiContract API contract
 *
 * Class implements the following interfaces:
 *    Windows.Media.Core.ITimedTextCue ** Default Interface **
 *    Windows.Media.Core.IMediaCue
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#ifndef RUNTIMECLASS_Windows_Media_Core_TimedTextCue_DEFINED
#define RUNTIMECLASS_Windows_Media_Core_TimedTextCue_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Windows_Media_Core_TimedTextCue[] = L"Windows.Media.Core.TimedTextCue";
#endif
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Class Windows.Media.Core.TimedTextLine
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * RuntimeClass can be activated.
 *   Type can be activated via RoActivateInstance starting with version 1.0 of the Windows.Foundation.UniversalApiContract API contract
 *
 * Class implements the following interfaces:
 *    Windows.Media.Core.ITimedTextLine ** Default Interface **
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#ifndef RUNTIMECLASS_Windows_Media_Core_TimedTextLine_DEFINED
#define RUNTIMECLASS_Windows_Media_Core_TimedTextLine_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Windows_Media_Core_TimedTextLine[] = L"Windows.Media.Core.TimedTextLine";
#endif
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Class Windows.Media.Core.TimedTextRegion
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * RuntimeClass can be activated.
 *   Type can be activated via RoActivateInstance starting with version 1.0 of the Windows.Foundation.UniversalApiContract API contract
 *
 * Class implements the following interfaces:
 *    Windows.Media.Core.ITimedTextRegion ** Default Interface **
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#ifndef RUNTIMECLASS_Windows_Media_Core_TimedTextRegion_DEFINED
#define RUNTIMECLASS_Windows_Media_Core_TimedTextRegion_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Windows_Media_Core_TimedTextRegion[] = L"Windows.Media.Core.TimedTextRegion";
#endif
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Class Windows.Media.Core.TimedTextSource
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * RuntimeClass contains static methods.
 *   Static Methods exist on the Windows.Media.Core.ITimedTextSourceStatics2 interface starting with version 4.0 of the Windows.Foundation.UniversalApiContract API contract
 *   Static Methods exist on the Windows.Media.Core.ITimedTextSourceStatics interface starting with version 1.0 of the Windows.Foundation.UniversalApiContract API contract
 *
 * Class implements the following interfaces:
 *    Windows.Media.Core.ITimedTextSource ** Default Interface **
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#ifndef RUNTIMECLASS_Windows_Media_Core_TimedTextSource_DEFINED
#define RUNTIMECLASS_Windows_Media_Core_TimedTextSource_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Windows_Media_Core_TimedTextSource[] = L"Windows.Media.Core.TimedTextSource";
#endif
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Class Windows.Media.Core.TimedTextSourceResolveResultEventArgs
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Class implements the following interfaces:
 *    Windows.Media.Core.ITimedTextSourceResolveResultEventArgs ** Default Interface **
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#ifndef RUNTIMECLASS_Windows_Media_Core_TimedTextSourceResolveResultEventArgs_DEFINED
#define RUNTIMECLASS_Windows_Media_Core_TimedTextSourceResolveResultEventArgs_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Windows_Media_Core_TimedTextSourceResolveResultEventArgs[] = L"Windows.Media.Core.TimedTextSourceResolveResultEventArgs";
#endif
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Class Windows.Media.Core.TimedTextStyle
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * RuntimeClass can be activated.
 *   Type can be activated via RoActivateInstance starting with version 1.0 of the Windows.Foundation.UniversalApiContract API contract
 *
 * Class implements the following interfaces:
 *    Windows.Media.Core.ITimedTextStyle ** Default Interface **
 *    Windows.Media.Core.ITimedTextStyle2
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#ifndef RUNTIMECLASS_Windows_Media_Core_TimedTextStyle_DEFINED
#define RUNTIMECLASS_Windows_Media_Core_TimedTextStyle_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Windows_Media_Core_TimedTextStyle[] = L"Windows.Media.Core.TimedTextStyle";
#endif
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Class Windows.Media.Core.TimedTextSubformat
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * RuntimeClass can be activated.
 *   Type can be activated via RoActivateInstance starting with version 1.0 of the Windows.Foundation.UniversalApiContract API contract
 *
 * Class implements the following interfaces:
 *    Windows.Media.Core.ITimedTextSubformat ** Default Interface **
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#ifndef RUNTIMECLASS_Windows_Media_Core_TimedTextSubformat_DEFINED
#define RUNTIMECLASS_Windows_Media_Core_TimedTextSubformat_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Windows_Media_Core_TimedTextSubformat[] = L"Windows.Media.Core.TimedTextSubformat";
#endif
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Class Windows.Media.Core.VideoStabilizationEffect
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Class implements the following interfaces:
 *    Windows.Media.Core.IVideoStabilizationEffect ** Default Interface **
 *    Windows.Media.IMediaExtension
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#ifndef RUNTIMECLASS_Windows_Media_Core_VideoStabilizationEffect_DEFINED
#define RUNTIMECLASS_Windows_Media_Core_VideoStabilizationEffect_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Windows_Media_Core_VideoStabilizationEffect[] = L"Windows.Media.Core.VideoStabilizationEffect";
#endif
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Class Windows.Media.Core.VideoStabilizationEffectDefinition
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * RuntimeClass can be activated.
 *   Type can be activated via RoActivateInstance starting with version 1.0 of the Windows.Foundation.UniversalApiContract API contract
 *
 * Class implements the following interfaces:
 *    Windows.Media.Effects.IVideoEffectDefinition ** Default Interface **
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#ifndef RUNTIMECLASS_Windows_Media_Core_VideoStabilizationEffectDefinition_DEFINED
#define RUNTIMECLASS_Windows_Media_Core_VideoStabilizationEffectDefinition_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Windows_Media_Core_VideoStabilizationEffectDefinition[] = L"Windows.Media.Core.VideoStabilizationEffectDefinition";
#endif
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Class Windows.Media.Core.VideoStabilizationEffectEnabledChangedEventArgs
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Class implements the following interfaces:
 *    Windows.Media.Core.IVideoStabilizationEffectEnabledChangedEventArgs ** Default Interface **
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#ifndef RUNTIMECLASS_Windows_Media_Core_VideoStabilizationEffectEnabledChangedEventArgs_DEFINED
#define RUNTIMECLASS_Windows_Media_Core_VideoStabilizationEffectEnabledChangedEventArgs_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Windows_Media_Core_VideoStabilizationEffectEnabledChangedEventArgs[] = L"Windows.Media.Core.VideoStabilizationEffectEnabledChangedEventArgs";
#endif
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Class Windows.Media.Core.VideoStreamDescriptor
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * RuntimeClass can be activated.
 *   Type can be activated via the Windows.Media.Core.IVideoStreamDescriptorFactory interface starting with version 1.0 of the Windows.Foundation.UniversalApiContract API contract
 *
 * Class implements the following interfaces:
 *    Windows.Media.Core.IVideoStreamDescriptor ** Default Interface **
 *    Windows.Media.Core.IMediaStreamDescriptor
 *    Windows.Media.Core.IMediaStreamDescriptor2
 *    Windows.Media.Core.IVideoStreamDescriptor2
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#ifndef RUNTIMECLASS_Windows_Media_Core_VideoStreamDescriptor_DEFINED
#define RUNTIMECLASS_Windows_Media_Core_VideoStreamDescriptor_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Windows_Media_Core_VideoStreamDescriptor[] = L"Windows.Media.Core.VideoStreamDescriptor";
#endif
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Class Windows.Media.Core.VideoTrack
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Class implements the following interfaces:
 *    Windows.Media.Core.IMediaTrack ** Default Interface **
 *    Windows.Media.Core.IVideoTrack
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#ifndef RUNTIMECLASS_Windows_Media_Core_VideoTrack_DEFINED
#define RUNTIMECLASS_Windows_Media_Core_VideoTrack_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Windows_Media_Core_VideoTrack[] = L"Windows.Media.Core.VideoTrack";
#endif
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Class Windows.Media.Core.VideoTrackOpenFailedEventArgs
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 3.0
 *
 * Class implements the following interfaces:
 *    Windows.Media.Core.IVideoTrackOpenFailedEventArgs ** Default Interface **
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x30000
#ifndef RUNTIMECLASS_Windows_Media_Core_VideoTrackOpenFailedEventArgs_DEFINED
#define RUNTIMECLASS_Windows_Media_Core_VideoTrackOpenFailedEventArgs_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Windows_Media_Core_VideoTrackOpenFailedEventArgs[] = L"Windows.Media.Core.VideoTrackOpenFailedEventArgs";
#endif
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x30000

/*
 *
 * Class Windows.Media.Core.VideoTrackSupportInfo
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 3.0
 *
 * Class implements the following interfaces:
 *    Windows.Media.Core.IVideoTrackSupportInfo ** Default Interface **
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x30000
#ifndef RUNTIMECLASS_Windows_Media_Core_VideoTrackSupportInfo_DEFINED
#define RUNTIMECLASS_Windows_Media_Core_VideoTrackSupportInfo_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Windows_Media_Core_VideoTrackSupportInfo[] = L"Windows.Media.Core.VideoTrackSupportInfo";
#endif
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x30000

#endif // defined(__cplusplus)
#pragma pop_macro("MIDL_CONST_ID")
// Restore the original value of the 'DEPRECATED' macro
#pragma pop_macro("DEPRECATED")

#ifdef __clang__
#pragma clang diagnostic pop // deprecated-declarations
#else
#pragma warning(pop)
#endif
#endif // __windows2Emedia2Ecore_p_h__

#endif // __windows2Emedia2Ecore_h__
