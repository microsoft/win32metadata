//
// Copyright (c) Microsoft Corporation. All rights reserved.
// 
//
// File generated by WinMDIDL version 8.00.0021
//

import "inspectable.idl";
import "AsyncInfo.idl";
import "EventToken.idl";
import "windowscontracts.idl";
import "Windows.Foundation.idl";
import "Windows.Storage.FileProperties.idl";
import "Windows.Storage.Provider.idl";
import "Windows.Storage.Search.idl";
import "Windows.Storage.Streams.idl";
import "Windows.System.idl";

// Forward Declare
namespace Windows
{
    namespace Foundation
    {
        namespace Collections
        {
            interface IPropertySet;
        }
    }
}
namespace Windows
{
    namespace Foundation
    {
        typedef struct DateTime DateTime;

        interface IAsyncAction;

        interface IClosable;

        apicontract UniversalApiContract;

        runtimeclass Uri;
    }
}
namespace Windows
{
    namespace Storage
    {
        namespace FileProperties
        {
            runtimeclass BasicProperties;

            runtimeclass StorageItemContentProperties;

            runtimeclass StorageItemThumbnail;

            typedef enum ThumbnailMode ThumbnailMode;

            typedef enum ThumbnailOptions ThumbnailOptions;
        }
    }
}
namespace Windows
{
    namespace Storage
    {
        namespace Provider
        {
            typedef enum FileUpdateStatus FileUpdateStatus;
        }
    }
}
namespace Windows
{
    namespace Storage
    {
        namespace Search
        {
            interface IStorageFolderQueryOperations;
        }
    }
}
namespace Windows
{
    namespace Storage
    {
        namespace Streams
        {
            interface IBuffer;

            interface IInputStreamReference;

            interface IOutputStream;

            interface IRandomAccessStream;

            interface IRandomAccessStreamReference;

            typedef enum UnicodeEncoding UnicodeEncoding;
        }
    }
}
namespace Windows
{
    namespace System
    {
        runtimeclass User;
    }
}
namespace Windows
{
    namespace Storage
    {
        typedef enum ApplicationDataCreateDisposition ApplicationDataCreateDisposition;

        typedef enum ApplicationDataLocality ApplicationDataLocality;

        typedef enum CreationCollisionOption CreationCollisionOption;

        typedef enum FileAccessMode FileAccessMode;

        typedef enum FileAttributes FileAttributes;

        typedef enum KnownFolderId KnownFolderId;

        typedef enum KnownFoldersAccessStatus KnownFoldersAccessStatus;

        typedef enum KnownLibraryId KnownLibraryId;

        typedef enum NameCollisionOption NameCollisionOption;

        typedef enum StorageDeleteOption StorageDeleteOption;

        typedef enum StorageItemTypes StorageItemTypes;

        typedef enum StorageLibraryChangeType StorageLibraryChangeType;

        typedef enum StorageOpenOptions StorageOpenOptions;

        typedef enum StreamedFileFailureMode StreamedFileFailureMode;

        delegate ApplicationDataSetVersionHandler;

        delegate StreamedFileDataRequestedHandler;

        interface IAppDataPaths;

        interface IAppDataPathsStatics;

        interface IApplicationData;

        interface IApplicationData2;

        interface IApplicationData3;

        interface IApplicationDataContainer;

        interface IApplicationDataStatics;

        interface IApplicationDataStatics2;

        interface ICachedFileManagerStatics;

        interface IDownloadsFolderStatics;

        interface IDownloadsFolderStatics2;

        interface IFileIOStatics;

        interface IKnownFoldersCameraRollStatics;

        interface IKnownFoldersPlaylistsStatics;

        interface IKnownFoldersSavedPicturesStatics;

        interface IKnownFoldersStatics;

        interface IKnownFoldersStatics2;

        interface IKnownFoldersStatics3;

        interface IKnownFoldersStatics4;

        interface IPathIOStatics;

        interface ISetVersionDeferral;

        interface ISetVersionRequest;

        interface IStorageFile;

        interface IStorageFile2;

        interface IStorageFilePropertiesWithAvailability;

        interface IStorageFileStatics;

        interface IStorageFileStatics2;

        interface IStorageFolder;

        interface IStorageFolder2;

        interface IStorageFolder3;

        interface IStorageFolderStatics;

        interface IStorageFolderStatics2;

        interface IStorageItem;

        interface IStorageItem2;

        interface IStorageItemProperties;

        interface IStorageItemProperties2;

        interface IStorageItemPropertiesWithProvider;

        interface IStorageLibrary;

        interface IStorageLibrary2;

        interface IStorageLibrary3;

        interface IStorageLibraryChange;

        interface IStorageLibraryChangeReader;

        interface IStorageLibraryChangeTracker;

        interface IStorageLibraryStatics;

        interface IStorageLibraryStatics2;

        interface IStorageProvider;

        interface IStorageProvider2;

        interface IStorageStreamTransaction;

        interface IStreamedFileDataRequest;

        interface ISystemAudioProperties;

        interface ISystemDataPaths;

        interface ISystemDataPathsStatics;

        interface ISystemGPSProperties;

        interface ISystemImageProperties;

        interface ISystemMediaProperties;

        interface ISystemMusicProperties;

        interface ISystemPhotoProperties;

        interface ISystemProperties;

        interface ISystemVideoProperties;

        interface IUserDataPaths;

        interface IUserDataPathsStatics;

        runtimeclass AppDataPaths;

        runtimeclass ApplicationData;

        runtimeclass ApplicationDataCompositeValue;

        runtimeclass ApplicationDataContainer;

        runtimeclass ApplicationDataContainerSettings;

        runtimeclass CachedFileManager;

        runtimeclass DownloadsFolder;

        runtimeclass FileIO;

        runtimeclass KnownFolders;

        runtimeclass PathIO;

        runtimeclass SetVersionDeferral;

        runtimeclass SetVersionRequest;

        runtimeclass StorageFile;

        runtimeclass StorageFolder;

        runtimeclass StorageLibrary;

        runtimeclass StorageLibraryChange;

        runtimeclass StorageLibraryChangeReader;

        runtimeclass StorageLibraryChangeTracker;

        runtimeclass StorageProvider;

        runtimeclass StorageStreamTransaction;

        runtimeclass StreamedFileDataRequest;

        runtimeclass SystemAudioProperties;

        runtimeclass SystemDataPaths;

        runtimeclass SystemGPSProperties;

        runtimeclass SystemImageProperties;

        runtimeclass SystemMediaProperties;

        runtimeclass SystemMusicProperties;

        runtimeclass SystemPhotoProperties;

        runtimeclass SystemProperties;

        runtimeclass SystemVideoProperties;

        runtimeclass UserDataPaths;
    }
}

// Generic instantiations
namespace Windows
{
    namespace Storage
    {
        declare
        {
            interface Windows.Foundation.Collections.IIterable<Windows.Foundation.Collections.IKeyValuePair<HSTRING, Windows.Storage.ApplicationDataContainer*>*>;

            interface Windows.Foundation.Collections.IIterable<Windows.Storage.IStorageFile*>;

            interface Windows.Foundation.Collections.IIterable<Windows.Storage.IStorageItem*>;

            interface Windows.Foundation.Collections.IIterable<Windows.Storage.StorageFile*>;

            interface Windows.Foundation.Collections.IIterable<Windows.Storage.StorageFolder*>;

            interface Windows.Foundation.Collections.IIterable<Windows.Storage.StorageLibrary*>;

            interface Windows.Foundation.Collections.IIterable<Windows.Storage.StorageLibraryChange*>;

            interface Windows.Foundation.Collections.IIterator<Windows.Foundation.Collections.IKeyValuePair<HSTRING, Windows.Storage.ApplicationDataContainer*>*>;

            interface Windows.Foundation.Collections.IIterator<Windows.Storage.IStorageFile*>;

            interface Windows.Foundation.Collections.IIterator<Windows.Storage.IStorageItem*>;

            interface Windows.Foundation.Collections.IIterator<Windows.Storage.StorageFile*>;

            interface Windows.Foundation.Collections.IIterator<Windows.Storage.StorageFolder*>;

            interface Windows.Foundation.Collections.IIterator<Windows.Storage.StorageLibrary*>;

            interface Windows.Foundation.Collections.IIterator<Windows.Storage.StorageLibraryChange*>;

            interface Windows.Foundation.Collections.IKeyValuePair<HSTRING, Windows.Storage.ApplicationDataContainer*>;

            interface Windows.Foundation.Collections.IMapView<HSTRING, Windows.Storage.ApplicationDataContainer*>;

            interface Windows.Foundation.Collections.IObservableVector<Windows.Storage.StorageFolder*>;

            interface Windows.Foundation.Collections.IVectorView<Windows.Storage.IStorageItem*>;

            interface Windows.Foundation.Collections.IVectorView<Windows.Storage.StorageFile*>;

            interface Windows.Foundation.Collections.IVectorView<Windows.Storage.StorageFolder*>;

            interface Windows.Foundation.Collections.IVectorView<Windows.Storage.StorageLibraryChange*>;

            interface Windows.Foundation.Collections.IVector<Windows.Storage.IStorageItem*>;

            interface Windows.Foundation.Collections.IVector<Windows.Storage.StorageFile*>;

            interface Windows.Foundation.Collections.IVector<Windows.Storage.StorageFolder*>;

            interface Windows.Foundation.IAsyncOperation<Windows.Foundation.Collections.IVectorView<Windows.Storage.IStorageItem*>*>;

            interface Windows.Foundation.IAsyncOperation<Windows.Foundation.Collections.IVectorView<Windows.Storage.StorageFile*>*>;

            interface Windows.Foundation.IAsyncOperation<Windows.Foundation.Collections.IVectorView<Windows.Storage.StorageFolder*>*>;

            interface Windows.Foundation.IAsyncOperation<Windows.Foundation.Collections.IVectorView<Windows.Storage.StorageLibraryChange*>*>;

            interface Windows.Foundation.IAsyncOperation<Windows.Storage.ApplicationData*>;

            interface Windows.Foundation.IAsyncOperation<Windows.Storage.IStorageItem*>;

            interface Windows.Foundation.IAsyncOperation<Windows.Storage.KnownFoldersAccessStatus>;

            interface Windows.Foundation.IAsyncOperation<Windows.Storage.StorageFile*>;

            interface Windows.Foundation.IAsyncOperation<Windows.Storage.StorageFolder*>;

            interface Windows.Foundation.IAsyncOperation<Windows.Storage.StorageLibrary*>;

            interface Windows.Foundation.IAsyncOperation<Windows.Storage.StorageStreamTransaction*>;

            interface Windows.Foundation.TypedEventHandler<Windows.Storage.ApplicationData*, IInspectable*>;

            interface Windows.Foundation.TypedEventHandler<Windows.Storage.StorageLibrary*, IInspectable*>;
        }
    }
}

// Type definition
namespace Windows
{
    namespace Storage
    {
        [contract(Windows.Foundation.UniversalApiContract, 1.0)]
        enum ApplicationDataCreateDisposition
        {
            Always   = 0,
            Existing = 1
        };

        [contract(Windows.Foundation.UniversalApiContract, 1.0)]
        enum ApplicationDataLocality
        {
            Local      = 0,
            Roaming    = 1,
            Temporary  = 2,
            LocalCache = 3
        };

        [contract(Windows.Foundation.UniversalApiContract, 1.0)]
        enum CreationCollisionOption
        {
            GenerateUniqueName = 0,
            ReplaceExisting    = 1,
            FailIfExists       = 2,
            OpenIfExists       = 3
        };

        [contract(Windows.Foundation.UniversalApiContract, 1.0)]
        enum FileAccessMode
        {
            Read      = 0,
            ReadWrite = 1
        };

        [contract(Windows.Foundation.UniversalApiContract, 1.0)]
        [flags]
        enum FileAttributes
        {
            Normal            = 0x0,
            ReadOnly          = 0x1,
            Directory         = 0x10,
            Archive           = 0x20,
            Temporary         = 0x100,
            [contract(Windows.Foundation.UniversalApiContract, 1.0)]
            LocallyIncomplete = 0x200
        };

        [contract(Windows.Foundation.UniversalApiContract, 2.0)]
        enum KnownFolderId
        {
            AppCaptures        = 0,
            CameraRoll         = 1,
            DocumentsLibrary   = 2,
            HomeGroup          = 3,
            MediaServerDevices = 4,
            MusicLibrary       = 5,
            Objects3D          = 6,
            PicturesLibrary    = 7,
            Playlists          = 8,
            RecordedCalls      = 9,
            RemovableDevices   = 10,
            SavedPictures      = 11,
            Screenshots        = 12,
            VideosLibrary      = 13,
            [contract(Windows.Foundation.UniversalApiContract, 4.0)]
            AllAppMods         = 14,
            [contract(Windows.Foundation.UniversalApiContract, 4.0)]
            CurrentAppMods     = 15
        };

        [contract(Windows.Foundation.UniversalApiContract, 10.0)]
        enum KnownFoldersAccessStatus
        {
            DeniedBySystem     = 0,
            NotDeclaredByApp   = 1,
            DeniedByUser       = 2,
            UserPromptRequired = 3,
            Allowed            = 4
        };

        [contract(Windows.Foundation.UniversalApiContract, 1.0)]
        enum KnownLibraryId
        {
            Music     = 0,
            Pictures  = 1,
            Videos    = 2,
            Documents = 3
        };

        [contract(Windows.Foundation.UniversalApiContract, 1.0)]
        enum NameCollisionOption
        {
            GenerateUniqueName = 0,
            ReplaceExisting    = 1,
            FailIfExists       = 2
        };

        [contract(Windows.Foundation.UniversalApiContract, 1.0)]
        enum StorageDeleteOption
        {
            Default         = 0,
            PermanentDelete = 1
        };

        [contract(Windows.Foundation.UniversalApiContract, 1.0)]
        [flags]
        enum StorageItemTypes
        {
            None   = 0x0,
            File   = 0x1,
            Folder = 0x2
        };

        [contract(Windows.Foundation.UniversalApiContract, 3.0)]
        enum StorageLibraryChangeType
        {
            Created               = 0,
            Deleted               = 1,
            MovedOrRenamed        = 2,
            ContentsChanged       = 3,
            MovedOutOfLibrary     = 4,
            MovedIntoLibrary      = 5,
            ContentsReplaced      = 6,
            IndexingStatusChanged = 7,
            EncryptionChanged     = 8,
            ChangeTrackingLost    = 9
        };

        [contract(Windows.Foundation.UniversalApiContract, 1.0)]
        [flags]
        enum StorageOpenOptions
        {
            None                   = 0x0,
            AllowOnlyReaders       = 0x1,
            [contract(Windows.Foundation.UniversalApiContract, 4.0)]
            AllowReadersAndWriters = 0x2
        };

        [contract(Windows.Foundation.UniversalApiContract, 1.0)]
        enum StreamedFileFailureMode
        {
            Failed               = 0,
            CurrentlyUnavailable = 1,
            Incomplete           = 2
        };

        [contract(Windows.Foundation.UniversalApiContract, 1.0)]
        [uuid(A05791E6-CC9F-4687-ACAB-A364FD785463)]
        delegate
            HRESULT ApplicationDataSetVersionHandler([in] Windows.Storage.SetVersionRequest* setVersionRequest);

        [contract(Windows.Foundation.UniversalApiContract, 1.0)]
        [uuid(FEF6A824-2FE1-4D07-A35B-B77C50B5F4CC)]
        delegate
            HRESULT StreamedFileDataRequestedHandler([in] Windows.Storage.StreamedFileDataRequest* stream);

        [contract(Windows.Foundation.UniversalApiContract, 5.0)]
        [exclusiveto(Windows.Storage.AppDataPaths)]
        [uuid(7301D60A-79A2-48C9-9EC0-3FDA092F79E1)]
        interface IAppDataPaths : IInspectable
        {
            [propget] HRESULT Cookies([out] [retval] HSTRING* value);
            [propget] HRESULT Desktop([out] [retval] HSTRING* value);
            [propget] HRESULT Documents([out] [retval] HSTRING* value);
            [propget] HRESULT Favorites([out] [retval] HSTRING* value);
            [propget] HRESULT History([out] [retval] HSTRING* value);
            [propget] HRESULT InternetCache([out] [retval] HSTRING* value);
            [propget] HRESULT LocalAppData([out] [retval] HSTRING* value);
            [propget] HRESULT ProgramData([out] [retval] HSTRING* value);
            [propget] HRESULT RoamingAppData([out] [retval] HSTRING* value);
        }

        [contract(Windows.Foundation.UniversalApiContract, 5.0)]
        [exclusiveto(Windows.Storage.AppDataPaths)]
        [uuid(D8EB2AFE-A9D9-4B14-B999-E3921379D903)]
        interface IAppDataPathsStatics : IInspectable
        {
            HRESULT GetForUser([in] Windows.System.User* user, [out] [retval] Windows.Storage.AppDataPaths** result);
            HRESULT GetDefault([out] [retval] Windows.Storage.AppDataPaths** result);
        }

        [contract(Windows.Foundation.UniversalApiContract, 1.0)]
        [exclusiveto(Windows.Storage.ApplicationData)]
        [uuid(C3DA6FB7-B744-4B45-B0B8-223A0938D0DC)]
        interface IApplicationData : IInspectable
        {
            [propget] HRESULT Version([out] [retval] UINT32* value);
            HRESULT SetVersionAsync([in] UINT32 desiredVersion, [in] Windows.Storage.ApplicationDataSetVersionHandler* handler, [out] [retval] Windows.Foundation.IAsyncAction** setVersionOperation);
            [overload("ClearAsync")] HRESULT ClearAllAsync([out] [retval] Windows.Foundation.IAsyncAction** clearOperation);
            [overload("ClearAsync")] HRESULT ClearAsync([in] Windows.Storage.ApplicationDataLocality locality, [out] [retval] Windows.Foundation.IAsyncAction** clearOperation);
            [propget] HRESULT LocalSettings([out] [retval] Windows.Storage.ApplicationDataContainer** value);
            [propget] HRESULT RoamingSettings([out] [retval] Windows.Storage.ApplicationDataContainer** value);
            [propget] HRESULT LocalFolder([out] [retval] Windows.Storage.StorageFolder** value);
            [propget] HRESULT RoamingFolder([out] [retval] Windows.Storage.StorageFolder** value);
            [propget] HRESULT TemporaryFolder([out] [retval] Windows.Storage.StorageFolder** value);
            [eventadd] HRESULT DataChanged([in] Windows.Foundation.TypedEventHandler<Windows.Storage.ApplicationData*, IInspectable*>* handler, [out] [retval] EventRegistrationToken* token);
            [eventremove] HRESULT DataChanged([in] EventRegistrationToken token);
            HRESULT SignalDataChanged();
            [propget] HRESULT RoamingStorageQuota([out] [retval] UINT64* value);
        }

        [contract(Windows.Foundation.UniversalApiContract, 1.0)]
        [exclusiveto(Windows.Storage.ApplicationData)]
        [uuid(9E65CD69-0BA3-4E32-BE29-B02DE6607638)]
        interface IApplicationData2 : IInspectable
        {
            [propget] HRESULT LocalCacheFolder([out] [retval] Windows.Storage.StorageFolder** value);
        }

        [contract(Windows.Foundation.UniversalApiContract, 1.0)]
        [exclusiveto(Windows.Storage.ApplicationData)]
        [uuid(DC222CF4-2772-4C1D-AA2C-C9F743ADE8D1)]
        interface IApplicationData3 : IInspectable
        {
            HRESULT GetPublisherCacheFolder([in] HSTRING folderName, [out] [retval] Windows.Storage.StorageFolder** value);
            HRESULT ClearPublisherCacheFolderAsync([in] HSTRING folderName, [out] [retval] Windows.Foundation.IAsyncAction** clearOperation);
            [propget] HRESULT SharedLocalFolder([out] [retval] Windows.Storage.StorageFolder** value);
        }

        [contract(Windows.Foundation.UniversalApiContract, 1.0)]
        [exclusiveto(Windows.Storage.ApplicationDataContainer)]
        [uuid(C5AEFD1E-F467-40BA-8566-AB640A441E1D)]
        interface IApplicationDataContainer : IInspectable
        {
            [propget] HRESULT Name([out] [retval] HSTRING* value);
            [propget] HRESULT Locality([out] [retval] Windows.Storage.ApplicationDataLocality* value);
            [propget] HRESULT Values([out] [retval] Windows.Foundation.Collections.IPropertySet** value);
            [propget] HRESULT Containers([out] [retval] Windows.Foundation.Collections.IMapView<HSTRING, Windows.Storage.ApplicationDataContainer*>** value);
            HRESULT CreateContainer([in] HSTRING name, [in] Windows.Storage.ApplicationDataCreateDisposition disposition, [out] [retval] Windows.Storage.ApplicationDataContainer** container);
            HRESULT DeleteContainer([in] HSTRING name);
        }

        [contract(Windows.Foundation.UniversalApiContract, 1.0)]
        [exclusiveto(Windows.Storage.ApplicationData)]
        [uuid(5612147B-E843-45E3-94D8-06169E3C8E17)]
        interface IApplicationDataStatics : IInspectable
        {
            [propget] HRESULT Current([out] [retval] Windows.Storage.ApplicationData** value);
        }

        [contract(Windows.Foundation.UniversalApiContract, 1.0)]
        [exclusiveto(Windows.Storage.ApplicationData)]
        [uuid(CD606211-CF49-40A4-A47C-C7F0DBBA8107)]
        interface IApplicationDataStatics2 : IInspectable
        {
            HRESULT GetForUserAsync([in] Windows.System.User* user, [out] [retval] Windows.Foundation.IAsyncOperation<Windows.Storage.ApplicationData*>** getForUserOperation);
        }

        [contract(Windows.Foundation.UniversalApiContract, 1.0)]
        [exclusiveto(Windows.Storage.CachedFileManager)]
        [uuid(8FFC224A-E782-495D-B614-654C4F0B2370)]
        interface ICachedFileManagerStatics : IInspectable
        {
            HRESULT DeferUpdates([in] Windows.Storage.IStorageFile* file);
            HRESULT CompleteUpdatesAsync([in] Windows.Storage.IStorageFile* file, [out] [retval] Windows.Foundation.IAsyncOperation<Windows.Storage.Provider.FileUpdateStatus>** operation);
        }

        [contract(Windows.Foundation.UniversalApiContract, 1.0)]
        [exclusiveto(Windows.Storage.DownloadsFolder)]
        [uuid(27862ED0-404E-47DF-A1E2-E37308BE7B37)]
        interface IDownloadsFolderStatics : IInspectable
        {
            [overload("CreateFileAsync")] HRESULT CreateFileAsync([in] HSTRING desiredName, [out] [retval] Windows.Foundation.IAsyncOperation<Windows.Storage.StorageFile*>** operation);
            [overload("CreateFolderAsync")] HRESULT CreateFolderAsync([in] HSTRING desiredName, [out] [retval] Windows.Foundation.IAsyncOperation<Windows.Storage.StorageFolder*>** operation);
            [overload("CreateFileAsync")] HRESULT CreateFileWithCollisionOptionAsync([in] HSTRING desiredName, [in] Windows.Storage.CreationCollisionOption option, [out] [retval] Windows.Foundation.IAsyncOperation<Windows.Storage.StorageFile*>** operation);
            [overload("CreateFolderAsync")] HRESULT CreateFolderWithCollisionOptionAsync([in] HSTRING desiredName, [in] Windows.Storage.CreationCollisionOption option, [out] [retval] Windows.Foundation.IAsyncOperation<Windows.Storage.StorageFolder*>** operation);
        }

        [contract(Windows.Foundation.UniversalApiContract, 2.0)]
        [exclusiveto(Windows.Storage.DownloadsFolder)]
        [uuid(E93045BD-8EF8-4F8E-8D15-AC0E265F390D)]
        interface IDownloadsFolderStatics2 : IInspectable
        {
            [overload("CreateFileForUserAsync")] HRESULT CreateFileForUserAsync([in] Windows.System.User* user, [in] HSTRING desiredName, [out] [retval] Windows.Foundation.IAsyncOperation<Windows.Storage.StorageFile*>** operation);
            [overload("CreateFolderForUserAsync")] HRESULT CreateFolderForUserAsync([in] Windows.System.User* user, [in] HSTRING desiredName, [out] [retval] Windows.Foundation.IAsyncOperation<Windows.Storage.StorageFolder*>** operation);
            [overload("CreateFileForUserAsync")] HRESULT CreateFileForUserWithCollisionOptionAsync([in] Windows.System.User* user, [in] HSTRING desiredName, [in] Windows.Storage.CreationCollisionOption option, [out] [retval] Windows.Foundation.IAsyncOperation<Windows.Storage.StorageFile*>** operation);
            [overload("CreateFolderForUserAsync")] HRESULT CreateFolderForUserWithCollisionOptionAsync([in] Windows.System.User* user, [in] HSTRING desiredName, [in] Windows.Storage.CreationCollisionOption option, [out] [retval] Windows.Foundation.IAsyncOperation<Windows.Storage.StorageFolder*>** operation);
        }

        [contract(Windows.Foundation.UniversalApiContract, 1.0)]
        [exclusiveto(Windows.Storage.FileIO)]
        [uuid(887411EB-7F54-4732-A5F0-5E43E3B8C2F5)]
        interface IFileIOStatics : IInspectable
        {
            [overload("ReadTextAsync")] HRESULT ReadTextAsync([in] Windows.Storage.IStorageFile* file, [out] [retval] Windows.Foundation.IAsyncOperation<HSTRING>** textOperation);
            [overload("ReadTextAsync")] HRESULT ReadTextWithEncodingAsync([in] Windows.Storage.IStorageFile* file, [in] Windows.Storage.Streams.UnicodeEncoding encoding, [out] [retval] Windows.Foundation.IAsyncOperation<HSTRING>** textOperation);
            [overload("WriteTextAsync")] HRESULT WriteTextAsync([in] Windows.Storage.IStorageFile* file, [in] HSTRING contents, [out] [retval] Windows.Foundation.IAsyncAction** textOperation);
            [overload("WriteTextAsync")] HRESULT WriteTextWithEncodingAsync([in] Windows.Storage.IStorageFile* file, [in] HSTRING contents, [in] Windows.Storage.Streams.UnicodeEncoding encoding, [out] [retval] Windows.Foundation.IAsyncAction** textOperation);
            [overload("AppendTextAsync")] HRESULT AppendTextAsync([in] Windows.Storage.IStorageFile* file, [in] HSTRING contents, [out] [retval] Windows.Foundation.IAsyncAction** textOperation);
            [overload("AppendTextAsync")] HRESULT AppendTextWithEncodingAsync([in] Windows.Storage.IStorageFile* file, [in] HSTRING contents, [in] Windows.Storage.Streams.UnicodeEncoding encoding, [out] [retval] Windows.Foundation.IAsyncAction** textOperation);
            [overload("ReadLinesAsync")] HRESULT ReadLinesAsync([in] Windows.Storage.IStorageFile* file, [out] [retval] Windows.Foundation.IAsyncOperation<Windows.Foundation.Collections.IVector<HSTRING>*>** linesOperation);
            [overload("ReadLinesAsync")] HRESULT ReadLinesWithEncodingAsync([in] Windows.Storage.IStorageFile* file, [in] Windows.Storage.Streams.UnicodeEncoding encoding, [out] [retval] Windows.Foundation.IAsyncOperation<Windows.Foundation.Collections.IVector<HSTRING>*>** linesOperation);
            [overload("WriteLinesAsync")] HRESULT WriteLinesAsync([in] Windows.Storage.IStorageFile* file, [in] Windows.Foundation.Collections.IIterable<HSTRING>* lines, [out] [retval] Windows.Foundation.IAsyncAction** operation);
            [overload("WriteLinesAsync")] HRESULT WriteLinesWithEncodingAsync([in] Windows.Storage.IStorageFile* file, [in] Windows.Foundation.Collections.IIterable<HSTRING>* lines, [in] Windows.Storage.Streams.UnicodeEncoding encoding, [out] [retval] Windows.Foundation.IAsyncAction** operation);
            [overload("AppendLinesAsync")] HRESULT AppendLinesAsync([in] Windows.Storage.IStorageFile* file, [in] Windows.Foundation.Collections.IIterable<HSTRING>* lines, [out] [retval] Windows.Foundation.IAsyncAction** operation);
            [overload("AppendLinesAsync")] HRESULT AppendLinesWithEncodingAsync([in] Windows.Storage.IStorageFile* file, [in] Windows.Foundation.Collections.IIterable<HSTRING>* lines, [in] Windows.Storage.Streams.UnicodeEncoding encoding, [out] [retval] Windows.Foundation.IAsyncAction** operation);
            HRESULT ReadBufferAsync([in] Windows.Storage.IStorageFile* file, [out] [retval] Windows.Foundation.IAsyncOperation<Windows.Storage.Streams.IBuffer*>** operation);
            HRESULT WriteBufferAsync([in] Windows.Storage.IStorageFile* file, [in] Windows.Storage.Streams.IBuffer* buffer, [out] [retval] Windows.Foundation.IAsyncAction** operation);
            HRESULT WriteBytesAsync([in] Windows.Storage.IStorageFile* file, [in] UINT32 __bufferSize, [in] [size_is(__bufferSize)] BYTE* buffer, [out] [retval] Windows.Foundation.IAsyncAction** operation);
        }

        [contract(Windows.Foundation.UniversalApiContract, 1.0)]
        [exclusiveto(Windows.Storage.KnownFolders)]
        [uuid(5D115E66-27E8-492F-B8E5-2F90896CD4CD)]
        interface IKnownFoldersCameraRollStatics : IInspectable
        {
            [propget] HRESULT CameraRoll([out] [retval] Windows.Storage.StorageFolder** value);
        }

        [contract(Windows.Foundation.UniversalApiContract, 1.0)]
        [exclusiveto(Windows.Storage.KnownFolders)]
        [uuid(DAD5ECD6-306F-4D6A-B496-46BA8EB106CE)]
        interface IKnownFoldersPlaylistsStatics : IInspectable
        {
            [propget] HRESULT Playlists([out] [retval] Windows.Storage.StorageFolder** value);
        }

        [contract(Windows.Foundation.UniversalApiContract, 1.0)]
        [exclusiveto(Windows.Storage.KnownFolders)]
        [uuid(055C93EA-253D-467C-B6CA-A97DA1E9A18D)]
        interface IKnownFoldersSavedPicturesStatics : IInspectable
        {
            [propget] HRESULT SavedPictures([out] [retval] Windows.Storage.StorageFolder** value);
        }

        [contract(Windows.Foundation.UniversalApiContract, 1.0)]
        [exclusiveto(Windows.Storage.KnownFolders)]
        [uuid(5A2A7520-4802-452D-9AD9-4351ADA7EC35)]
        interface IKnownFoldersStatics : IInspectable
        {
            [propget] HRESULT MusicLibrary([out] [retval] Windows.Storage.StorageFolder** value);
            [propget] HRESULT PicturesLibrary([out] [retval] Windows.Storage.StorageFolder** value);
            [propget] HRESULT VideosLibrary([out] [retval] Windows.Storage.StorageFolder** value);
            [propget] HRESULT DocumentsLibrary([out] [retval] Windows.Storage.StorageFolder** value);
            [propget] HRESULT HomeGroup([out] [retval] Windows.Storage.StorageFolder** value);
            [propget] HRESULT RemovableDevices([out] [retval] Windows.Storage.StorageFolder** value);
            [propget] HRESULT MediaServerDevices([out] [retval] Windows.Storage.StorageFolder** value);
        }

        [contract(Windows.Foundation.UniversalApiContract, 1.0)]
        [exclusiveto(Windows.Storage.KnownFolders)]
        [uuid(194BD0CD-CF6E-4D07-9D53-E9163A2536E9)]
        interface IKnownFoldersStatics2 : IInspectable
        {
            [propget] HRESULT Objects3D([out] [retval] Windows.Storage.StorageFolder** value);
            [propget] HRESULT AppCaptures([out] [retval] Windows.Storage.StorageFolder** value);
            [propget] HRESULT RecordedCalls([out] [retval] Windows.Storage.StorageFolder** value);
        }

        [contract(Windows.Foundation.UniversalApiContract, 2.0)]
        [exclusiveto(Windows.Storage.KnownFolders)]
        [uuid(C5194341-9742-4ED5-823D-FC1401148764)]
        interface IKnownFoldersStatics3 : IInspectable
        {
            HRESULT GetFolderForUserAsync([in] Windows.System.User* user, [in] Windows.Storage.KnownFolderId folderId, [out] [retval] Windows.Foundation.IAsyncOperation<Windows.Storage.StorageFolder*>** operation);
        }

        [contract(Windows.Foundation.UniversalApiContract, 10.0)]
        [exclusiveto(Windows.Storage.KnownFolders)]
        [uuid(1722E6BF-9FF9-4B21-BED5-90ECB13A192E)]
        interface IKnownFoldersStatics4 : IInspectable
        {
            HRESULT RequestAccessAsync([in] Windows.Storage.KnownFolderId folderId, [out] [retval] Windows.Foundation.IAsyncOperation<Windows.Storage.KnownFoldersAccessStatus>** operation);
            HRESULT RequestAccessForUserAsync([in] Windows.System.User* user, [in] Windows.Storage.KnownFolderId folderId, [out] [retval] Windows.Foundation.IAsyncOperation<Windows.Storage.KnownFoldersAccessStatus>** operation);
            HRESULT GetFolderAsync([in] Windows.Storage.KnownFolderId folderId, [out] [retval] Windows.Foundation.IAsyncOperation<Windows.Storage.StorageFolder*>** operation);
        }

        [contract(Windows.Foundation.UniversalApiContract, 1.0)]
        [exclusiveto(Windows.Storage.PathIO)]
        [uuid(0F2F3758-8EC7-4381-922B-8F6C07D288F3)]
        interface IPathIOStatics : IInspectable
        {
            [overload("ReadTextAsync")] HRESULT ReadTextAsync([in] HSTRING absolutePath, [out] [retval] Windows.Foundation.IAsyncOperation<HSTRING>** textOperation);
            [overload("ReadTextAsync")] HRESULT ReadTextWithEncodingAsync([in] HSTRING absolutePath, [in] Windows.Storage.Streams.UnicodeEncoding encoding, [out] [retval] Windows.Foundation.IAsyncOperation<HSTRING>** textOperation);
            [overload("WriteTextAsync")] HRESULT WriteTextAsync([in] HSTRING absolutePath, [in] HSTRING contents, [out] [retval] Windows.Foundation.IAsyncAction** textOperation);
            [overload("WriteTextAsync")] HRESULT WriteTextWithEncodingAsync([in] HSTRING absolutePath, [in] HSTRING contents, [in] Windows.Storage.Streams.UnicodeEncoding encoding, [out] [retval] Windows.Foundation.IAsyncAction** textOperation);
            [overload("AppendTextAsync")] HRESULT AppendTextAsync([in] HSTRING absolutePath, [in] HSTRING contents, [out] [retval] Windows.Foundation.IAsyncAction** textOperation);
            [overload("AppendTextAsync")] HRESULT AppendTextWithEncodingAsync([in] HSTRING absolutePath, [in] HSTRING contents, [in] Windows.Storage.Streams.UnicodeEncoding encoding, [out] [retval] Windows.Foundation.IAsyncAction** textOperation);
            [overload("ReadLinesAsync")] HRESULT ReadLinesAsync([in] HSTRING absolutePath, [out] [retval] Windows.Foundation.IAsyncOperation<Windows.Foundation.Collections.IVector<HSTRING>*>** linesOperation);
            [overload("ReadLinesAsync")] HRESULT ReadLinesWithEncodingAsync([in] HSTRING absolutePath, [in] Windows.Storage.Streams.UnicodeEncoding encoding, [out] [retval] Windows.Foundation.IAsyncOperation<Windows.Foundation.Collections.IVector<HSTRING>*>** linesOperation);
            [overload("WriteLinesAsync")] HRESULT WriteLinesAsync([in] HSTRING absolutePath, [in] Windows.Foundation.Collections.IIterable<HSTRING>* lines, [out] [retval] Windows.Foundation.IAsyncAction** operation);
            [overload("WriteLinesAsync")] HRESULT WriteLinesWithEncodingAsync([in] HSTRING absolutePath, [in] Windows.Foundation.Collections.IIterable<HSTRING>* lines, [in] Windows.Storage.Streams.UnicodeEncoding encoding, [out] [retval] Windows.Foundation.IAsyncAction** operation);
            [overload("AppendLinesAsync")] HRESULT AppendLinesAsync([in] HSTRING absolutePath, [in] Windows.Foundation.Collections.IIterable<HSTRING>* lines, [out] [retval] Windows.Foundation.IAsyncAction** operation);
            [overload("AppendLinesAsync")] HRESULT AppendLinesWithEncodingAsync([in] HSTRING absolutePath, [in] Windows.Foundation.Collections.IIterable<HSTRING>* lines, [in] Windows.Storage.Streams.UnicodeEncoding encoding, [out] [retval] Windows.Foundation.IAsyncAction** operation);
            HRESULT ReadBufferAsync([in] HSTRING absolutePath, [out] [retval] Windows.Foundation.IAsyncOperation<Windows.Storage.Streams.IBuffer*>** operation);
            HRESULT WriteBufferAsync([in] HSTRING absolutePath, [in] Windows.Storage.Streams.IBuffer* buffer, [out] [retval] Windows.Foundation.IAsyncAction** operation);
            HRESULT WriteBytesAsync([in] HSTRING absolutePath, [in] UINT32 __bufferSize, [in] [size_is(__bufferSize)] BYTE* buffer, [out] [retval] Windows.Foundation.IAsyncAction** operation);
        }

        [contract(Windows.Foundation.UniversalApiContract, 1.0)]
        [exclusiveto(Windows.Storage.SetVersionDeferral)]
        [uuid(033508A2-781A-437A-B078-3F32BADCFE47)]
        interface ISetVersionDeferral : IInspectable
        {
            HRESULT Complete();
        }

        [contract(Windows.Foundation.UniversalApiContract, 1.0)]
        [exclusiveto(Windows.Storage.SetVersionRequest)]
        [uuid(B9C76B9B-1056-4E69-8330-162619956F9B)]
        interface ISetVersionRequest : IInspectable
        {
            [propget] HRESULT CurrentVersion([out] [retval] UINT32* currentVersion);
            [propget] HRESULT DesiredVersion([out] [retval] UINT32* desiredVersion);
            HRESULT GetDeferral([out] [retval] Windows.Storage.SetVersionDeferral** deferral);
        }

        [contract(Windows.Foundation.UniversalApiContract, 1.0)]
        [uuid(FA3F6186-4214-428C-A64C-14C9AC7315EA)]
        interface IStorageFile : IInspectable
            requires
                Windows.Storage.IStorageItem,
                Windows.Storage.Streams.IRandomAccessStreamReference,
                Windows.Storage.Streams.IInputStreamReference
        {
            [propget] HRESULT FileType([out] [retval] HSTRING* value);
            [propget] HRESULT ContentType([out] [retval] HSTRING* value);
            HRESULT OpenAsync([in] Windows.Storage.FileAccessMode accessMode, [out] [retval] Windows.Foundation.IAsyncOperation<Windows.Storage.Streams.IRandomAccessStream*>** operation);
            HRESULT OpenTransactedWriteAsync([out] [retval] Windows.Foundation.IAsyncOperation<Windows.Storage.StorageStreamTransaction*>** operation);
            [overload("CopyAsync")] HRESULT CopyOverloadDefaultNameAndOptions([in] Windows.Storage.IStorageFolder* destinationFolder, [out] [retval] Windows.Foundation.IAsyncOperation<Windows.Storage.StorageFile*>** operation);
            [overload("CopyAsync")] HRESULT CopyOverloadDefaultOptions([in] Windows.Storage.IStorageFolder* destinationFolder, [in] HSTRING desiredNewName, [out] [retval] Windows.Foundation.IAsyncOperation<Windows.Storage.StorageFile*>** operation);
            [overload("CopyAsync")] HRESULT CopyOverload([in] Windows.Storage.IStorageFolder* destinationFolder, [in] HSTRING desiredNewName, [in] Windows.Storage.NameCollisionOption option, [out] [retval] Windows.Foundation.IAsyncOperation<Windows.Storage.StorageFile*>** operation);
            HRESULT CopyAndReplaceAsync([in] Windows.Storage.IStorageFile* fileToReplace, [out] [retval] Windows.Foundation.IAsyncAction** operation);
            [overload("MoveAsync")] HRESULT MoveOverloadDefaultNameAndOptions([in] Windows.Storage.IStorageFolder* destinationFolder, [out] [retval] Windows.Foundation.IAsyncAction** operation);
            [overload("MoveAsync")] HRESULT MoveOverloadDefaultOptions([in] Windows.Storage.IStorageFolder* destinationFolder, [in] HSTRING desiredNewName, [out] [retval] Windows.Foundation.IAsyncAction** operation);
            [overload("MoveAsync")] HRESULT MoveOverload([in] Windows.Storage.IStorageFolder* destinationFolder, [in] HSTRING desiredNewName, [in] Windows.Storage.NameCollisionOption option, [out] [retval] Windows.Foundation.IAsyncAction** operation);
            HRESULT MoveAndReplaceAsync([in] Windows.Storage.IStorageFile* fileToReplace, [out] [retval] Windows.Foundation.IAsyncAction** operation);
        }

        [contract(Windows.Foundation.UniversalApiContract, 1.0)]
        [uuid(954E4BCF-0A77-42FB-B777-C2ED58A52E44)]
        interface IStorageFile2 : IInspectable
        {
            [overload("OpenAsync")] HRESULT OpenWithOptionsAsync([in] Windows.Storage.FileAccessMode accessMode, [in] Windows.Storage.StorageOpenOptions options, [out] [retval] Windows.Foundation.IAsyncOperation<Windows.Storage.Streams.IRandomAccessStream*>** operation);
            [overload("OpenTransactedWriteAsync")] HRESULT OpenTransactedWriteWithOptionsAsync([in] Windows.Storage.StorageOpenOptions options, [out] [retval] Windows.Foundation.IAsyncOperation<Windows.Storage.StorageStreamTransaction*>** operation);
        }

        [contract(Windows.Foundation.UniversalApiContract, 1.0)]
        [uuid(AFCBBE9B-582B-4133-9648-E44CA46EE491)]
        interface IStorageFilePropertiesWithAvailability : IInspectable
        {
            [propget] HRESULT IsAvailable([out] [retval] boolean* value);
        }

        [contract(Windows.Foundation.UniversalApiContract, 1.0)]
        [exclusiveto(Windows.Storage.StorageFile)]
        [uuid(5984C710-DAF2-43C8-8BB4-A4D3EACFD03F)]
        interface IStorageFileStatics : IInspectable
        {
            HRESULT GetFileFromPathAsync([in] HSTRING path, [out] [retval] Windows.Foundation.IAsyncOperation<Windows.Storage.StorageFile*>** operation);
            HRESULT GetFileFromApplicationUriAsync([in] Windows.Foundation.Uri* uri, [out] [retval] Windows.Foundation.IAsyncOperation<Windows.Storage.StorageFile*>** operation);
            HRESULT CreateStreamedFileAsync([in] HSTRING displayNameWithExtension, [in] Windows.Storage.StreamedFileDataRequestedHandler* dataRequested, [in] Windows.Storage.Streams.IRandomAccessStreamReference* thumbnail, [out] [retval] Windows.Foundation.IAsyncOperation<Windows.Storage.StorageFile*>** operation);
            HRESULT ReplaceWithStreamedFileAsync([in] Windows.Storage.IStorageFile* fileToReplace, [in] Windows.Storage.StreamedFileDataRequestedHandler* dataRequested, [in] Windows.Storage.Streams.IRandomAccessStreamReference* thumbnail, [out] [retval] Windows.Foundation.IAsyncOperation<Windows.Storage.StorageFile*>** operation);
            HRESULT CreateStreamedFileFromUriAsync([in] HSTRING displayNameWithExtension, [in] Windows.Foundation.Uri* uri, [in] Windows.Storage.Streams.IRandomAccessStreamReference* thumbnail, [out] [retval] Windows.Foundation.IAsyncOperation<Windows.Storage.StorageFile*>** operation);
            HRESULT ReplaceWithStreamedFileFromUriAsync([in] Windows.Storage.IStorageFile* fileToReplace, [in] Windows.Foundation.Uri* uri, [in] Windows.Storage.Streams.IRandomAccessStreamReference* thumbnail, [out] [retval] Windows.Foundation.IAsyncOperation<Windows.Storage.StorageFile*>** operation);
        }

        [contract(Windows.Foundation.UniversalApiContract, 10.0)]
        [exclusiveto(Windows.Storage.StorageFile)]
        [uuid(5C76A781-212E-4AF9-8F04-740CAE108974)]
        interface IStorageFileStatics2 : IInspectable
        {
            HRESULT GetFileFromPathForUserAsync([in] Windows.System.User* user, [in] HSTRING path, [out] [retval] Windows.Foundation.IAsyncOperation<Windows.Storage.StorageFile*>** operation);
        }

        [contract(Windows.Foundation.UniversalApiContract, 1.0)]
        [uuid(72D1CB78-B3EF-4F75-A80B-6FD9DAE2944B)]
        interface IStorageFolder : IInspectable
            requires
                Windows.Storage.IStorageItem
        {
            [overload("CreateFileAsync")] HRESULT CreateFileAsyncOverloadDefaultOptions([in] HSTRING desiredName, [out] [retval] Windows.Foundation.IAsyncOperation<Windows.Storage.StorageFile*>** operation);
            [overload("CreateFileAsync")] HRESULT CreateFileAsync([in] HSTRING desiredName, [in] Windows.Storage.CreationCollisionOption options, [out] [retval] Windows.Foundation.IAsyncOperation<Windows.Storage.StorageFile*>** operation);
            [overload("CreateFolderAsync")] HRESULT CreateFolderAsyncOverloadDefaultOptions([in] HSTRING desiredName, [out] [retval] Windows.Foundation.IAsyncOperation<Windows.Storage.StorageFolder*>** operation);
            [overload("CreateFolderAsync")] HRESULT CreateFolderAsync([in] HSTRING desiredName, [in] Windows.Storage.CreationCollisionOption options, [out] [retval] Windows.Foundation.IAsyncOperation<Windows.Storage.StorageFolder*>** operation);
            HRESULT GetFileAsync([in] HSTRING name, [out] [retval] Windows.Foundation.IAsyncOperation<Windows.Storage.StorageFile*>** operation);
            HRESULT GetFolderAsync([in] HSTRING name, [out] [retval] Windows.Foundation.IAsyncOperation<Windows.Storage.StorageFolder*>** operation);
            HRESULT GetItemAsync([in] HSTRING name, [out] [retval] Windows.Foundation.IAsyncOperation<Windows.Storage.IStorageItem*>** operation);
            [overload("GetFilesAsync")] HRESULT GetFilesAsyncOverloadDefaultOptionsStartAndCount([out] [retval] Windows.Foundation.IAsyncOperation<Windows.Foundation.Collections.IVectorView<Windows.Storage.StorageFile*>*>** operation);
            [overload("GetFoldersAsync")] HRESULT GetFoldersAsyncOverloadDefaultOptionsStartAndCount([out] [retval] Windows.Foundation.IAsyncOperation<Windows.Foundation.Collections.IVectorView<Windows.Storage.StorageFolder*>*>** operation);
            [overload("GetItemsAsync")] HRESULT GetItemsAsyncOverloadDefaultStartAndCount([out] [retval] Windows.Foundation.IAsyncOperation<Windows.Foundation.Collections.IVectorView<Windows.Storage.IStorageItem*>*>** operation);
        }

        [contract(Windows.Foundation.UniversalApiContract, 1.0)]
        [uuid(E827E8B9-08D9-4A8E-A0AC-FE5ED3CBBBD3)]
        interface IStorageFolder2 : IInspectable
        {
            HRESULT TryGetItemAsync([in] HSTRING name, [out] [retval] Windows.Foundation.IAsyncOperation<Windows.Storage.IStorageItem*>** operation);
        }

        [contract(Windows.Foundation.UniversalApiContract, 6.0)]
        [exclusiveto(Windows.Storage.StorageFolder)]
        [uuid(9F617899-BDE1-4124-AEB3-B06AD96F98D4)]
        interface IStorageFolder3 : IInspectable
        {
            HRESULT TryGetChangeTracker([out] [retval] Windows.Storage.StorageLibraryChangeTracker** result);
        }

        [contract(Windows.Foundation.UniversalApiContract, 1.0)]
        [exclusiveto(Windows.Storage.StorageFolder)]
        [uuid(08F327FF-85D5-48B9-AEE9-28511E339F9F)]
        interface IStorageFolderStatics : IInspectable
        {
            HRESULT GetFolderFromPathAsync([in] HSTRING path, [out] [retval] Windows.Foundation.IAsyncOperation<Windows.Storage.StorageFolder*>** operation);
        }

        [contract(Windows.Foundation.UniversalApiContract, 10.0)]
        [exclusiveto(Windows.Storage.StorageFolder)]
        [uuid(B4656DC3-71D2-467D-8B29-371F0F62BF6F)]
        interface IStorageFolderStatics2 : IInspectable
        {
            HRESULT GetFolderFromPathForUserAsync([in] Windows.System.User* user, [in] HSTRING path, [out] [retval] Windows.Foundation.IAsyncOperation<Windows.Storage.StorageFolder*>** operation);
        }

        [contract(Windows.Foundation.UniversalApiContract, 1.0)]
        [uuid(4207A996-CA2F-42F7-BDE8-8B10457A7F30)]
        interface IStorageItem : IInspectable
        {
            [overload("RenameAsync")] HRESULT RenameAsyncOverloadDefaultOptions([in] HSTRING desiredName, [out] [retval] Windows.Foundation.IAsyncAction** operation);
            [overload("RenameAsync")] HRESULT RenameAsync([in] HSTRING desiredName, [in] Windows.Storage.NameCollisionOption option, [out] [retval] Windows.Foundation.IAsyncAction** operation);
            [overload("DeleteAsync")] HRESULT DeleteAsyncOverloadDefaultOptions([out] [retval] Windows.Foundation.IAsyncAction** operation);
            [overload("DeleteAsync")] HRESULT DeleteAsync([in] Windows.Storage.StorageDeleteOption option, [out] [retval] Windows.Foundation.IAsyncAction** operation);
            HRESULT GetBasicPropertiesAsync([out] [retval] Windows.Foundation.IAsyncOperation<Windows.Storage.FileProperties.BasicProperties*>** operation);
            [propget] HRESULT Name([out] [retval] HSTRING* value);
            [propget] HRESULT Path([out] [retval] HSTRING* value);
            [propget] HRESULT Attributes([out] [retval] Windows.Storage.FileAttributes* value);
            [propget] HRESULT DateCreated([out] [retval] Windows.Foundation.DateTime* value);
            HRESULT IsOfType([in] Windows.Storage.StorageItemTypes type, [out] [retval] boolean* value);
        }

        [contract(Windows.Foundation.UniversalApiContract, 1.0)]
        [uuid(53F926D2-083C-4283-B45B-81C007237E44)]
        interface IStorageItem2 : IInspectable
            requires
                Windows.Storage.IStorageItem
        {
            HRESULT GetParentAsync([out] [retval] Windows.Foundation.IAsyncOperation<Windows.Storage.StorageFolder*>** operation);
            HRESULT IsEqual([in] Windows.Storage.IStorageItem* item, [out] [retval] boolean* value);
        }

        [contract(Windows.Foundation.UniversalApiContract, 1.0)]
        [uuid(86664478-8029-46FE-A789-1C2F3E2FFB5C)]
        interface IStorageItemProperties : IInspectable
        {
            [overload("GetThumbnailAsync")] HRESULT GetThumbnailAsyncOverloadDefaultSizeDefaultOptions([in] Windows.Storage.FileProperties.ThumbnailMode mode, [out] [retval] Windows.Foundation.IAsyncOperation<Windows.Storage.FileProperties.StorageItemThumbnail*>** operation);
            [overload("GetThumbnailAsync")] HRESULT GetThumbnailAsyncOverloadDefaultOptions([in] Windows.Storage.FileProperties.ThumbnailMode mode, [in] UINT32 requestedSize, [out] [retval] Windows.Foundation.IAsyncOperation<Windows.Storage.FileProperties.StorageItemThumbnail*>** operation);
            [overload("GetThumbnailAsync")] HRESULT GetThumbnailAsync([in] Windows.Storage.FileProperties.ThumbnailMode mode, [in] UINT32 requestedSize, [in] Windows.Storage.FileProperties.ThumbnailOptions options, [out] [retval] Windows.Foundation.IAsyncOperation<Windows.Storage.FileProperties.StorageItemThumbnail*>** operation);
            [propget] HRESULT DisplayName([out] [retval] HSTRING* value);
            [propget] HRESULT DisplayType([out] [retval] HSTRING* value);
            [propget] HRESULT FolderRelativeId([out] [retval] HSTRING* value);
            [propget] HRESULT Properties([out] [retval] Windows.Storage.FileProperties.StorageItemContentProperties** value);
        }

        [contract(Windows.Foundation.UniversalApiContract, 1.0)]
        [uuid(8E86A951-04B9-4BD2-929D-FEF3F71621D0)]
        interface IStorageItemProperties2 : IInspectable
            requires
                Windows.Storage.IStorageItemProperties
        {
            [overload("GetScaledImageAsThumbnailAsync")] HRESULT GetScaledImageAsThumbnailAsyncOverloadDefaultSizeDefaultOptions([in] Windows.Storage.FileProperties.ThumbnailMode mode, [out] [retval] Windows.Foundation.IAsyncOperation<Windows.Storage.FileProperties.StorageItemThumbnail*>** operation);
            [overload("GetScaledImageAsThumbnailAsync")] HRESULT GetScaledImageAsThumbnailAsyncOverloadDefaultOptions([in] Windows.Storage.FileProperties.ThumbnailMode mode, [in] UINT32 requestedSize, [out] [retval] Windows.Foundation.IAsyncOperation<Windows.Storage.FileProperties.StorageItemThumbnail*>** operation);
            [overload("GetScaledImageAsThumbnailAsync")] HRESULT GetScaledImageAsThumbnailAsync([in] Windows.Storage.FileProperties.ThumbnailMode mode, [in] UINT32 requestedSize, [in] Windows.Storage.FileProperties.ThumbnailOptions options, [out] [retval] Windows.Foundation.IAsyncOperation<Windows.Storage.FileProperties.StorageItemThumbnail*>** operation);
        }

        [contract(Windows.Foundation.UniversalApiContract, 1.0)]
        [uuid(861BF39B-6368-4DEE-B40E-74684A5CE714)]
        interface IStorageItemPropertiesWithProvider : IInspectable
            requires
                Windows.Storage.IStorageItemProperties
        {
            [propget] HRESULT Provider([out] [retval] Windows.Storage.StorageProvider** value);
        }

        [contract(Windows.Foundation.UniversalApiContract, 1.0)]
        [exclusiveto(Windows.Storage.StorageLibrary)]
        [uuid(1EDD7103-0E5E-4D6C-B5E8-9318983D6A03)]
        interface IStorageLibrary : IInspectable
        {
            HRESULT RequestAddFolderAsync([out] [retval] Windows.Foundation.IAsyncOperation<Windows.Storage.StorageFolder*>** operation);
            HRESULT RequestRemoveFolderAsync([in] Windows.Storage.StorageFolder* folder, [out] [retval] Windows.Foundation.IAsyncOperation<boolean>** operation);
            [propget] HRESULT Folders([out] [retval] Windows.Foundation.Collections.IObservableVector<Windows.Storage.StorageFolder*>** value);
            [propget] HRESULT SaveFolder([out] [retval] Windows.Storage.StorageFolder** value);
            [eventadd] HRESULT DefinitionChanged([in] Windows.Foundation.TypedEventHandler<Windows.Storage.StorageLibrary*, IInspectable*>* handler, [out] [retval] EventRegistrationToken* eventCookie);
            [eventremove] HRESULT DefinitionChanged([in] EventRegistrationToken eventCookie);
        }

        [contract(Windows.Foundation.UniversalApiContract, 3.0)]
        [exclusiveto(Windows.Storage.StorageLibrary)]
        [uuid(5B0CE348-FCB3-4031-AFB0-A68D7BD44534)]
        interface IStorageLibrary2 : IInspectable
        {
            [propget] HRESULT ChangeTracker([out] [retval] Windows.Storage.StorageLibraryChangeTracker** value);
        }

        [contract(Windows.Foundation.UniversalApiContract, 5.0)]
        [exclusiveto(Windows.Storage.StorageLibrary)]
        [uuid(8A281291-2154-4201-8113-D2C05CE1AD23)]
        interface IStorageLibrary3 : IInspectable
        {
            HRESULT AreFolderSuggestionsAvailableAsync([out] [retval] Windows.Foundation.IAsyncOperation<boolean>** operation);
        }

        [contract(Windows.Foundation.UniversalApiContract, 3.0)]
        [exclusiveto(Windows.Storage.StorageLibraryChange)]
        [uuid(00980B23-2BE2-4909-AA48-159F5203A51E)]
        interface IStorageLibraryChange : IInspectable
        {
            [propget] HRESULT ChangeType([out] [retval] Windows.Storage.StorageLibraryChangeType* value);
            [propget] HRESULT Path([out] [retval] HSTRING* value);
            [propget] HRESULT PreviousPath([out] [retval] HSTRING* value);
            HRESULT IsOfType([in] Windows.Storage.StorageItemTypes type, [out] [retval] boolean* value);
            HRESULT GetStorageItemAsync([out] [retval] Windows.Foundation.IAsyncOperation<Windows.Storage.IStorageItem*>** operation);
        }

        [contract(Windows.Foundation.UniversalApiContract, 3.0)]
        [exclusiveto(Windows.Storage.StorageLibraryChangeReader)]
        [uuid(F205BC83-FCA2-41F9-8954-EE2E991EB96F)]
        interface IStorageLibraryChangeReader : IInspectable
        {
            HRESULT ReadBatchAsync([out] [retval] Windows.Foundation.IAsyncOperation<Windows.Foundation.Collections.IVectorView<Windows.Storage.StorageLibraryChange*>*>** operation);
            HRESULT AcceptChangesAsync([out] [retval] Windows.Foundation.IAsyncAction** operation);
        }

        [contract(Windows.Foundation.UniversalApiContract, 3.0)]
        [exclusiveto(Windows.Storage.StorageLibraryChangeTracker)]
        [uuid(9E157316-6073-44F6-9681-7492D1286C90)]
        interface IStorageLibraryChangeTracker : IInspectable
        {
            HRESULT GetChangeReader([out] [retval] Windows.Storage.StorageLibraryChangeReader** value);
            HRESULT Enable();
            HRESULT Reset();
        }

        [contract(Windows.Foundation.UniversalApiContract, 1.0)]
        [exclusiveto(Windows.Storage.StorageLibrary)]
        [uuid(4208A6DB-684A-49C6-9E59-90121EE050D6)]
        interface IStorageLibraryStatics : IInspectable
        {
            HRESULT GetLibraryAsync([in] Windows.Storage.KnownLibraryId libraryId, [out] [retval] Windows.Foundation.IAsyncOperation<Windows.Storage.StorageLibrary*>** operation);
        }

        [contract(Windows.Foundation.UniversalApiContract, 2.0)]
        [exclusiveto(Windows.Storage.StorageLibrary)]
        [uuid(FFB08DDC-FA75-4695-B9D1-7F81F97832E3)]
        interface IStorageLibraryStatics2 : IInspectable
        {
            HRESULT GetLibraryForUserAsync([in] Windows.System.User* user, [in] Windows.Storage.KnownLibraryId libraryId, [out] [retval] Windows.Foundation.IAsyncOperation<Windows.Storage.StorageLibrary*>** operation);
        }

        [contract(Windows.Foundation.UniversalApiContract, 1.0)]
        [exclusiveto(Windows.Storage.StorageProvider)]
        [uuid(E705EED4-D478-47D6-BA46-1A8EBE114A20)]
        interface IStorageProvider : IInspectable
        {
            [propget] HRESULT Id([out] [retval] HSTRING* value);
            [propget] HRESULT DisplayName([out] [retval] HSTRING* value);
        }

        [contract(Windows.Foundation.UniversalApiContract, 5.0)]
        [exclusiveto(Windows.Storage.StorageProvider)]
        [uuid(010D1917-3404-414B-9FD7-CD44472EAA39)]
        interface IStorageProvider2 : IInspectable
            requires
                Windows.Storage.IStorageProvider
        {
            HRESULT IsPropertySupportedForPartialFileAsync([in] HSTRING propertyCanonicalName, [out] [retval] Windows.Foundation.IAsyncOperation<boolean>** operation);
        }

        [contract(Windows.Foundation.UniversalApiContract, 1.0)]
        [exclusiveto(Windows.Storage.StorageStreamTransaction)]
        [uuid(F67CF363-A53D-4D94-AE2C-67232D93ACDD)]
        interface IStorageStreamTransaction : IInspectable
            requires
                Windows.Foundation.IClosable
        {
            [propget] HRESULT Stream([out] [retval] Windows.Storage.Streams.IRandomAccessStream** value);
            HRESULT CommitAsync([out] [retval] Windows.Foundation.IAsyncAction** operation);
        }

        [contract(Windows.Foundation.UniversalApiContract, 1.0)]
        [uuid(1673FCCE-DABD-4D50-BEEE-180B8A8191B6)]
        interface IStreamedFileDataRequest : IInspectable
        {
            HRESULT FailAndClose([in] Windows.Storage.StreamedFileFailureMode failureMode);
        }

        [contract(Windows.Foundation.UniversalApiContract, 1.0)]
        [exclusiveto(Windows.Storage.SystemAudioProperties)]
        [uuid(3F8F38B7-308C-47E1-924D-8645348E5DB7)]
        interface ISystemAudioProperties : IInspectable
        {
            [propget] HRESULT EncodingBitrate([out] [retval] HSTRING* value);
        }

        [contract(Windows.Foundation.UniversalApiContract, 5.0)]
        [exclusiveto(Windows.Storage.SystemDataPaths)]
        [uuid(E32ABF70-D8FA-45EC-A942-D2E26FB60BA5)]
        interface ISystemDataPaths : IInspectable
        {
            [propget] HRESULT Fonts([out] [retval] HSTRING* value);
            [propget] HRESULT ProgramData([out] [retval] HSTRING* value);
            [propget] HRESULT Public([out] [retval] HSTRING* value);
            [propget] HRESULT PublicDesktop([out] [retval] HSTRING* value);
            [propget] HRESULT PublicDocuments([out] [retval] HSTRING* value);
            [propget] HRESULT PublicDownloads([out] [retval] HSTRING* value);
            [propget] HRESULT PublicMusic([out] [retval] HSTRING* value);
            [propget] HRESULT PublicPictures([out] [retval] HSTRING* value);
            [propget] HRESULT PublicVideos([out] [retval] HSTRING* value);
            [propget] HRESULT System([out] [retval] HSTRING* value);
            [propget] HRESULT SystemHost([out] [retval] HSTRING* value);
            [propget] HRESULT SystemX86([out] [retval] HSTRING* value);
            [propget] HRESULT SystemX64([out] [retval] HSTRING* value);
            [propget] HRESULT SystemArm([out] [retval] HSTRING* value);
            [propget] HRESULT UserProfiles([out] [retval] HSTRING* value);
            [propget] HRESULT Windows([out] [retval] HSTRING* value);
        }

        [contract(Windows.Foundation.UniversalApiContract, 5.0)]
        [exclusiveto(Windows.Storage.SystemDataPaths)]
        [uuid(E0F96FD0-9920-4BCA-B379-F96FDF7CAAD8)]
        interface ISystemDataPathsStatics : IInspectable
        {
            HRESULT GetDefault([out] [retval] Windows.Storage.SystemDataPaths** result);
        }

        [contract(Windows.Foundation.UniversalApiContract, 1.0)]
        [exclusiveto(Windows.Storage.SystemGPSProperties)]
        [uuid(C0F46EB4-C174-481A-BC25-921986F6A6F3)]
        interface ISystemGPSProperties : IInspectable
        {
            [propget] HRESULT LatitudeDecimal([out] [retval] HSTRING* value);
            [propget] HRESULT LongitudeDecimal([out] [retval] HSTRING* value);
        }

        [contract(Windows.Foundation.UniversalApiContract, 1.0)]
        [exclusiveto(Windows.Storage.SystemImageProperties)]
        [uuid(011B2E30-8B39-4308-BEA1-E8AA61E47826)]
        interface ISystemImageProperties : IInspectable
        {
            [propget] HRESULT HorizontalSize([out] [retval] HSTRING* value);
            [propget] HRESULT VerticalSize([out] [retval] HSTRING* value);
        }

        [contract(Windows.Foundation.UniversalApiContract, 1.0)]
        [exclusiveto(Windows.Storage.SystemMediaProperties)]
        [uuid(A42B3316-8415-40DC-8C44-98361D235430)]
        interface ISystemMediaProperties : IInspectable
        {
            [propget] HRESULT Duration([out] [retval] HSTRING* value);
            [propget] HRESULT Producer([out] [retval] HSTRING* value);
            [propget] HRESULT Publisher([out] [retval] HSTRING* value);
            [propget] HRESULT SubTitle([out] [retval] HSTRING* value);
            [propget] HRESULT Writer([out] [retval] HSTRING* value);
            [propget] HRESULT Year([out] [retval] HSTRING* value);
        }

        [contract(Windows.Foundation.UniversalApiContract, 1.0)]
        [exclusiveto(Windows.Storage.SystemMusicProperties)]
        [uuid(B47988D5-67AF-4BC3-8D39-5B89022026A1)]
        interface ISystemMusicProperties : IInspectable
        {
            [propget] HRESULT AlbumArtist([out] [retval] HSTRING* value);
            [propget] HRESULT AlbumTitle([out] [retval] HSTRING* value);
            [propget] HRESULT Artist([out] [retval] HSTRING* value);
            [propget] HRESULT Composer([out] [retval] HSTRING* value);
            [propget] HRESULT Conductor([out] [retval] HSTRING* value);
            [propget] HRESULT DisplayArtist([out] [retval] HSTRING* value);
            [propget] HRESULT Genre([out] [retval] HSTRING* value);
            [propget] HRESULT TrackNumber([out] [retval] HSTRING* value);
        }

        [contract(Windows.Foundation.UniversalApiContract, 1.0)]
        [exclusiveto(Windows.Storage.SystemPhotoProperties)]
        [uuid(4734FC3D-AB21-4424-B735-F4353A56C8FC)]
        interface ISystemPhotoProperties : IInspectable
        {
            [propget] HRESULT CameraManufacturer([out] [retval] HSTRING* value);
            [propget] HRESULT CameraModel([out] [retval] HSTRING* value);
            [propget] HRESULT DateTaken([out] [retval] HSTRING* value);
            [propget] HRESULT Orientation([out] [retval] HSTRING* value);
            [propget] HRESULT PeopleNames([out] [retval] HSTRING* value);
        }

        [contract(Windows.Foundation.UniversalApiContract, 1.0)]
        [exclusiveto(Windows.Storage.SystemProperties)]
        [uuid(917A71C1-85F3-4DD1-B001-A50BFD21C8D2)]
        interface ISystemProperties : IInspectable
        {
            [propget] HRESULT Author([out] [retval] HSTRING* value);
            [propget] HRESULT Comment([out] [retval] HSTRING* value);
            [propget] HRESULT ItemNameDisplay([out] [retval] HSTRING* value);
            [propget] HRESULT Keywords([out] [retval] HSTRING* value);
            [propget] HRESULT Rating([out] [retval] HSTRING* value);
            [propget] HRESULT Title([out] [retval] HSTRING* value);
            [propget] HRESULT Audio([out] [retval] Windows.Storage.SystemAudioProperties** value);
            [propget] HRESULT GPS([out] [retval] Windows.Storage.SystemGPSProperties** value);
            [propget] HRESULT Media([out] [retval] Windows.Storage.SystemMediaProperties** value);
            [propget] HRESULT Music([out] [retval] Windows.Storage.SystemMusicProperties** value);
            [propget] HRESULT Photo([out] [retval] Windows.Storage.SystemPhotoProperties** value);
            [propget] HRESULT Video([out] [retval] Windows.Storage.SystemVideoProperties** value);
            [propget] HRESULT Image([out] [retval] Windows.Storage.SystemImageProperties** value);
        }

        [contract(Windows.Foundation.UniversalApiContract, 1.0)]
        [exclusiveto(Windows.Storage.SystemVideoProperties)]
        [uuid(2040F715-67F8-4322-9B80-4FA9FEFB83E8)]
        interface ISystemVideoProperties : IInspectable
        {
            [propget] HRESULT Director([out] [retval] HSTRING* value);
            [propget] HRESULT FrameHeight([out] [retval] HSTRING* value);
            [propget] HRESULT FrameWidth([out] [retval] HSTRING* value);
            [propget] HRESULT Orientation([out] [retval] HSTRING* value);
            [propget] HRESULT TotalBitrate([out] [retval] HSTRING* value);
        }

        [contract(Windows.Foundation.UniversalApiContract, 5.0)]
        [exclusiveto(Windows.Storage.UserDataPaths)]
        [uuid(F9C53912-ABC4-46FF-8A2B-DC9D7FA6E52F)]
        interface IUserDataPaths : IInspectable
        {
            [propget] HRESULT CameraRoll([out] [retval] HSTRING* value);
            [propget] HRESULT Cookies([out] [retval] HSTRING* value);
            [propget] HRESULT Desktop([out] [retval] HSTRING* value);
            [propget] HRESULT Documents([out] [retval] HSTRING* value);
            [propget] HRESULT Downloads([out] [retval] HSTRING* value);
            [propget] HRESULT Favorites([out] [retval] HSTRING* value);
            [propget] HRESULT History([out] [retval] HSTRING* value);
            [propget] HRESULT InternetCache([out] [retval] HSTRING* value);
            [propget] HRESULT LocalAppData([out] [retval] HSTRING* value);
            [propget] HRESULT LocalAppDataLow([out] [retval] HSTRING* value);
            [propget] HRESULT Music([out] [retval] HSTRING* value);
            [propget] HRESULT Pictures([out] [retval] HSTRING* value);
            [propget] HRESULT Profile([out] [retval] HSTRING* value);
            [propget] HRESULT Recent([out] [retval] HSTRING* value);
            [propget] HRESULT RoamingAppData([out] [retval] HSTRING* value);
            [propget] HRESULT SavedPictures([out] [retval] HSTRING* value);
            [propget] HRESULT Screenshots([out] [retval] HSTRING* value);
            [propget] HRESULT Templates([out] [retval] HSTRING* value);
            [propget] HRESULT Videos([out] [retval] HSTRING* value);
        }

        [contract(Windows.Foundation.UniversalApiContract, 5.0)]
        [exclusiveto(Windows.Storage.UserDataPaths)]
        [uuid(01B29DEF-E062-48A1-8B0C-F2C7A9CA56C0)]
        interface IUserDataPathsStatics : IInspectable
        {
            HRESULT GetForUser([in] Windows.System.User* user, [out] [retval] Windows.Storage.UserDataPaths** result);
            HRESULT GetDefault([out] [retval] Windows.Storage.UserDataPaths** result);
        }

        [contract(Windows.Foundation.UniversalApiContract, 5.0)]
        [marshaling_behavior(agile)]
        [static(Windows.Storage.IAppDataPathsStatics, Windows.Foundation.UniversalApiContract, 5.0)]
        [threading(both)]
        runtimeclass AppDataPaths
        {
            [default] interface Windows.Storage.IAppDataPaths;
        }

        [contract(Windows.Foundation.UniversalApiContract, 1.0)]
        [marshaling_behavior(agile)]
        [static(Windows.Storage.IApplicationDataStatics, Windows.Foundation.UniversalApiContract, 1.0)]
        [static(Windows.Storage.IApplicationDataStatics2, Windows.Foundation.UniversalApiContract, 1.0)]
        [threading(mta)]
        runtimeclass ApplicationData
        {
            [default] interface Windows.Storage.IApplicationData;
            [contract(Windows.Foundation.UniversalApiContract, 1.0)] interface Windows.Storage.IApplicationData2;
            [contract(Windows.Foundation.UniversalApiContract, 1.0)] interface Windows.Storage.IApplicationData3;
        }

        [activatable(Windows.Foundation.UniversalApiContract, 1.0)]
        [contract(Windows.Foundation.UniversalApiContract, 1.0)]
        [marshaling_behavior(agile)]
        [threading(mta)]
        runtimeclass ApplicationDataCompositeValue
        {
            [default] interface Windows.Foundation.Collections.IPropertySet;
            interface Windows.Foundation.Collections.IObservableMap<HSTRING, IInspectable*>;
            interface Windows.Foundation.Collections.IMap<HSTRING, IInspectable*>;
            interface Windows.Foundation.Collections.IIterable<Windows.Foundation.Collections.IKeyValuePair<HSTRING, IInspectable*>*>;
        }

        [contract(Windows.Foundation.UniversalApiContract, 1.0)]
        [marshaling_behavior(agile)]
        runtimeclass ApplicationDataContainer
        {
            [default] interface Windows.Storage.IApplicationDataContainer;
        }

        [contract(Windows.Foundation.UniversalApiContract, 1.0)]
        [marshaling_behavior(agile)]
        runtimeclass ApplicationDataContainerSettings
        {
            [default] interface Windows.Foundation.Collections.IPropertySet;
            interface Windows.Foundation.Collections.IObservableMap<HSTRING, IInspectable*>;
            interface Windows.Foundation.Collections.IMap<HSTRING, IInspectable*>;
            interface Windows.Foundation.Collections.IIterable<Windows.Foundation.Collections.IKeyValuePair<HSTRING, IInspectable*>*>;
        }

        [contract(Windows.Foundation.UniversalApiContract, 1.0)]
        [marshaling_behavior(agile)]
        [static(Windows.Storage.ICachedFileManagerStatics, Windows.Foundation.UniversalApiContract, 1.0)]
        runtimeclass CachedFileManager
        {
        }

        [contract(Windows.Foundation.UniversalApiContract, 1.0)]
        [static(Windows.Storage.IDownloadsFolderStatics, Windows.Foundation.UniversalApiContract, 1.0)]
        [static(Windows.Storage.IDownloadsFolderStatics2, Windows.Foundation.UniversalApiContract, 2.0)]
        runtimeclass DownloadsFolder
        {
        }

        [contract(Windows.Foundation.UniversalApiContract, 1.0)]
        [marshaling_behavior(agile)]
        [static(Windows.Storage.IFileIOStatics, Windows.Foundation.UniversalApiContract, 1.0)]
        [threading(both)]
        runtimeclass FileIO
        {
        }

        [contract(Windows.Foundation.UniversalApiContract, 1.0)]
        [marshaling_behavior(agile)]
        [static(Windows.Storage.IKnownFoldersCameraRollStatics, Windows.Foundation.UniversalApiContract, 1.0)]
        [static(Windows.Storage.IKnownFoldersPlaylistsStatics, Windows.Foundation.UniversalApiContract, 1.0)]
        [static(Windows.Storage.IKnownFoldersSavedPicturesStatics, Windows.Foundation.UniversalApiContract, 1.0)]
        [static(Windows.Storage.IKnownFoldersStatics, Windows.Foundation.UniversalApiContract, 1.0)]
        [static(Windows.Storage.IKnownFoldersStatics2, Windows.Foundation.UniversalApiContract, 1.0)]
        [static(Windows.Storage.IKnownFoldersStatics3, Windows.Foundation.UniversalApiContract, 2.0)]
        [static(Windows.Storage.IKnownFoldersStatics4, Windows.Foundation.UniversalApiContract, 10.0)]
        runtimeclass KnownFolders
        {
        }

        [contract(Windows.Foundation.UniversalApiContract, 1.0)]
        [marshaling_behavior(agile)]
        [static(Windows.Storage.IPathIOStatics, Windows.Foundation.UniversalApiContract, 1.0)]
        [threading(both)]
        runtimeclass PathIO
        {
        }

        [contract(Windows.Foundation.UniversalApiContract, 1.0)]
        [marshaling_behavior(agile)]
        runtimeclass SetVersionDeferral
        {
            [default] interface Windows.Storage.ISetVersionDeferral;
        }

        [contract(Windows.Foundation.UniversalApiContract, 1.0)]
        [marshaling_behavior(agile)]
        runtimeclass SetVersionRequest
        {
            [default] interface Windows.Storage.ISetVersionRequest;
        }

        [contract(Windows.Foundation.UniversalApiContract, 1.0)]
        [static(Windows.Storage.IStorageFileStatics, Windows.Foundation.UniversalApiContract, 1.0)]
        [static(Windows.Storage.IStorageFileStatics2, Windows.Foundation.UniversalApiContract, 10.0)]
        runtimeclass StorageFile
        {
            [default] interface Windows.Storage.IStorageFile;
            interface Windows.Storage.Streams.IInputStreamReference;
            interface Windows.Storage.Streams.IRandomAccessStreamReference;
            interface Windows.Storage.IStorageItem;
            interface Windows.Storage.IStorageItemProperties;
            [contract(Windows.Foundation.UniversalApiContract, 1.0)] interface Windows.Storage.IStorageItemProperties2;
            [contract(Windows.Foundation.UniversalApiContract, 1.0)] interface Windows.Storage.IStorageItem2;
            [contract(Windows.Foundation.UniversalApiContract, 1.0)] interface Windows.Storage.IStorageItemPropertiesWithProvider;
            [contract(Windows.Foundation.UniversalApiContract, 1.0)] interface Windows.Storage.IStorageFilePropertiesWithAvailability;
            [contract(Windows.Foundation.UniversalApiContract, 1.0)] interface Windows.Storage.IStorageFile2;
        }

        [contract(Windows.Foundation.UniversalApiContract, 1.0)]
        [static(Windows.Storage.IStorageFolderStatics, Windows.Foundation.UniversalApiContract, 1.0)]
        [static(Windows.Storage.IStorageFolderStatics2, Windows.Foundation.UniversalApiContract, 10.0)]
        runtimeclass StorageFolder
        {
            [default] interface Windows.Storage.IStorageFolder;
            interface Windows.Storage.IStorageItem;
            interface Windows.Storage.Search.IStorageFolderQueryOperations;
            interface Windows.Storage.IStorageItemProperties;
            [contract(Windows.Foundation.UniversalApiContract, 1.0)] interface Windows.Storage.IStorageItemProperties2;
            [contract(Windows.Foundation.UniversalApiContract, 1.0)] interface Windows.Storage.IStorageItem2;
            [contract(Windows.Foundation.UniversalApiContract, 1.0)] interface Windows.Storage.IStorageFolder2;
            [contract(Windows.Foundation.UniversalApiContract, 1.0)] interface Windows.Storage.IStorageItemPropertiesWithProvider;
            [contract(Windows.Foundation.UniversalApiContract, 6.0)] interface Windows.Storage.IStorageFolder3;
        }

        [contract(Windows.Foundation.UniversalApiContract, 1.0)]
        [static(Windows.Storage.IStorageLibraryStatics, Windows.Foundation.UniversalApiContract, 1.0)]
        [static(Windows.Storage.IStorageLibraryStatics2, Windows.Foundation.UniversalApiContract, 2.0)]
        runtimeclass StorageLibrary
        {
            [default] interface Windows.Storage.IStorageLibrary;
            [contract(Windows.Foundation.UniversalApiContract, 3.0)] interface Windows.Storage.IStorageLibrary2;
            [contract(Windows.Foundation.UniversalApiContract, 5.0)] interface Windows.Storage.IStorageLibrary3;
        }

        [contract(Windows.Foundation.UniversalApiContract, 3.0)]
        [marshaling_behavior(agile)]
        [threading(both)]
        runtimeclass StorageLibraryChange
        {
            [default] interface Windows.Storage.IStorageLibraryChange;
        }

        [contract(Windows.Foundation.UniversalApiContract, 3.0)]
        [marshaling_behavior(agile)]
        [threading(both)]
        runtimeclass StorageLibraryChangeReader
        {
            [default] interface Windows.Storage.IStorageLibraryChangeReader;
        }

        [contract(Windows.Foundation.UniversalApiContract, 3.0)]
        [marshaling_behavior(agile)]
        [threading(both)]
        runtimeclass StorageLibraryChangeTracker
        {
            [default] interface Windows.Storage.IStorageLibraryChangeTracker;
        }

        [contract(Windows.Foundation.UniversalApiContract, 1.0)]
        [marshaling_behavior(standard)]
        runtimeclass StorageProvider
        {
            [default] interface Windows.Storage.IStorageProvider;
            [contract(Windows.Foundation.UniversalApiContract, 5.0)] interface Windows.Storage.IStorageProvider2;
        }

        [contract(Windows.Foundation.UniversalApiContract, 1.0)]
        runtimeclass StorageStreamTransaction
        {
            [default] interface Windows.Storage.IStorageStreamTransaction;
            interface Windows.Foundation.IClosable;
        }

        [contract(Windows.Foundation.UniversalApiContract, 1.0)]
        runtimeclass StreamedFileDataRequest
        {
            [default] interface Windows.Storage.Streams.IOutputStream;
            interface Windows.Foundation.IClosable;
            interface Windows.Storage.IStreamedFileDataRequest;
        }

        [contract(Windows.Foundation.UniversalApiContract, 1.0)]
        [marshaling_behavior(agile)]
        runtimeclass SystemAudioProperties
        {
            [default] interface Windows.Storage.ISystemAudioProperties;
        }

        [contract(Windows.Foundation.UniversalApiContract, 5.0)]
        [marshaling_behavior(agile)]
        [static(Windows.Storage.ISystemDataPathsStatics, Windows.Foundation.UniversalApiContract, 5.0)]
        [threading(both)]
        runtimeclass SystemDataPaths
        {
            [default] interface Windows.Storage.ISystemDataPaths;
        }

        [contract(Windows.Foundation.UniversalApiContract, 1.0)]
        [marshaling_behavior(agile)]
        runtimeclass SystemGPSProperties
        {
            [default] interface Windows.Storage.ISystemGPSProperties;
        }

        [contract(Windows.Foundation.UniversalApiContract, 1.0)]
        [marshaling_behavior(agile)]
        runtimeclass SystemImageProperties
        {
            [default] interface Windows.Storage.ISystemImageProperties;
        }

        [contract(Windows.Foundation.UniversalApiContract, 1.0)]
        [marshaling_behavior(agile)]
        runtimeclass SystemMediaProperties
        {
            [default] interface Windows.Storage.ISystemMediaProperties;
        }

        [contract(Windows.Foundation.UniversalApiContract, 1.0)]
        [marshaling_behavior(agile)]
        runtimeclass SystemMusicProperties
        {
            [default] interface Windows.Storage.ISystemMusicProperties;
        }

        [contract(Windows.Foundation.UniversalApiContract, 1.0)]
        [marshaling_behavior(agile)]
        runtimeclass SystemPhotoProperties
        {
            [default] interface Windows.Storage.ISystemPhotoProperties;
        }

        [contract(Windows.Foundation.UniversalApiContract, 1.0)]
        [marshaling_behavior(agile)]
        [static(Windows.Storage.ISystemProperties, Windows.Foundation.UniversalApiContract, 1.0)]
        runtimeclass SystemProperties
        {
        }

        [contract(Windows.Foundation.UniversalApiContract, 1.0)]
        [marshaling_behavior(agile)]
        runtimeclass SystemVideoProperties
        {
            [default] interface Windows.Storage.ISystemVideoProperties;
        }

        [contract(Windows.Foundation.UniversalApiContract, 5.0)]
        [marshaling_behavior(agile)]
        [static(Windows.Storage.IUserDataPathsStatics, Windows.Foundation.UniversalApiContract, 5.0)]
        [threading(both)]
        runtimeclass UserDataPaths
        {
            [default] interface Windows.Storage.IUserDataPaths;
        }
    }
}
