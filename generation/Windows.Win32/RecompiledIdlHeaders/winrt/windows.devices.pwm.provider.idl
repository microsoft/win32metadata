//
// Copyright (c) Microsoft Corporation. All rights reserved.
// 
//
// File generated by WinMDIDL version 8.00.0021
//

import "inspectable.idl";
import "AsyncInfo.idl";
import "EventToken.idl";
import "windowscontracts.idl";
import "Windows.Foundation.idl";
import "Windows.Devices.idl";

// Forward Declare
namespace Windows
{
    namespace Devices
    {
        apicontract DevicesLowLevelContract;
    }
}
namespace Windows
{
    namespace Devices
    {
        namespace Pwm
        {
            namespace Provider
            {
                interface IPwmControllerProvider;

                interface IPwmProvider;
            }
        }
    }
}

// Generic instantiations
namespace Windows
{
    namespace Devices
    {
        namespace Pwm
        {
            namespace Provider
            {
                declare
                {
                    interface Windows.Foundation.Collections.IIterable<Windows.Devices.Pwm.Provider.IPwmControllerProvider*>;

                    interface Windows.Foundation.Collections.IIterator<Windows.Devices.Pwm.Provider.IPwmControllerProvider*>;

                    interface Windows.Foundation.Collections.IVectorView<Windows.Devices.Pwm.Provider.IPwmControllerProvider*>;
                }
            }
        }
    }
}

// Type definition
namespace Windows
{
    namespace Devices
    {
        namespace Pwm
        {
            namespace Provider
            {
                [contract(Windows.Devices.DevicesLowLevelContract, 1.0)]
                [uuid(1300593B-E2E3-40A4-B7D9-48DFF0377A52)]
                interface IPwmControllerProvider : IInspectable
                {
                    [propget] HRESULT PinCount([out] [retval] INT32* value);
                    [propget] HRESULT ActualFrequency([out] [retval] DOUBLE* value);
                    HRESULT SetDesiredFrequency([in] DOUBLE frequency, [out] [retval] DOUBLE* result);
                    [propget] HRESULT MaxFrequency([out] [retval] DOUBLE* value);
                    [propget] HRESULT MinFrequency([out] [retval] DOUBLE* value);
                    HRESULT AcquirePin([in] INT32 pin);
                    HRESULT ReleasePin([in] INT32 pin);
                    HRESULT EnablePin([in] INT32 pin);
                    HRESULT DisablePin([in] INT32 pin);
                    HRESULT SetPulseParameters([in] INT32 pin, [in] DOUBLE dutyCycle, [in] boolean invertPolarity);
                }

                [contract(Windows.Devices.DevicesLowLevelContract, 1.0)]
                [uuid(A3301228-52F1-47B0-9349-66BA43D25902)]
                interface IPwmProvider : IInspectable
                {
                    HRESULT GetControllers([out] [retval] Windows.Foundation.Collections.IVectorView<Windows.Devices.Pwm.Provider.IPwmControllerProvider*>** result);
                }
            }
        }
    }
}
