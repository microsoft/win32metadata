
#pragma warning( disable: 4049 )  /* more than 64k source lines */

/* verify that the <rpcndr.h> version is high enough to compile this file*/
#ifndef __REQUIRED_RPCNDR_H_VERSION__
#define __REQUIRED_RPCNDR_H_VERSION__ 500
#endif

/* verify that the <rpcsal.h> version is high enough to compile this file*/
#ifndef __REQUIRED_RPCSAL_H_VERSION__
#define __REQUIRED_RPCSAL_H_VERSION__ 100
#endif

#include <rpc.h>
#include <rpcndr.h>

#ifndef __RPCNDR_H_VERSION__
#error this stub requires an updated version of <rpcndr.h>
#endif /* __RPCNDR_H_VERSION__ */

#ifndef COM_NO_WINDOWS_H
#include <windows.h>
#include <ole2.h>
#endif /*COM_NO_WINDOWS_H*/
#ifndef __windows2Eui2Examl2Econtrols2Emaps_h__
#define __windows2Eui2Examl2Econtrols2Emaps_h__
#ifndef __windows2Eui2Examl2Econtrols2Emaps_p_h__
#define __windows2Eui2Examl2Econtrols2Emaps_p_h__


#pragma once

//
// Deprecated attribute support
//

#pragma push_macro("DEPRECATED")
#undef DEPRECATED

#if !defined(DISABLE_WINRT_DEPRECATION)
#if defined(__cplusplus)
#if __cplusplus >= 201402
#define DEPRECATED(x) [[deprecated(x)]]
#define DEPRECATEDENUMERATOR(x) [[deprecated(x)]]
#elif defined(_MSC_VER)
#if _MSC_VER >= 1900
#define DEPRECATED(x) [[deprecated(x)]]
#define DEPRECATEDENUMERATOR(x) [[deprecated(x)]]
#else
#define DEPRECATED(x) __declspec(deprecated(x))
#define DEPRECATEDENUMERATOR(x)
#endif // _MSC_VER >= 1900
#else // Not Standard C++ or MSVC, ignore the construct.
#define DEPRECATED(x)
#define DEPRECATEDENUMERATOR(x)
#endif  // C++ deprecation
#else // C - disable deprecation
#define DEPRECATED(x)
#define DEPRECATEDENUMERATOR(x)
#endif
#else // Deprecation is disabled
#define DEPRECATED(x)
#define DEPRECATEDENUMERATOR(x)
#endif  /* DEPRECATED */

// Disable Deprecation for this header, MIDL verifies that cross-type access is acceptable
#ifdef __clang__
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#else
#pragma warning(push)
#pragma warning(disable: 4996)
#endif

// Ensure that the setting of the /ns_prefix command line switch is consistent for all headers.
// If you get an error from the compiler indicating "warning C4005: 'CHECK_NS_PREFIX_STATE': macro redefinition", this
// indicates that you have included two different headers with different settings for the /ns_prefix MIDL command line switch
#if !defined(DISABLE_NS_PREFIX_CHECKS)
#define CHECK_NS_PREFIX_STATE "always"
#endif // !defined(DISABLE_NS_PREFIX_CHECKS)


#pragma push_macro("MIDL_CONST_ID")
#undef MIDL_CONST_ID
#define MIDL_CONST_ID const __declspec(selectany)


//  API Contract Inclusion Definitions
#if !defined(SPECIFIC_API_CONTRACT_DEFINITIONS)
#if !defined(WINDOWS_FOUNDATION_FOUNDATIONCONTRACT_VERSION)
#define WINDOWS_FOUNDATION_FOUNDATIONCONTRACT_VERSION 0x40000
#endif // defined(WINDOWS_FOUNDATION_FOUNDATIONCONTRACT_VERSION)

#if !defined(WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION)
#define WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION 0xa0000
#endif // defined(WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION)

#if !defined(WINDOWS_SERVICES_MAPS_GUIDANCECONTRACT_VERSION)
#define WINDOWS_SERVICES_MAPS_GUIDANCECONTRACT_VERSION 0x30000
#endif // defined(WINDOWS_SERVICES_MAPS_GUIDANCECONTRACT_VERSION)

#if !defined(WINDOWS_SERVICES_MAPS_LOCALSEARCHCONTRACT_VERSION)
#define WINDOWS_SERVICES_MAPS_LOCALSEARCHCONTRACT_VERSION 0x40000
#endif // defined(WINDOWS_SERVICES_MAPS_LOCALSEARCHCONTRACT_VERSION)

#endif // defined(SPECIFIC_API_CONTRACT_DEFINITIONS)


// Header files for imported files
#include "inspectable.h"
#include "AsyncInfo.h"
#include "EventToken.h"
#include "windowscontracts.h"
#include "Windows.Foundation.h"
#include "Windows.Devices.Geolocation.h"
#include "Windows.Foundation.Numerics.h"
#include "Windows.Services.Maps.h"
#include "Windows.Services.Maps.LocalSearch.h"
#include "Windows.Storage.Streams.h"
#include "Windows.UI.h"
#include "Windows.UI.Xaml.h"
// Importing Collections header
#include <windows.foundation.collections.h>

#if defined(__cplusplus) && !defined(CINTERFACE)
/* Forward Declarations */
#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CICustomMapTileDataSource_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CICustomMapTileDataSource_FWD_DEFINED__
namespace ABI {
    namespace Windows {
        namespace UI {
            namespace Xaml {
                namespace Controls {
                    namespace Maps {
                        interface ICustomMapTileDataSource;
                    } /* Maps */
                } /* Controls */
            } /* Xaml */
        } /* UI */
    } /* Windows */
} /* ABI */
#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CICustomMapTileDataSource ABI::Windows::UI::Xaml::Controls::Maps::ICustomMapTileDataSource

#endif // ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CICustomMapTileDataSource_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CICustomMapTileDataSourceFactory_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CICustomMapTileDataSourceFactory_FWD_DEFINED__
namespace ABI {
    namespace Windows {
        namespace UI {
            namespace Xaml {
                namespace Controls {
                    namespace Maps {
                        interface ICustomMapTileDataSourceFactory;
                    } /* Maps */
                } /* Controls */
            } /* Xaml */
        } /* UI */
    } /* Windows */
} /* ABI */
#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CICustomMapTileDataSourceFactory ABI::Windows::UI::Xaml::Controls::Maps::ICustomMapTileDataSourceFactory

#endif // ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CICustomMapTileDataSourceFactory_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIHttpMapTileDataSource_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIHttpMapTileDataSource_FWD_DEFINED__
namespace ABI {
    namespace Windows {
        namespace UI {
            namespace Xaml {
                namespace Controls {
                    namespace Maps {
                        interface IHttpMapTileDataSource;
                    } /* Maps */
                } /* Controls */
            } /* Xaml */
        } /* UI */
    } /* Windows */
} /* ABI */
#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIHttpMapTileDataSource ABI::Windows::UI::Xaml::Controls::Maps::IHttpMapTileDataSource

#endif // ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIHttpMapTileDataSource_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIHttpMapTileDataSourceFactory_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIHttpMapTileDataSourceFactory_FWD_DEFINED__
namespace ABI {
    namespace Windows {
        namespace UI {
            namespace Xaml {
                namespace Controls {
                    namespace Maps {
                        interface IHttpMapTileDataSourceFactory;
                    } /* Maps */
                } /* Controls */
            } /* Xaml */
        } /* UI */
    } /* Windows */
} /* ABI */
#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIHttpMapTileDataSourceFactory ABI::Windows::UI::Xaml::Controls::Maps::IHttpMapTileDataSourceFactory

#endif // ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIHttpMapTileDataSourceFactory_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CILocalMapTileDataSource_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CILocalMapTileDataSource_FWD_DEFINED__
namespace ABI {
    namespace Windows {
        namespace UI {
            namespace Xaml {
                namespace Controls {
                    namespace Maps {
                        interface ILocalMapTileDataSource;
                    } /* Maps */
                } /* Controls */
            } /* Xaml */
        } /* UI */
    } /* Windows */
} /* ABI */
#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CILocalMapTileDataSource ABI::Windows::UI::Xaml::Controls::Maps::ILocalMapTileDataSource

#endif // ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CILocalMapTileDataSource_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CILocalMapTileDataSourceFactory_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CILocalMapTileDataSourceFactory_FWD_DEFINED__
namespace ABI {
    namespace Windows {
        namespace UI {
            namespace Xaml {
                namespace Controls {
                    namespace Maps {
                        interface ILocalMapTileDataSourceFactory;
                    } /* Maps */
                } /* Controls */
            } /* Xaml */
        } /* UI */
    } /* Windows */
} /* ABI */
#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CILocalMapTileDataSourceFactory ABI::Windows::UI::Xaml::Controls::Maps::ILocalMapTileDataSourceFactory

#endif // ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CILocalMapTileDataSourceFactory_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapActualCameraChangedEventArgs_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapActualCameraChangedEventArgs_FWD_DEFINED__
namespace ABI {
    namespace Windows {
        namespace UI {
            namespace Xaml {
                namespace Controls {
                    namespace Maps {
                        interface IMapActualCameraChangedEventArgs;
                    } /* Maps */
                } /* Controls */
            } /* Xaml */
        } /* UI */
    } /* Windows */
} /* ABI */
#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapActualCameraChangedEventArgs ABI::Windows::UI::Xaml::Controls::Maps::IMapActualCameraChangedEventArgs

#endif // ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapActualCameraChangedEventArgs_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapActualCameraChangedEventArgs2_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapActualCameraChangedEventArgs2_FWD_DEFINED__
namespace ABI {
    namespace Windows {
        namespace UI {
            namespace Xaml {
                namespace Controls {
                    namespace Maps {
                        interface IMapActualCameraChangedEventArgs2;
                    } /* Maps */
                } /* Controls */
            } /* Xaml */
        } /* UI */
    } /* Windows */
} /* ABI */
#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapActualCameraChangedEventArgs2 ABI::Windows::UI::Xaml::Controls::Maps::IMapActualCameraChangedEventArgs2

#endif // ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapActualCameraChangedEventArgs2_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapActualCameraChangingEventArgs_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapActualCameraChangingEventArgs_FWD_DEFINED__
namespace ABI {
    namespace Windows {
        namespace UI {
            namespace Xaml {
                namespace Controls {
                    namespace Maps {
                        interface IMapActualCameraChangingEventArgs;
                    } /* Maps */
                } /* Controls */
            } /* Xaml */
        } /* UI */
    } /* Windows */
} /* ABI */
#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapActualCameraChangingEventArgs ABI::Windows::UI::Xaml::Controls::Maps::IMapActualCameraChangingEventArgs

#endif // ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapActualCameraChangingEventArgs_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapActualCameraChangingEventArgs2_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapActualCameraChangingEventArgs2_FWD_DEFINED__
namespace ABI {
    namespace Windows {
        namespace UI {
            namespace Xaml {
                namespace Controls {
                    namespace Maps {
                        interface IMapActualCameraChangingEventArgs2;
                    } /* Maps */
                } /* Controls */
            } /* Xaml */
        } /* UI */
    } /* Windows */
} /* ABI */
#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapActualCameraChangingEventArgs2 ABI::Windows::UI::Xaml::Controls::Maps::IMapActualCameraChangingEventArgs2

#endif // ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapActualCameraChangingEventArgs2_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapBillboard_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapBillboard_FWD_DEFINED__
namespace ABI {
    namespace Windows {
        namespace UI {
            namespace Xaml {
                namespace Controls {
                    namespace Maps {
                        interface IMapBillboard;
                    } /* Maps */
                } /* Controls */
            } /* Xaml */
        } /* UI */
    } /* Windows */
} /* ABI */
#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapBillboard ABI::Windows::UI::Xaml::Controls::Maps::IMapBillboard

#endif // ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapBillboard_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapBillboardFactory_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapBillboardFactory_FWD_DEFINED__
namespace ABI {
    namespace Windows {
        namespace UI {
            namespace Xaml {
                namespace Controls {
                    namespace Maps {
                        interface IMapBillboardFactory;
                    } /* Maps */
                } /* Controls */
            } /* Xaml */
        } /* UI */
    } /* Windows */
} /* ABI */
#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapBillboardFactory ABI::Windows::UI::Xaml::Controls::Maps::IMapBillboardFactory

#endif // ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapBillboardFactory_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapBillboardStatics_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapBillboardStatics_FWD_DEFINED__
namespace ABI {
    namespace Windows {
        namespace UI {
            namespace Xaml {
                namespace Controls {
                    namespace Maps {
                        interface IMapBillboardStatics;
                    } /* Maps */
                } /* Controls */
            } /* Xaml */
        } /* UI */
    } /* Windows */
} /* ABI */
#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapBillboardStatics ABI::Windows::UI::Xaml::Controls::Maps::IMapBillboardStatics

#endif // ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapBillboardStatics_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCamera_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCamera_FWD_DEFINED__
namespace ABI {
    namespace Windows {
        namespace UI {
            namespace Xaml {
                namespace Controls {
                    namespace Maps {
                        interface IMapCamera;
                    } /* Maps */
                } /* Controls */
            } /* Xaml */
        } /* UI */
    } /* Windows */
} /* ABI */
#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCamera ABI::Windows::UI::Xaml::Controls::Maps::IMapCamera

#endif // ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCamera_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCameraFactory_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCameraFactory_FWD_DEFINED__
namespace ABI {
    namespace Windows {
        namespace UI {
            namespace Xaml {
                namespace Controls {
                    namespace Maps {
                        interface IMapCameraFactory;
                    } /* Maps */
                } /* Controls */
            } /* Xaml */
        } /* UI */
    } /* Windows */
} /* ABI */
#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCameraFactory ABI::Windows::UI::Xaml::Controls::Maps::IMapCameraFactory

#endif // ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCameraFactory_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapContextRequestedEventArgs_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapContextRequestedEventArgs_FWD_DEFINED__
namespace ABI {
    namespace Windows {
        namespace UI {
            namespace Xaml {
                namespace Controls {
                    namespace Maps {
                        interface IMapContextRequestedEventArgs;
                    } /* Maps */
                } /* Controls */
            } /* Xaml */
        } /* UI */
    } /* Windows */
} /* ABI */
#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapContextRequestedEventArgs ABI::Windows::UI::Xaml::Controls::Maps::IMapContextRequestedEventArgs

#endif // ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapContextRequestedEventArgs_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl_FWD_DEFINED__
namespace ABI {
    namespace Windows {
        namespace UI {
            namespace Xaml {
                namespace Controls {
                    namespace Maps {
                        interface IMapControl;
                    } /* Maps */
                } /* Controls */
            } /* Xaml */
        } /* UI */
    } /* Windows */
} /* ABI */
#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl ABI::Windows::UI::Xaml::Controls::Maps::IMapControl

#endif // ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl2_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl2_FWD_DEFINED__
namespace ABI {
    namespace Windows {
        namespace UI {
            namespace Xaml {
                namespace Controls {
                    namespace Maps {
                        interface IMapControl2;
                    } /* Maps */
                } /* Controls */
            } /* Xaml */
        } /* UI */
    } /* Windows */
} /* ABI */
#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl2 ABI::Windows::UI::Xaml::Controls::Maps::IMapControl2

#endif // ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl2_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl3_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl3_FWD_DEFINED__
namespace ABI {
    namespace Windows {
        namespace UI {
            namespace Xaml {
                namespace Controls {
                    namespace Maps {
                        interface IMapControl3;
                    } /* Maps */
                } /* Controls */
            } /* Xaml */
        } /* UI */
    } /* Windows */
} /* ABI */
#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl3 ABI::Windows::UI::Xaml::Controls::Maps::IMapControl3

#endif // ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl3_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl4_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl4_FWD_DEFINED__
namespace ABI {
    namespace Windows {
        namespace UI {
            namespace Xaml {
                namespace Controls {
                    namespace Maps {
                        interface IMapControl4;
                    } /* Maps */
                } /* Controls */
            } /* Xaml */
        } /* UI */
    } /* Windows */
} /* ABI */
#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl4 ABI::Windows::UI::Xaml::Controls::Maps::IMapControl4

#endif // ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl4_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl5_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl5_FWD_DEFINED__
namespace ABI {
    namespace Windows {
        namespace UI {
            namespace Xaml {
                namespace Controls {
                    namespace Maps {
                        interface IMapControl5;
                    } /* Maps */
                } /* Controls */
            } /* Xaml */
        } /* UI */
    } /* Windows */
} /* ABI */
#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl5 ABI::Windows::UI::Xaml::Controls::Maps::IMapControl5

#endif // ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl5_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl6_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl6_FWD_DEFINED__
namespace ABI {
    namespace Windows {
        namespace UI {
            namespace Xaml {
                namespace Controls {
                    namespace Maps {
                        interface IMapControl6;
                    } /* Maps */
                } /* Controls */
            } /* Xaml */
        } /* UI */
    } /* Windows */
} /* ABI */
#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl6 ABI::Windows::UI::Xaml::Controls::Maps::IMapControl6

#endif // ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl6_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl7_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl7_FWD_DEFINED__
namespace ABI {
    namespace Windows {
        namespace UI {
            namespace Xaml {
                namespace Controls {
                    namespace Maps {
                        interface IMapControl7;
                    } /* Maps */
                } /* Controls */
            } /* Xaml */
        } /* UI */
    } /* Windows */
} /* ABI */
#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl7 ABI::Windows::UI::Xaml::Controls::Maps::IMapControl7

#endif // ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl7_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl8_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl8_FWD_DEFINED__
namespace ABI {
    namespace Windows {
        namespace UI {
            namespace Xaml {
                namespace Controls {
                    namespace Maps {
                        interface IMapControl8;
                    } /* Maps */
                } /* Controls */
            } /* Xaml */
        } /* UI */
    } /* Windows */
} /* ABI */
#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl8 ABI::Windows::UI::Xaml::Controls::Maps::IMapControl8

#endif // ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl8_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlBusinessLandmarkClickEventArgs_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlBusinessLandmarkClickEventArgs_FWD_DEFINED__
namespace ABI {
    namespace Windows {
        namespace UI {
            namespace Xaml {
                namespace Controls {
                    namespace Maps {
                        interface IMapControlBusinessLandmarkClickEventArgs;
                    } /* Maps */
                } /* Controls */
            } /* Xaml */
        } /* UI */
    } /* Windows */
} /* ABI */
#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlBusinessLandmarkClickEventArgs ABI::Windows::UI::Xaml::Controls::Maps::IMapControlBusinessLandmarkClickEventArgs

#endif // ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlBusinessLandmarkClickEventArgs_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlBusinessLandmarkPointerEnteredEventArgs_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlBusinessLandmarkPointerEnteredEventArgs_FWD_DEFINED__
namespace ABI {
    namespace Windows {
        namespace UI {
            namespace Xaml {
                namespace Controls {
                    namespace Maps {
                        interface IMapControlBusinessLandmarkPointerEnteredEventArgs;
                    } /* Maps */
                } /* Controls */
            } /* Xaml */
        } /* UI */
    } /* Windows */
} /* ABI */
#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlBusinessLandmarkPointerEnteredEventArgs ABI::Windows::UI::Xaml::Controls::Maps::IMapControlBusinessLandmarkPointerEnteredEventArgs

#endif // ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlBusinessLandmarkPointerEnteredEventArgs_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlBusinessLandmarkPointerExitedEventArgs_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlBusinessLandmarkPointerExitedEventArgs_FWD_DEFINED__
namespace ABI {
    namespace Windows {
        namespace UI {
            namespace Xaml {
                namespace Controls {
                    namespace Maps {
                        interface IMapControlBusinessLandmarkPointerExitedEventArgs;
                    } /* Maps */
                } /* Controls */
            } /* Xaml */
        } /* UI */
    } /* Windows */
} /* ABI */
#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlBusinessLandmarkPointerExitedEventArgs ABI::Windows::UI::Xaml::Controls::Maps::IMapControlBusinessLandmarkPointerExitedEventArgs

#endif // ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlBusinessLandmarkPointerExitedEventArgs_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlBusinessLandmarkRightTappedEventArgs_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlBusinessLandmarkRightTappedEventArgs_FWD_DEFINED__
namespace ABI {
    namespace Windows {
        namespace UI {
            namespace Xaml {
                namespace Controls {
                    namespace Maps {
                        interface IMapControlBusinessLandmarkRightTappedEventArgs;
                    } /* Maps */
                } /* Controls */
            } /* Xaml */
        } /* UI */
    } /* Windows */
} /* ABI */
#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlBusinessLandmarkRightTappedEventArgs ABI::Windows::UI::Xaml::Controls::Maps::IMapControlBusinessLandmarkRightTappedEventArgs

#endif // ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlBusinessLandmarkRightTappedEventArgs_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlDataHelper_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlDataHelper_FWD_DEFINED__
namespace ABI {
    namespace Windows {
        namespace UI {
            namespace Xaml {
                namespace Controls {
                    namespace Maps {
                        interface IMapControlDataHelper;
                    } /* Maps */
                } /* Controls */
            } /* Xaml */
        } /* UI */
    } /* Windows */
} /* ABI */
#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlDataHelper ABI::Windows::UI::Xaml::Controls::Maps::IMapControlDataHelper

#endif // ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlDataHelper_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlDataHelper2_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlDataHelper2_FWD_DEFINED__
namespace ABI {
    namespace Windows {
        namespace UI {
            namespace Xaml {
                namespace Controls {
                    namespace Maps {
                        interface IMapControlDataHelper2;
                    } /* Maps */
                } /* Controls */
            } /* Xaml */
        } /* UI */
    } /* Windows */
} /* ABI */
#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlDataHelper2 ABI::Windows::UI::Xaml::Controls::Maps::IMapControlDataHelper2

#endif // ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlDataHelper2_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlDataHelperFactory_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlDataHelperFactory_FWD_DEFINED__
namespace ABI {
    namespace Windows {
        namespace UI {
            namespace Xaml {
                namespace Controls {
                    namespace Maps {
                        interface IMapControlDataHelperFactory;
                    } /* Maps */
                } /* Controls */
            } /* Xaml */
        } /* UI */
    } /* Windows */
} /* ABI */
#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlDataHelperFactory ABI::Windows::UI::Xaml::Controls::Maps::IMapControlDataHelperFactory

#endif // ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlDataHelperFactory_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlDataHelperStatics_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlDataHelperStatics_FWD_DEFINED__
namespace ABI {
    namespace Windows {
        namespace UI {
            namespace Xaml {
                namespace Controls {
                    namespace Maps {
                        interface IMapControlDataHelperStatics;
                    } /* Maps */
                } /* Controls */
            } /* Xaml */
        } /* UI */
    } /* Windows */
} /* ABI */
#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlDataHelperStatics ABI::Windows::UI::Xaml::Controls::Maps::IMapControlDataHelperStatics

#endif // ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlDataHelperStatics_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics_FWD_DEFINED__
namespace ABI {
    namespace Windows {
        namespace UI {
            namespace Xaml {
                namespace Controls {
                    namespace Maps {
                        interface IMapControlStatics;
                    } /* Maps */
                } /* Controls */
            } /* Xaml */
        } /* UI */
    } /* Windows */
} /* ABI */
#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics ABI::Windows::UI::Xaml::Controls::Maps::IMapControlStatics

#endif // ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics2_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics2_FWD_DEFINED__
namespace ABI {
    namespace Windows {
        namespace UI {
            namespace Xaml {
                namespace Controls {
                    namespace Maps {
                        interface IMapControlStatics2;
                    } /* Maps */
                } /* Controls */
            } /* Xaml */
        } /* UI */
    } /* Windows */
} /* ABI */
#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics2 ABI::Windows::UI::Xaml::Controls::Maps::IMapControlStatics2

#endif // ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics2_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics4_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics4_FWD_DEFINED__
namespace ABI {
    namespace Windows {
        namespace UI {
            namespace Xaml {
                namespace Controls {
                    namespace Maps {
                        interface IMapControlStatics4;
                    } /* Maps */
                } /* Controls */
            } /* Xaml */
        } /* UI */
    } /* Windows */
} /* ABI */
#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics4 ABI::Windows::UI::Xaml::Controls::Maps::IMapControlStatics4

#endif // ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics4_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics5_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics5_FWD_DEFINED__
namespace ABI {
    namespace Windows {
        namespace UI {
            namespace Xaml {
                namespace Controls {
                    namespace Maps {
                        interface IMapControlStatics5;
                    } /* Maps */
                } /* Controls */
            } /* Xaml */
        } /* UI */
    } /* Windows */
} /* ABI */
#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics5 ABI::Windows::UI::Xaml::Controls::Maps::IMapControlStatics5

#endif // ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics5_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics6_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics6_FWD_DEFINED__
namespace ABI {
    namespace Windows {
        namespace UI {
            namespace Xaml {
                namespace Controls {
                    namespace Maps {
                        interface IMapControlStatics6;
                    } /* Maps */
                } /* Controls */
            } /* Xaml */
        } /* UI */
    } /* Windows */
} /* ABI */
#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics6 ABI::Windows::UI::Xaml::Controls::Maps::IMapControlStatics6

#endif // ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics6_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics7_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics7_FWD_DEFINED__
namespace ABI {
    namespace Windows {
        namespace UI {
            namespace Xaml {
                namespace Controls {
                    namespace Maps {
                        interface IMapControlStatics7;
                    } /* Maps */
                } /* Controls */
            } /* Xaml */
        } /* UI */
    } /* Windows */
} /* ABI */
#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics7 ABI::Windows::UI::Xaml::Controls::Maps::IMapControlStatics7

#endif // ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics7_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics8_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics8_FWD_DEFINED__
namespace ABI {
    namespace Windows {
        namespace UI {
            namespace Xaml {
                namespace Controls {
                    namespace Maps {
                        interface IMapControlStatics8;
                    } /* Maps */
                } /* Controls */
            } /* Xaml */
        } /* UI */
    } /* Windows */
} /* ABI */
#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics8 ABI::Windows::UI::Xaml::Controls::Maps::IMapControlStatics8

#endif // ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics8_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlTransitFeatureClickEventArgs_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlTransitFeatureClickEventArgs_FWD_DEFINED__
namespace ABI {
    namespace Windows {
        namespace UI {
            namespace Xaml {
                namespace Controls {
                    namespace Maps {
                        interface IMapControlTransitFeatureClickEventArgs;
                    } /* Maps */
                } /* Controls */
            } /* Xaml */
        } /* UI */
    } /* Windows */
} /* ABI */
#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlTransitFeatureClickEventArgs ABI::Windows::UI::Xaml::Controls::Maps::IMapControlTransitFeatureClickEventArgs

#endif // ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlTransitFeatureClickEventArgs_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlTransitFeaturePointerEnteredEventArgs_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlTransitFeaturePointerEnteredEventArgs_FWD_DEFINED__
namespace ABI {
    namespace Windows {
        namespace UI {
            namespace Xaml {
                namespace Controls {
                    namespace Maps {
                        interface IMapControlTransitFeaturePointerEnteredEventArgs;
                    } /* Maps */
                } /* Controls */
            } /* Xaml */
        } /* UI */
    } /* Windows */
} /* ABI */
#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlTransitFeaturePointerEnteredEventArgs ABI::Windows::UI::Xaml::Controls::Maps::IMapControlTransitFeaturePointerEnteredEventArgs

#endif // ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlTransitFeaturePointerEnteredEventArgs_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlTransitFeaturePointerExitedEventArgs_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlTransitFeaturePointerExitedEventArgs_FWD_DEFINED__
namespace ABI {
    namespace Windows {
        namespace UI {
            namespace Xaml {
                namespace Controls {
                    namespace Maps {
                        interface IMapControlTransitFeaturePointerExitedEventArgs;
                    } /* Maps */
                } /* Controls */
            } /* Xaml */
        } /* UI */
    } /* Windows */
} /* ABI */
#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlTransitFeaturePointerExitedEventArgs ABI::Windows::UI::Xaml::Controls::Maps::IMapControlTransitFeaturePointerExitedEventArgs

#endif // ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlTransitFeaturePointerExitedEventArgs_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlTransitFeatureRightTappedEventArgs_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlTransitFeatureRightTappedEventArgs_FWD_DEFINED__
namespace ABI {
    namespace Windows {
        namespace UI {
            namespace Xaml {
                namespace Controls {
                    namespace Maps {
                        interface IMapControlTransitFeatureRightTappedEventArgs;
                    } /* Maps */
                } /* Controls */
            } /* Xaml */
        } /* UI */
    } /* Windows */
} /* ABI */
#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlTransitFeatureRightTappedEventArgs ABI::Windows::UI::Xaml::Controls::Maps::IMapControlTransitFeatureRightTappedEventArgs

#endif // ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlTransitFeatureRightTappedEventArgs_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCustomExperience_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCustomExperience_FWD_DEFINED__
namespace ABI {
    namespace Windows {
        namespace UI {
            namespace Xaml {
                namespace Controls {
                    namespace Maps {
                        interface IMapCustomExperience;
                    } /* Maps */
                } /* Controls */
            } /* Xaml */
        } /* UI */
    } /* Windows */
} /* ABI */
#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCustomExperience ABI::Windows::UI::Xaml::Controls::Maps::IMapCustomExperience

#endif // ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCustomExperience_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCustomExperienceChangedEventArgs_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCustomExperienceChangedEventArgs_FWD_DEFINED__
namespace ABI {
    namespace Windows {
        namespace UI {
            namespace Xaml {
                namespace Controls {
                    namespace Maps {
                        interface IMapCustomExperienceChangedEventArgs;
                    } /* Maps */
                } /* Controls */
            } /* Xaml */
        } /* UI */
    } /* Windows */
} /* ABI */
#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCustomExperienceChangedEventArgs ABI::Windows::UI::Xaml::Controls::Maps::IMapCustomExperienceChangedEventArgs

#endif // ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCustomExperienceChangedEventArgs_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCustomExperienceFactory_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCustomExperienceFactory_FWD_DEFINED__
namespace ABI {
    namespace Windows {
        namespace UI {
            namespace Xaml {
                namespace Controls {
                    namespace Maps {
                        interface IMapCustomExperienceFactory;
                    } /* Maps */
                } /* Controls */
            } /* Xaml */
        } /* UI */
    } /* Windows */
} /* ABI */
#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCustomExperienceFactory ABI::Windows::UI::Xaml::Controls::Maps::IMapCustomExperienceFactory

#endif // ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCustomExperienceFactory_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement_FWD_DEFINED__
namespace ABI {
    namespace Windows {
        namespace UI {
            namespace Xaml {
                namespace Controls {
                    namespace Maps {
                        interface IMapElement;
                    } /* Maps */
                } /* Controls */
            } /* Xaml */
        } /* UI */
    } /* Windows */
} /* ABI */
#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement ABI::Windows::UI::Xaml::Controls::Maps::IMapElement

#endif // ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement2_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement2_FWD_DEFINED__
namespace ABI {
    namespace Windows {
        namespace UI {
            namespace Xaml {
                namespace Controls {
                    namespace Maps {
                        interface IMapElement2;
                    } /* Maps */
                } /* Controls */
            } /* Xaml */
        } /* UI */
    } /* Windows */
} /* ABI */
#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement2 ABI::Windows::UI::Xaml::Controls::Maps::IMapElement2

#endif // ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement2_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement3_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement3_FWD_DEFINED__
namespace ABI {
    namespace Windows {
        namespace UI {
            namespace Xaml {
                namespace Controls {
                    namespace Maps {
                        interface IMapElement3;
                    } /* Maps */
                } /* Controls */
            } /* Xaml */
        } /* UI */
    } /* Windows */
} /* ABI */
#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement3 ABI::Windows::UI::Xaml::Controls::Maps::IMapElement3

#endif // ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement3_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement3D_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement3D_FWD_DEFINED__
namespace ABI {
    namespace Windows {
        namespace UI {
            namespace Xaml {
                namespace Controls {
                    namespace Maps {
                        interface IMapElement3D;
                    } /* Maps */
                } /* Controls */
            } /* Xaml */
        } /* UI */
    } /* Windows */
} /* ABI */
#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement3D ABI::Windows::UI::Xaml::Controls::Maps::IMapElement3D

#endif // ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement3D_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement3DStatics_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement3DStatics_FWD_DEFINED__
namespace ABI {
    namespace Windows {
        namespace UI {
            namespace Xaml {
                namespace Controls {
                    namespace Maps {
                        interface IMapElement3DStatics;
                    } /* Maps */
                } /* Controls */
            } /* Xaml */
        } /* UI */
    } /* Windows */
} /* ABI */
#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement3DStatics ABI::Windows::UI::Xaml::Controls::Maps::IMapElement3DStatics

#endif // ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement3DStatics_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement4_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement4_FWD_DEFINED__
namespace ABI {
    namespace Windows {
        namespace UI {
            namespace Xaml {
                namespace Controls {
                    namespace Maps {
                        interface IMapElement4;
                    } /* Maps */
                } /* Controls */
            } /* Xaml */
        } /* UI */
    } /* Windows */
} /* ABI */
#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement4 ABI::Windows::UI::Xaml::Controls::Maps::IMapElement4

#endif // ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement4_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementClickEventArgs_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementClickEventArgs_FWD_DEFINED__
namespace ABI {
    namespace Windows {
        namespace UI {
            namespace Xaml {
                namespace Controls {
                    namespace Maps {
                        interface IMapElementClickEventArgs;
                    } /* Maps */
                } /* Controls */
            } /* Xaml */
        } /* UI */
    } /* Windows */
} /* ABI */
#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementClickEventArgs ABI::Windows::UI::Xaml::Controls::Maps::IMapElementClickEventArgs

#endif // ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementClickEventArgs_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementFactory_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementFactory_FWD_DEFINED__
namespace ABI {
    namespace Windows {
        namespace UI {
            namespace Xaml {
                namespace Controls {
                    namespace Maps {
                        interface IMapElementFactory;
                    } /* Maps */
                } /* Controls */
            } /* Xaml */
        } /* UI */
    } /* Windows */
} /* ABI */
#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementFactory ABI::Windows::UI::Xaml::Controls::Maps::IMapElementFactory

#endif // ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementFactory_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementPointerEnteredEventArgs_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementPointerEnteredEventArgs_FWD_DEFINED__
namespace ABI {
    namespace Windows {
        namespace UI {
            namespace Xaml {
                namespace Controls {
                    namespace Maps {
                        interface IMapElementPointerEnteredEventArgs;
                    } /* Maps */
                } /* Controls */
            } /* Xaml */
        } /* UI */
    } /* Windows */
} /* ABI */
#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementPointerEnteredEventArgs ABI::Windows::UI::Xaml::Controls::Maps::IMapElementPointerEnteredEventArgs

#endif // ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementPointerEnteredEventArgs_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementPointerExitedEventArgs_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementPointerExitedEventArgs_FWD_DEFINED__
namespace ABI {
    namespace Windows {
        namespace UI {
            namespace Xaml {
                namespace Controls {
                    namespace Maps {
                        interface IMapElementPointerExitedEventArgs;
                    } /* Maps */
                } /* Controls */
            } /* Xaml */
        } /* UI */
    } /* Windows */
} /* ABI */
#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementPointerExitedEventArgs ABI::Windows::UI::Xaml::Controls::Maps::IMapElementPointerExitedEventArgs

#endif // ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementPointerExitedEventArgs_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementStatics_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementStatics_FWD_DEFINED__
namespace ABI {
    namespace Windows {
        namespace UI {
            namespace Xaml {
                namespace Controls {
                    namespace Maps {
                        interface IMapElementStatics;
                    } /* Maps */
                } /* Controls */
            } /* Xaml */
        } /* UI */
    } /* Windows */
} /* ABI */
#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementStatics ABI::Windows::UI::Xaml::Controls::Maps::IMapElementStatics

#endif // ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementStatics_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementStatics2_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementStatics2_FWD_DEFINED__
namespace ABI {
    namespace Windows {
        namespace UI {
            namespace Xaml {
                namespace Controls {
                    namespace Maps {
                        interface IMapElementStatics2;
                    } /* Maps */
                } /* Controls */
            } /* Xaml */
        } /* UI */
    } /* Windows */
} /* ABI */
#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementStatics2 ABI::Windows::UI::Xaml::Controls::Maps::IMapElementStatics2

#endif // ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementStatics2_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementStatics3_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementStatics3_FWD_DEFINED__
namespace ABI {
    namespace Windows {
        namespace UI {
            namespace Xaml {
                namespace Controls {
                    namespace Maps {
                        interface IMapElementStatics3;
                    } /* Maps */
                } /* Controls */
            } /* Xaml */
        } /* UI */
    } /* Windows */
} /* ABI */
#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementStatics3 ABI::Windows::UI::Xaml::Controls::Maps::IMapElementStatics3

#endif // ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementStatics3_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementStatics4_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementStatics4_FWD_DEFINED__
namespace ABI {
    namespace Windows {
        namespace UI {
            namespace Xaml {
                namespace Controls {
                    namespace Maps {
                        interface IMapElementStatics4;
                    } /* Maps */
                } /* Controls */
            } /* Xaml */
        } /* UI */
    } /* Windows */
} /* ABI */
#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementStatics4 ABI::Windows::UI::Xaml::Controls::Maps::IMapElementStatics4

#endif // ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementStatics4_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementsLayer_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementsLayer_FWD_DEFINED__
namespace ABI {
    namespace Windows {
        namespace UI {
            namespace Xaml {
                namespace Controls {
                    namespace Maps {
                        interface IMapElementsLayer;
                    } /* Maps */
                } /* Controls */
            } /* Xaml */
        } /* UI */
    } /* Windows */
} /* ABI */
#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementsLayer ABI::Windows::UI::Xaml::Controls::Maps::IMapElementsLayer

#endif // ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementsLayer_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementsLayerClickEventArgs_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementsLayerClickEventArgs_FWD_DEFINED__
namespace ABI {
    namespace Windows {
        namespace UI {
            namespace Xaml {
                namespace Controls {
                    namespace Maps {
                        interface IMapElementsLayerClickEventArgs;
                    } /* Maps */
                } /* Controls */
            } /* Xaml */
        } /* UI */
    } /* Windows */
} /* ABI */
#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementsLayerClickEventArgs ABI::Windows::UI::Xaml::Controls::Maps::IMapElementsLayerClickEventArgs

#endif // ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementsLayerClickEventArgs_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementsLayerContextRequestedEventArgs_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementsLayerContextRequestedEventArgs_FWD_DEFINED__
namespace ABI {
    namespace Windows {
        namespace UI {
            namespace Xaml {
                namespace Controls {
                    namespace Maps {
                        interface IMapElementsLayerContextRequestedEventArgs;
                    } /* Maps */
                } /* Controls */
            } /* Xaml */
        } /* UI */
    } /* Windows */
} /* ABI */
#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementsLayerContextRequestedEventArgs ABI::Windows::UI::Xaml::Controls::Maps::IMapElementsLayerContextRequestedEventArgs

#endif // ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementsLayerContextRequestedEventArgs_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementsLayerPointerEnteredEventArgs_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementsLayerPointerEnteredEventArgs_FWD_DEFINED__
namespace ABI {
    namespace Windows {
        namespace UI {
            namespace Xaml {
                namespace Controls {
                    namespace Maps {
                        interface IMapElementsLayerPointerEnteredEventArgs;
                    } /* Maps */
                } /* Controls */
            } /* Xaml */
        } /* UI */
    } /* Windows */
} /* ABI */
#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementsLayerPointerEnteredEventArgs ABI::Windows::UI::Xaml::Controls::Maps::IMapElementsLayerPointerEnteredEventArgs

#endif // ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementsLayerPointerEnteredEventArgs_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementsLayerPointerExitedEventArgs_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementsLayerPointerExitedEventArgs_FWD_DEFINED__
namespace ABI {
    namespace Windows {
        namespace UI {
            namespace Xaml {
                namespace Controls {
                    namespace Maps {
                        interface IMapElementsLayerPointerExitedEventArgs;
                    } /* Maps */
                } /* Controls */
            } /* Xaml */
        } /* UI */
    } /* Windows */
} /* ABI */
#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementsLayerPointerExitedEventArgs ABI::Windows::UI::Xaml::Controls::Maps::IMapElementsLayerPointerExitedEventArgs

#endif // ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementsLayerPointerExitedEventArgs_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementsLayerStatics_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementsLayerStatics_FWD_DEFINED__
namespace ABI {
    namespace Windows {
        namespace UI {
            namespace Xaml {
                namespace Controls {
                    namespace Maps {
                        interface IMapElementsLayerStatics;
                    } /* Maps */
                } /* Controls */
            } /* Xaml */
        } /* UI */
    } /* Windows */
} /* ABI */
#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementsLayerStatics ABI::Windows::UI::Xaml::Controls::Maps::IMapElementsLayerStatics

#endif // ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementsLayerStatics_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapIcon_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapIcon_FWD_DEFINED__
namespace ABI {
    namespace Windows {
        namespace UI {
            namespace Xaml {
                namespace Controls {
                    namespace Maps {
                        interface IMapIcon;
                    } /* Maps */
                } /* Controls */
            } /* Xaml */
        } /* UI */
    } /* Windows */
} /* ABI */
#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapIcon ABI::Windows::UI::Xaml::Controls::Maps::IMapIcon

#endif // ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapIcon_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapIcon2_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapIcon2_FWD_DEFINED__
namespace ABI {
    namespace Windows {
        namespace UI {
            namespace Xaml {
                namespace Controls {
                    namespace Maps {
                        interface IMapIcon2;
                    } /* Maps */
                } /* Controls */
            } /* Xaml */
        } /* UI */
    } /* Windows */
} /* ABI */
#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapIcon2 ABI::Windows::UI::Xaml::Controls::Maps::IMapIcon2

#endif // ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapIcon2_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapIconStatics_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapIconStatics_FWD_DEFINED__
namespace ABI {
    namespace Windows {
        namespace UI {
            namespace Xaml {
                namespace Controls {
                    namespace Maps {
                        interface IMapIconStatics;
                    } /* Maps */
                } /* Controls */
            } /* Xaml */
        } /* UI */
    } /* Windows */
} /* ABI */
#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapIconStatics ABI::Windows::UI::Xaml::Controls::Maps::IMapIconStatics

#endif // ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapIconStatics_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapIconStatics2_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapIconStatics2_FWD_DEFINED__
namespace ABI {
    namespace Windows {
        namespace UI {
            namespace Xaml {
                namespace Controls {
                    namespace Maps {
                        interface IMapIconStatics2;
                    } /* Maps */
                } /* Controls */
            } /* Xaml */
        } /* UI */
    } /* Windows */
} /* ABI */
#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapIconStatics2 ABI::Windows::UI::Xaml::Controls::Maps::IMapIconStatics2

#endif // ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapIconStatics2_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapInputEventArgs_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapInputEventArgs_FWD_DEFINED__
namespace ABI {
    namespace Windows {
        namespace UI {
            namespace Xaml {
                namespace Controls {
                    namespace Maps {
                        interface IMapInputEventArgs;
                    } /* Maps */
                } /* Controls */
            } /* Xaml */
        } /* UI */
    } /* Windows */
} /* ABI */
#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapInputEventArgs ABI::Windows::UI::Xaml::Controls::Maps::IMapInputEventArgs

#endif // ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapInputEventArgs_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapItemsControl_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapItemsControl_FWD_DEFINED__
namespace ABI {
    namespace Windows {
        namespace UI {
            namespace Xaml {
                namespace Controls {
                    namespace Maps {
                        interface IMapItemsControl;
                    } /* Maps */
                } /* Controls */
            } /* Xaml */
        } /* UI */
    } /* Windows */
} /* ABI */
#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapItemsControl ABI::Windows::UI::Xaml::Controls::Maps::IMapItemsControl

#endif // ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapItemsControl_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapItemsControlStatics_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapItemsControlStatics_FWD_DEFINED__
namespace ABI {
    namespace Windows {
        namespace UI {
            namespace Xaml {
                namespace Controls {
                    namespace Maps {
                        interface IMapItemsControlStatics;
                    } /* Maps */
                } /* Controls */
            } /* Xaml */
        } /* UI */
    } /* Windows */
} /* ABI */
#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapItemsControlStatics ABI::Windows::UI::Xaml::Controls::Maps::IMapItemsControlStatics

#endif // ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapItemsControlStatics_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapLayer_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapLayer_FWD_DEFINED__
namespace ABI {
    namespace Windows {
        namespace UI {
            namespace Xaml {
                namespace Controls {
                    namespace Maps {
                        interface IMapLayer;
                    } /* Maps */
                } /* Controls */
            } /* Xaml */
        } /* UI */
    } /* Windows */
} /* ABI */
#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapLayer ABI::Windows::UI::Xaml::Controls::Maps::IMapLayer

#endif // ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapLayer_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapLayerFactory_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapLayerFactory_FWD_DEFINED__
namespace ABI {
    namespace Windows {
        namespace UI {
            namespace Xaml {
                namespace Controls {
                    namespace Maps {
                        interface IMapLayerFactory;
                    } /* Maps */
                } /* Controls */
            } /* Xaml */
        } /* UI */
    } /* Windows */
} /* ABI */
#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapLayerFactory ABI::Windows::UI::Xaml::Controls::Maps::IMapLayerFactory

#endif // ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapLayerFactory_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapLayerStatics_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapLayerStatics_FWD_DEFINED__
namespace ABI {
    namespace Windows {
        namespace UI {
            namespace Xaml {
                namespace Controls {
                    namespace Maps {
                        interface IMapLayerStatics;
                    } /* Maps */
                } /* Controls */
            } /* Xaml */
        } /* UI */
    } /* Windows */
} /* ABI */
#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapLayerStatics ABI::Windows::UI::Xaml::Controls::Maps::IMapLayerStatics

#endif // ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapLayerStatics_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapModel3D_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapModel3D_FWD_DEFINED__
namespace ABI {
    namespace Windows {
        namespace UI {
            namespace Xaml {
                namespace Controls {
                    namespace Maps {
                        interface IMapModel3D;
                    } /* Maps */
                } /* Controls */
            } /* Xaml */
        } /* UI */
    } /* Windows */
} /* ABI */
#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapModel3D ABI::Windows::UI::Xaml::Controls::Maps::IMapModel3D

#endif // ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapModel3D_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapModel3DFactory_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapModel3DFactory_FWD_DEFINED__
namespace ABI {
    namespace Windows {
        namespace UI {
            namespace Xaml {
                namespace Controls {
                    namespace Maps {
                        interface IMapModel3DFactory;
                    } /* Maps */
                } /* Controls */
            } /* Xaml */
        } /* UI */
    } /* Windows */
} /* ABI */
#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapModel3DFactory ABI::Windows::UI::Xaml::Controls::Maps::IMapModel3DFactory

#endif // ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapModel3DFactory_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapModel3DStatics_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapModel3DStatics_FWD_DEFINED__
namespace ABI {
    namespace Windows {
        namespace UI {
            namespace Xaml {
                namespace Controls {
                    namespace Maps {
                        interface IMapModel3DStatics;
                    } /* Maps */
                } /* Controls */
            } /* Xaml */
        } /* UI */
    } /* Windows */
} /* ABI */
#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapModel3DStatics ABI::Windows::UI::Xaml::Controls::Maps::IMapModel3DStatics

#endif // ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapModel3DStatics_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolygon_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolygon_FWD_DEFINED__
namespace ABI {
    namespace Windows {
        namespace UI {
            namespace Xaml {
                namespace Controls {
                    namespace Maps {
                        interface IMapPolygon;
                    } /* Maps */
                } /* Controls */
            } /* Xaml */
        } /* UI */
    } /* Windows */
} /* ABI */
#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolygon ABI::Windows::UI::Xaml::Controls::Maps::IMapPolygon

#endif // ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolygon_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolygon2_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolygon2_FWD_DEFINED__
namespace ABI {
    namespace Windows {
        namespace UI {
            namespace Xaml {
                namespace Controls {
                    namespace Maps {
                        interface IMapPolygon2;
                    } /* Maps */
                } /* Controls */
            } /* Xaml */
        } /* UI */
    } /* Windows */
} /* ABI */
#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolygon2 ABI::Windows::UI::Xaml::Controls::Maps::IMapPolygon2

#endif // ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolygon2_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolygonStatics_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolygonStatics_FWD_DEFINED__
namespace ABI {
    namespace Windows {
        namespace UI {
            namespace Xaml {
                namespace Controls {
                    namespace Maps {
                        interface IMapPolygonStatics;
                    } /* Maps */
                } /* Controls */
            } /* Xaml */
        } /* UI */
    } /* Windows */
} /* ABI */
#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolygonStatics ABI::Windows::UI::Xaml::Controls::Maps::IMapPolygonStatics

#endif // ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolygonStatics_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolyline_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolyline_FWD_DEFINED__
namespace ABI {
    namespace Windows {
        namespace UI {
            namespace Xaml {
                namespace Controls {
                    namespace Maps {
                        interface IMapPolyline;
                    } /* Maps */
                } /* Controls */
            } /* Xaml */
        } /* UI */
    } /* Windows */
} /* ABI */
#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolyline ABI::Windows::UI::Xaml::Controls::Maps::IMapPolyline

#endif // ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolyline_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolylineStatics_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolylineStatics_FWD_DEFINED__
namespace ABI {
    namespace Windows {
        namespace UI {
            namespace Xaml {
                namespace Controls {
                    namespace Maps {
                        interface IMapPolylineStatics;
                    } /* Maps */
                } /* Controls */
            } /* Xaml */
        } /* UI */
    } /* Windows */
} /* ABI */
#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolylineStatics ABI::Windows::UI::Xaml::Controls::Maps::IMapPolylineStatics

#endif // ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolylineStatics_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapRightTappedEventArgs_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapRightTappedEventArgs_FWD_DEFINED__
namespace ABI {
    namespace Windows {
        namespace UI {
            namespace Xaml {
                namespace Controls {
                    namespace Maps {
                        interface IMapRightTappedEventArgs;
                    } /* Maps */
                } /* Controls */
            } /* Xaml */
        } /* UI */
    } /* Windows */
} /* ABI */
#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapRightTappedEventArgs ABI::Windows::UI::Xaml::Controls::Maps::IMapRightTappedEventArgs

#endif // ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapRightTappedEventArgs_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapRouteView_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapRouteView_FWD_DEFINED__
namespace ABI {
    namespace Windows {
        namespace UI {
            namespace Xaml {
                namespace Controls {
                    namespace Maps {
                        interface IMapRouteView;
                    } /* Maps */
                } /* Controls */
            } /* Xaml */
        } /* UI */
    } /* Windows */
} /* ABI */
#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapRouteView ABI::Windows::UI::Xaml::Controls::Maps::IMapRouteView

#endif // ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapRouteView_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapRouteViewFactory_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapRouteViewFactory_FWD_DEFINED__
namespace ABI {
    namespace Windows {
        namespace UI {
            namespace Xaml {
                namespace Controls {
                    namespace Maps {
                        interface IMapRouteViewFactory;
                    } /* Maps */
                } /* Controls */
            } /* Xaml */
        } /* UI */
    } /* Windows */
} /* ABI */
#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapRouteViewFactory ABI::Windows::UI::Xaml::Controls::Maps::IMapRouteViewFactory

#endif // ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapRouteViewFactory_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapScene_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapScene_FWD_DEFINED__
namespace ABI {
    namespace Windows {
        namespace UI {
            namespace Xaml {
                namespace Controls {
                    namespace Maps {
                        interface IMapScene;
                    } /* Maps */
                } /* Controls */
            } /* Xaml */
        } /* UI */
    } /* Windows */
} /* ABI */
#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapScene ABI::Windows::UI::Xaml::Controls::Maps::IMapScene

#endif // ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapScene_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapSceneStatics_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapSceneStatics_FWD_DEFINED__
namespace ABI {
    namespace Windows {
        namespace UI {
            namespace Xaml {
                namespace Controls {
                    namespace Maps {
                        interface IMapSceneStatics;
                    } /* Maps */
                } /* Controls */
            } /* Xaml */
        } /* UI */
    } /* Windows */
} /* ABI */
#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapSceneStatics ABI::Windows::UI::Xaml::Controls::Maps::IMapSceneStatics

#endif // ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapSceneStatics_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapStyleSheet_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapStyleSheet_FWD_DEFINED__
namespace ABI {
    namespace Windows {
        namespace UI {
            namespace Xaml {
                namespace Controls {
                    namespace Maps {
                        interface IMapStyleSheet;
                    } /* Maps */
                } /* Controls */
            } /* Xaml */
        } /* UI */
    } /* Windows */
} /* ABI */
#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapStyleSheet ABI::Windows::UI::Xaml::Controls::Maps::IMapStyleSheet

#endif // ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapStyleSheet_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapStyleSheetEntriesStatics_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapStyleSheetEntriesStatics_FWD_DEFINED__
namespace ABI {
    namespace Windows {
        namespace UI {
            namespace Xaml {
                namespace Controls {
                    namespace Maps {
                        interface IMapStyleSheetEntriesStatics;
                    } /* Maps */
                } /* Controls */
            } /* Xaml */
        } /* UI */
    } /* Windows */
} /* ABI */
#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapStyleSheetEntriesStatics ABI::Windows::UI::Xaml::Controls::Maps::IMapStyleSheetEntriesStatics

#endif // ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapStyleSheetEntriesStatics_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapStyleSheetEntryStatesStatics_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapStyleSheetEntryStatesStatics_FWD_DEFINED__
namespace ABI {
    namespace Windows {
        namespace UI {
            namespace Xaml {
                namespace Controls {
                    namespace Maps {
                        interface IMapStyleSheetEntryStatesStatics;
                    } /* Maps */
                } /* Controls */
            } /* Xaml */
        } /* UI */
    } /* Windows */
} /* ABI */
#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapStyleSheetEntryStatesStatics ABI::Windows::UI::Xaml::Controls::Maps::IMapStyleSheetEntryStatesStatics

#endif // ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapStyleSheetEntryStatesStatics_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapStyleSheetStatics_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapStyleSheetStatics_FWD_DEFINED__
namespace ABI {
    namespace Windows {
        namespace UI {
            namespace Xaml {
                namespace Controls {
                    namespace Maps {
                        interface IMapStyleSheetStatics;
                    } /* Maps */
                } /* Controls */
            } /* Xaml */
        } /* UI */
    } /* Windows */
} /* ABI */
#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapStyleSheetStatics ABI::Windows::UI::Xaml::Controls::Maps::IMapStyleSheetStatics

#endif // ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapStyleSheetStatics_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTargetCameraChangedEventArgs_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTargetCameraChangedEventArgs_FWD_DEFINED__
namespace ABI {
    namespace Windows {
        namespace UI {
            namespace Xaml {
                namespace Controls {
                    namespace Maps {
                        interface IMapTargetCameraChangedEventArgs;
                    } /* Maps */
                } /* Controls */
            } /* Xaml */
        } /* UI */
    } /* Windows */
} /* ABI */
#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTargetCameraChangedEventArgs ABI::Windows::UI::Xaml::Controls::Maps::IMapTargetCameraChangedEventArgs

#endif // ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTargetCameraChangedEventArgs_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTargetCameraChangedEventArgs2_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTargetCameraChangedEventArgs2_FWD_DEFINED__
namespace ABI {
    namespace Windows {
        namespace UI {
            namespace Xaml {
                namespace Controls {
                    namespace Maps {
                        interface IMapTargetCameraChangedEventArgs2;
                    } /* Maps */
                } /* Controls */
            } /* Xaml */
        } /* UI */
    } /* Windows */
} /* ABI */
#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTargetCameraChangedEventArgs2 ABI::Windows::UI::Xaml::Controls::Maps::IMapTargetCameraChangedEventArgs2

#endif // ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTargetCameraChangedEventArgs2_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileBitmapRequest_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileBitmapRequest_FWD_DEFINED__
namespace ABI {
    namespace Windows {
        namespace UI {
            namespace Xaml {
                namespace Controls {
                    namespace Maps {
                        interface IMapTileBitmapRequest;
                    } /* Maps */
                } /* Controls */
            } /* Xaml */
        } /* UI */
    } /* Windows */
} /* ABI */
#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileBitmapRequest ABI::Windows::UI::Xaml::Controls::Maps::IMapTileBitmapRequest

#endif // ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileBitmapRequest_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileBitmapRequestDeferral_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileBitmapRequestDeferral_FWD_DEFINED__
namespace ABI {
    namespace Windows {
        namespace UI {
            namespace Xaml {
                namespace Controls {
                    namespace Maps {
                        interface IMapTileBitmapRequestDeferral;
                    } /* Maps */
                } /* Controls */
            } /* Xaml */
        } /* UI */
    } /* Windows */
} /* ABI */
#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileBitmapRequestDeferral ABI::Windows::UI::Xaml::Controls::Maps::IMapTileBitmapRequestDeferral

#endif // ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileBitmapRequestDeferral_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileBitmapRequestedEventArgs_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileBitmapRequestedEventArgs_FWD_DEFINED__
namespace ABI {
    namespace Windows {
        namespace UI {
            namespace Xaml {
                namespace Controls {
                    namespace Maps {
                        interface IMapTileBitmapRequestedEventArgs;
                    } /* Maps */
                } /* Controls */
            } /* Xaml */
        } /* UI */
    } /* Windows */
} /* ABI */
#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileBitmapRequestedEventArgs ABI::Windows::UI::Xaml::Controls::Maps::IMapTileBitmapRequestedEventArgs

#endif // ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileBitmapRequestedEventArgs_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileBitmapRequestedEventArgs2_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileBitmapRequestedEventArgs2_FWD_DEFINED__
namespace ABI {
    namespace Windows {
        namespace UI {
            namespace Xaml {
                namespace Controls {
                    namespace Maps {
                        interface IMapTileBitmapRequestedEventArgs2;
                    } /* Maps */
                } /* Controls */
            } /* Xaml */
        } /* UI */
    } /* Windows */
} /* ABI */
#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileBitmapRequestedEventArgs2 ABI::Windows::UI::Xaml::Controls::Maps::IMapTileBitmapRequestedEventArgs2

#endif // ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileBitmapRequestedEventArgs2_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileDataSource_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileDataSource_FWD_DEFINED__
namespace ABI {
    namespace Windows {
        namespace UI {
            namespace Xaml {
                namespace Controls {
                    namespace Maps {
                        interface IMapTileDataSource;
                    } /* Maps */
                } /* Controls */
            } /* Xaml */
        } /* UI */
    } /* Windows */
} /* ABI */
#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileDataSource ABI::Windows::UI::Xaml::Controls::Maps::IMapTileDataSource

#endif // ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileDataSource_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileDataSourceFactory_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileDataSourceFactory_FWD_DEFINED__
namespace ABI {
    namespace Windows {
        namespace UI {
            namespace Xaml {
                namespace Controls {
                    namespace Maps {
                        interface IMapTileDataSourceFactory;
                    } /* Maps */
                } /* Controls */
            } /* Xaml */
        } /* UI */
    } /* Windows */
} /* ABI */
#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileDataSourceFactory ABI::Windows::UI::Xaml::Controls::Maps::IMapTileDataSourceFactory

#endif // ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileDataSourceFactory_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSource_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSource_FWD_DEFINED__
namespace ABI {
    namespace Windows {
        namespace UI {
            namespace Xaml {
                namespace Controls {
                    namespace Maps {
                        interface IMapTileSource;
                    } /* Maps */
                } /* Controls */
            } /* Xaml */
        } /* UI */
    } /* Windows */
} /* ABI */
#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSource ABI::Windows::UI::Xaml::Controls::Maps::IMapTileSource

#endif // ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSource_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSource2_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSource2_FWD_DEFINED__
namespace ABI {
    namespace Windows {
        namespace UI {
            namespace Xaml {
                namespace Controls {
                    namespace Maps {
                        interface IMapTileSource2;
                    } /* Maps */
                } /* Controls */
            } /* Xaml */
        } /* UI */
    } /* Windows */
} /* ABI */
#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSource2 ABI::Windows::UI::Xaml::Controls::Maps::IMapTileSource2

#endif // ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSource2_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSourceFactory_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSourceFactory_FWD_DEFINED__
namespace ABI {
    namespace Windows {
        namespace UI {
            namespace Xaml {
                namespace Controls {
                    namespace Maps {
                        interface IMapTileSourceFactory;
                    } /* Maps */
                } /* Controls */
            } /* Xaml */
        } /* UI */
    } /* Windows */
} /* ABI */
#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSourceFactory ABI::Windows::UI::Xaml::Controls::Maps::IMapTileSourceFactory

#endif // ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSourceFactory_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSourceStatics_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSourceStatics_FWD_DEFINED__
namespace ABI {
    namespace Windows {
        namespace UI {
            namespace Xaml {
                namespace Controls {
                    namespace Maps {
                        interface IMapTileSourceStatics;
                    } /* Maps */
                } /* Controls */
            } /* Xaml */
        } /* UI */
    } /* Windows */
} /* ABI */
#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSourceStatics ABI::Windows::UI::Xaml::Controls::Maps::IMapTileSourceStatics

#endif // ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSourceStatics_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSourceStatics2_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSourceStatics2_FWD_DEFINED__
namespace ABI {
    namespace Windows {
        namespace UI {
            namespace Xaml {
                namespace Controls {
                    namespace Maps {
                        interface IMapTileSourceStatics2;
                    } /* Maps */
                } /* Controls */
            } /* Xaml */
        } /* UI */
    } /* Windows */
} /* ABI */
#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSourceStatics2 ABI::Windows::UI::Xaml::Controls::Maps::IMapTileSourceStatics2

#endif // ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSourceStatics2_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileUriRequest_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileUriRequest_FWD_DEFINED__
namespace ABI {
    namespace Windows {
        namespace UI {
            namespace Xaml {
                namespace Controls {
                    namespace Maps {
                        interface IMapTileUriRequest;
                    } /* Maps */
                } /* Controls */
            } /* Xaml */
        } /* UI */
    } /* Windows */
} /* ABI */
#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileUriRequest ABI::Windows::UI::Xaml::Controls::Maps::IMapTileUriRequest

#endif // ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileUriRequest_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileUriRequestDeferral_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileUriRequestDeferral_FWD_DEFINED__
namespace ABI {
    namespace Windows {
        namespace UI {
            namespace Xaml {
                namespace Controls {
                    namespace Maps {
                        interface IMapTileUriRequestDeferral;
                    } /* Maps */
                } /* Controls */
            } /* Xaml */
        } /* UI */
    } /* Windows */
} /* ABI */
#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileUriRequestDeferral ABI::Windows::UI::Xaml::Controls::Maps::IMapTileUriRequestDeferral

#endif // ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileUriRequestDeferral_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileUriRequestedEventArgs_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileUriRequestedEventArgs_FWD_DEFINED__
namespace ABI {
    namespace Windows {
        namespace UI {
            namespace Xaml {
                namespace Controls {
                    namespace Maps {
                        interface IMapTileUriRequestedEventArgs;
                    } /* Maps */
                } /* Controls */
            } /* Xaml */
        } /* UI */
    } /* Windows */
} /* ABI */
#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileUriRequestedEventArgs ABI::Windows::UI::Xaml::Controls::Maps::IMapTileUriRequestedEventArgs

#endif // ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileUriRequestedEventArgs_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileUriRequestedEventArgs2_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileUriRequestedEventArgs2_FWD_DEFINED__
namespace ABI {
    namespace Windows {
        namespace UI {
            namespace Xaml {
                namespace Controls {
                    namespace Maps {
                        interface IMapTileUriRequestedEventArgs2;
                    } /* Maps */
                } /* Controls */
            } /* Xaml */
        } /* UI */
    } /* Windows */
} /* ABI */
#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileUriRequestedEventArgs2 ABI::Windows::UI::Xaml::Controls::Maps::IMapTileUriRequestedEventArgs2

#endif // ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileUriRequestedEventArgs2_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIStreetsideExperience_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIStreetsideExperience_FWD_DEFINED__
namespace ABI {
    namespace Windows {
        namespace UI {
            namespace Xaml {
                namespace Controls {
                    namespace Maps {
                        interface IStreetsideExperience;
                    } /* Maps */
                } /* Controls */
            } /* Xaml */
        } /* UI */
    } /* Windows */
} /* ABI */
#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIStreetsideExperience ABI::Windows::UI::Xaml::Controls::Maps::IStreetsideExperience

#endif // ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIStreetsideExperience_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIStreetsideExperienceFactory_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIStreetsideExperienceFactory_FWD_DEFINED__
namespace ABI {
    namespace Windows {
        namespace UI {
            namespace Xaml {
                namespace Controls {
                    namespace Maps {
                        interface IStreetsideExperienceFactory;
                    } /* Maps */
                } /* Controls */
            } /* Xaml */
        } /* UI */
    } /* Windows */
} /* ABI */
#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIStreetsideExperienceFactory ABI::Windows::UI::Xaml::Controls::Maps::IStreetsideExperienceFactory

#endif // ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIStreetsideExperienceFactory_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIStreetsidePanorama_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIStreetsidePanorama_FWD_DEFINED__
namespace ABI {
    namespace Windows {
        namespace UI {
            namespace Xaml {
                namespace Controls {
                    namespace Maps {
                        interface IStreetsidePanorama;
                    } /* Maps */
                } /* Controls */
            } /* Xaml */
        } /* UI */
    } /* Windows */
} /* ABI */
#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIStreetsidePanorama ABI::Windows::UI::Xaml::Controls::Maps::IStreetsidePanorama

#endif // ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIStreetsidePanorama_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIStreetsidePanoramaStatics_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIStreetsidePanoramaStatics_FWD_DEFINED__
namespace ABI {
    namespace Windows {
        namespace UI {
            namespace Xaml {
                namespace Controls {
                    namespace Maps {
                        interface IStreetsidePanoramaStatics;
                    } /* Maps */
                } /* Controls */
            } /* Xaml */
        } /* UI */
    } /* Windows */
} /* ABI */
#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIStreetsidePanoramaStatics ABI::Windows::UI::Xaml::Controls::Maps::IStreetsidePanoramaStatics

#endif // ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIStreetsidePanoramaStatics_FWD_DEFINED__

// Parameterized interface forward declarations (C++)

// Collection interface definitions

#ifndef DEF___FIAsyncOperation_1_boolean_USE
#define DEF___FIAsyncOperation_1_boolean_USE
#if !defined(RO_NO_TEMPLATE_NAME)
namespace ABI { namespace Windows { namespace Foundation {
template <>
struct __declspec(uuid("cdb5efb3-5788-509d-9be1-71ccb8a3362a"))
IAsyncOperation<bool> : IAsyncOperation_impl<ABI::Windows::Foundation::Internal::AggregateType<bool, boolean>>
{
    static const wchar_t* z_get_rc_name_impl()
    {
        return L"Windows.Foundation.IAsyncOperation`1<Boolean>";
    }
};
// Define a typedef for the parameterized interface specialization's mangled name.
// This allows code which uses the mangled name for the parameterized interface to access the
// correct parameterized interface specialization.
typedef IAsyncOperation<bool> __FIAsyncOperation_1_boolean_t;
#define __FIAsyncOperation_1_boolean ABI::Windows::Foundation::__FIAsyncOperation_1_boolean_t
/* Foundation */ } /* Windows */ } /* ABI */ }

#endif // !defined(RO_NO_TEMPLATE_NAME)
#endif /* DEF___FIAsyncOperation_1_boolean_USE */



#ifndef DEF___FIAsyncOperationCompletedHandler_1_boolean_USE
#define DEF___FIAsyncOperationCompletedHandler_1_boolean_USE
#if !defined(RO_NO_TEMPLATE_NAME)
namespace ABI { namespace Windows { namespace Foundation {
template <>
struct __declspec(uuid("c1d3d1a2-ae17-5a5f-b5a2-bdcc8844889a"))
IAsyncOperationCompletedHandler<bool> : IAsyncOperationCompletedHandler_impl<ABI::Windows::Foundation::Internal::AggregateType<bool, boolean>>
{
    static const wchar_t* z_get_rc_name_impl()
    {
        return L"Windows.Foundation.AsyncOperationCompletedHandler`1<Boolean>";
    }
};
// Define a typedef for the parameterized interface specialization's mangled name.
// This allows code which uses the mangled name for the parameterized interface to access the
// correct parameterized interface specialization.
typedef IAsyncOperationCompletedHandler<bool> __FIAsyncOperationCompletedHandler_1_boolean_t;
#define __FIAsyncOperationCompletedHandler_1_boolean ABI::Windows::Foundation::__FIAsyncOperationCompletedHandler_1_boolean_t
/* Foundation */ } /* Windows */ } /* ABI */ }

#endif // !defined(RO_NO_TEMPLATE_NAME)
#endif /* DEF___FIAsyncOperationCompletedHandler_1_boolean_USE */


namespace ABI {
    namespace Windows {
        namespace UI {
            namespace Xaml {
                namespace Controls {
                    namespace Maps {
                        class MapModel3D;
                    } /* Maps */
                } /* Controls */
            } /* Xaml */
        } /* UI */
    } /* Windows */
} /* ABI */

#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x50000

#ifndef DEF___FIAsyncOperation_1_Windows__CUI__CXaml__CControls__CMaps__CMapModel3D_USE
#define DEF___FIAsyncOperation_1_Windows__CUI__CXaml__CControls__CMaps__CMapModel3D_USE
#if !defined(RO_NO_TEMPLATE_NAME)
namespace ABI { namespace Windows { namespace Foundation {
template <>
struct __declspec(uuid("0cf0240f-7f78-535b-850c-fe6231759064"))
IAsyncOperation<ABI::Windows::UI::Xaml::Controls::Maps::MapModel3D*> : IAsyncOperation_impl<ABI::Windows::Foundation::Internal::AggregateType<ABI::Windows::UI::Xaml::Controls::Maps::MapModel3D*, ABI::Windows::UI::Xaml::Controls::Maps::IMapModel3D*>>
{
    static const wchar_t* z_get_rc_name_impl()
    {
        return L"Windows.Foundation.IAsyncOperation`1<Windows.UI.Xaml.Controls.Maps.MapModel3D>";
    }
};
// Define a typedef for the parameterized interface specialization's mangled name.
// This allows code which uses the mangled name for the parameterized interface to access the
// correct parameterized interface specialization.
typedef IAsyncOperation<ABI::Windows::UI::Xaml::Controls::Maps::MapModel3D*> __FIAsyncOperation_1_Windows__CUI__CXaml__CControls__CMaps__CMapModel3D_t;
#define __FIAsyncOperation_1_Windows__CUI__CXaml__CControls__CMaps__CMapModel3D ABI::Windows::Foundation::__FIAsyncOperation_1_Windows__CUI__CXaml__CControls__CMaps__CMapModel3D_t
/* Foundation */ } /* Windows */ } /* ABI */ }

#endif // !defined(RO_NO_TEMPLATE_NAME)
#endif /* DEF___FIAsyncOperation_1_Windows__CUI__CXaml__CControls__CMaps__CMapModel3D_USE */

#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x50000

#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x50000

#ifndef DEF___FIAsyncOperationCompletedHandler_1_Windows__CUI__CXaml__CControls__CMaps__CMapModel3D_USE
#define DEF___FIAsyncOperationCompletedHandler_1_Windows__CUI__CXaml__CControls__CMaps__CMapModel3D_USE
#if !defined(RO_NO_TEMPLATE_NAME)
namespace ABI { namespace Windows { namespace Foundation {
template <>
struct __declspec(uuid("60ef194b-dbe0-5911-b725-ecc5de298782"))
IAsyncOperationCompletedHandler<ABI::Windows::UI::Xaml::Controls::Maps::MapModel3D*> : IAsyncOperationCompletedHandler_impl<ABI::Windows::Foundation::Internal::AggregateType<ABI::Windows::UI::Xaml::Controls::Maps::MapModel3D*, ABI::Windows::UI::Xaml::Controls::Maps::IMapModel3D*>>
{
    static const wchar_t* z_get_rc_name_impl()
    {
        return L"Windows.Foundation.AsyncOperationCompletedHandler`1<Windows.UI.Xaml.Controls.Maps.MapModel3D>";
    }
};
// Define a typedef for the parameterized interface specialization's mangled name.
// This allows code which uses the mangled name for the parameterized interface to access the
// correct parameterized interface specialization.
typedef IAsyncOperationCompletedHandler<ABI::Windows::UI::Xaml::Controls::Maps::MapModel3D*> __FIAsyncOperationCompletedHandler_1_Windows__CUI__CXaml__CControls__CMaps__CMapModel3D_t;
#define __FIAsyncOperationCompletedHandler_1_Windows__CUI__CXaml__CControls__CMaps__CMapModel3D ABI::Windows::Foundation::__FIAsyncOperationCompletedHandler_1_Windows__CUI__CXaml__CControls__CMaps__CMapModel3D_t
/* Foundation */ } /* Windows */ } /* ABI */ }

#endif // !defined(RO_NO_TEMPLATE_NAME)
#endif /* DEF___FIAsyncOperationCompletedHandler_1_Windows__CUI__CXaml__CControls__CMaps__CMapModel3D_USE */

#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x50000

namespace ABI {
    namespace Windows {
        namespace UI {
            namespace Xaml {
                namespace Controls {
                    namespace Maps {
                        class StreetsidePanorama;
                    } /* Maps */
                } /* Controls */
            } /* Xaml */
        } /* UI */
    } /* Windows */
} /* ABI */

#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

#ifndef DEF___FIAsyncOperation_1_Windows__CUI__CXaml__CControls__CMaps__CStreetsidePanorama_USE
#define DEF___FIAsyncOperation_1_Windows__CUI__CXaml__CControls__CMaps__CStreetsidePanorama_USE
#if !defined(RO_NO_TEMPLATE_NAME)
namespace ABI { namespace Windows { namespace Foundation {
template <>
struct __declspec(uuid("6ad8ea47-6670-51d8-a1db-33fe75491f0c"))
IAsyncOperation<ABI::Windows::UI::Xaml::Controls::Maps::StreetsidePanorama*> : IAsyncOperation_impl<ABI::Windows::Foundation::Internal::AggregateType<ABI::Windows::UI::Xaml::Controls::Maps::StreetsidePanorama*, ABI::Windows::UI::Xaml::Controls::Maps::IStreetsidePanorama*>>
{
    static const wchar_t* z_get_rc_name_impl()
    {
        return L"Windows.Foundation.IAsyncOperation`1<Windows.UI.Xaml.Controls.Maps.StreetsidePanorama>";
    }
};
// Define a typedef for the parameterized interface specialization's mangled name.
// This allows code which uses the mangled name for the parameterized interface to access the
// correct parameterized interface specialization.
typedef IAsyncOperation<ABI::Windows::UI::Xaml::Controls::Maps::StreetsidePanorama*> __FIAsyncOperation_1_Windows__CUI__CXaml__CControls__CMaps__CStreetsidePanorama_t;
#define __FIAsyncOperation_1_Windows__CUI__CXaml__CControls__CMaps__CStreetsidePanorama ABI::Windows::Foundation::__FIAsyncOperation_1_Windows__CUI__CXaml__CControls__CMaps__CStreetsidePanorama_t
/* Foundation */ } /* Windows */ } /* ABI */ }

#endif // !defined(RO_NO_TEMPLATE_NAME)
#endif /* DEF___FIAsyncOperation_1_Windows__CUI__CXaml__CControls__CMaps__CStreetsidePanorama_USE */

#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

#ifndef DEF___FIAsyncOperationCompletedHandler_1_Windows__CUI__CXaml__CControls__CMaps__CStreetsidePanorama_USE
#define DEF___FIAsyncOperationCompletedHandler_1_Windows__CUI__CXaml__CControls__CMaps__CStreetsidePanorama_USE
#if !defined(RO_NO_TEMPLATE_NAME)
namespace ABI { namespace Windows { namespace Foundation {
template <>
struct __declspec(uuid("f6f3b17c-4527-5528-86aa-1cf1fb78a5eb"))
IAsyncOperationCompletedHandler<ABI::Windows::UI::Xaml::Controls::Maps::StreetsidePanorama*> : IAsyncOperationCompletedHandler_impl<ABI::Windows::Foundation::Internal::AggregateType<ABI::Windows::UI::Xaml::Controls::Maps::StreetsidePanorama*, ABI::Windows::UI::Xaml::Controls::Maps::IStreetsidePanorama*>>
{
    static const wchar_t* z_get_rc_name_impl()
    {
        return L"Windows.Foundation.AsyncOperationCompletedHandler`1<Windows.UI.Xaml.Controls.Maps.StreetsidePanorama>";
    }
};
// Define a typedef for the parameterized interface specialization's mangled name.
// This allows code which uses the mangled name for the parameterized interface to access the
// correct parameterized interface specialization.
typedef IAsyncOperationCompletedHandler<ABI::Windows::UI::Xaml::Controls::Maps::StreetsidePanorama*> __FIAsyncOperationCompletedHandler_1_Windows__CUI__CXaml__CControls__CMaps__CStreetsidePanorama_t;
#define __FIAsyncOperationCompletedHandler_1_Windows__CUI__CXaml__CControls__CMaps__CStreetsidePanorama ABI::Windows::Foundation::__FIAsyncOperationCompletedHandler_1_Windows__CUI__CXaml__CControls__CMaps__CStreetsidePanorama_t
/* Foundation */ } /* Windows */ } /* ABI */ }

#endif // !defined(RO_NO_TEMPLATE_NAME)
#endif /* DEF___FIAsyncOperationCompletedHandler_1_Windows__CUI__CXaml__CControls__CMaps__CStreetsidePanorama_USE */

#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

namespace ABI {
    namespace Windows {
        namespace Devices {
            namespace Geolocation {
                class Geopath;
            } /* Geolocation */
        } /* Devices */
    } /* Windows */
} /* ABI */

#ifndef ____x_ABI_CWindows_CDevices_CGeolocation_CIGeopath_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CGeolocation_CIGeopath_FWD_DEFINED__
namespace ABI {
    namespace Windows {
        namespace Devices {
            namespace Geolocation {
                interface IGeopath;
            } /* Geolocation */
        } /* Devices */
    } /* Windows */
} /* ABI */
#define __x_ABI_CWindows_CDevices_CGeolocation_CIGeopath ABI::Windows::Devices::Geolocation::IGeopath

#endif // ____x_ABI_CWindows_CDevices_CGeolocation_CIGeopath_FWD_DEFINED__

#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

#ifndef DEF___FIIterator_1_Windows__CDevices__CGeolocation__CGeopath_USE
#define DEF___FIIterator_1_Windows__CDevices__CGeolocation__CGeopath_USE
#if !defined(RO_NO_TEMPLATE_NAME)
namespace ABI { namespace Windows { namespace Foundation { namespace Collections {
template <>
struct __declspec(uuid("cf1d4402-4754-57e7-aae0-69ca42cbd8f2"))
IIterator<ABI::Windows::Devices::Geolocation::Geopath*> : IIterator_impl<ABI::Windows::Foundation::Internal::AggregateType<ABI::Windows::Devices::Geolocation::Geopath*, ABI::Windows::Devices::Geolocation::IGeopath*>>
{
    static const wchar_t* z_get_rc_name_impl()
    {
        return L"Windows.Foundation.Collections.IIterator`1<Windows.Devices.Geolocation.Geopath>";
    }
};
// Define a typedef for the parameterized interface specialization's mangled name.
// This allows code which uses the mangled name for the parameterized interface to access the
// correct parameterized interface specialization.
typedef IIterator<ABI::Windows::Devices::Geolocation::Geopath*> __FIIterator_1_Windows__CDevices__CGeolocation__CGeopath_t;
#define __FIIterator_1_Windows__CDevices__CGeolocation__CGeopath ABI::Windows::Foundation::Collections::__FIIterator_1_Windows__CDevices__CGeolocation__CGeopath_t
/* Collections */ } /* Foundation */ } /* Windows */ } /* ABI */ }

#endif // !defined(RO_NO_TEMPLATE_NAME)
#endif /* DEF___FIIterator_1_Windows__CDevices__CGeolocation__CGeopath_USE */

#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

#ifndef DEF___FIIterable_1_Windows__CDevices__CGeolocation__CGeopath_USE
#define DEF___FIIterable_1_Windows__CDevices__CGeolocation__CGeopath_USE
#if !defined(RO_NO_TEMPLATE_NAME)
namespace ABI { namespace Windows { namespace Foundation { namespace Collections {
template <>
struct __declspec(uuid("246fcfbd-a881-5e8e-9908-c1b9ebdfec78"))
IIterable<ABI::Windows::Devices::Geolocation::Geopath*> : IIterable_impl<ABI::Windows::Foundation::Internal::AggregateType<ABI::Windows::Devices::Geolocation::Geopath*, ABI::Windows::Devices::Geolocation::IGeopath*>>
{
    static const wchar_t* z_get_rc_name_impl()
    {
        return L"Windows.Foundation.Collections.IIterable`1<Windows.Devices.Geolocation.Geopath>";
    }
};
// Define a typedef for the parameterized interface specialization's mangled name.
// This allows code which uses the mangled name for the parameterized interface to access the
// correct parameterized interface specialization.
typedef IIterable<ABI::Windows::Devices::Geolocation::Geopath*> __FIIterable_1_Windows__CDevices__CGeolocation__CGeopath_t;
#define __FIIterable_1_Windows__CDevices__CGeolocation__CGeopath ABI::Windows::Foundation::Collections::__FIIterable_1_Windows__CDevices__CGeolocation__CGeopath_t
/* Collections */ } /* Foundation */ } /* Windows */ } /* ABI */ }

#endif // !defined(RO_NO_TEMPLATE_NAME)
#endif /* DEF___FIIterable_1_Windows__CDevices__CGeolocation__CGeopath_USE */

#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

namespace ABI {
    namespace Windows {
        namespace Devices {
            namespace Geolocation {
                class Geopoint;
            } /* Geolocation */
        } /* Devices */
    } /* Windows */
} /* ABI */

#ifndef ____x_ABI_CWindows_CDevices_CGeolocation_CIGeopoint_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CGeolocation_CIGeopoint_FWD_DEFINED__
namespace ABI {
    namespace Windows {
        namespace Devices {
            namespace Geolocation {
                interface IGeopoint;
            } /* Geolocation */
        } /* Devices */
    } /* Windows */
} /* ABI */
#define __x_ABI_CWindows_CDevices_CGeolocation_CIGeopoint ABI::Windows::Devices::Geolocation::IGeopoint

#endif // ____x_ABI_CWindows_CDevices_CGeolocation_CIGeopoint_FWD_DEFINED__

#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

#ifndef DEF___FIIterator_1_Windows__CDevices__CGeolocation__CGeopoint_USE
#define DEF___FIIterator_1_Windows__CDevices__CGeolocation__CGeopoint_USE
#if !defined(RO_NO_TEMPLATE_NAME)
namespace ABI { namespace Windows { namespace Foundation { namespace Collections {
template <>
struct __declspec(uuid("88225b39-8be9-5c03-9714-8f1642d8a43f"))
IIterator<ABI::Windows::Devices::Geolocation::Geopoint*> : IIterator_impl<ABI::Windows::Foundation::Internal::AggregateType<ABI::Windows::Devices::Geolocation::Geopoint*, ABI::Windows::Devices::Geolocation::IGeopoint*>>
{
    static const wchar_t* z_get_rc_name_impl()
    {
        return L"Windows.Foundation.Collections.IIterator`1<Windows.Devices.Geolocation.Geopoint>";
    }
};
// Define a typedef for the parameterized interface specialization's mangled name.
// This allows code which uses the mangled name for the parameterized interface to access the
// correct parameterized interface specialization.
typedef IIterator<ABI::Windows::Devices::Geolocation::Geopoint*> __FIIterator_1_Windows__CDevices__CGeolocation__CGeopoint_t;
#define __FIIterator_1_Windows__CDevices__CGeolocation__CGeopoint ABI::Windows::Foundation::Collections::__FIIterator_1_Windows__CDevices__CGeolocation__CGeopoint_t
/* Collections */ } /* Foundation */ } /* Windows */ } /* ABI */ }

#endif // !defined(RO_NO_TEMPLATE_NAME)
#endif /* DEF___FIIterator_1_Windows__CDevices__CGeolocation__CGeopoint_USE */

#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

#ifndef DEF___FIIterable_1_Windows__CDevices__CGeolocation__CGeopoint_USE
#define DEF___FIIterable_1_Windows__CDevices__CGeolocation__CGeopoint_USE
#if !defined(RO_NO_TEMPLATE_NAME)
namespace ABI { namespace Windows { namespace Foundation { namespace Collections {
template <>
struct __declspec(uuid("e7617fc9-2cc7-5bd1-bc5a-f47260834ed8"))
IIterable<ABI::Windows::Devices::Geolocation::Geopoint*> : IIterable_impl<ABI::Windows::Foundation::Internal::AggregateType<ABI::Windows::Devices::Geolocation::Geopoint*, ABI::Windows::Devices::Geolocation::IGeopoint*>>
{
    static const wchar_t* z_get_rc_name_impl()
    {
        return L"Windows.Foundation.Collections.IIterable`1<Windows.Devices.Geolocation.Geopoint>";
    }
};
// Define a typedef for the parameterized interface specialization's mangled name.
// This allows code which uses the mangled name for the parameterized interface to access the
// correct parameterized interface specialization.
typedef IIterable<ABI::Windows::Devices::Geolocation::Geopoint*> __FIIterable_1_Windows__CDevices__CGeolocation__CGeopoint_t;
#define __FIIterable_1_Windows__CDevices__CGeolocation__CGeopoint ABI::Windows::Foundation::Collections::__FIIterable_1_Windows__CDevices__CGeolocation__CGeopoint_t
/* Collections */ } /* Foundation */ } /* Windows */ } /* ABI */ }

#endif // !defined(RO_NO_TEMPLATE_NAME)
#endif /* DEF___FIIterable_1_Windows__CDevices__CGeolocation__CGeopoint_USE */

#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000


#ifndef DEF___FIKeyValuePair_2_HSTRING_IInspectable_USE
#define DEF___FIKeyValuePair_2_HSTRING_IInspectable_USE
#if !defined(RO_NO_TEMPLATE_NAME)
namespace ABI { namespace Windows { namespace Foundation { namespace Collections {
template <>
struct __declspec(uuid("09335560-6c6b-5a26-9348-97b781132b20"))
IKeyValuePair<HSTRING, IInspectable*> : IKeyValuePair_impl<HSTRING, IInspectable*>
{
    static const wchar_t* z_get_rc_name_impl()
    {
        return L"Windows.Foundation.Collections.IKeyValuePair`2<String, Object>";
    }
};
// Define a typedef for the parameterized interface specialization's mangled name.
// This allows code which uses the mangled name for the parameterized interface to access the
// correct parameterized interface specialization.
typedef IKeyValuePair<HSTRING, IInspectable*> __FIKeyValuePair_2_HSTRING_IInspectable_t;
#define __FIKeyValuePair_2_HSTRING_IInspectable ABI::Windows::Foundation::Collections::__FIKeyValuePair_2_HSTRING_IInspectable_t
/* Collections */ } /* Foundation */ } /* Windows */ } /* ABI */ }

#endif // !defined(RO_NO_TEMPLATE_NAME)
#endif /* DEF___FIKeyValuePair_2_HSTRING_IInspectable_USE */



#ifndef DEF___FIIterator_1___FIKeyValuePair_2_HSTRING_IInspectable_USE
#define DEF___FIIterator_1___FIKeyValuePair_2_HSTRING_IInspectable_USE
#if !defined(RO_NO_TEMPLATE_NAME)
namespace ABI { namespace Windows { namespace Foundation { namespace Collections {
template <>
struct __declspec(uuid("5db5fa32-707c-5849-a06b-91c8eb9d10e8"))
IIterator<__FIKeyValuePair_2_HSTRING_IInspectable*> : IIterator_impl<__FIKeyValuePair_2_HSTRING_IInspectable*>
{
    static const wchar_t* z_get_rc_name_impl()
    {
        return L"Windows.Foundation.Collections.IIterator`1<Windows.Foundation.Collections.IKeyValuePair`2<String, Object>>";
    }
};
// Define a typedef for the parameterized interface specialization's mangled name.
// This allows code which uses the mangled name for the parameterized interface to access the
// correct parameterized interface specialization.
typedef IIterator<__FIKeyValuePair_2_HSTRING_IInspectable*> __FIIterator_1___FIKeyValuePair_2_HSTRING_IInspectable_t;
#define __FIIterator_1___FIKeyValuePair_2_HSTRING_IInspectable ABI::Windows::Foundation::Collections::__FIIterator_1___FIKeyValuePair_2_HSTRING_IInspectable_t
/* Collections */ } /* Foundation */ } /* Windows */ } /* ABI */ }

#endif // !defined(RO_NO_TEMPLATE_NAME)
#endif /* DEF___FIIterator_1___FIKeyValuePair_2_HSTRING_IInspectable_USE */



#ifndef DEF___FIIterable_1___FIKeyValuePair_2_HSTRING_IInspectable_USE
#define DEF___FIIterable_1___FIKeyValuePair_2_HSTRING_IInspectable_USE
#if !defined(RO_NO_TEMPLATE_NAME)
namespace ABI { namespace Windows { namespace Foundation { namespace Collections {
template <>
struct __declspec(uuid("fe2f3d47-5d47-5499-8374-430c7cda0204"))
IIterable<__FIKeyValuePair_2_HSTRING_IInspectable*> : IIterable_impl<__FIKeyValuePair_2_HSTRING_IInspectable*>
{
    static const wchar_t* z_get_rc_name_impl()
    {
        return L"Windows.Foundation.Collections.IIterable`1<Windows.Foundation.Collections.IKeyValuePair`2<String, Object>>";
    }
};
// Define a typedef for the parameterized interface specialization's mangled name.
// This allows code which uses the mangled name for the parameterized interface to access the
// correct parameterized interface specialization.
typedef IIterable<__FIKeyValuePair_2_HSTRING_IInspectable*> __FIIterable_1___FIKeyValuePair_2_HSTRING_IInspectable_t;
#define __FIIterable_1___FIKeyValuePair_2_HSTRING_IInspectable ABI::Windows::Foundation::Collections::__FIIterable_1___FIKeyValuePair_2_HSTRING_IInspectable_t
/* Collections */ } /* Foundation */ } /* Windows */ } /* ABI */ }

#endif // !defined(RO_NO_TEMPLATE_NAME)
#endif /* DEF___FIIterable_1___FIKeyValuePair_2_HSTRING_IInspectable_USE */



#ifndef DEF___FIKeyValuePair_2_HSTRING_HSTRING_USE
#define DEF___FIKeyValuePair_2_HSTRING_HSTRING_USE
#if !defined(RO_NO_TEMPLATE_NAME)
namespace ABI { namespace Windows { namespace Foundation { namespace Collections {
template <>
struct __declspec(uuid("60310303-49c5-52e6-abc6-a9b36eccc716"))
IKeyValuePair<HSTRING, HSTRING> : IKeyValuePair_impl<HSTRING, HSTRING>
{
    static const wchar_t* z_get_rc_name_impl()
    {
        return L"Windows.Foundation.Collections.IKeyValuePair`2<String, String>";
    }
};
// Define a typedef for the parameterized interface specialization's mangled name.
// This allows code which uses the mangled name for the parameterized interface to access the
// correct parameterized interface specialization.
typedef IKeyValuePair<HSTRING, HSTRING> __FIKeyValuePair_2_HSTRING_HSTRING_t;
#define __FIKeyValuePair_2_HSTRING_HSTRING ABI::Windows::Foundation::Collections::__FIKeyValuePair_2_HSTRING_HSTRING_t
/* Collections */ } /* Foundation */ } /* Windows */ } /* ABI */ }

#endif // !defined(RO_NO_TEMPLATE_NAME)
#endif /* DEF___FIKeyValuePair_2_HSTRING_HSTRING_USE */



#ifndef DEF___FIIterator_1___FIKeyValuePair_2_HSTRING_HSTRING_USE
#define DEF___FIIterator_1___FIKeyValuePair_2_HSTRING_HSTRING_USE
#if !defined(RO_NO_TEMPLATE_NAME)
namespace ABI { namespace Windows { namespace Foundation { namespace Collections {
template <>
struct __declspec(uuid("05eb86f1-7140-5517-b88d-cbaebe57e6b1"))
IIterator<__FIKeyValuePair_2_HSTRING_HSTRING*> : IIterator_impl<__FIKeyValuePair_2_HSTRING_HSTRING*>
{
    static const wchar_t* z_get_rc_name_impl()
    {
        return L"Windows.Foundation.Collections.IIterator`1<Windows.Foundation.Collections.IKeyValuePair`2<String, String>>";
    }
};
// Define a typedef for the parameterized interface specialization's mangled name.
// This allows code which uses the mangled name for the parameterized interface to access the
// correct parameterized interface specialization.
typedef IIterator<__FIKeyValuePair_2_HSTRING_HSTRING*> __FIIterator_1___FIKeyValuePair_2_HSTRING_HSTRING_t;
#define __FIIterator_1___FIKeyValuePair_2_HSTRING_HSTRING ABI::Windows::Foundation::Collections::__FIIterator_1___FIKeyValuePair_2_HSTRING_HSTRING_t
/* Collections */ } /* Foundation */ } /* Windows */ } /* ABI */ }

#endif // !defined(RO_NO_TEMPLATE_NAME)
#endif /* DEF___FIIterator_1___FIKeyValuePair_2_HSTRING_HSTRING_USE */



#ifndef DEF___FIIterable_1___FIKeyValuePair_2_HSTRING_HSTRING_USE
#define DEF___FIIterable_1___FIKeyValuePair_2_HSTRING_HSTRING_USE
#if !defined(RO_NO_TEMPLATE_NAME)
namespace ABI { namespace Windows { namespace Foundation { namespace Collections {
template <>
struct __declspec(uuid("e9bdaaf0-cbf6-5c72-be90-29cbf3a1319b"))
IIterable<__FIKeyValuePair_2_HSTRING_HSTRING*> : IIterable_impl<__FIKeyValuePair_2_HSTRING_HSTRING*>
{
    static const wchar_t* z_get_rc_name_impl()
    {
        return L"Windows.Foundation.Collections.IIterable`1<Windows.Foundation.Collections.IKeyValuePair`2<String, String>>";
    }
};
// Define a typedef for the parameterized interface specialization's mangled name.
// This allows code which uses the mangled name for the parameterized interface to access the
// correct parameterized interface specialization.
typedef IIterable<__FIKeyValuePair_2_HSTRING_HSTRING*> __FIIterable_1___FIKeyValuePair_2_HSTRING_HSTRING_t;
#define __FIIterable_1___FIKeyValuePair_2_HSTRING_HSTRING ABI::Windows::Foundation::Collections::__FIIterable_1___FIKeyValuePair_2_HSTRING_HSTRING_t
/* Collections */ } /* Foundation */ } /* Windows */ } /* ABI */ }

#endif // !defined(RO_NO_TEMPLATE_NAME)
#endif /* DEF___FIIterable_1___FIKeyValuePair_2_HSTRING_HSTRING_USE */


namespace ABI {
    namespace Windows {
        namespace Services {
            namespace Maps {
                namespace LocalSearch {
                    class LocalLocation;
                } /* LocalSearch */
            } /* Maps */
        } /* Services */
    } /* Windows */
} /* ABI */

#ifndef ____x_ABI_CWindows_CServices_CMaps_CLocalSearch_CILocalLocation_FWD_DEFINED__
#define ____x_ABI_CWindows_CServices_CMaps_CLocalSearch_CILocalLocation_FWD_DEFINED__
namespace ABI {
    namespace Windows {
        namespace Services {
            namespace Maps {
                namespace LocalSearch {
                    interface ILocalLocation;
                } /* LocalSearch */
            } /* Maps */
        } /* Services */
    } /* Windows */
} /* ABI */
#define __x_ABI_CWindows_CServices_CMaps_CLocalSearch_CILocalLocation ABI::Windows::Services::Maps::LocalSearch::ILocalLocation

#endif // ____x_ABI_CWindows_CServices_CMaps_CLocalSearch_CILocalLocation_FWD_DEFINED__

#if WINDOWS_SERVICES_MAPS_LOCALSEARCHCONTRACT_VERSION >= 0x10000

#ifndef DEF___FIIterator_1_Windows__CServices__CMaps__CLocalSearch__CLocalLocation_USE
#define DEF___FIIterator_1_Windows__CServices__CMaps__CLocalSearch__CLocalLocation_USE
#if !defined(RO_NO_TEMPLATE_NAME)
namespace ABI { namespace Windows { namespace Foundation { namespace Collections {
template <>
struct __declspec(uuid("a23c2e87-a8e7-568f-96a1-69e98f86b9d3"))
IIterator<ABI::Windows::Services::Maps::LocalSearch::LocalLocation*> : IIterator_impl<ABI::Windows::Foundation::Internal::AggregateType<ABI::Windows::Services::Maps::LocalSearch::LocalLocation*, ABI::Windows::Services::Maps::LocalSearch::ILocalLocation*>>
{
    static const wchar_t* z_get_rc_name_impl()
    {
        return L"Windows.Foundation.Collections.IIterator`1<Windows.Services.Maps.LocalSearch.LocalLocation>";
    }
};
// Define a typedef for the parameterized interface specialization's mangled name.
// This allows code which uses the mangled name for the parameterized interface to access the
// correct parameterized interface specialization.
typedef IIterator<ABI::Windows::Services::Maps::LocalSearch::LocalLocation*> __FIIterator_1_Windows__CServices__CMaps__CLocalSearch__CLocalLocation_t;
#define __FIIterator_1_Windows__CServices__CMaps__CLocalSearch__CLocalLocation ABI::Windows::Foundation::Collections::__FIIterator_1_Windows__CServices__CMaps__CLocalSearch__CLocalLocation_t
/* Collections */ } /* Foundation */ } /* Windows */ } /* ABI */ }

#endif // !defined(RO_NO_TEMPLATE_NAME)
#endif /* DEF___FIIterator_1_Windows__CServices__CMaps__CLocalSearch__CLocalLocation_USE */

#endif // WINDOWS_SERVICES_MAPS_LOCALSEARCHCONTRACT_VERSION >= 0x10000

#if WINDOWS_SERVICES_MAPS_LOCALSEARCHCONTRACT_VERSION >= 0x10000

#ifndef DEF___FIIterable_1_Windows__CServices__CMaps__CLocalSearch__CLocalLocation_USE
#define DEF___FIIterable_1_Windows__CServices__CMaps__CLocalSearch__CLocalLocation_USE
#if !defined(RO_NO_TEMPLATE_NAME)
namespace ABI { namespace Windows { namespace Foundation { namespace Collections {
template <>
struct __declspec(uuid("5474eefb-60f4-58ac-89e2-6e83f79fa76c"))
IIterable<ABI::Windows::Services::Maps::LocalSearch::LocalLocation*> : IIterable_impl<ABI::Windows::Foundation::Internal::AggregateType<ABI::Windows::Services::Maps::LocalSearch::LocalLocation*, ABI::Windows::Services::Maps::LocalSearch::ILocalLocation*>>
{
    static const wchar_t* z_get_rc_name_impl()
    {
        return L"Windows.Foundation.Collections.IIterable`1<Windows.Services.Maps.LocalSearch.LocalLocation>";
    }
};
// Define a typedef for the parameterized interface specialization's mangled name.
// This allows code which uses the mangled name for the parameterized interface to access the
// correct parameterized interface specialization.
typedef IIterable<ABI::Windows::Services::Maps::LocalSearch::LocalLocation*> __FIIterable_1_Windows__CServices__CMaps__CLocalSearch__CLocalLocation_t;
#define __FIIterable_1_Windows__CServices__CMaps__CLocalSearch__CLocalLocation ABI::Windows::Foundation::Collections::__FIIterable_1_Windows__CServices__CMaps__CLocalSearch__CLocalLocation_t
/* Collections */ } /* Foundation */ } /* Windows */ } /* ABI */ }

#endif // !defined(RO_NO_TEMPLATE_NAME)
#endif /* DEF___FIIterable_1_Windows__CServices__CMaps__CLocalSearch__CLocalLocation_USE */

#endif // WINDOWS_SERVICES_MAPS_LOCALSEARCHCONTRACT_VERSION >= 0x10000

namespace ABI {
    namespace Windows {
        namespace UI {
            namespace Xaml {
                namespace Controls {
                    namespace Maps {
                        class MapElement;
                    } /* Maps */
                } /* Controls */
            } /* Xaml */
        } /* UI */
    } /* Windows */
} /* ABI */

#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

#ifndef DEF___FIIterator_1_Windows__CUI__CXaml__CControls__CMaps__CMapElement_USE
#define DEF___FIIterator_1_Windows__CUI__CXaml__CControls__CMaps__CMapElement_USE
#if !defined(RO_NO_TEMPLATE_NAME)
namespace ABI { namespace Windows { namespace Foundation { namespace Collections {
template <>
struct __declspec(uuid("f916b428-3b74-5ad4-9d97-1b0a387aecb5"))
IIterator<ABI::Windows::UI::Xaml::Controls::Maps::MapElement*> : IIterator_impl<ABI::Windows::Foundation::Internal::AggregateType<ABI::Windows::UI::Xaml::Controls::Maps::MapElement*, ABI::Windows::UI::Xaml::Controls::Maps::IMapElement*>>
{
    static const wchar_t* z_get_rc_name_impl()
    {
        return L"Windows.Foundation.Collections.IIterator`1<Windows.UI.Xaml.Controls.Maps.MapElement>";
    }
};
// Define a typedef for the parameterized interface specialization's mangled name.
// This allows code which uses the mangled name for the parameterized interface to access the
// correct parameterized interface specialization.
typedef IIterator<ABI::Windows::UI::Xaml::Controls::Maps::MapElement*> __FIIterator_1_Windows__CUI__CXaml__CControls__CMaps__CMapElement_t;
#define __FIIterator_1_Windows__CUI__CXaml__CControls__CMaps__CMapElement ABI::Windows::Foundation::Collections::__FIIterator_1_Windows__CUI__CXaml__CControls__CMaps__CMapElement_t
/* Collections */ } /* Foundation */ } /* Windows */ } /* ABI */ }

#endif // !defined(RO_NO_TEMPLATE_NAME)
#endif /* DEF___FIIterator_1_Windows__CUI__CXaml__CControls__CMaps__CMapElement_USE */

#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

#ifndef DEF___FIIterable_1_Windows__CUI__CXaml__CControls__CMaps__CMapElement_USE
#define DEF___FIIterable_1_Windows__CUI__CXaml__CControls__CMaps__CMapElement_USE
#if !defined(RO_NO_TEMPLATE_NAME)
namespace ABI { namespace Windows { namespace Foundation { namespace Collections {
template <>
struct __declspec(uuid("81d25c25-a4b3-5d0d-92ab-26360c2a7fac"))
IIterable<ABI::Windows::UI::Xaml::Controls::Maps::MapElement*> : IIterable_impl<ABI::Windows::Foundation::Internal::AggregateType<ABI::Windows::UI::Xaml::Controls::Maps::MapElement*, ABI::Windows::UI::Xaml::Controls::Maps::IMapElement*>>
{
    static const wchar_t* z_get_rc_name_impl()
    {
        return L"Windows.Foundation.Collections.IIterable`1<Windows.UI.Xaml.Controls.Maps.MapElement>";
    }
};
// Define a typedef for the parameterized interface specialization's mangled name.
// This allows code which uses the mangled name for the parameterized interface to access the
// correct parameterized interface specialization.
typedef IIterable<ABI::Windows::UI::Xaml::Controls::Maps::MapElement*> __FIIterable_1_Windows__CUI__CXaml__CControls__CMaps__CMapElement_t;
#define __FIIterable_1_Windows__CUI__CXaml__CControls__CMaps__CMapElement ABI::Windows::Foundation::Collections::__FIIterable_1_Windows__CUI__CXaml__CControls__CMaps__CMapElement_t
/* Collections */ } /* Foundation */ } /* Windows */ } /* ABI */ }

#endif // !defined(RO_NO_TEMPLATE_NAME)
#endif /* DEF___FIIterable_1_Windows__CUI__CXaml__CControls__CMaps__CMapElement_USE */

#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

namespace ABI {
    namespace Windows {
        namespace UI {
            namespace Xaml {
                namespace Controls {
                    namespace Maps {
                        class MapLayer;
                    } /* Maps */
                } /* Controls */
            } /* Xaml */
        } /* UI */
    } /* Windows */
} /* ABI */

#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x50000

#ifndef DEF___FIIterator_1_Windows__CUI__CXaml__CControls__CMaps__CMapLayer_USE
#define DEF___FIIterator_1_Windows__CUI__CXaml__CControls__CMaps__CMapLayer_USE
#if !defined(RO_NO_TEMPLATE_NAME)
namespace ABI { namespace Windows { namespace Foundation { namespace Collections {
template <>
struct __declspec(uuid("af2283ff-250e-56d1-96d4-9f78e164cbc6"))
IIterator<ABI::Windows::UI::Xaml::Controls::Maps::MapLayer*> : IIterator_impl<ABI::Windows::Foundation::Internal::AggregateType<ABI::Windows::UI::Xaml::Controls::Maps::MapLayer*, ABI::Windows::UI::Xaml::Controls::Maps::IMapLayer*>>
{
    static const wchar_t* z_get_rc_name_impl()
    {
        return L"Windows.Foundation.Collections.IIterator`1<Windows.UI.Xaml.Controls.Maps.MapLayer>";
    }
};
// Define a typedef for the parameterized interface specialization's mangled name.
// This allows code which uses the mangled name for the parameterized interface to access the
// correct parameterized interface specialization.
typedef IIterator<ABI::Windows::UI::Xaml::Controls::Maps::MapLayer*> __FIIterator_1_Windows__CUI__CXaml__CControls__CMaps__CMapLayer_t;
#define __FIIterator_1_Windows__CUI__CXaml__CControls__CMaps__CMapLayer ABI::Windows::Foundation::Collections::__FIIterator_1_Windows__CUI__CXaml__CControls__CMaps__CMapLayer_t
/* Collections */ } /* Foundation */ } /* Windows */ } /* ABI */ }

#endif // !defined(RO_NO_TEMPLATE_NAME)
#endif /* DEF___FIIterator_1_Windows__CUI__CXaml__CControls__CMaps__CMapLayer_USE */

#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x50000

#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x50000

#ifndef DEF___FIIterable_1_Windows__CUI__CXaml__CControls__CMaps__CMapLayer_USE
#define DEF___FIIterable_1_Windows__CUI__CXaml__CControls__CMaps__CMapLayer_USE
#if !defined(RO_NO_TEMPLATE_NAME)
namespace ABI { namespace Windows { namespace Foundation { namespace Collections {
template <>
struct __declspec(uuid("508e2ce9-1984-5fc8-a491-62e8889539f4"))
IIterable<ABI::Windows::UI::Xaml::Controls::Maps::MapLayer*> : IIterable_impl<ABI::Windows::Foundation::Internal::AggregateType<ABI::Windows::UI::Xaml::Controls::Maps::MapLayer*, ABI::Windows::UI::Xaml::Controls::Maps::IMapLayer*>>
{
    static const wchar_t* z_get_rc_name_impl()
    {
        return L"Windows.Foundation.Collections.IIterable`1<Windows.UI.Xaml.Controls.Maps.MapLayer>";
    }
};
// Define a typedef for the parameterized interface specialization's mangled name.
// This allows code which uses the mangled name for the parameterized interface to access the
// correct parameterized interface specialization.
typedef IIterable<ABI::Windows::UI::Xaml::Controls::Maps::MapLayer*> __FIIterable_1_Windows__CUI__CXaml__CControls__CMaps__CMapLayer_t;
#define __FIIterable_1_Windows__CUI__CXaml__CControls__CMaps__CMapLayer ABI::Windows::Foundation::Collections::__FIIterable_1_Windows__CUI__CXaml__CControls__CMaps__CMapLayer_t
/* Collections */ } /* Foundation */ } /* Windows */ } /* ABI */ }

#endif // !defined(RO_NO_TEMPLATE_NAME)
#endif /* DEF___FIIterable_1_Windows__CUI__CXaml__CControls__CMaps__CMapLayer_USE */

#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x50000

namespace ABI {
    namespace Windows {
        namespace UI {
            namespace Xaml {
                namespace Controls {
                    namespace Maps {
                        class MapRouteView;
                    } /* Maps */
                } /* Controls */
            } /* Xaml */
        } /* UI */
    } /* Windows */
} /* ABI */

#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

#ifndef DEF___FIIterator_1_Windows__CUI__CXaml__CControls__CMaps__CMapRouteView_USE
#define DEF___FIIterator_1_Windows__CUI__CXaml__CControls__CMaps__CMapRouteView_USE
#if !defined(RO_NO_TEMPLATE_NAME)
namespace ABI { namespace Windows { namespace Foundation { namespace Collections {
template <>
struct __declspec(uuid("af256095-4144-55a7-9139-89843b572db7"))
IIterator<ABI::Windows::UI::Xaml::Controls::Maps::MapRouteView*> : IIterator_impl<ABI::Windows::Foundation::Internal::AggregateType<ABI::Windows::UI::Xaml::Controls::Maps::MapRouteView*, ABI::Windows::UI::Xaml::Controls::Maps::IMapRouteView*>>
{
    static const wchar_t* z_get_rc_name_impl()
    {
        return L"Windows.Foundation.Collections.IIterator`1<Windows.UI.Xaml.Controls.Maps.MapRouteView>";
    }
};
// Define a typedef for the parameterized interface specialization's mangled name.
// This allows code which uses the mangled name for the parameterized interface to access the
// correct parameterized interface specialization.
typedef IIterator<ABI::Windows::UI::Xaml::Controls::Maps::MapRouteView*> __FIIterator_1_Windows__CUI__CXaml__CControls__CMaps__CMapRouteView_t;
#define __FIIterator_1_Windows__CUI__CXaml__CControls__CMaps__CMapRouteView ABI::Windows::Foundation::Collections::__FIIterator_1_Windows__CUI__CXaml__CControls__CMaps__CMapRouteView_t
/* Collections */ } /* Foundation */ } /* Windows */ } /* ABI */ }

#endif // !defined(RO_NO_TEMPLATE_NAME)
#endif /* DEF___FIIterator_1_Windows__CUI__CXaml__CControls__CMaps__CMapRouteView_USE */

#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

#ifndef DEF___FIIterable_1_Windows__CUI__CXaml__CControls__CMaps__CMapRouteView_USE
#define DEF___FIIterable_1_Windows__CUI__CXaml__CControls__CMaps__CMapRouteView_USE
#if !defined(RO_NO_TEMPLATE_NAME)
namespace ABI { namespace Windows { namespace Foundation { namespace Collections {
template <>
struct __declspec(uuid("090ad4b3-8fce-502d-8665-18650c51bea9"))
IIterable<ABI::Windows::UI::Xaml::Controls::Maps::MapRouteView*> : IIterable_impl<ABI::Windows::Foundation::Internal::AggregateType<ABI::Windows::UI::Xaml::Controls::Maps::MapRouteView*, ABI::Windows::UI::Xaml::Controls::Maps::IMapRouteView*>>
{
    static const wchar_t* z_get_rc_name_impl()
    {
        return L"Windows.Foundation.Collections.IIterable`1<Windows.UI.Xaml.Controls.Maps.MapRouteView>";
    }
};
// Define a typedef for the parameterized interface specialization's mangled name.
// This allows code which uses the mangled name for the parameterized interface to access the
// correct parameterized interface specialization.
typedef IIterable<ABI::Windows::UI::Xaml::Controls::Maps::MapRouteView*> __FIIterable_1_Windows__CUI__CXaml__CControls__CMaps__CMapRouteView_t;
#define __FIIterable_1_Windows__CUI__CXaml__CControls__CMaps__CMapRouteView ABI::Windows::Foundation::Collections::__FIIterable_1_Windows__CUI__CXaml__CControls__CMaps__CMapRouteView_t
/* Collections */ } /* Foundation */ } /* Windows */ } /* ABI */ }

#endif // !defined(RO_NO_TEMPLATE_NAME)
#endif /* DEF___FIIterable_1_Windows__CUI__CXaml__CControls__CMaps__CMapRouteView_USE */

#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

namespace ABI {
    namespace Windows {
        namespace UI {
            namespace Xaml {
                namespace Controls {
                    namespace Maps {
                        class MapStyleSheet;
                    } /* Maps */
                } /* Controls */
            } /* Xaml */
        } /* UI */
    } /* Windows */
} /* ABI */

#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x40000

#ifndef DEF___FIIterator_1_Windows__CUI__CXaml__CControls__CMaps__CMapStyleSheet_USE
#define DEF___FIIterator_1_Windows__CUI__CXaml__CControls__CMaps__CMapStyleSheet_USE
#if !defined(RO_NO_TEMPLATE_NAME)
namespace ABI { namespace Windows { namespace Foundation { namespace Collections {
template <>
struct __declspec(uuid("e6c727e5-6a18-5333-aa6a-266e8c8bdd51"))
IIterator<ABI::Windows::UI::Xaml::Controls::Maps::MapStyleSheet*> : IIterator_impl<ABI::Windows::Foundation::Internal::AggregateType<ABI::Windows::UI::Xaml::Controls::Maps::MapStyleSheet*, ABI::Windows::UI::Xaml::Controls::Maps::IMapStyleSheet*>>
{
    static const wchar_t* z_get_rc_name_impl()
    {
        return L"Windows.Foundation.Collections.IIterator`1<Windows.UI.Xaml.Controls.Maps.MapStyleSheet>";
    }
};
// Define a typedef for the parameterized interface specialization's mangled name.
// This allows code which uses the mangled name for the parameterized interface to access the
// correct parameterized interface specialization.
typedef IIterator<ABI::Windows::UI::Xaml::Controls::Maps::MapStyleSheet*> __FIIterator_1_Windows__CUI__CXaml__CControls__CMaps__CMapStyleSheet_t;
#define __FIIterator_1_Windows__CUI__CXaml__CControls__CMaps__CMapStyleSheet ABI::Windows::Foundation::Collections::__FIIterator_1_Windows__CUI__CXaml__CControls__CMaps__CMapStyleSheet_t
/* Collections */ } /* Foundation */ } /* Windows */ } /* ABI */ }

#endif // !defined(RO_NO_TEMPLATE_NAME)
#endif /* DEF___FIIterator_1_Windows__CUI__CXaml__CControls__CMaps__CMapStyleSheet_USE */

#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x40000

#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x40000

#ifndef DEF___FIIterable_1_Windows__CUI__CXaml__CControls__CMaps__CMapStyleSheet_USE
#define DEF___FIIterable_1_Windows__CUI__CXaml__CControls__CMaps__CMapStyleSheet_USE
#if !defined(RO_NO_TEMPLATE_NAME)
namespace ABI { namespace Windows { namespace Foundation { namespace Collections {
template <>
struct __declspec(uuid("05483d88-841c-5a0e-b9c7-5d828d9f2aff"))
IIterable<ABI::Windows::UI::Xaml::Controls::Maps::MapStyleSheet*> : IIterable_impl<ABI::Windows::Foundation::Internal::AggregateType<ABI::Windows::UI::Xaml::Controls::Maps::MapStyleSheet*, ABI::Windows::UI::Xaml::Controls::Maps::IMapStyleSheet*>>
{
    static const wchar_t* z_get_rc_name_impl()
    {
        return L"Windows.Foundation.Collections.IIterable`1<Windows.UI.Xaml.Controls.Maps.MapStyleSheet>";
    }
};
// Define a typedef for the parameterized interface specialization's mangled name.
// This allows code which uses the mangled name for the parameterized interface to access the
// correct parameterized interface specialization.
typedef IIterable<ABI::Windows::UI::Xaml::Controls::Maps::MapStyleSheet*> __FIIterable_1_Windows__CUI__CXaml__CControls__CMaps__CMapStyleSheet_t;
#define __FIIterable_1_Windows__CUI__CXaml__CControls__CMaps__CMapStyleSheet ABI::Windows::Foundation::Collections::__FIIterable_1_Windows__CUI__CXaml__CControls__CMaps__CMapStyleSheet_t
/* Collections */ } /* Foundation */ } /* Windows */ } /* ABI */ }

#endif // !defined(RO_NO_TEMPLATE_NAME)
#endif /* DEF___FIIterable_1_Windows__CUI__CXaml__CControls__CMaps__CMapStyleSheet_USE */

#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x40000

namespace ABI {
    namespace Windows {
        namespace UI {
            namespace Xaml {
                namespace Controls {
                    namespace Maps {
                        class MapTileSource;
                    } /* Maps */
                } /* Controls */
            } /* Xaml */
        } /* UI */
    } /* Windows */
} /* ABI */

#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

#ifndef DEF___FIIterator_1_Windows__CUI__CXaml__CControls__CMaps__CMapTileSource_USE
#define DEF___FIIterator_1_Windows__CUI__CXaml__CControls__CMaps__CMapTileSource_USE
#if !defined(RO_NO_TEMPLATE_NAME)
namespace ABI { namespace Windows { namespace Foundation { namespace Collections {
template <>
struct __declspec(uuid("e5c7eba6-7c75-50bc-8b36-2d8ca1fa538b"))
IIterator<ABI::Windows::UI::Xaml::Controls::Maps::MapTileSource*> : IIterator_impl<ABI::Windows::Foundation::Internal::AggregateType<ABI::Windows::UI::Xaml::Controls::Maps::MapTileSource*, ABI::Windows::UI::Xaml::Controls::Maps::IMapTileSource*>>
{
    static const wchar_t* z_get_rc_name_impl()
    {
        return L"Windows.Foundation.Collections.IIterator`1<Windows.UI.Xaml.Controls.Maps.MapTileSource>";
    }
};
// Define a typedef for the parameterized interface specialization's mangled name.
// This allows code which uses the mangled name for the parameterized interface to access the
// correct parameterized interface specialization.
typedef IIterator<ABI::Windows::UI::Xaml::Controls::Maps::MapTileSource*> __FIIterator_1_Windows__CUI__CXaml__CControls__CMaps__CMapTileSource_t;
#define __FIIterator_1_Windows__CUI__CXaml__CControls__CMaps__CMapTileSource ABI::Windows::Foundation::Collections::__FIIterator_1_Windows__CUI__CXaml__CControls__CMaps__CMapTileSource_t
/* Collections */ } /* Foundation */ } /* Windows */ } /* ABI */ }

#endif // !defined(RO_NO_TEMPLATE_NAME)
#endif /* DEF___FIIterator_1_Windows__CUI__CXaml__CControls__CMaps__CMapTileSource_USE */

#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

#ifndef DEF___FIIterable_1_Windows__CUI__CXaml__CControls__CMaps__CMapTileSource_USE
#define DEF___FIIterable_1_Windows__CUI__CXaml__CControls__CMaps__CMapTileSource_USE
#if !defined(RO_NO_TEMPLATE_NAME)
namespace ABI { namespace Windows { namespace Foundation { namespace Collections {
template <>
struct __declspec(uuid("6d8a73f7-abd7-56c4-99a7-06c1fa77dcd2"))
IIterable<ABI::Windows::UI::Xaml::Controls::Maps::MapTileSource*> : IIterable_impl<ABI::Windows::Foundation::Internal::AggregateType<ABI::Windows::UI::Xaml::Controls::Maps::MapTileSource*, ABI::Windows::UI::Xaml::Controls::Maps::IMapTileSource*>>
{
    static const wchar_t* z_get_rc_name_impl()
    {
        return L"Windows.Foundation.Collections.IIterable`1<Windows.UI.Xaml.Controls.Maps.MapTileSource>";
    }
};
// Define a typedef for the parameterized interface specialization's mangled name.
// This allows code which uses the mangled name for the parameterized interface to access the
// correct parameterized interface specialization.
typedef IIterable<ABI::Windows::UI::Xaml::Controls::Maps::MapTileSource*> __FIIterable_1_Windows__CUI__CXaml__CControls__CMaps__CMapTileSource_t;
#define __FIIterable_1_Windows__CUI__CXaml__CControls__CMaps__CMapTileSource ABI::Windows::Foundation::Collections::__FIIterable_1_Windows__CUI__CXaml__CControls__CMaps__CMapTileSource_t
/* Collections */ } /* Foundation */ } /* Windows */ } /* ABI */ }

#endif // !defined(RO_NO_TEMPLATE_NAME)
#endif /* DEF___FIIterable_1_Windows__CUI__CXaml__CControls__CMaps__CMapTileSource_USE */

#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

namespace ABI {
    namespace Windows {
        namespace UI {
            namespace Xaml {
                class DependencyObject;
            } /* Xaml */
        } /* UI */
    } /* Windows */
} /* ABI */

#ifndef ____x_ABI_CWindows_CUI_CXaml_CIDependencyObject_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CIDependencyObject_FWD_DEFINED__
namespace ABI {
    namespace Windows {
        namespace UI {
            namespace Xaml {
                interface IDependencyObject;
            } /* Xaml */
        } /* UI */
    } /* Windows */
} /* ABI */
#define __x_ABI_CWindows_CUI_CXaml_CIDependencyObject ABI::Windows::UI::Xaml::IDependencyObject

#endif // ____x_ABI_CWindows_CUI_CXaml_CIDependencyObject_FWD_DEFINED__

#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

#ifndef DEF___FIIterator_1_Windows__CUI__CXaml__CDependencyObject_USE
#define DEF___FIIterator_1_Windows__CUI__CXaml__CDependencyObject_USE
#if !defined(RO_NO_TEMPLATE_NAME)
namespace ABI { namespace Windows { namespace Foundation { namespace Collections {
template <>
struct __declspec(uuid("29f8d454-905d-587e-b9d8-bfd418805a65"))
IIterator<ABI::Windows::UI::Xaml::DependencyObject*> : IIterator_impl<ABI::Windows::Foundation::Internal::AggregateType<ABI::Windows::UI::Xaml::DependencyObject*, ABI::Windows::UI::Xaml::IDependencyObject*>>
{
    static const wchar_t* z_get_rc_name_impl()
    {
        return L"Windows.Foundation.Collections.IIterator`1<Windows.UI.Xaml.DependencyObject>";
    }
};
// Define a typedef for the parameterized interface specialization's mangled name.
// This allows code which uses the mangled name for the parameterized interface to access the
// correct parameterized interface specialization.
typedef IIterator<ABI::Windows::UI::Xaml::DependencyObject*> __FIIterator_1_Windows__CUI__CXaml__CDependencyObject_t;
#define __FIIterator_1_Windows__CUI__CXaml__CDependencyObject ABI::Windows::Foundation::Collections::__FIIterator_1_Windows__CUI__CXaml__CDependencyObject_t
/* Collections */ } /* Foundation */ } /* Windows */ } /* ABI */ }

#endif // !defined(RO_NO_TEMPLATE_NAME)
#endif /* DEF___FIIterator_1_Windows__CUI__CXaml__CDependencyObject_USE */

#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

#ifndef DEF___FIIterable_1_Windows__CUI__CXaml__CDependencyObject_USE
#define DEF___FIIterable_1_Windows__CUI__CXaml__CDependencyObject_USE
#if !defined(RO_NO_TEMPLATE_NAME)
namespace ABI { namespace Windows { namespace Foundation { namespace Collections {
template <>
struct __declspec(uuid("f66c6bd3-55b4-5bbb-b82a-6d9ce383091a"))
IIterable<ABI::Windows::UI::Xaml::DependencyObject*> : IIterable_impl<ABI::Windows::Foundation::Internal::AggregateType<ABI::Windows::UI::Xaml::DependencyObject*, ABI::Windows::UI::Xaml::IDependencyObject*>>
{
    static const wchar_t* z_get_rc_name_impl()
    {
        return L"Windows.Foundation.Collections.IIterable`1<Windows.UI.Xaml.DependencyObject>";
    }
};
// Define a typedef for the parameterized interface specialization's mangled name.
// This allows code which uses the mangled name for the parameterized interface to access the
// correct parameterized interface specialization.
typedef IIterable<ABI::Windows::UI::Xaml::DependencyObject*> __FIIterable_1_Windows__CUI__CXaml__CDependencyObject_t;
#define __FIIterable_1_Windows__CUI__CXaml__CDependencyObject ABI::Windows::Foundation::Collections::__FIIterable_1_Windows__CUI__CXaml__CDependencyObject_t
/* Collections */ } /* Foundation */ } /* Windows */ } /* ABI */ }

#endif // !defined(RO_NO_TEMPLATE_NAME)
#endif /* DEF___FIIterable_1_Windows__CUI__CXaml__CDependencyObject_USE */

#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000


#ifndef DEF___FIMapView_2_HSTRING_IInspectable_USE
#define DEF___FIMapView_2_HSTRING_IInspectable_USE
#if !defined(RO_NO_TEMPLATE_NAME)
namespace ABI { namespace Windows { namespace Foundation { namespace Collections {
template <>
struct __declspec(uuid("bb78502a-f79d-54fa-92c9-90c5039fdf7e"))
IMapView<HSTRING, IInspectable*> : IMapView_impl<HSTRING, IInspectable*>
{
    static const wchar_t* z_get_rc_name_impl()
    {
        return L"Windows.Foundation.Collections.IMapView`2<String, Object>";
    }
};
// Define a typedef for the parameterized interface specialization's mangled name.
// This allows code which uses the mangled name for the parameterized interface to access the
// correct parameterized interface specialization.
typedef IMapView<HSTRING, IInspectable*> __FIMapView_2_HSTRING_IInspectable_t;
#define __FIMapView_2_HSTRING_IInspectable ABI::Windows::Foundation::Collections::__FIMapView_2_HSTRING_IInspectable_t
/* Collections */ } /* Foundation */ } /* Windows */ } /* ABI */ }

#endif // !defined(RO_NO_TEMPLATE_NAME)
#endif /* DEF___FIMapView_2_HSTRING_IInspectable_USE */



#ifndef DEF___FIMapView_2_HSTRING_HSTRING_USE
#define DEF___FIMapView_2_HSTRING_HSTRING_USE
#if !defined(RO_NO_TEMPLATE_NAME)
namespace ABI { namespace Windows { namespace Foundation { namespace Collections {
template <>
struct __declspec(uuid("ac7f26f2-feb7-5b2a-8ac4-345bc62caede"))
IMapView<HSTRING, HSTRING> : IMapView_impl<HSTRING, HSTRING>
{
    static const wchar_t* z_get_rc_name_impl()
    {
        return L"Windows.Foundation.Collections.IMapView`2<String, String>";
    }
};
// Define a typedef for the parameterized interface specialization's mangled name.
// This allows code which uses the mangled name for the parameterized interface to access the
// correct parameterized interface specialization.
typedef IMapView<HSTRING, HSTRING> __FIMapView_2_HSTRING_HSTRING_t;
#define __FIMapView_2_HSTRING_HSTRING ABI::Windows::Foundation::Collections::__FIMapView_2_HSTRING_HSTRING_t
/* Collections */ } /* Foundation */ } /* Windows */ } /* ABI */ }

#endif // !defined(RO_NO_TEMPLATE_NAME)
#endif /* DEF___FIMapView_2_HSTRING_HSTRING_USE */



#ifndef DEF___FIMap_2_HSTRING_HSTRING_USE
#define DEF___FIMap_2_HSTRING_HSTRING_USE
#if !defined(RO_NO_TEMPLATE_NAME)
namespace ABI { namespace Windows { namespace Foundation { namespace Collections {
template <>
struct __declspec(uuid("f6d1f700-49c2-52ae-8154-826f9908773c"))
IMap<HSTRING, HSTRING> : IMap_impl<HSTRING, HSTRING>
{
    static const wchar_t* z_get_rc_name_impl()
    {
        return L"Windows.Foundation.Collections.IMap`2<String, String>";
    }
};
// Define a typedef for the parameterized interface specialization's mangled name.
// This allows code which uses the mangled name for the parameterized interface to access the
// correct parameterized interface specialization.
typedef IMap<HSTRING, HSTRING> __FIMap_2_HSTRING_HSTRING_t;
#define __FIMap_2_HSTRING_HSTRING ABI::Windows::Foundation::Collections::__FIMap_2_HSTRING_HSTRING_t
/* Collections */ } /* Foundation */ } /* Windows */ } /* ABI */ }

#endif // !defined(RO_NO_TEMPLATE_NAME)
#endif /* DEF___FIMap_2_HSTRING_HSTRING_USE */


#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

#ifndef DEF___FIVectorView_1_Windows__CDevices__CGeolocation__CGeopath_USE
#define DEF___FIVectorView_1_Windows__CDevices__CGeolocation__CGeopath_USE
#if !defined(RO_NO_TEMPLATE_NAME)
namespace ABI { namespace Windows { namespace Foundation { namespace Collections {
template <>
struct __declspec(uuid("a83321cb-1b54-5f68-9234-4a824d33e371"))
IVectorView<ABI::Windows::Devices::Geolocation::Geopath*> : IVectorView_impl<ABI::Windows::Foundation::Internal::AggregateType<ABI::Windows::Devices::Geolocation::Geopath*, ABI::Windows::Devices::Geolocation::IGeopath*>>
{
    static const wchar_t* z_get_rc_name_impl()
    {
        return L"Windows.Foundation.Collections.IVectorView`1<Windows.Devices.Geolocation.Geopath>";
    }
};
// Define a typedef for the parameterized interface specialization's mangled name.
// This allows code which uses the mangled name for the parameterized interface to access the
// correct parameterized interface specialization.
typedef IVectorView<ABI::Windows::Devices::Geolocation::Geopath*> __FIVectorView_1_Windows__CDevices__CGeolocation__CGeopath_t;
#define __FIVectorView_1_Windows__CDevices__CGeolocation__CGeopath ABI::Windows::Foundation::Collections::__FIVectorView_1_Windows__CDevices__CGeolocation__CGeopath_t
/* Collections */ } /* Foundation */ } /* Windows */ } /* ABI */ }

#endif // !defined(RO_NO_TEMPLATE_NAME)
#endif /* DEF___FIVectorView_1_Windows__CDevices__CGeolocation__CGeopath_USE */

#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

#if WINDOWS_SERVICES_MAPS_LOCALSEARCHCONTRACT_VERSION >= 0x10000

#ifndef DEF___FIVectorView_1_Windows__CServices__CMaps__CLocalSearch__CLocalLocation_USE
#define DEF___FIVectorView_1_Windows__CServices__CMaps__CLocalSearch__CLocalLocation_USE
#if !defined(RO_NO_TEMPLATE_NAME)
namespace ABI { namespace Windows { namespace Foundation { namespace Collections {
template <>
struct __declspec(uuid("619192f2-4f9d-5629-ab01-b18512503d73"))
IVectorView<ABI::Windows::Services::Maps::LocalSearch::LocalLocation*> : IVectorView_impl<ABI::Windows::Foundation::Internal::AggregateType<ABI::Windows::Services::Maps::LocalSearch::LocalLocation*, ABI::Windows::Services::Maps::LocalSearch::ILocalLocation*>>
{
    static const wchar_t* z_get_rc_name_impl()
    {
        return L"Windows.Foundation.Collections.IVectorView`1<Windows.Services.Maps.LocalSearch.LocalLocation>";
    }
};
// Define a typedef for the parameterized interface specialization's mangled name.
// This allows code which uses the mangled name for the parameterized interface to access the
// correct parameterized interface specialization.
typedef IVectorView<ABI::Windows::Services::Maps::LocalSearch::LocalLocation*> __FIVectorView_1_Windows__CServices__CMaps__CLocalSearch__CLocalLocation_t;
#define __FIVectorView_1_Windows__CServices__CMaps__CLocalSearch__CLocalLocation ABI::Windows::Foundation::Collections::__FIVectorView_1_Windows__CServices__CMaps__CLocalSearch__CLocalLocation_t
/* Collections */ } /* Foundation */ } /* Windows */ } /* ABI */ }

#endif // !defined(RO_NO_TEMPLATE_NAME)
#endif /* DEF___FIVectorView_1_Windows__CServices__CMaps__CLocalSearch__CLocalLocation_USE */

#endif // WINDOWS_SERVICES_MAPS_LOCALSEARCHCONTRACT_VERSION >= 0x10000

#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

#ifndef DEF___FIVectorView_1_Windows__CUI__CXaml__CControls__CMaps__CMapElement_USE
#define DEF___FIVectorView_1_Windows__CUI__CXaml__CControls__CMaps__CMapElement_USE
#if !defined(RO_NO_TEMPLATE_NAME)
namespace ABI { namespace Windows { namespace Foundation { namespace Collections {
template <>
struct __declspec(uuid("cec120d8-ea73-5aa3-914a-37dd2554f686"))
IVectorView<ABI::Windows::UI::Xaml::Controls::Maps::MapElement*> : IVectorView_impl<ABI::Windows::Foundation::Internal::AggregateType<ABI::Windows::UI::Xaml::Controls::Maps::MapElement*, ABI::Windows::UI::Xaml::Controls::Maps::IMapElement*>>
{
    static const wchar_t* z_get_rc_name_impl()
    {
        return L"Windows.Foundation.Collections.IVectorView`1<Windows.UI.Xaml.Controls.Maps.MapElement>";
    }
};
// Define a typedef for the parameterized interface specialization's mangled name.
// This allows code which uses the mangled name for the parameterized interface to access the
// correct parameterized interface specialization.
typedef IVectorView<ABI::Windows::UI::Xaml::Controls::Maps::MapElement*> __FIVectorView_1_Windows__CUI__CXaml__CControls__CMaps__CMapElement_t;
#define __FIVectorView_1_Windows__CUI__CXaml__CControls__CMaps__CMapElement ABI::Windows::Foundation::Collections::__FIVectorView_1_Windows__CUI__CXaml__CControls__CMaps__CMapElement_t
/* Collections */ } /* Foundation */ } /* Windows */ } /* ABI */ }

#endif // !defined(RO_NO_TEMPLATE_NAME)
#endif /* DEF___FIVectorView_1_Windows__CUI__CXaml__CControls__CMaps__CMapElement_USE */

#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x50000

#ifndef DEF___FIVectorView_1_Windows__CUI__CXaml__CControls__CMaps__CMapLayer_USE
#define DEF___FIVectorView_1_Windows__CUI__CXaml__CControls__CMaps__CMapLayer_USE
#if !defined(RO_NO_TEMPLATE_NAME)
namespace ABI { namespace Windows { namespace Foundation { namespace Collections {
template <>
struct __declspec(uuid("963326b9-6770-52f1-b6c6-519441f873c3"))
IVectorView<ABI::Windows::UI::Xaml::Controls::Maps::MapLayer*> : IVectorView_impl<ABI::Windows::Foundation::Internal::AggregateType<ABI::Windows::UI::Xaml::Controls::Maps::MapLayer*, ABI::Windows::UI::Xaml::Controls::Maps::IMapLayer*>>
{
    static const wchar_t* z_get_rc_name_impl()
    {
        return L"Windows.Foundation.Collections.IVectorView`1<Windows.UI.Xaml.Controls.Maps.MapLayer>";
    }
};
// Define a typedef for the parameterized interface specialization's mangled name.
// This allows code which uses the mangled name for the parameterized interface to access the
// correct parameterized interface specialization.
typedef IVectorView<ABI::Windows::UI::Xaml::Controls::Maps::MapLayer*> __FIVectorView_1_Windows__CUI__CXaml__CControls__CMaps__CMapLayer_t;
#define __FIVectorView_1_Windows__CUI__CXaml__CControls__CMaps__CMapLayer ABI::Windows::Foundation::Collections::__FIVectorView_1_Windows__CUI__CXaml__CControls__CMaps__CMapLayer_t
/* Collections */ } /* Foundation */ } /* Windows */ } /* ABI */ }

#endif // !defined(RO_NO_TEMPLATE_NAME)
#endif /* DEF___FIVectorView_1_Windows__CUI__CXaml__CControls__CMaps__CMapLayer_USE */

#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x50000

#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

#ifndef DEF___FIVectorView_1_Windows__CUI__CXaml__CControls__CMaps__CMapRouteView_USE
#define DEF___FIVectorView_1_Windows__CUI__CXaml__CControls__CMaps__CMapRouteView_USE
#if !defined(RO_NO_TEMPLATE_NAME)
namespace ABI { namespace Windows { namespace Foundation { namespace Collections {
template <>
struct __declspec(uuid("bdbb45ea-0c73-56bc-a375-3f2a7beb6f2e"))
IVectorView<ABI::Windows::UI::Xaml::Controls::Maps::MapRouteView*> : IVectorView_impl<ABI::Windows::Foundation::Internal::AggregateType<ABI::Windows::UI::Xaml::Controls::Maps::MapRouteView*, ABI::Windows::UI::Xaml::Controls::Maps::IMapRouteView*>>
{
    static const wchar_t* z_get_rc_name_impl()
    {
        return L"Windows.Foundation.Collections.IVectorView`1<Windows.UI.Xaml.Controls.Maps.MapRouteView>";
    }
};
// Define a typedef for the parameterized interface specialization's mangled name.
// This allows code which uses the mangled name for the parameterized interface to access the
// correct parameterized interface specialization.
typedef IVectorView<ABI::Windows::UI::Xaml::Controls::Maps::MapRouteView*> __FIVectorView_1_Windows__CUI__CXaml__CControls__CMaps__CMapRouteView_t;
#define __FIVectorView_1_Windows__CUI__CXaml__CControls__CMaps__CMapRouteView ABI::Windows::Foundation::Collections::__FIVectorView_1_Windows__CUI__CXaml__CControls__CMaps__CMapRouteView_t
/* Collections */ } /* Foundation */ } /* Windows */ } /* ABI */ }

#endif // !defined(RO_NO_TEMPLATE_NAME)
#endif /* DEF___FIVectorView_1_Windows__CUI__CXaml__CControls__CMaps__CMapRouteView_USE */

#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

#ifndef DEF___FIVectorView_1_Windows__CUI__CXaml__CControls__CMaps__CMapTileSource_USE
#define DEF___FIVectorView_1_Windows__CUI__CXaml__CControls__CMaps__CMapTileSource_USE
#if !defined(RO_NO_TEMPLATE_NAME)
namespace ABI { namespace Windows { namespace Foundation { namespace Collections {
template <>
struct __declspec(uuid("de7aa182-8e17-5565-9a9d-94a4ff25364a"))
IVectorView<ABI::Windows::UI::Xaml::Controls::Maps::MapTileSource*> : IVectorView_impl<ABI::Windows::Foundation::Internal::AggregateType<ABI::Windows::UI::Xaml::Controls::Maps::MapTileSource*, ABI::Windows::UI::Xaml::Controls::Maps::IMapTileSource*>>
{
    static const wchar_t* z_get_rc_name_impl()
    {
        return L"Windows.Foundation.Collections.IVectorView`1<Windows.UI.Xaml.Controls.Maps.MapTileSource>";
    }
};
// Define a typedef for the parameterized interface specialization's mangled name.
// This allows code which uses the mangled name for the parameterized interface to access the
// correct parameterized interface specialization.
typedef IVectorView<ABI::Windows::UI::Xaml::Controls::Maps::MapTileSource*> __FIVectorView_1_Windows__CUI__CXaml__CControls__CMaps__CMapTileSource_t;
#define __FIVectorView_1_Windows__CUI__CXaml__CControls__CMaps__CMapTileSource ABI::Windows::Foundation::Collections::__FIVectorView_1_Windows__CUI__CXaml__CControls__CMaps__CMapTileSource_t
/* Collections */ } /* Foundation */ } /* Windows */ } /* ABI */ }

#endif // !defined(RO_NO_TEMPLATE_NAME)
#endif /* DEF___FIVectorView_1_Windows__CUI__CXaml__CControls__CMaps__CMapTileSource_USE */

#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

#ifndef DEF___FIVectorView_1_Windows__CUI__CXaml__CDependencyObject_USE
#define DEF___FIVectorView_1_Windows__CUI__CXaml__CDependencyObject_USE
#if !defined(RO_NO_TEMPLATE_NAME)
namespace ABI { namespace Windows { namespace Foundation { namespace Collections {
template <>
struct __declspec(uuid("fe750d77-1307-5df2-a021-1c7a8d6b80ad"))
IVectorView<ABI::Windows::UI::Xaml::DependencyObject*> : IVectorView_impl<ABI::Windows::Foundation::Internal::AggregateType<ABI::Windows::UI::Xaml::DependencyObject*, ABI::Windows::UI::Xaml::IDependencyObject*>>
{
    static const wchar_t* z_get_rc_name_impl()
    {
        return L"Windows.Foundation.Collections.IVectorView`1<Windows.UI.Xaml.DependencyObject>";
    }
};
// Define a typedef for the parameterized interface specialization's mangled name.
// This allows code which uses the mangled name for the parameterized interface to access the
// correct parameterized interface specialization.
typedef IVectorView<ABI::Windows::UI::Xaml::DependencyObject*> __FIVectorView_1_Windows__CUI__CXaml__CDependencyObject_t;
#define __FIVectorView_1_Windows__CUI__CXaml__CDependencyObject ABI::Windows::Foundation::Collections::__FIVectorView_1_Windows__CUI__CXaml__CDependencyObject_t
/* Collections */ } /* Foundation */ } /* Windows */ } /* ABI */ }

#endif // !defined(RO_NO_TEMPLATE_NAME)
#endif /* DEF___FIVectorView_1_Windows__CUI__CXaml__CDependencyObject_USE */

#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

#ifndef DEF___FIVector_1_Windows__CDevices__CGeolocation__CGeopath_USE
#define DEF___FIVector_1_Windows__CDevices__CGeolocation__CGeopath_USE
#if !defined(RO_NO_TEMPLATE_NAME)
namespace ABI { namespace Windows { namespace Foundation { namespace Collections {
template <>
struct __declspec(uuid("7ca97e6d-6893-5672-a0c7-625c5090381e"))
IVector<ABI::Windows::Devices::Geolocation::Geopath*> : IVector_impl<ABI::Windows::Foundation::Internal::AggregateType<ABI::Windows::Devices::Geolocation::Geopath*, ABI::Windows::Devices::Geolocation::IGeopath*>>
{
    static const wchar_t* z_get_rc_name_impl()
    {
        return L"Windows.Foundation.Collections.IVector`1<Windows.Devices.Geolocation.Geopath>";
    }
};
// Define a typedef for the parameterized interface specialization's mangled name.
// This allows code which uses the mangled name for the parameterized interface to access the
// correct parameterized interface specialization.
typedef IVector<ABI::Windows::Devices::Geolocation::Geopath*> __FIVector_1_Windows__CDevices__CGeolocation__CGeopath_t;
#define __FIVector_1_Windows__CDevices__CGeolocation__CGeopath ABI::Windows::Foundation::Collections::__FIVector_1_Windows__CDevices__CGeolocation__CGeopath_t
/* Collections */ } /* Foundation */ } /* Windows */ } /* ABI */ }

#endif // !defined(RO_NO_TEMPLATE_NAME)
#endif /* DEF___FIVector_1_Windows__CDevices__CGeolocation__CGeopath_USE */

#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

#ifndef DEF___FIVector_1_Windows__CUI__CXaml__CControls__CMaps__CMapElement_USE
#define DEF___FIVector_1_Windows__CUI__CXaml__CControls__CMaps__CMapElement_USE
#if !defined(RO_NO_TEMPLATE_NAME)
namespace ABI { namespace Windows { namespace Foundation { namespace Collections {
template <>
struct __declspec(uuid("02773f2d-bb17-56fd-96cc-89f1c47f9e11"))
IVector<ABI::Windows::UI::Xaml::Controls::Maps::MapElement*> : IVector_impl<ABI::Windows::Foundation::Internal::AggregateType<ABI::Windows::UI::Xaml::Controls::Maps::MapElement*, ABI::Windows::UI::Xaml::Controls::Maps::IMapElement*>>
{
    static const wchar_t* z_get_rc_name_impl()
    {
        return L"Windows.Foundation.Collections.IVector`1<Windows.UI.Xaml.Controls.Maps.MapElement>";
    }
};
// Define a typedef for the parameterized interface specialization's mangled name.
// This allows code which uses the mangled name for the parameterized interface to access the
// correct parameterized interface specialization.
typedef IVector<ABI::Windows::UI::Xaml::Controls::Maps::MapElement*> __FIVector_1_Windows__CUI__CXaml__CControls__CMaps__CMapElement_t;
#define __FIVector_1_Windows__CUI__CXaml__CControls__CMaps__CMapElement ABI::Windows::Foundation::Collections::__FIVector_1_Windows__CUI__CXaml__CControls__CMaps__CMapElement_t
/* Collections */ } /* Foundation */ } /* Windows */ } /* ABI */ }

#endif // !defined(RO_NO_TEMPLATE_NAME)
#endif /* DEF___FIVector_1_Windows__CUI__CXaml__CControls__CMaps__CMapElement_USE */

#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x50000

#ifndef DEF___FIVector_1_Windows__CUI__CXaml__CControls__CMaps__CMapLayer_USE
#define DEF___FIVector_1_Windows__CUI__CXaml__CControls__CMaps__CMapLayer_USE
#if !defined(RO_NO_TEMPLATE_NAME)
namespace ABI { namespace Windows { namespace Foundation { namespace Collections {
template <>
struct __declspec(uuid("62782500-a9cc-57f1-b81b-6ebcc9212245"))
IVector<ABI::Windows::UI::Xaml::Controls::Maps::MapLayer*> : IVector_impl<ABI::Windows::Foundation::Internal::AggregateType<ABI::Windows::UI::Xaml::Controls::Maps::MapLayer*, ABI::Windows::UI::Xaml::Controls::Maps::IMapLayer*>>
{
    static const wchar_t* z_get_rc_name_impl()
    {
        return L"Windows.Foundation.Collections.IVector`1<Windows.UI.Xaml.Controls.Maps.MapLayer>";
    }
};
// Define a typedef for the parameterized interface specialization's mangled name.
// This allows code which uses the mangled name for the parameterized interface to access the
// correct parameterized interface specialization.
typedef IVector<ABI::Windows::UI::Xaml::Controls::Maps::MapLayer*> __FIVector_1_Windows__CUI__CXaml__CControls__CMaps__CMapLayer_t;
#define __FIVector_1_Windows__CUI__CXaml__CControls__CMaps__CMapLayer ABI::Windows::Foundation::Collections::__FIVector_1_Windows__CUI__CXaml__CControls__CMaps__CMapLayer_t
/* Collections */ } /* Foundation */ } /* Windows */ } /* ABI */ }

#endif // !defined(RO_NO_TEMPLATE_NAME)
#endif /* DEF___FIVector_1_Windows__CUI__CXaml__CControls__CMaps__CMapLayer_USE */

#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x50000

#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

#ifndef DEF___FIVector_1_Windows__CUI__CXaml__CControls__CMaps__CMapRouteView_USE
#define DEF___FIVector_1_Windows__CUI__CXaml__CControls__CMaps__CMapRouteView_USE
#if !defined(RO_NO_TEMPLATE_NAME)
namespace ABI { namespace Windows { namespace Foundation { namespace Collections {
template <>
struct __declspec(uuid("8ce513b4-0a7d-5553-b735-79cd5a7fee3f"))
IVector<ABI::Windows::UI::Xaml::Controls::Maps::MapRouteView*> : IVector_impl<ABI::Windows::Foundation::Internal::AggregateType<ABI::Windows::UI::Xaml::Controls::Maps::MapRouteView*, ABI::Windows::UI::Xaml::Controls::Maps::IMapRouteView*>>
{
    static const wchar_t* z_get_rc_name_impl()
    {
        return L"Windows.Foundation.Collections.IVector`1<Windows.UI.Xaml.Controls.Maps.MapRouteView>";
    }
};
// Define a typedef for the parameterized interface specialization's mangled name.
// This allows code which uses the mangled name for the parameterized interface to access the
// correct parameterized interface specialization.
typedef IVector<ABI::Windows::UI::Xaml::Controls::Maps::MapRouteView*> __FIVector_1_Windows__CUI__CXaml__CControls__CMaps__CMapRouteView_t;
#define __FIVector_1_Windows__CUI__CXaml__CControls__CMaps__CMapRouteView ABI::Windows::Foundation::Collections::__FIVector_1_Windows__CUI__CXaml__CControls__CMaps__CMapRouteView_t
/* Collections */ } /* Foundation */ } /* Windows */ } /* ABI */ }

#endif // !defined(RO_NO_TEMPLATE_NAME)
#endif /* DEF___FIVector_1_Windows__CUI__CXaml__CControls__CMaps__CMapRouteView_USE */

#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

#ifndef DEF___FIVector_1_Windows__CUI__CXaml__CControls__CMaps__CMapTileSource_USE
#define DEF___FIVector_1_Windows__CUI__CXaml__CControls__CMaps__CMapTileSource_USE
#if !defined(RO_NO_TEMPLATE_NAME)
namespace ABI { namespace Windows { namespace Foundation { namespace Collections {
template <>
struct __declspec(uuid("19f78a46-2c65-5f94-bf5b-963347a0a318"))
IVector<ABI::Windows::UI::Xaml::Controls::Maps::MapTileSource*> : IVector_impl<ABI::Windows::Foundation::Internal::AggregateType<ABI::Windows::UI::Xaml::Controls::Maps::MapTileSource*, ABI::Windows::UI::Xaml::Controls::Maps::IMapTileSource*>>
{
    static const wchar_t* z_get_rc_name_impl()
    {
        return L"Windows.Foundation.Collections.IVector`1<Windows.UI.Xaml.Controls.Maps.MapTileSource>";
    }
};
// Define a typedef for the parameterized interface specialization's mangled name.
// This allows code which uses the mangled name for the parameterized interface to access the
// correct parameterized interface specialization.
typedef IVector<ABI::Windows::UI::Xaml::Controls::Maps::MapTileSource*> __FIVector_1_Windows__CUI__CXaml__CControls__CMaps__CMapTileSource_t;
#define __FIVector_1_Windows__CUI__CXaml__CControls__CMaps__CMapTileSource ABI::Windows::Foundation::Collections::__FIVector_1_Windows__CUI__CXaml__CControls__CMaps__CMapTileSource_t
/* Collections */ } /* Foundation */ } /* Windows */ } /* ABI */ }

#endif // !defined(RO_NO_TEMPLATE_NAME)
#endif /* DEF___FIVector_1_Windows__CUI__CXaml__CControls__CMaps__CMapTileSource_USE */

#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

#ifndef DEF___FIVector_1_Windows__CUI__CXaml__CDependencyObject_USE
#define DEF___FIVector_1_Windows__CUI__CXaml__CDependencyObject_USE
#if !defined(RO_NO_TEMPLATE_NAME)
namespace ABI { namespace Windows { namespace Foundation { namespace Collections {
template <>
struct __declspec(uuid("771b857e-ab5c-5db8-a021-397c92cdc44c"))
IVector<ABI::Windows::UI::Xaml::DependencyObject*> : IVector_impl<ABI::Windows::Foundation::Internal::AggregateType<ABI::Windows::UI::Xaml::DependencyObject*, ABI::Windows::UI::Xaml::IDependencyObject*>>
{
    static const wchar_t* z_get_rc_name_impl()
    {
        return L"Windows.Foundation.Collections.IVector`1<Windows.UI.Xaml.DependencyObject>";
    }
};
// Define a typedef for the parameterized interface specialization's mangled name.
// This allows code which uses the mangled name for the parameterized interface to access the
// correct parameterized interface specialization.
typedef IVector<ABI::Windows::UI::Xaml::DependencyObject*> __FIVector_1_Windows__CUI__CXaml__CDependencyObject_t;
#define __FIVector_1_Windows__CUI__CXaml__CDependencyObject ABI::Windows::Foundation::Collections::__FIVector_1_Windows__CUI__CXaml__CDependencyObject_t
/* Collections */ } /* Foundation */ } /* Windows */ } /* ABI */ }

#endif // !defined(RO_NO_TEMPLATE_NAME)
#endif /* DEF___FIVector_1_Windows__CUI__CXaml__CDependencyObject_USE */

#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000


#ifndef DEF___FIReference_1_double_USE
#define DEF___FIReference_1_double_USE
#if !defined(RO_NO_TEMPLATE_NAME)
namespace ABI { namespace Windows { namespace Foundation {
template <>
struct __declspec(uuid("2f2d6c29-5473-5f3e-92e7-96572bb990e2"))
IReference<double> : IReference_impl<double>
{
    static const wchar_t* z_get_rc_name_impl()
    {
        return L"Windows.Foundation.IReference`1<Double>";
    }
};
// Define a typedef for the parameterized interface specialization's mangled name.
// This allows code which uses the mangled name for the parameterized interface to access the
// correct parameterized interface specialization.
typedef IReference<double> __FIReference_1_double_t;
#define __FIReference_1_double ABI::Windows::Foundation::__FIReference_1_double_t
/* Foundation */ } /* Windows */ } /* ABI */ }

#endif // !defined(RO_NO_TEMPLATE_NAME)
#endif /* DEF___FIReference_1_double_USE */


namespace ABI {
    namespace Windows {
        namespace UI {
            namespace Xaml {
                typedef struct Thickness Thickness;
            } /* Xaml */
        } /* UI */
    } /* Windows */
} /* ABI */

#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

#ifndef DEF___FIReference_1_Windows__CUI__CXaml__CThickness_USE
#define DEF___FIReference_1_Windows__CUI__CXaml__CThickness_USE
#if !defined(RO_NO_TEMPLATE_NAME)
namespace ABI { namespace Windows { namespace Foundation {
template <>
struct __declspec(uuid("a19f7ba8-d8cd-5df2-ab44-fefd26644484"))
IReference<struct ABI::Windows::UI::Xaml::Thickness> : IReference_impl<struct ABI::Windows::UI::Xaml::Thickness>
{
    static const wchar_t* z_get_rc_name_impl()
    {
        return L"Windows.Foundation.IReference`1<Windows.UI.Xaml.Thickness>";
    }
};
// Define a typedef for the parameterized interface specialization's mangled name.
// This allows code which uses the mangled name for the parameterized interface to access the
// correct parameterized interface specialization.
typedef IReference<struct ABI::Windows::UI::Xaml::Thickness> __FIReference_1_Windows__CUI__CXaml__CThickness_t;
#define __FIReference_1_Windows__CUI__CXaml__CThickness ABI::Windows::Foundation::__FIReference_1_Windows__CUI__CXaml__CThickness_t
/* Foundation */ } /* Windows */ } /* ABI */ }

#endif // !defined(RO_NO_TEMPLATE_NAME)
#endif /* DEF___FIReference_1_Windows__CUI__CXaml__CThickness_USE */

#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

namespace ABI {
    namespace Windows {
        namespace UI {
            namespace Xaml {
                namespace Controls {
                    namespace Maps {
                        class CustomMapTileDataSource;
                    } /* Maps */
                } /* Controls */
            } /* Xaml */
        } /* UI */
    } /* Windows */
} /* ABI */

namespace ABI {
    namespace Windows {
        namespace UI {
            namespace Xaml {
                namespace Controls {
                    namespace Maps {
                        class MapTileBitmapRequestedEventArgs;
                    } /* Maps */
                } /* Controls */
            } /* Xaml */
        } /* UI */
    } /* Windows */
} /* ABI */

#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

#ifndef DEF___FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CCustomMapTileDataSource_Windows__CUI__CXaml__CControls__CMaps__CMapTileBitmapRequestedEventArgs_USE
#define DEF___FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CCustomMapTileDataSource_Windows__CUI__CXaml__CControls__CMaps__CMapTileBitmapRequestedEventArgs_USE
#if !defined(RO_NO_TEMPLATE_NAME)
namespace ABI { namespace Windows { namespace Foundation {
template <>
struct __declspec(uuid("8d2d9655-2f82-5271-9e95-a2db39d872f0"))
ITypedEventHandler<ABI::Windows::UI::Xaml::Controls::Maps::CustomMapTileDataSource*, ABI::Windows::UI::Xaml::Controls::Maps::MapTileBitmapRequestedEventArgs*> : ITypedEventHandler_impl<ABI::Windows::Foundation::Internal::AggregateType<ABI::Windows::UI::Xaml::Controls::Maps::CustomMapTileDataSource*, ABI::Windows::UI::Xaml::Controls::Maps::ICustomMapTileDataSource*>, ABI::Windows::Foundation::Internal::AggregateType<ABI::Windows::UI::Xaml::Controls::Maps::MapTileBitmapRequestedEventArgs*, ABI::Windows::UI::Xaml::Controls::Maps::IMapTileBitmapRequestedEventArgs*>>
{
    static const wchar_t* z_get_rc_name_impl()
    {
        return L"Windows.Foundation.TypedEventHandler`2<Windows.UI.Xaml.Controls.Maps.CustomMapTileDataSource, Windows.UI.Xaml.Controls.Maps.MapTileBitmapRequestedEventArgs>";
    }
};
// Define a typedef for the parameterized interface specialization's mangled name.
// This allows code which uses the mangled name for the parameterized interface to access the
// correct parameterized interface specialization.
typedef ITypedEventHandler<ABI::Windows::UI::Xaml::Controls::Maps::CustomMapTileDataSource*, ABI::Windows::UI::Xaml::Controls::Maps::MapTileBitmapRequestedEventArgs*> __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CCustomMapTileDataSource_Windows__CUI__CXaml__CControls__CMaps__CMapTileBitmapRequestedEventArgs_t;
#define __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CCustomMapTileDataSource_Windows__CUI__CXaml__CControls__CMaps__CMapTileBitmapRequestedEventArgs ABI::Windows::Foundation::__FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CCustomMapTileDataSource_Windows__CUI__CXaml__CControls__CMaps__CMapTileBitmapRequestedEventArgs_t
/* Foundation */ } /* Windows */ } /* ABI */ }

#endif // !defined(RO_NO_TEMPLATE_NAME)
#endif /* DEF___FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CCustomMapTileDataSource_Windows__CUI__CXaml__CControls__CMaps__CMapTileBitmapRequestedEventArgs_USE */

#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

namespace ABI {
    namespace Windows {
        namespace UI {
            namespace Xaml {
                namespace Controls {
                    namespace Maps {
                        class HttpMapTileDataSource;
                    } /* Maps */
                } /* Controls */
            } /* Xaml */
        } /* UI */
    } /* Windows */
} /* ABI */

namespace ABI {
    namespace Windows {
        namespace UI {
            namespace Xaml {
                namespace Controls {
                    namespace Maps {
                        class MapTileUriRequestedEventArgs;
                    } /* Maps */
                } /* Controls */
            } /* Xaml */
        } /* UI */
    } /* Windows */
} /* ABI */

#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

#ifndef DEF___FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CHttpMapTileDataSource_Windows__CUI__CXaml__CControls__CMaps__CMapTileUriRequestedEventArgs_USE
#define DEF___FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CHttpMapTileDataSource_Windows__CUI__CXaml__CControls__CMaps__CMapTileUriRequestedEventArgs_USE
#if !defined(RO_NO_TEMPLATE_NAME)
namespace ABI { namespace Windows { namespace Foundation {
template <>
struct __declspec(uuid("4933a19a-00cc-5c21-a3df-b68f9939f6ef"))
ITypedEventHandler<ABI::Windows::UI::Xaml::Controls::Maps::HttpMapTileDataSource*, ABI::Windows::UI::Xaml::Controls::Maps::MapTileUriRequestedEventArgs*> : ITypedEventHandler_impl<ABI::Windows::Foundation::Internal::AggregateType<ABI::Windows::UI::Xaml::Controls::Maps::HttpMapTileDataSource*, ABI::Windows::UI::Xaml::Controls::Maps::IHttpMapTileDataSource*>, ABI::Windows::Foundation::Internal::AggregateType<ABI::Windows::UI::Xaml::Controls::Maps::MapTileUriRequestedEventArgs*, ABI::Windows::UI::Xaml::Controls::Maps::IMapTileUriRequestedEventArgs*>>
{
    static const wchar_t* z_get_rc_name_impl()
    {
        return L"Windows.Foundation.TypedEventHandler`2<Windows.UI.Xaml.Controls.Maps.HttpMapTileDataSource, Windows.UI.Xaml.Controls.Maps.MapTileUriRequestedEventArgs>";
    }
};
// Define a typedef for the parameterized interface specialization's mangled name.
// This allows code which uses the mangled name for the parameterized interface to access the
// correct parameterized interface specialization.
typedef ITypedEventHandler<ABI::Windows::UI::Xaml::Controls::Maps::HttpMapTileDataSource*, ABI::Windows::UI::Xaml::Controls::Maps::MapTileUriRequestedEventArgs*> __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CHttpMapTileDataSource_Windows__CUI__CXaml__CControls__CMaps__CMapTileUriRequestedEventArgs_t;
#define __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CHttpMapTileDataSource_Windows__CUI__CXaml__CControls__CMaps__CMapTileUriRequestedEventArgs ABI::Windows::Foundation::__FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CHttpMapTileDataSource_Windows__CUI__CXaml__CControls__CMaps__CMapTileUriRequestedEventArgs_t
/* Foundation */ } /* Windows */ } /* ABI */ }

#endif // !defined(RO_NO_TEMPLATE_NAME)
#endif /* DEF___FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CHttpMapTileDataSource_Windows__CUI__CXaml__CControls__CMaps__CMapTileUriRequestedEventArgs_USE */

#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

namespace ABI {
    namespace Windows {
        namespace UI {
            namespace Xaml {
                namespace Controls {
                    namespace Maps {
                        class LocalMapTileDataSource;
                    } /* Maps */
                } /* Controls */
            } /* Xaml */
        } /* UI */
    } /* Windows */
} /* ABI */

#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

#ifndef DEF___FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CLocalMapTileDataSource_Windows__CUI__CXaml__CControls__CMaps__CMapTileUriRequestedEventArgs_USE
#define DEF___FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CLocalMapTileDataSource_Windows__CUI__CXaml__CControls__CMaps__CMapTileUriRequestedEventArgs_USE
#if !defined(RO_NO_TEMPLATE_NAME)
namespace ABI { namespace Windows { namespace Foundation {
template <>
struct __declspec(uuid("76752fc4-b240-502c-9098-622c6c36e6a3"))
ITypedEventHandler<ABI::Windows::UI::Xaml::Controls::Maps::LocalMapTileDataSource*, ABI::Windows::UI::Xaml::Controls::Maps::MapTileUriRequestedEventArgs*> : ITypedEventHandler_impl<ABI::Windows::Foundation::Internal::AggregateType<ABI::Windows::UI::Xaml::Controls::Maps::LocalMapTileDataSource*, ABI::Windows::UI::Xaml::Controls::Maps::ILocalMapTileDataSource*>, ABI::Windows::Foundation::Internal::AggregateType<ABI::Windows::UI::Xaml::Controls::Maps::MapTileUriRequestedEventArgs*, ABI::Windows::UI::Xaml::Controls::Maps::IMapTileUriRequestedEventArgs*>>
{
    static const wchar_t* z_get_rc_name_impl()
    {
        return L"Windows.Foundation.TypedEventHandler`2<Windows.UI.Xaml.Controls.Maps.LocalMapTileDataSource, Windows.UI.Xaml.Controls.Maps.MapTileUriRequestedEventArgs>";
    }
};
// Define a typedef for the parameterized interface specialization's mangled name.
// This allows code which uses the mangled name for the parameterized interface to access the
// correct parameterized interface specialization.
typedef ITypedEventHandler<ABI::Windows::UI::Xaml::Controls::Maps::LocalMapTileDataSource*, ABI::Windows::UI::Xaml::Controls::Maps::MapTileUriRequestedEventArgs*> __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CLocalMapTileDataSource_Windows__CUI__CXaml__CControls__CMaps__CMapTileUriRequestedEventArgs_t;
#define __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CLocalMapTileDataSource_Windows__CUI__CXaml__CControls__CMaps__CMapTileUriRequestedEventArgs ABI::Windows::Foundation::__FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CLocalMapTileDataSource_Windows__CUI__CXaml__CControls__CMaps__CMapTileUriRequestedEventArgs_t
/* Foundation */ } /* Windows */ } /* ABI */ }

#endif // !defined(RO_NO_TEMPLATE_NAME)
#endif /* DEF___FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CLocalMapTileDataSource_Windows__CUI__CXaml__CControls__CMaps__CMapTileUriRequestedEventArgs_USE */

#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

namespace ABI {
    namespace Windows {
        namespace UI {
            namespace Xaml {
                namespace Controls {
                    namespace Maps {
                        class MapControl;
                    } /* Maps */
                } /* Controls */
            } /* Xaml */
        } /* UI */
    } /* Windows */
} /* ABI */

#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

#ifndef DEF___FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_IInspectable_USE
#define DEF___FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_IInspectable_USE
#if !defined(RO_NO_TEMPLATE_NAME)
namespace ABI { namespace Windows { namespace Foundation {
template <>
struct __declspec(uuid("f250dd93-e636-51ef-bc93-ee78d431a6bd"))
ITypedEventHandler<ABI::Windows::UI::Xaml::Controls::Maps::MapControl*, IInspectable*> : ITypedEventHandler_impl<ABI::Windows::Foundation::Internal::AggregateType<ABI::Windows::UI::Xaml::Controls::Maps::MapControl*, ABI::Windows::UI::Xaml::Controls::Maps::IMapControl*>, IInspectable*>
{
    static const wchar_t* z_get_rc_name_impl()
    {
        return L"Windows.Foundation.TypedEventHandler`2<Windows.UI.Xaml.Controls.Maps.MapControl, Object>";
    }
};
// Define a typedef for the parameterized interface specialization's mangled name.
// This allows code which uses the mangled name for the parameterized interface to access the
// correct parameterized interface specialization.
typedef ITypedEventHandler<ABI::Windows::UI::Xaml::Controls::Maps::MapControl*, IInspectable*> __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_IInspectable_t;
#define __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_IInspectable ABI::Windows::Foundation::__FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_IInspectable_t
/* Foundation */ } /* Windows */ } /* ABI */ }

#endif // !defined(RO_NO_TEMPLATE_NAME)
#endif /* DEF___FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_IInspectable_USE */

#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

namespace ABI {
    namespace Windows {
        namespace UI {
            namespace Xaml {
                namespace Controls {
                    namespace Maps {
                        class MapActualCameraChangedEventArgs;
                    } /* Maps */
                } /* Controls */
            } /* Xaml */
        } /* UI */
    } /* Windows */
} /* ABI */

#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

#ifndef DEF___FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapActualCameraChangedEventArgs_USE
#define DEF___FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapActualCameraChangedEventArgs_USE
#if !defined(RO_NO_TEMPLATE_NAME)
namespace ABI { namespace Windows { namespace Foundation {
template <>
struct __declspec(uuid("1b536ae0-08b0-5c54-bb30-679e6a875d61"))
ITypedEventHandler<ABI::Windows::UI::Xaml::Controls::Maps::MapControl*, ABI::Windows::UI::Xaml::Controls::Maps::MapActualCameraChangedEventArgs*> : ITypedEventHandler_impl<ABI::Windows::Foundation::Internal::AggregateType<ABI::Windows::UI::Xaml::Controls::Maps::MapControl*, ABI::Windows::UI::Xaml::Controls::Maps::IMapControl*>, ABI::Windows::Foundation::Internal::AggregateType<ABI::Windows::UI::Xaml::Controls::Maps::MapActualCameraChangedEventArgs*, ABI::Windows::UI::Xaml::Controls::Maps::IMapActualCameraChangedEventArgs*>>
{
    static const wchar_t* z_get_rc_name_impl()
    {
        return L"Windows.Foundation.TypedEventHandler`2<Windows.UI.Xaml.Controls.Maps.MapControl, Windows.UI.Xaml.Controls.Maps.MapActualCameraChangedEventArgs>";
    }
};
// Define a typedef for the parameterized interface specialization's mangled name.
// This allows code which uses the mangled name for the parameterized interface to access the
// correct parameterized interface specialization.
typedef ITypedEventHandler<ABI::Windows::UI::Xaml::Controls::Maps::MapControl*, ABI::Windows::UI::Xaml::Controls::Maps::MapActualCameraChangedEventArgs*> __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapActualCameraChangedEventArgs_t;
#define __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapActualCameraChangedEventArgs ABI::Windows::Foundation::__FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapActualCameraChangedEventArgs_t
/* Foundation */ } /* Windows */ } /* ABI */ }

#endif // !defined(RO_NO_TEMPLATE_NAME)
#endif /* DEF___FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapActualCameraChangedEventArgs_USE */

#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

namespace ABI {
    namespace Windows {
        namespace UI {
            namespace Xaml {
                namespace Controls {
                    namespace Maps {
                        class MapActualCameraChangingEventArgs;
                    } /* Maps */
                } /* Controls */
            } /* Xaml */
        } /* UI */
    } /* Windows */
} /* ABI */

#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

#ifndef DEF___FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapActualCameraChangingEventArgs_USE
#define DEF___FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapActualCameraChangingEventArgs_USE
#if !defined(RO_NO_TEMPLATE_NAME)
namespace ABI { namespace Windows { namespace Foundation {
template <>
struct __declspec(uuid("78bfb71b-2d80-50e1-a2e9-e5667ff89ef2"))
ITypedEventHandler<ABI::Windows::UI::Xaml::Controls::Maps::MapControl*, ABI::Windows::UI::Xaml::Controls::Maps::MapActualCameraChangingEventArgs*> : ITypedEventHandler_impl<ABI::Windows::Foundation::Internal::AggregateType<ABI::Windows::UI::Xaml::Controls::Maps::MapControl*, ABI::Windows::UI::Xaml::Controls::Maps::IMapControl*>, ABI::Windows::Foundation::Internal::AggregateType<ABI::Windows::UI::Xaml::Controls::Maps::MapActualCameraChangingEventArgs*, ABI::Windows::UI::Xaml::Controls::Maps::IMapActualCameraChangingEventArgs*>>
{
    static const wchar_t* z_get_rc_name_impl()
    {
        return L"Windows.Foundation.TypedEventHandler`2<Windows.UI.Xaml.Controls.Maps.MapControl, Windows.UI.Xaml.Controls.Maps.MapActualCameraChangingEventArgs>";
    }
};
// Define a typedef for the parameterized interface specialization's mangled name.
// This allows code which uses the mangled name for the parameterized interface to access the
// correct parameterized interface specialization.
typedef ITypedEventHandler<ABI::Windows::UI::Xaml::Controls::Maps::MapControl*, ABI::Windows::UI::Xaml::Controls::Maps::MapActualCameraChangingEventArgs*> __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapActualCameraChangingEventArgs_t;
#define __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapActualCameraChangingEventArgs ABI::Windows::Foundation::__FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapActualCameraChangingEventArgs_t
/* Foundation */ } /* Windows */ } /* ABI */ }

#endif // !defined(RO_NO_TEMPLATE_NAME)
#endif /* DEF___FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapActualCameraChangingEventArgs_USE */

#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

namespace ABI {
    namespace Windows {
        namespace UI {
            namespace Xaml {
                namespace Controls {
                    namespace Maps {
                        class MapContextRequestedEventArgs;
                    } /* Maps */
                } /* Controls */
            } /* Xaml */
        } /* UI */
    } /* Windows */
} /* ABI */

#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x40000

#ifndef DEF___FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapContextRequestedEventArgs_USE
#define DEF___FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapContextRequestedEventArgs_USE
#if !defined(RO_NO_TEMPLATE_NAME)
namespace ABI { namespace Windows { namespace Foundation {
template <>
struct __declspec(uuid("e5239641-ba1f-5d89-aae1-c7b499a47b0c"))
ITypedEventHandler<ABI::Windows::UI::Xaml::Controls::Maps::MapControl*, ABI::Windows::UI::Xaml::Controls::Maps::MapContextRequestedEventArgs*> : ITypedEventHandler_impl<ABI::Windows::Foundation::Internal::AggregateType<ABI::Windows::UI::Xaml::Controls::Maps::MapControl*, ABI::Windows::UI::Xaml::Controls::Maps::IMapControl*>, ABI::Windows::Foundation::Internal::AggregateType<ABI::Windows::UI::Xaml::Controls::Maps::MapContextRequestedEventArgs*, ABI::Windows::UI::Xaml::Controls::Maps::IMapContextRequestedEventArgs*>>
{
    static const wchar_t* z_get_rc_name_impl()
    {
        return L"Windows.Foundation.TypedEventHandler`2<Windows.UI.Xaml.Controls.Maps.MapControl, Windows.UI.Xaml.Controls.Maps.MapContextRequestedEventArgs>";
    }
};
// Define a typedef for the parameterized interface specialization's mangled name.
// This allows code which uses the mangled name for the parameterized interface to access the
// correct parameterized interface specialization.
typedef ITypedEventHandler<ABI::Windows::UI::Xaml::Controls::Maps::MapControl*, ABI::Windows::UI::Xaml::Controls::Maps::MapContextRequestedEventArgs*> __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapContextRequestedEventArgs_t;
#define __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapContextRequestedEventArgs ABI::Windows::Foundation::__FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapContextRequestedEventArgs_t
/* Foundation */ } /* Windows */ } /* ABI */ }

#endif // !defined(RO_NO_TEMPLATE_NAME)
#endif /* DEF___FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapContextRequestedEventArgs_USE */

#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x40000
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

namespace ABI {
    namespace Windows {
        namespace UI {
            namespace Xaml {
                namespace Controls {
                    namespace Maps {
                        class MapControlBusinessLandmarkClickEventArgs;
                    } /* Maps */
                } /* Controls */
            } /* Xaml */
        } /* UI */
    } /* Windows */
} /* ABI */

#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if WINDOWS_SERVICES_MAPS_LOCALSEARCHCONTRACT_VERSION >= 0x20000

#ifndef DEF___FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapControlBusinessLandmarkClickEventArgs_USE
#define DEF___FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapControlBusinessLandmarkClickEventArgs_USE
#if !defined(RO_NO_TEMPLATE_NAME)
namespace ABI { namespace Windows { namespace Foundation {
template <>
struct __declspec(uuid("3a9d75c2-a41b-5708-8c1b-8e7c26e857d0"))
ITypedEventHandler<ABI::Windows::UI::Xaml::Controls::Maps::MapControl*, ABI::Windows::UI::Xaml::Controls::Maps::MapControlBusinessLandmarkClickEventArgs*> : ITypedEventHandler_impl<ABI::Windows::Foundation::Internal::AggregateType<ABI::Windows::UI::Xaml::Controls::Maps::MapControl*, ABI::Windows::UI::Xaml::Controls::Maps::IMapControl*>, ABI::Windows::Foundation::Internal::AggregateType<ABI::Windows::UI::Xaml::Controls::Maps::MapControlBusinessLandmarkClickEventArgs*, ABI::Windows::UI::Xaml::Controls::Maps::IMapControlBusinessLandmarkClickEventArgs*>>
{
    static const wchar_t* z_get_rc_name_impl()
    {
        return L"Windows.Foundation.TypedEventHandler`2<Windows.UI.Xaml.Controls.Maps.MapControl, Windows.UI.Xaml.Controls.Maps.MapControlBusinessLandmarkClickEventArgs>";
    }
};
// Define a typedef for the parameterized interface specialization's mangled name.
// This allows code which uses the mangled name for the parameterized interface to access the
// correct parameterized interface specialization.
typedef ITypedEventHandler<ABI::Windows::UI::Xaml::Controls::Maps::MapControl*, ABI::Windows::UI::Xaml::Controls::Maps::MapControlBusinessLandmarkClickEventArgs*> __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapControlBusinessLandmarkClickEventArgs_t;
#define __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapControlBusinessLandmarkClickEventArgs ABI::Windows::Foundation::__FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapControlBusinessLandmarkClickEventArgs_t
/* Foundation */ } /* Windows */ } /* ABI */ }

#endif // !defined(RO_NO_TEMPLATE_NAME)
#endif /* DEF___FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapControlBusinessLandmarkClickEventArgs_USE */

#endif // WINDOWS_SERVICES_MAPS_LOCALSEARCHCONTRACT_VERSION >= 0x20000
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

namespace ABI {
    namespace Windows {
        namespace UI {
            namespace Xaml {
                namespace Controls {
                    namespace Maps {
                        class MapControlBusinessLandmarkPointerEnteredEventArgs;
                    } /* Maps */
                } /* Controls */
            } /* Xaml */
        } /* UI */
    } /* Windows */
} /* ABI */

#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if WINDOWS_SERVICES_MAPS_LOCALSEARCHCONTRACT_VERSION >= 0x30000

#ifndef DEF___FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapControlBusinessLandmarkPointerEnteredEventArgs_USE
#define DEF___FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapControlBusinessLandmarkPointerEnteredEventArgs_USE
#if !defined(RO_NO_TEMPLATE_NAME)
namespace ABI { namespace Windows { namespace Foundation {
template <>
struct __declspec(uuid("fd7dabea-0014-5a30-9a59-bd4126a2ffb7"))
ITypedEventHandler<ABI::Windows::UI::Xaml::Controls::Maps::MapControl*, ABI::Windows::UI::Xaml::Controls::Maps::MapControlBusinessLandmarkPointerEnteredEventArgs*> : ITypedEventHandler_impl<ABI::Windows::Foundation::Internal::AggregateType<ABI::Windows::UI::Xaml::Controls::Maps::MapControl*, ABI::Windows::UI::Xaml::Controls::Maps::IMapControl*>, ABI::Windows::Foundation::Internal::AggregateType<ABI::Windows::UI::Xaml::Controls::Maps::MapControlBusinessLandmarkPointerEnteredEventArgs*, ABI::Windows::UI::Xaml::Controls::Maps::IMapControlBusinessLandmarkPointerEnteredEventArgs*>>
{
    static const wchar_t* z_get_rc_name_impl()
    {
        return L"Windows.Foundation.TypedEventHandler`2<Windows.UI.Xaml.Controls.Maps.MapControl, Windows.UI.Xaml.Controls.Maps.MapControlBusinessLandmarkPointerEnteredEventArgs>";
    }
};
// Define a typedef for the parameterized interface specialization's mangled name.
// This allows code which uses the mangled name for the parameterized interface to access the
// correct parameterized interface specialization.
typedef ITypedEventHandler<ABI::Windows::UI::Xaml::Controls::Maps::MapControl*, ABI::Windows::UI::Xaml::Controls::Maps::MapControlBusinessLandmarkPointerEnteredEventArgs*> __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapControlBusinessLandmarkPointerEnteredEventArgs_t;
#define __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapControlBusinessLandmarkPointerEnteredEventArgs ABI::Windows::Foundation::__FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapControlBusinessLandmarkPointerEnteredEventArgs_t
/* Foundation */ } /* Windows */ } /* ABI */ }

#endif // !defined(RO_NO_TEMPLATE_NAME)
#endif /* DEF___FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapControlBusinessLandmarkPointerEnteredEventArgs_USE */

#endif // WINDOWS_SERVICES_MAPS_LOCALSEARCHCONTRACT_VERSION >= 0x30000
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

namespace ABI {
    namespace Windows {
        namespace UI {
            namespace Xaml {
                namespace Controls {
                    namespace Maps {
                        class MapControlBusinessLandmarkPointerExitedEventArgs;
                    } /* Maps */
                } /* Controls */
            } /* Xaml */
        } /* UI */
    } /* Windows */
} /* ABI */

#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if WINDOWS_SERVICES_MAPS_LOCALSEARCHCONTRACT_VERSION >= 0x30000

#ifndef DEF___FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapControlBusinessLandmarkPointerExitedEventArgs_USE
#define DEF___FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapControlBusinessLandmarkPointerExitedEventArgs_USE
#if !defined(RO_NO_TEMPLATE_NAME)
namespace ABI { namespace Windows { namespace Foundation {
template <>
struct __declspec(uuid("c4574b81-a192-5810-b0d9-cc99230fdcdc"))
ITypedEventHandler<ABI::Windows::UI::Xaml::Controls::Maps::MapControl*, ABI::Windows::UI::Xaml::Controls::Maps::MapControlBusinessLandmarkPointerExitedEventArgs*> : ITypedEventHandler_impl<ABI::Windows::Foundation::Internal::AggregateType<ABI::Windows::UI::Xaml::Controls::Maps::MapControl*, ABI::Windows::UI::Xaml::Controls::Maps::IMapControl*>, ABI::Windows::Foundation::Internal::AggregateType<ABI::Windows::UI::Xaml::Controls::Maps::MapControlBusinessLandmarkPointerExitedEventArgs*, ABI::Windows::UI::Xaml::Controls::Maps::IMapControlBusinessLandmarkPointerExitedEventArgs*>>
{
    static const wchar_t* z_get_rc_name_impl()
    {
        return L"Windows.Foundation.TypedEventHandler`2<Windows.UI.Xaml.Controls.Maps.MapControl, Windows.UI.Xaml.Controls.Maps.MapControlBusinessLandmarkPointerExitedEventArgs>";
    }
};
// Define a typedef for the parameterized interface specialization's mangled name.
// This allows code which uses the mangled name for the parameterized interface to access the
// correct parameterized interface specialization.
typedef ITypedEventHandler<ABI::Windows::UI::Xaml::Controls::Maps::MapControl*, ABI::Windows::UI::Xaml::Controls::Maps::MapControlBusinessLandmarkPointerExitedEventArgs*> __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapControlBusinessLandmarkPointerExitedEventArgs_t;
#define __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapControlBusinessLandmarkPointerExitedEventArgs ABI::Windows::Foundation::__FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapControlBusinessLandmarkPointerExitedEventArgs_t
/* Foundation */ } /* Windows */ } /* ABI */ }

#endif // !defined(RO_NO_TEMPLATE_NAME)
#endif /* DEF___FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapControlBusinessLandmarkPointerExitedEventArgs_USE */

#endif // WINDOWS_SERVICES_MAPS_LOCALSEARCHCONTRACT_VERSION >= 0x30000
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

namespace ABI {
    namespace Windows {
        namespace UI {
            namespace Xaml {
                namespace Controls {
                    namespace Maps {
                        class MapControlBusinessLandmarkRightTappedEventArgs;
                    } /* Maps */
                } /* Controls */
            } /* Xaml */
        } /* UI */
    } /* Windows */
} /* ABI */

#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if WINDOWS_SERVICES_MAPS_LOCALSEARCHCONTRACT_VERSION >= 0x20000

#ifndef DEF___FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapControlBusinessLandmarkRightTappedEventArgs_USE
#define DEF___FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapControlBusinessLandmarkRightTappedEventArgs_USE
#if !defined(RO_NO_TEMPLATE_NAME)
namespace ABI { namespace Windows { namespace Foundation {
template <>
struct __declspec(uuid("e3634a54-05ed-5e39-9d8a-03857f0ba0e7"))
ITypedEventHandler<ABI::Windows::UI::Xaml::Controls::Maps::MapControl*, ABI::Windows::UI::Xaml::Controls::Maps::MapControlBusinessLandmarkRightTappedEventArgs*> : ITypedEventHandler_impl<ABI::Windows::Foundation::Internal::AggregateType<ABI::Windows::UI::Xaml::Controls::Maps::MapControl*, ABI::Windows::UI::Xaml::Controls::Maps::IMapControl*>, ABI::Windows::Foundation::Internal::AggregateType<ABI::Windows::UI::Xaml::Controls::Maps::MapControlBusinessLandmarkRightTappedEventArgs*, ABI::Windows::UI::Xaml::Controls::Maps::IMapControlBusinessLandmarkRightTappedEventArgs*>>
{
    static const wchar_t* z_get_rc_name_impl()
    {
        return L"Windows.Foundation.TypedEventHandler`2<Windows.UI.Xaml.Controls.Maps.MapControl, Windows.UI.Xaml.Controls.Maps.MapControlBusinessLandmarkRightTappedEventArgs>";
    }
};
// Define a typedef for the parameterized interface specialization's mangled name.
// This allows code which uses the mangled name for the parameterized interface to access the
// correct parameterized interface specialization.
typedef ITypedEventHandler<ABI::Windows::UI::Xaml::Controls::Maps::MapControl*, ABI::Windows::UI::Xaml::Controls::Maps::MapControlBusinessLandmarkRightTappedEventArgs*> __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapControlBusinessLandmarkRightTappedEventArgs_t;
#define __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapControlBusinessLandmarkRightTappedEventArgs ABI::Windows::Foundation::__FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapControlBusinessLandmarkRightTappedEventArgs_t
/* Foundation */ } /* Windows */ } /* ABI */ }

#endif // !defined(RO_NO_TEMPLATE_NAME)
#endif /* DEF___FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapControlBusinessLandmarkRightTappedEventArgs_USE */

#endif // WINDOWS_SERVICES_MAPS_LOCALSEARCHCONTRACT_VERSION >= 0x20000
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

namespace ABI {
    namespace Windows {
        namespace UI {
            namespace Xaml {
                namespace Controls {
                    namespace Maps {
                        class MapControlTransitFeatureClickEventArgs;
                    } /* Maps */
                } /* Controls */
            } /* Xaml */
        } /* UI */
    } /* Windows */
} /* ABI */

#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if WINDOWS_SERVICES_MAPS_LOCALSEARCHCONTRACT_VERSION >= 0x20000

#ifndef DEF___FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapControlTransitFeatureClickEventArgs_USE
#define DEF___FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapControlTransitFeatureClickEventArgs_USE
#if !defined(RO_NO_TEMPLATE_NAME)
namespace ABI { namespace Windows { namespace Foundation {
template <>
struct __declspec(uuid("3ec75af0-1679-53ff-bb0c-376b8c441980"))
ITypedEventHandler<ABI::Windows::UI::Xaml::Controls::Maps::MapControl*, ABI::Windows::UI::Xaml::Controls::Maps::MapControlTransitFeatureClickEventArgs*> : ITypedEventHandler_impl<ABI::Windows::Foundation::Internal::AggregateType<ABI::Windows::UI::Xaml::Controls::Maps::MapControl*, ABI::Windows::UI::Xaml::Controls::Maps::IMapControl*>, ABI::Windows::Foundation::Internal::AggregateType<ABI::Windows::UI::Xaml::Controls::Maps::MapControlTransitFeatureClickEventArgs*, ABI::Windows::UI::Xaml::Controls::Maps::IMapControlTransitFeatureClickEventArgs*>>
{
    static const wchar_t* z_get_rc_name_impl()
    {
        return L"Windows.Foundation.TypedEventHandler`2<Windows.UI.Xaml.Controls.Maps.MapControl, Windows.UI.Xaml.Controls.Maps.MapControlTransitFeatureClickEventArgs>";
    }
};
// Define a typedef for the parameterized interface specialization's mangled name.
// This allows code which uses the mangled name for the parameterized interface to access the
// correct parameterized interface specialization.
typedef ITypedEventHandler<ABI::Windows::UI::Xaml::Controls::Maps::MapControl*, ABI::Windows::UI::Xaml::Controls::Maps::MapControlTransitFeatureClickEventArgs*> __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapControlTransitFeatureClickEventArgs_t;
#define __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapControlTransitFeatureClickEventArgs ABI::Windows::Foundation::__FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapControlTransitFeatureClickEventArgs_t
/* Foundation */ } /* Windows */ } /* ABI */ }

#endif // !defined(RO_NO_TEMPLATE_NAME)
#endif /* DEF___FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapControlTransitFeatureClickEventArgs_USE */

#endif // WINDOWS_SERVICES_MAPS_LOCALSEARCHCONTRACT_VERSION >= 0x20000
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

namespace ABI {
    namespace Windows {
        namespace UI {
            namespace Xaml {
                namespace Controls {
                    namespace Maps {
                        class MapControlTransitFeaturePointerEnteredEventArgs;
                    } /* Maps */
                } /* Controls */
            } /* Xaml */
        } /* UI */
    } /* Windows */
} /* ABI */

#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if WINDOWS_SERVICES_MAPS_LOCALSEARCHCONTRACT_VERSION >= 0x30000

#ifndef DEF___FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapControlTransitFeaturePointerEnteredEventArgs_USE
#define DEF___FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapControlTransitFeaturePointerEnteredEventArgs_USE
#if !defined(RO_NO_TEMPLATE_NAME)
namespace ABI { namespace Windows { namespace Foundation {
template <>
struct __declspec(uuid("166ea60b-ab70-580c-bb70-2f79ee214cea"))
ITypedEventHandler<ABI::Windows::UI::Xaml::Controls::Maps::MapControl*, ABI::Windows::UI::Xaml::Controls::Maps::MapControlTransitFeaturePointerEnteredEventArgs*> : ITypedEventHandler_impl<ABI::Windows::Foundation::Internal::AggregateType<ABI::Windows::UI::Xaml::Controls::Maps::MapControl*, ABI::Windows::UI::Xaml::Controls::Maps::IMapControl*>, ABI::Windows::Foundation::Internal::AggregateType<ABI::Windows::UI::Xaml::Controls::Maps::MapControlTransitFeaturePointerEnteredEventArgs*, ABI::Windows::UI::Xaml::Controls::Maps::IMapControlTransitFeaturePointerEnteredEventArgs*>>
{
    static const wchar_t* z_get_rc_name_impl()
    {
        return L"Windows.Foundation.TypedEventHandler`2<Windows.UI.Xaml.Controls.Maps.MapControl, Windows.UI.Xaml.Controls.Maps.MapControlTransitFeaturePointerEnteredEventArgs>";
    }
};
// Define a typedef for the parameterized interface specialization's mangled name.
// This allows code which uses the mangled name for the parameterized interface to access the
// correct parameterized interface specialization.
typedef ITypedEventHandler<ABI::Windows::UI::Xaml::Controls::Maps::MapControl*, ABI::Windows::UI::Xaml::Controls::Maps::MapControlTransitFeaturePointerEnteredEventArgs*> __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapControlTransitFeaturePointerEnteredEventArgs_t;
#define __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapControlTransitFeaturePointerEnteredEventArgs ABI::Windows::Foundation::__FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapControlTransitFeaturePointerEnteredEventArgs_t
/* Foundation */ } /* Windows */ } /* ABI */ }

#endif // !defined(RO_NO_TEMPLATE_NAME)
#endif /* DEF___FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapControlTransitFeaturePointerEnteredEventArgs_USE */

#endif // WINDOWS_SERVICES_MAPS_LOCALSEARCHCONTRACT_VERSION >= 0x30000
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

namespace ABI {
    namespace Windows {
        namespace UI {
            namespace Xaml {
                namespace Controls {
                    namespace Maps {
                        class MapControlTransitFeaturePointerExitedEventArgs;
                    } /* Maps */
                } /* Controls */
            } /* Xaml */
        } /* UI */
    } /* Windows */
} /* ABI */

#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if WINDOWS_SERVICES_MAPS_LOCALSEARCHCONTRACT_VERSION >= 0x30000

#ifndef DEF___FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapControlTransitFeaturePointerExitedEventArgs_USE
#define DEF___FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapControlTransitFeaturePointerExitedEventArgs_USE
#if !defined(RO_NO_TEMPLATE_NAME)
namespace ABI { namespace Windows { namespace Foundation {
template <>
struct __declspec(uuid("7553fcf8-a4c2-5cc1-9a3c-f0b36b756068"))
ITypedEventHandler<ABI::Windows::UI::Xaml::Controls::Maps::MapControl*, ABI::Windows::UI::Xaml::Controls::Maps::MapControlTransitFeaturePointerExitedEventArgs*> : ITypedEventHandler_impl<ABI::Windows::Foundation::Internal::AggregateType<ABI::Windows::UI::Xaml::Controls::Maps::MapControl*, ABI::Windows::UI::Xaml::Controls::Maps::IMapControl*>, ABI::Windows::Foundation::Internal::AggregateType<ABI::Windows::UI::Xaml::Controls::Maps::MapControlTransitFeaturePointerExitedEventArgs*, ABI::Windows::UI::Xaml::Controls::Maps::IMapControlTransitFeaturePointerExitedEventArgs*>>
{
    static const wchar_t* z_get_rc_name_impl()
    {
        return L"Windows.Foundation.TypedEventHandler`2<Windows.UI.Xaml.Controls.Maps.MapControl, Windows.UI.Xaml.Controls.Maps.MapControlTransitFeaturePointerExitedEventArgs>";
    }
};
// Define a typedef for the parameterized interface specialization's mangled name.
// This allows code which uses the mangled name for the parameterized interface to access the
// correct parameterized interface specialization.
typedef ITypedEventHandler<ABI::Windows::UI::Xaml::Controls::Maps::MapControl*, ABI::Windows::UI::Xaml::Controls::Maps::MapControlTransitFeaturePointerExitedEventArgs*> __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapControlTransitFeaturePointerExitedEventArgs_t;
#define __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapControlTransitFeaturePointerExitedEventArgs ABI::Windows::Foundation::__FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapControlTransitFeaturePointerExitedEventArgs_t
/* Foundation */ } /* Windows */ } /* ABI */ }

#endif // !defined(RO_NO_TEMPLATE_NAME)
#endif /* DEF___FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapControlTransitFeaturePointerExitedEventArgs_USE */

#endif // WINDOWS_SERVICES_MAPS_LOCALSEARCHCONTRACT_VERSION >= 0x30000
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

namespace ABI {
    namespace Windows {
        namespace UI {
            namespace Xaml {
                namespace Controls {
                    namespace Maps {
                        class MapControlTransitFeatureRightTappedEventArgs;
                    } /* Maps */
                } /* Controls */
            } /* Xaml */
        } /* UI */
    } /* Windows */
} /* ABI */

#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if WINDOWS_SERVICES_MAPS_LOCALSEARCHCONTRACT_VERSION >= 0x20000

#ifndef DEF___FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapControlTransitFeatureRightTappedEventArgs_USE
#define DEF___FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapControlTransitFeatureRightTappedEventArgs_USE
#if !defined(RO_NO_TEMPLATE_NAME)
namespace ABI { namespace Windows { namespace Foundation {
template <>
struct __declspec(uuid("a18b47d7-6326-5fc1-8a40-88af91bb0589"))
ITypedEventHandler<ABI::Windows::UI::Xaml::Controls::Maps::MapControl*, ABI::Windows::UI::Xaml::Controls::Maps::MapControlTransitFeatureRightTappedEventArgs*> : ITypedEventHandler_impl<ABI::Windows::Foundation::Internal::AggregateType<ABI::Windows::UI::Xaml::Controls::Maps::MapControl*, ABI::Windows::UI::Xaml::Controls::Maps::IMapControl*>, ABI::Windows::Foundation::Internal::AggregateType<ABI::Windows::UI::Xaml::Controls::Maps::MapControlTransitFeatureRightTappedEventArgs*, ABI::Windows::UI::Xaml::Controls::Maps::IMapControlTransitFeatureRightTappedEventArgs*>>
{
    static const wchar_t* z_get_rc_name_impl()
    {
        return L"Windows.Foundation.TypedEventHandler`2<Windows.UI.Xaml.Controls.Maps.MapControl, Windows.UI.Xaml.Controls.Maps.MapControlTransitFeatureRightTappedEventArgs>";
    }
};
// Define a typedef for the parameterized interface specialization's mangled name.
// This allows code which uses the mangled name for the parameterized interface to access the
// correct parameterized interface specialization.
typedef ITypedEventHandler<ABI::Windows::UI::Xaml::Controls::Maps::MapControl*, ABI::Windows::UI::Xaml::Controls::Maps::MapControlTransitFeatureRightTappedEventArgs*> __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapControlTransitFeatureRightTappedEventArgs_t;
#define __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapControlTransitFeatureRightTappedEventArgs ABI::Windows::Foundation::__FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapControlTransitFeatureRightTappedEventArgs_t
/* Foundation */ } /* Windows */ } /* ABI */ }

#endif // !defined(RO_NO_TEMPLATE_NAME)
#endif /* DEF___FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapControlTransitFeatureRightTappedEventArgs_USE */

#endif // WINDOWS_SERVICES_MAPS_LOCALSEARCHCONTRACT_VERSION >= 0x20000
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

namespace ABI {
    namespace Windows {
        namespace UI {
            namespace Xaml {
                namespace Controls {
                    namespace Maps {
                        class MapCustomExperienceChangedEventArgs;
                    } /* Maps */
                } /* Controls */
            } /* Xaml */
        } /* UI */
    } /* Windows */
} /* ABI */

#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

#ifndef DEF___FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapCustomExperienceChangedEventArgs_USE
#define DEF___FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapCustomExperienceChangedEventArgs_USE
#if !defined(RO_NO_TEMPLATE_NAME)
namespace ABI { namespace Windows { namespace Foundation {
template <>
struct __declspec(uuid("272cf26f-18da-599e-896f-3bfbf6fb1326"))
ITypedEventHandler<ABI::Windows::UI::Xaml::Controls::Maps::MapControl*, ABI::Windows::UI::Xaml::Controls::Maps::MapCustomExperienceChangedEventArgs*> : ITypedEventHandler_impl<ABI::Windows::Foundation::Internal::AggregateType<ABI::Windows::UI::Xaml::Controls::Maps::MapControl*, ABI::Windows::UI::Xaml::Controls::Maps::IMapControl*>, ABI::Windows::Foundation::Internal::AggregateType<ABI::Windows::UI::Xaml::Controls::Maps::MapCustomExperienceChangedEventArgs*, ABI::Windows::UI::Xaml::Controls::Maps::IMapCustomExperienceChangedEventArgs*>>
{
    static const wchar_t* z_get_rc_name_impl()
    {
        return L"Windows.Foundation.TypedEventHandler`2<Windows.UI.Xaml.Controls.Maps.MapControl, Windows.UI.Xaml.Controls.Maps.MapCustomExperienceChangedEventArgs>";
    }
};
// Define a typedef for the parameterized interface specialization's mangled name.
// This allows code which uses the mangled name for the parameterized interface to access the
// correct parameterized interface specialization.
typedef ITypedEventHandler<ABI::Windows::UI::Xaml::Controls::Maps::MapControl*, ABI::Windows::UI::Xaml::Controls::Maps::MapCustomExperienceChangedEventArgs*> __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapCustomExperienceChangedEventArgs_t;
#define __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapCustomExperienceChangedEventArgs ABI::Windows::Foundation::__FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapCustomExperienceChangedEventArgs_t
/* Foundation */ } /* Windows */ } /* ABI */ }

#endif // !defined(RO_NO_TEMPLATE_NAME)
#endif /* DEF___FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapCustomExperienceChangedEventArgs_USE */

#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

namespace ABI {
    namespace Windows {
        namespace UI {
            namespace Xaml {
                namespace Controls {
                    namespace Maps {
                        class MapElementClickEventArgs;
                    } /* Maps */
                } /* Controls */
            } /* Xaml */
        } /* UI */
    } /* Windows */
} /* ABI */

#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

#ifndef DEF___FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapElementClickEventArgs_USE
#define DEF___FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapElementClickEventArgs_USE
#if !defined(RO_NO_TEMPLATE_NAME)
namespace ABI { namespace Windows { namespace Foundation {
template <>
struct __declspec(uuid("4c7821a1-d570-597d-acc7-068853c4ab27"))
ITypedEventHandler<ABI::Windows::UI::Xaml::Controls::Maps::MapControl*, ABI::Windows::UI::Xaml::Controls::Maps::MapElementClickEventArgs*> : ITypedEventHandler_impl<ABI::Windows::Foundation::Internal::AggregateType<ABI::Windows::UI::Xaml::Controls::Maps::MapControl*, ABI::Windows::UI::Xaml::Controls::Maps::IMapControl*>, ABI::Windows::Foundation::Internal::AggregateType<ABI::Windows::UI::Xaml::Controls::Maps::MapElementClickEventArgs*, ABI::Windows::UI::Xaml::Controls::Maps::IMapElementClickEventArgs*>>
{
    static const wchar_t* z_get_rc_name_impl()
    {
        return L"Windows.Foundation.TypedEventHandler`2<Windows.UI.Xaml.Controls.Maps.MapControl, Windows.UI.Xaml.Controls.Maps.MapElementClickEventArgs>";
    }
};
// Define a typedef for the parameterized interface specialization's mangled name.
// This allows code which uses the mangled name for the parameterized interface to access the
// correct parameterized interface specialization.
typedef ITypedEventHandler<ABI::Windows::UI::Xaml::Controls::Maps::MapControl*, ABI::Windows::UI::Xaml::Controls::Maps::MapElementClickEventArgs*> __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapElementClickEventArgs_t;
#define __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapElementClickEventArgs ABI::Windows::Foundation::__FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapElementClickEventArgs_t
/* Foundation */ } /* Windows */ } /* ABI */ }

#endif // !defined(RO_NO_TEMPLATE_NAME)
#endif /* DEF___FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapElementClickEventArgs_USE */

#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

namespace ABI {
    namespace Windows {
        namespace UI {
            namespace Xaml {
                namespace Controls {
                    namespace Maps {
                        class MapElementPointerEnteredEventArgs;
                    } /* Maps */
                } /* Controls */
            } /* Xaml */
        } /* UI */
    } /* Windows */
} /* ABI */

#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

#ifndef DEF___FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapElementPointerEnteredEventArgs_USE
#define DEF___FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapElementPointerEnteredEventArgs_USE
#if !defined(RO_NO_TEMPLATE_NAME)
namespace ABI { namespace Windows { namespace Foundation {
template <>
struct __declspec(uuid("ca2638e5-7c33-5b90-9b66-273731fc7091"))
ITypedEventHandler<ABI::Windows::UI::Xaml::Controls::Maps::MapControl*, ABI::Windows::UI::Xaml::Controls::Maps::MapElementPointerEnteredEventArgs*> : ITypedEventHandler_impl<ABI::Windows::Foundation::Internal::AggregateType<ABI::Windows::UI::Xaml::Controls::Maps::MapControl*, ABI::Windows::UI::Xaml::Controls::Maps::IMapControl*>, ABI::Windows::Foundation::Internal::AggregateType<ABI::Windows::UI::Xaml::Controls::Maps::MapElementPointerEnteredEventArgs*, ABI::Windows::UI::Xaml::Controls::Maps::IMapElementPointerEnteredEventArgs*>>
{
    static const wchar_t* z_get_rc_name_impl()
    {
        return L"Windows.Foundation.TypedEventHandler`2<Windows.UI.Xaml.Controls.Maps.MapControl, Windows.UI.Xaml.Controls.Maps.MapElementPointerEnteredEventArgs>";
    }
};
// Define a typedef for the parameterized interface specialization's mangled name.
// This allows code which uses the mangled name for the parameterized interface to access the
// correct parameterized interface specialization.
typedef ITypedEventHandler<ABI::Windows::UI::Xaml::Controls::Maps::MapControl*, ABI::Windows::UI::Xaml::Controls::Maps::MapElementPointerEnteredEventArgs*> __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapElementPointerEnteredEventArgs_t;
#define __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapElementPointerEnteredEventArgs ABI::Windows::Foundation::__FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapElementPointerEnteredEventArgs_t
/* Foundation */ } /* Windows */ } /* ABI */ }

#endif // !defined(RO_NO_TEMPLATE_NAME)
#endif /* DEF___FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapElementPointerEnteredEventArgs_USE */

#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

namespace ABI {
    namespace Windows {
        namespace UI {
            namespace Xaml {
                namespace Controls {
                    namespace Maps {
                        class MapElementPointerExitedEventArgs;
                    } /* Maps */
                } /* Controls */
            } /* Xaml */
        } /* UI */
    } /* Windows */
} /* ABI */

#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

#ifndef DEF___FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapElementPointerExitedEventArgs_USE
#define DEF___FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapElementPointerExitedEventArgs_USE
#if !defined(RO_NO_TEMPLATE_NAME)
namespace ABI { namespace Windows { namespace Foundation {
template <>
struct __declspec(uuid("f6a7bfd1-2c79-5191-b382-75b141d18846"))
ITypedEventHandler<ABI::Windows::UI::Xaml::Controls::Maps::MapControl*, ABI::Windows::UI::Xaml::Controls::Maps::MapElementPointerExitedEventArgs*> : ITypedEventHandler_impl<ABI::Windows::Foundation::Internal::AggregateType<ABI::Windows::UI::Xaml::Controls::Maps::MapControl*, ABI::Windows::UI::Xaml::Controls::Maps::IMapControl*>, ABI::Windows::Foundation::Internal::AggregateType<ABI::Windows::UI::Xaml::Controls::Maps::MapElementPointerExitedEventArgs*, ABI::Windows::UI::Xaml::Controls::Maps::IMapElementPointerExitedEventArgs*>>
{
    static const wchar_t* z_get_rc_name_impl()
    {
        return L"Windows.Foundation.TypedEventHandler`2<Windows.UI.Xaml.Controls.Maps.MapControl, Windows.UI.Xaml.Controls.Maps.MapElementPointerExitedEventArgs>";
    }
};
// Define a typedef for the parameterized interface specialization's mangled name.
// This allows code which uses the mangled name for the parameterized interface to access the
// correct parameterized interface specialization.
typedef ITypedEventHandler<ABI::Windows::UI::Xaml::Controls::Maps::MapControl*, ABI::Windows::UI::Xaml::Controls::Maps::MapElementPointerExitedEventArgs*> __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapElementPointerExitedEventArgs_t;
#define __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapElementPointerExitedEventArgs ABI::Windows::Foundation::__FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapElementPointerExitedEventArgs_t
/* Foundation */ } /* Windows */ } /* ABI */ }

#endif // !defined(RO_NO_TEMPLATE_NAME)
#endif /* DEF___FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapElementPointerExitedEventArgs_USE */

#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

namespace ABI {
    namespace Windows {
        namespace UI {
            namespace Xaml {
                namespace Controls {
                    namespace Maps {
                        class MapInputEventArgs;
                    } /* Maps */
                } /* Controls */
            } /* Xaml */
        } /* UI */
    } /* Windows */
} /* ABI */

#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

#ifndef DEF___FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapInputEventArgs_USE
#define DEF___FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapInputEventArgs_USE
#if !defined(RO_NO_TEMPLATE_NAME)
namespace ABI { namespace Windows { namespace Foundation {
template <>
struct __declspec(uuid("b92f6816-4d0a-52c2-9868-94b5c942007e"))
ITypedEventHandler<ABI::Windows::UI::Xaml::Controls::Maps::MapControl*, ABI::Windows::UI::Xaml::Controls::Maps::MapInputEventArgs*> : ITypedEventHandler_impl<ABI::Windows::Foundation::Internal::AggregateType<ABI::Windows::UI::Xaml::Controls::Maps::MapControl*, ABI::Windows::UI::Xaml::Controls::Maps::IMapControl*>, ABI::Windows::Foundation::Internal::AggregateType<ABI::Windows::UI::Xaml::Controls::Maps::MapInputEventArgs*, ABI::Windows::UI::Xaml::Controls::Maps::IMapInputEventArgs*>>
{
    static const wchar_t* z_get_rc_name_impl()
    {
        return L"Windows.Foundation.TypedEventHandler`2<Windows.UI.Xaml.Controls.Maps.MapControl, Windows.UI.Xaml.Controls.Maps.MapInputEventArgs>";
    }
};
// Define a typedef for the parameterized interface specialization's mangled name.
// This allows code which uses the mangled name for the parameterized interface to access the
// correct parameterized interface specialization.
typedef ITypedEventHandler<ABI::Windows::UI::Xaml::Controls::Maps::MapControl*, ABI::Windows::UI::Xaml::Controls::Maps::MapInputEventArgs*> __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapInputEventArgs_t;
#define __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapInputEventArgs ABI::Windows::Foundation::__FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapInputEventArgs_t
/* Foundation */ } /* Windows */ } /* ABI */ }

#endif // !defined(RO_NO_TEMPLATE_NAME)
#endif /* DEF___FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapInputEventArgs_USE */

#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

namespace ABI {
    namespace Windows {
        namespace UI {
            namespace Xaml {
                namespace Controls {
                    namespace Maps {
                        class MapRightTappedEventArgs;
                    } /* Maps */
                } /* Controls */
            } /* Xaml */
        } /* UI */
    } /* Windows */
} /* ABI */

#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x20000

#ifndef DEF___FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapRightTappedEventArgs_USE
#define DEF___FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapRightTappedEventArgs_USE
#if !defined(RO_NO_TEMPLATE_NAME)
namespace ABI { namespace Windows { namespace Foundation {
template <>
struct __declspec(uuid("efc52f2d-ad6b-59af-a0f0-2253d434414f"))
ITypedEventHandler<ABI::Windows::UI::Xaml::Controls::Maps::MapControl*, ABI::Windows::UI::Xaml::Controls::Maps::MapRightTappedEventArgs*> : ITypedEventHandler_impl<ABI::Windows::Foundation::Internal::AggregateType<ABI::Windows::UI::Xaml::Controls::Maps::MapControl*, ABI::Windows::UI::Xaml::Controls::Maps::IMapControl*>, ABI::Windows::Foundation::Internal::AggregateType<ABI::Windows::UI::Xaml::Controls::Maps::MapRightTappedEventArgs*, ABI::Windows::UI::Xaml::Controls::Maps::IMapRightTappedEventArgs*>>
{
    static const wchar_t* z_get_rc_name_impl()
    {
        return L"Windows.Foundation.TypedEventHandler`2<Windows.UI.Xaml.Controls.Maps.MapControl, Windows.UI.Xaml.Controls.Maps.MapRightTappedEventArgs>";
    }
};
// Define a typedef for the parameterized interface specialization's mangled name.
// This allows code which uses the mangled name for the parameterized interface to access the
// correct parameterized interface specialization.
typedef ITypedEventHandler<ABI::Windows::UI::Xaml::Controls::Maps::MapControl*, ABI::Windows::UI::Xaml::Controls::Maps::MapRightTappedEventArgs*> __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapRightTappedEventArgs_t;
#define __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapRightTappedEventArgs ABI::Windows::Foundation::__FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapRightTappedEventArgs_t
/* Foundation */ } /* Windows */ } /* ABI */ }

#endif // !defined(RO_NO_TEMPLATE_NAME)
#endif /* DEF___FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapRightTappedEventArgs_USE */

#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x20000
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

namespace ABI {
    namespace Windows {
        namespace UI {
            namespace Xaml {
                namespace Controls {
                    namespace Maps {
                        class MapTargetCameraChangedEventArgs;
                    } /* Maps */
                } /* Controls */
            } /* Xaml */
        } /* UI */
    } /* Windows */
} /* ABI */

#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

#ifndef DEF___FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapTargetCameraChangedEventArgs_USE
#define DEF___FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapTargetCameraChangedEventArgs_USE
#if !defined(RO_NO_TEMPLATE_NAME)
namespace ABI { namespace Windows { namespace Foundation {
template <>
struct __declspec(uuid("2671c2dd-e212-5e43-80e2-ab6ff3f3086c"))
ITypedEventHandler<ABI::Windows::UI::Xaml::Controls::Maps::MapControl*, ABI::Windows::UI::Xaml::Controls::Maps::MapTargetCameraChangedEventArgs*> : ITypedEventHandler_impl<ABI::Windows::Foundation::Internal::AggregateType<ABI::Windows::UI::Xaml::Controls::Maps::MapControl*, ABI::Windows::UI::Xaml::Controls::Maps::IMapControl*>, ABI::Windows::Foundation::Internal::AggregateType<ABI::Windows::UI::Xaml::Controls::Maps::MapTargetCameraChangedEventArgs*, ABI::Windows::UI::Xaml::Controls::Maps::IMapTargetCameraChangedEventArgs*>>
{
    static const wchar_t* z_get_rc_name_impl()
    {
        return L"Windows.Foundation.TypedEventHandler`2<Windows.UI.Xaml.Controls.Maps.MapControl, Windows.UI.Xaml.Controls.Maps.MapTargetCameraChangedEventArgs>";
    }
};
// Define a typedef for the parameterized interface specialization's mangled name.
// This allows code which uses the mangled name for the parameterized interface to access the
// correct parameterized interface specialization.
typedef ITypedEventHandler<ABI::Windows::UI::Xaml::Controls::Maps::MapControl*, ABI::Windows::UI::Xaml::Controls::Maps::MapTargetCameraChangedEventArgs*> __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapTargetCameraChangedEventArgs_t;
#define __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapTargetCameraChangedEventArgs ABI::Windows::Foundation::__FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapTargetCameraChangedEventArgs_t
/* Foundation */ } /* Windows */ } /* ABI */ }

#endif // !defined(RO_NO_TEMPLATE_NAME)
#endif /* DEF___FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapTargetCameraChangedEventArgs_USE */

#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

namespace ABI {
    namespace Windows {
        namespace UI {
            namespace Xaml {
                namespace Controls {
                    namespace Maps {
                        class MapElementsLayer;
                    } /* Maps */
                } /* Controls */
            } /* Xaml */
        } /* UI */
    } /* Windows */
} /* ABI */

namespace ABI {
    namespace Windows {
        namespace UI {
            namespace Xaml {
                namespace Controls {
                    namespace Maps {
                        class MapElementsLayerClickEventArgs;
                    } /* Maps */
                } /* Controls */
            } /* Xaml */
        } /* UI */
    } /* Windows */
} /* ABI */

#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x50000
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x50000

#ifndef DEF___FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapElementsLayer_Windows__CUI__CXaml__CControls__CMaps__CMapElementsLayerClickEventArgs_USE
#define DEF___FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapElementsLayer_Windows__CUI__CXaml__CControls__CMaps__CMapElementsLayerClickEventArgs_USE
#if !defined(RO_NO_TEMPLATE_NAME)
namespace ABI { namespace Windows { namespace Foundation {
template <>
struct __declspec(uuid("d3ee3faa-6a6f-576a-9900-528e8eba9286"))
ITypedEventHandler<ABI::Windows::UI::Xaml::Controls::Maps::MapElementsLayer*, ABI::Windows::UI::Xaml::Controls::Maps::MapElementsLayerClickEventArgs*> : ITypedEventHandler_impl<ABI::Windows::Foundation::Internal::AggregateType<ABI::Windows::UI::Xaml::Controls::Maps::MapElementsLayer*, ABI::Windows::UI::Xaml::Controls::Maps::IMapElementsLayer*>, ABI::Windows::Foundation::Internal::AggregateType<ABI::Windows::UI::Xaml::Controls::Maps::MapElementsLayerClickEventArgs*, ABI::Windows::UI::Xaml::Controls::Maps::IMapElementsLayerClickEventArgs*>>
{
    static const wchar_t* z_get_rc_name_impl()
    {
        return L"Windows.Foundation.TypedEventHandler`2<Windows.UI.Xaml.Controls.Maps.MapElementsLayer, Windows.UI.Xaml.Controls.Maps.MapElementsLayerClickEventArgs>";
    }
};
// Define a typedef for the parameterized interface specialization's mangled name.
// This allows code which uses the mangled name for the parameterized interface to access the
// correct parameterized interface specialization.
typedef ITypedEventHandler<ABI::Windows::UI::Xaml::Controls::Maps::MapElementsLayer*, ABI::Windows::UI::Xaml::Controls::Maps::MapElementsLayerClickEventArgs*> __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapElementsLayer_Windows__CUI__CXaml__CControls__CMaps__CMapElementsLayerClickEventArgs_t;
#define __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapElementsLayer_Windows__CUI__CXaml__CControls__CMaps__CMapElementsLayerClickEventArgs ABI::Windows::Foundation::__FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapElementsLayer_Windows__CUI__CXaml__CControls__CMaps__CMapElementsLayerClickEventArgs_t
/* Foundation */ } /* Windows */ } /* ABI */ }

#endif // !defined(RO_NO_TEMPLATE_NAME)
#endif /* DEF___FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapElementsLayer_Windows__CUI__CXaml__CControls__CMaps__CMapElementsLayerClickEventArgs_USE */

#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x50000
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x50000

namespace ABI {
    namespace Windows {
        namespace UI {
            namespace Xaml {
                namespace Controls {
                    namespace Maps {
                        class MapElementsLayerContextRequestedEventArgs;
                    } /* Maps */
                } /* Controls */
            } /* Xaml */
        } /* UI */
    } /* Windows */
} /* ABI */

#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x50000
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x50000

#ifndef DEF___FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapElementsLayer_Windows__CUI__CXaml__CControls__CMaps__CMapElementsLayerContextRequestedEventArgs_USE
#define DEF___FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapElementsLayer_Windows__CUI__CXaml__CControls__CMaps__CMapElementsLayerContextRequestedEventArgs_USE
#if !defined(RO_NO_TEMPLATE_NAME)
namespace ABI { namespace Windows { namespace Foundation {
template <>
struct __declspec(uuid("d4c7eced-5053-5d3c-8cfa-fb19dbde4a3a"))
ITypedEventHandler<ABI::Windows::UI::Xaml::Controls::Maps::MapElementsLayer*, ABI::Windows::UI::Xaml::Controls::Maps::MapElementsLayerContextRequestedEventArgs*> : ITypedEventHandler_impl<ABI::Windows::Foundation::Internal::AggregateType<ABI::Windows::UI::Xaml::Controls::Maps::MapElementsLayer*, ABI::Windows::UI::Xaml::Controls::Maps::IMapElementsLayer*>, ABI::Windows::Foundation::Internal::AggregateType<ABI::Windows::UI::Xaml::Controls::Maps::MapElementsLayerContextRequestedEventArgs*, ABI::Windows::UI::Xaml::Controls::Maps::IMapElementsLayerContextRequestedEventArgs*>>
{
    static const wchar_t* z_get_rc_name_impl()
    {
        return L"Windows.Foundation.TypedEventHandler`2<Windows.UI.Xaml.Controls.Maps.MapElementsLayer, Windows.UI.Xaml.Controls.Maps.MapElementsLayerContextRequestedEventArgs>";
    }
};
// Define a typedef for the parameterized interface specialization's mangled name.
// This allows code which uses the mangled name for the parameterized interface to access the
// correct parameterized interface specialization.
typedef ITypedEventHandler<ABI::Windows::UI::Xaml::Controls::Maps::MapElementsLayer*, ABI::Windows::UI::Xaml::Controls::Maps::MapElementsLayerContextRequestedEventArgs*> __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapElementsLayer_Windows__CUI__CXaml__CControls__CMaps__CMapElementsLayerContextRequestedEventArgs_t;
#define __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapElementsLayer_Windows__CUI__CXaml__CControls__CMaps__CMapElementsLayerContextRequestedEventArgs ABI::Windows::Foundation::__FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapElementsLayer_Windows__CUI__CXaml__CControls__CMaps__CMapElementsLayerContextRequestedEventArgs_t
/* Foundation */ } /* Windows */ } /* ABI */ }

#endif // !defined(RO_NO_TEMPLATE_NAME)
#endif /* DEF___FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapElementsLayer_Windows__CUI__CXaml__CControls__CMaps__CMapElementsLayerContextRequestedEventArgs_USE */

#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x50000
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x50000

namespace ABI {
    namespace Windows {
        namespace UI {
            namespace Xaml {
                namespace Controls {
                    namespace Maps {
                        class MapElementsLayerPointerEnteredEventArgs;
                    } /* Maps */
                } /* Controls */
            } /* Xaml */
        } /* UI */
    } /* Windows */
} /* ABI */

#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x50000
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x50000

#ifndef DEF___FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapElementsLayer_Windows__CUI__CXaml__CControls__CMaps__CMapElementsLayerPointerEnteredEventArgs_USE
#define DEF___FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapElementsLayer_Windows__CUI__CXaml__CControls__CMaps__CMapElementsLayerPointerEnteredEventArgs_USE
#if !defined(RO_NO_TEMPLATE_NAME)
namespace ABI { namespace Windows { namespace Foundation {
template <>
struct __declspec(uuid("3622cf53-117c-5605-b142-fe47d874e26b"))
ITypedEventHandler<ABI::Windows::UI::Xaml::Controls::Maps::MapElementsLayer*, ABI::Windows::UI::Xaml::Controls::Maps::MapElementsLayerPointerEnteredEventArgs*> : ITypedEventHandler_impl<ABI::Windows::Foundation::Internal::AggregateType<ABI::Windows::UI::Xaml::Controls::Maps::MapElementsLayer*, ABI::Windows::UI::Xaml::Controls::Maps::IMapElementsLayer*>, ABI::Windows::Foundation::Internal::AggregateType<ABI::Windows::UI::Xaml::Controls::Maps::MapElementsLayerPointerEnteredEventArgs*, ABI::Windows::UI::Xaml::Controls::Maps::IMapElementsLayerPointerEnteredEventArgs*>>
{
    static const wchar_t* z_get_rc_name_impl()
    {
        return L"Windows.Foundation.TypedEventHandler`2<Windows.UI.Xaml.Controls.Maps.MapElementsLayer, Windows.UI.Xaml.Controls.Maps.MapElementsLayerPointerEnteredEventArgs>";
    }
};
// Define a typedef for the parameterized interface specialization's mangled name.
// This allows code which uses the mangled name for the parameterized interface to access the
// correct parameterized interface specialization.
typedef ITypedEventHandler<ABI::Windows::UI::Xaml::Controls::Maps::MapElementsLayer*, ABI::Windows::UI::Xaml::Controls::Maps::MapElementsLayerPointerEnteredEventArgs*> __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapElementsLayer_Windows__CUI__CXaml__CControls__CMaps__CMapElementsLayerPointerEnteredEventArgs_t;
#define __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapElementsLayer_Windows__CUI__CXaml__CControls__CMaps__CMapElementsLayerPointerEnteredEventArgs ABI::Windows::Foundation::__FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapElementsLayer_Windows__CUI__CXaml__CControls__CMaps__CMapElementsLayerPointerEnteredEventArgs_t
/* Foundation */ } /* Windows */ } /* ABI */ }

#endif // !defined(RO_NO_TEMPLATE_NAME)
#endif /* DEF___FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapElementsLayer_Windows__CUI__CXaml__CControls__CMaps__CMapElementsLayerPointerEnteredEventArgs_USE */

#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x50000
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x50000

namespace ABI {
    namespace Windows {
        namespace UI {
            namespace Xaml {
                namespace Controls {
                    namespace Maps {
                        class MapElementsLayerPointerExitedEventArgs;
                    } /* Maps */
                } /* Controls */
            } /* Xaml */
        } /* UI */
    } /* Windows */
} /* ABI */

#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x50000
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x50000

#ifndef DEF___FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapElementsLayer_Windows__CUI__CXaml__CControls__CMaps__CMapElementsLayerPointerExitedEventArgs_USE
#define DEF___FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapElementsLayer_Windows__CUI__CXaml__CControls__CMaps__CMapElementsLayerPointerExitedEventArgs_USE
#if !defined(RO_NO_TEMPLATE_NAME)
namespace ABI { namespace Windows { namespace Foundation {
template <>
struct __declspec(uuid("d54471d2-03dd-5698-a92f-5fac8a5e7668"))
ITypedEventHandler<ABI::Windows::UI::Xaml::Controls::Maps::MapElementsLayer*, ABI::Windows::UI::Xaml::Controls::Maps::MapElementsLayerPointerExitedEventArgs*> : ITypedEventHandler_impl<ABI::Windows::Foundation::Internal::AggregateType<ABI::Windows::UI::Xaml::Controls::Maps::MapElementsLayer*, ABI::Windows::UI::Xaml::Controls::Maps::IMapElementsLayer*>, ABI::Windows::Foundation::Internal::AggregateType<ABI::Windows::UI::Xaml::Controls::Maps::MapElementsLayerPointerExitedEventArgs*, ABI::Windows::UI::Xaml::Controls::Maps::IMapElementsLayerPointerExitedEventArgs*>>
{
    static const wchar_t* z_get_rc_name_impl()
    {
        return L"Windows.Foundation.TypedEventHandler`2<Windows.UI.Xaml.Controls.Maps.MapElementsLayer, Windows.UI.Xaml.Controls.Maps.MapElementsLayerPointerExitedEventArgs>";
    }
};
// Define a typedef for the parameterized interface specialization's mangled name.
// This allows code which uses the mangled name for the parameterized interface to access the
// correct parameterized interface specialization.
typedef ITypedEventHandler<ABI::Windows::UI::Xaml::Controls::Maps::MapElementsLayer*, ABI::Windows::UI::Xaml::Controls::Maps::MapElementsLayerPointerExitedEventArgs*> __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapElementsLayer_Windows__CUI__CXaml__CControls__CMaps__CMapElementsLayerPointerExitedEventArgs_t;
#define __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapElementsLayer_Windows__CUI__CXaml__CControls__CMaps__CMapElementsLayerPointerExitedEventArgs ABI::Windows::Foundation::__FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapElementsLayer_Windows__CUI__CXaml__CControls__CMaps__CMapElementsLayerPointerExitedEventArgs_t
/* Foundation */ } /* Windows */ } /* ABI */ }

#endif // !defined(RO_NO_TEMPLATE_NAME)
#endif /* DEF___FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapElementsLayer_Windows__CUI__CXaml__CControls__CMaps__CMapElementsLayerPointerExitedEventArgs_USE */

#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x50000
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x50000

namespace ABI {
    namespace Windows {
        namespace UI {
            namespace Xaml {
                namespace Controls {
                    namespace Maps {
                        class MapScene;
                    } /* Maps */
                } /* Controls */
            } /* Xaml */
        } /* UI */
    } /* Windows */
} /* ABI */

#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

#ifndef DEF___FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapScene_Windows__CUI__CXaml__CControls__CMaps__CMapTargetCameraChangedEventArgs_USE
#define DEF___FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapScene_Windows__CUI__CXaml__CControls__CMaps__CMapTargetCameraChangedEventArgs_USE
#if !defined(RO_NO_TEMPLATE_NAME)
namespace ABI { namespace Windows { namespace Foundation {
template <>
struct __declspec(uuid("766ed4a8-e810-5f78-bc96-9aff9f58cfca"))
ITypedEventHandler<ABI::Windows::UI::Xaml::Controls::Maps::MapScene*, ABI::Windows::UI::Xaml::Controls::Maps::MapTargetCameraChangedEventArgs*> : ITypedEventHandler_impl<ABI::Windows::Foundation::Internal::AggregateType<ABI::Windows::UI::Xaml::Controls::Maps::MapScene*, ABI::Windows::UI::Xaml::Controls::Maps::IMapScene*>, ABI::Windows::Foundation::Internal::AggregateType<ABI::Windows::UI::Xaml::Controls::Maps::MapTargetCameraChangedEventArgs*, ABI::Windows::UI::Xaml::Controls::Maps::IMapTargetCameraChangedEventArgs*>>
{
    static const wchar_t* z_get_rc_name_impl()
    {
        return L"Windows.Foundation.TypedEventHandler`2<Windows.UI.Xaml.Controls.Maps.MapScene, Windows.UI.Xaml.Controls.Maps.MapTargetCameraChangedEventArgs>";
    }
};
// Define a typedef for the parameterized interface specialization's mangled name.
// This allows code which uses the mangled name for the parameterized interface to access the
// correct parameterized interface specialization.
typedef ITypedEventHandler<ABI::Windows::UI::Xaml::Controls::Maps::MapScene*, ABI::Windows::UI::Xaml::Controls::Maps::MapTargetCameraChangedEventArgs*> __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapScene_Windows__CUI__CXaml__CControls__CMaps__CMapTargetCameraChangedEventArgs_t;
#define __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapScene_Windows__CUI__CXaml__CControls__CMaps__CMapTargetCameraChangedEventArgs ABI::Windows::Foundation::__FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapScene_Windows__CUI__CXaml__CControls__CMaps__CMapTargetCameraChangedEventArgs_t
/* Foundation */ } /* Windows */ } /* ABI */ }

#endif // !defined(RO_NO_TEMPLATE_NAME)
#endif /* DEF___FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapScene_Windows__CUI__CXaml__CControls__CMaps__CMapTargetCameraChangedEventArgs_USE */

#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

namespace ABI {
    namespace Windows {
        namespace Devices {
            namespace Geolocation {
                typedef enum AltitudeReferenceSystem : int AltitudeReferenceSystem;
            } /* Geolocation */
        } /* Devices */
    } /* Windows */
} /* ABI */

namespace ABI {
    namespace Windows {
        namespace Devices {
            namespace Geolocation {
                class GeoboundingBox;
            } /* Geolocation */
        } /* Devices */
    } /* Windows */
} /* ABI */

#ifndef ____x_ABI_CWindows_CDevices_CGeolocation_CIGeoboundingBox_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CGeolocation_CIGeoboundingBox_FWD_DEFINED__
namespace ABI {
    namespace Windows {
        namespace Devices {
            namespace Geolocation {
                interface IGeoboundingBox;
            } /* Geolocation */
        } /* Devices */
    } /* Windows */
} /* ABI */
#define __x_ABI_CWindows_CDevices_CGeolocation_CIGeoboundingBox ABI::Windows::Devices::Geolocation::IGeoboundingBox

#endif // ____x_ABI_CWindows_CDevices_CGeolocation_CIGeoboundingBox_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CFoundation_CIPropertyValue_FWD_DEFINED__
#define ____x_ABI_CWindows_CFoundation_CIPropertyValue_FWD_DEFINED__
namespace ABI {
    namespace Windows {
        namespace Foundation {
            interface IPropertyValue;
        } /* Foundation */
    } /* Windows */
} /* ABI */
#define __x_ABI_CWindows_CFoundation_CIPropertyValue ABI::Windows::Foundation::IPropertyValue

#endif // ____x_ABI_CWindows_CFoundation_CIPropertyValue_FWD_DEFINED__

namespace ABI {
    namespace Windows {
        namespace Foundation {
            namespace Numerics {
                typedef struct Vector3 Vector3;
            } /* Numerics */
        } /* Foundation */
    } /* Windows */
} /* ABI */

namespace ABI {
    namespace Windows {
        namespace Foundation {
            typedef struct Point Point;
        } /* Foundation */
    } /* Windows */
} /* ABI */

namespace ABI {
    namespace Windows {
        namespace Foundation {
            typedef struct TimeSpan TimeSpan;
        } /* Foundation */
    } /* Windows */
} /* ABI */

namespace ABI {
    namespace Windows {
        namespace Foundation {
            class Uri;
        } /* Foundation */
    } /* Windows */
} /* ABI */

#ifndef ____x_ABI_CWindows_CFoundation_CIUriRuntimeClass_FWD_DEFINED__
#define ____x_ABI_CWindows_CFoundation_CIUriRuntimeClass_FWD_DEFINED__
namespace ABI {
    namespace Windows {
        namespace Foundation {
            interface IUriRuntimeClass;
        } /* Foundation */
    } /* Windows */
} /* ABI */
#define __x_ABI_CWindows_CFoundation_CIUriRuntimeClass ABI::Windows::Foundation::IUriRuntimeClass

#endif // ____x_ABI_CWindows_CFoundation_CIUriRuntimeClass_FWD_DEFINED__

namespace ABI {
    namespace Windows {
        namespace Services {
            namespace Maps {
                class MapRoute;
            } /* Maps */
        } /* Services */
    } /* Windows */
} /* ABI */

#ifndef ____x_ABI_CWindows_CServices_CMaps_CIMapRoute_FWD_DEFINED__
#define ____x_ABI_CWindows_CServices_CMaps_CIMapRoute_FWD_DEFINED__
namespace ABI {
    namespace Windows {
        namespace Services {
            namespace Maps {
                interface IMapRoute;
            } /* Maps */
        } /* Services */
    } /* Windows */
} /* ABI */
#define __x_ABI_CWindows_CServices_CMaps_CIMapRoute ABI::Windows::Services::Maps::IMapRoute

#endif // ____x_ABI_CWindows_CServices_CMaps_CIMapRoute_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CStorage_CStreams_CIRandomAccessStreamReference_FWD_DEFINED__
#define ____x_ABI_CWindows_CStorage_CStreams_CIRandomAccessStreamReference_FWD_DEFINED__
namespace ABI {
    namespace Windows {
        namespace Storage {
            namespace Streams {
                interface IRandomAccessStreamReference;
            } /* Streams */
        } /* Storage */
    } /* Windows */
} /* ABI */
#define __x_ABI_CWindows_CStorage_CStreams_CIRandomAccessStreamReference ABI::Windows::Storage::Streams::IRandomAccessStreamReference

#endif // ____x_ABI_CWindows_CStorage_CStreams_CIRandomAccessStreamReference_FWD_DEFINED__

namespace ABI {
    namespace Windows {
        namespace UI {
            typedef struct Color Color;
        } /* UI */
    } /* Windows */
} /* ABI */

namespace ABI {
    namespace Windows {
        namespace UI {
            namespace Xaml {
                class DataTemplate;
            } /* Xaml */
        } /* UI */
    } /* Windows */
} /* ABI */

#ifndef ____x_ABI_CWindows_CUI_CXaml_CIDataTemplate_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CIDataTemplate_FWD_DEFINED__
namespace ABI {
    namespace Windows {
        namespace UI {
            namespace Xaml {
                interface IDataTemplate;
            } /* Xaml */
        } /* UI */
    } /* Windows */
} /* ABI */
#define __x_ABI_CWindows_CUI_CXaml_CIDataTemplate ABI::Windows::UI::Xaml::IDataTemplate

#endif // ____x_ABI_CWindows_CUI_CXaml_CIDataTemplate_FWD_DEFINED__

namespace ABI {
    namespace Windows {
        namespace UI {
            namespace Xaml {
                class DependencyProperty;
            } /* Xaml */
        } /* UI */
    } /* Windows */
} /* ABI */

#ifndef ____x_ABI_CWindows_CUI_CXaml_CIDependencyProperty_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CIDependencyProperty_FWD_DEFINED__
namespace ABI {
    namespace Windows {
        namespace UI {
            namespace Xaml {
                interface IDependencyProperty;
            } /* Xaml */
        } /* UI */
    } /* Windows */
} /* ABI */
#define __x_ABI_CWindows_CUI_CXaml_CIDependencyProperty ABI::Windows::UI::Xaml::IDependencyProperty

#endif // ____x_ABI_CWindows_CUI_CXaml_CIDependencyProperty_FWD_DEFINED__

namespace ABI {
    namespace Windows {
        namespace UI {
            namespace Xaml {
                namespace Controls {
                    namespace Maps {
                        typedef enum MapAnimationKind : int MapAnimationKind;
                    } /* Maps */
                } /* Controls */
            } /* Xaml */
        } /* UI */
    } /* Windows */
} /* ABI */

namespace ABI {
    namespace Windows {
        namespace UI {
            namespace Xaml {
                namespace Controls {
                    namespace Maps {
                        typedef enum MapCameraChangeReason : int MapCameraChangeReason;
                    } /* Maps */
                } /* Controls */
            } /* Xaml */
        } /* UI */
    } /* Windows */
} /* ABI */

namespace ABI {
    namespace Windows {
        namespace UI {
            namespace Xaml {
                namespace Controls {
                    namespace Maps {
                        typedef enum MapColorScheme : int MapColorScheme;
                    } /* Maps */
                } /* Controls */
            } /* Xaml */
        } /* UI */
    } /* Windows */
} /* ABI */

namespace ABI {
    namespace Windows {
        namespace UI {
            namespace Xaml {
                namespace Controls {
                    namespace Maps {
                        typedef enum MapElementCollisionBehavior : int MapElementCollisionBehavior;
                    } /* Maps */
                } /* Controls */
            } /* Xaml */
        } /* UI */
    } /* Windows */
} /* ABI */

namespace ABI {
    namespace Windows {
        namespace UI {
            namespace Xaml {
                namespace Controls {
                    namespace Maps {
                        typedef enum MapInteractionMode : int MapInteractionMode;
                    } /* Maps */
                } /* Controls */
            } /* Xaml */
        } /* UI */
    } /* Windows */
} /* ABI */

namespace ABI {
    namespace Windows {
        namespace UI {
            namespace Xaml {
                namespace Controls {
                    namespace Maps {
                        typedef enum MapLoadingStatus : int MapLoadingStatus;
                    } /* Maps */
                } /* Controls */
            } /* Xaml */
        } /* UI */
    } /* Windows */
} /* ABI */

namespace ABI {
    namespace Windows {
        namespace UI {
            namespace Xaml {
                namespace Controls {
                    namespace Maps {
                        typedef enum MapModel3DShadingOption : int MapModel3DShadingOption;
                    } /* Maps */
                } /* Controls */
            } /* Xaml */
        } /* UI */
    } /* Windows */
} /* ABI */

namespace ABI {
    namespace Windows {
        namespace UI {
            namespace Xaml {
                namespace Controls {
                    namespace Maps {
                        typedef enum MapPanInteractionMode : int MapPanInteractionMode;
                    } /* Maps */
                } /* Controls */
            } /* Xaml */
        } /* UI */
    } /* Windows */
} /* ABI */

namespace ABI {
    namespace Windows {
        namespace UI {
            namespace Xaml {
                namespace Controls {
                    namespace Maps {
                        typedef enum MapProjection : int MapProjection;
                    } /* Maps */
                } /* Controls */
            } /* Xaml */
        } /* UI */
    } /* Windows */
} /* ABI */

namespace ABI {
    namespace Windows {
        namespace UI {
            namespace Xaml {
                namespace Controls {
                    namespace Maps {
                        typedef enum MapStyle : int MapStyle;
                    } /* Maps */
                } /* Controls */
            } /* Xaml */
        } /* UI */
    } /* Windows */
} /* ABI */

namespace ABI {
    namespace Windows {
        namespace UI {
            namespace Xaml {
                namespace Controls {
                    namespace Maps {
                        typedef enum MapTileAnimationState : int MapTileAnimationState;
                    } /* Maps */
                } /* Controls */
            } /* Xaml */
        } /* UI */
    } /* Windows */
} /* ABI */

namespace ABI {
    namespace Windows {
        namespace UI {
            namespace Xaml {
                namespace Controls {
                    namespace Maps {
                        typedef enum MapTileLayer : int MapTileLayer;
                    } /* Maps */
                } /* Controls */
            } /* Xaml */
        } /* UI */
    } /* Windows */
} /* ABI */

namespace ABI {
    namespace Windows {
        namespace UI {
            namespace Xaml {
                namespace Controls {
                    namespace Maps {
                        typedef enum MapVisibleRegionKind : int MapVisibleRegionKind;
                    } /* Maps */
                } /* Controls */
            } /* Xaml */
        } /* UI */
    } /* Windows */
} /* ABI */

namespace ABI {
    namespace Windows {
        namespace UI {
            namespace Xaml {
                namespace Controls {
                    namespace Maps {
                        typedef enum MapWatermarkMode : int MapWatermarkMode;
                    } /* Maps */
                } /* Controls */
            } /* Xaml */
        } /* UI */
    } /* Windows */
} /* ABI */

namespace ABI {
    namespace Windows {
        namespace UI {
            namespace Xaml {
                namespace Controls {
                    namespace Maps {
                        typedef struct MapZoomLevelRange MapZoomLevelRange;
                    } /* Maps */
                } /* Controls */
            } /* Xaml */
        } /* UI */
    } /* Windows */
} /* ABI */

namespace ABI {
    namespace Windows {
        namespace UI {
            namespace Xaml {
                namespace Controls {
                    namespace Maps {
                        class MapBillboard;
                    } /* Maps */
                } /* Controls */
            } /* Xaml */
        } /* UI */
    } /* Windows */
} /* ABI */

namespace ABI {
    namespace Windows {
        namespace UI {
            namespace Xaml {
                namespace Controls {
                    namespace Maps {
                        class MapCamera;
                    } /* Maps */
                } /* Controls */
            } /* Xaml */
        } /* UI */
    } /* Windows */
} /* ABI */

namespace ABI {
    namespace Windows {
        namespace UI {
            namespace Xaml {
                namespace Controls {
                    namespace Maps {
                        class MapControlDataHelper;
                    } /* Maps */
                } /* Controls */
            } /* Xaml */
        } /* UI */
    } /* Windows */
} /* ABI */

namespace ABI {
    namespace Windows {
        namespace UI {
            namespace Xaml {
                namespace Controls {
                    namespace Maps {
                        class MapCustomExperience;
                    } /* Maps */
                } /* Controls */
            } /* Xaml */
        } /* UI */
    } /* Windows */
} /* ABI */

namespace ABI {
    namespace Windows {
        namespace UI {
            namespace Xaml {
                namespace Controls {
                    namespace Maps {
                        class MapTileBitmapRequest;
                    } /* Maps */
                } /* Controls */
            } /* Xaml */
        } /* UI */
    } /* Windows */
} /* ABI */

namespace ABI {
    namespace Windows {
        namespace UI {
            namespace Xaml {
                namespace Controls {
                    namespace Maps {
                        class MapTileBitmapRequestDeferral;
                    } /* Maps */
                } /* Controls */
            } /* Xaml */
        } /* UI */
    } /* Windows */
} /* ABI */

namespace ABI {
    namespace Windows {
        namespace UI {
            namespace Xaml {
                namespace Controls {
                    namespace Maps {
                        class MapTileDataSource;
                    } /* Maps */
                } /* Controls */
            } /* Xaml */
        } /* UI */
    } /* Windows */
} /* ABI */

namespace ABI {
    namespace Windows {
        namespace UI {
            namespace Xaml {
                namespace Controls {
                    namespace Maps {
                        class MapTileUriRequest;
                    } /* Maps */
                } /* Controls */
            } /* Xaml */
        } /* UI */
    } /* Windows */
} /* ABI */

namespace ABI {
    namespace Windows {
        namespace UI {
            namespace Xaml {
                namespace Controls {
                    namespace Maps {
                        class MapTileUriRequestDeferral;
                    } /* Maps */
                } /* Controls */
            } /* Xaml */
        } /* UI */
    } /* Windows */
} /* ABI */

namespace ABI {
    namespace Windows {
        namespace UI {
            namespace Xaml {
                namespace Controls {
                    namespace Maps {
                        class StreetsideExperience;
                    } /* Maps */
                } /* Controls */
            } /* Xaml */
        } /* UI */
    } /* Windows */
} /* ABI */

/*
 *
 * Struct Windows.UI.Xaml.Controls.Maps.MapAnimationKind
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
namespace ABI {
    namespace Windows {
        namespace UI {
            namespace Xaml {
                namespace Controls {
                    namespace Maps {
                        enum MapAnimationKind : int
                        {
                            MapAnimationKind_Default = 0,
                            MapAnimationKind_None = 1,
                            MapAnimationKind_Linear = 2,
                            MapAnimationKind_Bow = 3,
                        };
                    } /* Maps */
                } /* Controls */
            } /* Xaml */
        } /* UI */
    } /* Windows */
} /* ABI */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Struct Windows.UI.Xaml.Controls.Maps.MapCameraChangeReason
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 2.0
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x20000
namespace ABI {
    namespace Windows {
        namespace UI {
            namespace Xaml {
                namespace Controls {
                    namespace Maps {
                        enum MapCameraChangeReason : int
                        {
                            MapCameraChangeReason_System = 0,
                            MapCameraChangeReason_UserInteraction = 1,
                            MapCameraChangeReason_Programmatic = 2,
                        };
                    } /* Maps */
                } /* Controls */
            } /* Xaml */
        } /* UI */
    } /* Windows */
} /* ABI */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x20000

/*
 *
 * Struct Windows.UI.Xaml.Controls.Maps.MapColorScheme
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
namespace ABI {
    namespace Windows {
        namespace UI {
            namespace Xaml {
                namespace Controls {
                    namespace Maps {
                        enum MapColorScheme : int
                        {
                            MapColorScheme_Light = 0,
                            MapColorScheme_Dark = 1,
                        };
                    } /* Maps */
                } /* Controls */
            } /* Xaml */
        } /* UI */
    } /* Windows */
} /* ABI */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Struct Windows.UI.Xaml.Controls.Maps.MapElementCollisionBehavior
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
namespace ABI {
    namespace Windows {
        namespace UI {
            namespace Xaml {
                namespace Controls {
                    namespace Maps {
                        enum MapElementCollisionBehavior : int
                        {
                            MapElementCollisionBehavior_Hide = 0,
                            MapElementCollisionBehavior_RemainVisible = 1,
                        };
                    } /* Maps */
                } /* Controls */
            } /* Xaml */
        } /* UI */
    } /* Windows */
} /* ABI */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Struct Windows.UI.Xaml.Controls.Maps.MapInteractionMode
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
namespace ABI {
    namespace Windows {
        namespace UI {
            namespace Xaml {
                namespace Controls {
                    namespace Maps {
                        enum MapInteractionMode : int
                        {
                            MapInteractionMode_Auto = 0,
                            MapInteractionMode_Disabled = 1,
                            MapInteractionMode_GestureOnly = 2,
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x30000
                            MapInteractionMode_PointerAndKeyboard = 2,
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x30000
                            MapInteractionMode_ControlOnly = 3,
                            MapInteractionMode_GestureAndControl = 4,
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x30000
                            MapInteractionMode_PointerKeyboardAndControl = 4,
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x30000
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x30000
                            MapInteractionMode_PointerOnly = 5,
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x30000
                        };
                    } /* Maps */
                } /* Controls */
            } /* Xaml */
        } /* UI */
    } /* Windows */
} /* ABI */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Struct Windows.UI.Xaml.Controls.Maps.MapLoadingStatus
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
namespace ABI {
    namespace Windows {
        namespace UI {
            namespace Xaml {
                namespace Controls {
                    namespace Maps {
                        enum MapLoadingStatus : int
                        {
                            MapLoadingStatus_Loading = 0,
                            MapLoadingStatus_Loaded = 1,
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x20000
                            MapLoadingStatus_DataUnavailable = 2,
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x20000
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x80000
                            MapLoadingStatus_DownloadedMapsManagerUnavailable = 3,
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x80000
                        };
                    } /* Maps */
                } /* Controls */
            } /* Xaml */
        } /* UI */
    } /* Windows */
} /* ABI */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Struct Windows.UI.Xaml.Controls.Maps.MapModel3DShadingOption
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 5.0
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x50000
namespace ABI {
    namespace Windows {
        namespace UI {
            namespace Xaml {
                namespace Controls {
                    namespace Maps {
                        enum MapModel3DShadingOption : int
                        {
                            MapModel3DShadingOption_Default = 0,
                            MapModel3DShadingOption_Flat = 1,
                            MapModel3DShadingOption_Smooth = 2,
                        };
                    } /* Maps */
                } /* Controls */
            } /* Xaml */
        } /* UI */
    } /* Windows */
} /* ABI */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x50000

/*
 *
 * Struct Windows.UI.Xaml.Controls.Maps.MapPanInteractionMode
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
namespace ABI {
    namespace Windows {
        namespace UI {
            namespace Xaml {
                namespace Controls {
                    namespace Maps {
                        enum MapPanInteractionMode : int
                        {
                            MapPanInteractionMode_Auto = 0,
                            MapPanInteractionMode_Disabled = 1,
                        };
                    } /* Maps */
                } /* Controls */
            } /* Xaml */
        } /* UI */
    } /* Windows */
} /* ABI */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Struct Windows.UI.Xaml.Controls.Maps.MapProjection
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 4.0
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x40000
namespace ABI {
    namespace Windows {
        namespace UI {
            namespace Xaml {
                namespace Controls {
                    namespace Maps {
                        enum MapProjection : int
                        {
                            MapProjection_WebMercator = 0,
                            MapProjection_Globe = 1,
                        };
                    } /* Maps */
                } /* Controls */
            } /* Xaml */
        } /* UI */
    } /* Windows */
} /* ABI */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x40000

/*
 *
 * Struct Windows.UI.Xaml.Controls.Maps.MapStyle
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
namespace ABI {
    namespace Windows {
        namespace UI {
            namespace Xaml {
                namespace Controls {
                    namespace Maps {
                        enum MapStyle : int
                        {
                            MapStyle_None = 0,
                            MapStyle_Road = 1,
                            MapStyle_Aerial = 2,
                            MapStyle_AerialWithRoads = 3,
                            MapStyle_Terrain = 4,
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
                            MapStyle_Aerial3D = 5,
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
                            MapStyle_Aerial3DWithRoads = 6,
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x40000
                            MapStyle_Custom = 7,
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x40000
                        };
                    } /* Maps */
                } /* Controls */
            } /* Xaml */
        } /* UI */
    } /* Windows */
} /* ABI */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Struct Windows.UI.Xaml.Controls.Maps.MapTileAnimationState
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 7.0
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x70000
namespace ABI {
    namespace Windows {
        namespace UI {
            namespace Xaml {
                namespace Controls {
                    namespace Maps {
                        enum MapTileAnimationState : int
                        {
                            MapTileAnimationState_Stopped = 0,
                            MapTileAnimationState_Paused = 1,
                            MapTileAnimationState_Playing = 2,
                        };
                    } /* Maps */
                } /* Controls */
            } /* Xaml */
        } /* UI */
    } /* Windows */
} /* ABI */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x70000

/*
 *
 * Struct Windows.UI.Xaml.Controls.Maps.MapTileLayer
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
namespace ABI {
    namespace Windows {
        namespace UI {
            namespace Xaml {
                namespace Controls {
                    namespace Maps {
                        enum MapTileLayer : int
                        {
                            MapTileLayer_LabelOverlay = 0,
                            MapTileLayer_RoadOverlay = 1,
                            MapTileLayer_AreaOverlay = 2,
                            MapTileLayer_BackgroundOverlay = 3,
                            MapTileLayer_BackgroundReplacement = 4,
                        };
                    } /* Maps */
                } /* Controls */
            } /* Xaml */
        } /* UI */
    } /* Windows */
} /* ABI */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Struct Windows.UI.Xaml.Controls.Maps.MapVisibleRegionKind
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 3.0
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x30000
namespace ABI {
    namespace Windows {
        namespace UI {
            namespace Xaml {
                namespace Controls {
                    namespace Maps {
                        enum MapVisibleRegionKind : int
                        {
                            MapVisibleRegionKind_Near = 0,
                            MapVisibleRegionKind_Full = 1,
                        };
                    } /* Maps */
                } /* Controls */
            } /* Xaml */
        } /* UI */
    } /* Windows */
} /* ABI */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x30000

/*
 *
 * Struct Windows.UI.Xaml.Controls.Maps.MapWatermarkMode
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
namespace ABI {
    namespace Windows {
        namespace UI {
            namespace Xaml {
                namespace Controls {
                    namespace Maps {
                        enum MapWatermarkMode : int
                        {
                            MapWatermarkMode_Automatic = 0,
                            MapWatermarkMode_On = 1,
                        };
                    } /* Maps */
                } /* Controls */
            } /* Xaml */
        } /* UI */
    } /* Windows */
} /* ABI */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Struct Windows.UI.Xaml.Controls.Maps.MapZoomLevelRange
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
namespace ABI {
    namespace Windows {
        namespace UI {
            namespace Xaml {
                namespace Controls {
                    namespace Maps {
                        struct MapZoomLevelRange
                        {
                            DOUBLE Min;
                            DOUBLE Max;
                        };
                    } /* Maps */
                } /* Controls */
            } /* Xaml */
        } /* UI */
    } /* Windows */
} /* ABI */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Interface Windows.UI.Xaml.Controls.Maps.ICustomMapTileDataSource
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Interface is a part of the implementation of type Windows.UI.Xaml.Controls.Maps.CustomMapTileDataSource
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CICustomMapTileDataSource_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CICustomMapTileDataSource_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_UI_Xaml_Controls_Maps_ICustomMapTileDataSource[] = L"Windows.UI.Xaml.Controls.Maps.ICustomMapTileDataSource";
namespace ABI {
    namespace Windows {
        namespace UI {
            namespace Xaml {
                namespace Controls {
                    namespace Maps {
                        MIDL_INTERFACE("65da384a-2db1-4be1-b155-3d0c9ecf4799")
                        ICustomMapTileDataSource : public IInspectable
                        {
                        public:
                            virtual HRESULT STDMETHODCALLTYPE add_BitmapRequested(
                                __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CCustomMapTileDataSource_Windows__CUI__CXaml__CControls__CMaps__CMapTileBitmapRequestedEventArgs* handler,
                                EventRegistrationToken* token
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE remove_BitmapRequested(
                                EventRegistrationToken token
                                ) = 0;
                        };

                        extern MIDL_CONST_ID IID& IID_ICustomMapTileDataSource = _uuidof(ICustomMapTileDataSource);
                    } /* Maps */
                } /* Controls */
            } /* Xaml */
        } /* UI */
    } /* Windows */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CICustomMapTileDataSource;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CICustomMapTileDataSource_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Interface Windows.UI.Xaml.Controls.Maps.ICustomMapTileDataSourceFactory
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Interface is a part of the implementation of type Windows.UI.Xaml.Controls.Maps.CustomMapTileDataSource
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CICustomMapTileDataSourceFactory_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CICustomMapTileDataSourceFactory_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_UI_Xaml_Controls_Maps_ICustomMapTileDataSourceFactory[] = L"Windows.UI.Xaml.Controls.Maps.ICustomMapTileDataSourceFactory";
namespace ABI {
    namespace Windows {
        namespace UI {
            namespace Xaml {
                namespace Controls {
                    namespace Maps {
                        MIDL_INTERFACE("c8477947-c955-4f22-9444-a1d8d744af11")
                        ICustomMapTileDataSourceFactory : public IInspectable
                        {
                        public:
                            virtual HRESULT STDMETHODCALLTYPE CreateInstance(
                                IInspectable* baseInterface,
                                IInspectable** innerInterface,
                                ABI::Windows::UI::Xaml::Controls::Maps::ICustomMapTileDataSource** value
                                ) = 0;
                        };

                        extern MIDL_CONST_ID IID& IID_ICustomMapTileDataSourceFactory = _uuidof(ICustomMapTileDataSourceFactory);
                    } /* Maps */
                } /* Controls */
            } /* Xaml */
        } /* UI */
    } /* Windows */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CICustomMapTileDataSourceFactory;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CICustomMapTileDataSourceFactory_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Interface Windows.UI.Xaml.Controls.Maps.IHttpMapTileDataSource
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Interface is a part of the implementation of type Windows.UI.Xaml.Controls.Maps.HttpMapTileDataSource
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIHttpMapTileDataSource_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIHttpMapTileDataSource_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_UI_Xaml_Controls_Maps_IHttpMapTileDataSource[] = L"Windows.UI.Xaml.Controls.Maps.IHttpMapTileDataSource";
namespace ABI {
    namespace Windows {
        namespace UI {
            namespace Xaml {
                namespace Controls {
                    namespace Maps {
                        MIDL_INTERFACE("9d03cb5c-fd79-4795-87be-7e54ca0b37d0")
                        IHttpMapTileDataSource : public IInspectable
                        {
                        public:
                            virtual HRESULT STDMETHODCALLTYPE get_UriFormatString(
                                HSTRING* value
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE put_UriFormatString(
                                HSTRING value
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE get_AdditionalRequestHeaders(
                                __FIMap_2_HSTRING_HSTRING** value
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE get_AllowCaching(
                                boolean* value
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE put_AllowCaching(
                                boolean value
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE add_UriRequested(
                                __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CHttpMapTileDataSource_Windows__CUI__CXaml__CControls__CMaps__CMapTileUriRequestedEventArgs* handler,
                                EventRegistrationToken* token
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE remove_UriRequested(
                                EventRegistrationToken token
                                ) = 0;
                        };

                        extern MIDL_CONST_ID IID& IID_IHttpMapTileDataSource = _uuidof(IHttpMapTileDataSource);
                    } /* Maps */
                } /* Controls */
            } /* Xaml */
        } /* UI */
    } /* Windows */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIHttpMapTileDataSource;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIHttpMapTileDataSource_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Interface Windows.UI.Xaml.Controls.Maps.IHttpMapTileDataSourceFactory
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Interface is a part of the implementation of type Windows.UI.Xaml.Controls.Maps.HttpMapTileDataSource
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIHttpMapTileDataSourceFactory_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIHttpMapTileDataSourceFactory_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_UI_Xaml_Controls_Maps_IHttpMapTileDataSourceFactory[] = L"Windows.UI.Xaml.Controls.Maps.IHttpMapTileDataSourceFactory";
namespace ABI {
    namespace Windows {
        namespace UI {
            namespace Xaml {
                namespace Controls {
                    namespace Maps {
                        MIDL_INTERFACE("53b4b107-84dc-4291-89f8-6d0bb612a055")
                        IHttpMapTileDataSourceFactory : public IInspectable
                        {
                        public:
                            virtual HRESULT STDMETHODCALLTYPE CreateInstance(
                                IInspectable* baseInterface,
                                IInspectable** innerInterface,
                                ABI::Windows::UI::Xaml::Controls::Maps::IHttpMapTileDataSource** value
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE CreateInstanceWithUriFormatString(
                                HSTRING uriFormatString,
                                IInspectable* baseInterface,
                                IInspectable** innerInterface,
                                ABI::Windows::UI::Xaml::Controls::Maps::IHttpMapTileDataSource** value
                                ) = 0;
                        };

                        extern MIDL_CONST_ID IID& IID_IHttpMapTileDataSourceFactory = _uuidof(IHttpMapTileDataSourceFactory);
                    } /* Maps */
                } /* Controls */
            } /* Xaml */
        } /* UI */
    } /* Windows */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIHttpMapTileDataSourceFactory;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIHttpMapTileDataSourceFactory_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Interface Windows.UI.Xaml.Controls.Maps.ILocalMapTileDataSource
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Interface is a part of the implementation of type Windows.UI.Xaml.Controls.Maps.LocalMapTileDataSource
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CILocalMapTileDataSource_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CILocalMapTileDataSource_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_UI_Xaml_Controls_Maps_ILocalMapTileDataSource[] = L"Windows.UI.Xaml.Controls.Maps.ILocalMapTileDataSource";
namespace ABI {
    namespace Windows {
        namespace UI {
            namespace Xaml {
                namespace Controls {
                    namespace Maps {
                        MIDL_INTERFACE("616257b5-9108-4f12-8bf4-bb3c8f6274e5")
                        ILocalMapTileDataSource : public IInspectable
                        {
                        public:
                            virtual HRESULT STDMETHODCALLTYPE get_UriFormatString(
                                HSTRING* value
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE put_UriFormatString(
                                HSTRING value
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE add_UriRequested(
                                __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CLocalMapTileDataSource_Windows__CUI__CXaml__CControls__CMaps__CMapTileUriRequestedEventArgs* handler,
                                EventRegistrationToken* token
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE remove_UriRequested(
                                EventRegistrationToken token
                                ) = 0;
                        };

                        extern MIDL_CONST_ID IID& IID_ILocalMapTileDataSource = _uuidof(ILocalMapTileDataSource);
                    } /* Maps */
                } /* Controls */
            } /* Xaml */
        } /* UI */
    } /* Windows */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CILocalMapTileDataSource;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CILocalMapTileDataSource_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Interface Windows.UI.Xaml.Controls.Maps.ILocalMapTileDataSourceFactory
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Interface is a part of the implementation of type Windows.UI.Xaml.Controls.Maps.LocalMapTileDataSource
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CILocalMapTileDataSourceFactory_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CILocalMapTileDataSourceFactory_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_UI_Xaml_Controls_Maps_ILocalMapTileDataSourceFactory[] = L"Windows.UI.Xaml.Controls.Maps.ILocalMapTileDataSourceFactory";
namespace ABI {
    namespace Windows {
        namespace UI {
            namespace Xaml {
                namespace Controls {
                    namespace Maps {
                        MIDL_INTERFACE("c5cfe9fc-72ac-4839-8a0d-011f24693c79")
                        ILocalMapTileDataSourceFactory : public IInspectable
                        {
                        public:
                            virtual HRESULT STDMETHODCALLTYPE CreateInstance(
                                IInspectable* baseInterface,
                                IInspectable** innerInterface,
                                ABI::Windows::UI::Xaml::Controls::Maps::ILocalMapTileDataSource** value
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE CreateInstanceWithUriFormatString(
                                HSTRING uriFormatString,
                                IInspectable* baseInterface,
                                IInspectable** innerInterface,
                                ABI::Windows::UI::Xaml::Controls::Maps::ILocalMapTileDataSource** value
                                ) = 0;
                        };

                        extern MIDL_CONST_ID IID& IID_ILocalMapTileDataSourceFactory = _uuidof(ILocalMapTileDataSourceFactory);
                    } /* Maps */
                } /* Controls */
            } /* Xaml */
        } /* UI */
    } /* Windows */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CILocalMapTileDataSourceFactory;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CILocalMapTileDataSourceFactory_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Interface Windows.UI.Xaml.Controls.Maps.IMapActualCameraChangedEventArgs
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Interface is a part of the implementation of type Windows.UI.Xaml.Controls.Maps.MapActualCameraChangedEventArgs
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapActualCameraChangedEventArgs_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapActualCameraChangedEventArgs_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_UI_Xaml_Controls_Maps_IMapActualCameraChangedEventArgs[] = L"Windows.UI.Xaml.Controls.Maps.IMapActualCameraChangedEventArgs";
namespace ABI {
    namespace Windows {
        namespace UI {
            namespace Xaml {
                namespace Controls {
                    namespace Maps {
                        MIDL_INTERFACE("daa080da-b7f4-422c-a618-bbaa7c1d814c")
                        IMapActualCameraChangedEventArgs : public IInspectable
                        {
                        public:
                            virtual HRESULT STDMETHODCALLTYPE get_Camera(
                                ABI::Windows::UI::Xaml::Controls::Maps::IMapCamera** value
                                ) = 0;
                        };

                        extern MIDL_CONST_ID IID& IID_IMapActualCameraChangedEventArgs = _uuidof(IMapActualCameraChangedEventArgs);
                    } /* Maps */
                } /* Controls */
            } /* Xaml */
        } /* UI */
    } /* Windows */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapActualCameraChangedEventArgs;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapActualCameraChangedEventArgs_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Interface Windows.UI.Xaml.Controls.Maps.IMapActualCameraChangedEventArgs2
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 2.0
 *
 * Interface is a part of the implementation of type Windows.UI.Xaml.Controls.Maps.MapActualCameraChangedEventArgs
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x20000
#if !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapActualCameraChangedEventArgs2_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapActualCameraChangedEventArgs2_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_UI_Xaml_Controls_Maps_IMapActualCameraChangedEventArgs2[] = L"Windows.UI.Xaml.Controls.Maps.IMapActualCameraChangedEventArgs2";
namespace ABI {
    namespace Windows {
        namespace UI {
            namespace Xaml {
                namespace Controls {
                    namespace Maps {
                        MIDL_INTERFACE("7ba4c7e5-10dc-455a-9d04-1d72fb6d9b93")
                        IMapActualCameraChangedEventArgs2 : public IInspectable
                        {
                        public:
                            virtual HRESULT STDMETHODCALLTYPE get_ChangeReason(
                                ABI::Windows::UI::Xaml::Controls::Maps::MapCameraChangeReason* value
                                ) = 0;
                        };

                        extern MIDL_CONST_ID IID& IID_IMapActualCameraChangedEventArgs2 = _uuidof(IMapActualCameraChangedEventArgs2);
                    } /* Maps */
                } /* Controls */
            } /* Xaml */
        } /* UI */
    } /* Windows */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapActualCameraChangedEventArgs2;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapActualCameraChangedEventArgs2_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x20000

/*
 *
 * Interface Windows.UI.Xaml.Controls.Maps.IMapActualCameraChangingEventArgs
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Interface is a part of the implementation of type Windows.UI.Xaml.Controls.Maps.MapActualCameraChangingEventArgs
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapActualCameraChangingEventArgs_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapActualCameraChangingEventArgs_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_UI_Xaml_Controls_Maps_IMapActualCameraChangingEventArgs[] = L"Windows.UI.Xaml.Controls.Maps.IMapActualCameraChangingEventArgs";
namespace ABI {
    namespace Windows {
        namespace UI {
            namespace Xaml {
                namespace Controls {
                    namespace Maps {
                        MIDL_INTERFACE("6b0dbed6-93f7-4682-8de5-a47a1cc7a945")
                        IMapActualCameraChangingEventArgs : public IInspectable
                        {
                        public:
                            virtual HRESULT STDMETHODCALLTYPE get_Camera(
                                ABI::Windows::UI::Xaml::Controls::Maps::IMapCamera** value
                                ) = 0;
                        };

                        extern MIDL_CONST_ID IID& IID_IMapActualCameraChangingEventArgs = _uuidof(IMapActualCameraChangingEventArgs);
                    } /* Maps */
                } /* Controls */
            } /* Xaml */
        } /* UI */
    } /* Windows */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapActualCameraChangingEventArgs;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapActualCameraChangingEventArgs_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Interface Windows.UI.Xaml.Controls.Maps.IMapActualCameraChangingEventArgs2
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 2.0
 *
 * Interface is a part of the implementation of type Windows.UI.Xaml.Controls.Maps.MapActualCameraChangingEventArgs
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x20000
#if !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapActualCameraChangingEventArgs2_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapActualCameraChangingEventArgs2_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_UI_Xaml_Controls_Maps_IMapActualCameraChangingEventArgs2[] = L"Windows.UI.Xaml.Controls.Maps.IMapActualCameraChangingEventArgs2";
namespace ABI {
    namespace Windows {
        namespace UI {
            namespace Xaml {
                namespace Controls {
                    namespace Maps {
                        MIDL_INTERFACE("f2867897-40ac-4e8a-a927-510f3846a47e")
                        IMapActualCameraChangingEventArgs2 : public IInspectable
                        {
                        public:
                            virtual HRESULT STDMETHODCALLTYPE get_ChangeReason(
                                ABI::Windows::UI::Xaml::Controls::Maps::MapCameraChangeReason* value
                                ) = 0;
                        };

                        extern MIDL_CONST_ID IID& IID_IMapActualCameraChangingEventArgs2 = _uuidof(IMapActualCameraChangingEventArgs2);
                    } /* Maps */
                } /* Controls */
            } /* Xaml */
        } /* UI */
    } /* Windows */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapActualCameraChangingEventArgs2;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapActualCameraChangingEventArgs2_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x20000

/*
 *
 * Interface Windows.UI.Xaml.Controls.Maps.IMapBillboard
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 4.0
 *
 * Interface is a part of the implementation of type Windows.UI.Xaml.Controls.Maps.MapBillboard
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x40000
#if !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapBillboard_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapBillboard_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_UI_Xaml_Controls_Maps_IMapBillboard[] = L"Windows.UI.Xaml.Controls.Maps.IMapBillboard";
namespace ABI {
    namespace Windows {
        namespace UI {
            namespace Xaml {
                namespace Controls {
                    namespace Maps {
                        MIDL_INTERFACE("1694259d-0ae2-4f42-a02e-292ca835d39d")
                        IMapBillboard : public IInspectable
                        {
                        public:
                            virtual HRESULT STDMETHODCALLTYPE get_Location(
                                ABI::Windows::Devices::Geolocation::IGeopoint** value
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE put_Location(
                                ABI::Windows::Devices::Geolocation::IGeopoint* value
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE get_NormalizedAnchorPoint(
                                ABI::Windows::Foundation::Point* value
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE put_NormalizedAnchorPoint(
                                ABI::Windows::Foundation::Point value
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE get_Image(
                                ABI::Windows::Storage::Streams::IRandomAccessStreamReference** value
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE put_Image(
                                ABI::Windows::Storage::Streams::IRandomAccessStreamReference* value
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE get_CollisionBehaviorDesired(
                                ABI::Windows::UI::Xaml::Controls::Maps::MapElementCollisionBehavior* value
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE put_CollisionBehaviorDesired(
                                ABI::Windows::UI::Xaml::Controls::Maps::MapElementCollisionBehavior value
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE get_ReferenceCamera(
                                ABI::Windows::UI::Xaml::Controls::Maps::IMapCamera** value
                                ) = 0;
                        };

                        extern MIDL_CONST_ID IID& IID_IMapBillboard = _uuidof(IMapBillboard);
                    } /* Maps */
                } /* Controls */
            } /* Xaml */
        } /* UI */
    } /* Windows */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapBillboard;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapBillboard_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x40000

/*
 *
 * Interface Windows.UI.Xaml.Controls.Maps.IMapBillboardFactory
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 4.0
 *
 * Interface is a part of the implementation of type Windows.UI.Xaml.Controls.Maps.MapBillboard
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x40000
#if !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapBillboardFactory_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapBillboardFactory_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_UI_Xaml_Controls_Maps_IMapBillboardFactory[] = L"Windows.UI.Xaml.Controls.Maps.IMapBillboardFactory";
namespace ABI {
    namespace Windows {
        namespace UI {
            namespace Xaml {
                namespace Controls {
                    namespace Maps {
                        MIDL_INTERFACE("be45a4c5-8f09-4b86-ae28-783740eb8b31")
                        IMapBillboardFactory : public IInspectable
                        {
                        public:
                            virtual HRESULT STDMETHODCALLTYPE CreateInstanceFromCamera(
                                ABI::Windows::UI::Xaml::Controls::Maps::IMapCamera* camera,
                                ABI::Windows::UI::Xaml::Controls::Maps::IMapBillboard** value
                                ) = 0;
                        };

                        extern MIDL_CONST_ID IID& IID_IMapBillboardFactory = _uuidof(IMapBillboardFactory);
                    } /* Maps */
                } /* Controls */
            } /* Xaml */
        } /* UI */
    } /* Windows */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapBillboardFactory;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapBillboardFactory_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x40000

/*
 *
 * Interface Windows.UI.Xaml.Controls.Maps.IMapBillboardStatics
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 4.0
 *
 * Interface is a part of the implementation of type Windows.UI.Xaml.Controls.Maps.MapBillboard
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x40000
#if !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapBillboardStatics_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapBillboardStatics_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_UI_Xaml_Controls_Maps_IMapBillboardStatics[] = L"Windows.UI.Xaml.Controls.Maps.IMapBillboardStatics";
namespace ABI {
    namespace Windows {
        namespace UI {
            namespace Xaml {
                namespace Controls {
                    namespace Maps {
                        MIDL_INTERFACE("fdf839fe-e1f7-4fb0-8887-7da68c647333")
                        IMapBillboardStatics : public IInspectable
                        {
                        public:
                            virtual HRESULT STDMETHODCALLTYPE get_LocationProperty(
                                ABI::Windows::UI::Xaml::IDependencyProperty** value
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE get_NormalizedAnchorPointProperty(
                                ABI::Windows::UI::Xaml::IDependencyProperty** value
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE get_CollisionBehaviorDesiredProperty(
                                ABI::Windows::UI::Xaml::IDependencyProperty** value
                                ) = 0;
                        };

                        extern MIDL_CONST_ID IID& IID_IMapBillboardStatics = _uuidof(IMapBillboardStatics);
                    } /* Maps */
                } /* Controls */
            } /* Xaml */
        } /* UI */
    } /* Windows */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapBillboardStatics;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapBillboardStatics_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x40000

/*
 *
 * Interface Windows.UI.Xaml.Controls.Maps.IMapCamera
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Interface is a part of the implementation of type Windows.UI.Xaml.Controls.Maps.MapCamera
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCamera_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCamera_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_UI_Xaml_Controls_Maps_IMapCamera[] = L"Windows.UI.Xaml.Controls.Maps.IMapCamera";
namespace ABI {
    namespace Windows {
        namespace UI {
            namespace Xaml {
                namespace Controls {
                    namespace Maps {
                        MIDL_INTERFACE("53a6b623-c0f8-4d8b-ad1e-a59598ea840b")
                        IMapCamera : public IInspectable
                        {
                        public:
                            virtual HRESULT STDMETHODCALLTYPE get_Location(
                                ABI::Windows::Devices::Geolocation::IGeopoint** value
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE put_Location(
                                ABI::Windows::Devices::Geolocation::IGeopoint* value
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE get_Heading(
                                DOUBLE* value
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE put_Heading(
                                DOUBLE value
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE get_Pitch(
                                DOUBLE* value
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE put_Pitch(
                                DOUBLE value
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE get_Roll(
                                DOUBLE* value
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE put_Roll(
                                DOUBLE value
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE get_FieldOfView(
                                DOUBLE* value
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE put_FieldOfView(
                                DOUBLE value
                                ) = 0;
                        };

                        extern MIDL_CONST_ID IID& IID_IMapCamera = _uuidof(IMapCamera);
                    } /* Maps */
                } /* Controls */
            } /* Xaml */
        } /* UI */
    } /* Windows */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCamera;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCamera_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Interface Windows.UI.Xaml.Controls.Maps.IMapCameraFactory
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Interface is a part of the implementation of type Windows.UI.Xaml.Controls.Maps.MapCamera
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCameraFactory_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCameraFactory_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_UI_Xaml_Controls_Maps_IMapCameraFactory[] = L"Windows.UI.Xaml.Controls.Maps.IMapCameraFactory";
namespace ABI {
    namespace Windows {
        namespace UI {
            namespace Xaml {
                namespace Controls {
                    namespace Maps {
                        MIDL_INTERFACE("ea3b0f16-83af-4ace-8e71-10ad9f1e9e7f")
                        IMapCameraFactory : public IInspectable
                        {
                        public:
                            virtual HRESULT STDMETHODCALLTYPE CreateInstanceWithLocation(
                                ABI::Windows::Devices::Geolocation::IGeopoint* location,
                                ABI::Windows::UI::Xaml::Controls::Maps::IMapCamera** value
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE CreateInstanceWithLocationAndHeading(
                                ABI::Windows::Devices::Geolocation::IGeopoint* location,
                                DOUBLE headingInDegrees,
                                ABI::Windows::UI::Xaml::Controls::Maps::IMapCamera** value
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE CreateInstanceWithLocationHeadingAndPitch(
                                ABI::Windows::Devices::Geolocation::IGeopoint* location,
                                DOUBLE headingInDegrees,
                                DOUBLE pitchInDegrees,
                                ABI::Windows::UI::Xaml::Controls::Maps::IMapCamera** value
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE CreateInstanceWithLocationHeadingPitchRollAndFieldOfView(
                                ABI::Windows::Devices::Geolocation::IGeopoint* location,
                                DOUBLE headingInDegrees,
                                DOUBLE pitchInDegrees,
                                DOUBLE rollInDegrees,
                                DOUBLE fieldOfViewInDegrees,
                                ABI::Windows::UI::Xaml::Controls::Maps::IMapCamera** value
                                ) = 0;
                        };

                        extern MIDL_CONST_ID IID& IID_IMapCameraFactory = _uuidof(IMapCameraFactory);
                    } /* Maps */
                } /* Controls */
            } /* Xaml */
        } /* UI */
    } /* Windows */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCameraFactory;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCameraFactory_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Interface Windows.UI.Xaml.Controls.Maps.IMapContextRequestedEventArgs
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 4.0
 *
 * Interface is a part of the implementation of type Windows.UI.Xaml.Controls.Maps.MapContextRequestedEventArgs
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x40000
#if !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapContextRequestedEventArgs_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapContextRequestedEventArgs_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_UI_Xaml_Controls_Maps_IMapContextRequestedEventArgs[] = L"Windows.UI.Xaml.Controls.Maps.IMapContextRequestedEventArgs";
namespace ABI {
    namespace Windows {
        namespace UI {
            namespace Xaml {
                namespace Controls {
                    namespace Maps {
                        MIDL_INTERFACE("fdd1b423-c961-4df2-bb57-82ee0f0bb591")
                        IMapContextRequestedEventArgs : public IInspectable
                        {
                        public:
                            virtual HRESULT STDMETHODCALLTYPE get_Position(
                                ABI::Windows::Foundation::Point* value
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE get_Location(
                                ABI::Windows::Devices::Geolocation::IGeopoint** value
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE get_MapElements(
                                __FIVectorView_1_Windows__CUI__CXaml__CControls__CMaps__CMapElement** value
                                ) = 0;
                        };

                        extern MIDL_CONST_ID IID& IID_IMapContextRequestedEventArgs = _uuidof(IMapContextRequestedEventArgs);
                    } /* Maps */
                } /* Controls */
            } /* Xaml */
        } /* UI */
    } /* Windows */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapContextRequestedEventArgs;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapContextRequestedEventArgs_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x40000

/*
 *
 * Interface Windows.UI.Xaml.Controls.Maps.IMapControl
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Interface is a part of the implementation of type Windows.UI.Xaml.Controls.Maps.MapControl
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_UI_Xaml_Controls_Maps_IMapControl[] = L"Windows.UI.Xaml.Controls.Maps.IMapControl";
namespace ABI {
    namespace Windows {
        namespace UI {
            namespace Xaml {
                namespace Controls {
                    namespace Maps {
                        MIDL_INTERFACE("42d0b851-5256-4747-9e6c-0d11e966141e")
                        IMapControl : public IInspectable
                        {
                        public:
                            virtual HRESULT STDMETHODCALLTYPE get_Center(
                                ABI::Windows::Devices::Geolocation::IGeopoint** value
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE put_Center(
                                ABI::Windows::Devices::Geolocation::IGeopoint* value
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE get_Children(
                                __FIVector_1_Windows__CUI__CXaml__CDependencyObject** value
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE get_ColorScheme(
                                ABI::Windows::UI::Xaml::Controls::Maps::MapColorScheme* value
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE put_ColorScheme(
                                ABI::Windows::UI::Xaml::Controls::Maps::MapColorScheme value
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE get_DesiredPitch(
                                DOUBLE* value
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE put_DesiredPitch(
                                DOUBLE value
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE get_Heading(
                                DOUBLE* value
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE put_Heading(
                                DOUBLE value
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE get_LandmarksVisible(
                                boolean* value
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE put_LandmarksVisible(
                                boolean value
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE get_LoadingStatus(
                                ABI::Windows::UI::Xaml::Controls::Maps::MapLoadingStatus* value
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE get_MapServiceToken(
                                HSTRING* value
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE put_MapServiceToken(
                                HSTRING value
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE get_MaxZoomLevel(
                                DOUBLE* value
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE get_MinZoomLevel(
                                DOUBLE* value
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE get_PedestrianFeaturesVisible(
                                boolean* value
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE put_PedestrianFeaturesVisible(
                                boolean value
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE get_Pitch(
                                DOUBLE* value
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE get_Style(
                                ABI::Windows::UI::Xaml::Controls::Maps::MapStyle* value
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE put_Style(
                                ABI::Windows::UI::Xaml::Controls::Maps::MapStyle value
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE get_TrafficFlowVisible(
                                boolean* value
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE put_TrafficFlowVisible(
                                boolean value
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE get_TransformOrigin(
                                ABI::Windows::Foundation::Point* value
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE put_TransformOrigin(
                                ABI::Windows::Foundation::Point value
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE get_WatermarkMode(
                                ABI::Windows::UI::Xaml::Controls::Maps::MapWatermarkMode* value
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE put_WatermarkMode(
                                ABI::Windows::UI::Xaml::Controls::Maps::MapWatermarkMode value
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE get_ZoomLevel(
                                DOUBLE* value
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE put_ZoomLevel(
                                DOUBLE value
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE get_MapElements(
                                __FIVector_1_Windows__CUI__CXaml__CControls__CMaps__CMapElement** value
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE get_Routes(
                                __FIVector_1_Windows__CUI__CXaml__CControls__CMaps__CMapRouteView** value
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE get_TileSources(
                                __FIVector_1_Windows__CUI__CXaml__CControls__CMaps__CMapTileSource** value
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE add_CenterChanged(
                                __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_IInspectable* handler,
                                EventRegistrationToken* token
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE remove_CenterChanged(
                                EventRegistrationToken token
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE add_HeadingChanged(
                                __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_IInspectable* handler,
                                EventRegistrationToken* token
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE remove_HeadingChanged(
                                EventRegistrationToken token
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE add_LoadingStatusChanged(
                                __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_IInspectable* handler,
                                EventRegistrationToken* token
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE remove_LoadingStatusChanged(
                                EventRegistrationToken token
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE add_MapDoubleTapped(
                                __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapInputEventArgs* handler,
                                EventRegistrationToken* token
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE remove_MapDoubleTapped(
                                EventRegistrationToken token
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE add_MapHolding(
                                __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapInputEventArgs* handler,
                                EventRegistrationToken* token
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE remove_MapHolding(
                                EventRegistrationToken token
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE add_MapTapped(
                                __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapInputEventArgs* handler,
                                EventRegistrationToken* token
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE remove_MapTapped(
                                EventRegistrationToken token
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE add_PitchChanged(
                                __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_IInspectable* handler,
                                EventRegistrationToken* token
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE remove_PitchChanged(
                                EventRegistrationToken token
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE add_TransformOriginChanged(
                                __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_IInspectable* handler,
                                EventRegistrationToken* token
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE remove_TransformOriginChanged(
                                EventRegistrationToken token
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE add_ZoomLevelChanged(
                                __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_IInspectable* handler,
                                EventRegistrationToken* token
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE remove_ZoomLevelChanged(
                                EventRegistrationToken token
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE FindMapElementsAtOffset(
                                ABI::Windows::Foundation::Point offset,
                                __FIVectorView_1_Windows__CUI__CXaml__CControls__CMaps__CMapElement** result
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE GetLocationFromOffset(
                                ABI::Windows::Foundation::Point offset,
                                ABI::Windows::Devices::Geolocation::IGeopoint** location
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE GetOffsetFromLocation(
                                ABI::Windows::Devices::Geolocation::IGeopoint* location,
                                ABI::Windows::Foundation::Point* offset
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE IsLocationInView(
                                ABI::Windows::Devices::Geolocation::IGeopoint* location,
                                boolean* isInView
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE TrySetViewBoundsAsync(
                                ABI::Windows::Devices::Geolocation::IGeoboundingBox* bounds,
                                __FIReference_1_Windows__CUI__CXaml__CThickness* margin,
                                ABI::Windows::UI::Xaml::Controls::Maps::MapAnimationKind animation,
                                __FIAsyncOperation_1_boolean** operation
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE TrySetViewWithCenterAsync(
                                ABI::Windows::Devices::Geolocation::IGeopoint* center,
                                __FIAsyncOperation_1_boolean** operation
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE TrySetViewWithCenterAndZoomAsync(
                                ABI::Windows::Devices::Geolocation::IGeopoint* center,
                                __FIReference_1_double* zoomLevel,
                                __FIAsyncOperation_1_boolean** operation
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE TrySetViewWithCenterZoomHeadingAndPitchAsync(
                                ABI::Windows::Devices::Geolocation::IGeopoint* center,
                                __FIReference_1_double* zoomLevel,
                                __FIReference_1_double* heading,
                                __FIReference_1_double* desiredPitch,
                                __FIAsyncOperation_1_boolean** operation
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE TrySetViewWithCenterZoomHeadingPitchAndAnimationAsync(
                                ABI::Windows::Devices::Geolocation::IGeopoint* center,
                                __FIReference_1_double* zoomLevel,
                                __FIReference_1_double* heading,
                                __FIReference_1_double* desiredPitch,
                                ABI::Windows::UI::Xaml::Controls::Maps::MapAnimationKind animation,
                                __FIAsyncOperation_1_boolean** operation
                                ) = 0;
                        };

                        extern MIDL_CONST_ID IID& IID_IMapControl = _uuidof(IMapControl);
                    } /* Maps */
                } /* Controls */
            } /* Xaml */
        } /* UI */
    } /* Windows */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Interface Windows.UI.Xaml.Controls.Maps.IMapControl2
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Interface is a part of the implementation of type Windows.UI.Xaml.Controls.Maps.MapControl
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl2_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl2_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_UI_Xaml_Controls_Maps_IMapControl2[] = L"Windows.UI.Xaml.Controls.Maps.IMapControl2";
namespace ABI {
    namespace Windows {
        namespace UI {
            namespace Xaml {
                namespace Controls {
                    namespace Maps {
                        MIDL_INTERFACE("e1fd644d-96ec-4065-b0f0-75281da3654d")
                        IMapControl2 : public IInspectable
                        {
                        public:
                            virtual HRESULT STDMETHODCALLTYPE get_BusinessLandmarksVisible(
                                boolean* value
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE put_BusinessLandmarksVisible(
                                boolean value
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE get_TransitFeaturesVisible(
                                boolean* value
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE put_TransitFeaturesVisible(
                                boolean value
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE get_PanInteractionMode(
                                ABI::Windows::UI::Xaml::Controls::Maps::MapPanInteractionMode* value
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE put_PanInteractionMode(
                                ABI::Windows::UI::Xaml::Controls::Maps::MapPanInteractionMode value
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE get_RotateInteractionMode(
                                ABI::Windows::UI::Xaml::Controls::Maps::MapInteractionMode* value
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE put_RotateInteractionMode(
                                ABI::Windows::UI::Xaml::Controls::Maps::MapInteractionMode value
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE get_TiltInteractionMode(
                                ABI::Windows::UI::Xaml::Controls::Maps::MapInteractionMode* value
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE put_TiltInteractionMode(
                                ABI::Windows::UI::Xaml::Controls::Maps::MapInteractionMode value
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE get_ZoomInteractionMode(
                                ABI::Windows::UI::Xaml::Controls::Maps::MapInteractionMode* value
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE put_ZoomInteractionMode(
                                ABI::Windows::UI::Xaml::Controls::Maps::MapInteractionMode value
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE get_Is3DSupported(
                                boolean* value
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE get_IsStreetsideSupported(
                                boolean* value
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE get_Scene(
                                ABI::Windows::UI::Xaml::Controls::Maps::IMapScene** value
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE put_Scene(
                                ABI::Windows::UI::Xaml::Controls::Maps::IMapScene* value
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE get_ActualCamera(
                                ABI::Windows::UI::Xaml::Controls::Maps::IMapCamera** value
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE get_TargetCamera(
                                ABI::Windows::UI::Xaml::Controls::Maps::IMapCamera** value
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE get_CustomExperience(
                                ABI::Windows::UI::Xaml::Controls::Maps::IMapCustomExperience** value
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE put_CustomExperience(
                                ABI::Windows::UI::Xaml::Controls::Maps::IMapCustomExperience* value
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE add_MapElementClick(
                                __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapElementClickEventArgs* handler,
                                EventRegistrationToken* token
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE remove_MapElementClick(
                                EventRegistrationToken token
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE add_MapElementPointerEntered(
                                __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapElementPointerEnteredEventArgs* handler,
                                EventRegistrationToken* token
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE remove_MapElementPointerEntered(
                                EventRegistrationToken token
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE add_MapElementPointerExited(
                                __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapElementPointerExitedEventArgs* handler,
                                EventRegistrationToken* token
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE remove_MapElementPointerExited(
                                EventRegistrationToken token
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE add_ActualCameraChanged(
                                __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapActualCameraChangedEventArgs* handler,
                                EventRegistrationToken* token
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE remove_ActualCameraChanged(
                                EventRegistrationToken token
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE add_ActualCameraChanging(
                                __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapActualCameraChangingEventArgs* handler,
                                EventRegistrationToken* token
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE remove_ActualCameraChanging(
                                EventRegistrationToken token
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE add_TargetCameraChanged(
                                __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapTargetCameraChangedEventArgs* handler,
                                EventRegistrationToken* token
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE remove_TargetCameraChanged(
                                EventRegistrationToken token
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE add_CustomExperienceChanged(
                                __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapCustomExperienceChangedEventArgs* handler,
                                EventRegistrationToken* token
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE remove_CustomExperienceChanged(
                                EventRegistrationToken token
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE StartContinuousRotate(
                                DOUBLE rateInDegreesPerSecond
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE StopContinuousRotate(void) = 0;
                            virtual HRESULT STDMETHODCALLTYPE StartContinuousTilt(
                                DOUBLE rateInDegreesPerSecond
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE StopContinuousTilt(void) = 0;
                            virtual HRESULT STDMETHODCALLTYPE StartContinuousZoom(
                                DOUBLE rateOfChangePerSecond
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE StopContinuousZoom(void) = 0;
                            virtual HRESULT STDMETHODCALLTYPE TryRotateAsync(
                                DOUBLE degrees,
                                __FIAsyncOperation_1_boolean** operation
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE TryRotateToAsync(
                                DOUBLE angleInDegrees,
                                __FIAsyncOperation_1_boolean** operation
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE TryTiltAsync(
                                DOUBLE degrees,
                                __FIAsyncOperation_1_boolean** operation
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE TryTiltToAsync(
                                DOUBLE angleInDegrees,
                                __FIAsyncOperation_1_boolean** operation
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE TryZoomInAsync(
                                __FIAsyncOperation_1_boolean** operation
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE TryZoomOutAsync(
                                __FIAsyncOperation_1_boolean** operation
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE TryZoomToAsync(
                                DOUBLE zoomLevel,
                                __FIAsyncOperation_1_boolean** operation
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE TrySetSceneAsync(
                                ABI::Windows::UI::Xaml::Controls::Maps::IMapScene* scene,
                                __FIAsyncOperation_1_boolean** operation
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE TrySetSceneWithAnimationAsync(
                                ABI::Windows::UI::Xaml::Controls::Maps::IMapScene* scene,
                                ABI::Windows::UI::Xaml::Controls::Maps::MapAnimationKind animationKind,
                                __FIAsyncOperation_1_boolean** operation
                                ) = 0;
                        };

                        extern MIDL_CONST_ID IID& IID_IMapControl2 = _uuidof(IMapControl2);
                    } /* Maps */
                } /* Controls */
            } /* Xaml */
        } /* UI */
    } /* Windows */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl2;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl2_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Interface Windows.UI.Xaml.Controls.Maps.IMapControl3
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 2.0
 *
 * Interface is a part of the implementation of type Windows.UI.Xaml.Controls.Maps.MapControl
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x20000
#if !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl3_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl3_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_UI_Xaml_Controls_Maps_IMapControl3[] = L"Windows.UI.Xaml.Controls.Maps.IMapControl3";
namespace ABI {
    namespace Windows {
        namespace UI {
            namespace Xaml {
                namespace Controls {
                    namespace Maps {
                        MIDL_INTERFACE("586328f8-8cdd-40ae-9338-af2a7be845e5")
                        IMapControl3 : public IInspectable
                        {
                        public:
                            virtual HRESULT STDMETHODCALLTYPE add_MapRightTapped(
                                __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapRightTappedEventArgs* handler,
                                EventRegistrationToken* token
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE remove_MapRightTapped(
                                EventRegistrationToken token
                                ) = 0;
                        };

                        extern MIDL_CONST_ID IID& IID_IMapControl3 = _uuidof(IMapControl3);
                    } /* Maps */
                } /* Controls */
            } /* Xaml */
        } /* UI */
    } /* Windows */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl3;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl3_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x20000

/*
 *
 * Interface Windows.UI.Xaml.Controls.Maps.IMapControl4
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 3.0
 *
 * Interface is a part of the implementation of type Windows.UI.Xaml.Controls.Maps.MapControl
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x30000
#if !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl4_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl4_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_UI_Xaml_Controls_Maps_IMapControl4[] = L"Windows.UI.Xaml.Controls.Maps.IMapControl4";
namespace ABI {
    namespace Windows {
        namespace UI {
            namespace Xaml {
                namespace Controls {
                    namespace Maps {
                        MIDL_INTERFACE("068f132a-1817-466d-b7ce-419b3f8e248b")
                        IMapControl4 : public IInspectable
                        {
                        public:
                            virtual HRESULT STDMETHODCALLTYPE get_BusinessLandmarksEnabled(
                                boolean* value
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE put_BusinessLandmarksEnabled(
                                boolean value
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE get_TransitFeaturesEnabled(
                                boolean* value
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE put_TransitFeaturesEnabled(
                                boolean value
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE GetVisibleRegion(
                                ABI::Windows::UI::Xaml::Controls::Maps::MapVisibleRegionKind region,
                                ABI::Windows::Devices::Geolocation::IGeopath** result
                                ) = 0;
                        };

                        extern MIDL_CONST_ID IID& IID_IMapControl4 = _uuidof(IMapControl4);
                    } /* Maps */
                } /* Controls */
            } /* Xaml */
        } /* UI */
    } /* Windows */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl4;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl4_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x30000

/*
 *
 * Interface Windows.UI.Xaml.Controls.Maps.IMapControl5
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 4.0
 *
 * Interface is a part of the implementation of type Windows.UI.Xaml.Controls.Maps.MapControl
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x40000
#if !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl5_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl5_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_UI_Xaml_Controls_Maps_IMapControl5[] = L"Windows.UI.Xaml.Controls.Maps.IMapControl5";
namespace ABI {
    namespace Windows {
        namespace UI {
            namespace Xaml {
                namespace Controls {
                    namespace Maps {
                        MIDL_INTERFACE("dd9b0ffd-7823-46a2-82c9-65ddac4f365f")
                        IMapControl5 : public IInspectable
                        {
                        public:
                            virtual HRESULT STDMETHODCALLTYPE get_MapProjection(
                                ABI::Windows::UI::Xaml::Controls::Maps::MapProjection* value
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE put_MapProjection(
                                ABI::Windows::UI::Xaml::Controls::Maps::MapProjection value
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE get_StyleSheet(
                                ABI::Windows::UI::Xaml::Controls::Maps::IMapStyleSheet** value
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE put_StyleSheet(
                                ABI::Windows::UI::Xaml::Controls::Maps::IMapStyleSheet* value
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE get_ViewPadding(
                                ABI::Windows::UI::Xaml::Thickness* value
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE put_ViewPadding(
                                ABI::Windows::UI::Xaml::Thickness value
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE add_MapContextRequested(
                                __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapContextRequestedEventArgs* handler,
                                EventRegistrationToken* token
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE remove_MapContextRequested(
                                EventRegistrationToken token
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE FindMapElementsAtOffsetWithRadius(
                                ABI::Windows::Foundation::Point offset,
                                DOUBLE radius,
                                __FIVectorView_1_Windows__CUI__CXaml__CControls__CMaps__CMapElement** result
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE GetLocationFromOffsetWithReferenceSystem(
                                ABI::Windows::Foundation::Point offset,
                                ABI::Windows::Devices::Geolocation::AltitudeReferenceSystem desiredReferenceSystem,
                                ABI::Windows::Devices::Geolocation::IGeopoint** location
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE StartContinuousPan(
                                DOUBLE horizontalPixelsPerSecond,
                                DOUBLE verticalPixelsPerSecond
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE StopContinuousPan(void) = 0;
                            virtual HRESULT STDMETHODCALLTYPE TryPanAsync(
                                DOUBLE horizontalPixels,
                                DOUBLE verticalPixels,
                                __FIAsyncOperation_1_boolean** operation
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE TryPanToAsync(
                                ABI::Windows::Devices::Geolocation::IGeopoint* location,
                                __FIAsyncOperation_1_boolean** operation
                                ) = 0;
                        };

                        extern MIDL_CONST_ID IID& IID_IMapControl5 = _uuidof(IMapControl5);
                    } /* Maps */
                } /* Controls */
            } /* Xaml */
        } /* UI */
    } /* Windows */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl5;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl5_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x40000

/*
 *
 * Interface Windows.UI.Xaml.Controls.Maps.IMapControl6
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 5.0
 *
 * Interface is a part of the implementation of type Windows.UI.Xaml.Controls.Maps.MapControl
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x50000
#if !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl6_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl6_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_UI_Xaml_Controls_Maps_IMapControl6[] = L"Windows.UI.Xaml.Controls.Maps.IMapControl6";
namespace ABI {
    namespace Windows {
        namespace UI {
            namespace Xaml {
                namespace Controls {
                    namespace Maps {
                        MIDL_INTERFACE("b0da89a2-1041-4bea-b88a-12ac9a82e0e2")
                        IMapControl6 : public IInspectable
                        {
                        public:
                            virtual HRESULT STDMETHODCALLTYPE get_Layers(
                                __FIVector_1_Windows__CUI__CXaml__CControls__CMaps__CMapLayer** value
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE put_Layers(
                                __FIVector_1_Windows__CUI__CXaml__CControls__CMaps__CMapLayer* value
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE TryGetLocationFromOffset(
                                ABI::Windows::Foundation::Point offset,
                                ABI::Windows::Devices::Geolocation::IGeopoint** location,
                                boolean* returnValue
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE TryGetLocationFromOffsetWithReferenceSystem(
                                ABI::Windows::Foundation::Point offset,
                                ABI::Windows::Devices::Geolocation::AltitudeReferenceSystem desiredReferenceSystem,
                                ABI::Windows::Devices::Geolocation::IGeopoint** location,
                                boolean* returnValue
                                ) = 0;
                        };

                        extern MIDL_CONST_ID IID& IID_IMapControl6 = _uuidof(IMapControl6);
                    } /* Maps */
                } /* Controls */
            } /* Xaml */
        } /* UI */
    } /* Windows */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl6;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl6_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x50000

/*
 *
 * Interface Windows.UI.Xaml.Controls.Maps.IMapControl7
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 6.0
 *
 * Interface is a part of the implementation of type Windows.UI.Xaml.Controls.Maps.MapControl
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x60000
#if !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl7_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl7_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_UI_Xaml_Controls_Maps_IMapControl7[] = L"Windows.UI.Xaml.Controls.Maps.IMapControl7";
namespace ABI {
    namespace Windows {
        namespace UI {
            namespace Xaml {
                namespace Controls {
                    namespace Maps {
                        MIDL_INTERFACE("0d86e453-0c1f-4f7e-ae66-4ad0b4987857")
                        IMapControl7 : public IInspectable
                        {
                        public:
                            virtual HRESULT STDMETHODCALLTYPE get_Region(
                                HSTRING* value
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE put_Region(
                                HSTRING value
                                ) = 0;
                        };

                        extern MIDL_CONST_ID IID& IID_IMapControl7 = _uuidof(IMapControl7);
                    } /* Maps */
                } /* Controls */
            } /* Xaml */
        } /* UI */
    } /* Windows */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl7;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl7_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x60000

/*
 *
 * Interface Windows.UI.Xaml.Controls.Maps.IMapControl8
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 8.0
 *
 * Interface is a part of the implementation of type Windows.UI.Xaml.Controls.Maps.MapControl
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x80000
#if !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl8_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl8_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_UI_Xaml_Controls_Maps_IMapControl8[] = L"Windows.UI.Xaml.Controls.Maps.IMapControl8";
namespace ABI {
    namespace Windows {
        namespace UI {
            namespace Xaml {
                namespace Controls {
                    namespace Maps {
                        MIDL_INTERFACE("009e9c46-724d-53ca-9421-7a48fc731523")
                        IMapControl8 : public IInspectable
                        {
                        public:
                            virtual HRESULT STDMETHODCALLTYPE get_CanTiltDown(
                                boolean* value
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE get_CanTiltUp(
                                boolean* value
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE get_CanZoomIn(
                                boolean* value
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE get_CanZoomOut(
                                boolean* value
                                ) = 0;
                        };

                        extern MIDL_CONST_ID IID& IID_IMapControl8 = _uuidof(IMapControl8);
                    } /* Maps */
                } /* Controls */
            } /* Xaml */
        } /* UI */
    } /* Windows */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl8;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl8_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x80000

/*
 *
 * Interface Windows.UI.Xaml.Controls.Maps.IMapControlBusinessLandmarkClickEventArgs
 *
 * Introduced to Windows.Services.Maps.LocalSearchContract in version 2.0
 *
 * Interface is a part of the implementation of type Windows.UI.Xaml.Controls.Maps.MapControlBusinessLandmarkClickEventArgs
 *
 */
#if WINDOWS_SERVICES_MAPS_LOCALSEARCHCONTRACT_VERSION >= 0x20000
#if !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlBusinessLandmarkClickEventArgs_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlBusinessLandmarkClickEventArgs_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_UI_Xaml_Controls_Maps_IMapControlBusinessLandmarkClickEventArgs[] = L"Windows.UI.Xaml.Controls.Maps.IMapControlBusinessLandmarkClickEventArgs";
namespace ABI {
    namespace Windows {
        namespace UI {
            namespace Xaml {
                namespace Controls {
                    namespace Maps {
                        MIDL_INTERFACE("5e464922-4a1a-4797-beb7-5cf7754cb867")
                        IMapControlBusinessLandmarkClickEventArgs : public IInspectable
                        {
                        public:
                            virtual HRESULT STDMETHODCALLTYPE get_LocalLocations(
                                __FIVectorView_1_Windows__CServices__CMaps__CLocalSearch__CLocalLocation** value
                                ) = 0;
                        };

                        extern MIDL_CONST_ID IID& IID_IMapControlBusinessLandmarkClickEventArgs = _uuidof(IMapControlBusinessLandmarkClickEventArgs);
                    } /* Maps */
                } /* Controls */
            } /* Xaml */
        } /* UI */
    } /* Windows */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlBusinessLandmarkClickEventArgs;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlBusinessLandmarkClickEventArgs_INTERFACE_DEFINED__) */
#endif // WINDOWS_SERVICES_MAPS_LOCALSEARCHCONTRACT_VERSION >= 0x20000

/*
 *
 * Interface Windows.UI.Xaml.Controls.Maps.IMapControlBusinessLandmarkPointerEnteredEventArgs
 *
 * Introduced to Windows.Services.Maps.LocalSearchContract in version 3.0
 *
 * Interface is a part of the implementation of type Windows.UI.Xaml.Controls.Maps.MapControlBusinessLandmarkPointerEnteredEventArgs
 *
 */
#if WINDOWS_SERVICES_MAPS_LOCALSEARCHCONTRACT_VERSION >= 0x30000
#if !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlBusinessLandmarkPointerEnteredEventArgs_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlBusinessLandmarkPointerEnteredEventArgs_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_UI_Xaml_Controls_Maps_IMapControlBusinessLandmarkPointerEnteredEventArgs[] = L"Windows.UI.Xaml.Controls.Maps.IMapControlBusinessLandmarkPointerEnteredEventArgs";
namespace ABI {
    namespace Windows {
        namespace UI {
            namespace Xaml {
                namespace Controls {
                    namespace Maps {
                        MIDL_INTERFACE("5e4081a6-ea98-4f95-8caf-5b42696ff504")
                        IMapControlBusinessLandmarkPointerEnteredEventArgs : public IInspectable
                        {
                        public:
                            virtual HRESULT STDMETHODCALLTYPE get_LocalLocations(
                                __FIVectorView_1_Windows__CServices__CMaps__CLocalSearch__CLocalLocation** value
                                ) = 0;
                        };

                        extern MIDL_CONST_ID IID& IID_IMapControlBusinessLandmarkPointerEnteredEventArgs = _uuidof(IMapControlBusinessLandmarkPointerEnteredEventArgs);
                    } /* Maps */
                } /* Controls */
            } /* Xaml */
        } /* UI */
    } /* Windows */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlBusinessLandmarkPointerEnteredEventArgs;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlBusinessLandmarkPointerEnteredEventArgs_INTERFACE_DEFINED__) */
#endif // WINDOWS_SERVICES_MAPS_LOCALSEARCHCONTRACT_VERSION >= 0x30000

/*
 *
 * Interface Windows.UI.Xaml.Controls.Maps.IMapControlBusinessLandmarkPointerExitedEventArgs
 *
 * Introduced to Windows.Services.Maps.LocalSearchContract in version 3.0
 *
 * Interface is a part of the implementation of type Windows.UI.Xaml.Controls.Maps.MapControlBusinessLandmarkPointerExitedEventArgs
 *
 */
#if WINDOWS_SERVICES_MAPS_LOCALSEARCHCONTRACT_VERSION >= 0x30000
#if !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlBusinessLandmarkPointerExitedEventArgs_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlBusinessLandmarkPointerExitedEventArgs_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_UI_Xaml_Controls_Maps_IMapControlBusinessLandmarkPointerExitedEventArgs[] = L"Windows.UI.Xaml.Controls.Maps.IMapControlBusinessLandmarkPointerExitedEventArgs";
namespace ABI {
    namespace Windows {
        namespace UI {
            namespace Xaml {
                namespace Controls {
                    namespace Maps {
                        MIDL_INTERFACE("2bb52caf-f24a-46d0-b463-65f719731057")
                        IMapControlBusinessLandmarkPointerExitedEventArgs : public IInspectable
                        {
                        public:
                            virtual HRESULT STDMETHODCALLTYPE get_LocalLocations(
                                __FIVectorView_1_Windows__CServices__CMaps__CLocalSearch__CLocalLocation** value
                                ) = 0;
                        };

                        extern MIDL_CONST_ID IID& IID_IMapControlBusinessLandmarkPointerExitedEventArgs = _uuidof(IMapControlBusinessLandmarkPointerExitedEventArgs);
                    } /* Maps */
                } /* Controls */
            } /* Xaml */
        } /* UI */
    } /* Windows */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlBusinessLandmarkPointerExitedEventArgs;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlBusinessLandmarkPointerExitedEventArgs_INTERFACE_DEFINED__) */
#endif // WINDOWS_SERVICES_MAPS_LOCALSEARCHCONTRACT_VERSION >= 0x30000

/*
 *
 * Interface Windows.UI.Xaml.Controls.Maps.IMapControlBusinessLandmarkRightTappedEventArgs
 *
 * Introduced to Windows.Services.Maps.LocalSearchContract in version 2.0
 *
 * Interface is a part of the implementation of type Windows.UI.Xaml.Controls.Maps.MapControlBusinessLandmarkRightTappedEventArgs
 *
 */
#if WINDOWS_SERVICES_MAPS_LOCALSEARCHCONTRACT_VERSION >= 0x20000
#if !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlBusinessLandmarkRightTappedEventArgs_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlBusinessLandmarkRightTappedEventArgs_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_UI_Xaml_Controls_Maps_IMapControlBusinessLandmarkRightTappedEventArgs[] = L"Windows.UI.Xaml.Controls.Maps.IMapControlBusinessLandmarkRightTappedEventArgs";
namespace ABI {
    namespace Windows {
        namespace UI {
            namespace Xaml {
                namespace Controls {
                    namespace Maps {
                        MIDL_INTERFACE("59ab8ae7-f184-4ab1-b0b0-35c8bf0654b2")
                        IMapControlBusinessLandmarkRightTappedEventArgs : public IInspectable
                        {
                        public:
                            virtual HRESULT STDMETHODCALLTYPE get_LocalLocations(
                                __FIVectorView_1_Windows__CServices__CMaps__CLocalSearch__CLocalLocation** value
                                ) = 0;
                        };

                        extern MIDL_CONST_ID IID& IID_IMapControlBusinessLandmarkRightTappedEventArgs = _uuidof(IMapControlBusinessLandmarkRightTappedEventArgs);
                    } /* Maps */
                } /* Controls */
            } /* Xaml */
        } /* UI */
    } /* Windows */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlBusinessLandmarkRightTappedEventArgs;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlBusinessLandmarkRightTappedEventArgs_INTERFACE_DEFINED__) */
#endif // WINDOWS_SERVICES_MAPS_LOCALSEARCHCONTRACT_VERSION >= 0x20000

/*
 *
 * Interface Windows.UI.Xaml.Controls.Maps.IMapControlDataHelper
 *
 * Introduced to Windows.Services.Maps.LocalSearchContract in version 2.0
 *
 * Interface is a part of the implementation of type Windows.UI.Xaml.Controls.Maps.MapControlDataHelper
 *
 */
#if WINDOWS_SERVICES_MAPS_LOCALSEARCHCONTRACT_VERSION >= 0x20000
#if !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlDataHelper_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlDataHelper_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_UI_Xaml_Controls_Maps_IMapControlDataHelper[] = L"Windows.UI.Xaml.Controls.Maps.IMapControlDataHelper";
namespace ABI {
    namespace Windows {
        namespace UI {
            namespace Xaml {
                namespace Controls {
                    namespace Maps {
                        MIDL_INTERFACE("8bb0f09c-14ab-486c-9de5-5a5def0205a2")
                        IMapControlDataHelper : public IInspectable
                        {
                        public:
                            virtual HRESULT STDMETHODCALLTYPE add_BusinessLandmarkClick(
                                __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapControlBusinessLandmarkClickEventArgs* value,
                                EventRegistrationToken* token
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE remove_BusinessLandmarkClick(
                                EventRegistrationToken token
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE add_TransitFeatureClick(
                                __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapControlTransitFeatureClickEventArgs* value,
                                EventRegistrationToken* token
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE remove_TransitFeatureClick(
                                EventRegistrationToken token
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE add_BusinessLandmarkRightTapped(
                                __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapControlBusinessLandmarkRightTappedEventArgs* value,
                                EventRegistrationToken* token
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE remove_BusinessLandmarkRightTapped(
                                EventRegistrationToken token
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE add_TransitFeatureRightTapped(
                                __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapControlTransitFeatureRightTappedEventArgs* value,
                                EventRegistrationToken* token
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE remove_TransitFeatureRightTapped(
                                EventRegistrationToken token
                                ) = 0;
                        };

                        extern MIDL_CONST_ID IID& IID_IMapControlDataHelper = _uuidof(IMapControlDataHelper);
                    } /* Maps */
                } /* Controls */
            } /* Xaml */
        } /* UI */
    } /* Windows */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlDataHelper;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlDataHelper_INTERFACE_DEFINED__) */
#endif // WINDOWS_SERVICES_MAPS_LOCALSEARCHCONTRACT_VERSION >= 0x20000

/*
 *
 * Interface Windows.UI.Xaml.Controls.Maps.IMapControlDataHelper2
 *
 * Introduced to Windows.Services.Maps.LocalSearchContract in version 3.0
 *
 * Interface is a part of the implementation of type Windows.UI.Xaml.Controls.Maps.MapControlDataHelper
 *
 */
#if WINDOWS_SERVICES_MAPS_LOCALSEARCHCONTRACT_VERSION >= 0x30000
#if !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlDataHelper2_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlDataHelper2_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_UI_Xaml_Controls_Maps_IMapControlDataHelper2[] = L"Windows.UI.Xaml.Controls.Maps.IMapControlDataHelper2";
namespace ABI {
    namespace Windows {
        namespace UI {
            namespace Xaml {
                namespace Controls {
                    namespace Maps {
                        MIDL_INTERFACE("59ce429e-562f-4c21-a674-0f11decf0fb3")
                        IMapControlDataHelper2 : public IInspectable
                        {
                        public:
                            virtual HRESULT STDMETHODCALLTYPE add_BusinessLandmarkPointerEntered(
                                __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapControlBusinessLandmarkPointerEnteredEventArgs* value,
                                EventRegistrationToken* token
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE remove_BusinessLandmarkPointerEntered(
                                EventRegistrationToken token
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE add_TransitFeaturePointerEntered(
                                __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapControlTransitFeaturePointerEnteredEventArgs* value,
                                EventRegistrationToken* token
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE remove_TransitFeaturePointerEntered(
                                EventRegistrationToken token
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE add_BusinessLandmarkPointerExited(
                                __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapControlBusinessLandmarkPointerExitedEventArgs* value,
                                EventRegistrationToken* token
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE remove_BusinessLandmarkPointerExited(
                                EventRegistrationToken token
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE add_TransitFeaturePointerExited(
                                __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapControlTransitFeaturePointerExitedEventArgs* value,
                                EventRegistrationToken* token
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE remove_TransitFeaturePointerExited(
                                EventRegistrationToken token
                                ) = 0;
                        };

                        extern MIDL_CONST_ID IID& IID_IMapControlDataHelper2 = _uuidof(IMapControlDataHelper2);
                    } /* Maps */
                } /* Controls */
            } /* Xaml */
        } /* UI */
    } /* Windows */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlDataHelper2;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlDataHelper2_INTERFACE_DEFINED__) */
#endif // WINDOWS_SERVICES_MAPS_LOCALSEARCHCONTRACT_VERSION >= 0x30000

/*
 *
 * Interface Windows.UI.Xaml.Controls.Maps.IMapControlDataHelperFactory
 *
 * Introduced to Windows.Services.Maps.LocalSearchContract in version 2.0
 *
 * Interface is a part of the implementation of type Windows.UI.Xaml.Controls.Maps.MapControlDataHelper
 *
 */
#if WINDOWS_SERVICES_MAPS_LOCALSEARCHCONTRACT_VERSION >= 0x20000
#if !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlDataHelperFactory_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlDataHelperFactory_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_UI_Xaml_Controls_Maps_IMapControlDataHelperFactory[] = L"Windows.UI.Xaml.Controls.Maps.IMapControlDataHelperFactory";
namespace ABI {
    namespace Windows {
        namespace UI {
            namespace Xaml {
                namespace Controls {
                    namespace Maps {
                        MIDL_INTERFACE("3b70aa8e-02ef-469c-bbaf-dc2158d4289b")
                        IMapControlDataHelperFactory : public IInspectable
                        {
                        public:
                            virtual HRESULT STDMETHODCALLTYPE CreateInstance(
                                ABI::Windows::UI::Xaml::Controls::Maps::IMapControl* map,
                                ABI::Windows::UI::Xaml::Controls::Maps::IMapControlDataHelper** instance
                                ) = 0;
                        };

                        extern MIDL_CONST_ID IID& IID_IMapControlDataHelperFactory = _uuidof(IMapControlDataHelperFactory);
                    } /* Maps */
                } /* Controls */
            } /* Xaml */
        } /* UI */
    } /* Windows */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlDataHelperFactory;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlDataHelperFactory_INTERFACE_DEFINED__) */
#endif // WINDOWS_SERVICES_MAPS_LOCALSEARCHCONTRACT_VERSION >= 0x20000

/*
 *
 * Interface Windows.UI.Xaml.Controls.Maps.IMapControlDataHelperStatics
 *
 * Introduced to Windows.Services.Maps.LocalSearchContract in version 4.0
 *
 * Interface is a part of the implementation of type Windows.UI.Xaml.Controls.Maps.MapControlDataHelper
 *
 */
#if WINDOWS_SERVICES_MAPS_LOCALSEARCHCONTRACT_VERSION >= 0x40000
#if !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlDataHelperStatics_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlDataHelperStatics_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_UI_Xaml_Controls_Maps_IMapControlDataHelperStatics[] = L"Windows.UI.Xaml.Controls.Maps.IMapControlDataHelperStatics";
namespace ABI {
    namespace Windows {
        namespace UI {
            namespace Xaml {
                namespace Controls {
                    namespace Maps {
                        MIDL_INTERFACE("7a6632d6-e944-4110-83cf-314d0722e2e5")
                        IMapControlDataHelperStatics : public IInspectable
                        {
                        public:
                            virtual HRESULT STDMETHODCALLTYPE CreateMapControl(
                                boolean rasterRenderMode,
                                ABI::Windows::UI::Xaml::Controls::Maps::IMapControl** returnValue
                                ) = 0;
                        };

                        extern MIDL_CONST_ID IID& IID_IMapControlDataHelperStatics = _uuidof(IMapControlDataHelperStatics);
                    } /* Maps */
                } /* Controls */
            } /* Xaml */
        } /* UI */
    } /* Windows */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlDataHelperStatics;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlDataHelperStatics_INTERFACE_DEFINED__) */
#endif // WINDOWS_SERVICES_MAPS_LOCALSEARCHCONTRACT_VERSION >= 0x40000

/*
 *
 * Interface Windows.UI.Xaml.Controls.Maps.IMapControlStatics
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Interface is a part of the implementation of type Windows.UI.Xaml.Controls.Maps.MapControl
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_UI_Xaml_Controls_Maps_IMapControlStatics[] = L"Windows.UI.Xaml.Controls.Maps.IMapControlStatics";
namespace ABI {
    namespace Windows {
        namespace UI {
            namespace Xaml {
                namespace Controls {
                    namespace Maps {
                        MIDL_INTERFACE("c2c61795-2147-4f0a-942a-5493a85de807")
                        IMapControlStatics : public IInspectable
                        {
                        public:
                            virtual HRESULT STDMETHODCALLTYPE get_CenterProperty(
                                ABI::Windows::UI::Xaml::IDependencyProperty** value
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE get_ChildrenProperty(
                                ABI::Windows::UI::Xaml::IDependencyProperty** value
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE get_ColorSchemeProperty(
                                ABI::Windows::UI::Xaml::IDependencyProperty** value
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE get_DesiredPitchProperty(
                                ABI::Windows::UI::Xaml::IDependencyProperty** value
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE get_HeadingProperty(
                                ABI::Windows::UI::Xaml::IDependencyProperty** value
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE get_LandmarksVisibleProperty(
                                ABI::Windows::UI::Xaml::IDependencyProperty** value
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE get_LoadingStatusProperty(
                                ABI::Windows::UI::Xaml::IDependencyProperty** value
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE get_MapServiceTokenProperty(
                                ABI::Windows::UI::Xaml::IDependencyProperty** value
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE get_PedestrianFeaturesVisibleProperty(
                                ABI::Windows::UI::Xaml::IDependencyProperty** value
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE get_PitchProperty(
                                ABI::Windows::UI::Xaml::IDependencyProperty** value
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE get_StyleProperty(
                                ABI::Windows::UI::Xaml::IDependencyProperty** value
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE get_TrafficFlowVisibleProperty(
                                ABI::Windows::UI::Xaml::IDependencyProperty** value
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE get_TransformOriginProperty(
                                ABI::Windows::UI::Xaml::IDependencyProperty** value
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE get_WatermarkModeProperty(
                                ABI::Windows::UI::Xaml::IDependencyProperty** value
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE get_ZoomLevelProperty(
                                ABI::Windows::UI::Xaml::IDependencyProperty** value
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE get_MapElementsProperty(
                                ABI::Windows::UI::Xaml::IDependencyProperty** value
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE get_RoutesProperty(
                                ABI::Windows::UI::Xaml::IDependencyProperty** value
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE get_TileSourcesProperty(
                                ABI::Windows::UI::Xaml::IDependencyProperty** value
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE get_LocationProperty(
                                ABI::Windows::UI::Xaml::IDependencyProperty** value
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE GetLocation(
                                ABI::Windows::UI::Xaml::IDependencyObject* element,
                                ABI::Windows::Devices::Geolocation::IGeopoint** result
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE SetLocation(
                                ABI::Windows::UI::Xaml::IDependencyObject* element,
                                ABI::Windows::Devices::Geolocation::IGeopoint* value
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE get_NormalizedAnchorPointProperty(
                                ABI::Windows::UI::Xaml::IDependencyProperty** value
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE GetNormalizedAnchorPoint(
                                ABI::Windows::UI::Xaml::IDependencyObject* element,
                                ABI::Windows::Foundation::Point* result
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE SetNormalizedAnchorPoint(
                                ABI::Windows::UI::Xaml::IDependencyObject* element,
                                ABI::Windows::Foundation::Point value
                                ) = 0;
                        };

                        extern MIDL_CONST_ID IID& IID_IMapControlStatics = _uuidof(IMapControlStatics);
                    } /* Maps */
                } /* Controls */
            } /* Xaml */
        } /* UI */
    } /* Windows */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Interface Windows.UI.Xaml.Controls.Maps.IMapControlStatics2
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Interface is a part of the implementation of type Windows.UI.Xaml.Controls.Maps.MapControl
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics2_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics2_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_UI_Xaml_Controls_Maps_IMapControlStatics2[] = L"Windows.UI.Xaml.Controls.Maps.IMapControlStatics2";
namespace ABI {
    namespace Windows {
        namespace UI {
            namespace Xaml {
                namespace Controls {
                    namespace Maps {
                        MIDL_INTERFACE("04852b93-b446-4d31-9752-1ec69a5996ae")
                        IMapControlStatics2 : public IInspectable
                        {
                        public:
                            virtual HRESULT STDMETHODCALLTYPE get_BusinessLandmarksVisibleProperty(
                                ABI::Windows::UI::Xaml::IDependencyProperty** value
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE get_TransitFeaturesVisibleProperty(
                                ABI::Windows::UI::Xaml::IDependencyProperty** value
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE get_PanInteractionModeProperty(
                                ABI::Windows::UI::Xaml::IDependencyProperty** value
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE get_RotateInteractionModeProperty(
                                ABI::Windows::UI::Xaml::IDependencyProperty** value
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE get_TiltInteractionModeProperty(
                                ABI::Windows::UI::Xaml::IDependencyProperty** value
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE get_ZoomInteractionModeProperty(
                                ABI::Windows::UI::Xaml::IDependencyProperty** value
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE get_Is3DSupportedProperty(
                                ABI::Windows::UI::Xaml::IDependencyProperty** value
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE get_IsStreetsideSupportedProperty(
                                ABI::Windows::UI::Xaml::IDependencyProperty** value
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE get_SceneProperty(
                                ABI::Windows::UI::Xaml::IDependencyProperty** value
                                ) = 0;
                        };

                        extern MIDL_CONST_ID IID& IID_IMapControlStatics2 = _uuidof(IMapControlStatics2);
                    } /* Maps */
                } /* Controls */
            } /* Xaml */
        } /* UI */
    } /* Windows */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics2;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics2_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Interface Windows.UI.Xaml.Controls.Maps.IMapControlStatics4
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 3.0
 *
 * Interface is a part of the implementation of type Windows.UI.Xaml.Controls.Maps.MapControl
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x30000
#if !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics4_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics4_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_UI_Xaml_Controls_Maps_IMapControlStatics4[] = L"Windows.UI.Xaml.Controls.Maps.IMapControlStatics4";
namespace ABI {
    namespace Windows {
        namespace UI {
            namespace Xaml {
                namespace Controls {
                    namespace Maps {
                        MIDL_INTERFACE("fe785d97-5d13-4fa1-bf1d-84061768c183")
                        IMapControlStatics4 : public IInspectable
                        {
                        public:
                            virtual HRESULT STDMETHODCALLTYPE get_BusinessLandmarksEnabledProperty(
                                ABI::Windows::UI::Xaml::IDependencyProperty** value
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE get_TransitFeaturesEnabledProperty(
                                ABI::Windows::UI::Xaml::IDependencyProperty** value
                                ) = 0;
                        };

                        extern MIDL_CONST_ID IID& IID_IMapControlStatics4 = _uuidof(IMapControlStatics4);
                    } /* Maps */
                } /* Controls */
            } /* Xaml */
        } /* UI */
    } /* Windows */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics4;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics4_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x30000

/*
 *
 * Interface Windows.UI.Xaml.Controls.Maps.IMapControlStatics5
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 4.0
 *
 * Interface is a part of the implementation of type Windows.UI.Xaml.Controls.Maps.MapControl
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x40000
#if !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics5_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics5_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_UI_Xaml_Controls_Maps_IMapControlStatics5[] = L"Windows.UI.Xaml.Controls.Maps.IMapControlStatics5";
namespace ABI {
    namespace Windows {
        namespace UI {
            namespace Xaml {
                namespace Controls {
                    namespace Maps {
                        MIDL_INTERFACE("09626f00-b7dd-4189-a7f7-830c412deea3")
                        IMapControlStatics5 : public IInspectable
                        {
                        public:
                            virtual HRESULT STDMETHODCALLTYPE get_MapProjectionProperty(
                                ABI::Windows::UI::Xaml::IDependencyProperty** value
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE get_StyleSheetProperty(
                                ABI::Windows::UI::Xaml::IDependencyProperty** value
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE get_ViewPaddingProperty(
                                ABI::Windows::UI::Xaml::IDependencyProperty** value
                                ) = 0;
                        };

                        extern MIDL_CONST_ID IID& IID_IMapControlStatics5 = _uuidof(IMapControlStatics5);
                    } /* Maps */
                } /* Controls */
            } /* Xaml */
        } /* UI */
    } /* Windows */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics5;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics5_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x40000

/*
 *
 * Interface Windows.UI.Xaml.Controls.Maps.IMapControlStatics6
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 5.0
 *
 * Interface is a part of the implementation of type Windows.UI.Xaml.Controls.Maps.MapControl
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x50000
#if !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics6_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics6_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_UI_Xaml_Controls_Maps_IMapControlStatics6[] = L"Windows.UI.Xaml.Controls.Maps.IMapControlStatics6";
namespace ABI {
    namespace Windows {
        namespace UI {
            namespace Xaml {
                namespace Controls {
                    namespace Maps {
                        MIDL_INTERFACE("3ccfdd7f-24d1-40a2-8351-b3063a8c95a4")
                        IMapControlStatics6 : public IInspectable
                        {
                        public:
                            virtual HRESULT STDMETHODCALLTYPE get_LayersProperty(
                                ABI::Windows::UI::Xaml::IDependencyProperty** value
                                ) = 0;
                        };

                        extern MIDL_CONST_ID IID& IID_IMapControlStatics6 = _uuidof(IMapControlStatics6);
                    } /* Maps */
                } /* Controls */
            } /* Xaml */
        } /* UI */
    } /* Windows */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics6;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics6_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x50000

/*
 *
 * Interface Windows.UI.Xaml.Controls.Maps.IMapControlStatics7
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 6.0
 *
 * Interface is a part of the implementation of type Windows.UI.Xaml.Controls.Maps.MapControl
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x60000
#if !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics7_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics7_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_UI_Xaml_Controls_Maps_IMapControlStatics7[] = L"Windows.UI.Xaml.Controls.Maps.IMapControlStatics7";
namespace ABI {
    namespace Windows {
        namespace UI {
            namespace Xaml {
                namespace Controls {
                    namespace Maps {
                        MIDL_INTERFACE("55f1ac4d-72c2-46b2-b7ae-790260be641b")
                        IMapControlStatics7 : public IInspectable
                        {
                        public:
                            virtual HRESULT STDMETHODCALLTYPE get_RegionProperty(
                                ABI::Windows::UI::Xaml::IDependencyProperty** value
                                ) = 0;
                        };

                        extern MIDL_CONST_ID IID& IID_IMapControlStatics7 = _uuidof(IMapControlStatics7);
                    } /* Maps */
                } /* Controls */
            } /* Xaml */
        } /* UI */
    } /* Windows */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics7;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics7_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x60000

/*
 *
 * Interface Windows.UI.Xaml.Controls.Maps.IMapControlStatics8
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 8.0
 *
 * Interface is a part of the implementation of type Windows.UI.Xaml.Controls.Maps.MapControl
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x80000
#if !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics8_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics8_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_UI_Xaml_Controls_Maps_IMapControlStatics8[] = L"Windows.UI.Xaml.Controls.Maps.IMapControlStatics8";
namespace ABI {
    namespace Windows {
        namespace UI {
            namespace Xaml {
                namespace Controls {
                    namespace Maps {
                        MIDL_INTERFACE("adb7a7b0-0605-592c-bf9d-d10bdc2be47b")
                        IMapControlStatics8 : public IInspectable
                        {
                        public:
                            virtual HRESULT STDMETHODCALLTYPE get_CanTiltDownProperty(
                                ABI::Windows::UI::Xaml::IDependencyProperty** value
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE get_CanTiltUpProperty(
                                ABI::Windows::UI::Xaml::IDependencyProperty** value
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE get_CanZoomInProperty(
                                ABI::Windows::UI::Xaml::IDependencyProperty** value
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE get_CanZoomOutProperty(
                                ABI::Windows::UI::Xaml::IDependencyProperty** value
                                ) = 0;
                        };

                        extern MIDL_CONST_ID IID& IID_IMapControlStatics8 = _uuidof(IMapControlStatics8);
                    } /* Maps */
                } /* Controls */
            } /* Xaml */
        } /* UI */
    } /* Windows */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics8;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics8_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x80000

/*
 *
 * Interface Windows.UI.Xaml.Controls.Maps.IMapControlTransitFeatureClickEventArgs
 *
 * Introduced to Windows.Services.Maps.LocalSearchContract in version 2.0
 *
 * Interface is a part of the implementation of type Windows.UI.Xaml.Controls.Maps.MapControlTransitFeatureClickEventArgs
 *
 */
#if WINDOWS_SERVICES_MAPS_LOCALSEARCHCONTRACT_VERSION >= 0x20000
#if !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlTransitFeatureClickEventArgs_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlTransitFeatureClickEventArgs_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_UI_Xaml_Controls_Maps_IMapControlTransitFeatureClickEventArgs[] = L"Windows.UI.Xaml.Controls.Maps.IMapControlTransitFeatureClickEventArgs";
namespace ABI {
    namespace Windows {
        namespace UI {
            namespace Xaml {
                namespace Controls {
                    namespace Maps {
                        MIDL_INTERFACE("76179969-b765-4622-b08a-3072745a4541")
                        IMapControlTransitFeatureClickEventArgs : public IInspectable
                        {
                        public:
                            virtual HRESULT STDMETHODCALLTYPE get_DisplayName(
                                HSTRING* value
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE get_Location(
                                ABI::Windows::Devices::Geolocation::IGeopoint** value
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE get_TransitProperties(
                                __FIMapView_2_HSTRING_IInspectable** value
                                ) = 0;
                        };

                        extern MIDL_CONST_ID IID& IID_IMapControlTransitFeatureClickEventArgs = _uuidof(IMapControlTransitFeatureClickEventArgs);
                    } /* Maps */
                } /* Controls */
            } /* Xaml */
        } /* UI */
    } /* Windows */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlTransitFeatureClickEventArgs;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlTransitFeatureClickEventArgs_INTERFACE_DEFINED__) */
#endif // WINDOWS_SERVICES_MAPS_LOCALSEARCHCONTRACT_VERSION >= 0x20000

/*
 *
 * Interface Windows.UI.Xaml.Controls.Maps.IMapControlTransitFeaturePointerEnteredEventArgs
 *
 * Introduced to Windows.Services.Maps.LocalSearchContract in version 3.0
 *
 * Interface is a part of the implementation of type Windows.UI.Xaml.Controls.Maps.MapControlTransitFeaturePointerEnteredEventArgs
 *
 */
#if WINDOWS_SERVICES_MAPS_LOCALSEARCHCONTRACT_VERSION >= 0x30000
#if !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlTransitFeaturePointerEnteredEventArgs_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlTransitFeaturePointerEnteredEventArgs_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_UI_Xaml_Controls_Maps_IMapControlTransitFeaturePointerEnteredEventArgs[] = L"Windows.UI.Xaml.Controls.Maps.IMapControlTransitFeaturePointerEnteredEventArgs";
namespace ABI {
    namespace Windows {
        namespace UI {
            namespace Xaml {
                namespace Controls {
                    namespace Maps {
                        MIDL_INTERFACE("73911a4e-ec4f-479e-94a1-36e081d0d897")
                        IMapControlTransitFeaturePointerEnteredEventArgs : public IInspectable
                        {
                        public:
                            virtual HRESULT STDMETHODCALLTYPE get_DisplayName(
                                HSTRING* value
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE get_Location(
                                ABI::Windows::Devices::Geolocation::IGeopoint** value
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE get_TransitProperties(
                                __FIMapView_2_HSTRING_IInspectable** value
                                ) = 0;
                        };

                        extern MIDL_CONST_ID IID& IID_IMapControlTransitFeaturePointerEnteredEventArgs = _uuidof(IMapControlTransitFeaturePointerEnteredEventArgs);
                    } /* Maps */
                } /* Controls */
            } /* Xaml */
        } /* UI */
    } /* Windows */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlTransitFeaturePointerEnteredEventArgs;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlTransitFeaturePointerEnteredEventArgs_INTERFACE_DEFINED__) */
#endif // WINDOWS_SERVICES_MAPS_LOCALSEARCHCONTRACT_VERSION >= 0x30000

/*
 *
 * Interface Windows.UI.Xaml.Controls.Maps.IMapControlTransitFeaturePointerExitedEventArgs
 *
 * Introduced to Windows.Services.Maps.LocalSearchContract in version 3.0
 *
 * Interface is a part of the implementation of type Windows.UI.Xaml.Controls.Maps.MapControlTransitFeaturePointerExitedEventArgs
 *
 */
#if WINDOWS_SERVICES_MAPS_LOCALSEARCHCONTRACT_VERSION >= 0x30000
#if !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlTransitFeaturePointerExitedEventArgs_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlTransitFeaturePointerExitedEventArgs_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_UI_Xaml_Controls_Maps_IMapControlTransitFeaturePointerExitedEventArgs[] = L"Windows.UI.Xaml.Controls.Maps.IMapControlTransitFeaturePointerExitedEventArgs";
namespace ABI {
    namespace Windows {
        namespace UI {
            namespace Xaml {
                namespace Controls {
                    namespace Maps {
                        MIDL_INTERFACE("6a11258d-448d-44e7-bc69-d13d497154e9")
                        IMapControlTransitFeaturePointerExitedEventArgs : public IInspectable
                        {
                        public:
                            virtual HRESULT STDMETHODCALLTYPE get_DisplayName(
                                HSTRING* value
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE get_Location(
                                ABI::Windows::Devices::Geolocation::IGeopoint** value
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE get_TransitProperties(
                                __FIMapView_2_HSTRING_IInspectable** value
                                ) = 0;
                        };

                        extern MIDL_CONST_ID IID& IID_IMapControlTransitFeaturePointerExitedEventArgs = _uuidof(IMapControlTransitFeaturePointerExitedEventArgs);
                    } /* Maps */
                } /* Controls */
            } /* Xaml */
        } /* UI */
    } /* Windows */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlTransitFeaturePointerExitedEventArgs;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlTransitFeaturePointerExitedEventArgs_INTERFACE_DEFINED__) */
#endif // WINDOWS_SERVICES_MAPS_LOCALSEARCHCONTRACT_VERSION >= 0x30000

/*
 *
 * Interface Windows.UI.Xaml.Controls.Maps.IMapControlTransitFeatureRightTappedEventArgs
 *
 * Introduced to Windows.Services.Maps.LocalSearchContract in version 2.0
 *
 * Interface is a part of the implementation of type Windows.UI.Xaml.Controls.Maps.MapControlTransitFeatureRightTappedEventArgs
 *
 */
#if WINDOWS_SERVICES_MAPS_LOCALSEARCHCONTRACT_VERSION >= 0x20000
#if !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlTransitFeatureRightTappedEventArgs_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlTransitFeatureRightTappedEventArgs_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_UI_Xaml_Controls_Maps_IMapControlTransitFeatureRightTappedEventArgs[] = L"Windows.UI.Xaml.Controls.Maps.IMapControlTransitFeatureRightTappedEventArgs";
namespace ABI {
    namespace Windows {
        namespace UI {
            namespace Xaml {
                namespace Controls {
                    namespace Maps {
                        MIDL_INTERFACE("aea1cc49-a729-4eae-a59a-3ec9a125a028")
                        IMapControlTransitFeatureRightTappedEventArgs : public IInspectable
                        {
                        public:
                            virtual HRESULT STDMETHODCALLTYPE get_DisplayName(
                                HSTRING* value
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE get_Location(
                                ABI::Windows::Devices::Geolocation::IGeopoint** value
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE get_TransitProperties(
                                __FIMapView_2_HSTRING_IInspectable** value
                                ) = 0;
                        };

                        extern MIDL_CONST_ID IID& IID_IMapControlTransitFeatureRightTappedEventArgs = _uuidof(IMapControlTransitFeatureRightTappedEventArgs);
                    } /* Maps */
                } /* Controls */
            } /* Xaml */
        } /* UI */
    } /* Windows */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlTransitFeatureRightTappedEventArgs;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlTransitFeatureRightTappedEventArgs_INTERFACE_DEFINED__) */
#endif // WINDOWS_SERVICES_MAPS_LOCALSEARCHCONTRACT_VERSION >= 0x20000

/*
 *
 * Interface Windows.UI.Xaml.Controls.Maps.IMapCustomExperience
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Interface is a part of the implementation of type Windows.UI.Xaml.Controls.Maps.MapCustomExperience
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCustomExperience_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCustomExperience_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_UI_Xaml_Controls_Maps_IMapCustomExperience[] = L"Windows.UI.Xaml.Controls.Maps.IMapCustomExperience";
namespace ABI {
    namespace Windows {
        namespace UI {
            namespace Xaml {
                namespace Controls {
                    namespace Maps {
                        MIDL_INTERFACE("64592866-14a3-4e5f-8883-8e9c500eeede")
                        IMapCustomExperience : public IInspectable
                        {
                        public:
                        };

                        extern MIDL_CONST_ID IID& IID_IMapCustomExperience = _uuidof(IMapCustomExperience);
                    } /* Maps */
                } /* Controls */
            } /* Xaml */
        } /* UI */
    } /* Windows */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCustomExperience;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCustomExperience_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Interface Windows.UI.Xaml.Controls.Maps.IMapCustomExperienceChangedEventArgs
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Interface is a part of the implementation of type Windows.UI.Xaml.Controls.Maps.MapCustomExperienceChangedEventArgs
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCustomExperienceChangedEventArgs_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCustomExperienceChangedEventArgs_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_UI_Xaml_Controls_Maps_IMapCustomExperienceChangedEventArgs[] = L"Windows.UI.Xaml.Controls.Maps.IMapCustomExperienceChangedEventArgs";
namespace ABI {
    namespace Windows {
        namespace UI {
            namespace Xaml {
                namespace Controls {
                    namespace Maps {
                        MIDL_INTERFACE("b9e6fb9b-8fc1-4042-ac34-a61b38bb7514")
                        IMapCustomExperienceChangedEventArgs : public IInspectable
                        {
                        public:
                        };

                        extern MIDL_CONST_ID IID& IID_IMapCustomExperienceChangedEventArgs = _uuidof(IMapCustomExperienceChangedEventArgs);
                    } /* Maps */
                } /* Controls */
            } /* Xaml */
        } /* UI */
    } /* Windows */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCustomExperienceChangedEventArgs;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCustomExperienceChangedEventArgs_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Interface Windows.UI.Xaml.Controls.Maps.IMapCustomExperienceFactory
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Interface is a part of the implementation of type Windows.UI.Xaml.Controls.Maps.MapCustomExperience
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCustomExperienceFactory_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCustomExperienceFactory_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_UI_Xaml_Controls_Maps_IMapCustomExperienceFactory[] = L"Windows.UI.Xaml.Controls.Maps.IMapCustomExperienceFactory";
namespace ABI {
    namespace Windows {
        namespace UI {
            namespace Xaml {
                namespace Controls {
                    namespace Maps {
                        MIDL_INTERFACE("7a403fb5-a1b1-4e7f-921e-3e6b8d8ebed6")
                        IMapCustomExperienceFactory : public IInspectable
                        {
                        public:
                            virtual HRESULT STDMETHODCALLTYPE CreateInstance(
                                IInspectable* baseInterface,
                                IInspectable** innerInterface,
                                ABI::Windows::UI::Xaml::Controls::Maps::IMapCustomExperience** value
                                ) = 0;
                        };

                        extern MIDL_CONST_ID IID& IID_IMapCustomExperienceFactory = _uuidof(IMapCustomExperienceFactory);
                    } /* Maps */
                } /* Controls */
            } /* Xaml */
        } /* UI */
    } /* Windows */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCustomExperienceFactory;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCustomExperienceFactory_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Interface Windows.UI.Xaml.Controls.Maps.IMapElement
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Interface is a part of the implementation of type Windows.UI.Xaml.Controls.Maps.MapElement
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_UI_Xaml_Controls_Maps_IMapElement[] = L"Windows.UI.Xaml.Controls.Maps.IMapElement";
namespace ABI {
    namespace Windows {
        namespace UI {
            namespace Xaml {
                namespace Controls {
                    namespace Maps {
                        MIDL_INTERFACE("d61fc4df-b245-47f2-9ac2-43c058b1c903")
                        IMapElement : public IInspectable
                        {
                        public:
                            virtual HRESULT STDMETHODCALLTYPE get_ZIndex(
                                INT32* value
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE put_ZIndex(
                                INT32 value
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE get_Visible(
                                boolean* value
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE put_Visible(
                                boolean value
                                ) = 0;
                        };

                        extern MIDL_CONST_ID IID& IID_IMapElement = _uuidof(IMapElement);
                    } /* Maps */
                } /* Controls */
            } /* Xaml */
        } /* UI */
    } /* Windows */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Interface Windows.UI.Xaml.Controls.Maps.IMapElement2
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Interface is a part of the implementation of type Windows.UI.Xaml.Controls.Maps.MapElement
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement2_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement2_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_UI_Xaml_Controls_Maps_IMapElement2[] = L"Windows.UI.Xaml.Controls.Maps.IMapElement2";
namespace ABI {
    namespace Windows {
        namespace UI {
            namespace Xaml {
                namespace Controls {
                    namespace Maps {
                        MIDL_INTERFACE("6619f261-fba6-4964-a7ff-f1af63ab9cb0")
                        IMapElement2 : public IInspectable
                        {
                        public:
                            virtual HRESULT STDMETHODCALLTYPE get_MapTabIndex(
                                INT32* value
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE put_MapTabIndex(
                                INT32 value
                                ) = 0;
                        };

                        extern MIDL_CONST_ID IID& IID_IMapElement2 = _uuidof(IMapElement2);
                    } /* Maps */
                } /* Controls */
            } /* Xaml */
        } /* UI */
    } /* Windows */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement2;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement2_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Interface Windows.UI.Xaml.Controls.Maps.IMapElement3
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 5.0
 *
 * Interface is a part of the implementation of type Windows.UI.Xaml.Controls.Maps.MapElement
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x50000
#if !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement3_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement3_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_UI_Xaml_Controls_Maps_IMapElement3[] = L"Windows.UI.Xaml.Controls.Maps.IMapElement3";
namespace ABI {
    namespace Windows {
        namespace UI {
            namespace Xaml {
                namespace Controls {
                    namespace Maps {
                        MIDL_INTERFACE("13efbc59-45ed-48b4-93ad-e3f78f8cf218")
                        IMapElement3 : public IInspectable
                        {
                        public:
                            virtual HRESULT STDMETHODCALLTYPE get_MapStyleSheetEntry(
                                HSTRING* value
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE put_MapStyleSheetEntry(
                                HSTRING value
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE get_MapStyleSheetEntryState(
                                HSTRING* value
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE put_MapStyleSheetEntryState(
                                HSTRING value
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE get_Tag(
                                IInspectable** value
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE put_Tag(
                                IInspectable* value
                                ) = 0;
                        };

                        extern MIDL_CONST_ID IID& IID_IMapElement3 = _uuidof(IMapElement3);
                    } /* Maps */
                } /* Controls */
            } /* Xaml */
        } /* UI */
    } /* Windows */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement3;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement3_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x50000

/*
 *
 * Interface Windows.UI.Xaml.Controls.Maps.IMapElement3D
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 5.0
 *
 * Interface is a part of the implementation of type Windows.UI.Xaml.Controls.Maps.MapElement3D
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x50000
#if !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement3D_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement3D_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_UI_Xaml_Controls_Maps_IMapElement3D[] = L"Windows.UI.Xaml.Controls.Maps.IMapElement3D";
namespace ABI {
    namespace Windows {
        namespace UI {
            namespace Xaml {
                namespace Controls {
                    namespace Maps {
                        MIDL_INTERFACE("827af8d5-3843-48e2-bd00-0f0644fbe6a5")
                        IMapElement3D : public IInspectable
                        {
                        public:
                            virtual HRESULT STDMETHODCALLTYPE get_Location(
                                ABI::Windows::Devices::Geolocation::IGeopoint** value
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE put_Location(
                                ABI::Windows::Devices::Geolocation::IGeopoint* value
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE get_Model(
                                ABI::Windows::UI::Xaml::Controls::Maps::IMapModel3D** value
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE put_Model(
                                ABI::Windows::UI::Xaml::Controls::Maps::IMapModel3D* value
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE get_Heading(
                                DOUBLE* value
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE put_Heading(
                                DOUBLE value
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE get_Pitch(
                                DOUBLE* value
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE put_Pitch(
                                DOUBLE value
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE get_Roll(
                                DOUBLE* value
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE put_Roll(
                                DOUBLE value
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE get_Scale(
                                ABI::Windows::Foundation::Numerics::Vector3* value
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE put_Scale(
                                ABI::Windows::Foundation::Numerics::Vector3 value
                                ) = 0;
                        };

                        extern MIDL_CONST_ID IID& IID_IMapElement3D = _uuidof(IMapElement3D);
                    } /* Maps */
                } /* Controls */
            } /* Xaml */
        } /* UI */
    } /* Windows */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement3D;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement3D_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x50000

/*
 *
 * Interface Windows.UI.Xaml.Controls.Maps.IMapElement3DStatics
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 5.0
 *
 * Interface is a part of the implementation of type Windows.UI.Xaml.Controls.Maps.MapElement3D
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x50000
#if !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement3DStatics_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement3DStatics_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_UI_Xaml_Controls_Maps_IMapElement3DStatics[] = L"Windows.UI.Xaml.Controls.Maps.IMapElement3DStatics";
namespace ABI {
    namespace Windows {
        namespace UI {
            namespace Xaml {
                namespace Controls {
                    namespace Maps {
                        MIDL_INTERFACE("6128011a-450f-442a-b9d9-aa815c71907a")
                        IMapElement3DStatics : public IInspectable
                        {
                        public:
                            virtual HRESULT STDMETHODCALLTYPE get_LocationProperty(
                                ABI::Windows::UI::Xaml::IDependencyProperty** value
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE get_HeadingProperty(
                                ABI::Windows::UI::Xaml::IDependencyProperty** value
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE get_PitchProperty(
                                ABI::Windows::UI::Xaml::IDependencyProperty** value
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE get_RollProperty(
                                ABI::Windows::UI::Xaml::IDependencyProperty** value
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE get_ScaleProperty(
                                ABI::Windows::UI::Xaml::IDependencyProperty** value
                                ) = 0;
                        };

                        extern MIDL_CONST_ID IID& IID_IMapElement3DStatics = _uuidof(IMapElement3DStatics);
                    } /* Maps */
                } /* Controls */
            } /* Xaml */
        } /* UI */
    } /* Windows */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement3DStatics;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement3DStatics_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x50000

/*
 *
 * Interface Windows.UI.Xaml.Controls.Maps.IMapElement4
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 6.0
 *
 * Interface is a part of the implementation of type Windows.UI.Xaml.Controls.Maps.MapElement
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x60000
#if !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement4_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement4_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_UI_Xaml_Controls_Maps_IMapElement4[] = L"Windows.UI.Xaml.Controls.Maps.IMapElement4";
namespace ABI {
    namespace Windows {
        namespace UI {
            namespace Xaml {
                namespace Controls {
                    namespace Maps {
                        MIDL_INTERFACE("645883b6-1fc1-4ceb-93bd-dc2c960072e9")
                        IMapElement4 : public IInspectable
                        {
                        public:
                            virtual HRESULT STDMETHODCALLTYPE get_IsEnabled(
                                boolean* value
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE put_IsEnabled(
                                boolean value
                                ) = 0;
                        };

                        extern MIDL_CONST_ID IID& IID_IMapElement4 = _uuidof(IMapElement4);
                    } /* Maps */
                } /* Controls */
            } /* Xaml */
        } /* UI */
    } /* Windows */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement4;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement4_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x60000

/*
 *
 * Interface Windows.UI.Xaml.Controls.Maps.IMapElementClickEventArgs
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Interface is a part of the implementation of type Windows.UI.Xaml.Controls.Maps.MapElementClickEventArgs
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementClickEventArgs_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementClickEventArgs_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_UI_Xaml_Controls_Maps_IMapElementClickEventArgs[] = L"Windows.UI.Xaml.Controls.Maps.IMapElementClickEventArgs";
namespace ABI {
    namespace Windows {
        namespace UI {
            namespace Xaml {
                namespace Controls {
                    namespace Maps {
                        MIDL_INTERFACE("40168a11-d080-4519-99a1-3149fb8999d0")
                        IMapElementClickEventArgs : public IInspectable
                        {
                        public:
                            virtual HRESULT STDMETHODCALLTYPE get_Position(
                                ABI::Windows::Foundation::Point* value
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE get_Location(
                                ABI::Windows::Devices::Geolocation::IGeopoint** value
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE get_MapElements(
                                __FIVector_1_Windows__CUI__CXaml__CControls__CMaps__CMapElement** value
                                ) = 0;
                        };

                        extern MIDL_CONST_ID IID& IID_IMapElementClickEventArgs = _uuidof(IMapElementClickEventArgs);
                    } /* Maps */
                } /* Controls */
            } /* Xaml */
        } /* UI */
    } /* Windows */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementClickEventArgs;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementClickEventArgs_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Interface Windows.UI.Xaml.Controls.Maps.IMapElementFactory
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Interface is a part of the implementation of type Windows.UI.Xaml.Controls.Maps.MapElement
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementFactory_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementFactory_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_UI_Xaml_Controls_Maps_IMapElementFactory[] = L"Windows.UI.Xaml.Controls.Maps.IMapElementFactory";
namespace ABI {
    namespace Windows {
        namespace UI {
            namespace Xaml {
                namespace Controls {
                    namespace Maps {
                        MIDL_INTERFACE("4a30d007-0bd6-47a5-860b-7e7cf5f0c573")
                        IMapElementFactory : public IInspectable
                        {
                        public:
                            virtual HRESULT STDMETHODCALLTYPE CreateInstance(
                                IInspectable* baseInterface,
                                IInspectable** innerInterface,
                                ABI::Windows::UI::Xaml::Controls::Maps::IMapElement** value
                                ) = 0;
                        };

                        extern MIDL_CONST_ID IID& IID_IMapElementFactory = _uuidof(IMapElementFactory);
                    } /* Maps */
                } /* Controls */
            } /* Xaml */
        } /* UI */
    } /* Windows */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementFactory;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementFactory_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Interface Windows.UI.Xaml.Controls.Maps.IMapElementPointerEnteredEventArgs
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Interface is a part of the implementation of type Windows.UI.Xaml.Controls.Maps.MapElementPointerEnteredEventArgs
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementPointerEnteredEventArgs_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementPointerEnteredEventArgs_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_UI_Xaml_Controls_Maps_IMapElementPointerEnteredEventArgs[] = L"Windows.UI.Xaml.Controls.Maps.IMapElementPointerEnteredEventArgs";
namespace ABI {
    namespace Windows {
        namespace UI {
            namespace Xaml {
                namespace Controls {
                    namespace Maps {
                        MIDL_INTERFACE("ab85dd4e-91d7-4b31-8f0a-d390c7d3a2ef")
                        IMapElementPointerEnteredEventArgs : public IInspectable
                        {
                        public:
                            virtual HRESULT STDMETHODCALLTYPE get_Position(
                                ABI::Windows::Foundation::Point* value
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE get_Location(
                                ABI::Windows::Devices::Geolocation::IGeopoint** value
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE get_MapElement(
                                ABI::Windows::UI::Xaml::Controls::Maps::IMapElement** value
                                ) = 0;
                        };

                        extern MIDL_CONST_ID IID& IID_IMapElementPointerEnteredEventArgs = _uuidof(IMapElementPointerEnteredEventArgs);
                    } /* Maps */
                } /* Controls */
            } /* Xaml */
        } /* UI */
    } /* Windows */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementPointerEnteredEventArgs;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementPointerEnteredEventArgs_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Interface Windows.UI.Xaml.Controls.Maps.IMapElementPointerExitedEventArgs
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Interface is a part of the implementation of type Windows.UI.Xaml.Controls.Maps.MapElementPointerExitedEventArgs
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementPointerExitedEventArgs_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementPointerExitedEventArgs_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_UI_Xaml_Controls_Maps_IMapElementPointerExitedEventArgs[] = L"Windows.UI.Xaml.Controls.Maps.IMapElementPointerExitedEventArgs";
namespace ABI {
    namespace Windows {
        namespace UI {
            namespace Xaml {
                namespace Controls {
                    namespace Maps {
                        MIDL_INTERFACE("c1a45af9-60c9-4679-9119-20abc75d931f")
                        IMapElementPointerExitedEventArgs : public IInspectable
                        {
                        public:
                            virtual HRESULT STDMETHODCALLTYPE get_Position(
                                ABI::Windows::Foundation::Point* value
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE get_Location(
                                ABI::Windows::Devices::Geolocation::IGeopoint** value
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE get_MapElement(
                                ABI::Windows::UI::Xaml::Controls::Maps::IMapElement** value
                                ) = 0;
                        };

                        extern MIDL_CONST_ID IID& IID_IMapElementPointerExitedEventArgs = _uuidof(IMapElementPointerExitedEventArgs);
                    } /* Maps */
                } /* Controls */
            } /* Xaml */
        } /* UI */
    } /* Windows */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementPointerExitedEventArgs;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementPointerExitedEventArgs_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Interface Windows.UI.Xaml.Controls.Maps.IMapElementStatics
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Interface is a part of the implementation of type Windows.UI.Xaml.Controls.Maps.MapElement
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementStatics_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementStatics_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_UI_Xaml_Controls_Maps_IMapElementStatics[] = L"Windows.UI.Xaml.Controls.Maps.IMapElementStatics";
namespace ABI {
    namespace Windows {
        namespace UI {
            namespace Xaml {
                namespace Controls {
                    namespace Maps {
                        MIDL_INTERFACE("e8c71cf2-bfef-4b49-8e99-41b5e3789fd2")
                        IMapElementStatics : public IInspectable
                        {
                        public:
                            virtual HRESULT STDMETHODCALLTYPE get_ZIndexProperty(
                                ABI::Windows::UI::Xaml::IDependencyProperty** value
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE get_VisibleProperty(
                                ABI::Windows::UI::Xaml::IDependencyProperty** value
                                ) = 0;
                        };

                        extern MIDL_CONST_ID IID& IID_IMapElementStatics = _uuidof(IMapElementStatics);
                    } /* Maps */
                } /* Controls */
            } /* Xaml */
        } /* UI */
    } /* Windows */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementStatics;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementStatics_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Interface Windows.UI.Xaml.Controls.Maps.IMapElementStatics2
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Interface is a part of the implementation of type Windows.UI.Xaml.Controls.Maps.MapElement
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementStatics2_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementStatics2_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_UI_Xaml_Controls_Maps_IMapElementStatics2[] = L"Windows.UI.Xaml.Controls.Maps.IMapElementStatics2";
namespace ABI {
    namespace Windows {
        namespace UI {
            namespace Xaml {
                namespace Controls {
                    namespace Maps {
                        MIDL_INTERFACE("9bf72f30-80fe-4f30-bcc1-fa894050f676")
                        IMapElementStatics2 : public IInspectable
                        {
                        public:
                            virtual HRESULT STDMETHODCALLTYPE get_MapTabIndexProperty(
                                ABI::Windows::UI::Xaml::IDependencyProperty** value
                                ) = 0;
                        };

                        extern MIDL_CONST_ID IID& IID_IMapElementStatics2 = _uuidof(IMapElementStatics2);
                    } /* Maps */
                } /* Controls */
            } /* Xaml */
        } /* UI */
    } /* Windows */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementStatics2;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementStatics2_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Interface Windows.UI.Xaml.Controls.Maps.IMapElementStatics3
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 5.0
 *
 * Interface is a part of the implementation of type Windows.UI.Xaml.Controls.Maps.MapElement
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x50000
#if !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementStatics3_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementStatics3_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_UI_Xaml_Controls_Maps_IMapElementStatics3[] = L"Windows.UI.Xaml.Controls.Maps.IMapElementStatics3";
namespace ABI {
    namespace Windows {
        namespace UI {
            namespace Xaml {
                namespace Controls {
                    namespace Maps {
                        MIDL_INTERFACE("e11ee92f-9742-49aa-aad8-2e466bff3796")
                        IMapElementStatics3 : public IInspectable
                        {
                        public:
                            virtual HRESULT STDMETHODCALLTYPE get_MapStyleSheetEntryProperty(
                                ABI::Windows::UI::Xaml::IDependencyProperty** value
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE get_MapStyleSheetEntryStateProperty(
                                ABI::Windows::UI::Xaml::IDependencyProperty** value
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE get_TagProperty(
                                ABI::Windows::UI::Xaml::IDependencyProperty** value
                                ) = 0;
                        };

                        extern MIDL_CONST_ID IID& IID_IMapElementStatics3 = _uuidof(IMapElementStatics3);
                    } /* Maps */
                } /* Controls */
            } /* Xaml */
        } /* UI */
    } /* Windows */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementStatics3;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementStatics3_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x50000

/*
 *
 * Interface Windows.UI.Xaml.Controls.Maps.IMapElementStatics4
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 6.0
 *
 * Interface is a part of the implementation of type Windows.UI.Xaml.Controls.Maps.MapElement
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x60000
#if !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementStatics4_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementStatics4_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_UI_Xaml_Controls_Maps_IMapElementStatics4[] = L"Windows.UI.Xaml.Controls.Maps.IMapElementStatics4";
namespace ABI {
    namespace Windows {
        namespace UI {
            namespace Xaml {
                namespace Controls {
                    namespace Maps {
                        MIDL_INTERFACE("a4296f0b-dff8-467c-9315-6f6db93ee2ba")
                        IMapElementStatics4 : public IInspectable
                        {
                        public:
                            virtual HRESULT STDMETHODCALLTYPE get_IsEnabledProperty(
                                ABI::Windows::UI::Xaml::IDependencyProperty** value
                                ) = 0;
                        };

                        extern MIDL_CONST_ID IID& IID_IMapElementStatics4 = _uuidof(IMapElementStatics4);
                    } /* Maps */
                } /* Controls */
            } /* Xaml */
        } /* UI */
    } /* Windows */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementStatics4;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementStatics4_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x60000

/*
 *
 * Interface Windows.UI.Xaml.Controls.Maps.IMapElementsLayer
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 5.0
 *
 * Interface is a part of the implementation of type Windows.UI.Xaml.Controls.Maps.MapElementsLayer
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x50000
#if !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementsLayer_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementsLayer_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_UI_Xaml_Controls_Maps_IMapElementsLayer[] = L"Windows.UI.Xaml.Controls.Maps.IMapElementsLayer";
namespace ABI {
    namespace Windows {
        namespace UI {
            namespace Xaml {
                namespace Controls {
                    namespace Maps {
                        MIDL_INTERFACE("de79689a-01ef-46f4-ac60-7c200b552610")
                        IMapElementsLayer : public IInspectable
                        {
                        public:
                            virtual HRESULT STDMETHODCALLTYPE get_MapElements(
                                __FIVector_1_Windows__CUI__CXaml__CControls__CMaps__CMapElement** value
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE put_MapElements(
                                __FIVector_1_Windows__CUI__CXaml__CControls__CMaps__CMapElement* value
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE add_MapElementClick(
                                __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapElementsLayer_Windows__CUI__CXaml__CControls__CMaps__CMapElementsLayerClickEventArgs* handler,
                                EventRegistrationToken* token
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE remove_MapElementClick(
                                EventRegistrationToken token
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE add_MapElementPointerEntered(
                                __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapElementsLayer_Windows__CUI__CXaml__CControls__CMaps__CMapElementsLayerPointerEnteredEventArgs* handler,
                                EventRegistrationToken* token
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE remove_MapElementPointerEntered(
                                EventRegistrationToken token
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE add_MapElementPointerExited(
                                __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapElementsLayer_Windows__CUI__CXaml__CControls__CMaps__CMapElementsLayerPointerExitedEventArgs* handler,
                                EventRegistrationToken* token
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE remove_MapElementPointerExited(
                                EventRegistrationToken token
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE add_MapContextRequested(
                                __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapElementsLayer_Windows__CUI__CXaml__CControls__CMaps__CMapElementsLayerContextRequestedEventArgs* handler,
                                EventRegistrationToken* token
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE remove_MapContextRequested(
                                EventRegistrationToken token
                                ) = 0;
                        };

                        extern MIDL_CONST_ID IID& IID_IMapElementsLayer = _uuidof(IMapElementsLayer);
                    } /* Maps */
                } /* Controls */
            } /* Xaml */
        } /* UI */
    } /* Windows */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementsLayer;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementsLayer_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x50000

/*
 *
 * Interface Windows.UI.Xaml.Controls.Maps.IMapElementsLayerClickEventArgs
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 5.0
 *
 * Interface is a part of the implementation of type Windows.UI.Xaml.Controls.Maps.MapElementsLayerClickEventArgs
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x50000
#if !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementsLayerClickEventArgs_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementsLayerClickEventArgs_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_UI_Xaml_Controls_Maps_IMapElementsLayerClickEventArgs[] = L"Windows.UI.Xaml.Controls.Maps.IMapElementsLayerClickEventArgs";
namespace ABI {
    namespace Windows {
        namespace UI {
            namespace Xaml {
                namespace Controls {
                    namespace Maps {
                        MIDL_INTERFACE("2ca7cf66-af1b-4c05-8c85-f74ae3d4677f")
                        IMapElementsLayerClickEventArgs : public IInspectable
                        {
                        public:
                            virtual HRESULT STDMETHODCALLTYPE get_Position(
                                ABI::Windows::Foundation::Point* value
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE get_Location(
                                ABI::Windows::Devices::Geolocation::IGeopoint** value
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE get_MapElements(
                                __FIVector_1_Windows__CUI__CXaml__CControls__CMaps__CMapElement** value
                                ) = 0;
                        };

                        extern MIDL_CONST_ID IID& IID_IMapElementsLayerClickEventArgs = _uuidof(IMapElementsLayerClickEventArgs);
                    } /* Maps */
                } /* Controls */
            } /* Xaml */
        } /* UI */
    } /* Windows */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementsLayerClickEventArgs;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementsLayerClickEventArgs_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x50000

/*
 *
 * Interface Windows.UI.Xaml.Controls.Maps.IMapElementsLayerContextRequestedEventArgs
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 5.0
 *
 * Interface is a part of the implementation of type Windows.UI.Xaml.Controls.Maps.MapElementsLayerContextRequestedEventArgs
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x50000
#if !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementsLayerContextRequestedEventArgs_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementsLayerContextRequestedEventArgs_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_UI_Xaml_Controls_Maps_IMapElementsLayerContextRequestedEventArgs[] = L"Windows.UI.Xaml.Controls.Maps.IMapElementsLayerContextRequestedEventArgs";
namespace ABI {
    namespace Windows {
        namespace UI {
            namespace Xaml {
                namespace Controls {
                    namespace Maps {
                        MIDL_INTERFACE("da45d0b3-7a0e-4758-808b-3a637627eb0d")
                        IMapElementsLayerContextRequestedEventArgs : public IInspectable
                        {
                        public:
                            virtual HRESULT STDMETHODCALLTYPE get_Position(
                                ABI::Windows::Foundation::Point* value
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE get_Location(
                                ABI::Windows::Devices::Geolocation::IGeopoint** value
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE get_MapElements(
                                __FIVectorView_1_Windows__CUI__CXaml__CControls__CMaps__CMapElement** value
                                ) = 0;
                        };

                        extern MIDL_CONST_ID IID& IID_IMapElementsLayerContextRequestedEventArgs = _uuidof(IMapElementsLayerContextRequestedEventArgs);
                    } /* Maps */
                } /* Controls */
            } /* Xaml */
        } /* UI */
    } /* Windows */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementsLayerContextRequestedEventArgs;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementsLayerContextRequestedEventArgs_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x50000

/*
 *
 * Interface Windows.UI.Xaml.Controls.Maps.IMapElementsLayerPointerEnteredEventArgs
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 5.0
 *
 * Interface is a part of the implementation of type Windows.UI.Xaml.Controls.Maps.MapElementsLayerPointerEnteredEventArgs
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x50000
#if !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementsLayerPointerEnteredEventArgs_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementsLayerPointerEnteredEventArgs_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_UI_Xaml_Controls_Maps_IMapElementsLayerPointerEnteredEventArgs[] = L"Windows.UI.Xaml.Controls.Maps.IMapElementsLayerPointerEnteredEventArgs";
namespace ABI {
    namespace Windows {
        namespace UI {
            namespace Xaml {
                namespace Controls {
                    namespace Maps {
                        MIDL_INTERFACE("757fc032-4694-4404-8c89-348b6b76c5e6")
                        IMapElementsLayerPointerEnteredEventArgs : public IInspectable
                        {
                        public:
                            virtual HRESULT STDMETHODCALLTYPE get_Position(
                                ABI::Windows::Foundation::Point* value
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE get_Location(
                                ABI::Windows::Devices::Geolocation::IGeopoint** value
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE get_MapElement(
                                ABI::Windows::UI::Xaml::Controls::Maps::IMapElement** value
                                ) = 0;
                        };

                        extern MIDL_CONST_ID IID& IID_IMapElementsLayerPointerEnteredEventArgs = _uuidof(IMapElementsLayerPointerEnteredEventArgs);
                    } /* Maps */
                } /* Controls */
            } /* Xaml */
        } /* UI */
    } /* Windows */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementsLayerPointerEnteredEventArgs;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementsLayerPointerEnteredEventArgs_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x50000

/*
 *
 * Interface Windows.UI.Xaml.Controls.Maps.IMapElementsLayerPointerExitedEventArgs
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 5.0
 *
 * Interface is a part of the implementation of type Windows.UI.Xaml.Controls.Maps.MapElementsLayerPointerExitedEventArgs
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x50000
#if !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementsLayerPointerExitedEventArgs_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementsLayerPointerExitedEventArgs_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_UI_Xaml_Controls_Maps_IMapElementsLayerPointerExitedEventArgs[] = L"Windows.UI.Xaml.Controls.Maps.IMapElementsLayerPointerExitedEventArgs";
namespace ABI {
    namespace Windows {
        namespace UI {
            namespace Xaml {
                namespace Controls {
                    namespace Maps {
                        MIDL_INTERFACE("92f3c6ad-03ed-4c39-af20-2a07ee1ccea6")
                        IMapElementsLayerPointerExitedEventArgs : public IInspectable
                        {
                        public:
                            virtual HRESULT STDMETHODCALLTYPE get_Position(
                                ABI::Windows::Foundation::Point* value
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE get_Location(
                                ABI::Windows::Devices::Geolocation::IGeopoint** value
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE get_MapElement(
                                ABI::Windows::UI::Xaml::Controls::Maps::IMapElement** value
                                ) = 0;
                        };

                        extern MIDL_CONST_ID IID& IID_IMapElementsLayerPointerExitedEventArgs = _uuidof(IMapElementsLayerPointerExitedEventArgs);
                    } /* Maps */
                } /* Controls */
            } /* Xaml */
        } /* UI */
    } /* Windows */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementsLayerPointerExitedEventArgs;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementsLayerPointerExitedEventArgs_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x50000

/*
 *
 * Interface Windows.UI.Xaml.Controls.Maps.IMapElementsLayerStatics
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 5.0
 *
 * Interface is a part of the implementation of type Windows.UI.Xaml.Controls.Maps.MapElementsLayer
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x50000
#if !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementsLayerStatics_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementsLayerStatics_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_UI_Xaml_Controls_Maps_IMapElementsLayerStatics[] = L"Windows.UI.Xaml.Controls.Maps.IMapElementsLayerStatics";
namespace ABI {
    namespace Windows {
        namespace UI {
            namespace Xaml {
                namespace Controls {
                    namespace Maps {
                        MIDL_INTERFACE("34005727-f509-4d28-9180-911c03411d74")
                        IMapElementsLayerStatics : public IInspectable
                        {
                        public:
                            virtual HRESULT STDMETHODCALLTYPE get_MapElementsProperty(
                                ABI::Windows::UI::Xaml::IDependencyProperty** value
                                ) = 0;
                        };

                        extern MIDL_CONST_ID IID& IID_IMapElementsLayerStatics = _uuidof(IMapElementsLayerStatics);
                    } /* Maps */
                } /* Controls */
            } /* Xaml */
        } /* UI */
    } /* Windows */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementsLayerStatics;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementsLayerStatics_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x50000

/*
 *
 * Interface Windows.UI.Xaml.Controls.Maps.IMapIcon
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Interface is a part of the implementation of type Windows.UI.Xaml.Controls.Maps.MapIcon
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapIcon_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapIcon_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_UI_Xaml_Controls_Maps_IMapIcon[] = L"Windows.UI.Xaml.Controls.Maps.IMapIcon";
namespace ABI {
    namespace Windows {
        namespace UI {
            namespace Xaml {
                namespace Controls {
                    namespace Maps {
                        MIDL_INTERFACE("d2096872-23d9-4a2b-8be0-69f3a85482ab")
                        IMapIcon : public IInspectable
                        {
                        public:
                            virtual HRESULT STDMETHODCALLTYPE get_Location(
                                ABI::Windows::Devices::Geolocation::IGeopoint** value
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE put_Location(
                                ABI::Windows::Devices::Geolocation::IGeopoint* value
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE get_Title(
                                HSTRING* value
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE put_Title(
                                HSTRING value
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE get_NormalizedAnchorPoint(
                                ABI::Windows::Foundation::Point* value
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE put_NormalizedAnchorPoint(
                                ABI::Windows::Foundation::Point value
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE get_Image(
                                ABI::Windows::Storage::Streams::IRandomAccessStreamReference** value
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE put_Image(
                                ABI::Windows::Storage::Streams::IRandomAccessStreamReference* value
                                ) = 0;
                        };

                        extern MIDL_CONST_ID IID& IID_IMapIcon = _uuidof(IMapIcon);
                    } /* Maps */
                } /* Controls */
            } /* Xaml */
        } /* UI */
    } /* Windows */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapIcon;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapIcon_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Interface Windows.UI.Xaml.Controls.Maps.IMapIcon2
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Interface is a part of the implementation of type Windows.UI.Xaml.Controls.Maps.MapIcon
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapIcon2_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapIcon2_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_UI_Xaml_Controls_Maps_IMapIcon2[] = L"Windows.UI.Xaml.Controls.Maps.IMapIcon2";
namespace ABI {
    namespace Windows {
        namespace UI {
            namespace Xaml {
                namespace Controls {
                    namespace Maps {
                        MIDL_INTERFACE("611254b9-d8aa-4bbd-a316-badf06911d63")
                        IMapIcon2 : public IInspectable
                        {
                        public:
                            virtual HRESULT STDMETHODCALLTYPE get_CollisionBehaviorDesired(
                                ABI::Windows::UI::Xaml::Controls::Maps::MapElementCollisionBehavior* value
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE put_CollisionBehaviorDesired(
                                ABI::Windows::UI::Xaml::Controls::Maps::MapElementCollisionBehavior value
                                ) = 0;
                        };

                        extern MIDL_CONST_ID IID& IID_IMapIcon2 = _uuidof(IMapIcon2);
                    } /* Maps */
                } /* Controls */
            } /* Xaml */
        } /* UI */
    } /* Windows */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapIcon2;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapIcon2_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Interface Windows.UI.Xaml.Controls.Maps.IMapIconStatics
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Interface is a part of the implementation of type Windows.UI.Xaml.Controls.Maps.MapIcon
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapIconStatics_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapIconStatics_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_UI_Xaml_Controls_Maps_IMapIconStatics[] = L"Windows.UI.Xaml.Controls.Maps.IMapIconStatics";
namespace ABI {
    namespace Windows {
        namespace UI {
            namespace Xaml {
                namespace Controls {
                    namespace Maps {
                        MIDL_INTERFACE("dcbc9e56-1190-4b5d-9e56-e5b6724aa328")
                        IMapIconStatics : public IInspectable
                        {
                        public:
                            virtual HRESULT STDMETHODCALLTYPE get_LocationProperty(
                                ABI::Windows::UI::Xaml::IDependencyProperty** value
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE get_TitleProperty(
                                ABI::Windows::UI::Xaml::IDependencyProperty** value
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE get_NormalizedAnchorPointProperty(
                                ABI::Windows::UI::Xaml::IDependencyProperty** value
                                ) = 0;
                        };

                        extern MIDL_CONST_ID IID& IID_IMapIconStatics = _uuidof(IMapIconStatics);
                    } /* Maps */
                } /* Controls */
            } /* Xaml */
        } /* UI */
    } /* Windows */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapIconStatics;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapIconStatics_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Interface Windows.UI.Xaml.Controls.Maps.IMapIconStatics2
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Interface is a part of the implementation of type Windows.UI.Xaml.Controls.Maps.MapIcon
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapIconStatics2_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapIconStatics2_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_UI_Xaml_Controls_Maps_IMapIconStatics2[] = L"Windows.UI.Xaml.Controls.Maps.IMapIconStatics2";
namespace ABI {
    namespace Windows {
        namespace UI {
            namespace Xaml {
                namespace Controls {
                    namespace Maps {
                        MIDL_INTERFACE("ff4c306a-cf76-46ab-a12f-b603b986c696")
                        IMapIconStatics2 : public IInspectable
                        {
                        public:
                            virtual HRESULT STDMETHODCALLTYPE get_CollisionBehaviorDesiredProperty(
                                ABI::Windows::UI::Xaml::IDependencyProperty** value
                                ) = 0;
                        };

                        extern MIDL_CONST_ID IID& IID_IMapIconStatics2 = _uuidof(IMapIconStatics2);
                    } /* Maps */
                } /* Controls */
            } /* Xaml */
        } /* UI */
    } /* Windows */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapIconStatics2;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapIconStatics2_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Interface Windows.UI.Xaml.Controls.Maps.IMapInputEventArgs
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Interface is a part of the implementation of type Windows.UI.Xaml.Controls.Maps.MapInputEventArgs
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapInputEventArgs_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapInputEventArgs_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_UI_Xaml_Controls_Maps_IMapInputEventArgs[] = L"Windows.UI.Xaml.Controls.Maps.IMapInputEventArgs";
namespace ABI {
    namespace Windows {
        namespace UI {
            namespace Xaml {
                namespace Controls {
                    namespace Maps {
                        MIDL_INTERFACE("9fc503a0-a8a2-4394-92e9-2247764f2f49")
                        IMapInputEventArgs : public IInspectable
                        {
                        public:
                            virtual HRESULT STDMETHODCALLTYPE get_Position(
                                ABI::Windows::Foundation::Point* value
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE get_Location(
                                ABI::Windows::Devices::Geolocation::IGeopoint** value
                                ) = 0;
                        };

                        extern MIDL_CONST_ID IID& IID_IMapInputEventArgs = _uuidof(IMapInputEventArgs);
                    } /* Maps */
                } /* Controls */
            } /* Xaml */
        } /* UI */
    } /* Windows */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapInputEventArgs;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapInputEventArgs_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Interface Windows.UI.Xaml.Controls.Maps.IMapItemsControl
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Interface is a part of the implementation of type Windows.UI.Xaml.Controls.Maps.MapItemsControl
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapItemsControl_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapItemsControl_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_UI_Xaml_Controls_Maps_IMapItemsControl[] = L"Windows.UI.Xaml.Controls.Maps.IMapItemsControl";
namespace ABI {
    namespace Windows {
        namespace UI {
            namespace Xaml {
                namespace Controls {
                    namespace Maps {
                        MIDL_INTERFACE("94c2c4d3-b335-42c5-b660-e6a07ec3bddc")
                        IMapItemsControl : public IInspectable
                        {
                        public:
                            virtual HRESULT STDMETHODCALLTYPE get_ItemsSource(
                                IInspectable** value
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE put_ItemsSource(
                                IInspectable* value
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE get_Items(
                                __FIVector_1_Windows__CUI__CXaml__CDependencyObject** value
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE get_ItemTemplate(
                                ABI::Windows::UI::Xaml::IDataTemplate** value
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE put_ItemTemplate(
                                ABI::Windows::UI::Xaml::IDataTemplate* value
                                ) = 0;
                        };

                        extern MIDL_CONST_ID IID& IID_IMapItemsControl = _uuidof(IMapItemsControl);
                    } /* Maps */
                } /* Controls */
            } /* Xaml */
        } /* UI */
    } /* Windows */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapItemsControl;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapItemsControl_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Interface Windows.UI.Xaml.Controls.Maps.IMapItemsControlStatics
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Interface is a part of the implementation of type Windows.UI.Xaml.Controls.Maps.MapItemsControl
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapItemsControlStatics_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapItemsControlStatics_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_UI_Xaml_Controls_Maps_IMapItemsControlStatics[] = L"Windows.UI.Xaml.Controls.Maps.IMapItemsControlStatics";
namespace ABI {
    namespace Windows {
        namespace UI {
            namespace Xaml {
                namespace Controls {
                    namespace Maps {
                        MIDL_INTERFACE("33a859c7-789b-425c-8a0a-32385896cb4a")
                        IMapItemsControlStatics : public IInspectable
                        {
                        public:
                            virtual HRESULT STDMETHODCALLTYPE get_ItemsSourceProperty(
                                ABI::Windows::UI::Xaml::IDependencyProperty** value
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE get_ItemsProperty(
                                ABI::Windows::UI::Xaml::IDependencyProperty** value
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE get_ItemTemplateProperty(
                                ABI::Windows::UI::Xaml::IDependencyProperty** value
                                ) = 0;
                        };

                        extern MIDL_CONST_ID IID& IID_IMapItemsControlStatics = _uuidof(IMapItemsControlStatics);
                    } /* Maps */
                } /* Controls */
            } /* Xaml */
        } /* UI */
    } /* Windows */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapItemsControlStatics;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapItemsControlStatics_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Interface Windows.UI.Xaml.Controls.Maps.IMapLayer
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 5.0
 *
 * Interface is a part of the implementation of type Windows.UI.Xaml.Controls.Maps.MapLayer
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x50000
#if !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapLayer_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapLayer_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_UI_Xaml_Controls_Maps_IMapLayer[] = L"Windows.UI.Xaml.Controls.Maps.IMapLayer";
namespace ABI {
    namespace Windows {
        namespace UI {
            namespace Xaml {
                namespace Controls {
                    namespace Maps {
                        MIDL_INTERFACE("6d0ff9c1-a14d-4f97-8f57-46715b57683a")
                        IMapLayer : public IInspectable
                        {
                        public:
                            virtual HRESULT STDMETHODCALLTYPE get_MapTabIndex(
                                INT32* value
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE put_MapTabIndex(
                                INT32 value
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE get_Visible(
                                boolean* value
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE put_Visible(
                                boolean value
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE get_ZIndex(
                                INT32* value
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE put_ZIndex(
                                INT32 value
                                ) = 0;
                        };

                        extern MIDL_CONST_ID IID& IID_IMapLayer = _uuidof(IMapLayer);
                    } /* Maps */
                } /* Controls */
            } /* Xaml */
        } /* UI */
    } /* Windows */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapLayer;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapLayer_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x50000

/*
 *
 * Interface Windows.UI.Xaml.Controls.Maps.IMapLayerFactory
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 5.0
 *
 * Interface is a part of the implementation of type Windows.UI.Xaml.Controls.Maps.MapLayer
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x50000
#if !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapLayerFactory_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapLayerFactory_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_UI_Xaml_Controls_Maps_IMapLayerFactory[] = L"Windows.UI.Xaml.Controls.Maps.IMapLayerFactory";
namespace ABI {
    namespace Windows {
        namespace UI {
            namespace Xaml {
                namespace Controls {
                    namespace Maps {
                        MIDL_INTERFACE("e02a2207-dee3-47c8-9825-bd029c5752f7")
                        IMapLayerFactory : public IInspectable
                        {
                        public:
                            virtual HRESULT STDMETHODCALLTYPE CreateInstance(
                                IInspectable* baseInterface,
                                IInspectable** innerInterface,
                                ABI::Windows::UI::Xaml::Controls::Maps::IMapLayer** value
                                ) = 0;
                        };

                        extern MIDL_CONST_ID IID& IID_IMapLayerFactory = _uuidof(IMapLayerFactory);
                    } /* Maps */
                } /* Controls */
            } /* Xaml */
        } /* UI */
    } /* Windows */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapLayerFactory;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapLayerFactory_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x50000

/*
 *
 * Interface Windows.UI.Xaml.Controls.Maps.IMapLayerStatics
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 5.0
 *
 * Interface is a part of the implementation of type Windows.UI.Xaml.Controls.Maps.MapLayer
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x50000
#if !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapLayerStatics_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapLayerStatics_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_UI_Xaml_Controls_Maps_IMapLayerStatics[] = L"Windows.UI.Xaml.Controls.Maps.IMapLayerStatics";
namespace ABI {
    namespace Windows {
        namespace UI {
            namespace Xaml {
                namespace Controls {
                    namespace Maps {
                        MIDL_INTERFACE("9ca4a26b-5db9-4f0c-bdd5-b1bffdcce946")
                        IMapLayerStatics : public IInspectable
                        {
                        public:
                            virtual HRESULT STDMETHODCALLTYPE get_MapTabIndexProperty(
                                ABI::Windows::UI::Xaml::IDependencyProperty** value
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE get_VisibleProperty(
                                ABI::Windows::UI::Xaml::IDependencyProperty** value
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE get_ZIndexProperty(
                                ABI::Windows::UI::Xaml::IDependencyProperty** value
                                ) = 0;
                        };

                        extern MIDL_CONST_ID IID& IID_IMapLayerStatics = _uuidof(IMapLayerStatics);
                    } /* Maps */
                } /* Controls */
            } /* Xaml */
        } /* UI */
    } /* Windows */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapLayerStatics;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapLayerStatics_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x50000

/*
 *
 * Interface Windows.UI.Xaml.Controls.Maps.IMapModel3D
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 5.0
 *
 * Interface is a part of the implementation of type Windows.UI.Xaml.Controls.Maps.MapModel3D
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x50000
#if !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapModel3D_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapModel3D_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_UI_Xaml_Controls_Maps_IMapModel3D[] = L"Windows.UI.Xaml.Controls.Maps.IMapModel3D";
namespace ABI {
    namespace Windows {
        namespace UI {
            namespace Xaml {
                namespace Controls {
                    namespace Maps {
                        MIDL_INTERFACE("f8c541a1-ca27-4968-a2bf-9c20f06a0468")
                        IMapModel3D : public IInspectable
                        {
                        public:
                        };

                        extern MIDL_CONST_ID IID& IID_IMapModel3D = _uuidof(IMapModel3D);
                    } /* Maps */
                } /* Controls */
            } /* Xaml */
        } /* UI */
    } /* Windows */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapModel3D;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapModel3D_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x50000

/*
 *
 * Interface Windows.UI.Xaml.Controls.Maps.IMapModel3DFactory
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 5.0
 *
 * Interface is a part of the implementation of type Windows.UI.Xaml.Controls.Maps.MapModel3D
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x50000
#if !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapModel3DFactory_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapModel3DFactory_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_UI_Xaml_Controls_Maps_IMapModel3DFactory[] = L"Windows.UI.Xaml.Controls.Maps.IMapModel3DFactory";
namespace ABI {
    namespace Windows {
        namespace UI {
            namespace Xaml {
                namespace Controls {
                    namespace Maps {
                        MIDL_INTERFACE("df7f0bcc-580a-498b-939b-0119a9dadb9e")
                        IMapModel3DFactory : public IInspectable
                        {
                        public:
                            virtual HRESULT STDMETHODCALLTYPE CreateInstance(
                                IInspectable* baseInterface,
                                IInspectable** innerInterface,
                                ABI::Windows::UI::Xaml::Controls::Maps::IMapModel3D** value
                                ) = 0;
                        };

                        extern MIDL_CONST_ID IID& IID_IMapModel3DFactory = _uuidof(IMapModel3DFactory);
                    } /* Maps */
                } /* Controls */
            } /* Xaml */
        } /* UI */
    } /* Windows */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapModel3DFactory;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapModel3DFactory_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x50000

/*
 *
 * Interface Windows.UI.Xaml.Controls.Maps.IMapModel3DStatics
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 5.0
 *
 * Interface is a part of the implementation of type Windows.UI.Xaml.Controls.Maps.MapModel3D
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x50000
#if !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapModel3DStatics_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapModel3DStatics_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_UI_Xaml_Controls_Maps_IMapModel3DStatics[] = L"Windows.UI.Xaml.Controls.Maps.IMapModel3DStatics";
namespace ABI {
    namespace Windows {
        namespace UI {
            namespace Xaml {
                namespace Controls {
                    namespace Maps {
                        MIDL_INTERFACE("4834a480-8e56-4b0f-872d-7ead103187cd")
                        IMapModel3DStatics : public IInspectable
                        {
                        public:
                            virtual HRESULT STDMETHODCALLTYPE CreateFrom3MFAsync(
                                ABI::Windows::Storage::Streams::IRandomAccessStreamReference* source,
                                __FIAsyncOperation_1_Windows__CUI__CXaml__CControls__CMaps__CMapModel3D** operation
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE CreateFrom3MFWithShadingOptionAsync(
                                ABI::Windows::Storage::Streams::IRandomAccessStreamReference* source,
                                ABI::Windows::UI::Xaml::Controls::Maps::MapModel3DShadingOption shadingOption,
                                __FIAsyncOperation_1_Windows__CUI__CXaml__CControls__CMaps__CMapModel3D** operation
                                ) = 0;
                        };

                        extern MIDL_CONST_ID IID& IID_IMapModel3DStatics = _uuidof(IMapModel3DStatics);
                    } /* Maps */
                } /* Controls */
            } /* Xaml */
        } /* UI */
    } /* Windows */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapModel3DStatics;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapModel3DStatics_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x50000

/*
 *
 * Interface Windows.UI.Xaml.Controls.Maps.IMapPolygon
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Interface is a part of the implementation of type Windows.UI.Xaml.Controls.Maps.MapPolygon
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolygon_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolygon_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_UI_Xaml_Controls_Maps_IMapPolygon[] = L"Windows.UI.Xaml.Controls.Maps.IMapPolygon";
namespace ABI {
    namespace Windows {
        namespace UI {
            namespace Xaml {
                namespace Controls {
                    namespace Maps {
                        MIDL_INTERFACE("abda2285-4926-4c3a-a5f9-19df7f69db3d")
                        IMapPolygon : public IInspectable
                        {
                        public:
                            virtual HRESULT STDMETHODCALLTYPE get_Path(
                                ABI::Windows::Devices::Geolocation::IGeopath** value
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE put_Path(
                                ABI::Windows::Devices::Geolocation::IGeopath* value
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE get_StrokeColor(
                                ABI::Windows::UI::Color* value
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE put_StrokeColor(
                                ABI::Windows::UI::Color value
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE get_StrokeThickness(
                                DOUBLE* value
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE put_StrokeThickness(
                                DOUBLE value
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE get_StrokeDashed(
                                boolean* value
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE put_StrokeDashed(
                                boolean value
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE get_FillColor(
                                ABI::Windows::UI::Color* value
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE put_FillColor(
                                ABI::Windows::UI::Color value
                                ) = 0;
                        };

                        extern MIDL_CONST_ID IID& IID_IMapPolygon = _uuidof(IMapPolygon);
                    } /* Maps */
                } /* Controls */
            } /* Xaml */
        } /* UI */
    } /* Windows */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolygon;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolygon_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Interface Windows.UI.Xaml.Controls.Maps.IMapPolygon2
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 2.0
 *
 * Interface is a part of the implementation of type Windows.UI.Xaml.Controls.Maps.MapPolygon
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x20000
#if !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolygon2_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolygon2_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_UI_Xaml_Controls_Maps_IMapPolygon2[] = L"Windows.UI.Xaml.Controls.Maps.IMapPolygon2";
namespace ABI {
    namespace Windows {
        namespace UI {
            namespace Xaml {
                namespace Controls {
                    namespace Maps {
                        MIDL_INTERFACE("96c8a11e-636b-4018-9c2e-acc9122a01b2")
                        IMapPolygon2 : public IInspectable
                        {
                        public:
                            virtual HRESULT STDMETHODCALLTYPE get_Paths(
                                __FIVector_1_Windows__CDevices__CGeolocation__CGeopath** value
                                ) = 0;
                        };

                        extern MIDL_CONST_ID IID& IID_IMapPolygon2 = _uuidof(IMapPolygon2);
                    } /* Maps */
                } /* Controls */
            } /* Xaml */
        } /* UI */
    } /* Windows */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolygon2;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolygon2_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x20000

/*
 *
 * Interface Windows.UI.Xaml.Controls.Maps.IMapPolygonStatics
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Interface is a part of the implementation of type Windows.UI.Xaml.Controls.Maps.MapPolygon
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolygonStatics_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolygonStatics_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_UI_Xaml_Controls_Maps_IMapPolygonStatics[] = L"Windows.UI.Xaml.Controls.Maps.IMapPolygonStatics";
namespace ABI {
    namespace Windows {
        namespace UI {
            namespace Xaml {
                namespace Controls {
                    namespace Maps {
                        MIDL_INTERFACE("37f573be-097b-424c-87cc-2ee042fda6d2")
                        IMapPolygonStatics : public IInspectable
                        {
                        public:
                            virtual HRESULT STDMETHODCALLTYPE get_PathProperty(
                                ABI::Windows::UI::Xaml::IDependencyProperty** value
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE get_StrokeThicknessProperty(
                                ABI::Windows::UI::Xaml::IDependencyProperty** value
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE get_StrokeDashedProperty(
                                ABI::Windows::UI::Xaml::IDependencyProperty** value
                                ) = 0;
                        };

                        extern MIDL_CONST_ID IID& IID_IMapPolygonStatics = _uuidof(IMapPolygonStatics);
                    } /* Maps */
                } /* Controls */
            } /* Xaml */
        } /* UI */
    } /* Windows */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolygonStatics;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolygonStatics_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Interface Windows.UI.Xaml.Controls.Maps.IMapPolyline
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Interface is a part of the implementation of type Windows.UI.Xaml.Controls.Maps.MapPolyline
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolyline_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolyline_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_UI_Xaml_Controls_Maps_IMapPolyline[] = L"Windows.UI.Xaml.Controls.Maps.IMapPolyline";
namespace ABI {
    namespace Windows {
        namespace UI {
            namespace Xaml {
                namespace Controls {
                    namespace Maps {
                        MIDL_INTERFACE("fbad24a2-24df-4a86-8ffa-0f8f4d9ec17d")
                        IMapPolyline : public IInspectable
                        {
                        public:
                            virtual HRESULT STDMETHODCALLTYPE get_Path(
                                ABI::Windows::Devices::Geolocation::IGeopath** value
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE put_Path(
                                ABI::Windows::Devices::Geolocation::IGeopath* value
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE get_StrokeColor(
                                ABI::Windows::UI::Color* value
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE put_StrokeColor(
                                ABI::Windows::UI::Color value
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE get_StrokeThickness(
                                DOUBLE* value
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE put_StrokeThickness(
                                DOUBLE value
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE get_StrokeDashed(
                                boolean* value
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE put_StrokeDashed(
                                boolean value
                                ) = 0;
                        };

                        extern MIDL_CONST_ID IID& IID_IMapPolyline = _uuidof(IMapPolyline);
                    } /* Maps */
                } /* Controls */
            } /* Xaml */
        } /* UI */
    } /* Windows */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolyline;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolyline_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Interface Windows.UI.Xaml.Controls.Maps.IMapPolylineStatics
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Interface is a part of the implementation of type Windows.UI.Xaml.Controls.Maps.MapPolyline
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolylineStatics_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolylineStatics_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_UI_Xaml_Controls_Maps_IMapPolylineStatics[] = L"Windows.UI.Xaml.Controls.Maps.IMapPolylineStatics";
namespace ABI {
    namespace Windows {
        namespace UI {
            namespace Xaml {
                namespace Controls {
                    namespace Maps {
                        MIDL_INTERFACE("61fde44b-1ddf-4303-b809-ec87f58ad065")
                        IMapPolylineStatics : public IInspectable
                        {
                        public:
                            virtual HRESULT STDMETHODCALLTYPE get_PathProperty(
                                ABI::Windows::UI::Xaml::IDependencyProperty** value
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE get_StrokeDashedProperty(
                                ABI::Windows::UI::Xaml::IDependencyProperty** value
                                ) = 0;
                        };

                        extern MIDL_CONST_ID IID& IID_IMapPolylineStatics = _uuidof(IMapPolylineStatics);
                    } /* Maps */
                } /* Controls */
            } /* Xaml */
        } /* UI */
    } /* Windows */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolylineStatics;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolylineStatics_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Interface Windows.UI.Xaml.Controls.Maps.IMapRightTappedEventArgs
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 2.0
 *
 * Interface is a part of the implementation of type Windows.UI.Xaml.Controls.Maps.MapRightTappedEventArgs
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x20000
#if !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapRightTappedEventArgs_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapRightTappedEventArgs_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_UI_Xaml_Controls_Maps_IMapRightTappedEventArgs[] = L"Windows.UI.Xaml.Controls.Maps.IMapRightTappedEventArgs";
namespace ABI {
    namespace Windows {
        namespace UI {
            namespace Xaml {
                namespace Controls {
                    namespace Maps {
                        MIDL_INTERFACE("20943171-6fe8-40a6-ad0e-297379b575a7")
                        IMapRightTappedEventArgs : public IInspectable
                        {
                        public:
                            virtual HRESULT STDMETHODCALLTYPE get_Position(
                                ABI::Windows::Foundation::Point* value
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE get_Location(
                                ABI::Windows::Devices::Geolocation::IGeopoint** value
                                ) = 0;
                        };

                        extern MIDL_CONST_ID IID& IID_IMapRightTappedEventArgs = _uuidof(IMapRightTappedEventArgs);
                    } /* Maps */
                } /* Controls */
            } /* Xaml */
        } /* UI */
    } /* Windows */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapRightTappedEventArgs;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapRightTappedEventArgs_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x20000

/*
 *
 * Interface Windows.UI.Xaml.Controls.Maps.IMapRouteView
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Interface is a part of the implementation of type Windows.UI.Xaml.Controls.Maps.MapRouteView
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapRouteView_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapRouteView_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_UI_Xaml_Controls_Maps_IMapRouteView[] = L"Windows.UI.Xaml.Controls.Maps.IMapRouteView";
namespace ABI {
    namespace Windows {
        namespace UI {
            namespace Xaml {
                namespace Controls {
                    namespace Maps {
                        MIDL_INTERFACE("740eaec5-bacc-41e1-a67e-dd6513832049")
                        IMapRouteView : public IInspectable
                        {
                        public:
                            virtual HRESULT STDMETHODCALLTYPE get_RouteColor(
                                ABI::Windows::UI::Color* value
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE put_RouteColor(
                                ABI::Windows::UI::Color value
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE get_OutlineColor(
                                ABI::Windows::UI::Color* value
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE put_OutlineColor(
                                ABI::Windows::UI::Color value
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE get_Route(
                                ABI::Windows::Services::Maps::IMapRoute** value
                                ) = 0;
                        };

                        extern MIDL_CONST_ID IID& IID_IMapRouteView = _uuidof(IMapRouteView);
                    } /* Maps */
                } /* Controls */
            } /* Xaml */
        } /* UI */
    } /* Windows */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapRouteView;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapRouteView_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Interface Windows.UI.Xaml.Controls.Maps.IMapRouteViewFactory
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Interface is a part of the implementation of type Windows.UI.Xaml.Controls.Maps.MapRouteView
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapRouteViewFactory_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapRouteViewFactory_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_UI_Xaml_Controls_Maps_IMapRouteViewFactory[] = L"Windows.UI.Xaml.Controls.Maps.IMapRouteViewFactory";
namespace ABI {
    namespace Windows {
        namespace UI {
            namespace Xaml {
                namespace Controls {
                    namespace Maps {
                        MIDL_INTERFACE("f083addf-0066-4628-82fe-ea78c23cec1e")
                        IMapRouteViewFactory : public IInspectable
                        {
                        public:
                            virtual HRESULT STDMETHODCALLTYPE CreateInstanceWithMapRoute(
                                ABI::Windows::Services::Maps::IMapRoute* route,
                                IInspectable* baseInterface,
                                IInspectable** innerInterface,
                                ABI::Windows::UI::Xaml::Controls::Maps::IMapRouteView** value
                                ) = 0;
                        };

                        extern MIDL_CONST_ID IID& IID_IMapRouteViewFactory = _uuidof(IMapRouteViewFactory);
                    } /* Maps */
                } /* Controls */
            } /* Xaml */
        } /* UI */
    } /* Windows */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapRouteViewFactory;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapRouteViewFactory_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Interface Windows.UI.Xaml.Controls.Maps.IMapScene
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Interface is a part of the implementation of type Windows.UI.Xaml.Controls.Maps.MapScene
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapScene_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapScene_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_UI_Xaml_Controls_Maps_IMapScene[] = L"Windows.UI.Xaml.Controls.Maps.IMapScene";
namespace ABI {
    namespace Windows {
        namespace UI {
            namespace Xaml {
                namespace Controls {
                    namespace Maps {
                        MIDL_INTERFACE("8bba10a9-50e7-482c-9789-c688b178ac24")
                        IMapScene : public IInspectable
                        {
                        public:
                            virtual HRESULT STDMETHODCALLTYPE get_TargetCamera(
                                ABI::Windows::UI::Xaml::Controls::Maps::IMapCamera** value
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE add_TargetCameraChanged(
                                __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapScene_Windows__CUI__CXaml__CControls__CMaps__CMapTargetCameraChangedEventArgs* handler,
                                EventRegistrationToken* token
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE remove_TargetCameraChanged(
                                EventRegistrationToken token
                                ) = 0;
                        };

                        extern MIDL_CONST_ID IID& IID_IMapScene = _uuidof(IMapScene);
                    } /* Maps */
                } /* Controls */
            } /* Xaml */
        } /* UI */
    } /* Windows */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapScene;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapScene_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Interface Windows.UI.Xaml.Controls.Maps.IMapSceneStatics
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Interface is a part of the implementation of type Windows.UI.Xaml.Controls.Maps.MapScene
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapSceneStatics_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapSceneStatics_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_UI_Xaml_Controls_Maps_IMapSceneStatics[] = L"Windows.UI.Xaml.Controls.Maps.IMapSceneStatics";
namespace ABI {
    namespace Windows {
        namespace UI {
            namespace Xaml {
                namespace Controls {
                    namespace Maps {
                        MIDL_INTERFACE("03e4ad6c-86ec-44d9-9597-fb75b7deba0a")
                        IMapSceneStatics : public IInspectable
                        {
                        public:
                            virtual HRESULT STDMETHODCALLTYPE CreateFromBoundingBox(
                                ABI::Windows::Devices::Geolocation::IGeoboundingBox* bounds,
                                ABI::Windows::UI::Xaml::Controls::Maps::IMapScene** result
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE CreateFromBoundingBoxWithHeadingAndPitch(
                                ABI::Windows::Devices::Geolocation::IGeoboundingBox* bounds,
                                DOUBLE headingInDegrees,
                                DOUBLE pitchInDegrees,
                                ABI::Windows::UI::Xaml::Controls::Maps::IMapScene** result
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE CreateFromCamera(
                                ABI::Windows::UI::Xaml::Controls::Maps::IMapCamera* camera,
                                ABI::Windows::UI::Xaml::Controls::Maps::IMapScene** result
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE CreateFromLocation(
                                ABI::Windows::Devices::Geolocation::IGeopoint* location,
                                ABI::Windows::UI::Xaml::Controls::Maps::IMapScene** result
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE CreateFromLocationWithHeadingAndPitch(
                                ABI::Windows::Devices::Geolocation::IGeopoint* location,
                                DOUBLE headingInDegrees,
                                DOUBLE pitchInDegrees,
                                ABI::Windows::UI::Xaml::Controls::Maps::IMapScene** result
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE CreateFromLocationAndRadius(
                                ABI::Windows::Devices::Geolocation::IGeopoint* location,
                                DOUBLE radiusInMeters,
                                ABI::Windows::UI::Xaml::Controls::Maps::IMapScene** result
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE CreateFromLocationAndRadiusWithHeadingAndPitch(
                                ABI::Windows::Devices::Geolocation::IGeopoint* location,
                                DOUBLE radiusInMeters,
                                DOUBLE headingInDegrees,
                                DOUBLE pitchInDegrees,
                                ABI::Windows::UI::Xaml::Controls::Maps::IMapScene** result
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE CreateFromLocations(
                                __FIIterable_1_Windows__CDevices__CGeolocation__CGeopoint* locations,
                                ABI::Windows::UI::Xaml::Controls::Maps::IMapScene** result
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE CreateFromLocationsWithHeadingAndPitch(
                                __FIIterable_1_Windows__CDevices__CGeolocation__CGeopoint* locations,
                                DOUBLE headingInDegrees,
                                DOUBLE pitchInDegrees,
                                ABI::Windows::UI::Xaml::Controls::Maps::IMapScene** result
                                ) = 0;
                        };

                        extern MIDL_CONST_ID IID& IID_IMapSceneStatics = _uuidof(IMapSceneStatics);
                    } /* Maps */
                } /* Controls */
            } /* Xaml */
        } /* UI */
    } /* Windows */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapSceneStatics;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapSceneStatics_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Interface Windows.UI.Xaml.Controls.Maps.IMapStyleSheet
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 4.0
 *
 * Interface is a part of the implementation of type Windows.UI.Xaml.Controls.Maps.MapStyleSheet
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x40000
#if !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapStyleSheet_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapStyleSheet_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_UI_Xaml_Controls_Maps_IMapStyleSheet[] = L"Windows.UI.Xaml.Controls.Maps.IMapStyleSheet";
namespace ABI {
    namespace Windows {
        namespace UI {
            namespace Xaml {
                namespace Controls {
                    namespace Maps {
                        MIDL_INTERFACE("ae54b2bf-8991-42ed-8d58-20473deede1d")
                        IMapStyleSheet : public IInspectable
                        {
                        public:
                        };

                        extern MIDL_CONST_ID IID& IID_IMapStyleSheet = _uuidof(IMapStyleSheet);
                    } /* Maps */
                } /* Controls */
            } /* Xaml */
        } /* UI */
    } /* Windows */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapStyleSheet;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapStyleSheet_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x40000

/*
 *
 * Interface Windows.UI.Xaml.Controls.Maps.IMapStyleSheetEntriesStatics
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 5.0
 *
 * Interface is a part of the implementation of type Windows.UI.Xaml.Controls.Maps.MapStyleSheetEntries
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x50000
#if !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapStyleSheetEntriesStatics_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapStyleSheetEntriesStatics_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_UI_Xaml_Controls_Maps_IMapStyleSheetEntriesStatics[] = L"Windows.UI.Xaml.Controls.Maps.IMapStyleSheetEntriesStatics";
namespace ABI {
    namespace Windows {
        namespace UI {
            namespace Xaml {
                namespace Controls {
                    namespace Maps {
                        MIDL_INTERFACE("c9636345-ef1a-41a4-a757-bd4f43e1e4d1")
                        IMapStyleSheetEntriesStatics : public IInspectable
                        {
                        public:
                            virtual HRESULT STDMETHODCALLTYPE get_Area(
                                HSTRING* value
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE get_Airport(
                                HSTRING* value
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE get_Cemetery(
                                HSTRING* value
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE get_Continent(
                                HSTRING* value
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE get_Education(
                                HSTRING* value
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE get_IndigenousPeoplesReserve(
                                HSTRING* value
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE get_Island(
                                HSTRING* value
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE get_Medical(
                                HSTRING* value
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE get_Military(
                                HSTRING* value
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE get_Nautical(
                                HSTRING* value
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE get_Neighborhood(
                                HSTRING* value
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE get_Runway(
                                HSTRING* value
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE get_Sand(
                                HSTRING* value
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE get_ShoppingCenter(
                                HSTRING* value
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE get_Stadium(
                                HSTRING* value
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE get_Vegetation(
                                HSTRING* value
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE get_Forest(
                                HSTRING* value
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE get_GolfCourse(
                                HSTRING* value
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE get_Park(
                                HSTRING* value
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE get_PlayingField(
                                HSTRING* value
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE get_Reserve(
                                HSTRING* value
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE get_Point(
                                HSTRING* value
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE get_NaturalPoint(
                                HSTRING* value
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE get_Peak(
                                HSTRING* value
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE get_VolcanicPeak(
                                HSTRING* value
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE get_WaterPoint(
                                HSTRING* value
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE get_PointOfInterest(
                                HSTRING* value
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE get_Business(
                                HSTRING* value
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE get_FoodPoint(
                                HSTRING* value
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE get_PopulatedPlace(
                                HSTRING* value
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE get_Capital(
                                HSTRING* value
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE get_AdminDistrictCapital(
                                HSTRING* value
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE get_CountryRegionCapital(
                                HSTRING* value
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE get_RoadShield(
                                HSTRING* value
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE get_RoadExit(
                                HSTRING* value
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE get_Transit(
                                HSTRING* value
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE get_Political(
                                HSTRING* value
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE get_CountryRegion(
                                HSTRING* value
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE get_AdminDistrict(
                                HSTRING* value
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE get_District(
                                HSTRING* value
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE get_Structure(
                                HSTRING* value
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE get_Building(
                                HSTRING* value
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE get_EducationBuilding(
                                HSTRING* value
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE get_MedicalBuilding(
                                HSTRING* value
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE get_TransitBuilding(
                                HSTRING* value
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE get_Transportation(
                                HSTRING* value
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE get_Road(
                                HSTRING* value
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE get_ControlledAccessHighway(
                                HSTRING* value
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE get_HighSpeedRamp(
                                HSTRING* value
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE get_Highway(
                                HSTRING* value
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE get_MajorRoad(
                                HSTRING* value
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE get_ArterialRoad(
                                HSTRING* value
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE get_Street(
                                HSTRING* value
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE get_Ramp(
                                HSTRING* value
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE get_UnpavedStreet(
                                HSTRING* value
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE get_TollRoad(
                                HSTRING* value
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE get_Railway(
                                HSTRING* value
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE get_Trail(
                                HSTRING* value
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE get_WaterRoute(
                                HSTRING* value
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE get_Water(
                                HSTRING* value
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE get_River(
                                HSTRING* value
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE get_RouteLine(
                                HSTRING* value
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE get_WalkingRoute(
                                HSTRING* value
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE get_DrivingRoute(
                                HSTRING* value
                                ) = 0;
                        };

                        extern MIDL_CONST_ID IID& IID_IMapStyleSheetEntriesStatics = _uuidof(IMapStyleSheetEntriesStatics);
                    } /* Maps */
                } /* Controls */
            } /* Xaml */
        } /* UI */
    } /* Windows */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapStyleSheetEntriesStatics;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapStyleSheetEntriesStatics_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x50000

/*
 *
 * Interface Windows.UI.Xaml.Controls.Maps.IMapStyleSheetEntryStatesStatics
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 5.0
 *
 * Interface is a part of the implementation of type Windows.UI.Xaml.Controls.Maps.MapStyleSheetEntryStates
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x50000
#if !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapStyleSheetEntryStatesStatics_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapStyleSheetEntryStatesStatics_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_UI_Xaml_Controls_Maps_IMapStyleSheetEntryStatesStatics[] = L"Windows.UI.Xaml.Controls.Maps.IMapStyleSheetEntryStatesStatics";
namespace ABI {
    namespace Windows {
        namespace UI {
            namespace Xaml {
                namespace Controls {
                    namespace Maps {
                        MIDL_INTERFACE("23ac5532-866d-4bfa-b481-39bea1de3506")
                        IMapStyleSheetEntryStatesStatics : public IInspectable
                        {
                        public:
                            virtual HRESULT STDMETHODCALLTYPE get_Disabled(
                                HSTRING* value
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE get_Hover(
                                HSTRING* value
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE get_Selected(
                                HSTRING* value
                                ) = 0;
                        };

                        extern MIDL_CONST_ID IID& IID_IMapStyleSheetEntryStatesStatics = _uuidof(IMapStyleSheetEntryStatesStatics);
                    } /* Maps */
                } /* Controls */
            } /* Xaml */
        } /* UI */
    } /* Windows */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapStyleSheetEntryStatesStatics;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapStyleSheetEntryStatesStatics_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x50000

/*
 *
 * Interface Windows.UI.Xaml.Controls.Maps.IMapStyleSheetStatics
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 4.0
 *
 * Interface is a part of the implementation of type Windows.UI.Xaml.Controls.Maps.MapStyleSheet
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x40000
#if !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapStyleSheetStatics_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapStyleSheetStatics_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_UI_Xaml_Controls_Maps_IMapStyleSheetStatics[] = L"Windows.UI.Xaml.Controls.Maps.IMapStyleSheetStatics";
namespace ABI {
    namespace Windows {
        namespace UI {
            namespace Xaml {
                namespace Controls {
                    namespace Maps {
                        MIDL_INTERFACE("abbd00ad-0a1c-4335-82f4-61d936aa197d")
                        IMapStyleSheetStatics : public IInspectable
                        {
                        public:
                            virtual HRESULT STDMETHODCALLTYPE Aerial(
                                ABI::Windows::UI::Xaml::Controls::Maps::IMapStyleSheet** result
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE AerialWithOverlay(
                                ABI::Windows::UI::Xaml::Controls::Maps::IMapStyleSheet** result
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE RoadLight(
                                ABI::Windows::UI::Xaml::Controls::Maps::IMapStyleSheet** result
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE RoadDark(
                                ABI::Windows::UI::Xaml::Controls::Maps::IMapStyleSheet** result
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE RoadHighContrastLight(
                                ABI::Windows::UI::Xaml::Controls::Maps::IMapStyleSheet** result
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE RoadHighContrastDark(
                                ABI::Windows::UI::Xaml::Controls::Maps::IMapStyleSheet** result
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE Combine(
                                __FIIterable_1_Windows__CUI__CXaml__CControls__CMaps__CMapStyleSheet* styleSheets,
                                ABI::Windows::UI::Xaml::Controls::Maps::IMapStyleSheet** result
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE ParseFromJson(
                                HSTRING styleAsJson,
                                ABI::Windows::UI::Xaml::Controls::Maps::IMapStyleSheet** result
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE TryParseFromJson(
                                HSTRING styleAsJson,
                                ABI::Windows::UI::Xaml::Controls::Maps::IMapStyleSheet** styleSheet,
                                boolean* returnValue
                                ) = 0;
                        };

                        extern MIDL_CONST_ID IID& IID_IMapStyleSheetStatics = _uuidof(IMapStyleSheetStatics);
                    } /* Maps */
                } /* Controls */
            } /* Xaml */
        } /* UI */
    } /* Windows */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapStyleSheetStatics;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapStyleSheetStatics_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x40000

/*
 *
 * Interface Windows.UI.Xaml.Controls.Maps.IMapTargetCameraChangedEventArgs
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Interface is a part of the implementation of type Windows.UI.Xaml.Controls.Maps.MapTargetCameraChangedEventArgs
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTargetCameraChangedEventArgs_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTargetCameraChangedEventArgs_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_UI_Xaml_Controls_Maps_IMapTargetCameraChangedEventArgs[] = L"Windows.UI.Xaml.Controls.Maps.IMapTargetCameraChangedEventArgs";
namespace ABI {
    namespace Windows {
        namespace UI {
            namespace Xaml {
                namespace Controls {
                    namespace Maps {
                        MIDL_INTERFACE("dbf00472-e953-4fa8-97d0-ea86359057cf")
                        IMapTargetCameraChangedEventArgs : public IInspectable
                        {
                        public:
                            virtual HRESULT STDMETHODCALLTYPE get_Camera(
                                ABI::Windows::UI::Xaml::Controls::Maps::IMapCamera** value
                                ) = 0;
                        };

                        extern MIDL_CONST_ID IID& IID_IMapTargetCameraChangedEventArgs = _uuidof(IMapTargetCameraChangedEventArgs);
                    } /* Maps */
                } /* Controls */
            } /* Xaml */
        } /* UI */
    } /* Windows */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTargetCameraChangedEventArgs;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTargetCameraChangedEventArgs_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Interface Windows.UI.Xaml.Controls.Maps.IMapTargetCameraChangedEventArgs2
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 2.0
 *
 * Interface is a part of the implementation of type Windows.UI.Xaml.Controls.Maps.MapTargetCameraChangedEventArgs
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x20000
#if !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTargetCameraChangedEventArgs2_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTargetCameraChangedEventArgs2_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_UI_Xaml_Controls_Maps_IMapTargetCameraChangedEventArgs2[] = L"Windows.UI.Xaml.Controls.Maps.IMapTargetCameraChangedEventArgs2";
namespace ABI {
    namespace Windows {
        namespace UI {
            namespace Xaml {
                namespace Controls {
                    namespace Maps {
                        MIDL_INTERFACE("97c0b332-f2b6-460b-8d91-ac020a2383dd")
                        IMapTargetCameraChangedEventArgs2 : public IInspectable
                        {
                        public:
                            virtual HRESULT STDMETHODCALLTYPE get_ChangeReason(
                                ABI::Windows::UI::Xaml::Controls::Maps::MapCameraChangeReason* value
                                ) = 0;
                        };

                        extern MIDL_CONST_ID IID& IID_IMapTargetCameraChangedEventArgs2 = _uuidof(IMapTargetCameraChangedEventArgs2);
                    } /* Maps */
                } /* Controls */
            } /* Xaml */
        } /* UI */
    } /* Windows */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTargetCameraChangedEventArgs2;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTargetCameraChangedEventArgs2_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x20000

/*
 *
 * Interface Windows.UI.Xaml.Controls.Maps.IMapTileBitmapRequest
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Interface is a part of the implementation of type Windows.UI.Xaml.Controls.Maps.MapTileBitmapRequest
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileBitmapRequest_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileBitmapRequest_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_UI_Xaml_Controls_Maps_IMapTileBitmapRequest[] = L"Windows.UI.Xaml.Controls.Maps.IMapTileBitmapRequest";
namespace ABI {
    namespace Windows {
        namespace UI {
            namespace Xaml {
                namespace Controls {
                    namespace Maps {
                        MIDL_INTERFACE("46733fbc-d89d-472b-b5f6-d7066b0584f4")
                        IMapTileBitmapRequest : public IInspectable
                        {
                        public:
                            virtual HRESULT STDMETHODCALLTYPE get_PixelData(
                                ABI::Windows::Storage::Streams::IRandomAccessStreamReference** value
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE put_PixelData(
                                ABI::Windows::Storage::Streams::IRandomAccessStreamReference* value
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE GetDeferral(
                                ABI::Windows::UI::Xaml::Controls::Maps::IMapTileBitmapRequestDeferral** result
                                ) = 0;
                        };

                        extern MIDL_CONST_ID IID& IID_IMapTileBitmapRequest = _uuidof(IMapTileBitmapRequest);
                    } /* Maps */
                } /* Controls */
            } /* Xaml */
        } /* UI */
    } /* Windows */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileBitmapRequest;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileBitmapRequest_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Interface Windows.UI.Xaml.Controls.Maps.IMapTileBitmapRequestDeferral
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Interface is a part of the implementation of type Windows.UI.Xaml.Controls.Maps.MapTileBitmapRequestDeferral
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileBitmapRequestDeferral_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileBitmapRequestDeferral_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_UI_Xaml_Controls_Maps_IMapTileBitmapRequestDeferral[] = L"Windows.UI.Xaml.Controls.Maps.IMapTileBitmapRequestDeferral";
namespace ABI {
    namespace Windows {
        namespace UI {
            namespace Xaml {
                namespace Controls {
                    namespace Maps {
                        MIDL_INTERFACE("fe370542-a4ac-4efa-9665-0490b0cafdd2")
                        IMapTileBitmapRequestDeferral : public IInspectable
                        {
                        public:
                            virtual HRESULT STDMETHODCALLTYPE Complete(void) = 0;
                        };

                        extern MIDL_CONST_ID IID& IID_IMapTileBitmapRequestDeferral = _uuidof(IMapTileBitmapRequestDeferral);
                    } /* Maps */
                } /* Controls */
            } /* Xaml */
        } /* UI */
    } /* Windows */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileBitmapRequestDeferral;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileBitmapRequestDeferral_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Interface Windows.UI.Xaml.Controls.Maps.IMapTileBitmapRequestedEventArgs
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Interface is a part of the implementation of type Windows.UI.Xaml.Controls.Maps.MapTileBitmapRequestedEventArgs
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileBitmapRequestedEventArgs_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileBitmapRequestedEventArgs_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_UI_Xaml_Controls_Maps_IMapTileBitmapRequestedEventArgs[] = L"Windows.UI.Xaml.Controls.Maps.IMapTileBitmapRequestedEventArgs";
namespace ABI {
    namespace Windows {
        namespace UI {
            namespace Xaml {
                namespace Controls {
                    namespace Maps {
                        MIDL_INTERFACE("337f691d-9b02-4aa2-8b1e-cc4d91719bf3")
                        IMapTileBitmapRequestedEventArgs : public IInspectable
                        {
                        public:
                            virtual HRESULT STDMETHODCALLTYPE get_X(
                                INT32* value
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE get_Y(
                                INT32* value
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE get_ZoomLevel(
                                INT32* value
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE get_Request(
                                ABI::Windows::UI::Xaml::Controls::Maps::IMapTileBitmapRequest** value
                                ) = 0;
                        };

                        extern MIDL_CONST_ID IID& IID_IMapTileBitmapRequestedEventArgs = _uuidof(IMapTileBitmapRequestedEventArgs);
                    } /* Maps */
                } /* Controls */
            } /* Xaml */
        } /* UI */
    } /* Windows */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileBitmapRequestedEventArgs;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileBitmapRequestedEventArgs_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Interface Windows.UI.Xaml.Controls.Maps.IMapTileBitmapRequestedEventArgs2
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 7.0
 *
 * Interface is a part of the implementation of type Windows.UI.Xaml.Controls.Maps.MapTileBitmapRequestedEventArgs
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x70000
#if !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileBitmapRequestedEventArgs2_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileBitmapRequestedEventArgs2_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_UI_Xaml_Controls_Maps_IMapTileBitmapRequestedEventArgs2[] = L"Windows.UI.Xaml.Controls.Maps.IMapTileBitmapRequestedEventArgs2";
namespace ABI {
    namespace Windows {
        namespace UI {
            namespace Xaml {
                namespace Controls {
                    namespace Maps {
                        MIDL_INTERFACE("0261d114-246a-5296-bc85-590f53aa39c8")
                        IMapTileBitmapRequestedEventArgs2 : public IInspectable
                        {
                        public:
                            virtual HRESULT STDMETHODCALLTYPE get_FrameIndex(
                                INT32* value
                                ) = 0;
                        };

                        extern MIDL_CONST_ID IID& IID_IMapTileBitmapRequestedEventArgs2 = _uuidof(IMapTileBitmapRequestedEventArgs2);
                    } /* Maps */
                } /* Controls */
            } /* Xaml */
        } /* UI */
    } /* Windows */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileBitmapRequestedEventArgs2;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileBitmapRequestedEventArgs2_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x70000

/*
 *
 * Interface Windows.UI.Xaml.Controls.Maps.IMapTileDataSource
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Interface is a part of the implementation of type Windows.UI.Xaml.Controls.Maps.MapTileDataSource
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileDataSource_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileDataSource_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_UI_Xaml_Controls_Maps_IMapTileDataSource[] = L"Windows.UI.Xaml.Controls.Maps.IMapTileDataSource";
namespace ABI {
    namespace Windows {
        namespace UI {
            namespace Xaml {
                namespace Controls {
                    namespace Maps {
                        MIDL_INTERFACE("c03d9f5e-be1f-4c69-9969-79467a513c38")
                        IMapTileDataSource : public IInspectable
                        {
                        public:
                        };

                        extern MIDL_CONST_ID IID& IID_IMapTileDataSource = _uuidof(IMapTileDataSource);
                    } /* Maps */
                } /* Controls */
            } /* Xaml */
        } /* UI */
    } /* Windows */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileDataSource;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileDataSource_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Interface Windows.UI.Xaml.Controls.Maps.IMapTileDataSourceFactory
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Interface is a part of the implementation of type Windows.UI.Xaml.Controls.Maps.MapTileDataSource
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileDataSourceFactory_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileDataSourceFactory_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_UI_Xaml_Controls_Maps_IMapTileDataSourceFactory[] = L"Windows.UI.Xaml.Controls.Maps.IMapTileDataSourceFactory";
namespace ABI {
    namespace Windows {
        namespace UI {
            namespace Xaml {
                namespace Controls {
                    namespace Maps {
                        MIDL_INTERFACE("a3920fbd-e446-4648-a74d-fd2c5d557c06")
                        IMapTileDataSourceFactory : public IInspectable
                        {
                        public:
                            virtual HRESULT STDMETHODCALLTYPE CreateInstance(
                                IInspectable* baseInterface,
                                IInspectable** innerInterface,
                                ABI::Windows::UI::Xaml::Controls::Maps::IMapTileDataSource** value
                                ) = 0;
                        };

                        extern MIDL_CONST_ID IID& IID_IMapTileDataSourceFactory = _uuidof(IMapTileDataSourceFactory);
                    } /* Maps */
                } /* Controls */
            } /* Xaml */
        } /* UI */
    } /* Windows */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileDataSourceFactory;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileDataSourceFactory_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Interface Windows.UI.Xaml.Controls.Maps.IMapTileSource
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Interface is a part of the implementation of type Windows.UI.Xaml.Controls.Maps.MapTileSource
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSource_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSource_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_UI_Xaml_Controls_Maps_IMapTileSource[] = L"Windows.UI.Xaml.Controls.Maps.IMapTileSource";
namespace ABI {
    namespace Windows {
        namespace UI {
            namespace Xaml {
                namespace Controls {
                    namespace Maps {
                        MIDL_INTERFACE("88a76e4e-2fdf-4567-9255-1100519c8d62")
                        IMapTileSource : public IInspectable
                        {
                        public:
                            virtual HRESULT STDMETHODCALLTYPE get_DataSource(
                                ABI::Windows::UI::Xaml::Controls::Maps::IMapTileDataSource** value
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE put_DataSource(
                                ABI::Windows::UI::Xaml::Controls::Maps::IMapTileDataSource* value
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE get_Layer(
                                ABI::Windows::UI::Xaml::Controls::Maps::MapTileLayer* value
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE put_Layer(
                                ABI::Windows::UI::Xaml::Controls::Maps::MapTileLayer value
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE get_ZoomLevelRange(
                                ABI::Windows::UI::Xaml::Controls::Maps::MapZoomLevelRange* value
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE put_ZoomLevelRange(
                                ABI::Windows::UI::Xaml::Controls::Maps::MapZoomLevelRange value
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE get_Bounds(
                                ABI::Windows::Devices::Geolocation::IGeoboundingBox** value
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE put_Bounds(
                                ABI::Windows::Devices::Geolocation::IGeoboundingBox* value
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE get_AllowOverstretch(
                                boolean* value
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE put_AllowOverstretch(
                                boolean value
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE get_IsFadingEnabled(
                                boolean* value
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE put_IsFadingEnabled(
                                boolean value
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE get_IsTransparencyEnabled(
                                boolean* value
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE put_IsTransparencyEnabled(
                                boolean value
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE get_IsRetryEnabled(
                                boolean* value
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE put_IsRetryEnabled(
                                boolean value
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE get_ZIndex(
                                INT32* value
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE put_ZIndex(
                                INT32 value
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE get_TilePixelSize(
                                INT32* value
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE put_TilePixelSize(
                                INT32 value
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE get_Visible(
                                boolean* value
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE put_Visible(
                                boolean value
                                ) = 0;
                        };

                        extern MIDL_CONST_ID IID& IID_IMapTileSource = _uuidof(IMapTileSource);
                    } /* Maps */
                } /* Controls */
            } /* Xaml */
        } /* UI */
    } /* Windows */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSource;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSource_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Interface Windows.UI.Xaml.Controls.Maps.IMapTileSource2
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 7.0
 *
 * Interface is a part of the implementation of type Windows.UI.Xaml.Controls.Maps.MapTileSource
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x70000
#if !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSource2_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSource2_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_UI_Xaml_Controls_Maps_IMapTileSource2[] = L"Windows.UI.Xaml.Controls.Maps.IMapTileSource2";
namespace ABI {
    namespace Windows {
        namespace UI {
            namespace Xaml {
                namespace Controls {
                    namespace Maps {
                        MIDL_INTERFACE("8e65ebbd-4095-5c15-99f1-1260b4e8b0a9")
                        IMapTileSource2 : public IInspectable
                        {
                        public:
                            virtual HRESULT STDMETHODCALLTYPE get_AnimationState(
                                ABI::Windows::UI::Xaml::Controls::Maps::MapTileAnimationState* value
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE get_AutoPlay(
                                boolean* value
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE put_AutoPlay(
                                boolean value
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE get_FrameCount(
                                INT32* value
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE put_FrameCount(
                                INT32 value
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE get_FrameDuration(
                                ABI::Windows::Foundation::TimeSpan* value
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE put_FrameDuration(
                                ABI::Windows::Foundation::TimeSpan value
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE Pause(void) = 0;
                            virtual HRESULT STDMETHODCALLTYPE Play(void) = 0;
                            virtual HRESULT STDMETHODCALLTYPE Stop(void) = 0;
                        };

                        extern MIDL_CONST_ID IID& IID_IMapTileSource2 = _uuidof(IMapTileSource2);
                    } /* Maps */
                } /* Controls */
            } /* Xaml */
        } /* UI */
    } /* Windows */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSource2;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSource2_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x70000

/*
 *
 * Interface Windows.UI.Xaml.Controls.Maps.IMapTileSourceFactory
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Interface is a part of the implementation of type Windows.UI.Xaml.Controls.Maps.MapTileSource
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSourceFactory_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSourceFactory_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_UI_Xaml_Controls_Maps_IMapTileSourceFactory[] = L"Windows.UI.Xaml.Controls.Maps.IMapTileSourceFactory";
namespace ABI {
    namespace Windows {
        namespace UI {
            namespace Xaml {
                namespace Controls {
                    namespace Maps {
                        MIDL_INTERFACE("cd7f811f-77fa-482b-9d34-71d31d465c48")
                        IMapTileSourceFactory : public IInspectable
                        {
                        public:
                            virtual HRESULT STDMETHODCALLTYPE CreateInstance(
                                IInspectable* baseInterface,
                                IInspectable** innerInterface,
                                ABI::Windows::UI::Xaml::Controls::Maps::IMapTileSource** value
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE CreateInstanceWithDataSource(
                                ABI::Windows::UI::Xaml::Controls::Maps::IMapTileDataSource* dataSource,
                                IInspectable* baseInterface,
                                IInspectable** innerInterface,
                                ABI::Windows::UI::Xaml::Controls::Maps::IMapTileSource** value
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE CreateInstanceWithDataSourceAndZoomRange(
                                ABI::Windows::UI::Xaml::Controls::Maps::IMapTileDataSource* dataSource,
                                ABI::Windows::UI::Xaml::Controls::Maps::MapZoomLevelRange zoomLevelRange,
                                IInspectable* baseInterface,
                                IInspectable** innerInterface,
                                ABI::Windows::UI::Xaml::Controls::Maps::IMapTileSource** value
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE CreateInstanceWithDataSourceZoomRangeAndBounds(
                                ABI::Windows::UI::Xaml::Controls::Maps::IMapTileDataSource* dataSource,
                                ABI::Windows::UI::Xaml::Controls::Maps::MapZoomLevelRange zoomLevelRange,
                                ABI::Windows::Devices::Geolocation::IGeoboundingBox* bounds,
                                IInspectable* baseInterface,
                                IInspectable** innerInterface,
                                ABI::Windows::UI::Xaml::Controls::Maps::IMapTileSource** value
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE CreateInstanceWithDataSourceZoomRangeBoundsAndTileSize(
                                ABI::Windows::UI::Xaml::Controls::Maps::IMapTileDataSource* dataSource,
                                ABI::Windows::UI::Xaml::Controls::Maps::MapZoomLevelRange zoomLevelRange,
                                ABI::Windows::Devices::Geolocation::IGeoboundingBox* bounds,
                                INT32 tileSizeInPixels,
                                IInspectable* baseInterface,
                                IInspectable** innerInterface,
                                ABI::Windows::UI::Xaml::Controls::Maps::IMapTileSource** value
                                ) = 0;
                        };

                        extern MIDL_CONST_ID IID& IID_IMapTileSourceFactory = _uuidof(IMapTileSourceFactory);
                    } /* Maps */
                } /* Controls */
            } /* Xaml */
        } /* UI */
    } /* Windows */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSourceFactory;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSourceFactory_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Interface Windows.UI.Xaml.Controls.Maps.IMapTileSourceStatics
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Interface is a part of the implementation of type Windows.UI.Xaml.Controls.Maps.MapTileSource
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSourceStatics_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSourceStatics_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_UI_Xaml_Controls_Maps_IMapTileSourceStatics[] = L"Windows.UI.Xaml.Controls.Maps.IMapTileSourceStatics";
namespace ABI {
    namespace Windows {
        namespace UI {
            namespace Xaml {
                namespace Controls {
                    namespace Maps {
                        MIDL_INTERFACE("93fcc93c-7035-4603-99b1-e659921b6093")
                        IMapTileSourceStatics : public IInspectable
                        {
                        public:
                            virtual HRESULT STDMETHODCALLTYPE get_DataSourceProperty(
                                ABI::Windows::UI::Xaml::IDependencyProperty** value
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE get_LayerProperty(
                                ABI::Windows::UI::Xaml::IDependencyProperty** value
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE get_ZoomLevelRangeProperty(
                                ABI::Windows::UI::Xaml::IDependencyProperty** value
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE get_BoundsProperty(
                                ABI::Windows::UI::Xaml::IDependencyProperty** value
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE get_AllowOverstretchProperty(
                                ABI::Windows::UI::Xaml::IDependencyProperty** value
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE get_IsFadingEnabledProperty(
                                ABI::Windows::UI::Xaml::IDependencyProperty** value
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE get_IsTransparencyEnabledProperty(
                                ABI::Windows::UI::Xaml::IDependencyProperty** value
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE get_IsRetryEnabledProperty(
                                ABI::Windows::UI::Xaml::IDependencyProperty** value
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE get_ZIndexProperty(
                                ABI::Windows::UI::Xaml::IDependencyProperty** value
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE get_TilePixelSizeProperty(
                                ABI::Windows::UI::Xaml::IDependencyProperty** value
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE get_VisibleProperty(
                                ABI::Windows::UI::Xaml::IDependencyProperty** value
                                ) = 0;
                        };

                        extern MIDL_CONST_ID IID& IID_IMapTileSourceStatics = _uuidof(IMapTileSourceStatics);
                    } /* Maps */
                } /* Controls */
            } /* Xaml */
        } /* UI */
    } /* Windows */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSourceStatics;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSourceStatics_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Interface Windows.UI.Xaml.Controls.Maps.IMapTileSourceStatics2
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 7.0
 *
 * Interface is a part of the implementation of type Windows.UI.Xaml.Controls.Maps.MapTileSource
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x70000
#if !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSourceStatics2_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSourceStatics2_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_UI_Xaml_Controls_Maps_IMapTileSourceStatics2[] = L"Windows.UI.Xaml.Controls.Maps.IMapTileSourceStatics2";
namespace ABI {
    namespace Windows {
        namespace UI {
            namespace Xaml {
                namespace Controls {
                    namespace Maps {
                        MIDL_INTERFACE("75cdd47e-669c-50fd-ad85-5ea5174cf59b")
                        IMapTileSourceStatics2 : public IInspectable
                        {
                        public:
                            virtual HRESULT STDMETHODCALLTYPE get_AnimationStateProperty(
                                ABI::Windows::UI::Xaml::IDependencyProperty** value
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE get_AutoPlayProperty(
                                ABI::Windows::UI::Xaml::IDependencyProperty** value
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE get_FrameCountProperty(
                                ABI::Windows::UI::Xaml::IDependencyProperty** value
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE get_FrameDurationProperty(
                                ABI::Windows::UI::Xaml::IDependencyProperty** value
                                ) = 0;
                        };

                        extern MIDL_CONST_ID IID& IID_IMapTileSourceStatics2 = _uuidof(IMapTileSourceStatics2);
                    } /* Maps */
                } /* Controls */
            } /* Xaml */
        } /* UI */
    } /* Windows */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSourceStatics2;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSourceStatics2_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x70000

/*
 *
 * Interface Windows.UI.Xaml.Controls.Maps.IMapTileUriRequest
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Interface is a part of the implementation of type Windows.UI.Xaml.Controls.Maps.MapTileUriRequest
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileUriRequest_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileUriRequest_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_UI_Xaml_Controls_Maps_IMapTileUriRequest[] = L"Windows.UI.Xaml.Controls.Maps.IMapTileUriRequest";
namespace ABI {
    namespace Windows {
        namespace UI {
            namespace Xaml {
                namespace Controls {
                    namespace Maps {
                        MIDL_INTERFACE("17402335-3127-45b8-87a7-99f87d4e2745")
                        IMapTileUriRequest : public IInspectable
                        {
                        public:
                            virtual HRESULT STDMETHODCALLTYPE get_Uri(
                                ABI::Windows::Foundation::IUriRuntimeClass** value
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE put_Uri(
                                ABI::Windows::Foundation::IUriRuntimeClass* value
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE GetDeferral(
                                ABI::Windows::UI::Xaml::Controls::Maps::IMapTileUriRequestDeferral** result
                                ) = 0;
                        };

                        extern MIDL_CONST_ID IID& IID_IMapTileUriRequest = _uuidof(IMapTileUriRequest);
                    } /* Maps */
                } /* Controls */
            } /* Xaml */
        } /* UI */
    } /* Windows */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileUriRequest;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileUriRequest_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Interface Windows.UI.Xaml.Controls.Maps.IMapTileUriRequestDeferral
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Interface is a part of the implementation of type Windows.UI.Xaml.Controls.Maps.MapTileUriRequestDeferral
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileUriRequestDeferral_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileUriRequestDeferral_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_UI_Xaml_Controls_Maps_IMapTileUriRequestDeferral[] = L"Windows.UI.Xaml.Controls.Maps.IMapTileUriRequestDeferral";
namespace ABI {
    namespace Windows {
        namespace UI {
            namespace Xaml {
                namespace Controls {
                    namespace Maps {
                        MIDL_INTERFACE("c117ade0-bf3e-4c51-8faa-4b593cf68eb2")
                        IMapTileUriRequestDeferral : public IInspectable
                        {
                        public:
                            virtual HRESULT STDMETHODCALLTYPE Complete(void) = 0;
                        };

                        extern MIDL_CONST_ID IID& IID_IMapTileUriRequestDeferral = _uuidof(IMapTileUriRequestDeferral);
                    } /* Maps */
                } /* Controls */
            } /* Xaml */
        } /* UI */
    } /* Windows */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileUriRequestDeferral;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileUriRequestDeferral_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Interface Windows.UI.Xaml.Controls.Maps.IMapTileUriRequestedEventArgs
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Interface is a part of the implementation of type Windows.UI.Xaml.Controls.Maps.MapTileUriRequestedEventArgs
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileUriRequestedEventArgs_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileUriRequestedEventArgs_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_UI_Xaml_Controls_Maps_IMapTileUriRequestedEventArgs[] = L"Windows.UI.Xaml.Controls.Maps.IMapTileUriRequestedEventArgs";
namespace ABI {
    namespace Windows {
        namespace UI {
            namespace Xaml {
                namespace Controls {
                    namespace Maps {
                        MIDL_INTERFACE("d2147b43-1bbf-4b98-8dd3-b7834e407e0d")
                        IMapTileUriRequestedEventArgs : public IInspectable
                        {
                        public:
                            virtual HRESULT STDMETHODCALLTYPE get_X(
                                INT32* value
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE get_Y(
                                INT32* value
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE get_ZoomLevel(
                                INT32* value
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE get_Request(
                                ABI::Windows::UI::Xaml::Controls::Maps::IMapTileUriRequest** value
                                ) = 0;
                        };

                        extern MIDL_CONST_ID IID& IID_IMapTileUriRequestedEventArgs = _uuidof(IMapTileUriRequestedEventArgs);
                    } /* Maps */
                } /* Controls */
            } /* Xaml */
        } /* UI */
    } /* Windows */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileUriRequestedEventArgs;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileUriRequestedEventArgs_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Interface Windows.UI.Xaml.Controls.Maps.IMapTileUriRequestedEventArgs2
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 7.0
 *
 * Interface is a part of the implementation of type Windows.UI.Xaml.Controls.Maps.MapTileUriRequestedEventArgs
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x70000
#if !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileUriRequestedEventArgs2_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileUriRequestedEventArgs2_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_UI_Xaml_Controls_Maps_IMapTileUriRequestedEventArgs2[] = L"Windows.UI.Xaml.Controls.Maps.IMapTileUriRequestedEventArgs2";
namespace ABI {
    namespace Windows {
        namespace UI {
            namespace Xaml {
                namespace Controls {
                    namespace Maps {
                        MIDL_INTERFACE("2302185d-33b5-5a55-92f5-74a86a22efa6")
                        IMapTileUriRequestedEventArgs2 : public IInspectable
                        {
                        public:
                            virtual HRESULT STDMETHODCALLTYPE get_FrameIndex(
                                INT32* value
                                ) = 0;
                        };

                        extern MIDL_CONST_ID IID& IID_IMapTileUriRequestedEventArgs2 = _uuidof(IMapTileUriRequestedEventArgs2);
                    } /* Maps */
                } /* Controls */
            } /* Xaml */
        } /* UI */
    } /* Windows */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileUriRequestedEventArgs2;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileUriRequestedEventArgs2_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x70000

/*
 *
 * Interface Windows.UI.Xaml.Controls.Maps.IStreetsideExperience
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Interface is a part of the implementation of type Windows.UI.Xaml.Controls.Maps.StreetsideExperience
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIStreetsideExperience_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIStreetsideExperience_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_UI_Xaml_Controls_Maps_IStreetsideExperience[] = L"Windows.UI.Xaml.Controls.Maps.IStreetsideExperience";
namespace ABI {
    namespace Windows {
        namespace UI {
            namespace Xaml {
                namespace Controls {
                    namespace Maps {
                        MIDL_INTERFACE("a558aec9-e30c-46c8-8116-484691675558")
                        IStreetsideExperience : public IInspectable
                        {
                        public:
                            virtual HRESULT STDMETHODCALLTYPE get_AddressTextVisible(
                                boolean* value
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE put_AddressTextVisible(
                                boolean value
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE get_CursorVisible(
                                boolean* value
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE put_CursorVisible(
                                boolean value
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE get_OverviewMapVisible(
                                boolean* value
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE put_OverviewMapVisible(
                                boolean value
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE get_StreetLabelsVisible(
                                boolean* value
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE put_StreetLabelsVisible(
                                boolean value
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE get_ExitButtonVisible(
                                boolean* value
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE put_ExitButtonVisible(
                                boolean value
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE get_ZoomButtonsVisible(
                                boolean* value
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE put_ZoomButtonsVisible(
                                boolean value
                                ) = 0;
                        };

                        extern MIDL_CONST_ID IID& IID_IStreetsideExperience = _uuidof(IStreetsideExperience);
                    } /* Maps */
                } /* Controls */
            } /* Xaml */
        } /* UI */
    } /* Windows */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIStreetsideExperience;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIStreetsideExperience_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Interface Windows.UI.Xaml.Controls.Maps.IStreetsideExperienceFactory
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Interface is a part of the implementation of type Windows.UI.Xaml.Controls.Maps.StreetsideExperience
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIStreetsideExperienceFactory_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIStreetsideExperienceFactory_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_UI_Xaml_Controls_Maps_IStreetsideExperienceFactory[] = L"Windows.UI.Xaml.Controls.Maps.IStreetsideExperienceFactory";
namespace ABI {
    namespace Windows {
        namespace UI {
            namespace Xaml {
                namespace Controls {
                    namespace Maps {
                        MIDL_INTERFACE("7a5bcf3c-649e-4342-9995-68a6cf5961a7")
                        IStreetsideExperienceFactory : public IInspectable
                        {
                        public:
                            virtual HRESULT STDMETHODCALLTYPE CreateInstanceWithPanorama(
                                ABI::Windows::UI::Xaml::Controls::Maps::IStreetsidePanorama* panorama,
                                ABI::Windows::UI::Xaml::Controls::Maps::IStreetsideExperience** value
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE CreateInstanceWithPanoramaHeadingPitchAndFieldOfView(
                                ABI::Windows::UI::Xaml::Controls::Maps::IStreetsidePanorama* panorama,
                                DOUBLE headingInDegrees,
                                DOUBLE pitchInDegrees,
                                DOUBLE fieldOfViewInDegrees,
                                ABI::Windows::UI::Xaml::Controls::Maps::IStreetsideExperience** value
                                ) = 0;
                        };

                        extern MIDL_CONST_ID IID& IID_IStreetsideExperienceFactory = _uuidof(IStreetsideExperienceFactory);
                    } /* Maps */
                } /* Controls */
            } /* Xaml */
        } /* UI */
    } /* Windows */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIStreetsideExperienceFactory;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIStreetsideExperienceFactory_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Interface Windows.UI.Xaml.Controls.Maps.IStreetsidePanorama
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Interface is a part of the implementation of type Windows.UI.Xaml.Controls.Maps.StreetsidePanorama
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIStreetsidePanorama_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIStreetsidePanorama_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_UI_Xaml_Controls_Maps_IStreetsidePanorama[] = L"Windows.UI.Xaml.Controls.Maps.IStreetsidePanorama";
namespace ABI {
    namespace Windows {
        namespace UI {
            namespace Xaml {
                namespace Controls {
                    namespace Maps {
                        MIDL_INTERFACE("6fe00fd8-ad60-4664-b539-b1069f16c5af")
                        IStreetsidePanorama : public IInspectable
                        {
                        public:
                            virtual HRESULT STDMETHODCALLTYPE get_Location(
                                ABI::Windows::Devices::Geolocation::IGeopoint** value
                                ) = 0;
                        };

                        extern MIDL_CONST_ID IID& IID_IStreetsidePanorama = _uuidof(IStreetsidePanorama);
                    } /* Maps */
                } /* Controls */
            } /* Xaml */
        } /* UI */
    } /* Windows */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIStreetsidePanorama;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIStreetsidePanorama_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Interface Windows.UI.Xaml.Controls.Maps.IStreetsidePanoramaStatics
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Interface is a part of the implementation of type Windows.UI.Xaml.Controls.Maps.StreetsidePanorama
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIStreetsidePanoramaStatics_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIStreetsidePanoramaStatics_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_UI_Xaml_Controls_Maps_IStreetsidePanoramaStatics[] = L"Windows.UI.Xaml.Controls.Maps.IStreetsidePanoramaStatics";
namespace ABI {
    namespace Windows {
        namespace UI {
            namespace Xaml {
                namespace Controls {
                    namespace Maps {
                        MIDL_INTERFACE("d3b47f69-54b3-4ec5-b2a0-4f8204576507")
                        IStreetsidePanoramaStatics : public IInspectable
                        {
                        public:
                            virtual HRESULT STDMETHODCALLTYPE FindNearbyWithLocationAsync(
                                ABI::Windows::Devices::Geolocation::IGeopoint* location,
                                __FIAsyncOperation_1_Windows__CUI__CXaml__CControls__CMaps__CStreetsidePanorama** operation
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE FindNearbyWithLocationAndRadiusAsync(
                                ABI::Windows::Devices::Geolocation::IGeopoint* location,
                                DOUBLE radiusInMeters,
                                __FIAsyncOperation_1_Windows__CUI__CXaml__CControls__CMaps__CStreetsidePanorama** operation
                                ) = 0;
                        };

                        extern MIDL_CONST_ID IID& IID_IStreetsidePanoramaStatics = _uuidof(IStreetsidePanoramaStatics);
                    } /* Maps */
                } /* Controls */
            } /* Xaml */
        } /* UI */
    } /* Windows */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIStreetsidePanoramaStatics;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIStreetsidePanoramaStatics_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Class Windows.UI.Xaml.Controls.Maps.CustomMapTileDataSource
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Class implements the following interfaces:
 *    Windows.UI.Xaml.Controls.Maps.ICustomMapTileDataSource ** Default Interface **
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#ifndef RUNTIMECLASS_Windows_UI_Xaml_Controls_Maps_CustomMapTileDataSource_DEFINED
#define RUNTIMECLASS_Windows_UI_Xaml_Controls_Maps_CustomMapTileDataSource_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Windows_UI_Xaml_Controls_Maps_CustomMapTileDataSource[] = L"Windows.UI.Xaml.Controls.Maps.CustomMapTileDataSource";
#endif
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Class Windows.UI.Xaml.Controls.Maps.HttpMapTileDataSource
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Class implements the following interfaces:
 *    Windows.UI.Xaml.Controls.Maps.IHttpMapTileDataSource ** Default Interface **
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#ifndef RUNTIMECLASS_Windows_UI_Xaml_Controls_Maps_HttpMapTileDataSource_DEFINED
#define RUNTIMECLASS_Windows_UI_Xaml_Controls_Maps_HttpMapTileDataSource_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Windows_UI_Xaml_Controls_Maps_HttpMapTileDataSource[] = L"Windows.UI.Xaml.Controls.Maps.HttpMapTileDataSource";
#endif
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Class Windows.UI.Xaml.Controls.Maps.LocalMapTileDataSource
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Class implements the following interfaces:
 *    Windows.UI.Xaml.Controls.Maps.ILocalMapTileDataSource ** Default Interface **
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#ifndef RUNTIMECLASS_Windows_UI_Xaml_Controls_Maps_LocalMapTileDataSource_DEFINED
#define RUNTIMECLASS_Windows_UI_Xaml_Controls_Maps_LocalMapTileDataSource_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Windows_UI_Xaml_Controls_Maps_LocalMapTileDataSource[] = L"Windows.UI.Xaml.Controls.Maps.LocalMapTileDataSource";
#endif
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Class Windows.UI.Xaml.Controls.Maps.MapActualCameraChangedEventArgs
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * RuntimeClass can be activated.
 *   Type can be activated via RoActivateInstance starting with version 1.0 of the Windows.Foundation.UniversalApiContract API contract
 *
 * Class implements the following interfaces:
 *    Windows.UI.Xaml.Controls.Maps.IMapActualCameraChangedEventArgs ** Default Interface **
 *    Windows.UI.Xaml.Controls.Maps.IMapActualCameraChangedEventArgs2
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#ifndef RUNTIMECLASS_Windows_UI_Xaml_Controls_Maps_MapActualCameraChangedEventArgs_DEFINED
#define RUNTIMECLASS_Windows_UI_Xaml_Controls_Maps_MapActualCameraChangedEventArgs_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Windows_UI_Xaml_Controls_Maps_MapActualCameraChangedEventArgs[] = L"Windows.UI.Xaml.Controls.Maps.MapActualCameraChangedEventArgs";
#endif
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Class Windows.UI.Xaml.Controls.Maps.MapActualCameraChangingEventArgs
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * RuntimeClass can be activated.
 *   Type can be activated via RoActivateInstance starting with version 1.0 of the Windows.Foundation.UniversalApiContract API contract
 *
 * Class implements the following interfaces:
 *    Windows.UI.Xaml.Controls.Maps.IMapActualCameraChangingEventArgs ** Default Interface **
 *    Windows.UI.Xaml.Controls.Maps.IMapActualCameraChangingEventArgs2
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#ifndef RUNTIMECLASS_Windows_UI_Xaml_Controls_Maps_MapActualCameraChangingEventArgs_DEFINED
#define RUNTIMECLASS_Windows_UI_Xaml_Controls_Maps_MapActualCameraChangingEventArgs_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Windows_UI_Xaml_Controls_Maps_MapActualCameraChangingEventArgs[] = L"Windows.UI.Xaml.Controls.Maps.MapActualCameraChangingEventArgs";
#endif
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Class Windows.UI.Xaml.Controls.Maps.MapBillboard
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 4.0
 *
 * RuntimeClass can be activated.
 *   Type can be activated via the Windows.UI.Xaml.Controls.Maps.IMapBillboardFactory interface starting with version 4.0 of the Windows.Foundation.UniversalApiContract API contract
 *
 * RuntimeClass contains static methods.
 *   Static Methods exist on the Windows.UI.Xaml.Controls.Maps.IMapBillboardStatics interface starting with version 4.0 of the Windows.Foundation.UniversalApiContract API contract
 *
 * Class implements the following interfaces:
 *    Windows.UI.Xaml.Controls.Maps.IMapBillboard ** Default Interface **
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x40000
#ifndef RUNTIMECLASS_Windows_UI_Xaml_Controls_Maps_MapBillboard_DEFINED
#define RUNTIMECLASS_Windows_UI_Xaml_Controls_Maps_MapBillboard_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Windows_UI_Xaml_Controls_Maps_MapBillboard[] = L"Windows.UI.Xaml.Controls.Maps.MapBillboard";
#endif
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x40000

/*
 *
 * Class Windows.UI.Xaml.Controls.Maps.MapCamera
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * RuntimeClass can be activated.
 *   Type can be activated via the Windows.UI.Xaml.Controls.Maps.IMapCameraFactory interface starting with version 1.0 of the Windows.Foundation.UniversalApiContract API contract
 *
 * Class implements the following interfaces:
 *    Windows.UI.Xaml.Controls.Maps.IMapCamera ** Default Interface **
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#ifndef RUNTIMECLASS_Windows_UI_Xaml_Controls_Maps_MapCamera_DEFINED
#define RUNTIMECLASS_Windows_UI_Xaml_Controls_Maps_MapCamera_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Windows_UI_Xaml_Controls_Maps_MapCamera[] = L"Windows.UI.Xaml.Controls.Maps.MapCamera";
#endif
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Class Windows.UI.Xaml.Controls.Maps.MapContextRequestedEventArgs
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 4.0
 *
 * RuntimeClass can be activated.
 *   Type can be activated via RoActivateInstance starting with version 4.0 of the Windows.Foundation.UniversalApiContract API contract
 *
 * Class implements the following interfaces:
 *    Windows.UI.Xaml.Controls.Maps.IMapContextRequestedEventArgs ** Default Interface **
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x40000
#ifndef RUNTIMECLASS_Windows_UI_Xaml_Controls_Maps_MapContextRequestedEventArgs_DEFINED
#define RUNTIMECLASS_Windows_UI_Xaml_Controls_Maps_MapContextRequestedEventArgs_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Windows_UI_Xaml_Controls_Maps_MapContextRequestedEventArgs[] = L"Windows.UI.Xaml.Controls.Maps.MapContextRequestedEventArgs";
#endif
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x40000

/*
 *
 * Class Windows.UI.Xaml.Controls.Maps.MapControl
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * RuntimeClass can be activated.
 *   Type can be activated via RoActivateInstance starting with version 1.0 of the Windows.Foundation.UniversalApiContract API contract
 *
 * RuntimeClass contains static methods.
 *   Static Methods exist on the Windows.UI.Xaml.Controls.Maps.IMapControlStatics2 interface starting with version 1.0 of the Windows.Foundation.UniversalApiContract API contract
 *   Static Methods exist on the Windows.UI.Xaml.Controls.Maps.IMapControlStatics interface starting with version 1.0 of the Windows.Foundation.UniversalApiContract API contract
 *   Static Methods exist on the Windows.UI.Xaml.Controls.Maps.IMapControlStatics4 interface starting with version 3.0 of the Windows.Foundation.UniversalApiContract API contract
 *   Static Methods exist on the Windows.UI.Xaml.Controls.Maps.IMapControlStatics8 interface starting with version 8.0 of the Windows.Foundation.UniversalApiContract API contract
 *   Static Methods exist on the Windows.UI.Xaml.Controls.Maps.IMapControlStatics5 interface starting with version 4.0 of the Windows.Foundation.UniversalApiContract API contract
 *   Static Methods exist on the Windows.UI.Xaml.Controls.Maps.IMapControlStatics7 interface starting with version 6.0 of the Windows.Foundation.UniversalApiContract API contract
 *   Static Methods exist on the Windows.UI.Xaml.Controls.Maps.IMapControlStatics6 interface starting with version 5.0 of the Windows.Foundation.UniversalApiContract API contract
 *
 * Class implements the following interfaces:
 *    Windows.UI.Xaml.Controls.Maps.IMapControl ** Default Interface **
 *    Windows.UI.Xaml.Controls.Maps.IMapControl2
 *    Windows.UI.Xaml.Controls.Maps.IMapControl3
 *    Windows.UI.Xaml.Controls.Maps.IMapControl4
 *    Windows.UI.Xaml.Controls.Maps.IMapControl5
 *    Windows.UI.Xaml.Controls.Maps.IMapControl6
 *    Windows.UI.Xaml.Controls.Maps.IMapControl7
 *    Windows.UI.Xaml.Controls.Maps.IMapControl8
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#ifndef RUNTIMECLASS_Windows_UI_Xaml_Controls_Maps_MapControl_DEFINED
#define RUNTIMECLASS_Windows_UI_Xaml_Controls_Maps_MapControl_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Windows_UI_Xaml_Controls_Maps_MapControl[] = L"Windows.UI.Xaml.Controls.Maps.MapControl";
#endif
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Class Windows.UI.Xaml.Controls.Maps.MapControlBusinessLandmarkClickEventArgs
 *
 * Introduced to Windows.Services.Maps.LocalSearchContract in version 2.0
 *
 * RuntimeClass can be activated.
 *   Type can be activated via RoActivateInstance starting with version 2.0 of the Windows.Services.Maps.LocalSearchContract API contract
 *
 * Class implements the following interfaces:
 *    Windows.UI.Xaml.Controls.Maps.IMapControlBusinessLandmarkClickEventArgs ** Default Interface **
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */
#if WINDOWS_SERVICES_MAPS_LOCALSEARCHCONTRACT_VERSION >= 0x20000
#ifndef RUNTIMECLASS_Windows_UI_Xaml_Controls_Maps_MapControlBusinessLandmarkClickEventArgs_DEFINED
#define RUNTIMECLASS_Windows_UI_Xaml_Controls_Maps_MapControlBusinessLandmarkClickEventArgs_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Windows_UI_Xaml_Controls_Maps_MapControlBusinessLandmarkClickEventArgs[] = L"Windows.UI.Xaml.Controls.Maps.MapControlBusinessLandmarkClickEventArgs";
#endif
#endif // WINDOWS_SERVICES_MAPS_LOCALSEARCHCONTRACT_VERSION >= 0x20000

/*
 *
 * Class Windows.UI.Xaml.Controls.Maps.MapControlBusinessLandmarkPointerEnteredEventArgs
 *
 * Introduced to Windows.Services.Maps.LocalSearchContract in version 3.0
 *
 * RuntimeClass can be activated.
 *   Type can be activated via RoActivateInstance starting with version 3.0 of the Windows.Services.Maps.LocalSearchContract API contract
 *
 * Class implements the following interfaces:
 *    Windows.UI.Xaml.Controls.Maps.IMapControlBusinessLandmarkPointerEnteredEventArgs ** Default Interface **
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */
#if WINDOWS_SERVICES_MAPS_LOCALSEARCHCONTRACT_VERSION >= 0x30000
#ifndef RUNTIMECLASS_Windows_UI_Xaml_Controls_Maps_MapControlBusinessLandmarkPointerEnteredEventArgs_DEFINED
#define RUNTIMECLASS_Windows_UI_Xaml_Controls_Maps_MapControlBusinessLandmarkPointerEnteredEventArgs_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Windows_UI_Xaml_Controls_Maps_MapControlBusinessLandmarkPointerEnteredEventArgs[] = L"Windows.UI.Xaml.Controls.Maps.MapControlBusinessLandmarkPointerEnteredEventArgs";
#endif
#endif // WINDOWS_SERVICES_MAPS_LOCALSEARCHCONTRACT_VERSION >= 0x30000

/*
 *
 * Class Windows.UI.Xaml.Controls.Maps.MapControlBusinessLandmarkPointerExitedEventArgs
 *
 * Introduced to Windows.Services.Maps.LocalSearchContract in version 3.0
 *
 * RuntimeClass can be activated.
 *   Type can be activated via RoActivateInstance starting with version 3.0 of the Windows.Services.Maps.LocalSearchContract API contract
 *
 * Class implements the following interfaces:
 *    Windows.UI.Xaml.Controls.Maps.IMapControlBusinessLandmarkPointerExitedEventArgs ** Default Interface **
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */
#if WINDOWS_SERVICES_MAPS_LOCALSEARCHCONTRACT_VERSION >= 0x30000
#ifndef RUNTIMECLASS_Windows_UI_Xaml_Controls_Maps_MapControlBusinessLandmarkPointerExitedEventArgs_DEFINED
#define RUNTIMECLASS_Windows_UI_Xaml_Controls_Maps_MapControlBusinessLandmarkPointerExitedEventArgs_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Windows_UI_Xaml_Controls_Maps_MapControlBusinessLandmarkPointerExitedEventArgs[] = L"Windows.UI.Xaml.Controls.Maps.MapControlBusinessLandmarkPointerExitedEventArgs";
#endif
#endif // WINDOWS_SERVICES_MAPS_LOCALSEARCHCONTRACT_VERSION >= 0x30000

/*
 *
 * Class Windows.UI.Xaml.Controls.Maps.MapControlBusinessLandmarkRightTappedEventArgs
 *
 * Introduced to Windows.Services.Maps.LocalSearchContract in version 2.0
 *
 * RuntimeClass can be activated.
 *   Type can be activated via RoActivateInstance starting with version 2.0 of the Windows.Services.Maps.LocalSearchContract API contract
 *
 * Class implements the following interfaces:
 *    Windows.UI.Xaml.Controls.Maps.IMapControlBusinessLandmarkRightTappedEventArgs ** Default Interface **
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */
#if WINDOWS_SERVICES_MAPS_LOCALSEARCHCONTRACT_VERSION >= 0x20000
#ifndef RUNTIMECLASS_Windows_UI_Xaml_Controls_Maps_MapControlBusinessLandmarkRightTappedEventArgs_DEFINED
#define RUNTIMECLASS_Windows_UI_Xaml_Controls_Maps_MapControlBusinessLandmarkRightTappedEventArgs_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Windows_UI_Xaml_Controls_Maps_MapControlBusinessLandmarkRightTappedEventArgs[] = L"Windows.UI.Xaml.Controls.Maps.MapControlBusinessLandmarkRightTappedEventArgs";
#endif
#endif // WINDOWS_SERVICES_MAPS_LOCALSEARCHCONTRACT_VERSION >= 0x20000

/*
 *
 * Class Windows.UI.Xaml.Controls.Maps.MapControlDataHelper
 *
 * Introduced to Windows.Services.Maps.LocalSearchContract in version 2.0
 *
 * RuntimeClass can be activated.
 *   Type can be activated via the Windows.UI.Xaml.Controls.Maps.IMapControlDataHelperFactory interface starting with version 2.0 of the Windows.Services.Maps.LocalSearchContract API contract
 *
 * RuntimeClass contains static methods.
 *   Static Methods exist on the Windows.UI.Xaml.Controls.Maps.IMapControlDataHelperStatics interface starting with version 4.0 of the Windows.Services.Maps.LocalSearchContract API contract
 *
 * Class implements the following interfaces:
 *    Windows.UI.Xaml.Controls.Maps.IMapControlDataHelper ** Default Interface **
 *    Windows.UI.Xaml.Controls.Maps.IMapControlDataHelper2
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */
#if WINDOWS_SERVICES_MAPS_LOCALSEARCHCONTRACT_VERSION >= 0x20000
#ifndef RUNTIMECLASS_Windows_UI_Xaml_Controls_Maps_MapControlDataHelper_DEFINED
#define RUNTIMECLASS_Windows_UI_Xaml_Controls_Maps_MapControlDataHelper_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Windows_UI_Xaml_Controls_Maps_MapControlDataHelper[] = L"Windows.UI.Xaml.Controls.Maps.MapControlDataHelper";
#endif
#endif // WINDOWS_SERVICES_MAPS_LOCALSEARCHCONTRACT_VERSION >= 0x20000

/*
 *
 * Class Windows.UI.Xaml.Controls.Maps.MapControlTransitFeatureClickEventArgs
 *
 * Introduced to Windows.Services.Maps.LocalSearchContract in version 2.0
 *
 * RuntimeClass can be activated.
 *   Type can be activated via RoActivateInstance starting with version 2.0 of the Windows.Services.Maps.LocalSearchContract API contract
 *
 * Class implements the following interfaces:
 *    Windows.UI.Xaml.Controls.Maps.IMapControlTransitFeatureClickEventArgs ** Default Interface **
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */
#if WINDOWS_SERVICES_MAPS_LOCALSEARCHCONTRACT_VERSION >= 0x20000
#ifndef RUNTIMECLASS_Windows_UI_Xaml_Controls_Maps_MapControlTransitFeatureClickEventArgs_DEFINED
#define RUNTIMECLASS_Windows_UI_Xaml_Controls_Maps_MapControlTransitFeatureClickEventArgs_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Windows_UI_Xaml_Controls_Maps_MapControlTransitFeatureClickEventArgs[] = L"Windows.UI.Xaml.Controls.Maps.MapControlTransitFeatureClickEventArgs";
#endif
#endif // WINDOWS_SERVICES_MAPS_LOCALSEARCHCONTRACT_VERSION >= 0x20000

/*
 *
 * Class Windows.UI.Xaml.Controls.Maps.MapControlTransitFeaturePointerEnteredEventArgs
 *
 * Introduced to Windows.Services.Maps.LocalSearchContract in version 3.0
 *
 * RuntimeClass can be activated.
 *   Type can be activated via RoActivateInstance starting with version 3.0 of the Windows.Services.Maps.LocalSearchContract API contract
 *
 * Class implements the following interfaces:
 *    Windows.UI.Xaml.Controls.Maps.IMapControlTransitFeaturePointerEnteredEventArgs ** Default Interface **
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */
#if WINDOWS_SERVICES_MAPS_LOCALSEARCHCONTRACT_VERSION >= 0x30000
#ifndef RUNTIMECLASS_Windows_UI_Xaml_Controls_Maps_MapControlTransitFeaturePointerEnteredEventArgs_DEFINED
#define RUNTIMECLASS_Windows_UI_Xaml_Controls_Maps_MapControlTransitFeaturePointerEnteredEventArgs_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Windows_UI_Xaml_Controls_Maps_MapControlTransitFeaturePointerEnteredEventArgs[] = L"Windows.UI.Xaml.Controls.Maps.MapControlTransitFeaturePointerEnteredEventArgs";
#endif
#endif // WINDOWS_SERVICES_MAPS_LOCALSEARCHCONTRACT_VERSION >= 0x30000

/*
 *
 * Class Windows.UI.Xaml.Controls.Maps.MapControlTransitFeaturePointerExitedEventArgs
 *
 * Introduced to Windows.Services.Maps.LocalSearchContract in version 3.0
 *
 * RuntimeClass can be activated.
 *   Type can be activated via RoActivateInstance starting with version 3.0 of the Windows.Services.Maps.LocalSearchContract API contract
 *
 * Class implements the following interfaces:
 *    Windows.UI.Xaml.Controls.Maps.IMapControlTransitFeaturePointerExitedEventArgs ** Default Interface **
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */
#if WINDOWS_SERVICES_MAPS_LOCALSEARCHCONTRACT_VERSION >= 0x30000
#ifndef RUNTIMECLASS_Windows_UI_Xaml_Controls_Maps_MapControlTransitFeaturePointerExitedEventArgs_DEFINED
#define RUNTIMECLASS_Windows_UI_Xaml_Controls_Maps_MapControlTransitFeaturePointerExitedEventArgs_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Windows_UI_Xaml_Controls_Maps_MapControlTransitFeaturePointerExitedEventArgs[] = L"Windows.UI.Xaml.Controls.Maps.MapControlTransitFeaturePointerExitedEventArgs";
#endif
#endif // WINDOWS_SERVICES_MAPS_LOCALSEARCHCONTRACT_VERSION >= 0x30000

/*
 *
 * Class Windows.UI.Xaml.Controls.Maps.MapControlTransitFeatureRightTappedEventArgs
 *
 * Introduced to Windows.Services.Maps.LocalSearchContract in version 2.0
 *
 * RuntimeClass can be activated.
 *   Type can be activated via RoActivateInstance starting with version 2.0 of the Windows.Services.Maps.LocalSearchContract API contract
 *
 * Class implements the following interfaces:
 *    Windows.UI.Xaml.Controls.Maps.IMapControlTransitFeatureRightTappedEventArgs ** Default Interface **
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */
#if WINDOWS_SERVICES_MAPS_LOCALSEARCHCONTRACT_VERSION >= 0x20000
#ifndef RUNTIMECLASS_Windows_UI_Xaml_Controls_Maps_MapControlTransitFeatureRightTappedEventArgs_DEFINED
#define RUNTIMECLASS_Windows_UI_Xaml_Controls_Maps_MapControlTransitFeatureRightTappedEventArgs_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Windows_UI_Xaml_Controls_Maps_MapControlTransitFeatureRightTappedEventArgs[] = L"Windows.UI.Xaml.Controls.Maps.MapControlTransitFeatureRightTappedEventArgs";
#endif
#endif // WINDOWS_SERVICES_MAPS_LOCALSEARCHCONTRACT_VERSION >= 0x20000

/*
 *
 * Class Windows.UI.Xaml.Controls.Maps.MapCustomExperience
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Class implements the following interfaces:
 *    Windows.UI.Xaml.Controls.Maps.IMapCustomExperience ** Default Interface **
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#ifndef RUNTIMECLASS_Windows_UI_Xaml_Controls_Maps_MapCustomExperience_DEFINED
#define RUNTIMECLASS_Windows_UI_Xaml_Controls_Maps_MapCustomExperience_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Windows_UI_Xaml_Controls_Maps_MapCustomExperience[] = L"Windows.UI.Xaml.Controls.Maps.MapCustomExperience";
#endif
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Class Windows.UI.Xaml.Controls.Maps.MapCustomExperienceChangedEventArgs
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * RuntimeClass can be activated.
 *   Type can be activated via RoActivateInstance starting with version 1.0 of the Windows.Foundation.UniversalApiContract API contract
 *
 * Class implements the following interfaces:
 *    Windows.UI.Xaml.Controls.Maps.IMapCustomExperienceChangedEventArgs ** Default Interface **
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#ifndef RUNTIMECLASS_Windows_UI_Xaml_Controls_Maps_MapCustomExperienceChangedEventArgs_DEFINED
#define RUNTIMECLASS_Windows_UI_Xaml_Controls_Maps_MapCustomExperienceChangedEventArgs_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Windows_UI_Xaml_Controls_Maps_MapCustomExperienceChangedEventArgs[] = L"Windows.UI.Xaml.Controls.Maps.MapCustomExperienceChangedEventArgs";
#endif
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Class Windows.UI.Xaml.Controls.Maps.MapElement
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * RuntimeClass contains static methods.
 *   Static Methods exist on the Windows.UI.Xaml.Controls.Maps.IMapElementStatics3 interface starting with version 5.0 of the Windows.Foundation.UniversalApiContract API contract
 *   Static Methods exist on the Windows.UI.Xaml.Controls.Maps.IMapElementStatics interface starting with version 1.0 of the Windows.Foundation.UniversalApiContract API contract
 *   Static Methods exist on the Windows.UI.Xaml.Controls.Maps.IMapElementStatics4 interface starting with version 6.0 of the Windows.Foundation.UniversalApiContract API contract
 *   Static Methods exist on the Windows.UI.Xaml.Controls.Maps.IMapElementStatics2 interface starting with version 1.0 of the Windows.Foundation.UniversalApiContract API contract
 *
 * Class implements the following interfaces:
 *    Windows.UI.Xaml.Controls.Maps.IMapElement ** Default Interface **
 *    Windows.UI.Xaml.Controls.Maps.IMapElement2
 *    Windows.UI.Xaml.Controls.Maps.IMapElement3
 *    Windows.UI.Xaml.Controls.Maps.IMapElement4
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#ifndef RUNTIMECLASS_Windows_UI_Xaml_Controls_Maps_MapElement_DEFINED
#define RUNTIMECLASS_Windows_UI_Xaml_Controls_Maps_MapElement_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Windows_UI_Xaml_Controls_Maps_MapElement[] = L"Windows.UI.Xaml.Controls.Maps.MapElement";
#endif
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Class Windows.UI.Xaml.Controls.Maps.MapElement3D
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 5.0
 *
 * RuntimeClass can be activated.
 *   Type can be activated via RoActivateInstance starting with version 5.0 of the Windows.Foundation.UniversalApiContract API contract
 *
 * RuntimeClass contains static methods.
 *   Static Methods exist on the Windows.UI.Xaml.Controls.Maps.IMapElement3DStatics interface starting with version 5.0 of the Windows.Foundation.UniversalApiContract API contract
 *
 * Class implements the following interfaces:
 *    Windows.UI.Xaml.Controls.Maps.IMapElement3D ** Default Interface **
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x50000
#ifndef RUNTIMECLASS_Windows_UI_Xaml_Controls_Maps_MapElement3D_DEFINED
#define RUNTIMECLASS_Windows_UI_Xaml_Controls_Maps_MapElement3D_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Windows_UI_Xaml_Controls_Maps_MapElement3D[] = L"Windows.UI.Xaml.Controls.Maps.MapElement3D";
#endif
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x50000

/*
 *
 * Class Windows.UI.Xaml.Controls.Maps.MapElementClickEventArgs
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * RuntimeClass can be activated.
 *   Type can be activated via RoActivateInstance starting with version 1.0 of the Windows.Foundation.UniversalApiContract API contract
 *
 * Class implements the following interfaces:
 *    Windows.UI.Xaml.Controls.Maps.IMapElementClickEventArgs ** Default Interface **
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#ifndef RUNTIMECLASS_Windows_UI_Xaml_Controls_Maps_MapElementClickEventArgs_DEFINED
#define RUNTIMECLASS_Windows_UI_Xaml_Controls_Maps_MapElementClickEventArgs_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Windows_UI_Xaml_Controls_Maps_MapElementClickEventArgs[] = L"Windows.UI.Xaml.Controls.Maps.MapElementClickEventArgs";
#endif
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Class Windows.UI.Xaml.Controls.Maps.MapElementPointerEnteredEventArgs
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * RuntimeClass can be activated.
 *   Type can be activated via RoActivateInstance starting with version 1.0 of the Windows.Foundation.UniversalApiContract API contract
 *
 * Class implements the following interfaces:
 *    Windows.UI.Xaml.Controls.Maps.IMapElementPointerEnteredEventArgs ** Default Interface **
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#ifndef RUNTIMECLASS_Windows_UI_Xaml_Controls_Maps_MapElementPointerEnteredEventArgs_DEFINED
#define RUNTIMECLASS_Windows_UI_Xaml_Controls_Maps_MapElementPointerEnteredEventArgs_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Windows_UI_Xaml_Controls_Maps_MapElementPointerEnteredEventArgs[] = L"Windows.UI.Xaml.Controls.Maps.MapElementPointerEnteredEventArgs";
#endif
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Class Windows.UI.Xaml.Controls.Maps.MapElementPointerExitedEventArgs
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * RuntimeClass can be activated.
 *   Type can be activated via RoActivateInstance starting with version 1.0 of the Windows.Foundation.UniversalApiContract API contract
 *
 * Class implements the following interfaces:
 *    Windows.UI.Xaml.Controls.Maps.IMapElementPointerExitedEventArgs ** Default Interface **
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#ifndef RUNTIMECLASS_Windows_UI_Xaml_Controls_Maps_MapElementPointerExitedEventArgs_DEFINED
#define RUNTIMECLASS_Windows_UI_Xaml_Controls_Maps_MapElementPointerExitedEventArgs_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Windows_UI_Xaml_Controls_Maps_MapElementPointerExitedEventArgs[] = L"Windows.UI.Xaml.Controls.Maps.MapElementPointerExitedEventArgs";
#endif
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Class Windows.UI.Xaml.Controls.Maps.MapElementsLayer
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 5.0
 *
 * RuntimeClass can be activated.
 *   Type can be activated via RoActivateInstance starting with version 5.0 of the Windows.Foundation.UniversalApiContract API contract
 *
 * RuntimeClass contains static methods.
 *   Static Methods exist on the Windows.UI.Xaml.Controls.Maps.IMapElementsLayerStatics interface starting with version 5.0 of the Windows.Foundation.UniversalApiContract API contract
 *
 * Class implements the following interfaces:
 *    Windows.UI.Xaml.Controls.Maps.IMapElementsLayer ** Default Interface **
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x50000
#ifndef RUNTIMECLASS_Windows_UI_Xaml_Controls_Maps_MapElementsLayer_DEFINED
#define RUNTIMECLASS_Windows_UI_Xaml_Controls_Maps_MapElementsLayer_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Windows_UI_Xaml_Controls_Maps_MapElementsLayer[] = L"Windows.UI.Xaml.Controls.Maps.MapElementsLayer";
#endif
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x50000

/*
 *
 * Class Windows.UI.Xaml.Controls.Maps.MapElementsLayerClickEventArgs
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 5.0
 *
 * RuntimeClass can be activated.
 *   Type can be activated via RoActivateInstance starting with version 5.0 of the Windows.Foundation.UniversalApiContract API contract
 *
 * Class implements the following interfaces:
 *    Windows.UI.Xaml.Controls.Maps.IMapElementsLayerClickEventArgs ** Default Interface **
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x50000
#ifndef RUNTIMECLASS_Windows_UI_Xaml_Controls_Maps_MapElementsLayerClickEventArgs_DEFINED
#define RUNTIMECLASS_Windows_UI_Xaml_Controls_Maps_MapElementsLayerClickEventArgs_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Windows_UI_Xaml_Controls_Maps_MapElementsLayerClickEventArgs[] = L"Windows.UI.Xaml.Controls.Maps.MapElementsLayerClickEventArgs";
#endif
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x50000

/*
 *
 * Class Windows.UI.Xaml.Controls.Maps.MapElementsLayerContextRequestedEventArgs
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 5.0
 *
 * RuntimeClass can be activated.
 *   Type can be activated via RoActivateInstance starting with version 5.0 of the Windows.Foundation.UniversalApiContract API contract
 *
 * Class implements the following interfaces:
 *    Windows.UI.Xaml.Controls.Maps.IMapElementsLayerContextRequestedEventArgs ** Default Interface **
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x50000
#ifndef RUNTIMECLASS_Windows_UI_Xaml_Controls_Maps_MapElementsLayerContextRequestedEventArgs_DEFINED
#define RUNTIMECLASS_Windows_UI_Xaml_Controls_Maps_MapElementsLayerContextRequestedEventArgs_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Windows_UI_Xaml_Controls_Maps_MapElementsLayerContextRequestedEventArgs[] = L"Windows.UI.Xaml.Controls.Maps.MapElementsLayerContextRequestedEventArgs";
#endif
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x50000

/*
 *
 * Class Windows.UI.Xaml.Controls.Maps.MapElementsLayerPointerEnteredEventArgs
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 5.0
 *
 * RuntimeClass can be activated.
 *   Type can be activated via RoActivateInstance starting with version 5.0 of the Windows.Foundation.UniversalApiContract API contract
 *
 * Class implements the following interfaces:
 *    Windows.UI.Xaml.Controls.Maps.IMapElementsLayerPointerEnteredEventArgs ** Default Interface **
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x50000
#ifndef RUNTIMECLASS_Windows_UI_Xaml_Controls_Maps_MapElementsLayerPointerEnteredEventArgs_DEFINED
#define RUNTIMECLASS_Windows_UI_Xaml_Controls_Maps_MapElementsLayerPointerEnteredEventArgs_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Windows_UI_Xaml_Controls_Maps_MapElementsLayerPointerEnteredEventArgs[] = L"Windows.UI.Xaml.Controls.Maps.MapElementsLayerPointerEnteredEventArgs";
#endif
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x50000

/*
 *
 * Class Windows.UI.Xaml.Controls.Maps.MapElementsLayerPointerExitedEventArgs
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 5.0
 *
 * RuntimeClass can be activated.
 *   Type can be activated via RoActivateInstance starting with version 5.0 of the Windows.Foundation.UniversalApiContract API contract
 *
 * Class implements the following interfaces:
 *    Windows.UI.Xaml.Controls.Maps.IMapElementsLayerPointerExitedEventArgs ** Default Interface **
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x50000
#ifndef RUNTIMECLASS_Windows_UI_Xaml_Controls_Maps_MapElementsLayerPointerExitedEventArgs_DEFINED
#define RUNTIMECLASS_Windows_UI_Xaml_Controls_Maps_MapElementsLayerPointerExitedEventArgs_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Windows_UI_Xaml_Controls_Maps_MapElementsLayerPointerExitedEventArgs[] = L"Windows.UI.Xaml.Controls.Maps.MapElementsLayerPointerExitedEventArgs";
#endif
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x50000

/*
 *
 * Class Windows.UI.Xaml.Controls.Maps.MapIcon
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * RuntimeClass can be activated.
 *   Type can be activated via RoActivateInstance starting with version 1.0 of the Windows.Foundation.UniversalApiContract API contract
 *
 * RuntimeClass contains static methods.
 *   Static Methods exist on the Windows.UI.Xaml.Controls.Maps.IMapIconStatics interface starting with version 1.0 of the Windows.Foundation.UniversalApiContract API contract
 *   Static Methods exist on the Windows.UI.Xaml.Controls.Maps.IMapIconStatics2 interface starting with version 1.0 of the Windows.Foundation.UniversalApiContract API contract
 *
 * Class implements the following interfaces:
 *    Windows.UI.Xaml.Controls.Maps.IMapIcon ** Default Interface **
 *    Windows.UI.Xaml.Controls.Maps.IMapIcon2
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#ifndef RUNTIMECLASS_Windows_UI_Xaml_Controls_Maps_MapIcon_DEFINED
#define RUNTIMECLASS_Windows_UI_Xaml_Controls_Maps_MapIcon_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Windows_UI_Xaml_Controls_Maps_MapIcon[] = L"Windows.UI.Xaml.Controls.Maps.MapIcon";
#endif
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Class Windows.UI.Xaml.Controls.Maps.MapInputEventArgs
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * RuntimeClass can be activated.
 *   Type can be activated via RoActivateInstance starting with version 1.0 of the Windows.Foundation.UniversalApiContract API contract
 *
 * Class implements the following interfaces:
 *    Windows.UI.Xaml.Controls.Maps.IMapInputEventArgs ** Default Interface **
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#ifndef RUNTIMECLASS_Windows_UI_Xaml_Controls_Maps_MapInputEventArgs_DEFINED
#define RUNTIMECLASS_Windows_UI_Xaml_Controls_Maps_MapInputEventArgs_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Windows_UI_Xaml_Controls_Maps_MapInputEventArgs[] = L"Windows.UI.Xaml.Controls.Maps.MapInputEventArgs";
#endif
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Class Windows.UI.Xaml.Controls.Maps.MapItemsControl
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * RuntimeClass can be activated.
 *   Type can be activated via RoActivateInstance starting with version 1.0 of the Windows.Foundation.UniversalApiContract API contract
 *
 * RuntimeClass contains static methods.
 *   Static Methods exist on the Windows.UI.Xaml.Controls.Maps.IMapItemsControlStatics interface starting with version 1.0 of the Windows.Foundation.UniversalApiContract API contract
 *
 * Class implements the following interfaces:
 *    Windows.UI.Xaml.Controls.Maps.IMapItemsControl ** Default Interface **
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#ifndef RUNTIMECLASS_Windows_UI_Xaml_Controls_Maps_MapItemsControl_DEFINED
#define RUNTIMECLASS_Windows_UI_Xaml_Controls_Maps_MapItemsControl_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Windows_UI_Xaml_Controls_Maps_MapItemsControl[] = L"Windows.UI.Xaml.Controls.Maps.MapItemsControl";
#endif
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Class Windows.UI.Xaml.Controls.Maps.MapLayer
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 5.0
 *
 * RuntimeClass contains static methods.
 *   Static Methods exist on the Windows.UI.Xaml.Controls.Maps.IMapLayerStatics interface starting with version 5.0 of the Windows.Foundation.UniversalApiContract API contract
 *
 * Class implements the following interfaces:
 *    Windows.UI.Xaml.Controls.Maps.IMapLayer ** Default Interface **
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x50000
#ifndef RUNTIMECLASS_Windows_UI_Xaml_Controls_Maps_MapLayer_DEFINED
#define RUNTIMECLASS_Windows_UI_Xaml_Controls_Maps_MapLayer_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Windows_UI_Xaml_Controls_Maps_MapLayer[] = L"Windows.UI.Xaml.Controls.Maps.MapLayer";
#endif
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x50000

/*
 *
 * Class Windows.UI.Xaml.Controls.Maps.MapModel3D
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 5.0
 *
 * RuntimeClass contains static methods.
 *   Static Methods exist on the Windows.UI.Xaml.Controls.Maps.IMapModel3DStatics interface starting with version 5.0 of the Windows.Foundation.UniversalApiContract API contract
 *
 * Class implements the following interfaces:
 *    Windows.UI.Xaml.Controls.Maps.IMapModel3D ** Default Interface **
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x50000
#ifndef RUNTIMECLASS_Windows_UI_Xaml_Controls_Maps_MapModel3D_DEFINED
#define RUNTIMECLASS_Windows_UI_Xaml_Controls_Maps_MapModel3D_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Windows_UI_Xaml_Controls_Maps_MapModel3D[] = L"Windows.UI.Xaml.Controls.Maps.MapModel3D";
#endif
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x50000

/*
 *
 * Class Windows.UI.Xaml.Controls.Maps.MapPolygon
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * RuntimeClass can be activated.
 *   Type can be activated via RoActivateInstance starting with version 1.0 of the Windows.Foundation.UniversalApiContract API contract
 *
 * RuntimeClass contains static methods.
 *   Static Methods exist on the Windows.UI.Xaml.Controls.Maps.IMapPolygonStatics interface starting with version 1.0 of the Windows.Foundation.UniversalApiContract API contract
 *
 * Class implements the following interfaces:
 *    Windows.UI.Xaml.Controls.Maps.IMapPolygon ** Default Interface **
 *    Windows.UI.Xaml.Controls.Maps.IMapPolygon2
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#ifndef RUNTIMECLASS_Windows_UI_Xaml_Controls_Maps_MapPolygon_DEFINED
#define RUNTIMECLASS_Windows_UI_Xaml_Controls_Maps_MapPolygon_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Windows_UI_Xaml_Controls_Maps_MapPolygon[] = L"Windows.UI.Xaml.Controls.Maps.MapPolygon";
#endif
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Class Windows.UI.Xaml.Controls.Maps.MapPolyline
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * RuntimeClass can be activated.
 *   Type can be activated via RoActivateInstance starting with version 1.0 of the Windows.Foundation.UniversalApiContract API contract
 *
 * RuntimeClass contains static methods.
 *   Static Methods exist on the Windows.UI.Xaml.Controls.Maps.IMapPolylineStatics interface starting with version 1.0 of the Windows.Foundation.UniversalApiContract API contract
 *
 * Class implements the following interfaces:
 *    Windows.UI.Xaml.Controls.Maps.IMapPolyline ** Default Interface **
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#ifndef RUNTIMECLASS_Windows_UI_Xaml_Controls_Maps_MapPolyline_DEFINED
#define RUNTIMECLASS_Windows_UI_Xaml_Controls_Maps_MapPolyline_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Windows_UI_Xaml_Controls_Maps_MapPolyline[] = L"Windows.UI.Xaml.Controls.Maps.MapPolyline";
#endif
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Class Windows.UI.Xaml.Controls.Maps.MapRightTappedEventArgs
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 2.0
 *
 * RuntimeClass can be activated.
 *   Type can be activated via RoActivateInstance starting with version 2.0 of the Windows.Foundation.UniversalApiContract API contract
 *
 * Class implements the following interfaces:
 *    Windows.UI.Xaml.Controls.Maps.IMapRightTappedEventArgs ** Default Interface **
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x20000
#ifndef RUNTIMECLASS_Windows_UI_Xaml_Controls_Maps_MapRightTappedEventArgs_DEFINED
#define RUNTIMECLASS_Windows_UI_Xaml_Controls_Maps_MapRightTappedEventArgs_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Windows_UI_Xaml_Controls_Maps_MapRightTappedEventArgs[] = L"Windows.UI.Xaml.Controls.Maps.MapRightTappedEventArgs";
#endif
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x20000

/*
 *
 * Class Windows.UI.Xaml.Controls.Maps.MapRouteView
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Class implements the following interfaces:
 *    Windows.UI.Xaml.Controls.Maps.IMapRouteView ** Default Interface **
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#ifndef RUNTIMECLASS_Windows_UI_Xaml_Controls_Maps_MapRouteView_DEFINED
#define RUNTIMECLASS_Windows_UI_Xaml_Controls_Maps_MapRouteView_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Windows_UI_Xaml_Controls_Maps_MapRouteView[] = L"Windows.UI.Xaml.Controls.Maps.MapRouteView";
#endif
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Class Windows.UI.Xaml.Controls.Maps.MapScene
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * RuntimeClass contains static methods.
 *   Static Methods exist on the Windows.UI.Xaml.Controls.Maps.IMapSceneStatics interface starting with version 1.0 of the Windows.Foundation.UniversalApiContract API contract
 *
 * Class implements the following interfaces:
 *    Windows.UI.Xaml.Controls.Maps.IMapScene ** Default Interface **
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#ifndef RUNTIMECLASS_Windows_UI_Xaml_Controls_Maps_MapScene_DEFINED
#define RUNTIMECLASS_Windows_UI_Xaml_Controls_Maps_MapScene_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Windows_UI_Xaml_Controls_Maps_MapScene[] = L"Windows.UI.Xaml.Controls.Maps.MapScene";
#endif
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Class Windows.UI.Xaml.Controls.Maps.MapStyleSheet
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 4.0
 *
 * RuntimeClass contains static methods.
 *   Static Methods exist on the Windows.UI.Xaml.Controls.Maps.IMapStyleSheetStatics interface starting with version 4.0 of the Windows.Foundation.UniversalApiContract API contract
 *
 * Class implements the following interfaces:
 *    Windows.UI.Xaml.Controls.Maps.IMapStyleSheet ** Default Interface **
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x40000
#ifndef RUNTIMECLASS_Windows_UI_Xaml_Controls_Maps_MapStyleSheet_DEFINED
#define RUNTIMECLASS_Windows_UI_Xaml_Controls_Maps_MapStyleSheet_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Windows_UI_Xaml_Controls_Maps_MapStyleSheet[] = L"Windows.UI.Xaml.Controls.Maps.MapStyleSheet";
#endif
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x40000

/*
 *
 * Class Windows.UI.Xaml.Controls.Maps.MapStyleSheetEntries
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 5.0
 *
 * RuntimeClass contains static methods.
 *   Static Methods exist on the Windows.UI.Xaml.Controls.Maps.IMapStyleSheetEntriesStatics interface starting with version 5.0 of the Windows.Foundation.UniversalApiContract API contract
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x50000
#ifndef RUNTIMECLASS_Windows_UI_Xaml_Controls_Maps_MapStyleSheetEntries_DEFINED
#define RUNTIMECLASS_Windows_UI_Xaml_Controls_Maps_MapStyleSheetEntries_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Windows_UI_Xaml_Controls_Maps_MapStyleSheetEntries[] = L"Windows.UI.Xaml.Controls.Maps.MapStyleSheetEntries";
#endif
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x50000

/*
 *
 * Class Windows.UI.Xaml.Controls.Maps.MapStyleSheetEntryStates
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 5.0
 *
 * RuntimeClass contains static methods.
 *   Static Methods exist on the Windows.UI.Xaml.Controls.Maps.IMapStyleSheetEntryStatesStatics interface starting with version 5.0 of the Windows.Foundation.UniversalApiContract API contract
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x50000
#ifndef RUNTIMECLASS_Windows_UI_Xaml_Controls_Maps_MapStyleSheetEntryStates_DEFINED
#define RUNTIMECLASS_Windows_UI_Xaml_Controls_Maps_MapStyleSheetEntryStates_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Windows_UI_Xaml_Controls_Maps_MapStyleSheetEntryStates[] = L"Windows.UI.Xaml.Controls.Maps.MapStyleSheetEntryStates";
#endif
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x50000

/*
 *
 * Class Windows.UI.Xaml.Controls.Maps.MapTargetCameraChangedEventArgs
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * RuntimeClass can be activated.
 *   Type can be activated via RoActivateInstance starting with version 1.0 of the Windows.Foundation.UniversalApiContract API contract
 *
 * Class implements the following interfaces:
 *    Windows.UI.Xaml.Controls.Maps.IMapTargetCameraChangedEventArgs ** Default Interface **
 *    Windows.UI.Xaml.Controls.Maps.IMapTargetCameraChangedEventArgs2
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#ifndef RUNTIMECLASS_Windows_UI_Xaml_Controls_Maps_MapTargetCameraChangedEventArgs_DEFINED
#define RUNTIMECLASS_Windows_UI_Xaml_Controls_Maps_MapTargetCameraChangedEventArgs_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Windows_UI_Xaml_Controls_Maps_MapTargetCameraChangedEventArgs[] = L"Windows.UI.Xaml.Controls.Maps.MapTargetCameraChangedEventArgs";
#endif
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Class Windows.UI.Xaml.Controls.Maps.MapTileBitmapRequest
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * RuntimeClass can be activated.
 *   Type can be activated via RoActivateInstance starting with version 1.0 of the Windows.Foundation.UniversalApiContract API contract
 *
 * Class implements the following interfaces:
 *    Windows.UI.Xaml.Controls.Maps.IMapTileBitmapRequest ** Default Interface **
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#ifndef RUNTIMECLASS_Windows_UI_Xaml_Controls_Maps_MapTileBitmapRequest_DEFINED
#define RUNTIMECLASS_Windows_UI_Xaml_Controls_Maps_MapTileBitmapRequest_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Windows_UI_Xaml_Controls_Maps_MapTileBitmapRequest[] = L"Windows.UI.Xaml.Controls.Maps.MapTileBitmapRequest";
#endif
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Class Windows.UI.Xaml.Controls.Maps.MapTileBitmapRequestDeferral
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * RuntimeClass can be activated.
 *   Type can be activated via RoActivateInstance starting with version 1.0 of the Windows.Foundation.UniversalApiContract API contract
 *
 * Class implements the following interfaces:
 *    Windows.UI.Xaml.Controls.Maps.IMapTileBitmapRequestDeferral ** Default Interface **
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#ifndef RUNTIMECLASS_Windows_UI_Xaml_Controls_Maps_MapTileBitmapRequestDeferral_DEFINED
#define RUNTIMECLASS_Windows_UI_Xaml_Controls_Maps_MapTileBitmapRequestDeferral_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Windows_UI_Xaml_Controls_Maps_MapTileBitmapRequestDeferral[] = L"Windows.UI.Xaml.Controls.Maps.MapTileBitmapRequestDeferral";
#endif
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Class Windows.UI.Xaml.Controls.Maps.MapTileBitmapRequestedEventArgs
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * RuntimeClass can be activated.
 *   Type can be activated via RoActivateInstance starting with version 1.0 of the Windows.Foundation.UniversalApiContract API contract
 *
 * Class implements the following interfaces:
 *    Windows.UI.Xaml.Controls.Maps.IMapTileBitmapRequestedEventArgs ** Default Interface **
 *    Windows.UI.Xaml.Controls.Maps.IMapTileBitmapRequestedEventArgs2
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#ifndef RUNTIMECLASS_Windows_UI_Xaml_Controls_Maps_MapTileBitmapRequestedEventArgs_DEFINED
#define RUNTIMECLASS_Windows_UI_Xaml_Controls_Maps_MapTileBitmapRequestedEventArgs_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Windows_UI_Xaml_Controls_Maps_MapTileBitmapRequestedEventArgs[] = L"Windows.UI.Xaml.Controls.Maps.MapTileBitmapRequestedEventArgs";
#endif
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Class Windows.UI.Xaml.Controls.Maps.MapTileDataSource
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Class implements the following interfaces:
 *    Windows.UI.Xaml.Controls.Maps.IMapTileDataSource ** Default Interface **
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#ifndef RUNTIMECLASS_Windows_UI_Xaml_Controls_Maps_MapTileDataSource_DEFINED
#define RUNTIMECLASS_Windows_UI_Xaml_Controls_Maps_MapTileDataSource_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Windows_UI_Xaml_Controls_Maps_MapTileDataSource[] = L"Windows.UI.Xaml.Controls.Maps.MapTileDataSource";
#endif
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Class Windows.UI.Xaml.Controls.Maps.MapTileSource
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * RuntimeClass contains static methods.
 *   Static Methods exist on the Windows.UI.Xaml.Controls.Maps.IMapTileSourceStatics2 interface starting with version 7.0 of the Windows.Foundation.UniversalApiContract API contract
 *   Static Methods exist on the Windows.UI.Xaml.Controls.Maps.IMapTileSourceStatics interface starting with version 1.0 of the Windows.Foundation.UniversalApiContract API contract
 *
 * Class implements the following interfaces:
 *    Windows.UI.Xaml.Controls.Maps.IMapTileSource ** Default Interface **
 *    Windows.UI.Xaml.Controls.Maps.IMapTileSource2
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#ifndef RUNTIMECLASS_Windows_UI_Xaml_Controls_Maps_MapTileSource_DEFINED
#define RUNTIMECLASS_Windows_UI_Xaml_Controls_Maps_MapTileSource_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Windows_UI_Xaml_Controls_Maps_MapTileSource[] = L"Windows.UI.Xaml.Controls.Maps.MapTileSource";
#endif
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Class Windows.UI.Xaml.Controls.Maps.MapTileUriRequest
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * RuntimeClass can be activated.
 *   Type can be activated via RoActivateInstance starting with version 1.0 of the Windows.Foundation.UniversalApiContract API contract
 *
 * Class implements the following interfaces:
 *    Windows.UI.Xaml.Controls.Maps.IMapTileUriRequest ** Default Interface **
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#ifndef RUNTIMECLASS_Windows_UI_Xaml_Controls_Maps_MapTileUriRequest_DEFINED
#define RUNTIMECLASS_Windows_UI_Xaml_Controls_Maps_MapTileUriRequest_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Windows_UI_Xaml_Controls_Maps_MapTileUriRequest[] = L"Windows.UI.Xaml.Controls.Maps.MapTileUriRequest";
#endif
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Class Windows.UI.Xaml.Controls.Maps.MapTileUriRequestDeferral
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * RuntimeClass can be activated.
 *   Type can be activated via RoActivateInstance starting with version 1.0 of the Windows.Foundation.UniversalApiContract API contract
 *
 * Class implements the following interfaces:
 *    Windows.UI.Xaml.Controls.Maps.IMapTileUriRequestDeferral ** Default Interface **
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#ifndef RUNTIMECLASS_Windows_UI_Xaml_Controls_Maps_MapTileUriRequestDeferral_DEFINED
#define RUNTIMECLASS_Windows_UI_Xaml_Controls_Maps_MapTileUriRequestDeferral_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Windows_UI_Xaml_Controls_Maps_MapTileUriRequestDeferral[] = L"Windows.UI.Xaml.Controls.Maps.MapTileUriRequestDeferral";
#endif
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Class Windows.UI.Xaml.Controls.Maps.MapTileUriRequestedEventArgs
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * RuntimeClass can be activated.
 *   Type can be activated via RoActivateInstance starting with version 1.0 of the Windows.Foundation.UniversalApiContract API contract
 *
 * Class implements the following interfaces:
 *    Windows.UI.Xaml.Controls.Maps.IMapTileUriRequestedEventArgs ** Default Interface **
 *    Windows.UI.Xaml.Controls.Maps.IMapTileUriRequestedEventArgs2
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#ifndef RUNTIMECLASS_Windows_UI_Xaml_Controls_Maps_MapTileUriRequestedEventArgs_DEFINED
#define RUNTIMECLASS_Windows_UI_Xaml_Controls_Maps_MapTileUriRequestedEventArgs_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Windows_UI_Xaml_Controls_Maps_MapTileUriRequestedEventArgs[] = L"Windows.UI.Xaml.Controls.Maps.MapTileUriRequestedEventArgs";
#endif
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Class Windows.UI.Xaml.Controls.Maps.StreetsideExperience
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * RuntimeClass can be activated.
 *   Type can be activated via the Windows.UI.Xaml.Controls.Maps.IStreetsideExperienceFactory interface starting with version 1.0 of the Windows.Foundation.UniversalApiContract API contract
 *
 * Class implements the following interfaces:
 *    Windows.UI.Xaml.Controls.Maps.IStreetsideExperience ** Default Interface **
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#ifndef RUNTIMECLASS_Windows_UI_Xaml_Controls_Maps_StreetsideExperience_DEFINED
#define RUNTIMECLASS_Windows_UI_Xaml_Controls_Maps_StreetsideExperience_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Windows_UI_Xaml_Controls_Maps_StreetsideExperience[] = L"Windows.UI.Xaml.Controls.Maps.StreetsideExperience";
#endif
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Class Windows.UI.Xaml.Controls.Maps.StreetsidePanorama
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * RuntimeClass contains static methods.
 *   Static Methods exist on the Windows.UI.Xaml.Controls.Maps.IStreetsidePanoramaStatics interface starting with version 1.0 of the Windows.Foundation.UniversalApiContract API contract
 *
 * Class implements the following interfaces:
 *    Windows.UI.Xaml.Controls.Maps.IStreetsidePanorama ** Default Interface **
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#ifndef RUNTIMECLASS_Windows_UI_Xaml_Controls_Maps_StreetsidePanorama_DEFINED
#define RUNTIMECLASS_Windows_UI_Xaml_Controls_Maps_StreetsidePanorama_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Windows_UI_Xaml_Controls_Maps_StreetsidePanorama[] = L"Windows.UI.Xaml.Controls.Maps.StreetsidePanorama";
#endif
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

#else // !defined(__cplusplus)
/* Forward Declarations */
#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CICustomMapTileDataSource_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CICustomMapTileDataSource_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CICustomMapTileDataSource __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CICustomMapTileDataSource;

#endif // ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CICustomMapTileDataSource_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CICustomMapTileDataSourceFactory_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CICustomMapTileDataSourceFactory_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CICustomMapTileDataSourceFactory __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CICustomMapTileDataSourceFactory;

#endif // ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CICustomMapTileDataSourceFactory_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIHttpMapTileDataSource_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIHttpMapTileDataSource_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIHttpMapTileDataSource __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIHttpMapTileDataSource;

#endif // ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIHttpMapTileDataSource_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIHttpMapTileDataSourceFactory_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIHttpMapTileDataSourceFactory_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIHttpMapTileDataSourceFactory __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIHttpMapTileDataSourceFactory;

#endif // ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIHttpMapTileDataSourceFactory_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CILocalMapTileDataSource_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CILocalMapTileDataSource_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CILocalMapTileDataSource __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CILocalMapTileDataSource;

#endif // ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CILocalMapTileDataSource_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CILocalMapTileDataSourceFactory_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CILocalMapTileDataSourceFactory_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CILocalMapTileDataSourceFactory __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CILocalMapTileDataSourceFactory;

#endif // ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CILocalMapTileDataSourceFactory_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapActualCameraChangedEventArgs_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapActualCameraChangedEventArgs_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapActualCameraChangedEventArgs __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapActualCameraChangedEventArgs;

#endif // ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapActualCameraChangedEventArgs_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapActualCameraChangedEventArgs2_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapActualCameraChangedEventArgs2_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapActualCameraChangedEventArgs2 __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapActualCameraChangedEventArgs2;

#endif // ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapActualCameraChangedEventArgs2_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapActualCameraChangingEventArgs_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapActualCameraChangingEventArgs_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapActualCameraChangingEventArgs __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapActualCameraChangingEventArgs;

#endif // ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapActualCameraChangingEventArgs_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapActualCameraChangingEventArgs2_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapActualCameraChangingEventArgs2_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapActualCameraChangingEventArgs2 __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapActualCameraChangingEventArgs2;

#endif // ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapActualCameraChangingEventArgs2_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapBillboard_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapBillboard_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapBillboard __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapBillboard;

#endif // ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapBillboard_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapBillboardFactory_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapBillboardFactory_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapBillboardFactory __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapBillboardFactory;

#endif // ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapBillboardFactory_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapBillboardStatics_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapBillboardStatics_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapBillboardStatics __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapBillboardStatics;

#endif // ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapBillboardStatics_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCamera_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCamera_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCamera __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCamera;

#endif // ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCamera_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCameraFactory_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCameraFactory_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCameraFactory __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCameraFactory;

#endif // ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCameraFactory_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapContextRequestedEventArgs_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapContextRequestedEventArgs_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapContextRequestedEventArgs __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapContextRequestedEventArgs;

#endif // ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapContextRequestedEventArgs_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl;

#endif // ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl2_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl2_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl2 __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl2;

#endif // ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl2_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl3_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl3_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl3 __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl3;

#endif // ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl3_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl4_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl4_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl4 __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl4;

#endif // ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl4_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl5_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl5_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl5 __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl5;

#endif // ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl5_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl6_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl6_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl6 __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl6;

#endif // ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl6_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl7_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl7_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl7 __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl7;

#endif // ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl7_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl8_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl8_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl8 __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl8;

#endif // ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl8_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlBusinessLandmarkClickEventArgs_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlBusinessLandmarkClickEventArgs_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlBusinessLandmarkClickEventArgs __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlBusinessLandmarkClickEventArgs;

#endif // ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlBusinessLandmarkClickEventArgs_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlBusinessLandmarkPointerEnteredEventArgs_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlBusinessLandmarkPointerEnteredEventArgs_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlBusinessLandmarkPointerEnteredEventArgs __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlBusinessLandmarkPointerEnteredEventArgs;

#endif // ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlBusinessLandmarkPointerEnteredEventArgs_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlBusinessLandmarkPointerExitedEventArgs_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlBusinessLandmarkPointerExitedEventArgs_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlBusinessLandmarkPointerExitedEventArgs __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlBusinessLandmarkPointerExitedEventArgs;

#endif // ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlBusinessLandmarkPointerExitedEventArgs_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlBusinessLandmarkRightTappedEventArgs_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlBusinessLandmarkRightTappedEventArgs_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlBusinessLandmarkRightTappedEventArgs __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlBusinessLandmarkRightTappedEventArgs;

#endif // ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlBusinessLandmarkRightTappedEventArgs_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlDataHelper_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlDataHelper_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlDataHelper __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlDataHelper;

#endif // ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlDataHelper_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlDataHelper2_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlDataHelper2_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlDataHelper2 __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlDataHelper2;

#endif // ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlDataHelper2_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlDataHelperFactory_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlDataHelperFactory_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlDataHelperFactory __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlDataHelperFactory;

#endif // ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlDataHelperFactory_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlDataHelperStatics_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlDataHelperStatics_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlDataHelperStatics __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlDataHelperStatics;

#endif // ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlDataHelperStatics_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics;

#endif // ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics2_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics2_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics2 __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics2;

#endif // ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics2_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics4_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics4_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics4 __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics4;

#endif // ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics4_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics5_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics5_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics5 __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics5;

#endif // ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics5_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics6_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics6_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics6 __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics6;

#endif // ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics6_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics7_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics7_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics7 __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics7;

#endif // ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics7_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics8_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics8_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics8 __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics8;

#endif // ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics8_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlTransitFeatureClickEventArgs_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlTransitFeatureClickEventArgs_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlTransitFeatureClickEventArgs __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlTransitFeatureClickEventArgs;

#endif // ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlTransitFeatureClickEventArgs_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlTransitFeaturePointerEnteredEventArgs_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlTransitFeaturePointerEnteredEventArgs_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlTransitFeaturePointerEnteredEventArgs __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlTransitFeaturePointerEnteredEventArgs;

#endif // ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlTransitFeaturePointerEnteredEventArgs_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlTransitFeaturePointerExitedEventArgs_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlTransitFeaturePointerExitedEventArgs_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlTransitFeaturePointerExitedEventArgs __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlTransitFeaturePointerExitedEventArgs;

#endif // ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlTransitFeaturePointerExitedEventArgs_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlTransitFeatureRightTappedEventArgs_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlTransitFeatureRightTappedEventArgs_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlTransitFeatureRightTappedEventArgs __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlTransitFeatureRightTappedEventArgs;

#endif // ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlTransitFeatureRightTappedEventArgs_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCustomExperience_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCustomExperience_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCustomExperience __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCustomExperience;

#endif // ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCustomExperience_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCustomExperienceChangedEventArgs_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCustomExperienceChangedEventArgs_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCustomExperienceChangedEventArgs __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCustomExperienceChangedEventArgs;

#endif // ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCustomExperienceChangedEventArgs_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCustomExperienceFactory_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCustomExperienceFactory_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCustomExperienceFactory __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCustomExperienceFactory;

#endif // ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCustomExperienceFactory_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement;

#endif // ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement2_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement2_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement2 __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement2;

#endif // ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement2_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement3_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement3_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement3 __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement3;

#endif // ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement3_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement3D_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement3D_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement3D __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement3D;

#endif // ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement3D_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement3DStatics_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement3DStatics_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement3DStatics __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement3DStatics;

#endif // ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement3DStatics_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement4_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement4_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement4 __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement4;

#endif // ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement4_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementClickEventArgs_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementClickEventArgs_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementClickEventArgs __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementClickEventArgs;

#endif // ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementClickEventArgs_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementFactory_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementFactory_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementFactory __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementFactory;

#endif // ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementFactory_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementPointerEnteredEventArgs_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementPointerEnteredEventArgs_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementPointerEnteredEventArgs __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementPointerEnteredEventArgs;

#endif // ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementPointerEnteredEventArgs_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementPointerExitedEventArgs_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementPointerExitedEventArgs_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementPointerExitedEventArgs __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementPointerExitedEventArgs;

#endif // ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementPointerExitedEventArgs_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementStatics_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementStatics_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementStatics __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementStatics;

#endif // ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementStatics_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementStatics2_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementStatics2_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementStatics2 __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementStatics2;

#endif // ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementStatics2_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementStatics3_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementStatics3_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementStatics3 __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementStatics3;

#endif // ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementStatics3_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementStatics4_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementStatics4_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementStatics4 __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementStatics4;

#endif // ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementStatics4_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementsLayer_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementsLayer_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementsLayer __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementsLayer;

#endif // ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementsLayer_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementsLayerClickEventArgs_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementsLayerClickEventArgs_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementsLayerClickEventArgs __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementsLayerClickEventArgs;

#endif // ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementsLayerClickEventArgs_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementsLayerContextRequestedEventArgs_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementsLayerContextRequestedEventArgs_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementsLayerContextRequestedEventArgs __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementsLayerContextRequestedEventArgs;

#endif // ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementsLayerContextRequestedEventArgs_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementsLayerPointerEnteredEventArgs_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementsLayerPointerEnteredEventArgs_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementsLayerPointerEnteredEventArgs __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementsLayerPointerEnteredEventArgs;

#endif // ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementsLayerPointerEnteredEventArgs_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementsLayerPointerExitedEventArgs_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementsLayerPointerExitedEventArgs_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementsLayerPointerExitedEventArgs __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementsLayerPointerExitedEventArgs;

#endif // ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementsLayerPointerExitedEventArgs_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementsLayerStatics_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementsLayerStatics_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementsLayerStatics __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementsLayerStatics;

#endif // ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementsLayerStatics_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapIcon_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapIcon_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapIcon __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapIcon;

#endif // ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapIcon_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapIcon2_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapIcon2_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapIcon2 __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapIcon2;

#endif // ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapIcon2_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapIconStatics_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapIconStatics_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapIconStatics __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapIconStatics;

#endif // ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapIconStatics_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapIconStatics2_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapIconStatics2_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapIconStatics2 __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapIconStatics2;

#endif // ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapIconStatics2_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapInputEventArgs_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapInputEventArgs_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapInputEventArgs __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapInputEventArgs;

#endif // ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapInputEventArgs_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapItemsControl_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapItemsControl_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapItemsControl __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapItemsControl;

#endif // ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapItemsControl_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapItemsControlStatics_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapItemsControlStatics_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapItemsControlStatics __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapItemsControlStatics;

#endif // ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapItemsControlStatics_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapLayer_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapLayer_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapLayer __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapLayer;

#endif // ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapLayer_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapLayerFactory_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapLayerFactory_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapLayerFactory __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapLayerFactory;

#endif // ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapLayerFactory_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapLayerStatics_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapLayerStatics_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapLayerStatics __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapLayerStatics;

#endif // ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapLayerStatics_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapModel3D_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapModel3D_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapModel3D __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapModel3D;

#endif // ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapModel3D_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapModel3DFactory_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapModel3DFactory_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapModel3DFactory __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapModel3DFactory;

#endif // ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapModel3DFactory_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapModel3DStatics_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapModel3DStatics_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapModel3DStatics __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapModel3DStatics;

#endif // ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapModel3DStatics_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolygon_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolygon_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolygon __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolygon;

#endif // ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolygon_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolygon2_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolygon2_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolygon2 __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolygon2;

#endif // ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolygon2_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolygonStatics_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolygonStatics_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolygonStatics __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolygonStatics;

#endif // ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolygonStatics_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolyline_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolyline_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolyline __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolyline;

#endif // ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolyline_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolylineStatics_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolylineStatics_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolylineStatics __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolylineStatics;

#endif // ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolylineStatics_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapRightTappedEventArgs_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapRightTappedEventArgs_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapRightTappedEventArgs __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapRightTappedEventArgs;

#endif // ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapRightTappedEventArgs_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapRouteView_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapRouteView_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapRouteView __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapRouteView;

#endif // ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapRouteView_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapRouteViewFactory_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapRouteViewFactory_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapRouteViewFactory __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapRouteViewFactory;

#endif // ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapRouteViewFactory_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapScene_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapScene_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapScene __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapScene;

#endif // ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapScene_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapSceneStatics_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapSceneStatics_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapSceneStatics __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapSceneStatics;

#endif // ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapSceneStatics_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapStyleSheet_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapStyleSheet_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapStyleSheet __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapStyleSheet;

#endif // ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapStyleSheet_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapStyleSheetEntriesStatics_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapStyleSheetEntriesStatics_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapStyleSheetEntriesStatics __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapStyleSheetEntriesStatics;

#endif // ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapStyleSheetEntriesStatics_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapStyleSheetEntryStatesStatics_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapStyleSheetEntryStatesStatics_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapStyleSheetEntryStatesStatics __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapStyleSheetEntryStatesStatics;

#endif // ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapStyleSheetEntryStatesStatics_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapStyleSheetStatics_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapStyleSheetStatics_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapStyleSheetStatics __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapStyleSheetStatics;

#endif // ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapStyleSheetStatics_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTargetCameraChangedEventArgs_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTargetCameraChangedEventArgs_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTargetCameraChangedEventArgs __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTargetCameraChangedEventArgs;

#endif // ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTargetCameraChangedEventArgs_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTargetCameraChangedEventArgs2_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTargetCameraChangedEventArgs2_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTargetCameraChangedEventArgs2 __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTargetCameraChangedEventArgs2;

#endif // ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTargetCameraChangedEventArgs2_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileBitmapRequest_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileBitmapRequest_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileBitmapRequest __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileBitmapRequest;

#endif // ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileBitmapRequest_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileBitmapRequestDeferral_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileBitmapRequestDeferral_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileBitmapRequestDeferral __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileBitmapRequestDeferral;

#endif // ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileBitmapRequestDeferral_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileBitmapRequestedEventArgs_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileBitmapRequestedEventArgs_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileBitmapRequestedEventArgs __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileBitmapRequestedEventArgs;

#endif // ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileBitmapRequestedEventArgs_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileBitmapRequestedEventArgs2_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileBitmapRequestedEventArgs2_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileBitmapRequestedEventArgs2 __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileBitmapRequestedEventArgs2;

#endif // ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileBitmapRequestedEventArgs2_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileDataSource_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileDataSource_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileDataSource __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileDataSource;

#endif // ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileDataSource_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileDataSourceFactory_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileDataSourceFactory_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileDataSourceFactory __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileDataSourceFactory;

#endif // ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileDataSourceFactory_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSource_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSource_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSource __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSource;

#endif // ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSource_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSource2_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSource2_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSource2 __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSource2;

#endif // ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSource2_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSourceFactory_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSourceFactory_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSourceFactory __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSourceFactory;

#endif // ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSourceFactory_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSourceStatics_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSourceStatics_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSourceStatics __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSourceStatics;

#endif // ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSourceStatics_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSourceStatics2_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSourceStatics2_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSourceStatics2 __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSourceStatics2;

#endif // ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSourceStatics2_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileUriRequest_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileUriRequest_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileUriRequest __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileUriRequest;

#endif // ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileUriRequest_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileUriRequestDeferral_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileUriRequestDeferral_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileUriRequestDeferral __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileUriRequestDeferral;

#endif // ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileUriRequestDeferral_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileUriRequestedEventArgs_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileUriRequestedEventArgs_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileUriRequestedEventArgs __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileUriRequestedEventArgs;

#endif // ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileUriRequestedEventArgs_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileUriRequestedEventArgs2_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileUriRequestedEventArgs2_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileUriRequestedEventArgs2 __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileUriRequestedEventArgs2;

#endif // ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileUriRequestedEventArgs2_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIStreetsideExperience_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIStreetsideExperience_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIStreetsideExperience __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIStreetsideExperience;

#endif // ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIStreetsideExperience_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIStreetsideExperienceFactory_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIStreetsideExperienceFactory_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIStreetsideExperienceFactory __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIStreetsideExperienceFactory;

#endif // ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIStreetsideExperienceFactory_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIStreetsidePanorama_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIStreetsidePanorama_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIStreetsidePanorama __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIStreetsidePanorama;

#endif // ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIStreetsidePanorama_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIStreetsidePanoramaStatics_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIStreetsidePanoramaStatics_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIStreetsidePanoramaStatics __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIStreetsidePanoramaStatics;

#endif // ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIStreetsidePanoramaStatics_FWD_DEFINED__

// Parameterized interface forward declarations (C)

// Collection interface definitions

typedef interface __FIAsyncOperationCompletedHandler_1_boolean __FIAsyncOperationCompletedHandler_1_boolean;

#if !defined(____FIAsyncOperation_1_boolean_INTERFACE_DEFINED__)
#define ____FIAsyncOperation_1_boolean_INTERFACE_DEFINED__

typedef interface __FIAsyncOperation_1_boolean __FIAsyncOperation_1_boolean;

//  Declare the parameterized interface IID.
EXTERN_C const IID IID___FIAsyncOperation_1_boolean;

typedef struct __FIAsyncOperation_1_booleanVtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__FIAsyncOperation_1_boolean* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__FIAsyncOperation_1_boolean* This);
    ULONG (STDMETHODCALLTYPE* Release)(__FIAsyncOperation_1_boolean* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__FIAsyncOperation_1_boolean* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__FIAsyncOperation_1_boolean* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__FIAsyncOperation_1_boolean* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* put_Completed)(__FIAsyncOperation_1_boolean* This,
        __FIAsyncOperationCompletedHandler_1_boolean* handler);
    HRESULT (STDMETHODCALLTYPE* get_Completed)(__FIAsyncOperation_1_boolean* This,
        __FIAsyncOperationCompletedHandler_1_boolean** result);
    HRESULT (STDMETHODCALLTYPE* GetResults)(__FIAsyncOperation_1_boolean* This,
        boolean* result);

    END_INTERFACE
} __FIAsyncOperation_1_booleanVtbl;

interface __FIAsyncOperation_1_boolean
{
    CONST_VTBL struct __FIAsyncOperation_1_booleanVtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __FIAsyncOperation_1_boolean_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __FIAsyncOperation_1_boolean_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __FIAsyncOperation_1_boolean_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __FIAsyncOperation_1_boolean_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __FIAsyncOperation_1_boolean_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __FIAsyncOperation_1_boolean_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __FIAsyncOperation_1_boolean_put_Completed(This, handler) \
    ((This)->lpVtbl->put_Completed(This, handler))

#define __FIAsyncOperation_1_boolean_get_Completed(This, result) \
    ((This)->lpVtbl->get_Completed(This, result))

#define __FIAsyncOperation_1_boolean_GetResults(This, result) \
    ((This)->lpVtbl->GetResults(This, result))

#endif /* COBJMACROS */

#endif // ____FIAsyncOperation_1_boolean_INTERFACE_DEFINED__

#if !defined(____FIAsyncOperationCompletedHandler_1_boolean_INTERFACE_DEFINED__)
#define ____FIAsyncOperationCompletedHandler_1_boolean_INTERFACE_DEFINED__

typedef interface __FIAsyncOperationCompletedHandler_1_boolean __FIAsyncOperationCompletedHandler_1_boolean;

//  Declare the parameterized interface IID.
EXTERN_C const IID IID___FIAsyncOperationCompletedHandler_1_boolean;

typedef struct __FIAsyncOperationCompletedHandler_1_booleanVtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__FIAsyncOperationCompletedHandler_1_boolean* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__FIAsyncOperationCompletedHandler_1_boolean* This);
    ULONG (STDMETHODCALLTYPE* Release)(__FIAsyncOperationCompletedHandler_1_boolean* This);
    HRESULT (STDMETHODCALLTYPE* Invoke)(__FIAsyncOperationCompletedHandler_1_boolean* This,
        __FIAsyncOperation_1_boolean* asyncInfo,
        AsyncStatus asyncStatus);

    END_INTERFACE
} __FIAsyncOperationCompletedHandler_1_booleanVtbl;

interface __FIAsyncOperationCompletedHandler_1_boolean
{
    CONST_VTBL struct __FIAsyncOperationCompletedHandler_1_booleanVtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __FIAsyncOperationCompletedHandler_1_boolean_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __FIAsyncOperationCompletedHandler_1_boolean_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __FIAsyncOperationCompletedHandler_1_boolean_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __FIAsyncOperationCompletedHandler_1_boolean_Invoke(This, asyncInfo, asyncStatus) \
    ((This)->lpVtbl->Invoke(This, asyncInfo, asyncStatus))

#endif /* COBJMACROS */

#endif // ____FIAsyncOperationCompletedHandler_1_boolean_INTERFACE_DEFINED__

typedef interface __FIAsyncOperationCompletedHandler_1_Windows__CUI__CXaml__CControls__CMaps__CMapModel3D __FIAsyncOperationCompletedHandler_1_Windows__CUI__CXaml__CControls__CMaps__CMapModel3D;

#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x50000
#if !defined(____FIAsyncOperation_1_Windows__CUI__CXaml__CControls__CMaps__CMapModel3D_INTERFACE_DEFINED__)
#define ____FIAsyncOperation_1_Windows__CUI__CXaml__CControls__CMaps__CMapModel3D_INTERFACE_DEFINED__

typedef interface __FIAsyncOperation_1_Windows__CUI__CXaml__CControls__CMaps__CMapModel3D __FIAsyncOperation_1_Windows__CUI__CXaml__CControls__CMaps__CMapModel3D;

//  Declare the parameterized interface IID.
EXTERN_C const IID IID___FIAsyncOperation_1_Windows__CUI__CXaml__CControls__CMaps__CMapModel3D;

typedef struct __FIAsyncOperation_1_Windows__CUI__CXaml__CControls__CMaps__CMapModel3DVtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__FIAsyncOperation_1_Windows__CUI__CXaml__CControls__CMaps__CMapModel3D* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__FIAsyncOperation_1_Windows__CUI__CXaml__CControls__CMaps__CMapModel3D* This);
    ULONG (STDMETHODCALLTYPE* Release)(__FIAsyncOperation_1_Windows__CUI__CXaml__CControls__CMaps__CMapModel3D* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__FIAsyncOperation_1_Windows__CUI__CXaml__CControls__CMaps__CMapModel3D* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__FIAsyncOperation_1_Windows__CUI__CXaml__CControls__CMaps__CMapModel3D* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__FIAsyncOperation_1_Windows__CUI__CXaml__CControls__CMaps__CMapModel3D* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* put_Completed)(__FIAsyncOperation_1_Windows__CUI__CXaml__CControls__CMaps__CMapModel3D* This,
        __FIAsyncOperationCompletedHandler_1_Windows__CUI__CXaml__CControls__CMaps__CMapModel3D* handler);
    HRESULT (STDMETHODCALLTYPE* get_Completed)(__FIAsyncOperation_1_Windows__CUI__CXaml__CControls__CMaps__CMapModel3D* This,
        __FIAsyncOperationCompletedHandler_1_Windows__CUI__CXaml__CControls__CMaps__CMapModel3D** result);
    HRESULT (STDMETHODCALLTYPE* GetResults)(__FIAsyncOperation_1_Windows__CUI__CXaml__CControls__CMaps__CMapModel3D* This,
        __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapModel3D** result);

    END_INTERFACE
} __FIAsyncOperation_1_Windows__CUI__CXaml__CControls__CMaps__CMapModel3DVtbl;

interface __FIAsyncOperation_1_Windows__CUI__CXaml__CControls__CMaps__CMapModel3D
{
    CONST_VTBL struct __FIAsyncOperation_1_Windows__CUI__CXaml__CControls__CMaps__CMapModel3DVtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __FIAsyncOperation_1_Windows__CUI__CXaml__CControls__CMaps__CMapModel3D_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __FIAsyncOperation_1_Windows__CUI__CXaml__CControls__CMaps__CMapModel3D_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __FIAsyncOperation_1_Windows__CUI__CXaml__CControls__CMaps__CMapModel3D_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __FIAsyncOperation_1_Windows__CUI__CXaml__CControls__CMaps__CMapModel3D_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __FIAsyncOperation_1_Windows__CUI__CXaml__CControls__CMaps__CMapModel3D_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __FIAsyncOperation_1_Windows__CUI__CXaml__CControls__CMaps__CMapModel3D_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __FIAsyncOperation_1_Windows__CUI__CXaml__CControls__CMaps__CMapModel3D_put_Completed(This, handler) \
    ((This)->lpVtbl->put_Completed(This, handler))

#define __FIAsyncOperation_1_Windows__CUI__CXaml__CControls__CMaps__CMapModel3D_get_Completed(This, result) \
    ((This)->lpVtbl->get_Completed(This, result))

#define __FIAsyncOperation_1_Windows__CUI__CXaml__CControls__CMaps__CMapModel3D_GetResults(This, result) \
    ((This)->lpVtbl->GetResults(This, result))

#endif /* COBJMACROS */

#endif // ____FIAsyncOperation_1_Windows__CUI__CXaml__CControls__CMaps__CMapModel3D_INTERFACE_DEFINED__
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x50000

#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x50000
#if !defined(____FIAsyncOperationCompletedHandler_1_Windows__CUI__CXaml__CControls__CMaps__CMapModel3D_INTERFACE_DEFINED__)
#define ____FIAsyncOperationCompletedHandler_1_Windows__CUI__CXaml__CControls__CMaps__CMapModel3D_INTERFACE_DEFINED__

typedef interface __FIAsyncOperationCompletedHandler_1_Windows__CUI__CXaml__CControls__CMaps__CMapModel3D __FIAsyncOperationCompletedHandler_1_Windows__CUI__CXaml__CControls__CMaps__CMapModel3D;

//  Declare the parameterized interface IID.
EXTERN_C const IID IID___FIAsyncOperationCompletedHandler_1_Windows__CUI__CXaml__CControls__CMaps__CMapModel3D;

typedef struct __FIAsyncOperationCompletedHandler_1_Windows__CUI__CXaml__CControls__CMaps__CMapModel3DVtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__FIAsyncOperationCompletedHandler_1_Windows__CUI__CXaml__CControls__CMaps__CMapModel3D* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__FIAsyncOperationCompletedHandler_1_Windows__CUI__CXaml__CControls__CMaps__CMapModel3D* This);
    ULONG (STDMETHODCALLTYPE* Release)(__FIAsyncOperationCompletedHandler_1_Windows__CUI__CXaml__CControls__CMaps__CMapModel3D* This);
    HRESULT (STDMETHODCALLTYPE* Invoke)(__FIAsyncOperationCompletedHandler_1_Windows__CUI__CXaml__CControls__CMaps__CMapModel3D* This,
        __FIAsyncOperation_1_Windows__CUI__CXaml__CControls__CMaps__CMapModel3D* asyncInfo,
        AsyncStatus asyncStatus);

    END_INTERFACE
} __FIAsyncOperationCompletedHandler_1_Windows__CUI__CXaml__CControls__CMaps__CMapModel3DVtbl;

interface __FIAsyncOperationCompletedHandler_1_Windows__CUI__CXaml__CControls__CMaps__CMapModel3D
{
    CONST_VTBL struct __FIAsyncOperationCompletedHandler_1_Windows__CUI__CXaml__CControls__CMaps__CMapModel3DVtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __FIAsyncOperationCompletedHandler_1_Windows__CUI__CXaml__CControls__CMaps__CMapModel3D_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __FIAsyncOperationCompletedHandler_1_Windows__CUI__CXaml__CControls__CMaps__CMapModel3D_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __FIAsyncOperationCompletedHandler_1_Windows__CUI__CXaml__CControls__CMaps__CMapModel3D_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __FIAsyncOperationCompletedHandler_1_Windows__CUI__CXaml__CControls__CMaps__CMapModel3D_Invoke(This, asyncInfo, asyncStatus) \
    ((This)->lpVtbl->Invoke(This, asyncInfo, asyncStatus))

#endif /* COBJMACROS */

#endif // ____FIAsyncOperationCompletedHandler_1_Windows__CUI__CXaml__CControls__CMaps__CMapModel3D_INTERFACE_DEFINED__
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x50000

typedef interface __FIAsyncOperationCompletedHandler_1_Windows__CUI__CXaml__CControls__CMaps__CStreetsidePanorama __FIAsyncOperationCompletedHandler_1_Windows__CUI__CXaml__CControls__CMaps__CStreetsidePanorama;

#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____FIAsyncOperation_1_Windows__CUI__CXaml__CControls__CMaps__CStreetsidePanorama_INTERFACE_DEFINED__)
#define ____FIAsyncOperation_1_Windows__CUI__CXaml__CControls__CMaps__CStreetsidePanorama_INTERFACE_DEFINED__

typedef interface __FIAsyncOperation_1_Windows__CUI__CXaml__CControls__CMaps__CStreetsidePanorama __FIAsyncOperation_1_Windows__CUI__CXaml__CControls__CMaps__CStreetsidePanorama;

//  Declare the parameterized interface IID.
EXTERN_C const IID IID___FIAsyncOperation_1_Windows__CUI__CXaml__CControls__CMaps__CStreetsidePanorama;

typedef struct __FIAsyncOperation_1_Windows__CUI__CXaml__CControls__CMaps__CStreetsidePanoramaVtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__FIAsyncOperation_1_Windows__CUI__CXaml__CControls__CMaps__CStreetsidePanorama* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__FIAsyncOperation_1_Windows__CUI__CXaml__CControls__CMaps__CStreetsidePanorama* This);
    ULONG (STDMETHODCALLTYPE* Release)(__FIAsyncOperation_1_Windows__CUI__CXaml__CControls__CMaps__CStreetsidePanorama* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__FIAsyncOperation_1_Windows__CUI__CXaml__CControls__CMaps__CStreetsidePanorama* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__FIAsyncOperation_1_Windows__CUI__CXaml__CControls__CMaps__CStreetsidePanorama* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__FIAsyncOperation_1_Windows__CUI__CXaml__CControls__CMaps__CStreetsidePanorama* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* put_Completed)(__FIAsyncOperation_1_Windows__CUI__CXaml__CControls__CMaps__CStreetsidePanorama* This,
        __FIAsyncOperationCompletedHandler_1_Windows__CUI__CXaml__CControls__CMaps__CStreetsidePanorama* handler);
    HRESULT (STDMETHODCALLTYPE* get_Completed)(__FIAsyncOperation_1_Windows__CUI__CXaml__CControls__CMaps__CStreetsidePanorama* This,
        __FIAsyncOperationCompletedHandler_1_Windows__CUI__CXaml__CControls__CMaps__CStreetsidePanorama** result);
    HRESULT (STDMETHODCALLTYPE* GetResults)(__FIAsyncOperation_1_Windows__CUI__CXaml__CControls__CMaps__CStreetsidePanorama* This,
        __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIStreetsidePanorama** result);

    END_INTERFACE
} __FIAsyncOperation_1_Windows__CUI__CXaml__CControls__CMaps__CStreetsidePanoramaVtbl;

interface __FIAsyncOperation_1_Windows__CUI__CXaml__CControls__CMaps__CStreetsidePanorama
{
    CONST_VTBL struct __FIAsyncOperation_1_Windows__CUI__CXaml__CControls__CMaps__CStreetsidePanoramaVtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __FIAsyncOperation_1_Windows__CUI__CXaml__CControls__CMaps__CStreetsidePanorama_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __FIAsyncOperation_1_Windows__CUI__CXaml__CControls__CMaps__CStreetsidePanorama_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __FIAsyncOperation_1_Windows__CUI__CXaml__CControls__CMaps__CStreetsidePanorama_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __FIAsyncOperation_1_Windows__CUI__CXaml__CControls__CMaps__CStreetsidePanorama_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __FIAsyncOperation_1_Windows__CUI__CXaml__CControls__CMaps__CStreetsidePanorama_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __FIAsyncOperation_1_Windows__CUI__CXaml__CControls__CMaps__CStreetsidePanorama_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __FIAsyncOperation_1_Windows__CUI__CXaml__CControls__CMaps__CStreetsidePanorama_put_Completed(This, handler) \
    ((This)->lpVtbl->put_Completed(This, handler))

#define __FIAsyncOperation_1_Windows__CUI__CXaml__CControls__CMaps__CStreetsidePanorama_get_Completed(This, result) \
    ((This)->lpVtbl->get_Completed(This, result))

#define __FIAsyncOperation_1_Windows__CUI__CXaml__CControls__CMaps__CStreetsidePanorama_GetResults(This, result) \
    ((This)->lpVtbl->GetResults(This, result))

#endif /* COBJMACROS */

#endif // ____FIAsyncOperation_1_Windows__CUI__CXaml__CControls__CMaps__CStreetsidePanorama_INTERFACE_DEFINED__
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____FIAsyncOperationCompletedHandler_1_Windows__CUI__CXaml__CControls__CMaps__CStreetsidePanorama_INTERFACE_DEFINED__)
#define ____FIAsyncOperationCompletedHandler_1_Windows__CUI__CXaml__CControls__CMaps__CStreetsidePanorama_INTERFACE_DEFINED__

typedef interface __FIAsyncOperationCompletedHandler_1_Windows__CUI__CXaml__CControls__CMaps__CStreetsidePanorama __FIAsyncOperationCompletedHandler_1_Windows__CUI__CXaml__CControls__CMaps__CStreetsidePanorama;

//  Declare the parameterized interface IID.
EXTERN_C const IID IID___FIAsyncOperationCompletedHandler_1_Windows__CUI__CXaml__CControls__CMaps__CStreetsidePanorama;

typedef struct __FIAsyncOperationCompletedHandler_1_Windows__CUI__CXaml__CControls__CMaps__CStreetsidePanoramaVtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__FIAsyncOperationCompletedHandler_1_Windows__CUI__CXaml__CControls__CMaps__CStreetsidePanorama* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__FIAsyncOperationCompletedHandler_1_Windows__CUI__CXaml__CControls__CMaps__CStreetsidePanorama* This);
    ULONG (STDMETHODCALLTYPE* Release)(__FIAsyncOperationCompletedHandler_1_Windows__CUI__CXaml__CControls__CMaps__CStreetsidePanorama* This);
    HRESULT (STDMETHODCALLTYPE* Invoke)(__FIAsyncOperationCompletedHandler_1_Windows__CUI__CXaml__CControls__CMaps__CStreetsidePanorama* This,
        __FIAsyncOperation_1_Windows__CUI__CXaml__CControls__CMaps__CStreetsidePanorama* asyncInfo,
        AsyncStatus asyncStatus);

    END_INTERFACE
} __FIAsyncOperationCompletedHandler_1_Windows__CUI__CXaml__CControls__CMaps__CStreetsidePanoramaVtbl;

interface __FIAsyncOperationCompletedHandler_1_Windows__CUI__CXaml__CControls__CMaps__CStreetsidePanorama
{
    CONST_VTBL struct __FIAsyncOperationCompletedHandler_1_Windows__CUI__CXaml__CControls__CMaps__CStreetsidePanoramaVtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __FIAsyncOperationCompletedHandler_1_Windows__CUI__CXaml__CControls__CMaps__CStreetsidePanorama_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __FIAsyncOperationCompletedHandler_1_Windows__CUI__CXaml__CControls__CMaps__CStreetsidePanorama_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __FIAsyncOperationCompletedHandler_1_Windows__CUI__CXaml__CControls__CMaps__CStreetsidePanorama_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __FIAsyncOperationCompletedHandler_1_Windows__CUI__CXaml__CControls__CMaps__CStreetsidePanorama_Invoke(This, asyncInfo, asyncStatus) \
    ((This)->lpVtbl->Invoke(This, asyncInfo, asyncStatus))

#endif /* COBJMACROS */

#endif // ____FIAsyncOperationCompletedHandler_1_Windows__CUI__CXaml__CControls__CMaps__CStreetsidePanorama_INTERFACE_DEFINED__
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

#ifndef ____x_ABI_CWindows_CDevices_CGeolocation_CIGeopath_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CGeolocation_CIGeopath_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CDevices_CGeolocation_CIGeopath __x_ABI_CWindows_CDevices_CGeolocation_CIGeopath;

#endif // ____x_ABI_CWindows_CDevices_CGeolocation_CIGeopath_FWD_DEFINED__

#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____FIIterator_1_Windows__CDevices__CGeolocation__CGeopath_INTERFACE_DEFINED__)
#define ____FIIterator_1_Windows__CDevices__CGeolocation__CGeopath_INTERFACE_DEFINED__

typedef interface __FIIterator_1_Windows__CDevices__CGeolocation__CGeopath __FIIterator_1_Windows__CDevices__CGeolocation__CGeopath;

//  Declare the parameterized interface IID.
EXTERN_C const IID IID___FIIterator_1_Windows__CDevices__CGeolocation__CGeopath;

typedef struct __FIIterator_1_Windows__CDevices__CGeolocation__CGeopathVtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__FIIterator_1_Windows__CDevices__CGeolocation__CGeopath* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__FIIterator_1_Windows__CDevices__CGeolocation__CGeopath* This);
    ULONG (STDMETHODCALLTYPE* Release)(__FIIterator_1_Windows__CDevices__CGeolocation__CGeopath* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__FIIterator_1_Windows__CDevices__CGeolocation__CGeopath* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__FIIterator_1_Windows__CDevices__CGeolocation__CGeopath* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__FIIterator_1_Windows__CDevices__CGeolocation__CGeopath* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* get_Current)(__FIIterator_1_Windows__CDevices__CGeolocation__CGeopath* This,
        __x_ABI_CWindows_CDevices_CGeolocation_CIGeopath** result);
    HRESULT (STDMETHODCALLTYPE* get_HasCurrent)(__FIIterator_1_Windows__CDevices__CGeolocation__CGeopath* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* MoveNext)(__FIIterator_1_Windows__CDevices__CGeolocation__CGeopath* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__FIIterator_1_Windows__CDevices__CGeolocation__CGeopath* This,
        UINT32 itemsLength,
        __x_ABI_CWindows_CDevices_CGeolocation_CIGeopath** items,
        UINT32* result);

    END_INTERFACE
} __FIIterator_1_Windows__CDevices__CGeolocation__CGeopathVtbl;

interface __FIIterator_1_Windows__CDevices__CGeolocation__CGeopath
{
    CONST_VTBL struct __FIIterator_1_Windows__CDevices__CGeolocation__CGeopathVtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __FIIterator_1_Windows__CDevices__CGeolocation__CGeopath_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __FIIterator_1_Windows__CDevices__CGeolocation__CGeopath_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __FIIterator_1_Windows__CDevices__CGeolocation__CGeopath_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __FIIterator_1_Windows__CDevices__CGeolocation__CGeopath_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __FIIterator_1_Windows__CDevices__CGeolocation__CGeopath_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __FIIterator_1_Windows__CDevices__CGeolocation__CGeopath_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __FIIterator_1_Windows__CDevices__CGeolocation__CGeopath_get_Current(This, result) \
    ((This)->lpVtbl->get_Current(This, result))

#define __FIIterator_1_Windows__CDevices__CGeolocation__CGeopath_get_HasCurrent(This, result) \
    ((This)->lpVtbl->get_HasCurrent(This, result))

#define __FIIterator_1_Windows__CDevices__CGeolocation__CGeopath_MoveNext(This, result) \
    ((This)->lpVtbl->MoveNext(This, result))

#define __FIIterator_1_Windows__CDevices__CGeolocation__CGeopath_GetMany(This, itemsLength, items, result) \
    ((This)->lpVtbl->GetMany(This, itemsLength, items, result))

#endif /* COBJMACROS */

#endif // ____FIIterator_1_Windows__CDevices__CGeolocation__CGeopath_INTERFACE_DEFINED__
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____FIIterable_1_Windows__CDevices__CGeolocation__CGeopath_INTERFACE_DEFINED__)
#define ____FIIterable_1_Windows__CDevices__CGeolocation__CGeopath_INTERFACE_DEFINED__

typedef interface __FIIterable_1_Windows__CDevices__CGeolocation__CGeopath __FIIterable_1_Windows__CDevices__CGeolocation__CGeopath;

//  Declare the parameterized interface IID.
EXTERN_C const IID IID___FIIterable_1_Windows__CDevices__CGeolocation__CGeopath;

typedef struct __FIIterable_1_Windows__CDevices__CGeolocation__CGeopathVtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__FIIterable_1_Windows__CDevices__CGeolocation__CGeopath* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__FIIterable_1_Windows__CDevices__CGeolocation__CGeopath* This);
    ULONG (STDMETHODCALLTYPE* Release)(__FIIterable_1_Windows__CDevices__CGeolocation__CGeopath* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__FIIterable_1_Windows__CDevices__CGeolocation__CGeopath* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__FIIterable_1_Windows__CDevices__CGeolocation__CGeopath* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__FIIterable_1_Windows__CDevices__CGeolocation__CGeopath* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* First)(__FIIterable_1_Windows__CDevices__CGeolocation__CGeopath* This,
        __FIIterator_1_Windows__CDevices__CGeolocation__CGeopath** result);

    END_INTERFACE
} __FIIterable_1_Windows__CDevices__CGeolocation__CGeopathVtbl;

interface __FIIterable_1_Windows__CDevices__CGeolocation__CGeopath
{
    CONST_VTBL struct __FIIterable_1_Windows__CDevices__CGeolocation__CGeopathVtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __FIIterable_1_Windows__CDevices__CGeolocation__CGeopath_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __FIIterable_1_Windows__CDevices__CGeolocation__CGeopath_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __FIIterable_1_Windows__CDevices__CGeolocation__CGeopath_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __FIIterable_1_Windows__CDevices__CGeolocation__CGeopath_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __FIIterable_1_Windows__CDevices__CGeolocation__CGeopath_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __FIIterable_1_Windows__CDevices__CGeolocation__CGeopath_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __FIIterable_1_Windows__CDevices__CGeolocation__CGeopath_First(This, result) \
    ((This)->lpVtbl->First(This, result))

#endif /* COBJMACROS */

#endif // ____FIIterable_1_Windows__CDevices__CGeolocation__CGeopath_INTERFACE_DEFINED__
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

#ifndef ____x_ABI_CWindows_CDevices_CGeolocation_CIGeopoint_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CGeolocation_CIGeopoint_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CDevices_CGeolocation_CIGeopoint __x_ABI_CWindows_CDevices_CGeolocation_CIGeopoint;

#endif // ____x_ABI_CWindows_CDevices_CGeolocation_CIGeopoint_FWD_DEFINED__

#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____FIIterator_1_Windows__CDevices__CGeolocation__CGeopoint_INTERFACE_DEFINED__)
#define ____FIIterator_1_Windows__CDevices__CGeolocation__CGeopoint_INTERFACE_DEFINED__

typedef interface __FIIterator_1_Windows__CDevices__CGeolocation__CGeopoint __FIIterator_1_Windows__CDevices__CGeolocation__CGeopoint;

//  Declare the parameterized interface IID.
EXTERN_C const IID IID___FIIterator_1_Windows__CDevices__CGeolocation__CGeopoint;

typedef struct __FIIterator_1_Windows__CDevices__CGeolocation__CGeopointVtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__FIIterator_1_Windows__CDevices__CGeolocation__CGeopoint* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__FIIterator_1_Windows__CDevices__CGeolocation__CGeopoint* This);
    ULONG (STDMETHODCALLTYPE* Release)(__FIIterator_1_Windows__CDevices__CGeolocation__CGeopoint* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__FIIterator_1_Windows__CDevices__CGeolocation__CGeopoint* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__FIIterator_1_Windows__CDevices__CGeolocation__CGeopoint* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__FIIterator_1_Windows__CDevices__CGeolocation__CGeopoint* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* get_Current)(__FIIterator_1_Windows__CDevices__CGeolocation__CGeopoint* This,
        __x_ABI_CWindows_CDevices_CGeolocation_CIGeopoint** result);
    HRESULT (STDMETHODCALLTYPE* get_HasCurrent)(__FIIterator_1_Windows__CDevices__CGeolocation__CGeopoint* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* MoveNext)(__FIIterator_1_Windows__CDevices__CGeolocation__CGeopoint* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__FIIterator_1_Windows__CDevices__CGeolocation__CGeopoint* This,
        UINT32 itemsLength,
        __x_ABI_CWindows_CDevices_CGeolocation_CIGeopoint** items,
        UINT32* result);

    END_INTERFACE
} __FIIterator_1_Windows__CDevices__CGeolocation__CGeopointVtbl;

interface __FIIterator_1_Windows__CDevices__CGeolocation__CGeopoint
{
    CONST_VTBL struct __FIIterator_1_Windows__CDevices__CGeolocation__CGeopointVtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __FIIterator_1_Windows__CDevices__CGeolocation__CGeopoint_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __FIIterator_1_Windows__CDevices__CGeolocation__CGeopoint_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __FIIterator_1_Windows__CDevices__CGeolocation__CGeopoint_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __FIIterator_1_Windows__CDevices__CGeolocation__CGeopoint_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __FIIterator_1_Windows__CDevices__CGeolocation__CGeopoint_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __FIIterator_1_Windows__CDevices__CGeolocation__CGeopoint_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __FIIterator_1_Windows__CDevices__CGeolocation__CGeopoint_get_Current(This, result) \
    ((This)->lpVtbl->get_Current(This, result))

#define __FIIterator_1_Windows__CDevices__CGeolocation__CGeopoint_get_HasCurrent(This, result) \
    ((This)->lpVtbl->get_HasCurrent(This, result))

#define __FIIterator_1_Windows__CDevices__CGeolocation__CGeopoint_MoveNext(This, result) \
    ((This)->lpVtbl->MoveNext(This, result))

#define __FIIterator_1_Windows__CDevices__CGeolocation__CGeopoint_GetMany(This, itemsLength, items, result) \
    ((This)->lpVtbl->GetMany(This, itemsLength, items, result))

#endif /* COBJMACROS */

#endif // ____FIIterator_1_Windows__CDevices__CGeolocation__CGeopoint_INTERFACE_DEFINED__
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____FIIterable_1_Windows__CDevices__CGeolocation__CGeopoint_INTERFACE_DEFINED__)
#define ____FIIterable_1_Windows__CDevices__CGeolocation__CGeopoint_INTERFACE_DEFINED__

typedef interface __FIIterable_1_Windows__CDevices__CGeolocation__CGeopoint __FIIterable_1_Windows__CDevices__CGeolocation__CGeopoint;

//  Declare the parameterized interface IID.
EXTERN_C const IID IID___FIIterable_1_Windows__CDevices__CGeolocation__CGeopoint;

typedef struct __FIIterable_1_Windows__CDevices__CGeolocation__CGeopointVtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__FIIterable_1_Windows__CDevices__CGeolocation__CGeopoint* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__FIIterable_1_Windows__CDevices__CGeolocation__CGeopoint* This);
    ULONG (STDMETHODCALLTYPE* Release)(__FIIterable_1_Windows__CDevices__CGeolocation__CGeopoint* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__FIIterable_1_Windows__CDevices__CGeolocation__CGeopoint* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__FIIterable_1_Windows__CDevices__CGeolocation__CGeopoint* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__FIIterable_1_Windows__CDevices__CGeolocation__CGeopoint* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* First)(__FIIterable_1_Windows__CDevices__CGeolocation__CGeopoint* This,
        __FIIterator_1_Windows__CDevices__CGeolocation__CGeopoint** result);

    END_INTERFACE
} __FIIterable_1_Windows__CDevices__CGeolocation__CGeopointVtbl;

interface __FIIterable_1_Windows__CDevices__CGeolocation__CGeopoint
{
    CONST_VTBL struct __FIIterable_1_Windows__CDevices__CGeolocation__CGeopointVtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __FIIterable_1_Windows__CDevices__CGeolocation__CGeopoint_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __FIIterable_1_Windows__CDevices__CGeolocation__CGeopoint_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __FIIterable_1_Windows__CDevices__CGeolocation__CGeopoint_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __FIIterable_1_Windows__CDevices__CGeolocation__CGeopoint_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __FIIterable_1_Windows__CDevices__CGeolocation__CGeopoint_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __FIIterable_1_Windows__CDevices__CGeolocation__CGeopoint_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __FIIterable_1_Windows__CDevices__CGeolocation__CGeopoint_First(This, result) \
    ((This)->lpVtbl->First(This, result))

#endif /* COBJMACROS */

#endif // ____FIIterable_1_Windows__CDevices__CGeolocation__CGeopoint_INTERFACE_DEFINED__
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

#if !defined(____FIKeyValuePair_2_HSTRING_IInspectable_INTERFACE_DEFINED__)
#define ____FIKeyValuePair_2_HSTRING_IInspectable_INTERFACE_DEFINED__

typedef interface __FIKeyValuePair_2_HSTRING_IInspectable __FIKeyValuePair_2_HSTRING_IInspectable;

//  Declare the parameterized interface IID.
EXTERN_C const IID IID___FIKeyValuePair_2_HSTRING_IInspectable;

typedef struct __FIKeyValuePair_2_HSTRING_IInspectableVtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__FIKeyValuePair_2_HSTRING_IInspectable* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__FIKeyValuePair_2_HSTRING_IInspectable* This);
    ULONG (STDMETHODCALLTYPE* Release)(__FIKeyValuePair_2_HSTRING_IInspectable* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__FIKeyValuePair_2_HSTRING_IInspectable* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__FIKeyValuePair_2_HSTRING_IInspectable* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__FIKeyValuePair_2_HSTRING_IInspectable* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* get_Key)(__FIKeyValuePair_2_HSTRING_IInspectable* This,
        HSTRING* result);
    HRESULT (STDMETHODCALLTYPE* get_Value)(__FIKeyValuePair_2_HSTRING_IInspectable* This,
        IInspectable** result);

    END_INTERFACE
} __FIKeyValuePair_2_HSTRING_IInspectableVtbl;

interface __FIKeyValuePair_2_HSTRING_IInspectable
{
    CONST_VTBL struct __FIKeyValuePair_2_HSTRING_IInspectableVtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __FIKeyValuePair_2_HSTRING_IInspectable_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __FIKeyValuePair_2_HSTRING_IInspectable_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __FIKeyValuePair_2_HSTRING_IInspectable_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __FIKeyValuePair_2_HSTRING_IInspectable_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __FIKeyValuePair_2_HSTRING_IInspectable_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __FIKeyValuePair_2_HSTRING_IInspectable_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __FIKeyValuePair_2_HSTRING_IInspectable_get_Key(This, result) \
    ((This)->lpVtbl->get_Key(This, result))

#define __FIKeyValuePair_2_HSTRING_IInspectable_get_Value(This, result) \
    ((This)->lpVtbl->get_Value(This, result))

#endif /* COBJMACROS */

#endif // ____FIKeyValuePair_2_HSTRING_IInspectable_INTERFACE_DEFINED__

#if !defined(____FIIterator_1___FIKeyValuePair_2_HSTRING_IInspectable_INTERFACE_DEFINED__)
#define ____FIIterator_1___FIKeyValuePair_2_HSTRING_IInspectable_INTERFACE_DEFINED__

typedef interface __FIIterator_1___FIKeyValuePair_2_HSTRING_IInspectable __FIIterator_1___FIKeyValuePair_2_HSTRING_IInspectable;

//  Declare the parameterized interface IID.
EXTERN_C const IID IID___FIIterator_1___FIKeyValuePair_2_HSTRING_IInspectable;

typedef struct __FIIterator_1___FIKeyValuePair_2_HSTRING_IInspectableVtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__FIIterator_1___FIKeyValuePair_2_HSTRING_IInspectable* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__FIIterator_1___FIKeyValuePair_2_HSTRING_IInspectable* This);
    ULONG (STDMETHODCALLTYPE* Release)(__FIIterator_1___FIKeyValuePair_2_HSTRING_IInspectable* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__FIIterator_1___FIKeyValuePair_2_HSTRING_IInspectable* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__FIIterator_1___FIKeyValuePair_2_HSTRING_IInspectable* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__FIIterator_1___FIKeyValuePair_2_HSTRING_IInspectable* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* get_Current)(__FIIterator_1___FIKeyValuePair_2_HSTRING_IInspectable* This,
        __FIKeyValuePair_2_HSTRING_IInspectable** result);
    HRESULT (STDMETHODCALLTYPE* get_HasCurrent)(__FIIterator_1___FIKeyValuePair_2_HSTRING_IInspectable* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* MoveNext)(__FIIterator_1___FIKeyValuePair_2_HSTRING_IInspectable* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__FIIterator_1___FIKeyValuePair_2_HSTRING_IInspectable* This,
        UINT32 itemsLength,
        __FIKeyValuePair_2_HSTRING_IInspectable** items,
        UINT32* result);

    END_INTERFACE
} __FIIterator_1___FIKeyValuePair_2_HSTRING_IInspectableVtbl;

interface __FIIterator_1___FIKeyValuePair_2_HSTRING_IInspectable
{
    CONST_VTBL struct __FIIterator_1___FIKeyValuePair_2_HSTRING_IInspectableVtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __FIIterator_1___FIKeyValuePair_2_HSTRING_IInspectable_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __FIIterator_1___FIKeyValuePair_2_HSTRING_IInspectable_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __FIIterator_1___FIKeyValuePair_2_HSTRING_IInspectable_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __FIIterator_1___FIKeyValuePair_2_HSTRING_IInspectable_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __FIIterator_1___FIKeyValuePair_2_HSTRING_IInspectable_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __FIIterator_1___FIKeyValuePair_2_HSTRING_IInspectable_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __FIIterator_1___FIKeyValuePair_2_HSTRING_IInspectable_get_Current(This, result) \
    ((This)->lpVtbl->get_Current(This, result))

#define __FIIterator_1___FIKeyValuePair_2_HSTRING_IInspectable_get_HasCurrent(This, result) \
    ((This)->lpVtbl->get_HasCurrent(This, result))

#define __FIIterator_1___FIKeyValuePair_2_HSTRING_IInspectable_MoveNext(This, result) \
    ((This)->lpVtbl->MoveNext(This, result))

#define __FIIterator_1___FIKeyValuePair_2_HSTRING_IInspectable_GetMany(This, itemsLength, items, result) \
    ((This)->lpVtbl->GetMany(This, itemsLength, items, result))

#endif /* COBJMACROS */

#endif // ____FIIterator_1___FIKeyValuePair_2_HSTRING_IInspectable_INTERFACE_DEFINED__

#if !defined(____FIIterable_1___FIKeyValuePair_2_HSTRING_IInspectable_INTERFACE_DEFINED__)
#define ____FIIterable_1___FIKeyValuePair_2_HSTRING_IInspectable_INTERFACE_DEFINED__

typedef interface __FIIterable_1___FIKeyValuePair_2_HSTRING_IInspectable __FIIterable_1___FIKeyValuePair_2_HSTRING_IInspectable;

//  Declare the parameterized interface IID.
EXTERN_C const IID IID___FIIterable_1___FIKeyValuePair_2_HSTRING_IInspectable;

typedef struct __FIIterable_1___FIKeyValuePair_2_HSTRING_IInspectableVtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__FIIterable_1___FIKeyValuePair_2_HSTRING_IInspectable* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__FIIterable_1___FIKeyValuePair_2_HSTRING_IInspectable* This);
    ULONG (STDMETHODCALLTYPE* Release)(__FIIterable_1___FIKeyValuePair_2_HSTRING_IInspectable* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__FIIterable_1___FIKeyValuePair_2_HSTRING_IInspectable* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__FIIterable_1___FIKeyValuePair_2_HSTRING_IInspectable* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__FIIterable_1___FIKeyValuePair_2_HSTRING_IInspectable* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* First)(__FIIterable_1___FIKeyValuePair_2_HSTRING_IInspectable* This,
        __FIIterator_1___FIKeyValuePair_2_HSTRING_IInspectable** result);

    END_INTERFACE
} __FIIterable_1___FIKeyValuePair_2_HSTRING_IInspectableVtbl;

interface __FIIterable_1___FIKeyValuePair_2_HSTRING_IInspectable
{
    CONST_VTBL struct __FIIterable_1___FIKeyValuePair_2_HSTRING_IInspectableVtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __FIIterable_1___FIKeyValuePair_2_HSTRING_IInspectable_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __FIIterable_1___FIKeyValuePair_2_HSTRING_IInspectable_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __FIIterable_1___FIKeyValuePair_2_HSTRING_IInspectable_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __FIIterable_1___FIKeyValuePair_2_HSTRING_IInspectable_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __FIIterable_1___FIKeyValuePair_2_HSTRING_IInspectable_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __FIIterable_1___FIKeyValuePair_2_HSTRING_IInspectable_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __FIIterable_1___FIKeyValuePair_2_HSTRING_IInspectable_First(This, result) \
    ((This)->lpVtbl->First(This, result))

#endif /* COBJMACROS */

#endif // ____FIIterable_1___FIKeyValuePair_2_HSTRING_IInspectable_INTERFACE_DEFINED__

#if !defined(____FIKeyValuePair_2_HSTRING_HSTRING_INTERFACE_DEFINED__)
#define ____FIKeyValuePair_2_HSTRING_HSTRING_INTERFACE_DEFINED__

typedef interface __FIKeyValuePair_2_HSTRING_HSTRING __FIKeyValuePair_2_HSTRING_HSTRING;

//  Declare the parameterized interface IID.
EXTERN_C const IID IID___FIKeyValuePair_2_HSTRING_HSTRING;

typedef struct __FIKeyValuePair_2_HSTRING_HSTRINGVtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__FIKeyValuePair_2_HSTRING_HSTRING* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__FIKeyValuePair_2_HSTRING_HSTRING* This);
    ULONG (STDMETHODCALLTYPE* Release)(__FIKeyValuePair_2_HSTRING_HSTRING* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__FIKeyValuePair_2_HSTRING_HSTRING* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__FIKeyValuePair_2_HSTRING_HSTRING* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__FIKeyValuePair_2_HSTRING_HSTRING* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* get_Key)(__FIKeyValuePair_2_HSTRING_HSTRING* This,
        HSTRING* result);
    HRESULT (STDMETHODCALLTYPE* get_Value)(__FIKeyValuePair_2_HSTRING_HSTRING* This,
        HSTRING* result);

    END_INTERFACE
} __FIKeyValuePair_2_HSTRING_HSTRINGVtbl;

interface __FIKeyValuePair_2_HSTRING_HSTRING
{
    CONST_VTBL struct __FIKeyValuePair_2_HSTRING_HSTRINGVtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __FIKeyValuePair_2_HSTRING_HSTRING_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __FIKeyValuePair_2_HSTRING_HSTRING_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __FIKeyValuePair_2_HSTRING_HSTRING_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __FIKeyValuePair_2_HSTRING_HSTRING_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __FIKeyValuePair_2_HSTRING_HSTRING_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __FIKeyValuePair_2_HSTRING_HSTRING_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __FIKeyValuePair_2_HSTRING_HSTRING_get_Key(This, result) \
    ((This)->lpVtbl->get_Key(This, result))

#define __FIKeyValuePair_2_HSTRING_HSTRING_get_Value(This, result) \
    ((This)->lpVtbl->get_Value(This, result))

#endif /* COBJMACROS */

#endif // ____FIKeyValuePair_2_HSTRING_HSTRING_INTERFACE_DEFINED__

#if !defined(____FIIterator_1___FIKeyValuePair_2_HSTRING_HSTRING_INTERFACE_DEFINED__)
#define ____FIIterator_1___FIKeyValuePair_2_HSTRING_HSTRING_INTERFACE_DEFINED__

typedef interface __FIIterator_1___FIKeyValuePair_2_HSTRING_HSTRING __FIIterator_1___FIKeyValuePair_2_HSTRING_HSTRING;

//  Declare the parameterized interface IID.
EXTERN_C const IID IID___FIIterator_1___FIKeyValuePair_2_HSTRING_HSTRING;

typedef struct __FIIterator_1___FIKeyValuePair_2_HSTRING_HSTRINGVtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__FIIterator_1___FIKeyValuePair_2_HSTRING_HSTRING* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__FIIterator_1___FIKeyValuePair_2_HSTRING_HSTRING* This);
    ULONG (STDMETHODCALLTYPE* Release)(__FIIterator_1___FIKeyValuePair_2_HSTRING_HSTRING* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__FIIterator_1___FIKeyValuePair_2_HSTRING_HSTRING* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__FIIterator_1___FIKeyValuePair_2_HSTRING_HSTRING* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__FIIterator_1___FIKeyValuePair_2_HSTRING_HSTRING* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* get_Current)(__FIIterator_1___FIKeyValuePair_2_HSTRING_HSTRING* This,
        __FIKeyValuePair_2_HSTRING_HSTRING** result);
    HRESULT (STDMETHODCALLTYPE* get_HasCurrent)(__FIIterator_1___FIKeyValuePair_2_HSTRING_HSTRING* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* MoveNext)(__FIIterator_1___FIKeyValuePair_2_HSTRING_HSTRING* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__FIIterator_1___FIKeyValuePair_2_HSTRING_HSTRING* This,
        UINT32 itemsLength,
        __FIKeyValuePair_2_HSTRING_HSTRING** items,
        UINT32* result);

    END_INTERFACE
} __FIIterator_1___FIKeyValuePair_2_HSTRING_HSTRINGVtbl;

interface __FIIterator_1___FIKeyValuePair_2_HSTRING_HSTRING
{
    CONST_VTBL struct __FIIterator_1___FIKeyValuePair_2_HSTRING_HSTRINGVtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __FIIterator_1___FIKeyValuePair_2_HSTRING_HSTRING_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __FIIterator_1___FIKeyValuePair_2_HSTRING_HSTRING_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __FIIterator_1___FIKeyValuePair_2_HSTRING_HSTRING_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __FIIterator_1___FIKeyValuePair_2_HSTRING_HSTRING_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __FIIterator_1___FIKeyValuePair_2_HSTRING_HSTRING_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __FIIterator_1___FIKeyValuePair_2_HSTRING_HSTRING_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __FIIterator_1___FIKeyValuePair_2_HSTRING_HSTRING_get_Current(This, result) \
    ((This)->lpVtbl->get_Current(This, result))

#define __FIIterator_1___FIKeyValuePair_2_HSTRING_HSTRING_get_HasCurrent(This, result) \
    ((This)->lpVtbl->get_HasCurrent(This, result))

#define __FIIterator_1___FIKeyValuePair_2_HSTRING_HSTRING_MoveNext(This, result) \
    ((This)->lpVtbl->MoveNext(This, result))

#define __FIIterator_1___FIKeyValuePair_2_HSTRING_HSTRING_GetMany(This, itemsLength, items, result) \
    ((This)->lpVtbl->GetMany(This, itemsLength, items, result))

#endif /* COBJMACROS */

#endif // ____FIIterator_1___FIKeyValuePair_2_HSTRING_HSTRING_INTERFACE_DEFINED__

#if !defined(____FIIterable_1___FIKeyValuePair_2_HSTRING_HSTRING_INTERFACE_DEFINED__)
#define ____FIIterable_1___FIKeyValuePair_2_HSTRING_HSTRING_INTERFACE_DEFINED__

typedef interface __FIIterable_1___FIKeyValuePair_2_HSTRING_HSTRING __FIIterable_1___FIKeyValuePair_2_HSTRING_HSTRING;

//  Declare the parameterized interface IID.
EXTERN_C const IID IID___FIIterable_1___FIKeyValuePair_2_HSTRING_HSTRING;

typedef struct __FIIterable_1___FIKeyValuePair_2_HSTRING_HSTRINGVtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__FIIterable_1___FIKeyValuePair_2_HSTRING_HSTRING* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__FIIterable_1___FIKeyValuePair_2_HSTRING_HSTRING* This);
    ULONG (STDMETHODCALLTYPE* Release)(__FIIterable_1___FIKeyValuePair_2_HSTRING_HSTRING* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__FIIterable_1___FIKeyValuePair_2_HSTRING_HSTRING* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__FIIterable_1___FIKeyValuePair_2_HSTRING_HSTRING* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__FIIterable_1___FIKeyValuePair_2_HSTRING_HSTRING* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* First)(__FIIterable_1___FIKeyValuePair_2_HSTRING_HSTRING* This,
        __FIIterator_1___FIKeyValuePair_2_HSTRING_HSTRING** result);

    END_INTERFACE
} __FIIterable_1___FIKeyValuePair_2_HSTRING_HSTRINGVtbl;

interface __FIIterable_1___FIKeyValuePair_2_HSTRING_HSTRING
{
    CONST_VTBL struct __FIIterable_1___FIKeyValuePair_2_HSTRING_HSTRINGVtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __FIIterable_1___FIKeyValuePair_2_HSTRING_HSTRING_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __FIIterable_1___FIKeyValuePair_2_HSTRING_HSTRING_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __FIIterable_1___FIKeyValuePair_2_HSTRING_HSTRING_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __FIIterable_1___FIKeyValuePair_2_HSTRING_HSTRING_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __FIIterable_1___FIKeyValuePair_2_HSTRING_HSTRING_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __FIIterable_1___FIKeyValuePair_2_HSTRING_HSTRING_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __FIIterable_1___FIKeyValuePair_2_HSTRING_HSTRING_First(This, result) \
    ((This)->lpVtbl->First(This, result))

#endif /* COBJMACROS */

#endif // ____FIIterable_1___FIKeyValuePair_2_HSTRING_HSTRING_INTERFACE_DEFINED__

#ifndef ____x_ABI_CWindows_CServices_CMaps_CLocalSearch_CILocalLocation_FWD_DEFINED__
#define ____x_ABI_CWindows_CServices_CMaps_CLocalSearch_CILocalLocation_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CServices_CMaps_CLocalSearch_CILocalLocation __x_ABI_CWindows_CServices_CMaps_CLocalSearch_CILocalLocation;

#endif // ____x_ABI_CWindows_CServices_CMaps_CLocalSearch_CILocalLocation_FWD_DEFINED__

#if WINDOWS_SERVICES_MAPS_LOCALSEARCHCONTRACT_VERSION >= 0x10000
#if !defined(____FIIterator_1_Windows__CServices__CMaps__CLocalSearch__CLocalLocation_INTERFACE_DEFINED__)
#define ____FIIterator_1_Windows__CServices__CMaps__CLocalSearch__CLocalLocation_INTERFACE_DEFINED__

typedef interface __FIIterator_1_Windows__CServices__CMaps__CLocalSearch__CLocalLocation __FIIterator_1_Windows__CServices__CMaps__CLocalSearch__CLocalLocation;

//  Declare the parameterized interface IID.
EXTERN_C const IID IID___FIIterator_1_Windows__CServices__CMaps__CLocalSearch__CLocalLocation;

typedef struct __FIIterator_1_Windows__CServices__CMaps__CLocalSearch__CLocalLocationVtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__FIIterator_1_Windows__CServices__CMaps__CLocalSearch__CLocalLocation* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__FIIterator_1_Windows__CServices__CMaps__CLocalSearch__CLocalLocation* This);
    ULONG (STDMETHODCALLTYPE* Release)(__FIIterator_1_Windows__CServices__CMaps__CLocalSearch__CLocalLocation* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__FIIterator_1_Windows__CServices__CMaps__CLocalSearch__CLocalLocation* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__FIIterator_1_Windows__CServices__CMaps__CLocalSearch__CLocalLocation* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__FIIterator_1_Windows__CServices__CMaps__CLocalSearch__CLocalLocation* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* get_Current)(__FIIterator_1_Windows__CServices__CMaps__CLocalSearch__CLocalLocation* This,
        __x_ABI_CWindows_CServices_CMaps_CLocalSearch_CILocalLocation** result);
    HRESULT (STDMETHODCALLTYPE* get_HasCurrent)(__FIIterator_1_Windows__CServices__CMaps__CLocalSearch__CLocalLocation* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* MoveNext)(__FIIterator_1_Windows__CServices__CMaps__CLocalSearch__CLocalLocation* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__FIIterator_1_Windows__CServices__CMaps__CLocalSearch__CLocalLocation* This,
        UINT32 itemsLength,
        __x_ABI_CWindows_CServices_CMaps_CLocalSearch_CILocalLocation** items,
        UINT32* result);

    END_INTERFACE
} __FIIterator_1_Windows__CServices__CMaps__CLocalSearch__CLocalLocationVtbl;

interface __FIIterator_1_Windows__CServices__CMaps__CLocalSearch__CLocalLocation
{
    CONST_VTBL struct __FIIterator_1_Windows__CServices__CMaps__CLocalSearch__CLocalLocationVtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __FIIterator_1_Windows__CServices__CMaps__CLocalSearch__CLocalLocation_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __FIIterator_1_Windows__CServices__CMaps__CLocalSearch__CLocalLocation_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __FIIterator_1_Windows__CServices__CMaps__CLocalSearch__CLocalLocation_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __FIIterator_1_Windows__CServices__CMaps__CLocalSearch__CLocalLocation_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __FIIterator_1_Windows__CServices__CMaps__CLocalSearch__CLocalLocation_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __FIIterator_1_Windows__CServices__CMaps__CLocalSearch__CLocalLocation_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __FIIterator_1_Windows__CServices__CMaps__CLocalSearch__CLocalLocation_get_Current(This, result) \
    ((This)->lpVtbl->get_Current(This, result))

#define __FIIterator_1_Windows__CServices__CMaps__CLocalSearch__CLocalLocation_get_HasCurrent(This, result) \
    ((This)->lpVtbl->get_HasCurrent(This, result))

#define __FIIterator_1_Windows__CServices__CMaps__CLocalSearch__CLocalLocation_MoveNext(This, result) \
    ((This)->lpVtbl->MoveNext(This, result))

#define __FIIterator_1_Windows__CServices__CMaps__CLocalSearch__CLocalLocation_GetMany(This, itemsLength, items, result) \
    ((This)->lpVtbl->GetMany(This, itemsLength, items, result))

#endif /* COBJMACROS */

#endif // ____FIIterator_1_Windows__CServices__CMaps__CLocalSearch__CLocalLocation_INTERFACE_DEFINED__
#endif // WINDOWS_SERVICES_MAPS_LOCALSEARCHCONTRACT_VERSION >= 0x10000

#if WINDOWS_SERVICES_MAPS_LOCALSEARCHCONTRACT_VERSION >= 0x10000
#if !defined(____FIIterable_1_Windows__CServices__CMaps__CLocalSearch__CLocalLocation_INTERFACE_DEFINED__)
#define ____FIIterable_1_Windows__CServices__CMaps__CLocalSearch__CLocalLocation_INTERFACE_DEFINED__

typedef interface __FIIterable_1_Windows__CServices__CMaps__CLocalSearch__CLocalLocation __FIIterable_1_Windows__CServices__CMaps__CLocalSearch__CLocalLocation;

//  Declare the parameterized interface IID.
EXTERN_C const IID IID___FIIterable_1_Windows__CServices__CMaps__CLocalSearch__CLocalLocation;

typedef struct __FIIterable_1_Windows__CServices__CMaps__CLocalSearch__CLocalLocationVtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__FIIterable_1_Windows__CServices__CMaps__CLocalSearch__CLocalLocation* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__FIIterable_1_Windows__CServices__CMaps__CLocalSearch__CLocalLocation* This);
    ULONG (STDMETHODCALLTYPE* Release)(__FIIterable_1_Windows__CServices__CMaps__CLocalSearch__CLocalLocation* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__FIIterable_1_Windows__CServices__CMaps__CLocalSearch__CLocalLocation* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__FIIterable_1_Windows__CServices__CMaps__CLocalSearch__CLocalLocation* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__FIIterable_1_Windows__CServices__CMaps__CLocalSearch__CLocalLocation* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* First)(__FIIterable_1_Windows__CServices__CMaps__CLocalSearch__CLocalLocation* This,
        __FIIterator_1_Windows__CServices__CMaps__CLocalSearch__CLocalLocation** result);

    END_INTERFACE
} __FIIterable_1_Windows__CServices__CMaps__CLocalSearch__CLocalLocationVtbl;

interface __FIIterable_1_Windows__CServices__CMaps__CLocalSearch__CLocalLocation
{
    CONST_VTBL struct __FIIterable_1_Windows__CServices__CMaps__CLocalSearch__CLocalLocationVtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __FIIterable_1_Windows__CServices__CMaps__CLocalSearch__CLocalLocation_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __FIIterable_1_Windows__CServices__CMaps__CLocalSearch__CLocalLocation_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __FIIterable_1_Windows__CServices__CMaps__CLocalSearch__CLocalLocation_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __FIIterable_1_Windows__CServices__CMaps__CLocalSearch__CLocalLocation_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __FIIterable_1_Windows__CServices__CMaps__CLocalSearch__CLocalLocation_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __FIIterable_1_Windows__CServices__CMaps__CLocalSearch__CLocalLocation_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __FIIterable_1_Windows__CServices__CMaps__CLocalSearch__CLocalLocation_First(This, result) \
    ((This)->lpVtbl->First(This, result))

#endif /* COBJMACROS */

#endif // ____FIIterable_1_Windows__CServices__CMaps__CLocalSearch__CLocalLocation_INTERFACE_DEFINED__
#endif // WINDOWS_SERVICES_MAPS_LOCALSEARCHCONTRACT_VERSION >= 0x10000

#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____FIIterator_1_Windows__CUI__CXaml__CControls__CMaps__CMapElement_INTERFACE_DEFINED__)
#define ____FIIterator_1_Windows__CUI__CXaml__CControls__CMaps__CMapElement_INTERFACE_DEFINED__

typedef interface __FIIterator_1_Windows__CUI__CXaml__CControls__CMaps__CMapElement __FIIterator_1_Windows__CUI__CXaml__CControls__CMaps__CMapElement;

//  Declare the parameterized interface IID.
EXTERN_C const IID IID___FIIterator_1_Windows__CUI__CXaml__CControls__CMaps__CMapElement;

typedef struct __FIIterator_1_Windows__CUI__CXaml__CControls__CMaps__CMapElementVtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__FIIterator_1_Windows__CUI__CXaml__CControls__CMaps__CMapElement* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__FIIterator_1_Windows__CUI__CXaml__CControls__CMaps__CMapElement* This);
    ULONG (STDMETHODCALLTYPE* Release)(__FIIterator_1_Windows__CUI__CXaml__CControls__CMaps__CMapElement* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__FIIterator_1_Windows__CUI__CXaml__CControls__CMaps__CMapElement* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__FIIterator_1_Windows__CUI__CXaml__CControls__CMaps__CMapElement* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__FIIterator_1_Windows__CUI__CXaml__CControls__CMaps__CMapElement* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* get_Current)(__FIIterator_1_Windows__CUI__CXaml__CControls__CMaps__CMapElement* This,
        __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement** result);
    HRESULT (STDMETHODCALLTYPE* get_HasCurrent)(__FIIterator_1_Windows__CUI__CXaml__CControls__CMaps__CMapElement* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* MoveNext)(__FIIterator_1_Windows__CUI__CXaml__CControls__CMaps__CMapElement* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__FIIterator_1_Windows__CUI__CXaml__CControls__CMaps__CMapElement* This,
        UINT32 itemsLength,
        __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement** items,
        UINT32* result);

    END_INTERFACE
} __FIIterator_1_Windows__CUI__CXaml__CControls__CMaps__CMapElementVtbl;

interface __FIIterator_1_Windows__CUI__CXaml__CControls__CMaps__CMapElement
{
    CONST_VTBL struct __FIIterator_1_Windows__CUI__CXaml__CControls__CMaps__CMapElementVtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __FIIterator_1_Windows__CUI__CXaml__CControls__CMaps__CMapElement_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __FIIterator_1_Windows__CUI__CXaml__CControls__CMaps__CMapElement_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __FIIterator_1_Windows__CUI__CXaml__CControls__CMaps__CMapElement_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __FIIterator_1_Windows__CUI__CXaml__CControls__CMaps__CMapElement_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __FIIterator_1_Windows__CUI__CXaml__CControls__CMaps__CMapElement_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __FIIterator_1_Windows__CUI__CXaml__CControls__CMaps__CMapElement_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __FIIterator_1_Windows__CUI__CXaml__CControls__CMaps__CMapElement_get_Current(This, result) \
    ((This)->lpVtbl->get_Current(This, result))

#define __FIIterator_1_Windows__CUI__CXaml__CControls__CMaps__CMapElement_get_HasCurrent(This, result) \
    ((This)->lpVtbl->get_HasCurrent(This, result))

#define __FIIterator_1_Windows__CUI__CXaml__CControls__CMaps__CMapElement_MoveNext(This, result) \
    ((This)->lpVtbl->MoveNext(This, result))

#define __FIIterator_1_Windows__CUI__CXaml__CControls__CMaps__CMapElement_GetMany(This, itemsLength, items, result) \
    ((This)->lpVtbl->GetMany(This, itemsLength, items, result))

#endif /* COBJMACROS */

#endif // ____FIIterator_1_Windows__CUI__CXaml__CControls__CMaps__CMapElement_INTERFACE_DEFINED__
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____FIIterable_1_Windows__CUI__CXaml__CControls__CMaps__CMapElement_INTERFACE_DEFINED__)
#define ____FIIterable_1_Windows__CUI__CXaml__CControls__CMaps__CMapElement_INTERFACE_DEFINED__

typedef interface __FIIterable_1_Windows__CUI__CXaml__CControls__CMaps__CMapElement __FIIterable_1_Windows__CUI__CXaml__CControls__CMaps__CMapElement;

//  Declare the parameterized interface IID.
EXTERN_C const IID IID___FIIterable_1_Windows__CUI__CXaml__CControls__CMaps__CMapElement;

typedef struct __FIIterable_1_Windows__CUI__CXaml__CControls__CMaps__CMapElementVtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__FIIterable_1_Windows__CUI__CXaml__CControls__CMaps__CMapElement* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__FIIterable_1_Windows__CUI__CXaml__CControls__CMaps__CMapElement* This);
    ULONG (STDMETHODCALLTYPE* Release)(__FIIterable_1_Windows__CUI__CXaml__CControls__CMaps__CMapElement* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__FIIterable_1_Windows__CUI__CXaml__CControls__CMaps__CMapElement* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__FIIterable_1_Windows__CUI__CXaml__CControls__CMaps__CMapElement* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__FIIterable_1_Windows__CUI__CXaml__CControls__CMaps__CMapElement* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* First)(__FIIterable_1_Windows__CUI__CXaml__CControls__CMaps__CMapElement* This,
        __FIIterator_1_Windows__CUI__CXaml__CControls__CMaps__CMapElement** result);

    END_INTERFACE
} __FIIterable_1_Windows__CUI__CXaml__CControls__CMaps__CMapElementVtbl;

interface __FIIterable_1_Windows__CUI__CXaml__CControls__CMaps__CMapElement
{
    CONST_VTBL struct __FIIterable_1_Windows__CUI__CXaml__CControls__CMaps__CMapElementVtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __FIIterable_1_Windows__CUI__CXaml__CControls__CMaps__CMapElement_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __FIIterable_1_Windows__CUI__CXaml__CControls__CMaps__CMapElement_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __FIIterable_1_Windows__CUI__CXaml__CControls__CMaps__CMapElement_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __FIIterable_1_Windows__CUI__CXaml__CControls__CMaps__CMapElement_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __FIIterable_1_Windows__CUI__CXaml__CControls__CMaps__CMapElement_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __FIIterable_1_Windows__CUI__CXaml__CControls__CMaps__CMapElement_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __FIIterable_1_Windows__CUI__CXaml__CControls__CMaps__CMapElement_First(This, result) \
    ((This)->lpVtbl->First(This, result))

#endif /* COBJMACROS */

#endif // ____FIIterable_1_Windows__CUI__CXaml__CControls__CMaps__CMapElement_INTERFACE_DEFINED__
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x50000
#if !defined(____FIIterator_1_Windows__CUI__CXaml__CControls__CMaps__CMapLayer_INTERFACE_DEFINED__)
#define ____FIIterator_1_Windows__CUI__CXaml__CControls__CMaps__CMapLayer_INTERFACE_DEFINED__

typedef interface __FIIterator_1_Windows__CUI__CXaml__CControls__CMaps__CMapLayer __FIIterator_1_Windows__CUI__CXaml__CControls__CMaps__CMapLayer;

//  Declare the parameterized interface IID.
EXTERN_C const IID IID___FIIterator_1_Windows__CUI__CXaml__CControls__CMaps__CMapLayer;

typedef struct __FIIterator_1_Windows__CUI__CXaml__CControls__CMaps__CMapLayerVtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__FIIterator_1_Windows__CUI__CXaml__CControls__CMaps__CMapLayer* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__FIIterator_1_Windows__CUI__CXaml__CControls__CMaps__CMapLayer* This);
    ULONG (STDMETHODCALLTYPE* Release)(__FIIterator_1_Windows__CUI__CXaml__CControls__CMaps__CMapLayer* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__FIIterator_1_Windows__CUI__CXaml__CControls__CMaps__CMapLayer* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__FIIterator_1_Windows__CUI__CXaml__CControls__CMaps__CMapLayer* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__FIIterator_1_Windows__CUI__CXaml__CControls__CMaps__CMapLayer* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* get_Current)(__FIIterator_1_Windows__CUI__CXaml__CControls__CMaps__CMapLayer* This,
        __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapLayer** result);
    HRESULT (STDMETHODCALLTYPE* get_HasCurrent)(__FIIterator_1_Windows__CUI__CXaml__CControls__CMaps__CMapLayer* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* MoveNext)(__FIIterator_1_Windows__CUI__CXaml__CControls__CMaps__CMapLayer* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__FIIterator_1_Windows__CUI__CXaml__CControls__CMaps__CMapLayer* This,
        UINT32 itemsLength,
        __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapLayer** items,
        UINT32* result);

    END_INTERFACE
} __FIIterator_1_Windows__CUI__CXaml__CControls__CMaps__CMapLayerVtbl;

interface __FIIterator_1_Windows__CUI__CXaml__CControls__CMaps__CMapLayer
{
    CONST_VTBL struct __FIIterator_1_Windows__CUI__CXaml__CControls__CMaps__CMapLayerVtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __FIIterator_1_Windows__CUI__CXaml__CControls__CMaps__CMapLayer_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __FIIterator_1_Windows__CUI__CXaml__CControls__CMaps__CMapLayer_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __FIIterator_1_Windows__CUI__CXaml__CControls__CMaps__CMapLayer_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __FIIterator_1_Windows__CUI__CXaml__CControls__CMaps__CMapLayer_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __FIIterator_1_Windows__CUI__CXaml__CControls__CMaps__CMapLayer_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __FIIterator_1_Windows__CUI__CXaml__CControls__CMaps__CMapLayer_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __FIIterator_1_Windows__CUI__CXaml__CControls__CMaps__CMapLayer_get_Current(This, result) \
    ((This)->lpVtbl->get_Current(This, result))

#define __FIIterator_1_Windows__CUI__CXaml__CControls__CMaps__CMapLayer_get_HasCurrent(This, result) \
    ((This)->lpVtbl->get_HasCurrent(This, result))

#define __FIIterator_1_Windows__CUI__CXaml__CControls__CMaps__CMapLayer_MoveNext(This, result) \
    ((This)->lpVtbl->MoveNext(This, result))

#define __FIIterator_1_Windows__CUI__CXaml__CControls__CMaps__CMapLayer_GetMany(This, itemsLength, items, result) \
    ((This)->lpVtbl->GetMany(This, itemsLength, items, result))

#endif /* COBJMACROS */

#endif // ____FIIterator_1_Windows__CUI__CXaml__CControls__CMaps__CMapLayer_INTERFACE_DEFINED__
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x50000

#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x50000
#if !defined(____FIIterable_1_Windows__CUI__CXaml__CControls__CMaps__CMapLayer_INTERFACE_DEFINED__)
#define ____FIIterable_1_Windows__CUI__CXaml__CControls__CMaps__CMapLayer_INTERFACE_DEFINED__

typedef interface __FIIterable_1_Windows__CUI__CXaml__CControls__CMaps__CMapLayer __FIIterable_1_Windows__CUI__CXaml__CControls__CMaps__CMapLayer;

//  Declare the parameterized interface IID.
EXTERN_C const IID IID___FIIterable_1_Windows__CUI__CXaml__CControls__CMaps__CMapLayer;

typedef struct __FIIterable_1_Windows__CUI__CXaml__CControls__CMaps__CMapLayerVtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__FIIterable_1_Windows__CUI__CXaml__CControls__CMaps__CMapLayer* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__FIIterable_1_Windows__CUI__CXaml__CControls__CMaps__CMapLayer* This);
    ULONG (STDMETHODCALLTYPE* Release)(__FIIterable_1_Windows__CUI__CXaml__CControls__CMaps__CMapLayer* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__FIIterable_1_Windows__CUI__CXaml__CControls__CMaps__CMapLayer* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__FIIterable_1_Windows__CUI__CXaml__CControls__CMaps__CMapLayer* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__FIIterable_1_Windows__CUI__CXaml__CControls__CMaps__CMapLayer* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* First)(__FIIterable_1_Windows__CUI__CXaml__CControls__CMaps__CMapLayer* This,
        __FIIterator_1_Windows__CUI__CXaml__CControls__CMaps__CMapLayer** result);

    END_INTERFACE
} __FIIterable_1_Windows__CUI__CXaml__CControls__CMaps__CMapLayerVtbl;

interface __FIIterable_1_Windows__CUI__CXaml__CControls__CMaps__CMapLayer
{
    CONST_VTBL struct __FIIterable_1_Windows__CUI__CXaml__CControls__CMaps__CMapLayerVtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __FIIterable_1_Windows__CUI__CXaml__CControls__CMaps__CMapLayer_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __FIIterable_1_Windows__CUI__CXaml__CControls__CMaps__CMapLayer_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __FIIterable_1_Windows__CUI__CXaml__CControls__CMaps__CMapLayer_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __FIIterable_1_Windows__CUI__CXaml__CControls__CMaps__CMapLayer_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __FIIterable_1_Windows__CUI__CXaml__CControls__CMaps__CMapLayer_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __FIIterable_1_Windows__CUI__CXaml__CControls__CMaps__CMapLayer_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __FIIterable_1_Windows__CUI__CXaml__CControls__CMaps__CMapLayer_First(This, result) \
    ((This)->lpVtbl->First(This, result))

#endif /* COBJMACROS */

#endif // ____FIIterable_1_Windows__CUI__CXaml__CControls__CMaps__CMapLayer_INTERFACE_DEFINED__
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x50000

#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____FIIterator_1_Windows__CUI__CXaml__CControls__CMaps__CMapRouteView_INTERFACE_DEFINED__)
#define ____FIIterator_1_Windows__CUI__CXaml__CControls__CMaps__CMapRouteView_INTERFACE_DEFINED__

typedef interface __FIIterator_1_Windows__CUI__CXaml__CControls__CMaps__CMapRouteView __FIIterator_1_Windows__CUI__CXaml__CControls__CMaps__CMapRouteView;

//  Declare the parameterized interface IID.
EXTERN_C const IID IID___FIIterator_1_Windows__CUI__CXaml__CControls__CMaps__CMapRouteView;

typedef struct __FIIterator_1_Windows__CUI__CXaml__CControls__CMaps__CMapRouteViewVtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__FIIterator_1_Windows__CUI__CXaml__CControls__CMaps__CMapRouteView* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__FIIterator_1_Windows__CUI__CXaml__CControls__CMaps__CMapRouteView* This);
    ULONG (STDMETHODCALLTYPE* Release)(__FIIterator_1_Windows__CUI__CXaml__CControls__CMaps__CMapRouteView* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__FIIterator_1_Windows__CUI__CXaml__CControls__CMaps__CMapRouteView* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__FIIterator_1_Windows__CUI__CXaml__CControls__CMaps__CMapRouteView* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__FIIterator_1_Windows__CUI__CXaml__CControls__CMaps__CMapRouteView* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* get_Current)(__FIIterator_1_Windows__CUI__CXaml__CControls__CMaps__CMapRouteView* This,
        __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapRouteView** result);
    HRESULT (STDMETHODCALLTYPE* get_HasCurrent)(__FIIterator_1_Windows__CUI__CXaml__CControls__CMaps__CMapRouteView* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* MoveNext)(__FIIterator_1_Windows__CUI__CXaml__CControls__CMaps__CMapRouteView* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__FIIterator_1_Windows__CUI__CXaml__CControls__CMaps__CMapRouteView* This,
        UINT32 itemsLength,
        __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapRouteView** items,
        UINT32* result);

    END_INTERFACE
} __FIIterator_1_Windows__CUI__CXaml__CControls__CMaps__CMapRouteViewVtbl;

interface __FIIterator_1_Windows__CUI__CXaml__CControls__CMaps__CMapRouteView
{
    CONST_VTBL struct __FIIterator_1_Windows__CUI__CXaml__CControls__CMaps__CMapRouteViewVtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __FIIterator_1_Windows__CUI__CXaml__CControls__CMaps__CMapRouteView_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __FIIterator_1_Windows__CUI__CXaml__CControls__CMaps__CMapRouteView_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __FIIterator_1_Windows__CUI__CXaml__CControls__CMaps__CMapRouteView_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __FIIterator_1_Windows__CUI__CXaml__CControls__CMaps__CMapRouteView_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __FIIterator_1_Windows__CUI__CXaml__CControls__CMaps__CMapRouteView_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __FIIterator_1_Windows__CUI__CXaml__CControls__CMaps__CMapRouteView_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __FIIterator_1_Windows__CUI__CXaml__CControls__CMaps__CMapRouteView_get_Current(This, result) \
    ((This)->lpVtbl->get_Current(This, result))

#define __FIIterator_1_Windows__CUI__CXaml__CControls__CMaps__CMapRouteView_get_HasCurrent(This, result) \
    ((This)->lpVtbl->get_HasCurrent(This, result))

#define __FIIterator_1_Windows__CUI__CXaml__CControls__CMaps__CMapRouteView_MoveNext(This, result) \
    ((This)->lpVtbl->MoveNext(This, result))

#define __FIIterator_1_Windows__CUI__CXaml__CControls__CMaps__CMapRouteView_GetMany(This, itemsLength, items, result) \
    ((This)->lpVtbl->GetMany(This, itemsLength, items, result))

#endif /* COBJMACROS */

#endif // ____FIIterator_1_Windows__CUI__CXaml__CControls__CMaps__CMapRouteView_INTERFACE_DEFINED__
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____FIIterable_1_Windows__CUI__CXaml__CControls__CMaps__CMapRouteView_INTERFACE_DEFINED__)
#define ____FIIterable_1_Windows__CUI__CXaml__CControls__CMaps__CMapRouteView_INTERFACE_DEFINED__

typedef interface __FIIterable_1_Windows__CUI__CXaml__CControls__CMaps__CMapRouteView __FIIterable_1_Windows__CUI__CXaml__CControls__CMaps__CMapRouteView;

//  Declare the parameterized interface IID.
EXTERN_C const IID IID___FIIterable_1_Windows__CUI__CXaml__CControls__CMaps__CMapRouteView;

typedef struct __FIIterable_1_Windows__CUI__CXaml__CControls__CMaps__CMapRouteViewVtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__FIIterable_1_Windows__CUI__CXaml__CControls__CMaps__CMapRouteView* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__FIIterable_1_Windows__CUI__CXaml__CControls__CMaps__CMapRouteView* This);
    ULONG (STDMETHODCALLTYPE* Release)(__FIIterable_1_Windows__CUI__CXaml__CControls__CMaps__CMapRouteView* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__FIIterable_1_Windows__CUI__CXaml__CControls__CMaps__CMapRouteView* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__FIIterable_1_Windows__CUI__CXaml__CControls__CMaps__CMapRouteView* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__FIIterable_1_Windows__CUI__CXaml__CControls__CMaps__CMapRouteView* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* First)(__FIIterable_1_Windows__CUI__CXaml__CControls__CMaps__CMapRouteView* This,
        __FIIterator_1_Windows__CUI__CXaml__CControls__CMaps__CMapRouteView** result);

    END_INTERFACE
} __FIIterable_1_Windows__CUI__CXaml__CControls__CMaps__CMapRouteViewVtbl;

interface __FIIterable_1_Windows__CUI__CXaml__CControls__CMaps__CMapRouteView
{
    CONST_VTBL struct __FIIterable_1_Windows__CUI__CXaml__CControls__CMaps__CMapRouteViewVtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __FIIterable_1_Windows__CUI__CXaml__CControls__CMaps__CMapRouteView_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __FIIterable_1_Windows__CUI__CXaml__CControls__CMaps__CMapRouteView_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __FIIterable_1_Windows__CUI__CXaml__CControls__CMaps__CMapRouteView_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __FIIterable_1_Windows__CUI__CXaml__CControls__CMaps__CMapRouteView_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __FIIterable_1_Windows__CUI__CXaml__CControls__CMaps__CMapRouteView_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __FIIterable_1_Windows__CUI__CXaml__CControls__CMaps__CMapRouteView_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __FIIterable_1_Windows__CUI__CXaml__CControls__CMaps__CMapRouteView_First(This, result) \
    ((This)->lpVtbl->First(This, result))

#endif /* COBJMACROS */

#endif // ____FIIterable_1_Windows__CUI__CXaml__CControls__CMaps__CMapRouteView_INTERFACE_DEFINED__
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x40000
#if !defined(____FIIterator_1_Windows__CUI__CXaml__CControls__CMaps__CMapStyleSheet_INTERFACE_DEFINED__)
#define ____FIIterator_1_Windows__CUI__CXaml__CControls__CMaps__CMapStyleSheet_INTERFACE_DEFINED__

typedef interface __FIIterator_1_Windows__CUI__CXaml__CControls__CMaps__CMapStyleSheet __FIIterator_1_Windows__CUI__CXaml__CControls__CMaps__CMapStyleSheet;

//  Declare the parameterized interface IID.
EXTERN_C const IID IID___FIIterator_1_Windows__CUI__CXaml__CControls__CMaps__CMapStyleSheet;

typedef struct __FIIterator_1_Windows__CUI__CXaml__CControls__CMaps__CMapStyleSheetVtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__FIIterator_1_Windows__CUI__CXaml__CControls__CMaps__CMapStyleSheet* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__FIIterator_1_Windows__CUI__CXaml__CControls__CMaps__CMapStyleSheet* This);
    ULONG (STDMETHODCALLTYPE* Release)(__FIIterator_1_Windows__CUI__CXaml__CControls__CMaps__CMapStyleSheet* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__FIIterator_1_Windows__CUI__CXaml__CControls__CMaps__CMapStyleSheet* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__FIIterator_1_Windows__CUI__CXaml__CControls__CMaps__CMapStyleSheet* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__FIIterator_1_Windows__CUI__CXaml__CControls__CMaps__CMapStyleSheet* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* get_Current)(__FIIterator_1_Windows__CUI__CXaml__CControls__CMaps__CMapStyleSheet* This,
        __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapStyleSheet** result);
    HRESULT (STDMETHODCALLTYPE* get_HasCurrent)(__FIIterator_1_Windows__CUI__CXaml__CControls__CMaps__CMapStyleSheet* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* MoveNext)(__FIIterator_1_Windows__CUI__CXaml__CControls__CMaps__CMapStyleSheet* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__FIIterator_1_Windows__CUI__CXaml__CControls__CMaps__CMapStyleSheet* This,
        UINT32 itemsLength,
        __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapStyleSheet** items,
        UINT32* result);

    END_INTERFACE
} __FIIterator_1_Windows__CUI__CXaml__CControls__CMaps__CMapStyleSheetVtbl;

interface __FIIterator_1_Windows__CUI__CXaml__CControls__CMaps__CMapStyleSheet
{
    CONST_VTBL struct __FIIterator_1_Windows__CUI__CXaml__CControls__CMaps__CMapStyleSheetVtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __FIIterator_1_Windows__CUI__CXaml__CControls__CMaps__CMapStyleSheet_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __FIIterator_1_Windows__CUI__CXaml__CControls__CMaps__CMapStyleSheet_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __FIIterator_1_Windows__CUI__CXaml__CControls__CMaps__CMapStyleSheet_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __FIIterator_1_Windows__CUI__CXaml__CControls__CMaps__CMapStyleSheet_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __FIIterator_1_Windows__CUI__CXaml__CControls__CMaps__CMapStyleSheet_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __FIIterator_1_Windows__CUI__CXaml__CControls__CMaps__CMapStyleSheet_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __FIIterator_1_Windows__CUI__CXaml__CControls__CMaps__CMapStyleSheet_get_Current(This, result) \
    ((This)->lpVtbl->get_Current(This, result))

#define __FIIterator_1_Windows__CUI__CXaml__CControls__CMaps__CMapStyleSheet_get_HasCurrent(This, result) \
    ((This)->lpVtbl->get_HasCurrent(This, result))

#define __FIIterator_1_Windows__CUI__CXaml__CControls__CMaps__CMapStyleSheet_MoveNext(This, result) \
    ((This)->lpVtbl->MoveNext(This, result))

#define __FIIterator_1_Windows__CUI__CXaml__CControls__CMaps__CMapStyleSheet_GetMany(This, itemsLength, items, result) \
    ((This)->lpVtbl->GetMany(This, itemsLength, items, result))

#endif /* COBJMACROS */

#endif // ____FIIterator_1_Windows__CUI__CXaml__CControls__CMaps__CMapStyleSheet_INTERFACE_DEFINED__
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x40000

#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x40000
#if !defined(____FIIterable_1_Windows__CUI__CXaml__CControls__CMaps__CMapStyleSheet_INTERFACE_DEFINED__)
#define ____FIIterable_1_Windows__CUI__CXaml__CControls__CMaps__CMapStyleSheet_INTERFACE_DEFINED__

typedef interface __FIIterable_1_Windows__CUI__CXaml__CControls__CMaps__CMapStyleSheet __FIIterable_1_Windows__CUI__CXaml__CControls__CMaps__CMapStyleSheet;

//  Declare the parameterized interface IID.
EXTERN_C const IID IID___FIIterable_1_Windows__CUI__CXaml__CControls__CMaps__CMapStyleSheet;

typedef struct __FIIterable_1_Windows__CUI__CXaml__CControls__CMaps__CMapStyleSheetVtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__FIIterable_1_Windows__CUI__CXaml__CControls__CMaps__CMapStyleSheet* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__FIIterable_1_Windows__CUI__CXaml__CControls__CMaps__CMapStyleSheet* This);
    ULONG (STDMETHODCALLTYPE* Release)(__FIIterable_1_Windows__CUI__CXaml__CControls__CMaps__CMapStyleSheet* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__FIIterable_1_Windows__CUI__CXaml__CControls__CMaps__CMapStyleSheet* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__FIIterable_1_Windows__CUI__CXaml__CControls__CMaps__CMapStyleSheet* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__FIIterable_1_Windows__CUI__CXaml__CControls__CMaps__CMapStyleSheet* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* First)(__FIIterable_1_Windows__CUI__CXaml__CControls__CMaps__CMapStyleSheet* This,
        __FIIterator_1_Windows__CUI__CXaml__CControls__CMaps__CMapStyleSheet** result);

    END_INTERFACE
} __FIIterable_1_Windows__CUI__CXaml__CControls__CMaps__CMapStyleSheetVtbl;

interface __FIIterable_1_Windows__CUI__CXaml__CControls__CMaps__CMapStyleSheet
{
    CONST_VTBL struct __FIIterable_1_Windows__CUI__CXaml__CControls__CMaps__CMapStyleSheetVtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __FIIterable_1_Windows__CUI__CXaml__CControls__CMaps__CMapStyleSheet_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __FIIterable_1_Windows__CUI__CXaml__CControls__CMaps__CMapStyleSheet_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __FIIterable_1_Windows__CUI__CXaml__CControls__CMaps__CMapStyleSheet_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __FIIterable_1_Windows__CUI__CXaml__CControls__CMaps__CMapStyleSheet_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __FIIterable_1_Windows__CUI__CXaml__CControls__CMaps__CMapStyleSheet_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __FIIterable_1_Windows__CUI__CXaml__CControls__CMaps__CMapStyleSheet_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __FIIterable_1_Windows__CUI__CXaml__CControls__CMaps__CMapStyleSheet_First(This, result) \
    ((This)->lpVtbl->First(This, result))

#endif /* COBJMACROS */

#endif // ____FIIterable_1_Windows__CUI__CXaml__CControls__CMaps__CMapStyleSheet_INTERFACE_DEFINED__
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x40000

#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____FIIterator_1_Windows__CUI__CXaml__CControls__CMaps__CMapTileSource_INTERFACE_DEFINED__)
#define ____FIIterator_1_Windows__CUI__CXaml__CControls__CMaps__CMapTileSource_INTERFACE_DEFINED__

typedef interface __FIIterator_1_Windows__CUI__CXaml__CControls__CMaps__CMapTileSource __FIIterator_1_Windows__CUI__CXaml__CControls__CMaps__CMapTileSource;

//  Declare the parameterized interface IID.
EXTERN_C const IID IID___FIIterator_1_Windows__CUI__CXaml__CControls__CMaps__CMapTileSource;

typedef struct __FIIterator_1_Windows__CUI__CXaml__CControls__CMaps__CMapTileSourceVtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__FIIterator_1_Windows__CUI__CXaml__CControls__CMaps__CMapTileSource* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__FIIterator_1_Windows__CUI__CXaml__CControls__CMaps__CMapTileSource* This);
    ULONG (STDMETHODCALLTYPE* Release)(__FIIterator_1_Windows__CUI__CXaml__CControls__CMaps__CMapTileSource* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__FIIterator_1_Windows__CUI__CXaml__CControls__CMaps__CMapTileSource* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__FIIterator_1_Windows__CUI__CXaml__CControls__CMaps__CMapTileSource* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__FIIterator_1_Windows__CUI__CXaml__CControls__CMaps__CMapTileSource* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* get_Current)(__FIIterator_1_Windows__CUI__CXaml__CControls__CMaps__CMapTileSource* This,
        __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSource** result);
    HRESULT (STDMETHODCALLTYPE* get_HasCurrent)(__FIIterator_1_Windows__CUI__CXaml__CControls__CMaps__CMapTileSource* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* MoveNext)(__FIIterator_1_Windows__CUI__CXaml__CControls__CMaps__CMapTileSource* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__FIIterator_1_Windows__CUI__CXaml__CControls__CMaps__CMapTileSource* This,
        UINT32 itemsLength,
        __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSource** items,
        UINT32* result);

    END_INTERFACE
} __FIIterator_1_Windows__CUI__CXaml__CControls__CMaps__CMapTileSourceVtbl;

interface __FIIterator_1_Windows__CUI__CXaml__CControls__CMaps__CMapTileSource
{
    CONST_VTBL struct __FIIterator_1_Windows__CUI__CXaml__CControls__CMaps__CMapTileSourceVtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __FIIterator_1_Windows__CUI__CXaml__CControls__CMaps__CMapTileSource_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __FIIterator_1_Windows__CUI__CXaml__CControls__CMaps__CMapTileSource_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __FIIterator_1_Windows__CUI__CXaml__CControls__CMaps__CMapTileSource_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __FIIterator_1_Windows__CUI__CXaml__CControls__CMaps__CMapTileSource_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __FIIterator_1_Windows__CUI__CXaml__CControls__CMaps__CMapTileSource_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __FIIterator_1_Windows__CUI__CXaml__CControls__CMaps__CMapTileSource_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __FIIterator_1_Windows__CUI__CXaml__CControls__CMaps__CMapTileSource_get_Current(This, result) \
    ((This)->lpVtbl->get_Current(This, result))

#define __FIIterator_1_Windows__CUI__CXaml__CControls__CMaps__CMapTileSource_get_HasCurrent(This, result) \
    ((This)->lpVtbl->get_HasCurrent(This, result))

#define __FIIterator_1_Windows__CUI__CXaml__CControls__CMaps__CMapTileSource_MoveNext(This, result) \
    ((This)->lpVtbl->MoveNext(This, result))

#define __FIIterator_1_Windows__CUI__CXaml__CControls__CMaps__CMapTileSource_GetMany(This, itemsLength, items, result) \
    ((This)->lpVtbl->GetMany(This, itemsLength, items, result))

#endif /* COBJMACROS */

#endif // ____FIIterator_1_Windows__CUI__CXaml__CControls__CMaps__CMapTileSource_INTERFACE_DEFINED__
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____FIIterable_1_Windows__CUI__CXaml__CControls__CMaps__CMapTileSource_INTERFACE_DEFINED__)
#define ____FIIterable_1_Windows__CUI__CXaml__CControls__CMaps__CMapTileSource_INTERFACE_DEFINED__

typedef interface __FIIterable_1_Windows__CUI__CXaml__CControls__CMaps__CMapTileSource __FIIterable_1_Windows__CUI__CXaml__CControls__CMaps__CMapTileSource;

//  Declare the parameterized interface IID.
EXTERN_C const IID IID___FIIterable_1_Windows__CUI__CXaml__CControls__CMaps__CMapTileSource;

typedef struct __FIIterable_1_Windows__CUI__CXaml__CControls__CMaps__CMapTileSourceVtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__FIIterable_1_Windows__CUI__CXaml__CControls__CMaps__CMapTileSource* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__FIIterable_1_Windows__CUI__CXaml__CControls__CMaps__CMapTileSource* This);
    ULONG (STDMETHODCALLTYPE* Release)(__FIIterable_1_Windows__CUI__CXaml__CControls__CMaps__CMapTileSource* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__FIIterable_1_Windows__CUI__CXaml__CControls__CMaps__CMapTileSource* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__FIIterable_1_Windows__CUI__CXaml__CControls__CMaps__CMapTileSource* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__FIIterable_1_Windows__CUI__CXaml__CControls__CMaps__CMapTileSource* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* First)(__FIIterable_1_Windows__CUI__CXaml__CControls__CMaps__CMapTileSource* This,
        __FIIterator_1_Windows__CUI__CXaml__CControls__CMaps__CMapTileSource** result);

    END_INTERFACE
} __FIIterable_1_Windows__CUI__CXaml__CControls__CMaps__CMapTileSourceVtbl;

interface __FIIterable_1_Windows__CUI__CXaml__CControls__CMaps__CMapTileSource
{
    CONST_VTBL struct __FIIterable_1_Windows__CUI__CXaml__CControls__CMaps__CMapTileSourceVtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __FIIterable_1_Windows__CUI__CXaml__CControls__CMaps__CMapTileSource_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __FIIterable_1_Windows__CUI__CXaml__CControls__CMaps__CMapTileSource_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __FIIterable_1_Windows__CUI__CXaml__CControls__CMaps__CMapTileSource_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __FIIterable_1_Windows__CUI__CXaml__CControls__CMaps__CMapTileSource_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __FIIterable_1_Windows__CUI__CXaml__CControls__CMaps__CMapTileSource_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __FIIterable_1_Windows__CUI__CXaml__CControls__CMaps__CMapTileSource_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __FIIterable_1_Windows__CUI__CXaml__CControls__CMaps__CMapTileSource_First(This, result) \
    ((This)->lpVtbl->First(This, result))

#endif /* COBJMACROS */

#endif // ____FIIterable_1_Windows__CUI__CXaml__CControls__CMaps__CMapTileSource_INTERFACE_DEFINED__
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

#ifndef ____x_ABI_CWindows_CUI_CXaml_CIDependencyObject_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CIDependencyObject_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CUI_CXaml_CIDependencyObject __x_ABI_CWindows_CUI_CXaml_CIDependencyObject;

#endif // ____x_ABI_CWindows_CUI_CXaml_CIDependencyObject_FWD_DEFINED__

#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____FIIterator_1_Windows__CUI__CXaml__CDependencyObject_INTERFACE_DEFINED__)
#define ____FIIterator_1_Windows__CUI__CXaml__CDependencyObject_INTERFACE_DEFINED__

typedef interface __FIIterator_1_Windows__CUI__CXaml__CDependencyObject __FIIterator_1_Windows__CUI__CXaml__CDependencyObject;

//  Declare the parameterized interface IID.
EXTERN_C const IID IID___FIIterator_1_Windows__CUI__CXaml__CDependencyObject;

typedef struct __FIIterator_1_Windows__CUI__CXaml__CDependencyObjectVtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__FIIterator_1_Windows__CUI__CXaml__CDependencyObject* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__FIIterator_1_Windows__CUI__CXaml__CDependencyObject* This);
    ULONG (STDMETHODCALLTYPE* Release)(__FIIterator_1_Windows__CUI__CXaml__CDependencyObject* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__FIIterator_1_Windows__CUI__CXaml__CDependencyObject* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__FIIterator_1_Windows__CUI__CXaml__CDependencyObject* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__FIIterator_1_Windows__CUI__CXaml__CDependencyObject* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* get_Current)(__FIIterator_1_Windows__CUI__CXaml__CDependencyObject* This,
        __x_ABI_CWindows_CUI_CXaml_CIDependencyObject** result);
    HRESULT (STDMETHODCALLTYPE* get_HasCurrent)(__FIIterator_1_Windows__CUI__CXaml__CDependencyObject* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* MoveNext)(__FIIterator_1_Windows__CUI__CXaml__CDependencyObject* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__FIIterator_1_Windows__CUI__CXaml__CDependencyObject* This,
        UINT32 itemsLength,
        __x_ABI_CWindows_CUI_CXaml_CIDependencyObject** items,
        UINT32* result);

    END_INTERFACE
} __FIIterator_1_Windows__CUI__CXaml__CDependencyObjectVtbl;

interface __FIIterator_1_Windows__CUI__CXaml__CDependencyObject
{
    CONST_VTBL struct __FIIterator_1_Windows__CUI__CXaml__CDependencyObjectVtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __FIIterator_1_Windows__CUI__CXaml__CDependencyObject_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __FIIterator_1_Windows__CUI__CXaml__CDependencyObject_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __FIIterator_1_Windows__CUI__CXaml__CDependencyObject_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __FIIterator_1_Windows__CUI__CXaml__CDependencyObject_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __FIIterator_1_Windows__CUI__CXaml__CDependencyObject_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __FIIterator_1_Windows__CUI__CXaml__CDependencyObject_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __FIIterator_1_Windows__CUI__CXaml__CDependencyObject_get_Current(This, result) \
    ((This)->lpVtbl->get_Current(This, result))

#define __FIIterator_1_Windows__CUI__CXaml__CDependencyObject_get_HasCurrent(This, result) \
    ((This)->lpVtbl->get_HasCurrent(This, result))

#define __FIIterator_1_Windows__CUI__CXaml__CDependencyObject_MoveNext(This, result) \
    ((This)->lpVtbl->MoveNext(This, result))

#define __FIIterator_1_Windows__CUI__CXaml__CDependencyObject_GetMany(This, itemsLength, items, result) \
    ((This)->lpVtbl->GetMany(This, itemsLength, items, result))

#endif /* COBJMACROS */

#endif // ____FIIterator_1_Windows__CUI__CXaml__CDependencyObject_INTERFACE_DEFINED__
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____FIIterable_1_Windows__CUI__CXaml__CDependencyObject_INTERFACE_DEFINED__)
#define ____FIIterable_1_Windows__CUI__CXaml__CDependencyObject_INTERFACE_DEFINED__

typedef interface __FIIterable_1_Windows__CUI__CXaml__CDependencyObject __FIIterable_1_Windows__CUI__CXaml__CDependencyObject;

//  Declare the parameterized interface IID.
EXTERN_C const IID IID___FIIterable_1_Windows__CUI__CXaml__CDependencyObject;

typedef struct __FIIterable_1_Windows__CUI__CXaml__CDependencyObjectVtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__FIIterable_1_Windows__CUI__CXaml__CDependencyObject* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__FIIterable_1_Windows__CUI__CXaml__CDependencyObject* This);
    ULONG (STDMETHODCALLTYPE* Release)(__FIIterable_1_Windows__CUI__CXaml__CDependencyObject* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__FIIterable_1_Windows__CUI__CXaml__CDependencyObject* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__FIIterable_1_Windows__CUI__CXaml__CDependencyObject* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__FIIterable_1_Windows__CUI__CXaml__CDependencyObject* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* First)(__FIIterable_1_Windows__CUI__CXaml__CDependencyObject* This,
        __FIIterator_1_Windows__CUI__CXaml__CDependencyObject** result);

    END_INTERFACE
} __FIIterable_1_Windows__CUI__CXaml__CDependencyObjectVtbl;

interface __FIIterable_1_Windows__CUI__CXaml__CDependencyObject
{
    CONST_VTBL struct __FIIterable_1_Windows__CUI__CXaml__CDependencyObjectVtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __FIIterable_1_Windows__CUI__CXaml__CDependencyObject_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __FIIterable_1_Windows__CUI__CXaml__CDependencyObject_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __FIIterable_1_Windows__CUI__CXaml__CDependencyObject_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __FIIterable_1_Windows__CUI__CXaml__CDependencyObject_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __FIIterable_1_Windows__CUI__CXaml__CDependencyObject_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __FIIterable_1_Windows__CUI__CXaml__CDependencyObject_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __FIIterable_1_Windows__CUI__CXaml__CDependencyObject_First(This, result) \
    ((This)->lpVtbl->First(This, result))

#endif /* COBJMACROS */

#endif // ____FIIterable_1_Windows__CUI__CXaml__CDependencyObject_INTERFACE_DEFINED__
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

typedef interface __FIMapView_2_HSTRING_IInspectable __FIMapView_2_HSTRING_IInspectable;

#if !defined(____FIMapView_2_HSTRING_IInspectable_INTERFACE_DEFINED__)
#define ____FIMapView_2_HSTRING_IInspectable_INTERFACE_DEFINED__

typedef interface __FIMapView_2_HSTRING_IInspectable __FIMapView_2_HSTRING_IInspectable;

//  Declare the parameterized interface IID.
EXTERN_C const IID IID___FIMapView_2_HSTRING_IInspectable;

typedef struct __FIMapView_2_HSTRING_IInspectableVtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__FIMapView_2_HSTRING_IInspectable* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__FIMapView_2_HSTRING_IInspectable* This);
    ULONG (STDMETHODCALLTYPE* Release)(__FIMapView_2_HSTRING_IInspectable* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__FIMapView_2_HSTRING_IInspectable* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__FIMapView_2_HSTRING_IInspectable* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__FIMapView_2_HSTRING_IInspectable* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* Lookup)(__FIMapView_2_HSTRING_IInspectable* This,
        HSTRING key,
        IInspectable** result);
    HRESULT (STDMETHODCALLTYPE* get_Size)(__FIMapView_2_HSTRING_IInspectable* This,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* HasKey)(__FIMapView_2_HSTRING_IInspectable* This,
        HSTRING key,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* Split)(__FIMapView_2_HSTRING_IInspectable* This,
        __FIMapView_2_HSTRING_IInspectable** first,
        __FIMapView_2_HSTRING_IInspectable** second);

    END_INTERFACE
} __FIMapView_2_HSTRING_IInspectableVtbl;

interface __FIMapView_2_HSTRING_IInspectable
{
    CONST_VTBL struct __FIMapView_2_HSTRING_IInspectableVtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __FIMapView_2_HSTRING_IInspectable_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __FIMapView_2_HSTRING_IInspectable_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __FIMapView_2_HSTRING_IInspectable_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __FIMapView_2_HSTRING_IInspectable_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __FIMapView_2_HSTRING_IInspectable_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __FIMapView_2_HSTRING_IInspectable_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __FIMapView_2_HSTRING_IInspectable_Lookup(This, key, result) \
    ((This)->lpVtbl->Lookup(This, key, result))

#define __FIMapView_2_HSTRING_IInspectable_get_Size(This, result) \
    ((This)->lpVtbl->get_Size(This, result))

#define __FIMapView_2_HSTRING_IInspectable_HasKey(This, key, result) \
    ((This)->lpVtbl->HasKey(This, key, result))

#define __FIMapView_2_HSTRING_IInspectable_Split(This, first, second) \
    ((This)->lpVtbl->Split(This, first, second))

#endif /* COBJMACROS */

#endif // ____FIMapView_2_HSTRING_IInspectable_INTERFACE_DEFINED__

typedef interface __FIMapView_2_HSTRING_HSTRING __FIMapView_2_HSTRING_HSTRING;

#if !defined(____FIMapView_2_HSTRING_HSTRING_INTERFACE_DEFINED__)
#define ____FIMapView_2_HSTRING_HSTRING_INTERFACE_DEFINED__

typedef interface __FIMapView_2_HSTRING_HSTRING __FIMapView_2_HSTRING_HSTRING;

//  Declare the parameterized interface IID.
EXTERN_C const IID IID___FIMapView_2_HSTRING_HSTRING;

typedef struct __FIMapView_2_HSTRING_HSTRINGVtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__FIMapView_2_HSTRING_HSTRING* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__FIMapView_2_HSTRING_HSTRING* This);
    ULONG (STDMETHODCALLTYPE* Release)(__FIMapView_2_HSTRING_HSTRING* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__FIMapView_2_HSTRING_HSTRING* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__FIMapView_2_HSTRING_HSTRING* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__FIMapView_2_HSTRING_HSTRING* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* Lookup)(__FIMapView_2_HSTRING_HSTRING* This,
        HSTRING key,
        HSTRING* result);
    HRESULT (STDMETHODCALLTYPE* get_Size)(__FIMapView_2_HSTRING_HSTRING* This,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* HasKey)(__FIMapView_2_HSTRING_HSTRING* This,
        HSTRING key,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* Split)(__FIMapView_2_HSTRING_HSTRING* This,
        __FIMapView_2_HSTRING_HSTRING** first,
        __FIMapView_2_HSTRING_HSTRING** second);

    END_INTERFACE
} __FIMapView_2_HSTRING_HSTRINGVtbl;

interface __FIMapView_2_HSTRING_HSTRING
{
    CONST_VTBL struct __FIMapView_2_HSTRING_HSTRINGVtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __FIMapView_2_HSTRING_HSTRING_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __FIMapView_2_HSTRING_HSTRING_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __FIMapView_2_HSTRING_HSTRING_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __FIMapView_2_HSTRING_HSTRING_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __FIMapView_2_HSTRING_HSTRING_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __FIMapView_2_HSTRING_HSTRING_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __FIMapView_2_HSTRING_HSTRING_Lookup(This, key, result) \
    ((This)->lpVtbl->Lookup(This, key, result))

#define __FIMapView_2_HSTRING_HSTRING_get_Size(This, result) \
    ((This)->lpVtbl->get_Size(This, result))

#define __FIMapView_2_HSTRING_HSTRING_HasKey(This, key, result) \
    ((This)->lpVtbl->HasKey(This, key, result))

#define __FIMapView_2_HSTRING_HSTRING_Split(This, first, second) \
    ((This)->lpVtbl->Split(This, first, second))

#endif /* COBJMACROS */

#endif // ____FIMapView_2_HSTRING_HSTRING_INTERFACE_DEFINED__

#if !defined(____FIMap_2_HSTRING_HSTRING_INTERFACE_DEFINED__)
#define ____FIMap_2_HSTRING_HSTRING_INTERFACE_DEFINED__

typedef interface __FIMap_2_HSTRING_HSTRING __FIMap_2_HSTRING_HSTRING;

//  Declare the parameterized interface IID.
EXTERN_C const IID IID___FIMap_2_HSTRING_HSTRING;

typedef struct __FIMap_2_HSTRING_HSTRINGVtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__FIMap_2_HSTRING_HSTRING* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__FIMap_2_HSTRING_HSTRING* This);
    ULONG (STDMETHODCALLTYPE* Release)(__FIMap_2_HSTRING_HSTRING* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__FIMap_2_HSTRING_HSTRING* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__FIMap_2_HSTRING_HSTRING* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__FIMap_2_HSTRING_HSTRING* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* Lookup)(__FIMap_2_HSTRING_HSTRING* This,
        HSTRING key,
        HSTRING* result);
    HRESULT (STDMETHODCALLTYPE* get_Size)(__FIMap_2_HSTRING_HSTRING* This,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* HasKey)(__FIMap_2_HSTRING_HSTRING* This,
        HSTRING key,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetView)(__FIMap_2_HSTRING_HSTRING* This,
        __FIMapView_2_HSTRING_HSTRING** result);
    HRESULT (STDMETHODCALLTYPE* Insert)(__FIMap_2_HSTRING_HSTRING* This,
        HSTRING key,
        HSTRING value,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* Remove)(__FIMap_2_HSTRING_HSTRING* This,
        HSTRING key);
    HRESULT (STDMETHODCALLTYPE* Clear)(__FIMap_2_HSTRING_HSTRING* This);

    END_INTERFACE
} __FIMap_2_HSTRING_HSTRINGVtbl;

interface __FIMap_2_HSTRING_HSTRING
{
    CONST_VTBL struct __FIMap_2_HSTRING_HSTRINGVtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __FIMap_2_HSTRING_HSTRING_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __FIMap_2_HSTRING_HSTRING_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __FIMap_2_HSTRING_HSTRING_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __FIMap_2_HSTRING_HSTRING_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __FIMap_2_HSTRING_HSTRING_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __FIMap_2_HSTRING_HSTRING_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __FIMap_2_HSTRING_HSTRING_Lookup(This, key, result) \
    ((This)->lpVtbl->Lookup(This, key, result))

#define __FIMap_2_HSTRING_HSTRING_get_Size(This, result) \
    ((This)->lpVtbl->get_Size(This, result))

#define __FIMap_2_HSTRING_HSTRING_HasKey(This, key, result) \
    ((This)->lpVtbl->HasKey(This, key, result))

#define __FIMap_2_HSTRING_HSTRING_GetView(This, result) \
    ((This)->lpVtbl->GetView(This, result))

#define __FIMap_2_HSTRING_HSTRING_Insert(This, key, value, result) \
    ((This)->lpVtbl->Insert(This, key, value, result))

#define __FIMap_2_HSTRING_HSTRING_Remove(This, key) \
    ((This)->lpVtbl->Remove(This, key))

#define __FIMap_2_HSTRING_HSTRING_Clear(This) \
    ((This)->lpVtbl->Clear(This))

#endif /* COBJMACROS */

#endif // ____FIMap_2_HSTRING_HSTRING_INTERFACE_DEFINED__

#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____FIVectorView_1_Windows__CDevices__CGeolocation__CGeopath_INTERFACE_DEFINED__)
#define ____FIVectorView_1_Windows__CDevices__CGeolocation__CGeopath_INTERFACE_DEFINED__

typedef interface __FIVectorView_1_Windows__CDevices__CGeolocation__CGeopath __FIVectorView_1_Windows__CDevices__CGeolocation__CGeopath;

//  Declare the parameterized interface IID.
EXTERN_C const IID IID___FIVectorView_1_Windows__CDevices__CGeolocation__CGeopath;

typedef struct __FIVectorView_1_Windows__CDevices__CGeolocation__CGeopathVtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__FIVectorView_1_Windows__CDevices__CGeolocation__CGeopath* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__FIVectorView_1_Windows__CDevices__CGeolocation__CGeopath* This);
    ULONG (STDMETHODCALLTYPE* Release)(__FIVectorView_1_Windows__CDevices__CGeolocation__CGeopath* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__FIVectorView_1_Windows__CDevices__CGeolocation__CGeopath* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__FIVectorView_1_Windows__CDevices__CGeolocation__CGeopath* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__FIVectorView_1_Windows__CDevices__CGeolocation__CGeopath* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* GetAt)(__FIVectorView_1_Windows__CDevices__CGeolocation__CGeopath* This,
        UINT32 index,
        __x_ABI_CWindows_CDevices_CGeolocation_CIGeopath** result);
    HRESULT (STDMETHODCALLTYPE* get_Size)(__FIVectorView_1_Windows__CDevices__CGeolocation__CGeopath* This,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* IndexOf)(__FIVectorView_1_Windows__CDevices__CGeolocation__CGeopath* This,
        __x_ABI_CWindows_CDevices_CGeolocation_CIGeopath* value,
        UINT32* index,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__FIVectorView_1_Windows__CDevices__CGeolocation__CGeopath* This,
        UINT32 startIndex,
        UINT32 itemsLength,
        __x_ABI_CWindows_CDevices_CGeolocation_CIGeopath** items,
        UINT32* result);

    END_INTERFACE
} __FIVectorView_1_Windows__CDevices__CGeolocation__CGeopathVtbl;

interface __FIVectorView_1_Windows__CDevices__CGeolocation__CGeopath
{
    CONST_VTBL struct __FIVectorView_1_Windows__CDevices__CGeolocation__CGeopathVtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __FIVectorView_1_Windows__CDevices__CGeolocation__CGeopath_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __FIVectorView_1_Windows__CDevices__CGeolocation__CGeopath_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __FIVectorView_1_Windows__CDevices__CGeolocation__CGeopath_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __FIVectorView_1_Windows__CDevices__CGeolocation__CGeopath_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __FIVectorView_1_Windows__CDevices__CGeolocation__CGeopath_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __FIVectorView_1_Windows__CDevices__CGeolocation__CGeopath_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __FIVectorView_1_Windows__CDevices__CGeolocation__CGeopath_GetAt(This, index, result) \
    ((This)->lpVtbl->GetAt(This, index, result))

#define __FIVectorView_1_Windows__CDevices__CGeolocation__CGeopath_get_Size(This, result) \
    ((This)->lpVtbl->get_Size(This, result))

#define __FIVectorView_1_Windows__CDevices__CGeolocation__CGeopath_IndexOf(This, value, index, result) \
    ((This)->lpVtbl->IndexOf(This, value, index, result))

#define __FIVectorView_1_Windows__CDevices__CGeolocation__CGeopath_GetMany(This, startIndex, itemsLength, items, result) \
    ((This)->lpVtbl->GetMany(This, startIndex, itemsLength, items, result))

#endif /* COBJMACROS */

#endif // ____FIVectorView_1_Windows__CDevices__CGeolocation__CGeopath_INTERFACE_DEFINED__
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

#if WINDOWS_SERVICES_MAPS_LOCALSEARCHCONTRACT_VERSION >= 0x10000
#if !defined(____FIVectorView_1_Windows__CServices__CMaps__CLocalSearch__CLocalLocation_INTERFACE_DEFINED__)
#define ____FIVectorView_1_Windows__CServices__CMaps__CLocalSearch__CLocalLocation_INTERFACE_DEFINED__

typedef interface __FIVectorView_1_Windows__CServices__CMaps__CLocalSearch__CLocalLocation __FIVectorView_1_Windows__CServices__CMaps__CLocalSearch__CLocalLocation;

//  Declare the parameterized interface IID.
EXTERN_C const IID IID___FIVectorView_1_Windows__CServices__CMaps__CLocalSearch__CLocalLocation;

typedef struct __FIVectorView_1_Windows__CServices__CMaps__CLocalSearch__CLocalLocationVtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__FIVectorView_1_Windows__CServices__CMaps__CLocalSearch__CLocalLocation* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__FIVectorView_1_Windows__CServices__CMaps__CLocalSearch__CLocalLocation* This);
    ULONG (STDMETHODCALLTYPE* Release)(__FIVectorView_1_Windows__CServices__CMaps__CLocalSearch__CLocalLocation* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__FIVectorView_1_Windows__CServices__CMaps__CLocalSearch__CLocalLocation* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__FIVectorView_1_Windows__CServices__CMaps__CLocalSearch__CLocalLocation* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__FIVectorView_1_Windows__CServices__CMaps__CLocalSearch__CLocalLocation* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* GetAt)(__FIVectorView_1_Windows__CServices__CMaps__CLocalSearch__CLocalLocation* This,
        UINT32 index,
        __x_ABI_CWindows_CServices_CMaps_CLocalSearch_CILocalLocation** result);
    HRESULT (STDMETHODCALLTYPE* get_Size)(__FIVectorView_1_Windows__CServices__CMaps__CLocalSearch__CLocalLocation* This,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* IndexOf)(__FIVectorView_1_Windows__CServices__CMaps__CLocalSearch__CLocalLocation* This,
        __x_ABI_CWindows_CServices_CMaps_CLocalSearch_CILocalLocation* value,
        UINT32* index,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__FIVectorView_1_Windows__CServices__CMaps__CLocalSearch__CLocalLocation* This,
        UINT32 startIndex,
        UINT32 itemsLength,
        __x_ABI_CWindows_CServices_CMaps_CLocalSearch_CILocalLocation** items,
        UINT32* result);

    END_INTERFACE
} __FIVectorView_1_Windows__CServices__CMaps__CLocalSearch__CLocalLocationVtbl;

interface __FIVectorView_1_Windows__CServices__CMaps__CLocalSearch__CLocalLocation
{
    CONST_VTBL struct __FIVectorView_1_Windows__CServices__CMaps__CLocalSearch__CLocalLocationVtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __FIVectorView_1_Windows__CServices__CMaps__CLocalSearch__CLocalLocation_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __FIVectorView_1_Windows__CServices__CMaps__CLocalSearch__CLocalLocation_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __FIVectorView_1_Windows__CServices__CMaps__CLocalSearch__CLocalLocation_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __FIVectorView_1_Windows__CServices__CMaps__CLocalSearch__CLocalLocation_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __FIVectorView_1_Windows__CServices__CMaps__CLocalSearch__CLocalLocation_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __FIVectorView_1_Windows__CServices__CMaps__CLocalSearch__CLocalLocation_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __FIVectorView_1_Windows__CServices__CMaps__CLocalSearch__CLocalLocation_GetAt(This, index, result) \
    ((This)->lpVtbl->GetAt(This, index, result))

#define __FIVectorView_1_Windows__CServices__CMaps__CLocalSearch__CLocalLocation_get_Size(This, result) \
    ((This)->lpVtbl->get_Size(This, result))

#define __FIVectorView_1_Windows__CServices__CMaps__CLocalSearch__CLocalLocation_IndexOf(This, value, index, result) \
    ((This)->lpVtbl->IndexOf(This, value, index, result))

#define __FIVectorView_1_Windows__CServices__CMaps__CLocalSearch__CLocalLocation_GetMany(This, startIndex, itemsLength, items, result) \
    ((This)->lpVtbl->GetMany(This, startIndex, itemsLength, items, result))

#endif /* COBJMACROS */

#endif // ____FIVectorView_1_Windows__CServices__CMaps__CLocalSearch__CLocalLocation_INTERFACE_DEFINED__
#endif // WINDOWS_SERVICES_MAPS_LOCALSEARCHCONTRACT_VERSION >= 0x10000

#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____FIVectorView_1_Windows__CUI__CXaml__CControls__CMaps__CMapElement_INTERFACE_DEFINED__)
#define ____FIVectorView_1_Windows__CUI__CXaml__CControls__CMaps__CMapElement_INTERFACE_DEFINED__

typedef interface __FIVectorView_1_Windows__CUI__CXaml__CControls__CMaps__CMapElement __FIVectorView_1_Windows__CUI__CXaml__CControls__CMaps__CMapElement;

//  Declare the parameterized interface IID.
EXTERN_C const IID IID___FIVectorView_1_Windows__CUI__CXaml__CControls__CMaps__CMapElement;

typedef struct __FIVectorView_1_Windows__CUI__CXaml__CControls__CMaps__CMapElementVtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__FIVectorView_1_Windows__CUI__CXaml__CControls__CMaps__CMapElement* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__FIVectorView_1_Windows__CUI__CXaml__CControls__CMaps__CMapElement* This);
    ULONG (STDMETHODCALLTYPE* Release)(__FIVectorView_1_Windows__CUI__CXaml__CControls__CMaps__CMapElement* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__FIVectorView_1_Windows__CUI__CXaml__CControls__CMaps__CMapElement* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__FIVectorView_1_Windows__CUI__CXaml__CControls__CMaps__CMapElement* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__FIVectorView_1_Windows__CUI__CXaml__CControls__CMaps__CMapElement* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* GetAt)(__FIVectorView_1_Windows__CUI__CXaml__CControls__CMaps__CMapElement* This,
        UINT32 index,
        __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement** result);
    HRESULT (STDMETHODCALLTYPE* get_Size)(__FIVectorView_1_Windows__CUI__CXaml__CControls__CMaps__CMapElement* This,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* IndexOf)(__FIVectorView_1_Windows__CUI__CXaml__CControls__CMaps__CMapElement* This,
        __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement* value,
        UINT32* index,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__FIVectorView_1_Windows__CUI__CXaml__CControls__CMaps__CMapElement* This,
        UINT32 startIndex,
        UINT32 itemsLength,
        __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement** items,
        UINT32* result);

    END_INTERFACE
} __FIVectorView_1_Windows__CUI__CXaml__CControls__CMaps__CMapElementVtbl;

interface __FIVectorView_1_Windows__CUI__CXaml__CControls__CMaps__CMapElement
{
    CONST_VTBL struct __FIVectorView_1_Windows__CUI__CXaml__CControls__CMaps__CMapElementVtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __FIVectorView_1_Windows__CUI__CXaml__CControls__CMaps__CMapElement_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __FIVectorView_1_Windows__CUI__CXaml__CControls__CMaps__CMapElement_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __FIVectorView_1_Windows__CUI__CXaml__CControls__CMaps__CMapElement_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __FIVectorView_1_Windows__CUI__CXaml__CControls__CMaps__CMapElement_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __FIVectorView_1_Windows__CUI__CXaml__CControls__CMaps__CMapElement_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __FIVectorView_1_Windows__CUI__CXaml__CControls__CMaps__CMapElement_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __FIVectorView_1_Windows__CUI__CXaml__CControls__CMaps__CMapElement_GetAt(This, index, result) \
    ((This)->lpVtbl->GetAt(This, index, result))

#define __FIVectorView_1_Windows__CUI__CXaml__CControls__CMaps__CMapElement_get_Size(This, result) \
    ((This)->lpVtbl->get_Size(This, result))

#define __FIVectorView_1_Windows__CUI__CXaml__CControls__CMaps__CMapElement_IndexOf(This, value, index, result) \
    ((This)->lpVtbl->IndexOf(This, value, index, result))

#define __FIVectorView_1_Windows__CUI__CXaml__CControls__CMaps__CMapElement_GetMany(This, startIndex, itemsLength, items, result) \
    ((This)->lpVtbl->GetMany(This, startIndex, itemsLength, items, result))

#endif /* COBJMACROS */

#endif // ____FIVectorView_1_Windows__CUI__CXaml__CControls__CMaps__CMapElement_INTERFACE_DEFINED__
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x50000
#if !defined(____FIVectorView_1_Windows__CUI__CXaml__CControls__CMaps__CMapLayer_INTERFACE_DEFINED__)
#define ____FIVectorView_1_Windows__CUI__CXaml__CControls__CMaps__CMapLayer_INTERFACE_DEFINED__

typedef interface __FIVectorView_1_Windows__CUI__CXaml__CControls__CMaps__CMapLayer __FIVectorView_1_Windows__CUI__CXaml__CControls__CMaps__CMapLayer;

//  Declare the parameterized interface IID.
EXTERN_C const IID IID___FIVectorView_1_Windows__CUI__CXaml__CControls__CMaps__CMapLayer;

typedef struct __FIVectorView_1_Windows__CUI__CXaml__CControls__CMaps__CMapLayerVtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__FIVectorView_1_Windows__CUI__CXaml__CControls__CMaps__CMapLayer* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__FIVectorView_1_Windows__CUI__CXaml__CControls__CMaps__CMapLayer* This);
    ULONG (STDMETHODCALLTYPE* Release)(__FIVectorView_1_Windows__CUI__CXaml__CControls__CMaps__CMapLayer* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__FIVectorView_1_Windows__CUI__CXaml__CControls__CMaps__CMapLayer* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__FIVectorView_1_Windows__CUI__CXaml__CControls__CMaps__CMapLayer* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__FIVectorView_1_Windows__CUI__CXaml__CControls__CMaps__CMapLayer* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* GetAt)(__FIVectorView_1_Windows__CUI__CXaml__CControls__CMaps__CMapLayer* This,
        UINT32 index,
        __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapLayer** result);
    HRESULT (STDMETHODCALLTYPE* get_Size)(__FIVectorView_1_Windows__CUI__CXaml__CControls__CMaps__CMapLayer* This,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* IndexOf)(__FIVectorView_1_Windows__CUI__CXaml__CControls__CMaps__CMapLayer* This,
        __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapLayer* value,
        UINT32* index,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__FIVectorView_1_Windows__CUI__CXaml__CControls__CMaps__CMapLayer* This,
        UINT32 startIndex,
        UINT32 itemsLength,
        __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapLayer** items,
        UINT32* result);

    END_INTERFACE
} __FIVectorView_1_Windows__CUI__CXaml__CControls__CMaps__CMapLayerVtbl;

interface __FIVectorView_1_Windows__CUI__CXaml__CControls__CMaps__CMapLayer
{
    CONST_VTBL struct __FIVectorView_1_Windows__CUI__CXaml__CControls__CMaps__CMapLayerVtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __FIVectorView_1_Windows__CUI__CXaml__CControls__CMaps__CMapLayer_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __FIVectorView_1_Windows__CUI__CXaml__CControls__CMaps__CMapLayer_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __FIVectorView_1_Windows__CUI__CXaml__CControls__CMaps__CMapLayer_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __FIVectorView_1_Windows__CUI__CXaml__CControls__CMaps__CMapLayer_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __FIVectorView_1_Windows__CUI__CXaml__CControls__CMaps__CMapLayer_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __FIVectorView_1_Windows__CUI__CXaml__CControls__CMaps__CMapLayer_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __FIVectorView_1_Windows__CUI__CXaml__CControls__CMaps__CMapLayer_GetAt(This, index, result) \
    ((This)->lpVtbl->GetAt(This, index, result))

#define __FIVectorView_1_Windows__CUI__CXaml__CControls__CMaps__CMapLayer_get_Size(This, result) \
    ((This)->lpVtbl->get_Size(This, result))

#define __FIVectorView_1_Windows__CUI__CXaml__CControls__CMaps__CMapLayer_IndexOf(This, value, index, result) \
    ((This)->lpVtbl->IndexOf(This, value, index, result))

#define __FIVectorView_1_Windows__CUI__CXaml__CControls__CMaps__CMapLayer_GetMany(This, startIndex, itemsLength, items, result) \
    ((This)->lpVtbl->GetMany(This, startIndex, itemsLength, items, result))

#endif /* COBJMACROS */

#endif // ____FIVectorView_1_Windows__CUI__CXaml__CControls__CMaps__CMapLayer_INTERFACE_DEFINED__
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x50000

#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____FIVectorView_1_Windows__CUI__CXaml__CControls__CMaps__CMapRouteView_INTERFACE_DEFINED__)
#define ____FIVectorView_1_Windows__CUI__CXaml__CControls__CMaps__CMapRouteView_INTERFACE_DEFINED__

typedef interface __FIVectorView_1_Windows__CUI__CXaml__CControls__CMaps__CMapRouteView __FIVectorView_1_Windows__CUI__CXaml__CControls__CMaps__CMapRouteView;

//  Declare the parameterized interface IID.
EXTERN_C const IID IID___FIVectorView_1_Windows__CUI__CXaml__CControls__CMaps__CMapRouteView;

typedef struct __FIVectorView_1_Windows__CUI__CXaml__CControls__CMaps__CMapRouteViewVtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__FIVectorView_1_Windows__CUI__CXaml__CControls__CMaps__CMapRouteView* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__FIVectorView_1_Windows__CUI__CXaml__CControls__CMaps__CMapRouteView* This);
    ULONG (STDMETHODCALLTYPE* Release)(__FIVectorView_1_Windows__CUI__CXaml__CControls__CMaps__CMapRouteView* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__FIVectorView_1_Windows__CUI__CXaml__CControls__CMaps__CMapRouteView* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__FIVectorView_1_Windows__CUI__CXaml__CControls__CMaps__CMapRouteView* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__FIVectorView_1_Windows__CUI__CXaml__CControls__CMaps__CMapRouteView* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* GetAt)(__FIVectorView_1_Windows__CUI__CXaml__CControls__CMaps__CMapRouteView* This,
        UINT32 index,
        __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapRouteView** result);
    HRESULT (STDMETHODCALLTYPE* get_Size)(__FIVectorView_1_Windows__CUI__CXaml__CControls__CMaps__CMapRouteView* This,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* IndexOf)(__FIVectorView_1_Windows__CUI__CXaml__CControls__CMaps__CMapRouteView* This,
        __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapRouteView* value,
        UINT32* index,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__FIVectorView_1_Windows__CUI__CXaml__CControls__CMaps__CMapRouteView* This,
        UINT32 startIndex,
        UINT32 itemsLength,
        __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapRouteView** items,
        UINT32* result);

    END_INTERFACE
} __FIVectorView_1_Windows__CUI__CXaml__CControls__CMaps__CMapRouteViewVtbl;

interface __FIVectorView_1_Windows__CUI__CXaml__CControls__CMaps__CMapRouteView
{
    CONST_VTBL struct __FIVectorView_1_Windows__CUI__CXaml__CControls__CMaps__CMapRouteViewVtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __FIVectorView_1_Windows__CUI__CXaml__CControls__CMaps__CMapRouteView_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __FIVectorView_1_Windows__CUI__CXaml__CControls__CMaps__CMapRouteView_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __FIVectorView_1_Windows__CUI__CXaml__CControls__CMaps__CMapRouteView_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __FIVectorView_1_Windows__CUI__CXaml__CControls__CMaps__CMapRouteView_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __FIVectorView_1_Windows__CUI__CXaml__CControls__CMaps__CMapRouteView_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __FIVectorView_1_Windows__CUI__CXaml__CControls__CMaps__CMapRouteView_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __FIVectorView_1_Windows__CUI__CXaml__CControls__CMaps__CMapRouteView_GetAt(This, index, result) \
    ((This)->lpVtbl->GetAt(This, index, result))

#define __FIVectorView_1_Windows__CUI__CXaml__CControls__CMaps__CMapRouteView_get_Size(This, result) \
    ((This)->lpVtbl->get_Size(This, result))

#define __FIVectorView_1_Windows__CUI__CXaml__CControls__CMaps__CMapRouteView_IndexOf(This, value, index, result) \
    ((This)->lpVtbl->IndexOf(This, value, index, result))

#define __FIVectorView_1_Windows__CUI__CXaml__CControls__CMaps__CMapRouteView_GetMany(This, startIndex, itemsLength, items, result) \
    ((This)->lpVtbl->GetMany(This, startIndex, itemsLength, items, result))

#endif /* COBJMACROS */

#endif // ____FIVectorView_1_Windows__CUI__CXaml__CControls__CMaps__CMapRouteView_INTERFACE_DEFINED__
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____FIVectorView_1_Windows__CUI__CXaml__CControls__CMaps__CMapTileSource_INTERFACE_DEFINED__)
#define ____FIVectorView_1_Windows__CUI__CXaml__CControls__CMaps__CMapTileSource_INTERFACE_DEFINED__

typedef interface __FIVectorView_1_Windows__CUI__CXaml__CControls__CMaps__CMapTileSource __FIVectorView_1_Windows__CUI__CXaml__CControls__CMaps__CMapTileSource;

//  Declare the parameterized interface IID.
EXTERN_C const IID IID___FIVectorView_1_Windows__CUI__CXaml__CControls__CMaps__CMapTileSource;

typedef struct __FIVectorView_1_Windows__CUI__CXaml__CControls__CMaps__CMapTileSourceVtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__FIVectorView_1_Windows__CUI__CXaml__CControls__CMaps__CMapTileSource* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__FIVectorView_1_Windows__CUI__CXaml__CControls__CMaps__CMapTileSource* This);
    ULONG (STDMETHODCALLTYPE* Release)(__FIVectorView_1_Windows__CUI__CXaml__CControls__CMaps__CMapTileSource* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__FIVectorView_1_Windows__CUI__CXaml__CControls__CMaps__CMapTileSource* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__FIVectorView_1_Windows__CUI__CXaml__CControls__CMaps__CMapTileSource* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__FIVectorView_1_Windows__CUI__CXaml__CControls__CMaps__CMapTileSource* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* GetAt)(__FIVectorView_1_Windows__CUI__CXaml__CControls__CMaps__CMapTileSource* This,
        UINT32 index,
        __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSource** result);
    HRESULT (STDMETHODCALLTYPE* get_Size)(__FIVectorView_1_Windows__CUI__CXaml__CControls__CMaps__CMapTileSource* This,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* IndexOf)(__FIVectorView_1_Windows__CUI__CXaml__CControls__CMaps__CMapTileSource* This,
        __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSource* value,
        UINT32* index,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__FIVectorView_1_Windows__CUI__CXaml__CControls__CMaps__CMapTileSource* This,
        UINT32 startIndex,
        UINT32 itemsLength,
        __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSource** items,
        UINT32* result);

    END_INTERFACE
} __FIVectorView_1_Windows__CUI__CXaml__CControls__CMaps__CMapTileSourceVtbl;

interface __FIVectorView_1_Windows__CUI__CXaml__CControls__CMaps__CMapTileSource
{
    CONST_VTBL struct __FIVectorView_1_Windows__CUI__CXaml__CControls__CMaps__CMapTileSourceVtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __FIVectorView_1_Windows__CUI__CXaml__CControls__CMaps__CMapTileSource_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __FIVectorView_1_Windows__CUI__CXaml__CControls__CMaps__CMapTileSource_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __FIVectorView_1_Windows__CUI__CXaml__CControls__CMaps__CMapTileSource_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __FIVectorView_1_Windows__CUI__CXaml__CControls__CMaps__CMapTileSource_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __FIVectorView_1_Windows__CUI__CXaml__CControls__CMaps__CMapTileSource_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __FIVectorView_1_Windows__CUI__CXaml__CControls__CMaps__CMapTileSource_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __FIVectorView_1_Windows__CUI__CXaml__CControls__CMaps__CMapTileSource_GetAt(This, index, result) \
    ((This)->lpVtbl->GetAt(This, index, result))

#define __FIVectorView_1_Windows__CUI__CXaml__CControls__CMaps__CMapTileSource_get_Size(This, result) \
    ((This)->lpVtbl->get_Size(This, result))

#define __FIVectorView_1_Windows__CUI__CXaml__CControls__CMaps__CMapTileSource_IndexOf(This, value, index, result) \
    ((This)->lpVtbl->IndexOf(This, value, index, result))

#define __FIVectorView_1_Windows__CUI__CXaml__CControls__CMaps__CMapTileSource_GetMany(This, startIndex, itemsLength, items, result) \
    ((This)->lpVtbl->GetMany(This, startIndex, itemsLength, items, result))

#endif /* COBJMACROS */

#endif // ____FIVectorView_1_Windows__CUI__CXaml__CControls__CMaps__CMapTileSource_INTERFACE_DEFINED__
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____FIVectorView_1_Windows__CUI__CXaml__CDependencyObject_INTERFACE_DEFINED__)
#define ____FIVectorView_1_Windows__CUI__CXaml__CDependencyObject_INTERFACE_DEFINED__

typedef interface __FIVectorView_1_Windows__CUI__CXaml__CDependencyObject __FIVectorView_1_Windows__CUI__CXaml__CDependencyObject;

//  Declare the parameterized interface IID.
EXTERN_C const IID IID___FIVectorView_1_Windows__CUI__CXaml__CDependencyObject;

typedef struct __FIVectorView_1_Windows__CUI__CXaml__CDependencyObjectVtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__FIVectorView_1_Windows__CUI__CXaml__CDependencyObject* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__FIVectorView_1_Windows__CUI__CXaml__CDependencyObject* This);
    ULONG (STDMETHODCALLTYPE* Release)(__FIVectorView_1_Windows__CUI__CXaml__CDependencyObject* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__FIVectorView_1_Windows__CUI__CXaml__CDependencyObject* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__FIVectorView_1_Windows__CUI__CXaml__CDependencyObject* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__FIVectorView_1_Windows__CUI__CXaml__CDependencyObject* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* GetAt)(__FIVectorView_1_Windows__CUI__CXaml__CDependencyObject* This,
        UINT32 index,
        __x_ABI_CWindows_CUI_CXaml_CIDependencyObject** result);
    HRESULT (STDMETHODCALLTYPE* get_Size)(__FIVectorView_1_Windows__CUI__CXaml__CDependencyObject* This,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* IndexOf)(__FIVectorView_1_Windows__CUI__CXaml__CDependencyObject* This,
        __x_ABI_CWindows_CUI_CXaml_CIDependencyObject* value,
        UINT32* index,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__FIVectorView_1_Windows__CUI__CXaml__CDependencyObject* This,
        UINT32 startIndex,
        UINT32 itemsLength,
        __x_ABI_CWindows_CUI_CXaml_CIDependencyObject** items,
        UINT32* result);

    END_INTERFACE
} __FIVectorView_1_Windows__CUI__CXaml__CDependencyObjectVtbl;

interface __FIVectorView_1_Windows__CUI__CXaml__CDependencyObject
{
    CONST_VTBL struct __FIVectorView_1_Windows__CUI__CXaml__CDependencyObjectVtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __FIVectorView_1_Windows__CUI__CXaml__CDependencyObject_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __FIVectorView_1_Windows__CUI__CXaml__CDependencyObject_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __FIVectorView_1_Windows__CUI__CXaml__CDependencyObject_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __FIVectorView_1_Windows__CUI__CXaml__CDependencyObject_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __FIVectorView_1_Windows__CUI__CXaml__CDependencyObject_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __FIVectorView_1_Windows__CUI__CXaml__CDependencyObject_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __FIVectorView_1_Windows__CUI__CXaml__CDependencyObject_GetAt(This, index, result) \
    ((This)->lpVtbl->GetAt(This, index, result))

#define __FIVectorView_1_Windows__CUI__CXaml__CDependencyObject_get_Size(This, result) \
    ((This)->lpVtbl->get_Size(This, result))

#define __FIVectorView_1_Windows__CUI__CXaml__CDependencyObject_IndexOf(This, value, index, result) \
    ((This)->lpVtbl->IndexOf(This, value, index, result))

#define __FIVectorView_1_Windows__CUI__CXaml__CDependencyObject_GetMany(This, startIndex, itemsLength, items, result) \
    ((This)->lpVtbl->GetMany(This, startIndex, itemsLength, items, result))

#endif /* COBJMACROS */

#endif // ____FIVectorView_1_Windows__CUI__CXaml__CDependencyObject_INTERFACE_DEFINED__
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____FIVector_1_Windows__CDevices__CGeolocation__CGeopath_INTERFACE_DEFINED__)
#define ____FIVector_1_Windows__CDevices__CGeolocation__CGeopath_INTERFACE_DEFINED__

typedef interface __FIVector_1_Windows__CDevices__CGeolocation__CGeopath __FIVector_1_Windows__CDevices__CGeolocation__CGeopath;

//  Declare the parameterized interface IID.
EXTERN_C const IID IID___FIVector_1_Windows__CDevices__CGeolocation__CGeopath;

typedef struct __FIVector_1_Windows__CDevices__CGeolocation__CGeopathVtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__FIVector_1_Windows__CDevices__CGeolocation__CGeopath* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__FIVector_1_Windows__CDevices__CGeolocation__CGeopath* This);
    ULONG (STDMETHODCALLTYPE* Release)(__FIVector_1_Windows__CDevices__CGeolocation__CGeopath* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__FIVector_1_Windows__CDevices__CGeolocation__CGeopath* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__FIVector_1_Windows__CDevices__CGeolocation__CGeopath* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__FIVector_1_Windows__CDevices__CGeolocation__CGeopath* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* GetAt)(__FIVector_1_Windows__CDevices__CGeolocation__CGeopath* This,
        UINT32 index,
        __x_ABI_CWindows_CDevices_CGeolocation_CIGeopath** result);
    HRESULT (STDMETHODCALLTYPE* get_Size)(__FIVector_1_Windows__CDevices__CGeolocation__CGeopath* This,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* GetView)(__FIVector_1_Windows__CDevices__CGeolocation__CGeopath* This,
        __FIVectorView_1_Windows__CDevices__CGeolocation__CGeopath** result);
    HRESULT (STDMETHODCALLTYPE* IndexOf)(__FIVector_1_Windows__CDevices__CGeolocation__CGeopath* This,
        __x_ABI_CWindows_CDevices_CGeolocation_CIGeopath* value,
        UINT32* index,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* SetAt)(__FIVector_1_Windows__CDevices__CGeolocation__CGeopath* This,
        UINT32 index,
        __x_ABI_CWindows_CDevices_CGeolocation_CIGeopath* value);
    HRESULT (STDMETHODCALLTYPE* InsertAt)(__FIVector_1_Windows__CDevices__CGeolocation__CGeopath* This,
        UINT32 index,
        __x_ABI_CWindows_CDevices_CGeolocation_CIGeopath* value);
    HRESULT (STDMETHODCALLTYPE* RemoveAt)(__FIVector_1_Windows__CDevices__CGeolocation__CGeopath* This,
        UINT32 index);
    HRESULT (STDMETHODCALLTYPE* Append)(__FIVector_1_Windows__CDevices__CGeolocation__CGeopath* This,
        __x_ABI_CWindows_CDevices_CGeolocation_CIGeopath* value);
    HRESULT (STDMETHODCALLTYPE* RemoveAtEnd)(__FIVector_1_Windows__CDevices__CGeolocation__CGeopath* This);
    HRESULT (STDMETHODCALLTYPE* Clear)(__FIVector_1_Windows__CDevices__CGeolocation__CGeopath* This);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__FIVector_1_Windows__CDevices__CGeolocation__CGeopath* This,
        UINT32 startIndex,
        UINT32 itemsLength,
        __x_ABI_CWindows_CDevices_CGeolocation_CIGeopath** items,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* ReplaceAll)(__FIVector_1_Windows__CDevices__CGeolocation__CGeopath* This,
        UINT32 itemsLength,
        __x_ABI_CWindows_CDevices_CGeolocation_CIGeopath** items);

    END_INTERFACE
} __FIVector_1_Windows__CDevices__CGeolocation__CGeopathVtbl;

interface __FIVector_1_Windows__CDevices__CGeolocation__CGeopath
{
    CONST_VTBL struct __FIVector_1_Windows__CDevices__CGeolocation__CGeopathVtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __FIVector_1_Windows__CDevices__CGeolocation__CGeopath_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __FIVector_1_Windows__CDevices__CGeolocation__CGeopath_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __FIVector_1_Windows__CDevices__CGeolocation__CGeopath_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __FIVector_1_Windows__CDevices__CGeolocation__CGeopath_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __FIVector_1_Windows__CDevices__CGeolocation__CGeopath_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __FIVector_1_Windows__CDevices__CGeolocation__CGeopath_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __FIVector_1_Windows__CDevices__CGeolocation__CGeopath_GetAt(This, index, result) \
    ((This)->lpVtbl->GetAt(This, index, result))

#define __FIVector_1_Windows__CDevices__CGeolocation__CGeopath_get_Size(This, result) \
    ((This)->lpVtbl->get_Size(This, result))

#define __FIVector_1_Windows__CDevices__CGeolocation__CGeopath_GetView(This, result) \
    ((This)->lpVtbl->GetView(This, result))

#define __FIVector_1_Windows__CDevices__CGeolocation__CGeopath_IndexOf(This, value, index, result) \
    ((This)->lpVtbl->IndexOf(This, value, index, result))

#define __FIVector_1_Windows__CDevices__CGeolocation__CGeopath_SetAt(This, index, value) \
    ((This)->lpVtbl->SetAt(This, index, value))

#define __FIVector_1_Windows__CDevices__CGeolocation__CGeopath_InsertAt(This, index, value) \
    ((This)->lpVtbl->InsertAt(This, index, value))

#define __FIVector_1_Windows__CDevices__CGeolocation__CGeopath_RemoveAt(This, index) \
    ((This)->lpVtbl->RemoveAt(This, index))

#define __FIVector_1_Windows__CDevices__CGeolocation__CGeopath_Append(This, value) \
    ((This)->lpVtbl->Append(This, value))

#define __FIVector_1_Windows__CDevices__CGeolocation__CGeopath_RemoveAtEnd(This) \
    ((This)->lpVtbl->RemoveAtEnd(This))

#define __FIVector_1_Windows__CDevices__CGeolocation__CGeopath_Clear(This) \
    ((This)->lpVtbl->Clear(This))

#define __FIVector_1_Windows__CDevices__CGeolocation__CGeopath_GetMany(This, startIndex, itemsLength, items, result) \
    ((This)->lpVtbl->GetMany(This, startIndex, itemsLength, items, result))

#define __FIVector_1_Windows__CDevices__CGeolocation__CGeopath_ReplaceAll(This, itemsLength, items) \
    ((This)->lpVtbl->ReplaceAll(This, itemsLength, items))

#endif /* COBJMACROS */

#endif // ____FIVector_1_Windows__CDevices__CGeolocation__CGeopath_INTERFACE_DEFINED__
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____FIVector_1_Windows__CUI__CXaml__CControls__CMaps__CMapElement_INTERFACE_DEFINED__)
#define ____FIVector_1_Windows__CUI__CXaml__CControls__CMaps__CMapElement_INTERFACE_DEFINED__

typedef interface __FIVector_1_Windows__CUI__CXaml__CControls__CMaps__CMapElement __FIVector_1_Windows__CUI__CXaml__CControls__CMaps__CMapElement;

//  Declare the parameterized interface IID.
EXTERN_C const IID IID___FIVector_1_Windows__CUI__CXaml__CControls__CMaps__CMapElement;

typedef struct __FIVector_1_Windows__CUI__CXaml__CControls__CMaps__CMapElementVtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__FIVector_1_Windows__CUI__CXaml__CControls__CMaps__CMapElement* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__FIVector_1_Windows__CUI__CXaml__CControls__CMaps__CMapElement* This);
    ULONG (STDMETHODCALLTYPE* Release)(__FIVector_1_Windows__CUI__CXaml__CControls__CMaps__CMapElement* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__FIVector_1_Windows__CUI__CXaml__CControls__CMaps__CMapElement* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__FIVector_1_Windows__CUI__CXaml__CControls__CMaps__CMapElement* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__FIVector_1_Windows__CUI__CXaml__CControls__CMaps__CMapElement* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* GetAt)(__FIVector_1_Windows__CUI__CXaml__CControls__CMaps__CMapElement* This,
        UINT32 index,
        __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement** result);
    HRESULT (STDMETHODCALLTYPE* get_Size)(__FIVector_1_Windows__CUI__CXaml__CControls__CMaps__CMapElement* This,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* GetView)(__FIVector_1_Windows__CUI__CXaml__CControls__CMaps__CMapElement* This,
        __FIVectorView_1_Windows__CUI__CXaml__CControls__CMaps__CMapElement** result);
    HRESULT (STDMETHODCALLTYPE* IndexOf)(__FIVector_1_Windows__CUI__CXaml__CControls__CMaps__CMapElement* This,
        __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement* value,
        UINT32* index,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* SetAt)(__FIVector_1_Windows__CUI__CXaml__CControls__CMaps__CMapElement* This,
        UINT32 index,
        __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement* value);
    HRESULT (STDMETHODCALLTYPE* InsertAt)(__FIVector_1_Windows__CUI__CXaml__CControls__CMaps__CMapElement* This,
        UINT32 index,
        __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement* value);
    HRESULT (STDMETHODCALLTYPE* RemoveAt)(__FIVector_1_Windows__CUI__CXaml__CControls__CMaps__CMapElement* This,
        UINT32 index);
    HRESULT (STDMETHODCALLTYPE* Append)(__FIVector_1_Windows__CUI__CXaml__CControls__CMaps__CMapElement* This,
        __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement* value);
    HRESULT (STDMETHODCALLTYPE* RemoveAtEnd)(__FIVector_1_Windows__CUI__CXaml__CControls__CMaps__CMapElement* This);
    HRESULT (STDMETHODCALLTYPE* Clear)(__FIVector_1_Windows__CUI__CXaml__CControls__CMaps__CMapElement* This);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__FIVector_1_Windows__CUI__CXaml__CControls__CMaps__CMapElement* This,
        UINT32 startIndex,
        UINT32 itemsLength,
        __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement** items,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* ReplaceAll)(__FIVector_1_Windows__CUI__CXaml__CControls__CMaps__CMapElement* This,
        UINT32 itemsLength,
        __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement** items);

    END_INTERFACE
} __FIVector_1_Windows__CUI__CXaml__CControls__CMaps__CMapElementVtbl;

interface __FIVector_1_Windows__CUI__CXaml__CControls__CMaps__CMapElement
{
    CONST_VTBL struct __FIVector_1_Windows__CUI__CXaml__CControls__CMaps__CMapElementVtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __FIVector_1_Windows__CUI__CXaml__CControls__CMaps__CMapElement_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __FIVector_1_Windows__CUI__CXaml__CControls__CMaps__CMapElement_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __FIVector_1_Windows__CUI__CXaml__CControls__CMaps__CMapElement_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __FIVector_1_Windows__CUI__CXaml__CControls__CMaps__CMapElement_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __FIVector_1_Windows__CUI__CXaml__CControls__CMaps__CMapElement_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __FIVector_1_Windows__CUI__CXaml__CControls__CMaps__CMapElement_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __FIVector_1_Windows__CUI__CXaml__CControls__CMaps__CMapElement_GetAt(This, index, result) \
    ((This)->lpVtbl->GetAt(This, index, result))

#define __FIVector_1_Windows__CUI__CXaml__CControls__CMaps__CMapElement_get_Size(This, result) \
    ((This)->lpVtbl->get_Size(This, result))

#define __FIVector_1_Windows__CUI__CXaml__CControls__CMaps__CMapElement_GetView(This, result) \
    ((This)->lpVtbl->GetView(This, result))

#define __FIVector_1_Windows__CUI__CXaml__CControls__CMaps__CMapElement_IndexOf(This, value, index, result) \
    ((This)->lpVtbl->IndexOf(This, value, index, result))

#define __FIVector_1_Windows__CUI__CXaml__CControls__CMaps__CMapElement_SetAt(This, index, value) \
    ((This)->lpVtbl->SetAt(This, index, value))

#define __FIVector_1_Windows__CUI__CXaml__CControls__CMaps__CMapElement_InsertAt(This, index, value) \
    ((This)->lpVtbl->InsertAt(This, index, value))

#define __FIVector_1_Windows__CUI__CXaml__CControls__CMaps__CMapElement_RemoveAt(This, index) \
    ((This)->lpVtbl->RemoveAt(This, index))

#define __FIVector_1_Windows__CUI__CXaml__CControls__CMaps__CMapElement_Append(This, value) \
    ((This)->lpVtbl->Append(This, value))

#define __FIVector_1_Windows__CUI__CXaml__CControls__CMaps__CMapElement_RemoveAtEnd(This) \
    ((This)->lpVtbl->RemoveAtEnd(This))

#define __FIVector_1_Windows__CUI__CXaml__CControls__CMaps__CMapElement_Clear(This) \
    ((This)->lpVtbl->Clear(This))

#define __FIVector_1_Windows__CUI__CXaml__CControls__CMaps__CMapElement_GetMany(This, startIndex, itemsLength, items, result) \
    ((This)->lpVtbl->GetMany(This, startIndex, itemsLength, items, result))

#define __FIVector_1_Windows__CUI__CXaml__CControls__CMaps__CMapElement_ReplaceAll(This, itemsLength, items) \
    ((This)->lpVtbl->ReplaceAll(This, itemsLength, items))

#endif /* COBJMACROS */

#endif // ____FIVector_1_Windows__CUI__CXaml__CControls__CMaps__CMapElement_INTERFACE_DEFINED__
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x50000
#if !defined(____FIVector_1_Windows__CUI__CXaml__CControls__CMaps__CMapLayer_INTERFACE_DEFINED__)
#define ____FIVector_1_Windows__CUI__CXaml__CControls__CMaps__CMapLayer_INTERFACE_DEFINED__

typedef interface __FIVector_1_Windows__CUI__CXaml__CControls__CMaps__CMapLayer __FIVector_1_Windows__CUI__CXaml__CControls__CMaps__CMapLayer;

//  Declare the parameterized interface IID.
EXTERN_C const IID IID___FIVector_1_Windows__CUI__CXaml__CControls__CMaps__CMapLayer;

typedef struct __FIVector_1_Windows__CUI__CXaml__CControls__CMaps__CMapLayerVtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__FIVector_1_Windows__CUI__CXaml__CControls__CMaps__CMapLayer* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__FIVector_1_Windows__CUI__CXaml__CControls__CMaps__CMapLayer* This);
    ULONG (STDMETHODCALLTYPE* Release)(__FIVector_1_Windows__CUI__CXaml__CControls__CMaps__CMapLayer* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__FIVector_1_Windows__CUI__CXaml__CControls__CMaps__CMapLayer* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__FIVector_1_Windows__CUI__CXaml__CControls__CMaps__CMapLayer* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__FIVector_1_Windows__CUI__CXaml__CControls__CMaps__CMapLayer* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* GetAt)(__FIVector_1_Windows__CUI__CXaml__CControls__CMaps__CMapLayer* This,
        UINT32 index,
        __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapLayer** result);
    HRESULT (STDMETHODCALLTYPE* get_Size)(__FIVector_1_Windows__CUI__CXaml__CControls__CMaps__CMapLayer* This,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* GetView)(__FIVector_1_Windows__CUI__CXaml__CControls__CMaps__CMapLayer* This,
        __FIVectorView_1_Windows__CUI__CXaml__CControls__CMaps__CMapLayer** result);
    HRESULT (STDMETHODCALLTYPE* IndexOf)(__FIVector_1_Windows__CUI__CXaml__CControls__CMaps__CMapLayer* This,
        __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapLayer* value,
        UINT32* index,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* SetAt)(__FIVector_1_Windows__CUI__CXaml__CControls__CMaps__CMapLayer* This,
        UINT32 index,
        __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapLayer* value);
    HRESULT (STDMETHODCALLTYPE* InsertAt)(__FIVector_1_Windows__CUI__CXaml__CControls__CMaps__CMapLayer* This,
        UINT32 index,
        __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapLayer* value);
    HRESULT (STDMETHODCALLTYPE* RemoveAt)(__FIVector_1_Windows__CUI__CXaml__CControls__CMaps__CMapLayer* This,
        UINT32 index);
    HRESULT (STDMETHODCALLTYPE* Append)(__FIVector_1_Windows__CUI__CXaml__CControls__CMaps__CMapLayer* This,
        __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapLayer* value);
    HRESULT (STDMETHODCALLTYPE* RemoveAtEnd)(__FIVector_1_Windows__CUI__CXaml__CControls__CMaps__CMapLayer* This);
    HRESULT (STDMETHODCALLTYPE* Clear)(__FIVector_1_Windows__CUI__CXaml__CControls__CMaps__CMapLayer* This);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__FIVector_1_Windows__CUI__CXaml__CControls__CMaps__CMapLayer* This,
        UINT32 startIndex,
        UINT32 itemsLength,
        __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapLayer** items,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* ReplaceAll)(__FIVector_1_Windows__CUI__CXaml__CControls__CMaps__CMapLayer* This,
        UINT32 itemsLength,
        __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapLayer** items);

    END_INTERFACE
} __FIVector_1_Windows__CUI__CXaml__CControls__CMaps__CMapLayerVtbl;

interface __FIVector_1_Windows__CUI__CXaml__CControls__CMaps__CMapLayer
{
    CONST_VTBL struct __FIVector_1_Windows__CUI__CXaml__CControls__CMaps__CMapLayerVtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __FIVector_1_Windows__CUI__CXaml__CControls__CMaps__CMapLayer_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __FIVector_1_Windows__CUI__CXaml__CControls__CMaps__CMapLayer_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __FIVector_1_Windows__CUI__CXaml__CControls__CMaps__CMapLayer_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __FIVector_1_Windows__CUI__CXaml__CControls__CMaps__CMapLayer_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __FIVector_1_Windows__CUI__CXaml__CControls__CMaps__CMapLayer_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __FIVector_1_Windows__CUI__CXaml__CControls__CMaps__CMapLayer_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __FIVector_1_Windows__CUI__CXaml__CControls__CMaps__CMapLayer_GetAt(This, index, result) \
    ((This)->lpVtbl->GetAt(This, index, result))

#define __FIVector_1_Windows__CUI__CXaml__CControls__CMaps__CMapLayer_get_Size(This, result) \
    ((This)->lpVtbl->get_Size(This, result))

#define __FIVector_1_Windows__CUI__CXaml__CControls__CMaps__CMapLayer_GetView(This, result) \
    ((This)->lpVtbl->GetView(This, result))

#define __FIVector_1_Windows__CUI__CXaml__CControls__CMaps__CMapLayer_IndexOf(This, value, index, result) \
    ((This)->lpVtbl->IndexOf(This, value, index, result))

#define __FIVector_1_Windows__CUI__CXaml__CControls__CMaps__CMapLayer_SetAt(This, index, value) \
    ((This)->lpVtbl->SetAt(This, index, value))

#define __FIVector_1_Windows__CUI__CXaml__CControls__CMaps__CMapLayer_InsertAt(This, index, value) \
    ((This)->lpVtbl->InsertAt(This, index, value))

#define __FIVector_1_Windows__CUI__CXaml__CControls__CMaps__CMapLayer_RemoveAt(This, index) \
    ((This)->lpVtbl->RemoveAt(This, index))

#define __FIVector_1_Windows__CUI__CXaml__CControls__CMaps__CMapLayer_Append(This, value) \
    ((This)->lpVtbl->Append(This, value))

#define __FIVector_1_Windows__CUI__CXaml__CControls__CMaps__CMapLayer_RemoveAtEnd(This) \
    ((This)->lpVtbl->RemoveAtEnd(This))

#define __FIVector_1_Windows__CUI__CXaml__CControls__CMaps__CMapLayer_Clear(This) \
    ((This)->lpVtbl->Clear(This))

#define __FIVector_1_Windows__CUI__CXaml__CControls__CMaps__CMapLayer_GetMany(This, startIndex, itemsLength, items, result) \
    ((This)->lpVtbl->GetMany(This, startIndex, itemsLength, items, result))

#define __FIVector_1_Windows__CUI__CXaml__CControls__CMaps__CMapLayer_ReplaceAll(This, itemsLength, items) \
    ((This)->lpVtbl->ReplaceAll(This, itemsLength, items))

#endif /* COBJMACROS */

#endif // ____FIVector_1_Windows__CUI__CXaml__CControls__CMaps__CMapLayer_INTERFACE_DEFINED__
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x50000

#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____FIVector_1_Windows__CUI__CXaml__CControls__CMaps__CMapRouteView_INTERFACE_DEFINED__)
#define ____FIVector_1_Windows__CUI__CXaml__CControls__CMaps__CMapRouteView_INTERFACE_DEFINED__

typedef interface __FIVector_1_Windows__CUI__CXaml__CControls__CMaps__CMapRouteView __FIVector_1_Windows__CUI__CXaml__CControls__CMaps__CMapRouteView;

//  Declare the parameterized interface IID.
EXTERN_C const IID IID___FIVector_1_Windows__CUI__CXaml__CControls__CMaps__CMapRouteView;

typedef struct __FIVector_1_Windows__CUI__CXaml__CControls__CMaps__CMapRouteViewVtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__FIVector_1_Windows__CUI__CXaml__CControls__CMaps__CMapRouteView* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__FIVector_1_Windows__CUI__CXaml__CControls__CMaps__CMapRouteView* This);
    ULONG (STDMETHODCALLTYPE* Release)(__FIVector_1_Windows__CUI__CXaml__CControls__CMaps__CMapRouteView* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__FIVector_1_Windows__CUI__CXaml__CControls__CMaps__CMapRouteView* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__FIVector_1_Windows__CUI__CXaml__CControls__CMaps__CMapRouteView* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__FIVector_1_Windows__CUI__CXaml__CControls__CMaps__CMapRouteView* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* GetAt)(__FIVector_1_Windows__CUI__CXaml__CControls__CMaps__CMapRouteView* This,
        UINT32 index,
        __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapRouteView** result);
    HRESULT (STDMETHODCALLTYPE* get_Size)(__FIVector_1_Windows__CUI__CXaml__CControls__CMaps__CMapRouteView* This,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* GetView)(__FIVector_1_Windows__CUI__CXaml__CControls__CMaps__CMapRouteView* This,
        __FIVectorView_1_Windows__CUI__CXaml__CControls__CMaps__CMapRouteView** result);
    HRESULT (STDMETHODCALLTYPE* IndexOf)(__FIVector_1_Windows__CUI__CXaml__CControls__CMaps__CMapRouteView* This,
        __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapRouteView* value,
        UINT32* index,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* SetAt)(__FIVector_1_Windows__CUI__CXaml__CControls__CMaps__CMapRouteView* This,
        UINT32 index,
        __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapRouteView* value);
    HRESULT (STDMETHODCALLTYPE* InsertAt)(__FIVector_1_Windows__CUI__CXaml__CControls__CMaps__CMapRouteView* This,
        UINT32 index,
        __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapRouteView* value);
    HRESULT (STDMETHODCALLTYPE* RemoveAt)(__FIVector_1_Windows__CUI__CXaml__CControls__CMaps__CMapRouteView* This,
        UINT32 index);
    HRESULT (STDMETHODCALLTYPE* Append)(__FIVector_1_Windows__CUI__CXaml__CControls__CMaps__CMapRouteView* This,
        __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapRouteView* value);
    HRESULT (STDMETHODCALLTYPE* RemoveAtEnd)(__FIVector_1_Windows__CUI__CXaml__CControls__CMaps__CMapRouteView* This);
    HRESULT (STDMETHODCALLTYPE* Clear)(__FIVector_1_Windows__CUI__CXaml__CControls__CMaps__CMapRouteView* This);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__FIVector_1_Windows__CUI__CXaml__CControls__CMaps__CMapRouteView* This,
        UINT32 startIndex,
        UINT32 itemsLength,
        __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapRouteView** items,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* ReplaceAll)(__FIVector_1_Windows__CUI__CXaml__CControls__CMaps__CMapRouteView* This,
        UINT32 itemsLength,
        __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapRouteView** items);

    END_INTERFACE
} __FIVector_1_Windows__CUI__CXaml__CControls__CMaps__CMapRouteViewVtbl;

interface __FIVector_1_Windows__CUI__CXaml__CControls__CMaps__CMapRouteView
{
    CONST_VTBL struct __FIVector_1_Windows__CUI__CXaml__CControls__CMaps__CMapRouteViewVtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __FIVector_1_Windows__CUI__CXaml__CControls__CMaps__CMapRouteView_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __FIVector_1_Windows__CUI__CXaml__CControls__CMaps__CMapRouteView_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __FIVector_1_Windows__CUI__CXaml__CControls__CMaps__CMapRouteView_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __FIVector_1_Windows__CUI__CXaml__CControls__CMaps__CMapRouteView_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __FIVector_1_Windows__CUI__CXaml__CControls__CMaps__CMapRouteView_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __FIVector_1_Windows__CUI__CXaml__CControls__CMaps__CMapRouteView_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __FIVector_1_Windows__CUI__CXaml__CControls__CMaps__CMapRouteView_GetAt(This, index, result) \
    ((This)->lpVtbl->GetAt(This, index, result))

#define __FIVector_1_Windows__CUI__CXaml__CControls__CMaps__CMapRouteView_get_Size(This, result) \
    ((This)->lpVtbl->get_Size(This, result))

#define __FIVector_1_Windows__CUI__CXaml__CControls__CMaps__CMapRouteView_GetView(This, result) \
    ((This)->lpVtbl->GetView(This, result))

#define __FIVector_1_Windows__CUI__CXaml__CControls__CMaps__CMapRouteView_IndexOf(This, value, index, result) \
    ((This)->lpVtbl->IndexOf(This, value, index, result))

#define __FIVector_1_Windows__CUI__CXaml__CControls__CMaps__CMapRouteView_SetAt(This, index, value) \
    ((This)->lpVtbl->SetAt(This, index, value))

#define __FIVector_1_Windows__CUI__CXaml__CControls__CMaps__CMapRouteView_InsertAt(This, index, value) \
    ((This)->lpVtbl->InsertAt(This, index, value))

#define __FIVector_1_Windows__CUI__CXaml__CControls__CMaps__CMapRouteView_RemoveAt(This, index) \
    ((This)->lpVtbl->RemoveAt(This, index))

#define __FIVector_1_Windows__CUI__CXaml__CControls__CMaps__CMapRouteView_Append(This, value) \
    ((This)->lpVtbl->Append(This, value))

#define __FIVector_1_Windows__CUI__CXaml__CControls__CMaps__CMapRouteView_RemoveAtEnd(This) \
    ((This)->lpVtbl->RemoveAtEnd(This))

#define __FIVector_1_Windows__CUI__CXaml__CControls__CMaps__CMapRouteView_Clear(This) \
    ((This)->lpVtbl->Clear(This))

#define __FIVector_1_Windows__CUI__CXaml__CControls__CMaps__CMapRouteView_GetMany(This, startIndex, itemsLength, items, result) \
    ((This)->lpVtbl->GetMany(This, startIndex, itemsLength, items, result))

#define __FIVector_1_Windows__CUI__CXaml__CControls__CMaps__CMapRouteView_ReplaceAll(This, itemsLength, items) \
    ((This)->lpVtbl->ReplaceAll(This, itemsLength, items))

#endif /* COBJMACROS */

#endif // ____FIVector_1_Windows__CUI__CXaml__CControls__CMaps__CMapRouteView_INTERFACE_DEFINED__
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____FIVector_1_Windows__CUI__CXaml__CControls__CMaps__CMapTileSource_INTERFACE_DEFINED__)
#define ____FIVector_1_Windows__CUI__CXaml__CControls__CMaps__CMapTileSource_INTERFACE_DEFINED__

typedef interface __FIVector_1_Windows__CUI__CXaml__CControls__CMaps__CMapTileSource __FIVector_1_Windows__CUI__CXaml__CControls__CMaps__CMapTileSource;

//  Declare the parameterized interface IID.
EXTERN_C const IID IID___FIVector_1_Windows__CUI__CXaml__CControls__CMaps__CMapTileSource;

typedef struct __FIVector_1_Windows__CUI__CXaml__CControls__CMaps__CMapTileSourceVtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__FIVector_1_Windows__CUI__CXaml__CControls__CMaps__CMapTileSource* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__FIVector_1_Windows__CUI__CXaml__CControls__CMaps__CMapTileSource* This);
    ULONG (STDMETHODCALLTYPE* Release)(__FIVector_1_Windows__CUI__CXaml__CControls__CMaps__CMapTileSource* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__FIVector_1_Windows__CUI__CXaml__CControls__CMaps__CMapTileSource* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__FIVector_1_Windows__CUI__CXaml__CControls__CMaps__CMapTileSource* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__FIVector_1_Windows__CUI__CXaml__CControls__CMaps__CMapTileSource* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* GetAt)(__FIVector_1_Windows__CUI__CXaml__CControls__CMaps__CMapTileSource* This,
        UINT32 index,
        __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSource** result);
    HRESULT (STDMETHODCALLTYPE* get_Size)(__FIVector_1_Windows__CUI__CXaml__CControls__CMaps__CMapTileSource* This,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* GetView)(__FIVector_1_Windows__CUI__CXaml__CControls__CMaps__CMapTileSource* This,
        __FIVectorView_1_Windows__CUI__CXaml__CControls__CMaps__CMapTileSource** result);
    HRESULT (STDMETHODCALLTYPE* IndexOf)(__FIVector_1_Windows__CUI__CXaml__CControls__CMaps__CMapTileSource* This,
        __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSource* value,
        UINT32* index,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* SetAt)(__FIVector_1_Windows__CUI__CXaml__CControls__CMaps__CMapTileSource* This,
        UINT32 index,
        __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSource* value);
    HRESULT (STDMETHODCALLTYPE* InsertAt)(__FIVector_1_Windows__CUI__CXaml__CControls__CMaps__CMapTileSource* This,
        UINT32 index,
        __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSource* value);
    HRESULT (STDMETHODCALLTYPE* RemoveAt)(__FIVector_1_Windows__CUI__CXaml__CControls__CMaps__CMapTileSource* This,
        UINT32 index);
    HRESULT (STDMETHODCALLTYPE* Append)(__FIVector_1_Windows__CUI__CXaml__CControls__CMaps__CMapTileSource* This,
        __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSource* value);
    HRESULT (STDMETHODCALLTYPE* RemoveAtEnd)(__FIVector_1_Windows__CUI__CXaml__CControls__CMaps__CMapTileSource* This);
    HRESULT (STDMETHODCALLTYPE* Clear)(__FIVector_1_Windows__CUI__CXaml__CControls__CMaps__CMapTileSource* This);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__FIVector_1_Windows__CUI__CXaml__CControls__CMaps__CMapTileSource* This,
        UINT32 startIndex,
        UINT32 itemsLength,
        __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSource** items,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* ReplaceAll)(__FIVector_1_Windows__CUI__CXaml__CControls__CMaps__CMapTileSource* This,
        UINT32 itemsLength,
        __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSource** items);

    END_INTERFACE
} __FIVector_1_Windows__CUI__CXaml__CControls__CMaps__CMapTileSourceVtbl;

interface __FIVector_1_Windows__CUI__CXaml__CControls__CMaps__CMapTileSource
{
    CONST_VTBL struct __FIVector_1_Windows__CUI__CXaml__CControls__CMaps__CMapTileSourceVtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __FIVector_1_Windows__CUI__CXaml__CControls__CMaps__CMapTileSource_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __FIVector_1_Windows__CUI__CXaml__CControls__CMaps__CMapTileSource_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __FIVector_1_Windows__CUI__CXaml__CControls__CMaps__CMapTileSource_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __FIVector_1_Windows__CUI__CXaml__CControls__CMaps__CMapTileSource_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __FIVector_1_Windows__CUI__CXaml__CControls__CMaps__CMapTileSource_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __FIVector_1_Windows__CUI__CXaml__CControls__CMaps__CMapTileSource_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __FIVector_1_Windows__CUI__CXaml__CControls__CMaps__CMapTileSource_GetAt(This, index, result) \
    ((This)->lpVtbl->GetAt(This, index, result))

#define __FIVector_1_Windows__CUI__CXaml__CControls__CMaps__CMapTileSource_get_Size(This, result) \
    ((This)->lpVtbl->get_Size(This, result))

#define __FIVector_1_Windows__CUI__CXaml__CControls__CMaps__CMapTileSource_GetView(This, result) \
    ((This)->lpVtbl->GetView(This, result))

#define __FIVector_1_Windows__CUI__CXaml__CControls__CMaps__CMapTileSource_IndexOf(This, value, index, result) \
    ((This)->lpVtbl->IndexOf(This, value, index, result))

#define __FIVector_1_Windows__CUI__CXaml__CControls__CMaps__CMapTileSource_SetAt(This, index, value) \
    ((This)->lpVtbl->SetAt(This, index, value))

#define __FIVector_1_Windows__CUI__CXaml__CControls__CMaps__CMapTileSource_InsertAt(This, index, value) \
    ((This)->lpVtbl->InsertAt(This, index, value))

#define __FIVector_1_Windows__CUI__CXaml__CControls__CMaps__CMapTileSource_RemoveAt(This, index) \
    ((This)->lpVtbl->RemoveAt(This, index))

#define __FIVector_1_Windows__CUI__CXaml__CControls__CMaps__CMapTileSource_Append(This, value) \
    ((This)->lpVtbl->Append(This, value))

#define __FIVector_1_Windows__CUI__CXaml__CControls__CMaps__CMapTileSource_RemoveAtEnd(This) \
    ((This)->lpVtbl->RemoveAtEnd(This))

#define __FIVector_1_Windows__CUI__CXaml__CControls__CMaps__CMapTileSource_Clear(This) \
    ((This)->lpVtbl->Clear(This))

#define __FIVector_1_Windows__CUI__CXaml__CControls__CMaps__CMapTileSource_GetMany(This, startIndex, itemsLength, items, result) \
    ((This)->lpVtbl->GetMany(This, startIndex, itemsLength, items, result))

#define __FIVector_1_Windows__CUI__CXaml__CControls__CMaps__CMapTileSource_ReplaceAll(This, itemsLength, items) \
    ((This)->lpVtbl->ReplaceAll(This, itemsLength, items))

#endif /* COBJMACROS */

#endif // ____FIVector_1_Windows__CUI__CXaml__CControls__CMaps__CMapTileSource_INTERFACE_DEFINED__
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____FIVector_1_Windows__CUI__CXaml__CDependencyObject_INTERFACE_DEFINED__)
#define ____FIVector_1_Windows__CUI__CXaml__CDependencyObject_INTERFACE_DEFINED__

typedef interface __FIVector_1_Windows__CUI__CXaml__CDependencyObject __FIVector_1_Windows__CUI__CXaml__CDependencyObject;

//  Declare the parameterized interface IID.
EXTERN_C const IID IID___FIVector_1_Windows__CUI__CXaml__CDependencyObject;

typedef struct __FIVector_1_Windows__CUI__CXaml__CDependencyObjectVtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__FIVector_1_Windows__CUI__CXaml__CDependencyObject* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__FIVector_1_Windows__CUI__CXaml__CDependencyObject* This);
    ULONG (STDMETHODCALLTYPE* Release)(__FIVector_1_Windows__CUI__CXaml__CDependencyObject* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__FIVector_1_Windows__CUI__CXaml__CDependencyObject* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__FIVector_1_Windows__CUI__CXaml__CDependencyObject* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__FIVector_1_Windows__CUI__CXaml__CDependencyObject* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* GetAt)(__FIVector_1_Windows__CUI__CXaml__CDependencyObject* This,
        UINT32 index,
        __x_ABI_CWindows_CUI_CXaml_CIDependencyObject** result);
    HRESULT (STDMETHODCALLTYPE* get_Size)(__FIVector_1_Windows__CUI__CXaml__CDependencyObject* This,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* GetView)(__FIVector_1_Windows__CUI__CXaml__CDependencyObject* This,
        __FIVectorView_1_Windows__CUI__CXaml__CDependencyObject** result);
    HRESULT (STDMETHODCALLTYPE* IndexOf)(__FIVector_1_Windows__CUI__CXaml__CDependencyObject* This,
        __x_ABI_CWindows_CUI_CXaml_CIDependencyObject* value,
        UINT32* index,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* SetAt)(__FIVector_1_Windows__CUI__CXaml__CDependencyObject* This,
        UINT32 index,
        __x_ABI_CWindows_CUI_CXaml_CIDependencyObject* value);
    HRESULT (STDMETHODCALLTYPE* InsertAt)(__FIVector_1_Windows__CUI__CXaml__CDependencyObject* This,
        UINT32 index,
        __x_ABI_CWindows_CUI_CXaml_CIDependencyObject* value);
    HRESULT (STDMETHODCALLTYPE* RemoveAt)(__FIVector_1_Windows__CUI__CXaml__CDependencyObject* This,
        UINT32 index);
    HRESULT (STDMETHODCALLTYPE* Append)(__FIVector_1_Windows__CUI__CXaml__CDependencyObject* This,
        __x_ABI_CWindows_CUI_CXaml_CIDependencyObject* value);
    HRESULT (STDMETHODCALLTYPE* RemoveAtEnd)(__FIVector_1_Windows__CUI__CXaml__CDependencyObject* This);
    HRESULT (STDMETHODCALLTYPE* Clear)(__FIVector_1_Windows__CUI__CXaml__CDependencyObject* This);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__FIVector_1_Windows__CUI__CXaml__CDependencyObject* This,
        UINT32 startIndex,
        UINT32 itemsLength,
        __x_ABI_CWindows_CUI_CXaml_CIDependencyObject** items,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* ReplaceAll)(__FIVector_1_Windows__CUI__CXaml__CDependencyObject* This,
        UINT32 itemsLength,
        __x_ABI_CWindows_CUI_CXaml_CIDependencyObject** items);

    END_INTERFACE
} __FIVector_1_Windows__CUI__CXaml__CDependencyObjectVtbl;

interface __FIVector_1_Windows__CUI__CXaml__CDependencyObject
{
    CONST_VTBL struct __FIVector_1_Windows__CUI__CXaml__CDependencyObjectVtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __FIVector_1_Windows__CUI__CXaml__CDependencyObject_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __FIVector_1_Windows__CUI__CXaml__CDependencyObject_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __FIVector_1_Windows__CUI__CXaml__CDependencyObject_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __FIVector_1_Windows__CUI__CXaml__CDependencyObject_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __FIVector_1_Windows__CUI__CXaml__CDependencyObject_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __FIVector_1_Windows__CUI__CXaml__CDependencyObject_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __FIVector_1_Windows__CUI__CXaml__CDependencyObject_GetAt(This, index, result) \
    ((This)->lpVtbl->GetAt(This, index, result))

#define __FIVector_1_Windows__CUI__CXaml__CDependencyObject_get_Size(This, result) \
    ((This)->lpVtbl->get_Size(This, result))

#define __FIVector_1_Windows__CUI__CXaml__CDependencyObject_GetView(This, result) \
    ((This)->lpVtbl->GetView(This, result))

#define __FIVector_1_Windows__CUI__CXaml__CDependencyObject_IndexOf(This, value, index, result) \
    ((This)->lpVtbl->IndexOf(This, value, index, result))

#define __FIVector_1_Windows__CUI__CXaml__CDependencyObject_SetAt(This, index, value) \
    ((This)->lpVtbl->SetAt(This, index, value))

#define __FIVector_1_Windows__CUI__CXaml__CDependencyObject_InsertAt(This, index, value) \
    ((This)->lpVtbl->InsertAt(This, index, value))

#define __FIVector_1_Windows__CUI__CXaml__CDependencyObject_RemoveAt(This, index) \
    ((This)->lpVtbl->RemoveAt(This, index))

#define __FIVector_1_Windows__CUI__CXaml__CDependencyObject_Append(This, value) \
    ((This)->lpVtbl->Append(This, value))

#define __FIVector_1_Windows__CUI__CXaml__CDependencyObject_RemoveAtEnd(This) \
    ((This)->lpVtbl->RemoveAtEnd(This))

#define __FIVector_1_Windows__CUI__CXaml__CDependencyObject_Clear(This) \
    ((This)->lpVtbl->Clear(This))

#define __FIVector_1_Windows__CUI__CXaml__CDependencyObject_GetMany(This, startIndex, itemsLength, items, result) \
    ((This)->lpVtbl->GetMany(This, startIndex, itemsLength, items, result))

#define __FIVector_1_Windows__CUI__CXaml__CDependencyObject_ReplaceAll(This, itemsLength, items) \
    ((This)->lpVtbl->ReplaceAll(This, itemsLength, items))

#endif /* COBJMACROS */

#endif // ____FIVector_1_Windows__CUI__CXaml__CDependencyObject_INTERFACE_DEFINED__
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

#if !defined(____FIReference_1_double_INTERFACE_DEFINED__)
#define ____FIReference_1_double_INTERFACE_DEFINED__

typedef interface __FIReference_1_double __FIReference_1_double;

//  Declare the parameterized interface IID.
EXTERN_C const IID IID___FIReference_1_double;

typedef struct __FIReference_1_doubleVtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__FIReference_1_double* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__FIReference_1_double* This);
    ULONG (STDMETHODCALLTYPE* Release)(__FIReference_1_double* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__FIReference_1_double* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__FIReference_1_double* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__FIReference_1_double* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* get_Value)(__FIReference_1_double* This,
        DOUBLE* result);

    END_INTERFACE
} __FIReference_1_doubleVtbl;

interface __FIReference_1_double
{
    CONST_VTBL struct __FIReference_1_doubleVtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __FIReference_1_double_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __FIReference_1_double_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __FIReference_1_double_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __FIReference_1_double_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __FIReference_1_double_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __FIReference_1_double_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __FIReference_1_double_get_Value(This, result) \
    ((This)->lpVtbl->get_Value(This, result))

#endif /* COBJMACROS */

#endif // ____FIReference_1_double_INTERFACE_DEFINED__

typedef struct __x_ABI_CWindows_CUI_CXaml_CThickness __x_ABI_CWindows_CUI_CXaml_CThickness;

#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____FIReference_1_Windows__CUI__CXaml__CThickness_INTERFACE_DEFINED__)
#define ____FIReference_1_Windows__CUI__CXaml__CThickness_INTERFACE_DEFINED__

typedef interface __FIReference_1_Windows__CUI__CXaml__CThickness __FIReference_1_Windows__CUI__CXaml__CThickness;

//  Declare the parameterized interface IID.
EXTERN_C const IID IID___FIReference_1_Windows__CUI__CXaml__CThickness;

typedef struct __FIReference_1_Windows__CUI__CXaml__CThicknessVtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__FIReference_1_Windows__CUI__CXaml__CThickness* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__FIReference_1_Windows__CUI__CXaml__CThickness* This);
    ULONG (STDMETHODCALLTYPE* Release)(__FIReference_1_Windows__CUI__CXaml__CThickness* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__FIReference_1_Windows__CUI__CXaml__CThickness* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__FIReference_1_Windows__CUI__CXaml__CThickness* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__FIReference_1_Windows__CUI__CXaml__CThickness* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* get_Value)(__FIReference_1_Windows__CUI__CXaml__CThickness* This,
        struct __x_ABI_CWindows_CUI_CXaml_CThickness* result);

    END_INTERFACE
} __FIReference_1_Windows__CUI__CXaml__CThicknessVtbl;

interface __FIReference_1_Windows__CUI__CXaml__CThickness
{
    CONST_VTBL struct __FIReference_1_Windows__CUI__CXaml__CThicknessVtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __FIReference_1_Windows__CUI__CXaml__CThickness_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __FIReference_1_Windows__CUI__CXaml__CThickness_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __FIReference_1_Windows__CUI__CXaml__CThickness_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __FIReference_1_Windows__CUI__CXaml__CThickness_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __FIReference_1_Windows__CUI__CXaml__CThickness_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __FIReference_1_Windows__CUI__CXaml__CThickness_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __FIReference_1_Windows__CUI__CXaml__CThickness_get_Value(This, result) \
    ((This)->lpVtbl->get_Value(This, result))

#endif /* COBJMACROS */

#endif // ____FIReference_1_Windows__CUI__CXaml__CThickness_INTERFACE_DEFINED__
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CCustomMapTileDataSource_Windows__CUI__CXaml__CControls__CMaps__CMapTileBitmapRequestedEventArgs_INTERFACE_DEFINED__)
#define ____FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CCustomMapTileDataSource_Windows__CUI__CXaml__CControls__CMaps__CMapTileBitmapRequestedEventArgs_INTERFACE_DEFINED__

typedef interface __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CCustomMapTileDataSource_Windows__CUI__CXaml__CControls__CMaps__CMapTileBitmapRequestedEventArgs __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CCustomMapTileDataSource_Windows__CUI__CXaml__CControls__CMaps__CMapTileBitmapRequestedEventArgs;

//  Declare the parameterized interface IID.
EXTERN_C const IID IID___FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CCustomMapTileDataSource_Windows__CUI__CXaml__CControls__CMaps__CMapTileBitmapRequestedEventArgs;

typedef struct __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CCustomMapTileDataSource_Windows__CUI__CXaml__CControls__CMaps__CMapTileBitmapRequestedEventArgsVtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CCustomMapTileDataSource_Windows__CUI__CXaml__CControls__CMaps__CMapTileBitmapRequestedEventArgs* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CCustomMapTileDataSource_Windows__CUI__CXaml__CControls__CMaps__CMapTileBitmapRequestedEventArgs* This);
    ULONG (STDMETHODCALLTYPE* Release)(__FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CCustomMapTileDataSource_Windows__CUI__CXaml__CControls__CMaps__CMapTileBitmapRequestedEventArgs* This);
    HRESULT (STDMETHODCALLTYPE* Invoke)(__FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CCustomMapTileDataSource_Windows__CUI__CXaml__CControls__CMaps__CMapTileBitmapRequestedEventArgs* This,
        __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CICustomMapTileDataSource* sender,
        __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileBitmapRequestedEventArgs* args);

    END_INTERFACE
} __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CCustomMapTileDataSource_Windows__CUI__CXaml__CControls__CMaps__CMapTileBitmapRequestedEventArgsVtbl;

interface __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CCustomMapTileDataSource_Windows__CUI__CXaml__CControls__CMaps__CMapTileBitmapRequestedEventArgs
{
    CONST_VTBL struct __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CCustomMapTileDataSource_Windows__CUI__CXaml__CControls__CMaps__CMapTileBitmapRequestedEventArgsVtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CCustomMapTileDataSource_Windows__CUI__CXaml__CControls__CMaps__CMapTileBitmapRequestedEventArgs_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CCustomMapTileDataSource_Windows__CUI__CXaml__CControls__CMaps__CMapTileBitmapRequestedEventArgs_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CCustomMapTileDataSource_Windows__CUI__CXaml__CControls__CMaps__CMapTileBitmapRequestedEventArgs_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CCustomMapTileDataSource_Windows__CUI__CXaml__CControls__CMaps__CMapTileBitmapRequestedEventArgs_Invoke(This, sender, args) \
    ((This)->lpVtbl->Invoke(This, sender, args))

#endif /* COBJMACROS */

#endif // ____FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CCustomMapTileDataSource_Windows__CUI__CXaml__CControls__CMaps__CMapTileBitmapRequestedEventArgs_INTERFACE_DEFINED__
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CHttpMapTileDataSource_Windows__CUI__CXaml__CControls__CMaps__CMapTileUriRequestedEventArgs_INTERFACE_DEFINED__)
#define ____FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CHttpMapTileDataSource_Windows__CUI__CXaml__CControls__CMaps__CMapTileUriRequestedEventArgs_INTERFACE_DEFINED__

typedef interface __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CHttpMapTileDataSource_Windows__CUI__CXaml__CControls__CMaps__CMapTileUriRequestedEventArgs __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CHttpMapTileDataSource_Windows__CUI__CXaml__CControls__CMaps__CMapTileUriRequestedEventArgs;

//  Declare the parameterized interface IID.
EXTERN_C const IID IID___FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CHttpMapTileDataSource_Windows__CUI__CXaml__CControls__CMaps__CMapTileUriRequestedEventArgs;

typedef struct __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CHttpMapTileDataSource_Windows__CUI__CXaml__CControls__CMaps__CMapTileUriRequestedEventArgsVtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CHttpMapTileDataSource_Windows__CUI__CXaml__CControls__CMaps__CMapTileUriRequestedEventArgs* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CHttpMapTileDataSource_Windows__CUI__CXaml__CControls__CMaps__CMapTileUriRequestedEventArgs* This);
    ULONG (STDMETHODCALLTYPE* Release)(__FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CHttpMapTileDataSource_Windows__CUI__CXaml__CControls__CMaps__CMapTileUriRequestedEventArgs* This);
    HRESULT (STDMETHODCALLTYPE* Invoke)(__FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CHttpMapTileDataSource_Windows__CUI__CXaml__CControls__CMaps__CMapTileUriRequestedEventArgs* This,
        __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIHttpMapTileDataSource* sender,
        __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileUriRequestedEventArgs* args);

    END_INTERFACE
} __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CHttpMapTileDataSource_Windows__CUI__CXaml__CControls__CMaps__CMapTileUriRequestedEventArgsVtbl;

interface __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CHttpMapTileDataSource_Windows__CUI__CXaml__CControls__CMaps__CMapTileUriRequestedEventArgs
{
    CONST_VTBL struct __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CHttpMapTileDataSource_Windows__CUI__CXaml__CControls__CMaps__CMapTileUriRequestedEventArgsVtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CHttpMapTileDataSource_Windows__CUI__CXaml__CControls__CMaps__CMapTileUriRequestedEventArgs_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CHttpMapTileDataSource_Windows__CUI__CXaml__CControls__CMaps__CMapTileUriRequestedEventArgs_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CHttpMapTileDataSource_Windows__CUI__CXaml__CControls__CMaps__CMapTileUriRequestedEventArgs_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CHttpMapTileDataSource_Windows__CUI__CXaml__CControls__CMaps__CMapTileUriRequestedEventArgs_Invoke(This, sender, args) \
    ((This)->lpVtbl->Invoke(This, sender, args))

#endif /* COBJMACROS */

#endif // ____FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CHttpMapTileDataSource_Windows__CUI__CXaml__CControls__CMaps__CMapTileUriRequestedEventArgs_INTERFACE_DEFINED__
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CLocalMapTileDataSource_Windows__CUI__CXaml__CControls__CMaps__CMapTileUriRequestedEventArgs_INTERFACE_DEFINED__)
#define ____FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CLocalMapTileDataSource_Windows__CUI__CXaml__CControls__CMaps__CMapTileUriRequestedEventArgs_INTERFACE_DEFINED__

typedef interface __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CLocalMapTileDataSource_Windows__CUI__CXaml__CControls__CMaps__CMapTileUriRequestedEventArgs __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CLocalMapTileDataSource_Windows__CUI__CXaml__CControls__CMaps__CMapTileUriRequestedEventArgs;

//  Declare the parameterized interface IID.
EXTERN_C const IID IID___FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CLocalMapTileDataSource_Windows__CUI__CXaml__CControls__CMaps__CMapTileUriRequestedEventArgs;

typedef struct __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CLocalMapTileDataSource_Windows__CUI__CXaml__CControls__CMaps__CMapTileUriRequestedEventArgsVtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CLocalMapTileDataSource_Windows__CUI__CXaml__CControls__CMaps__CMapTileUriRequestedEventArgs* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CLocalMapTileDataSource_Windows__CUI__CXaml__CControls__CMaps__CMapTileUriRequestedEventArgs* This);
    ULONG (STDMETHODCALLTYPE* Release)(__FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CLocalMapTileDataSource_Windows__CUI__CXaml__CControls__CMaps__CMapTileUriRequestedEventArgs* This);
    HRESULT (STDMETHODCALLTYPE* Invoke)(__FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CLocalMapTileDataSource_Windows__CUI__CXaml__CControls__CMaps__CMapTileUriRequestedEventArgs* This,
        __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CILocalMapTileDataSource* sender,
        __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileUriRequestedEventArgs* args);

    END_INTERFACE
} __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CLocalMapTileDataSource_Windows__CUI__CXaml__CControls__CMaps__CMapTileUriRequestedEventArgsVtbl;

interface __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CLocalMapTileDataSource_Windows__CUI__CXaml__CControls__CMaps__CMapTileUriRequestedEventArgs
{
    CONST_VTBL struct __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CLocalMapTileDataSource_Windows__CUI__CXaml__CControls__CMaps__CMapTileUriRequestedEventArgsVtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CLocalMapTileDataSource_Windows__CUI__CXaml__CControls__CMaps__CMapTileUriRequestedEventArgs_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CLocalMapTileDataSource_Windows__CUI__CXaml__CControls__CMaps__CMapTileUriRequestedEventArgs_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CLocalMapTileDataSource_Windows__CUI__CXaml__CControls__CMaps__CMapTileUriRequestedEventArgs_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CLocalMapTileDataSource_Windows__CUI__CXaml__CControls__CMaps__CMapTileUriRequestedEventArgs_Invoke(This, sender, args) \
    ((This)->lpVtbl->Invoke(This, sender, args))

#endif /* COBJMACROS */

#endif // ____FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CLocalMapTileDataSource_Windows__CUI__CXaml__CControls__CMaps__CMapTileUriRequestedEventArgs_INTERFACE_DEFINED__
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_IInspectable_INTERFACE_DEFINED__)
#define ____FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_IInspectable_INTERFACE_DEFINED__

typedef interface __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_IInspectable __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_IInspectable;

//  Declare the parameterized interface IID.
EXTERN_C const IID IID___FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_IInspectable;

typedef struct __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_IInspectableVtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_IInspectable* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_IInspectable* This);
    ULONG (STDMETHODCALLTYPE* Release)(__FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_IInspectable* This);
    HRESULT (STDMETHODCALLTYPE* Invoke)(__FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_IInspectable* This,
        __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl* sender,
        IInspectable* args);

    END_INTERFACE
} __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_IInspectableVtbl;

interface __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_IInspectable
{
    CONST_VTBL struct __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_IInspectableVtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_IInspectable_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_IInspectable_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_IInspectable_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_IInspectable_Invoke(This, sender, args) \
    ((This)->lpVtbl->Invoke(This, sender, args))

#endif /* COBJMACROS */

#endif // ____FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_IInspectable_INTERFACE_DEFINED__
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapActualCameraChangedEventArgs_INTERFACE_DEFINED__)
#define ____FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapActualCameraChangedEventArgs_INTERFACE_DEFINED__

typedef interface __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapActualCameraChangedEventArgs __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapActualCameraChangedEventArgs;

//  Declare the parameterized interface IID.
EXTERN_C const IID IID___FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapActualCameraChangedEventArgs;

typedef struct __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapActualCameraChangedEventArgsVtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapActualCameraChangedEventArgs* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapActualCameraChangedEventArgs* This);
    ULONG (STDMETHODCALLTYPE* Release)(__FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapActualCameraChangedEventArgs* This);
    HRESULT (STDMETHODCALLTYPE* Invoke)(__FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapActualCameraChangedEventArgs* This,
        __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl* sender,
        __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapActualCameraChangedEventArgs* args);

    END_INTERFACE
} __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapActualCameraChangedEventArgsVtbl;

interface __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapActualCameraChangedEventArgs
{
    CONST_VTBL struct __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapActualCameraChangedEventArgsVtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapActualCameraChangedEventArgs_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapActualCameraChangedEventArgs_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapActualCameraChangedEventArgs_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapActualCameraChangedEventArgs_Invoke(This, sender, args) \
    ((This)->lpVtbl->Invoke(This, sender, args))

#endif /* COBJMACROS */

#endif // ____FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapActualCameraChangedEventArgs_INTERFACE_DEFINED__
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapActualCameraChangingEventArgs_INTERFACE_DEFINED__)
#define ____FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapActualCameraChangingEventArgs_INTERFACE_DEFINED__

typedef interface __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapActualCameraChangingEventArgs __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapActualCameraChangingEventArgs;

//  Declare the parameterized interface IID.
EXTERN_C const IID IID___FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapActualCameraChangingEventArgs;

typedef struct __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapActualCameraChangingEventArgsVtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapActualCameraChangingEventArgs* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapActualCameraChangingEventArgs* This);
    ULONG (STDMETHODCALLTYPE* Release)(__FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapActualCameraChangingEventArgs* This);
    HRESULT (STDMETHODCALLTYPE* Invoke)(__FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapActualCameraChangingEventArgs* This,
        __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl* sender,
        __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapActualCameraChangingEventArgs* args);

    END_INTERFACE
} __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapActualCameraChangingEventArgsVtbl;

interface __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapActualCameraChangingEventArgs
{
    CONST_VTBL struct __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapActualCameraChangingEventArgsVtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapActualCameraChangingEventArgs_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapActualCameraChangingEventArgs_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapActualCameraChangingEventArgs_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapActualCameraChangingEventArgs_Invoke(This, sender, args) \
    ((This)->lpVtbl->Invoke(This, sender, args))

#endif /* COBJMACROS */

#endif // ____FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapActualCameraChangingEventArgs_INTERFACE_DEFINED__
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x40000
#if !defined(____FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapContextRequestedEventArgs_INTERFACE_DEFINED__)
#define ____FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapContextRequestedEventArgs_INTERFACE_DEFINED__

typedef interface __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapContextRequestedEventArgs __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapContextRequestedEventArgs;

//  Declare the parameterized interface IID.
EXTERN_C const IID IID___FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapContextRequestedEventArgs;

typedef struct __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapContextRequestedEventArgsVtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapContextRequestedEventArgs* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapContextRequestedEventArgs* This);
    ULONG (STDMETHODCALLTYPE* Release)(__FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapContextRequestedEventArgs* This);
    HRESULT (STDMETHODCALLTYPE* Invoke)(__FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapContextRequestedEventArgs* This,
        __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl* sender,
        __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapContextRequestedEventArgs* args);

    END_INTERFACE
} __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapContextRequestedEventArgsVtbl;

interface __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapContextRequestedEventArgs
{
    CONST_VTBL struct __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapContextRequestedEventArgsVtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapContextRequestedEventArgs_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapContextRequestedEventArgs_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapContextRequestedEventArgs_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapContextRequestedEventArgs_Invoke(This, sender, args) \
    ((This)->lpVtbl->Invoke(This, sender, args))

#endif /* COBJMACROS */

#endif // ____FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapContextRequestedEventArgs_INTERFACE_DEFINED__
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x40000
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if WINDOWS_SERVICES_MAPS_LOCALSEARCHCONTRACT_VERSION >= 0x20000
#if !defined(____FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapControlBusinessLandmarkClickEventArgs_INTERFACE_DEFINED__)
#define ____FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapControlBusinessLandmarkClickEventArgs_INTERFACE_DEFINED__

typedef interface __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapControlBusinessLandmarkClickEventArgs __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapControlBusinessLandmarkClickEventArgs;

//  Declare the parameterized interface IID.
EXTERN_C const IID IID___FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapControlBusinessLandmarkClickEventArgs;

typedef struct __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapControlBusinessLandmarkClickEventArgsVtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapControlBusinessLandmarkClickEventArgs* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapControlBusinessLandmarkClickEventArgs* This);
    ULONG (STDMETHODCALLTYPE* Release)(__FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapControlBusinessLandmarkClickEventArgs* This);
    HRESULT (STDMETHODCALLTYPE* Invoke)(__FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapControlBusinessLandmarkClickEventArgs* This,
        __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl* sender,
        __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlBusinessLandmarkClickEventArgs* args);

    END_INTERFACE
} __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapControlBusinessLandmarkClickEventArgsVtbl;

interface __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapControlBusinessLandmarkClickEventArgs
{
    CONST_VTBL struct __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapControlBusinessLandmarkClickEventArgsVtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapControlBusinessLandmarkClickEventArgs_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapControlBusinessLandmarkClickEventArgs_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapControlBusinessLandmarkClickEventArgs_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapControlBusinessLandmarkClickEventArgs_Invoke(This, sender, args) \
    ((This)->lpVtbl->Invoke(This, sender, args))

#endif /* COBJMACROS */

#endif // ____FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapControlBusinessLandmarkClickEventArgs_INTERFACE_DEFINED__
#endif // WINDOWS_SERVICES_MAPS_LOCALSEARCHCONTRACT_VERSION >= 0x20000
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if WINDOWS_SERVICES_MAPS_LOCALSEARCHCONTRACT_VERSION >= 0x30000
#if !defined(____FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapControlBusinessLandmarkPointerEnteredEventArgs_INTERFACE_DEFINED__)
#define ____FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapControlBusinessLandmarkPointerEnteredEventArgs_INTERFACE_DEFINED__

typedef interface __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapControlBusinessLandmarkPointerEnteredEventArgs __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapControlBusinessLandmarkPointerEnteredEventArgs;

//  Declare the parameterized interface IID.
EXTERN_C const IID IID___FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapControlBusinessLandmarkPointerEnteredEventArgs;

typedef struct __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapControlBusinessLandmarkPointerEnteredEventArgsVtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapControlBusinessLandmarkPointerEnteredEventArgs* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapControlBusinessLandmarkPointerEnteredEventArgs* This);
    ULONG (STDMETHODCALLTYPE* Release)(__FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapControlBusinessLandmarkPointerEnteredEventArgs* This);
    HRESULT (STDMETHODCALLTYPE* Invoke)(__FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapControlBusinessLandmarkPointerEnteredEventArgs* This,
        __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl* sender,
        __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlBusinessLandmarkPointerEnteredEventArgs* args);

    END_INTERFACE
} __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapControlBusinessLandmarkPointerEnteredEventArgsVtbl;

interface __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapControlBusinessLandmarkPointerEnteredEventArgs
{
    CONST_VTBL struct __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapControlBusinessLandmarkPointerEnteredEventArgsVtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapControlBusinessLandmarkPointerEnteredEventArgs_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapControlBusinessLandmarkPointerEnteredEventArgs_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapControlBusinessLandmarkPointerEnteredEventArgs_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapControlBusinessLandmarkPointerEnteredEventArgs_Invoke(This, sender, args) \
    ((This)->lpVtbl->Invoke(This, sender, args))

#endif /* COBJMACROS */

#endif // ____FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapControlBusinessLandmarkPointerEnteredEventArgs_INTERFACE_DEFINED__
#endif // WINDOWS_SERVICES_MAPS_LOCALSEARCHCONTRACT_VERSION >= 0x30000
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if WINDOWS_SERVICES_MAPS_LOCALSEARCHCONTRACT_VERSION >= 0x30000
#if !defined(____FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapControlBusinessLandmarkPointerExitedEventArgs_INTERFACE_DEFINED__)
#define ____FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapControlBusinessLandmarkPointerExitedEventArgs_INTERFACE_DEFINED__

typedef interface __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapControlBusinessLandmarkPointerExitedEventArgs __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapControlBusinessLandmarkPointerExitedEventArgs;

//  Declare the parameterized interface IID.
EXTERN_C const IID IID___FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapControlBusinessLandmarkPointerExitedEventArgs;

typedef struct __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapControlBusinessLandmarkPointerExitedEventArgsVtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapControlBusinessLandmarkPointerExitedEventArgs* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapControlBusinessLandmarkPointerExitedEventArgs* This);
    ULONG (STDMETHODCALLTYPE* Release)(__FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapControlBusinessLandmarkPointerExitedEventArgs* This);
    HRESULT (STDMETHODCALLTYPE* Invoke)(__FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapControlBusinessLandmarkPointerExitedEventArgs* This,
        __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl* sender,
        __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlBusinessLandmarkPointerExitedEventArgs* args);

    END_INTERFACE
} __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapControlBusinessLandmarkPointerExitedEventArgsVtbl;

interface __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapControlBusinessLandmarkPointerExitedEventArgs
{
    CONST_VTBL struct __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapControlBusinessLandmarkPointerExitedEventArgsVtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapControlBusinessLandmarkPointerExitedEventArgs_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapControlBusinessLandmarkPointerExitedEventArgs_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapControlBusinessLandmarkPointerExitedEventArgs_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapControlBusinessLandmarkPointerExitedEventArgs_Invoke(This, sender, args) \
    ((This)->lpVtbl->Invoke(This, sender, args))

#endif /* COBJMACROS */

#endif // ____FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapControlBusinessLandmarkPointerExitedEventArgs_INTERFACE_DEFINED__
#endif // WINDOWS_SERVICES_MAPS_LOCALSEARCHCONTRACT_VERSION >= 0x30000
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if WINDOWS_SERVICES_MAPS_LOCALSEARCHCONTRACT_VERSION >= 0x20000
#if !defined(____FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapControlBusinessLandmarkRightTappedEventArgs_INTERFACE_DEFINED__)
#define ____FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapControlBusinessLandmarkRightTappedEventArgs_INTERFACE_DEFINED__

typedef interface __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapControlBusinessLandmarkRightTappedEventArgs __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapControlBusinessLandmarkRightTappedEventArgs;

//  Declare the parameterized interface IID.
EXTERN_C const IID IID___FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapControlBusinessLandmarkRightTappedEventArgs;

typedef struct __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapControlBusinessLandmarkRightTappedEventArgsVtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapControlBusinessLandmarkRightTappedEventArgs* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapControlBusinessLandmarkRightTappedEventArgs* This);
    ULONG (STDMETHODCALLTYPE* Release)(__FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapControlBusinessLandmarkRightTappedEventArgs* This);
    HRESULT (STDMETHODCALLTYPE* Invoke)(__FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapControlBusinessLandmarkRightTappedEventArgs* This,
        __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl* sender,
        __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlBusinessLandmarkRightTappedEventArgs* args);

    END_INTERFACE
} __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapControlBusinessLandmarkRightTappedEventArgsVtbl;

interface __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapControlBusinessLandmarkRightTappedEventArgs
{
    CONST_VTBL struct __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapControlBusinessLandmarkRightTappedEventArgsVtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapControlBusinessLandmarkRightTappedEventArgs_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapControlBusinessLandmarkRightTappedEventArgs_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapControlBusinessLandmarkRightTappedEventArgs_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapControlBusinessLandmarkRightTappedEventArgs_Invoke(This, sender, args) \
    ((This)->lpVtbl->Invoke(This, sender, args))

#endif /* COBJMACROS */

#endif // ____FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapControlBusinessLandmarkRightTappedEventArgs_INTERFACE_DEFINED__
#endif // WINDOWS_SERVICES_MAPS_LOCALSEARCHCONTRACT_VERSION >= 0x20000
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if WINDOWS_SERVICES_MAPS_LOCALSEARCHCONTRACT_VERSION >= 0x20000
#if !defined(____FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapControlTransitFeatureClickEventArgs_INTERFACE_DEFINED__)
#define ____FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapControlTransitFeatureClickEventArgs_INTERFACE_DEFINED__

typedef interface __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapControlTransitFeatureClickEventArgs __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapControlTransitFeatureClickEventArgs;

//  Declare the parameterized interface IID.
EXTERN_C const IID IID___FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapControlTransitFeatureClickEventArgs;

typedef struct __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapControlTransitFeatureClickEventArgsVtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapControlTransitFeatureClickEventArgs* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapControlTransitFeatureClickEventArgs* This);
    ULONG (STDMETHODCALLTYPE* Release)(__FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapControlTransitFeatureClickEventArgs* This);
    HRESULT (STDMETHODCALLTYPE* Invoke)(__FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapControlTransitFeatureClickEventArgs* This,
        __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl* sender,
        __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlTransitFeatureClickEventArgs* args);

    END_INTERFACE
} __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapControlTransitFeatureClickEventArgsVtbl;

interface __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapControlTransitFeatureClickEventArgs
{
    CONST_VTBL struct __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapControlTransitFeatureClickEventArgsVtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapControlTransitFeatureClickEventArgs_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapControlTransitFeatureClickEventArgs_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapControlTransitFeatureClickEventArgs_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapControlTransitFeatureClickEventArgs_Invoke(This, sender, args) \
    ((This)->lpVtbl->Invoke(This, sender, args))

#endif /* COBJMACROS */

#endif // ____FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapControlTransitFeatureClickEventArgs_INTERFACE_DEFINED__
#endif // WINDOWS_SERVICES_MAPS_LOCALSEARCHCONTRACT_VERSION >= 0x20000
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if WINDOWS_SERVICES_MAPS_LOCALSEARCHCONTRACT_VERSION >= 0x30000
#if !defined(____FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapControlTransitFeaturePointerEnteredEventArgs_INTERFACE_DEFINED__)
#define ____FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapControlTransitFeaturePointerEnteredEventArgs_INTERFACE_DEFINED__

typedef interface __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapControlTransitFeaturePointerEnteredEventArgs __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapControlTransitFeaturePointerEnteredEventArgs;

//  Declare the parameterized interface IID.
EXTERN_C const IID IID___FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapControlTransitFeaturePointerEnteredEventArgs;

typedef struct __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapControlTransitFeaturePointerEnteredEventArgsVtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapControlTransitFeaturePointerEnteredEventArgs* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapControlTransitFeaturePointerEnteredEventArgs* This);
    ULONG (STDMETHODCALLTYPE* Release)(__FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapControlTransitFeaturePointerEnteredEventArgs* This);
    HRESULT (STDMETHODCALLTYPE* Invoke)(__FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapControlTransitFeaturePointerEnteredEventArgs* This,
        __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl* sender,
        __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlTransitFeaturePointerEnteredEventArgs* args);

    END_INTERFACE
} __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapControlTransitFeaturePointerEnteredEventArgsVtbl;

interface __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapControlTransitFeaturePointerEnteredEventArgs
{
    CONST_VTBL struct __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapControlTransitFeaturePointerEnteredEventArgsVtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapControlTransitFeaturePointerEnteredEventArgs_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapControlTransitFeaturePointerEnteredEventArgs_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapControlTransitFeaturePointerEnteredEventArgs_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapControlTransitFeaturePointerEnteredEventArgs_Invoke(This, sender, args) \
    ((This)->lpVtbl->Invoke(This, sender, args))

#endif /* COBJMACROS */

#endif // ____FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapControlTransitFeaturePointerEnteredEventArgs_INTERFACE_DEFINED__
#endif // WINDOWS_SERVICES_MAPS_LOCALSEARCHCONTRACT_VERSION >= 0x30000
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if WINDOWS_SERVICES_MAPS_LOCALSEARCHCONTRACT_VERSION >= 0x30000
#if !defined(____FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapControlTransitFeaturePointerExitedEventArgs_INTERFACE_DEFINED__)
#define ____FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapControlTransitFeaturePointerExitedEventArgs_INTERFACE_DEFINED__

typedef interface __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapControlTransitFeaturePointerExitedEventArgs __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapControlTransitFeaturePointerExitedEventArgs;

//  Declare the parameterized interface IID.
EXTERN_C const IID IID___FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapControlTransitFeaturePointerExitedEventArgs;

typedef struct __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapControlTransitFeaturePointerExitedEventArgsVtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapControlTransitFeaturePointerExitedEventArgs* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapControlTransitFeaturePointerExitedEventArgs* This);
    ULONG (STDMETHODCALLTYPE* Release)(__FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapControlTransitFeaturePointerExitedEventArgs* This);
    HRESULT (STDMETHODCALLTYPE* Invoke)(__FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapControlTransitFeaturePointerExitedEventArgs* This,
        __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl* sender,
        __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlTransitFeaturePointerExitedEventArgs* args);

    END_INTERFACE
} __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapControlTransitFeaturePointerExitedEventArgsVtbl;

interface __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapControlTransitFeaturePointerExitedEventArgs
{
    CONST_VTBL struct __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapControlTransitFeaturePointerExitedEventArgsVtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapControlTransitFeaturePointerExitedEventArgs_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapControlTransitFeaturePointerExitedEventArgs_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapControlTransitFeaturePointerExitedEventArgs_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapControlTransitFeaturePointerExitedEventArgs_Invoke(This, sender, args) \
    ((This)->lpVtbl->Invoke(This, sender, args))

#endif /* COBJMACROS */

#endif // ____FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapControlTransitFeaturePointerExitedEventArgs_INTERFACE_DEFINED__
#endif // WINDOWS_SERVICES_MAPS_LOCALSEARCHCONTRACT_VERSION >= 0x30000
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if WINDOWS_SERVICES_MAPS_LOCALSEARCHCONTRACT_VERSION >= 0x20000
#if !defined(____FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapControlTransitFeatureRightTappedEventArgs_INTERFACE_DEFINED__)
#define ____FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapControlTransitFeatureRightTappedEventArgs_INTERFACE_DEFINED__

typedef interface __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapControlTransitFeatureRightTappedEventArgs __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapControlTransitFeatureRightTappedEventArgs;

//  Declare the parameterized interface IID.
EXTERN_C const IID IID___FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapControlTransitFeatureRightTappedEventArgs;

typedef struct __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapControlTransitFeatureRightTappedEventArgsVtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapControlTransitFeatureRightTappedEventArgs* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapControlTransitFeatureRightTappedEventArgs* This);
    ULONG (STDMETHODCALLTYPE* Release)(__FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapControlTransitFeatureRightTappedEventArgs* This);
    HRESULT (STDMETHODCALLTYPE* Invoke)(__FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapControlTransitFeatureRightTappedEventArgs* This,
        __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl* sender,
        __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlTransitFeatureRightTappedEventArgs* args);

    END_INTERFACE
} __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapControlTransitFeatureRightTappedEventArgsVtbl;

interface __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapControlTransitFeatureRightTappedEventArgs
{
    CONST_VTBL struct __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapControlTransitFeatureRightTappedEventArgsVtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapControlTransitFeatureRightTappedEventArgs_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapControlTransitFeatureRightTappedEventArgs_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapControlTransitFeatureRightTappedEventArgs_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapControlTransitFeatureRightTappedEventArgs_Invoke(This, sender, args) \
    ((This)->lpVtbl->Invoke(This, sender, args))

#endif /* COBJMACROS */

#endif // ____FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapControlTransitFeatureRightTappedEventArgs_INTERFACE_DEFINED__
#endif // WINDOWS_SERVICES_MAPS_LOCALSEARCHCONTRACT_VERSION >= 0x20000
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapCustomExperienceChangedEventArgs_INTERFACE_DEFINED__)
#define ____FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapCustomExperienceChangedEventArgs_INTERFACE_DEFINED__

typedef interface __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapCustomExperienceChangedEventArgs __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapCustomExperienceChangedEventArgs;

//  Declare the parameterized interface IID.
EXTERN_C const IID IID___FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapCustomExperienceChangedEventArgs;

typedef struct __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapCustomExperienceChangedEventArgsVtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapCustomExperienceChangedEventArgs* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapCustomExperienceChangedEventArgs* This);
    ULONG (STDMETHODCALLTYPE* Release)(__FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapCustomExperienceChangedEventArgs* This);
    HRESULT (STDMETHODCALLTYPE* Invoke)(__FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapCustomExperienceChangedEventArgs* This,
        __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl* sender,
        __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCustomExperienceChangedEventArgs* args);

    END_INTERFACE
} __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapCustomExperienceChangedEventArgsVtbl;

interface __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapCustomExperienceChangedEventArgs
{
    CONST_VTBL struct __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapCustomExperienceChangedEventArgsVtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapCustomExperienceChangedEventArgs_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapCustomExperienceChangedEventArgs_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapCustomExperienceChangedEventArgs_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapCustomExperienceChangedEventArgs_Invoke(This, sender, args) \
    ((This)->lpVtbl->Invoke(This, sender, args))

#endif /* COBJMACROS */

#endif // ____FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapCustomExperienceChangedEventArgs_INTERFACE_DEFINED__
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapElementClickEventArgs_INTERFACE_DEFINED__)
#define ____FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapElementClickEventArgs_INTERFACE_DEFINED__

typedef interface __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapElementClickEventArgs __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapElementClickEventArgs;

//  Declare the parameterized interface IID.
EXTERN_C const IID IID___FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapElementClickEventArgs;

typedef struct __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapElementClickEventArgsVtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapElementClickEventArgs* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapElementClickEventArgs* This);
    ULONG (STDMETHODCALLTYPE* Release)(__FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapElementClickEventArgs* This);
    HRESULT (STDMETHODCALLTYPE* Invoke)(__FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapElementClickEventArgs* This,
        __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl* sender,
        __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementClickEventArgs* args);

    END_INTERFACE
} __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapElementClickEventArgsVtbl;

interface __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapElementClickEventArgs
{
    CONST_VTBL struct __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapElementClickEventArgsVtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapElementClickEventArgs_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapElementClickEventArgs_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapElementClickEventArgs_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapElementClickEventArgs_Invoke(This, sender, args) \
    ((This)->lpVtbl->Invoke(This, sender, args))

#endif /* COBJMACROS */

#endif // ____FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapElementClickEventArgs_INTERFACE_DEFINED__
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapElementPointerEnteredEventArgs_INTERFACE_DEFINED__)
#define ____FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapElementPointerEnteredEventArgs_INTERFACE_DEFINED__

typedef interface __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapElementPointerEnteredEventArgs __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapElementPointerEnteredEventArgs;

//  Declare the parameterized interface IID.
EXTERN_C const IID IID___FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapElementPointerEnteredEventArgs;

typedef struct __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapElementPointerEnteredEventArgsVtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapElementPointerEnteredEventArgs* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapElementPointerEnteredEventArgs* This);
    ULONG (STDMETHODCALLTYPE* Release)(__FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapElementPointerEnteredEventArgs* This);
    HRESULT (STDMETHODCALLTYPE* Invoke)(__FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapElementPointerEnteredEventArgs* This,
        __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl* sender,
        __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementPointerEnteredEventArgs* args);

    END_INTERFACE
} __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapElementPointerEnteredEventArgsVtbl;

interface __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapElementPointerEnteredEventArgs
{
    CONST_VTBL struct __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapElementPointerEnteredEventArgsVtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapElementPointerEnteredEventArgs_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapElementPointerEnteredEventArgs_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapElementPointerEnteredEventArgs_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapElementPointerEnteredEventArgs_Invoke(This, sender, args) \
    ((This)->lpVtbl->Invoke(This, sender, args))

#endif /* COBJMACROS */

#endif // ____FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapElementPointerEnteredEventArgs_INTERFACE_DEFINED__
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapElementPointerExitedEventArgs_INTERFACE_DEFINED__)
#define ____FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapElementPointerExitedEventArgs_INTERFACE_DEFINED__

typedef interface __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapElementPointerExitedEventArgs __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapElementPointerExitedEventArgs;

//  Declare the parameterized interface IID.
EXTERN_C const IID IID___FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapElementPointerExitedEventArgs;

typedef struct __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapElementPointerExitedEventArgsVtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapElementPointerExitedEventArgs* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapElementPointerExitedEventArgs* This);
    ULONG (STDMETHODCALLTYPE* Release)(__FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapElementPointerExitedEventArgs* This);
    HRESULT (STDMETHODCALLTYPE* Invoke)(__FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapElementPointerExitedEventArgs* This,
        __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl* sender,
        __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementPointerExitedEventArgs* args);

    END_INTERFACE
} __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapElementPointerExitedEventArgsVtbl;

interface __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapElementPointerExitedEventArgs
{
    CONST_VTBL struct __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapElementPointerExitedEventArgsVtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapElementPointerExitedEventArgs_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapElementPointerExitedEventArgs_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapElementPointerExitedEventArgs_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapElementPointerExitedEventArgs_Invoke(This, sender, args) \
    ((This)->lpVtbl->Invoke(This, sender, args))

#endif /* COBJMACROS */

#endif // ____FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapElementPointerExitedEventArgs_INTERFACE_DEFINED__
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapInputEventArgs_INTERFACE_DEFINED__)
#define ____FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapInputEventArgs_INTERFACE_DEFINED__

typedef interface __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapInputEventArgs __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapInputEventArgs;

//  Declare the parameterized interface IID.
EXTERN_C const IID IID___FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapInputEventArgs;

typedef struct __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapInputEventArgsVtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapInputEventArgs* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapInputEventArgs* This);
    ULONG (STDMETHODCALLTYPE* Release)(__FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapInputEventArgs* This);
    HRESULT (STDMETHODCALLTYPE* Invoke)(__FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapInputEventArgs* This,
        __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl* sender,
        __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapInputEventArgs* args);

    END_INTERFACE
} __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapInputEventArgsVtbl;

interface __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapInputEventArgs
{
    CONST_VTBL struct __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapInputEventArgsVtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapInputEventArgs_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapInputEventArgs_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapInputEventArgs_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapInputEventArgs_Invoke(This, sender, args) \
    ((This)->lpVtbl->Invoke(This, sender, args))

#endif /* COBJMACROS */

#endif // ____FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapInputEventArgs_INTERFACE_DEFINED__
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x20000
#if !defined(____FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapRightTappedEventArgs_INTERFACE_DEFINED__)
#define ____FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapRightTappedEventArgs_INTERFACE_DEFINED__

typedef interface __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapRightTappedEventArgs __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapRightTappedEventArgs;

//  Declare the parameterized interface IID.
EXTERN_C const IID IID___FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapRightTappedEventArgs;

typedef struct __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapRightTappedEventArgsVtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapRightTappedEventArgs* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapRightTappedEventArgs* This);
    ULONG (STDMETHODCALLTYPE* Release)(__FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapRightTappedEventArgs* This);
    HRESULT (STDMETHODCALLTYPE* Invoke)(__FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapRightTappedEventArgs* This,
        __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl* sender,
        __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapRightTappedEventArgs* args);

    END_INTERFACE
} __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapRightTappedEventArgsVtbl;

interface __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapRightTappedEventArgs
{
    CONST_VTBL struct __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapRightTappedEventArgsVtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapRightTappedEventArgs_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapRightTappedEventArgs_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapRightTappedEventArgs_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapRightTappedEventArgs_Invoke(This, sender, args) \
    ((This)->lpVtbl->Invoke(This, sender, args))

#endif /* COBJMACROS */

#endif // ____FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapRightTappedEventArgs_INTERFACE_DEFINED__
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x20000
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapTargetCameraChangedEventArgs_INTERFACE_DEFINED__)
#define ____FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapTargetCameraChangedEventArgs_INTERFACE_DEFINED__

typedef interface __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapTargetCameraChangedEventArgs __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapTargetCameraChangedEventArgs;

//  Declare the parameterized interface IID.
EXTERN_C const IID IID___FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapTargetCameraChangedEventArgs;

typedef struct __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapTargetCameraChangedEventArgsVtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapTargetCameraChangedEventArgs* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapTargetCameraChangedEventArgs* This);
    ULONG (STDMETHODCALLTYPE* Release)(__FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapTargetCameraChangedEventArgs* This);
    HRESULT (STDMETHODCALLTYPE* Invoke)(__FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapTargetCameraChangedEventArgs* This,
        __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl* sender,
        __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTargetCameraChangedEventArgs* args);

    END_INTERFACE
} __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapTargetCameraChangedEventArgsVtbl;

interface __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapTargetCameraChangedEventArgs
{
    CONST_VTBL struct __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapTargetCameraChangedEventArgsVtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapTargetCameraChangedEventArgs_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapTargetCameraChangedEventArgs_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapTargetCameraChangedEventArgs_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapTargetCameraChangedEventArgs_Invoke(This, sender, args) \
    ((This)->lpVtbl->Invoke(This, sender, args))

#endif /* COBJMACROS */

#endif // ____FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapTargetCameraChangedEventArgs_INTERFACE_DEFINED__
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x50000
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x50000
#if !defined(____FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapElementsLayer_Windows__CUI__CXaml__CControls__CMaps__CMapElementsLayerClickEventArgs_INTERFACE_DEFINED__)
#define ____FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapElementsLayer_Windows__CUI__CXaml__CControls__CMaps__CMapElementsLayerClickEventArgs_INTERFACE_DEFINED__

typedef interface __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapElementsLayer_Windows__CUI__CXaml__CControls__CMaps__CMapElementsLayerClickEventArgs __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapElementsLayer_Windows__CUI__CXaml__CControls__CMaps__CMapElementsLayerClickEventArgs;

//  Declare the parameterized interface IID.
EXTERN_C const IID IID___FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapElementsLayer_Windows__CUI__CXaml__CControls__CMaps__CMapElementsLayerClickEventArgs;

typedef struct __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapElementsLayer_Windows__CUI__CXaml__CControls__CMaps__CMapElementsLayerClickEventArgsVtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapElementsLayer_Windows__CUI__CXaml__CControls__CMaps__CMapElementsLayerClickEventArgs* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapElementsLayer_Windows__CUI__CXaml__CControls__CMaps__CMapElementsLayerClickEventArgs* This);
    ULONG (STDMETHODCALLTYPE* Release)(__FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapElementsLayer_Windows__CUI__CXaml__CControls__CMaps__CMapElementsLayerClickEventArgs* This);
    HRESULT (STDMETHODCALLTYPE* Invoke)(__FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapElementsLayer_Windows__CUI__CXaml__CControls__CMaps__CMapElementsLayerClickEventArgs* This,
        __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementsLayer* sender,
        __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementsLayerClickEventArgs* args);

    END_INTERFACE
} __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapElementsLayer_Windows__CUI__CXaml__CControls__CMaps__CMapElementsLayerClickEventArgsVtbl;

interface __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapElementsLayer_Windows__CUI__CXaml__CControls__CMaps__CMapElementsLayerClickEventArgs
{
    CONST_VTBL struct __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapElementsLayer_Windows__CUI__CXaml__CControls__CMaps__CMapElementsLayerClickEventArgsVtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapElementsLayer_Windows__CUI__CXaml__CControls__CMaps__CMapElementsLayerClickEventArgs_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapElementsLayer_Windows__CUI__CXaml__CControls__CMaps__CMapElementsLayerClickEventArgs_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapElementsLayer_Windows__CUI__CXaml__CControls__CMaps__CMapElementsLayerClickEventArgs_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapElementsLayer_Windows__CUI__CXaml__CControls__CMaps__CMapElementsLayerClickEventArgs_Invoke(This, sender, args) \
    ((This)->lpVtbl->Invoke(This, sender, args))

#endif /* COBJMACROS */

#endif // ____FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapElementsLayer_Windows__CUI__CXaml__CControls__CMaps__CMapElementsLayerClickEventArgs_INTERFACE_DEFINED__
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x50000
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x50000

#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x50000
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x50000
#if !defined(____FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapElementsLayer_Windows__CUI__CXaml__CControls__CMaps__CMapElementsLayerContextRequestedEventArgs_INTERFACE_DEFINED__)
#define ____FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapElementsLayer_Windows__CUI__CXaml__CControls__CMaps__CMapElementsLayerContextRequestedEventArgs_INTERFACE_DEFINED__

typedef interface __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapElementsLayer_Windows__CUI__CXaml__CControls__CMaps__CMapElementsLayerContextRequestedEventArgs __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapElementsLayer_Windows__CUI__CXaml__CControls__CMaps__CMapElementsLayerContextRequestedEventArgs;

//  Declare the parameterized interface IID.
EXTERN_C const IID IID___FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapElementsLayer_Windows__CUI__CXaml__CControls__CMaps__CMapElementsLayerContextRequestedEventArgs;

typedef struct __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapElementsLayer_Windows__CUI__CXaml__CControls__CMaps__CMapElementsLayerContextRequestedEventArgsVtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapElementsLayer_Windows__CUI__CXaml__CControls__CMaps__CMapElementsLayerContextRequestedEventArgs* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapElementsLayer_Windows__CUI__CXaml__CControls__CMaps__CMapElementsLayerContextRequestedEventArgs* This);
    ULONG (STDMETHODCALLTYPE* Release)(__FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapElementsLayer_Windows__CUI__CXaml__CControls__CMaps__CMapElementsLayerContextRequestedEventArgs* This);
    HRESULT (STDMETHODCALLTYPE* Invoke)(__FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapElementsLayer_Windows__CUI__CXaml__CControls__CMaps__CMapElementsLayerContextRequestedEventArgs* This,
        __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementsLayer* sender,
        __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementsLayerContextRequestedEventArgs* args);

    END_INTERFACE
} __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapElementsLayer_Windows__CUI__CXaml__CControls__CMaps__CMapElementsLayerContextRequestedEventArgsVtbl;

interface __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapElementsLayer_Windows__CUI__CXaml__CControls__CMaps__CMapElementsLayerContextRequestedEventArgs
{
    CONST_VTBL struct __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapElementsLayer_Windows__CUI__CXaml__CControls__CMaps__CMapElementsLayerContextRequestedEventArgsVtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapElementsLayer_Windows__CUI__CXaml__CControls__CMaps__CMapElementsLayerContextRequestedEventArgs_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapElementsLayer_Windows__CUI__CXaml__CControls__CMaps__CMapElementsLayerContextRequestedEventArgs_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapElementsLayer_Windows__CUI__CXaml__CControls__CMaps__CMapElementsLayerContextRequestedEventArgs_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapElementsLayer_Windows__CUI__CXaml__CControls__CMaps__CMapElementsLayerContextRequestedEventArgs_Invoke(This, sender, args) \
    ((This)->lpVtbl->Invoke(This, sender, args))

#endif /* COBJMACROS */

#endif // ____FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapElementsLayer_Windows__CUI__CXaml__CControls__CMaps__CMapElementsLayerContextRequestedEventArgs_INTERFACE_DEFINED__
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x50000
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x50000

#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x50000
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x50000
#if !defined(____FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapElementsLayer_Windows__CUI__CXaml__CControls__CMaps__CMapElementsLayerPointerEnteredEventArgs_INTERFACE_DEFINED__)
#define ____FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapElementsLayer_Windows__CUI__CXaml__CControls__CMaps__CMapElementsLayerPointerEnteredEventArgs_INTERFACE_DEFINED__

typedef interface __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapElementsLayer_Windows__CUI__CXaml__CControls__CMaps__CMapElementsLayerPointerEnteredEventArgs __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapElementsLayer_Windows__CUI__CXaml__CControls__CMaps__CMapElementsLayerPointerEnteredEventArgs;

//  Declare the parameterized interface IID.
EXTERN_C const IID IID___FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapElementsLayer_Windows__CUI__CXaml__CControls__CMaps__CMapElementsLayerPointerEnteredEventArgs;

typedef struct __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapElementsLayer_Windows__CUI__CXaml__CControls__CMaps__CMapElementsLayerPointerEnteredEventArgsVtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapElementsLayer_Windows__CUI__CXaml__CControls__CMaps__CMapElementsLayerPointerEnteredEventArgs* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapElementsLayer_Windows__CUI__CXaml__CControls__CMaps__CMapElementsLayerPointerEnteredEventArgs* This);
    ULONG (STDMETHODCALLTYPE* Release)(__FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapElementsLayer_Windows__CUI__CXaml__CControls__CMaps__CMapElementsLayerPointerEnteredEventArgs* This);
    HRESULT (STDMETHODCALLTYPE* Invoke)(__FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapElementsLayer_Windows__CUI__CXaml__CControls__CMaps__CMapElementsLayerPointerEnteredEventArgs* This,
        __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementsLayer* sender,
        __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementsLayerPointerEnteredEventArgs* args);

    END_INTERFACE
} __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapElementsLayer_Windows__CUI__CXaml__CControls__CMaps__CMapElementsLayerPointerEnteredEventArgsVtbl;

interface __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapElementsLayer_Windows__CUI__CXaml__CControls__CMaps__CMapElementsLayerPointerEnteredEventArgs
{
    CONST_VTBL struct __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapElementsLayer_Windows__CUI__CXaml__CControls__CMaps__CMapElementsLayerPointerEnteredEventArgsVtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapElementsLayer_Windows__CUI__CXaml__CControls__CMaps__CMapElementsLayerPointerEnteredEventArgs_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapElementsLayer_Windows__CUI__CXaml__CControls__CMaps__CMapElementsLayerPointerEnteredEventArgs_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapElementsLayer_Windows__CUI__CXaml__CControls__CMaps__CMapElementsLayerPointerEnteredEventArgs_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapElementsLayer_Windows__CUI__CXaml__CControls__CMaps__CMapElementsLayerPointerEnteredEventArgs_Invoke(This, sender, args) \
    ((This)->lpVtbl->Invoke(This, sender, args))

#endif /* COBJMACROS */

#endif // ____FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapElementsLayer_Windows__CUI__CXaml__CControls__CMaps__CMapElementsLayerPointerEnteredEventArgs_INTERFACE_DEFINED__
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x50000
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x50000

#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x50000
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x50000
#if !defined(____FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapElementsLayer_Windows__CUI__CXaml__CControls__CMaps__CMapElementsLayerPointerExitedEventArgs_INTERFACE_DEFINED__)
#define ____FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapElementsLayer_Windows__CUI__CXaml__CControls__CMaps__CMapElementsLayerPointerExitedEventArgs_INTERFACE_DEFINED__

typedef interface __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapElementsLayer_Windows__CUI__CXaml__CControls__CMaps__CMapElementsLayerPointerExitedEventArgs __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapElementsLayer_Windows__CUI__CXaml__CControls__CMaps__CMapElementsLayerPointerExitedEventArgs;

//  Declare the parameterized interface IID.
EXTERN_C const IID IID___FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapElementsLayer_Windows__CUI__CXaml__CControls__CMaps__CMapElementsLayerPointerExitedEventArgs;

typedef struct __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapElementsLayer_Windows__CUI__CXaml__CControls__CMaps__CMapElementsLayerPointerExitedEventArgsVtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapElementsLayer_Windows__CUI__CXaml__CControls__CMaps__CMapElementsLayerPointerExitedEventArgs* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapElementsLayer_Windows__CUI__CXaml__CControls__CMaps__CMapElementsLayerPointerExitedEventArgs* This);
    ULONG (STDMETHODCALLTYPE* Release)(__FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapElementsLayer_Windows__CUI__CXaml__CControls__CMaps__CMapElementsLayerPointerExitedEventArgs* This);
    HRESULT (STDMETHODCALLTYPE* Invoke)(__FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapElementsLayer_Windows__CUI__CXaml__CControls__CMaps__CMapElementsLayerPointerExitedEventArgs* This,
        __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementsLayer* sender,
        __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementsLayerPointerExitedEventArgs* args);

    END_INTERFACE
} __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapElementsLayer_Windows__CUI__CXaml__CControls__CMaps__CMapElementsLayerPointerExitedEventArgsVtbl;

interface __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapElementsLayer_Windows__CUI__CXaml__CControls__CMaps__CMapElementsLayerPointerExitedEventArgs
{
    CONST_VTBL struct __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapElementsLayer_Windows__CUI__CXaml__CControls__CMaps__CMapElementsLayerPointerExitedEventArgsVtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapElementsLayer_Windows__CUI__CXaml__CControls__CMaps__CMapElementsLayerPointerExitedEventArgs_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapElementsLayer_Windows__CUI__CXaml__CControls__CMaps__CMapElementsLayerPointerExitedEventArgs_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapElementsLayer_Windows__CUI__CXaml__CControls__CMaps__CMapElementsLayerPointerExitedEventArgs_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapElementsLayer_Windows__CUI__CXaml__CControls__CMaps__CMapElementsLayerPointerExitedEventArgs_Invoke(This, sender, args) \
    ((This)->lpVtbl->Invoke(This, sender, args))

#endif /* COBJMACROS */

#endif // ____FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapElementsLayer_Windows__CUI__CXaml__CControls__CMaps__CMapElementsLayerPointerExitedEventArgs_INTERFACE_DEFINED__
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x50000
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x50000

#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapScene_Windows__CUI__CXaml__CControls__CMaps__CMapTargetCameraChangedEventArgs_INTERFACE_DEFINED__)
#define ____FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapScene_Windows__CUI__CXaml__CControls__CMaps__CMapTargetCameraChangedEventArgs_INTERFACE_DEFINED__

typedef interface __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapScene_Windows__CUI__CXaml__CControls__CMaps__CMapTargetCameraChangedEventArgs __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapScene_Windows__CUI__CXaml__CControls__CMaps__CMapTargetCameraChangedEventArgs;

//  Declare the parameterized interface IID.
EXTERN_C const IID IID___FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapScene_Windows__CUI__CXaml__CControls__CMaps__CMapTargetCameraChangedEventArgs;

typedef struct __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapScene_Windows__CUI__CXaml__CControls__CMaps__CMapTargetCameraChangedEventArgsVtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapScene_Windows__CUI__CXaml__CControls__CMaps__CMapTargetCameraChangedEventArgs* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapScene_Windows__CUI__CXaml__CControls__CMaps__CMapTargetCameraChangedEventArgs* This);
    ULONG (STDMETHODCALLTYPE* Release)(__FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapScene_Windows__CUI__CXaml__CControls__CMaps__CMapTargetCameraChangedEventArgs* This);
    HRESULT (STDMETHODCALLTYPE* Invoke)(__FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapScene_Windows__CUI__CXaml__CControls__CMaps__CMapTargetCameraChangedEventArgs* This,
        __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapScene* sender,
        __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTargetCameraChangedEventArgs* args);

    END_INTERFACE
} __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapScene_Windows__CUI__CXaml__CControls__CMaps__CMapTargetCameraChangedEventArgsVtbl;

interface __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapScene_Windows__CUI__CXaml__CControls__CMaps__CMapTargetCameraChangedEventArgs
{
    CONST_VTBL struct __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapScene_Windows__CUI__CXaml__CControls__CMaps__CMapTargetCameraChangedEventArgsVtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapScene_Windows__CUI__CXaml__CControls__CMaps__CMapTargetCameraChangedEventArgs_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapScene_Windows__CUI__CXaml__CControls__CMaps__CMapTargetCameraChangedEventArgs_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapScene_Windows__CUI__CXaml__CControls__CMaps__CMapTargetCameraChangedEventArgs_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapScene_Windows__CUI__CXaml__CControls__CMaps__CMapTargetCameraChangedEventArgs_Invoke(This, sender, args) \
    ((This)->lpVtbl->Invoke(This, sender, args))

#endif /* COBJMACROS */

#endif // ____FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapScene_Windows__CUI__CXaml__CControls__CMaps__CMapTargetCameraChangedEventArgs_INTERFACE_DEFINED__
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

typedef enum __x_ABI_CWindows_CDevices_CGeolocation_CAltitudeReferenceSystem __x_ABI_CWindows_CDevices_CGeolocation_CAltitudeReferenceSystem;

#ifndef ____x_ABI_CWindows_CDevices_CGeolocation_CIGeoboundingBox_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CGeolocation_CIGeoboundingBox_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CDevices_CGeolocation_CIGeoboundingBox __x_ABI_CWindows_CDevices_CGeolocation_CIGeoboundingBox;

#endif // ____x_ABI_CWindows_CDevices_CGeolocation_CIGeoboundingBox_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CFoundation_CIPropertyValue_FWD_DEFINED__
#define ____x_ABI_CWindows_CFoundation_CIPropertyValue_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CFoundation_CIPropertyValue __x_ABI_CWindows_CFoundation_CIPropertyValue;

#endif // ____x_ABI_CWindows_CFoundation_CIPropertyValue_FWD_DEFINED__

typedef struct __x_ABI_CWindows_CFoundation_CNumerics_CVector3 __x_ABI_CWindows_CFoundation_CNumerics_CVector3;

typedef struct __x_ABI_CWindows_CFoundation_CPoint __x_ABI_CWindows_CFoundation_CPoint;

typedef struct __x_ABI_CWindows_CFoundation_CTimeSpan __x_ABI_CWindows_CFoundation_CTimeSpan;

#ifndef ____x_ABI_CWindows_CFoundation_CIUriRuntimeClass_FWD_DEFINED__
#define ____x_ABI_CWindows_CFoundation_CIUriRuntimeClass_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CFoundation_CIUriRuntimeClass __x_ABI_CWindows_CFoundation_CIUriRuntimeClass;

#endif // ____x_ABI_CWindows_CFoundation_CIUriRuntimeClass_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CServices_CMaps_CIMapRoute_FWD_DEFINED__
#define ____x_ABI_CWindows_CServices_CMaps_CIMapRoute_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CServices_CMaps_CIMapRoute __x_ABI_CWindows_CServices_CMaps_CIMapRoute;

#endif // ____x_ABI_CWindows_CServices_CMaps_CIMapRoute_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CStorage_CStreams_CIRandomAccessStreamReference_FWD_DEFINED__
#define ____x_ABI_CWindows_CStorage_CStreams_CIRandomAccessStreamReference_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CStorage_CStreams_CIRandomAccessStreamReference __x_ABI_CWindows_CStorage_CStreams_CIRandomAccessStreamReference;

#endif // ____x_ABI_CWindows_CStorage_CStreams_CIRandomAccessStreamReference_FWD_DEFINED__

typedef struct __x_ABI_CWindows_CUI_CColor __x_ABI_CWindows_CUI_CColor;

#ifndef ____x_ABI_CWindows_CUI_CXaml_CIDataTemplate_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CIDataTemplate_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CUI_CXaml_CIDataTemplate __x_ABI_CWindows_CUI_CXaml_CIDataTemplate;

#endif // ____x_ABI_CWindows_CUI_CXaml_CIDataTemplate_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CUI_CXaml_CIDependencyProperty_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CXaml_CIDependencyProperty_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CUI_CXaml_CIDependencyProperty __x_ABI_CWindows_CUI_CXaml_CIDependencyProperty;

#endif // ____x_ABI_CWindows_CUI_CXaml_CIDependencyProperty_FWD_DEFINED__

typedef enum __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CMapAnimationKind __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CMapAnimationKind;

typedef enum __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CMapCameraChangeReason __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CMapCameraChangeReason;

typedef enum __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CMapColorScheme __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CMapColorScheme;

typedef enum __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CMapElementCollisionBehavior __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CMapElementCollisionBehavior;

typedef enum __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CMapInteractionMode __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CMapInteractionMode;

typedef enum __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CMapLoadingStatus __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CMapLoadingStatus;

typedef enum __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CMapModel3DShadingOption __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CMapModel3DShadingOption;

typedef enum __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CMapPanInteractionMode __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CMapPanInteractionMode;

typedef enum __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CMapProjection __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CMapProjection;

typedef enum __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CMapStyle __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CMapStyle;

typedef enum __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CMapTileAnimationState __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CMapTileAnimationState;

typedef enum __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CMapTileLayer __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CMapTileLayer;

typedef enum __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CMapVisibleRegionKind __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CMapVisibleRegionKind;

typedef enum __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CMapWatermarkMode __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CMapWatermarkMode;

typedef struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CMapZoomLevelRange __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CMapZoomLevelRange;

/*
 *
 * Struct Windows.UI.Xaml.Controls.Maps.MapAnimationKind
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
enum __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CMapAnimationKind
{
    MapAnimationKind_Default = 0,
    MapAnimationKind_None = 1,
    MapAnimationKind_Linear = 2,
    MapAnimationKind_Bow = 3,
};
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Struct Windows.UI.Xaml.Controls.Maps.MapCameraChangeReason
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 2.0
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x20000
enum __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CMapCameraChangeReason
{
    MapCameraChangeReason_System = 0,
    MapCameraChangeReason_UserInteraction = 1,
    MapCameraChangeReason_Programmatic = 2,
};
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x20000

/*
 *
 * Struct Windows.UI.Xaml.Controls.Maps.MapColorScheme
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
enum __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CMapColorScheme
{
    MapColorScheme_Light = 0,
    MapColorScheme_Dark = 1,
};
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Struct Windows.UI.Xaml.Controls.Maps.MapElementCollisionBehavior
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
enum __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CMapElementCollisionBehavior
{
    MapElementCollisionBehavior_Hide = 0,
    MapElementCollisionBehavior_RemainVisible = 1,
};
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Struct Windows.UI.Xaml.Controls.Maps.MapInteractionMode
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
enum __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CMapInteractionMode
{
    MapInteractionMode_Auto = 0,
    MapInteractionMode_Disabled = 1,
    MapInteractionMode_GestureOnly = 2,
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x30000
    MapInteractionMode_PointerAndKeyboard = 2,
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x30000
    MapInteractionMode_ControlOnly = 3,
    MapInteractionMode_GestureAndControl = 4,
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x30000
    MapInteractionMode_PointerKeyboardAndControl = 4,
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x30000
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x30000
    MapInteractionMode_PointerOnly = 5,
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x30000
};
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Struct Windows.UI.Xaml.Controls.Maps.MapLoadingStatus
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
enum __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CMapLoadingStatus
{
    MapLoadingStatus_Loading = 0,
    MapLoadingStatus_Loaded = 1,
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x20000
    MapLoadingStatus_DataUnavailable = 2,
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x20000
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x80000
    MapLoadingStatus_DownloadedMapsManagerUnavailable = 3,
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x80000
};
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Struct Windows.UI.Xaml.Controls.Maps.MapModel3DShadingOption
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 5.0
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x50000
enum __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CMapModel3DShadingOption
{
    MapModel3DShadingOption_Default = 0,
    MapModel3DShadingOption_Flat = 1,
    MapModel3DShadingOption_Smooth = 2,
};
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x50000

/*
 *
 * Struct Windows.UI.Xaml.Controls.Maps.MapPanInteractionMode
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
enum __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CMapPanInteractionMode
{
    MapPanInteractionMode_Auto = 0,
    MapPanInteractionMode_Disabled = 1,
};
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Struct Windows.UI.Xaml.Controls.Maps.MapProjection
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 4.0
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x40000
enum __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CMapProjection
{
    MapProjection_WebMercator = 0,
    MapProjection_Globe = 1,
};
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x40000

/*
 *
 * Struct Windows.UI.Xaml.Controls.Maps.MapStyle
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
enum __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CMapStyle
{
    MapStyle_None = 0,
    MapStyle_Road = 1,
    MapStyle_Aerial = 2,
    MapStyle_AerialWithRoads = 3,
    MapStyle_Terrain = 4,
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
    MapStyle_Aerial3D = 5,
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
    MapStyle_Aerial3DWithRoads = 6,
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x40000
    MapStyle_Custom = 7,
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x40000
};
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Struct Windows.UI.Xaml.Controls.Maps.MapTileAnimationState
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 7.0
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x70000
enum __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CMapTileAnimationState
{
    MapTileAnimationState_Stopped = 0,
    MapTileAnimationState_Paused = 1,
    MapTileAnimationState_Playing = 2,
};
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x70000

/*
 *
 * Struct Windows.UI.Xaml.Controls.Maps.MapTileLayer
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
enum __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CMapTileLayer
{
    MapTileLayer_LabelOverlay = 0,
    MapTileLayer_RoadOverlay = 1,
    MapTileLayer_AreaOverlay = 2,
    MapTileLayer_BackgroundOverlay = 3,
    MapTileLayer_BackgroundReplacement = 4,
};
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Struct Windows.UI.Xaml.Controls.Maps.MapVisibleRegionKind
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 3.0
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x30000
enum __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CMapVisibleRegionKind
{
    MapVisibleRegionKind_Near = 0,
    MapVisibleRegionKind_Full = 1,
};
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x30000

/*
 *
 * Struct Windows.UI.Xaml.Controls.Maps.MapWatermarkMode
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
enum __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CMapWatermarkMode
{
    MapWatermarkMode_Automatic = 0,
    MapWatermarkMode_On = 1,
};
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Struct Windows.UI.Xaml.Controls.Maps.MapZoomLevelRange
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CMapZoomLevelRange
{
    DOUBLE Min;
    DOUBLE Max;
};
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Interface Windows.UI.Xaml.Controls.Maps.ICustomMapTileDataSource
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Interface is a part of the implementation of type Windows.UI.Xaml.Controls.Maps.CustomMapTileDataSource
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CICustomMapTileDataSource_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CICustomMapTileDataSource_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_UI_Xaml_Controls_Maps_ICustomMapTileDataSource[] = L"Windows.UI.Xaml.Controls.Maps.ICustomMapTileDataSource";
typedef struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CICustomMapTileDataSourceVtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CICustomMapTileDataSource* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CICustomMapTileDataSource* This);
    ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CICustomMapTileDataSource* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CICustomMapTileDataSource* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CICustomMapTileDataSource* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CICustomMapTileDataSource* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* add_BitmapRequested)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CICustomMapTileDataSource* This,
        __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CCustomMapTileDataSource_Windows__CUI__CXaml__CControls__CMaps__CMapTileBitmapRequestedEventArgs* handler,
        EventRegistrationToken* token);
    HRESULT (STDMETHODCALLTYPE* remove_BitmapRequested)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CICustomMapTileDataSource* This,
        EventRegistrationToken token);

    END_INTERFACE
} __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CICustomMapTileDataSourceVtbl;

interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CICustomMapTileDataSource
{
    CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CICustomMapTileDataSourceVtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CICustomMapTileDataSource_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CICustomMapTileDataSource_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CICustomMapTileDataSource_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CICustomMapTileDataSource_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CICustomMapTileDataSource_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CICustomMapTileDataSource_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CICustomMapTileDataSource_add_BitmapRequested(This, handler, token) \
    ((This)->lpVtbl->add_BitmapRequested(This, handler, token))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CICustomMapTileDataSource_remove_BitmapRequested(This, token) \
    ((This)->lpVtbl->remove_BitmapRequested(This, token))

#endif /* COBJMACROS */

EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CICustomMapTileDataSource;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CICustomMapTileDataSource_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Interface Windows.UI.Xaml.Controls.Maps.ICustomMapTileDataSourceFactory
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Interface is a part of the implementation of type Windows.UI.Xaml.Controls.Maps.CustomMapTileDataSource
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CICustomMapTileDataSourceFactory_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CICustomMapTileDataSourceFactory_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_UI_Xaml_Controls_Maps_ICustomMapTileDataSourceFactory[] = L"Windows.UI.Xaml.Controls.Maps.ICustomMapTileDataSourceFactory";
typedef struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CICustomMapTileDataSourceFactoryVtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CICustomMapTileDataSourceFactory* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CICustomMapTileDataSourceFactory* This);
    ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CICustomMapTileDataSourceFactory* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CICustomMapTileDataSourceFactory* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CICustomMapTileDataSourceFactory* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CICustomMapTileDataSourceFactory* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* CreateInstance)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CICustomMapTileDataSourceFactory* This,
        IInspectable* baseInterface,
        IInspectable** innerInterface,
        __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CICustomMapTileDataSource** value);

    END_INTERFACE
} __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CICustomMapTileDataSourceFactoryVtbl;

interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CICustomMapTileDataSourceFactory
{
    CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CICustomMapTileDataSourceFactoryVtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CICustomMapTileDataSourceFactory_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CICustomMapTileDataSourceFactory_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CICustomMapTileDataSourceFactory_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CICustomMapTileDataSourceFactory_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CICustomMapTileDataSourceFactory_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CICustomMapTileDataSourceFactory_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CICustomMapTileDataSourceFactory_CreateInstance(This, baseInterface, innerInterface, value) \
    ((This)->lpVtbl->CreateInstance(This, baseInterface, innerInterface, value))

#endif /* COBJMACROS */

EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CICustomMapTileDataSourceFactory;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CICustomMapTileDataSourceFactory_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Interface Windows.UI.Xaml.Controls.Maps.IHttpMapTileDataSource
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Interface is a part of the implementation of type Windows.UI.Xaml.Controls.Maps.HttpMapTileDataSource
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIHttpMapTileDataSource_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIHttpMapTileDataSource_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_UI_Xaml_Controls_Maps_IHttpMapTileDataSource[] = L"Windows.UI.Xaml.Controls.Maps.IHttpMapTileDataSource";
typedef struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIHttpMapTileDataSourceVtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIHttpMapTileDataSource* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIHttpMapTileDataSource* This);
    ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIHttpMapTileDataSource* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIHttpMapTileDataSource* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIHttpMapTileDataSource* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIHttpMapTileDataSource* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* get_UriFormatString)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIHttpMapTileDataSource* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* put_UriFormatString)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIHttpMapTileDataSource* This,
        HSTRING value);
    HRESULT (STDMETHODCALLTYPE* get_AdditionalRequestHeaders)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIHttpMapTileDataSource* This,
        __FIMap_2_HSTRING_HSTRING** value);
    HRESULT (STDMETHODCALLTYPE* get_AllowCaching)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIHttpMapTileDataSource* This,
        boolean* value);
    HRESULT (STDMETHODCALLTYPE* put_AllowCaching)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIHttpMapTileDataSource* This,
        boolean value);
    HRESULT (STDMETHODCALLTYPE* add_UriRequested)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIHttpMapTileDataSource* This,
        __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CHttpMapTileDataSource_Windows__CUI__CXaml__CControls__CMaps__CMapTileUriRequestedEventArgs* handler,
        EventRegistrationToken* token);
    HRESULT (STDMETHODCALLTYPE* remove_UriRequested)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIHttpMapTileDataSource* This,
        EventRegistrationToken token);

    END_INTERFACE
} __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIHttpMapTileDataSourceVtbl;

interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIHttpMapTileDataSource
{
    CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIHttpMapTileDataSourceVtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIHttpMapTileDataSource_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIHttpMapTileDataSource_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIHttpMapTileDataSource_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIHttpMapTileDataSource_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIHttpMapTileDataSource_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIHttpMapTileDataSource_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIHttpMapTileDataSource_get_UriFormatString(This, value) \
    ((This)->lpVtbl->get_UriFormatString(This, value))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIHttpMapTileDataSource_put_UriFormatString(This, value) \
    ((This)->lpVtbl->put_UriFormatString(This, value))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIHttpMapTileDataSource_get_AdditionalRequestHeaders(This, value) \
    ((This)->lpVtbl->get_AdditionalRequestHeaders(This, value))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIHttpMapTileDataSource_get_AllowCaching(This, value) \
    ((This)->lpVtbl->get_AllowCaching(This, value))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIHttpMapTileDataSource_put_AllowCaching(This, value) \
    ((This)->lpVtbl->put_AllowCaching(This, value))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIHttpMapTileDataSource_add_UriRequested(This, handler, token) \
    ((This)->lpVtbl->add_UriRequested(This, handler, token))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIHttpMapTileDataSource_remove_UriRequested(This, token) \
    ((This)->lpVtbl->remove_UriRequested(This, token))

#endif /* COBJMACROS */

EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIHttpMapTileDataSource;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIHttpMapTileDataSource_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Interface Windows.UI.Xaml.Controls.Maps.IHttpMapTileDataSourceFactory
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Interface is a part of the implementation of type Windows.UI.Xaml.Controls.Maps.HttpMapTileDataSource
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIHttpMapTileDataSourceFactory_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIHttpMapTileDataSourceFactory_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_UI_Xaml_Controls_Maps_IHttpMapTileDataSourceFactory[] = L"Windows.UI.Xaml.Controls.Maps.IHttpMapTileDataSourceFactory";
typedef struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIHttpMapTileDataSourceFactoryVtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIHttpMapTileDataSourceFactory* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIHttpMapTileDataSourceFactory* This);
    ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIHttpMapTileDataSourceFactory* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIHttpMapTileDataSourceFactory* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIHttpMapTileDataSourceFactory* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIHttpMapTileDataSourceFactory* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* CreateInstance)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIHttpMapTileDataSourceFactory* This,
        IInspectable* baseInterface,
        IInspectable** innerInterface,
        __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIHttpMapTileDataSource** value);
    HRESULT (STDMETHODCALLTYPE* CreateInstanceWithUriFormatString)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIHttpMapTileDataSourceFactory* This,
        HSTRING uriFormatString,
        IInspectable* baseInterface,
        IInspectable** innerInterface,
        __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIHttpMapTileDataSource** value);

    END_INTERFACE
} __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIHttpMapTileDataSourceFactoryVtbl;

interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIHttpMapTileDataSourceFactory
{
    CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIHttpMapTileDataSourceFactoryVtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIHttpMapTileDataSourceFactory_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIHttpMapTileDataSourceFactory_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIHttpMapTileDataSourceFactory_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIHttpMapTileDataSourceFactory_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIHttpMapTileDataSourceFactory_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIHttpMapTileDataSourceFactory_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIHttpMapTileDataSourceFactory_CreateInstance(This, baseInterface, innerInterface, value) \
    ((This)->lpVtbl->CreateInstance(This, baseInterface, innerInterface, value))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIHttpMapTileDataSourceFactory_CreateInstanceWithUriFormatString(This, uriFormatString, baseInterface, innerInterface, value) \
    ((This)->lpVtbl->CreateInstanceWithUriFormatString(This, uriFormatString, baseInterface, innerInterface, value))

#endif /* COBJMACROS */

EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIHttpMapTileDataSourceFactory;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIHttpMapTileDataSourceFactory_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Interface Windows.UI.Xaml.Controls.Maps.ILocalMapTileDataSource
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Interface is a part of the implementation of type Windows.UI.Xaml.Controls.Maps.LocalMapTileDataSource
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CILocalMapTileDataSource_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CILocalMapTileDataSource_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_UI_Xaml_Controls_Maps_ILocalMapTileDataSource[] = L"Windows.UI.Xaml.Controls.Maps.ILocalMapTileDataSource";
typedef struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CILocalMapTileDataSourceVtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CILocalMapTileDataSource* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CILocalMapTileDataSource* This);
    ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CILocalMapTileDataSource* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CILocalMapTileDataSource* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CILocalMapTileDataSource* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CILocalMapTileDataSource* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* get_UriFormatString)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CILocalMapTileDataSource* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* put_UriFormatString)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CILocalMapTileDataSource* This,
        HSTRING value);
    HRESULT (STDMETHODCALLTYPE* add_UriRequested)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CILocalMapTileDataSource* This,
        __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CLocalMapTileDataSource_Windows__CUI__CXaml__CControls__CMaps__CMapTileUriRequestedEventArgs* handler,
        EventRegistrationToken* token);
    HRESULT (STDMETHODCALLTYPE* remove_UriRequested)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CILocalMapTileDataSource* This,
        EventRegistrationToken token);

    END_INTERFACE
} __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CILocalMapTileDataSourceVtbl;

interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CILocalMapTileDataSource
{
    CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CILocalMapTileDataSourceVtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CILocalMapTileDataSource_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CILocalMapTileDataSource_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CILocalMapTileDataSource_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CILocalMapTileDataSource_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CILocalMapTileDataSource_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CILocalMapTileDataSource_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CILocalMapTileDataSource_get_UriFormatString(This, value) \
    ((This)->lpVtbl->get_UriFormatString(This, value))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CILocalMapTileDataSource_put_UriFormatString(This, value) \
    ((This)->lpVtbl->put_UriFormatString(This, value))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CILocalMapTileDataSource_add_UriRequested(This, handler, token) \
    ((This)->lpVtbl->add_UriRequested(This, handler, token))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CILocalMapTileDataSource_remove_UriRequested(This, token) \
    ((This)->lpVtbl->remove_UriRequested(This, token))

#endif /* COBJMACROS */

EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CILocalMapTileDataSource;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CILocalMapTileDataSource_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Interface Windows.UI.Xaml.Controls.Maps.ILocalMapTileDataSourceFactory
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Interface is a part of the implementation of type Windows.UI.Xaml.Controls.Maps.LocalMapTileDataSource
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CILocalMapTileDataSourceFactory_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CILocalMapTileDataSourceFactory_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_UI_Xaml_Controls_Maps_ILocalMapTileDataSourceFactory[] = L"Windows.UI.Xaml.Controls.Maps.ILocalMapTileDataSourceFactory";
typedef struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CILocalMapTileDataSourceFactoryVtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CILocalMapTileDataSourceFactory* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CILocalMapTileDataSourceFactory* This);
    ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CILocalMapTileDataSourceFactory* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CILocalMapTileDataSourceFactory* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CILocalMapTileDataSourceFactory* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CILocalMapTileDataSourceFactory* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* CreateInstance)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CILocalMapTileDataSourceFactory* This,
        IInspectable* baseInterface,
        IInspectable** innerInterface,
        __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CILocalMapTileDataSource** value);
    HRESULT (STDMETHODCALLTYPE* CreateInstanceWithUriFormatString)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CILocalMapTileDataSourceFactory* This,
        HSTRING uriFormatString,
        IInspectable* baseInterface,
        IInspectable** innerInterface,
        __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CILocalMapTileDataSource** value);

    END_INTERFACE
} __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CILocalMapTileDataSourceFactoryVtbl;

interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CILocalMapTileDataSourceFactory
{
    CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CILocalMapTileDataSourceFactoryVtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CILocalMapTileDataSourceFactory_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CILocalMapTileDataSourceFactory_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CILocalMapTileDataSourceFactory_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CILocalMapTileDataSourceFactory_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CILocalMapTileDataSourceFactory_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CILocalMapTileDataSourceFactory_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CILocalMapTileDataSourceFactory_CreateInstance(This, baseInterface, innerInterface, value) \
    ((This)->lpVtbl->CreateInstance(This, baseInterface, innerInterface, value))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CILocalMapTileDataSourceFactory_CreateInstanceWithUriFormatString(This, uriFormatString, baseInterface, innerInterface, value) \
    ((This)->lpVtbl->CreateInstanceWithUriFormatString(This, uriFormatString, baseInterface, innerInterface, value))

#endif /* COBJMACROS */

EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CILocalMapTileDataSourceFactory;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CILocalMapTileDataSourceFactory_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Interface Windows.UI.Xaml.Controls.Maps.IMapActualCameraChangedEventArgs
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Interface is a part of the implementation of type Windows.UI.Xaml.Controls.Maps.MapActualCameraChangedEventArgs
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapActualCameraChangedEventArgs_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapActualCameraChangedEventArgs_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_UI_Xaml_Controls_Maps_IMapActualCameraChangedEventArgs[] = L"Windows.UI.Xaml.Controls.Maps.IMapActualCameraChangedEventArgs";
typedef struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapActualCameraChangedEventArgsVtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapActualCameraChangedEventArgs* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapActualCameraChangedEventArgs* This);
    ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapActualCameraChangedEventArgs* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapActualCameraChangedEventArgs* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapActualCameraChangedEventArgs* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapActualCameraChangedEventArgs* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* get_Camera)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapActualCameraChangedEventArgs* This,
        __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCamera** value);

    END_INTERFACE
} __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapActualCameraChangedEventArgsVtbl;

interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapActualCameraChangedEventArgs
{
    CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapActualCameraChangedEventArgsVtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapActualCameraChangedEventArgs_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapActualCameraChangedEventArgs_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapActualCameraChangedEventArgs_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapActualCameraChangedEventArgs_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapActualCameraChangedEventArgs_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapActualCameraChangedEventArgs_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapActualCameraChangedEventArgs_get_Camera(This, value) \
    ((This)->lpVtbl->get_Camera(This, value))

#endif /* COBJMACROS */

EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapActualCameraChangedEventArgs;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapActualCameraChangedEventArgs_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Interface Windows.UI.Xaml.Controls.Maps.IMapActualCameraChangedEventArgs2
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 2.0
 *
 * Interface is a part of the implementation of type Windows.UI.Xaml.Controls.Maps.MapActualCameraChangedEventArgs
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x20000
#if !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapActualCameraChangedEventArgs2_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapActualCameraChangedEventArgs2_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_UI_Xaml_Controls_Maps_IMapActualCameraChangedEventArgs2[] = L"Windows.UI.Xaml.Controls.Maps.IMapActualCameraChangedEventArgs2";
typedef struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapActualCameraChangedEventArgs2Vtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapActualCameraChangedEventArgs2* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapActualCameraChangedEventArgs2* This);
    ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapActualCameraChangedEventArgs2* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapActualCameraChangedEventArgs2* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapActualCameraChangedEventArgs2* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapActualCameraChangedEventArgs2* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* get_ChangeReason)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapActualCameraChangedEventArgs2* This,
        enum __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CMapCameraChangeReason* value);

    END_INTERFACE
} __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapActualCameraChangedEventArgs2Vtbl;

interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapActualCameraChangedEventArgs2
{
    CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapActualCameraChangedEventArgs2Vtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapActualCameraChangedEventArgs2_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapActualCameraChangedEventArgs2_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapActualCameraChangedEventArgs2_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapActualCameraChangedEventArgs2_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapActualCameraChangedEventArgs2_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapActualCameraChangedEventArgs2_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapActualCameraChangedEventArgs2_get_ChangeReason(This, value) \
    ((This)->lpVtbl->get_ChangeReason(This, value))

#endif /* COBJMACROS */

EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapActualCameraChangedEventArgs2;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapActualCameraChangedEventArgs2_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x20000

/*
 *
 * Interface Windows.UI.Xaml.Controls.Maps.IMapActualCameraChangingEventArgs
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Interface is a part of the implementation of type Windows.UI.Xaml.Controls.Maps.MapActualCameraChangingEventArgs
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapActualCameraChangingEventArgs_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapActualCameraChangingEventArgs_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_UI_Xaml_Controls_Maps_IMapActualCameraChangingEventArgs[] = L"Windows.UI.Xaml.Controls.Maps.IMapActualCameraChangingEventArgs";
typedef struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapActualCameraChangingEventArgsVtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapActualCameraChangingEventArgs* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapActualCameraChangingEventArgs* This);
    ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapActualCameraChangingEventArgs* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapActualCameraChangingEventArgs* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapActualCameraChangingEventArgs* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapActualCameraChangingEventArgs* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* get_Camera)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapActualCameraChangingEventArgs* This,
        __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCamera** value);

    END_INTERFACE
} __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapActualCameraChangingEventArgsVtbl;

interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapActualCameraChangingEventArgs
{
    CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapActualCameraChangingEventArgsVtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapActualCameraChangingEventArgs_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapActualCameraChangingEventArgs_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapActualCameraChangingEventArgs_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapActualCameraChangingEventArgs_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapActualCameraChangingEventArgs_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapActualCameraChangingEventArgs_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapActualCameraChangingEventArgs_get_Camera(This, value) \
    ((This)->lpVtbl->get_Camera(This, value))

#endif /* COBJMACROS */

EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapActualCameraChangingEventArgs;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapActualCameraChangingEventArgs_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Interface Windows.UI.Xaml.Controls.Maps.IMapActualCameraChangingEventArgs2
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 2.0
 *
 * Interface is a part of the implementation of type Windows.UI.Xaml.Controls.Maps.MapActualCameraChangingEventArgs
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x20000
#if !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapActualCameraChangingEventArgs2_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapActualCameraChangingEventArgs2_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_UI_Xaml_Controls_Maps_IMapActualCameraChangingEventArgs2[] = L"Windows.UI.Xaml.Controls.Maps.IMapActualCameraChangingEventArgs2";
typedef struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapActualCameraChangingEventArgs2Vtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapActualCameraChangingEventArgs2* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapActualCameraChangingEventArgs2* This);
    ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapActualCameraChangingEventArgs2* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapActualCameraChangingEventArgs2* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapActualCameraChangingEventArgs2* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapActualCameraChangingEventArgs2* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* get_ChangeReason)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapActualCameraChangingEventArgs2* This,
        enum __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CMapCameraChangeReason* value);

    END_INTERFACE
} __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapActualCameraChangingEventArgs2Vtbl;

interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapActualCameraChangingEventArgs2
{
    CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapActualCameraChangingEventArgs2Vtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapActualCameraChangingEventArgs2_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapActualCameraChangingEventArgs2_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapActualCameraChangingEventArgs2_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapActualCameraChangingEventArgs2_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapActualCameraChangingEventArgs2_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapActualCameraChangingEventArgs2_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapActualCameraChangingEventArgs2_get_ChangeReason(This, value) \
    ((This)->lpVtbl->get_ChangeReason(This, value))

#endif /* COBJMACROS */

EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapActualCameraChangingEventArgs2;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapActualCameraChangingEventArgs2_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x20000

/*
 *
 * Interface Windows.UI.Xaml.Controls.Maps.IMapBillboard
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 4.0
 *
 * Interface is a part of the implementation of type Windows.UI.Xaml.Controls.Maps.MapBillboard
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x40000
#if !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapBillboard_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapBillboard_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_UI_Xaml_Controls_Maps_IMapBillboard[] = L"Windows.UI.Xaml.Controls.Maps.IMapBillboard";
typedef struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapBillboardVtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapBillboard* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapBillboard* This);
    ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapBillboard* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapBillboard* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapBillboard* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapBillboard* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* get_Location)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapBillboard* This,
        __x_ABI_CWindows_CDevices_CGeolocation_CIGeopoint** value);
    HRESULT (STDMETHODCALLTYPE* put_Location)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapBillboard* This,
        __x_ABI_CWindows_CDevices_CGeolocation_CIGeopoint* value);
    HRESULT (STDMETHODCALLTYPE* get_NormalizedAnchorPoint)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapBillboard* This,
        struct __x_ABI_CWindows_CFoundation_CPoint* value);
    HRESULT (STDMETHODCALLTYPE* put_NormalizedAnchorPoint)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapBillboard* This,
        struct __x_ABI_CWindows_CFoundation_CPoint value);
    HRESULT (STDMETHODCALLTYPE* get_Image)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapBillboard* This,
        __x_ABI_CWindows_CStorage_CStreams_CIRandomAccessStreamReference** value);
    HRESULT (STDMETHODCALLTYPE* put_Image)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapBillboard* This,
        __x_ABI_CWindows_CStorage_CStreams_CIRandomAccessStreamReference* value);
    HRESULT (STDMETHODCALLTYPE* get_CollisionBehaviorDesired)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapBillboard* This,
        enum __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CMapElementCollisionBehavior* value);
    HRESULT (STDMETHODCALLTYPE* put_CollisionBehaviorDesired)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapBillboard* This,
        enum __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CMapElementCollisionBehavior value);
    HRESULT (STDMETHODCALLTYPE* get_ReferenceCamera)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapBillboard* This,
        __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCamera** value);

    END_INTERFACE
} __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapBillboardVtbl;

interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapBillboard
{
    CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapBillboardVtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapBillboard_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapBillboard_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapBillboard_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapBillboard_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapBillboard_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapBillboard_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapBillboard_get_Location(This, value) \
    ((This)->lpVtbl->get_Location(This, value))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapBillboard_put_Location(This, value) \
    ((This)->lpVtbl->put_Location(This, value))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapBillboard_get_NormalizedAnchorPoint(This, value) \
    ((This)->lpVtbl->get_NormalizedAnchorPoint(This, value))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapBillboard_put_NormalizedAnchorPoint(This, value) \
    ((This)->lpVtbl->put_NormalizedAnchorPoint(This, value))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapBillboard_get_Image(This, value) \
    ((This)->lpVtbl->get_Image(This, value))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapBillboard_put_Image(This, value) \
    ((This)->lpVtbl->put_Image(This, value))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapBillboard_get_CollisionBehaviorDesired(This, value) \
    ((This)->lpVtbl->get_CollisionBehaviorDesired(This, value))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapBillboard_put_CollisionBehaviorDesired(This, value) \
    ((This)->lpVtbl->put_CollisionBehaviorDesired(This, value))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapBillboard_get_ReferenceCamera(This, value) \
    ((This)->lpVtbl->get_ReferenceCamera(This, value))

#endif /* COBJMACROS */

EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapBillboard;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapBillboard_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x40000

/*
 *
 * Interface Windows.UI.Xaml.Controls.Maps.IMapBillboardFactory
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 4.0
 *
 * Interface is a part of the implementation of type Windows.UI.Xaml.Controls.Maps.MapBillboard
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x40000
#if !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapBillboardFactory_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapBillboardFactory_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_UI_Xaml_Controls_Maps_IMapBillboardFactory[] = L"Windows.UI.Xaml.Controls.Maps.IMapBillboardFactory";
typedef struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapBillboardFactoryVtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapBillboardFactory* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapBillboardFactory* This);
    ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapBillboardFactory* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapBillboardFactory* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapBillboardFactory* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapBillboardFactory* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* CreateInstanceFromCamera)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapBillboardFactory* This,
        __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCamera* camera,
        __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapBillboard** value);

    END_INTERFACE
} __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapBillboardFactoryVtbl;

interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapBillboardFactory
{
    CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapBillboardFactoryVtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapBillboardFactory_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapBillboardFactory_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapBillboardFactory_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapBillboardFactory_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapBillboardFactory_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapBillboardFactory_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapBillboardFactory_CreateInstanceFromCamera(This, camera, value) \
    ((This)->lpVtbl->CreateInstanceFromCamera(This, camera, value))

#endif /* COBJMACROS */

EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapBillboardFactory;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapBillboardFactory_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x40000

/*
 *
 * Interface Windows.UI.Xaml.Controls.Maps.IMapBillboardStatics
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 4.0
 *
 * Interface is a part of the implementation of type Windows.UI.Xaml.Controls.Maps.MapBillboard
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x40000
#if !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapBillboardStatics_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapBillboardStatics_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_UI_Xaml_Controls_Maps_IMapBillboardStatics[] = L"Windows.UI.Xaml.Controls.Maps.IMapBillboardStatics";
typedef struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapBillboardStaticsVtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapBillboardStatics* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapBillboardStatics* This);
    ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapBillboardStatics* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapBillboardStatics* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapBillboardStatics* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapBillboardStatics* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* get_LocationProperty)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapBillboardStatics* This,
        __x_ABI_CWindows_CUI_CXaml_CIDependencyProperty** value);
    HRESULT (STDMETHODCALLTYPE* get_NormalizedAnchorPointProperty)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapBillboardStatics* This,
        __x_ABI_CWindows_CUI_CXaml_CIDependencyProperty** value);
    HRESULT (STDMETHODCALLTYPE* get_CollisionBehaviorDesiredProperty)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapBillboardStatics* This,
        __x_ABI_CWindows_CUI_CXaml_CIDependencyProperty** value);

    END_INTERFACE
} __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapBillboardStaticsVtbl;

interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapBillboardStatics
{
    CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapBillboardStaticsVtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapBillboardStatics_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapBillboardStatics_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapBillboardStatics_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapBillboardStatics_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapBillboardStatics_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapBillboardStatics_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapBillboardStatics_get_LocationProperty(This, value) \
    ((This)->lpVtbl->get_LocationProperty(This, value))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapBillboardStatics_get_NormalizedAnchorPointProperty(This, value) \
    ((This)->lpVtbl->get_NormalizedAnchorPointProperty(This, value))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapBillboardStatics_get_CollisionBehaviorDesiredProperty(This, value) \
    ((This)->lpVtbl->get_CollisionBehaviorDesiredProperty(This, value))

#endif /* COBJMACROS */

EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapBillboardStatics;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapBillboardStatics_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x40000

/*
 *
 * Interface Windows.UI.Xaml.Controls.Maps.IMapCamera
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Interface is a part of the implementation of type Windows.UI.Xaml.Controls.Maps.MapCamera
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCamera_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCamera_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_UI_Xaml_Controls_Maps_IMapCamera[] = L"Windows.UI.Xaml.Controls.Maps.IMapCamera";
typedef struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCameraVtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCamera* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCamera* This);
    ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCamera* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCamera* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCamera* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCamera* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* get_Location)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCamera* This,
        __x_ABI_CWindows_CDevices_CGeolocation_CIGeopoint** value);
    HRESULT (STDMETHODCALLTYPE* put_Location)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCamera* This,
        __x_ABI_CWindows_CDevices_CGeolocation_CIGeopoint* value);
    HRESULT (STDMETHODCALLTYPE* get_Heading)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCamera* This,
        DOUBLE* value);
    HRESULT (STDMETHODCALLTYPE* put_Heading)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCamera* This,
        DOUBLE value);
    HRESULT (STDMETHODCALLTYPE* get_Pitch)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCamera* This,
        DOUBLE* value);
    HRESULT (STDMETHODCALLTYPE* put_Pitch)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCamera* This,
        DOUBLE value);
    HRESULT (STDMETHODCALLTYPE* get_Roll)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCamera* This,
        DOUBLE* value);
    HRESULT (STDMETHODCALLTYPE* put_Roll)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCamera* This,
        DOUBLE value);
    HRESULT (STDMETHODCALLTYPE* get_FieldOfView)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCamera* This,
        DOUBLE* value);
    HRESULT (STDMETHODCALLTYPE* put_FieldOfView)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCamera* This,
        DOUBLE value);

    END_INTERFACE
} __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCameraVtbl;

interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCamera
{
    CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCameraVtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCamera_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCamera_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCamera_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCamera_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCamera_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCamera_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCamera_get_Location(This, value) \
    ((This)->lpVtbl->get_Location(This, value))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCamera_put_Location(This, value) \
    ((This)->lpVtbl->put_Location(This, value))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCamera_get_Heading(This, value) \
    ((This)->lpVtbl->get_Heading(This, value))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCamera_put_Heading(This, value) \
    ((This)->lpVtbl->put_Heading(This, value))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCamera_get_Pitch(This, value) \
    ((This)->lpVtbl->get_Pitch(This, value))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCamera_put_Pitch(This, value) \
    ((This)->lpVtbl->put_Pitch(This, value))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCamera_get_Roll(This, value) \
    ((This)->lpVtbl->get_Roll(This, value))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCamera_put_Roll(This, value) \
    ((This)->lpVtbl->put_Roll(This, value))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCamera_get_FieldOfView(This, value) \
    ((This)->lpVtbl->get_FieldOfView(This, value))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCamera_put_FieldOfView(This, value) \
    ((This)->lpVtbl->put_FieldOfView(This, value))

#endif /* COBJMACROS */

EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCamera;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCamera_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Interface Windows.UI.Xaml.Controls.Maps.IMapCameraFactory
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Interface is a part of the implementation of type Windows.UI.Xaml.Controls.Maps.MapCamera
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCameraFactory_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCameraFactory_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_UI_Xaml_Controls_Maps_IMapCameraFactory[] = L"Windows.UI.Xaml.Controls.Maps.IMapCameraFactory";
typedef struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCameraFactoryVtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCameraFactory* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCameraFactory* This);
    ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCameraFactory* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCameraFactory* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCameraFactory* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCameraFactory* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* CreateInstanceWithLocation)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCameraFactory* This,
        __x_ABI_CWindows_CDevices_CGeolocation_CIGeopoint* location,
        __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCamera** value);
    HRESULT (STDMETHODCALLTYPE* CreateInstanceWithLocationAndHeading)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCameraFactory* This,
        __x_ABI_CWindows_CDevices_CGeolocation_CIGeopoint* location,
        DOUBLE headingInDegrees,
        __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCamera** value);
    HRESULT (STDMETHODCALLTYPE* CreateInstanceWithLocationHeadingAndPitch)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCameraFactory* This,
        __x_ABI_CWindows_CDevices_CGeolocation_CIGeopoint* location,
        DOUBLE headingInDegrees,
        DOUBLE pitchInDegrees,
        __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCamera** value);
    HRESULT (STDMETHODCALLTYPE* CreateInstanceWithLocationHeadingPitchRollAndFieldOfView)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCameraFactory* This,
        __x_ABI_CWindows_CDevices_CGeolocation_CIGeopoint* location,
        DOUBLE headingInDegrees,
        DOUBLE pitchInDegrees,
        DOUBLE rollInDegrees,
        DOUBLE fieldOfViewInDegrees,
        __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCamera** value);

    END_INTERFACE
} __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCameraFactoryVtbl;

interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCameraFactory
{
    CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCameraFactoryVtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCameraFactory_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCameraFactory_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCameraFactory_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCameraFactory_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCameraFactory_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCameraFactory_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCameraFactory_CreateInstanceWithLocation(This, location, value) \
    ((This)->lpVtbl->CreateInstanceWithLocation(This, location, value))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCameraFactory_CreateInstanceWithLocationAndHeading(This, location, headingInDegrees, value) \
    ((This)->lpVtbl->CreateInstanceWithLocationAndHeading(This, location, headingInDegrees, value))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCameraFactory_CreateInstanceWithLocationHeadingAndPitch(This, location, headingInDegrees, pitchInDegrees, value) \
    ((This)->lpVtbl->CreateInstanceWithLocationHeadingAndPitch(This, location, headingInDegrees, pitchInDegrees, value))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCameraFactory_CreateInstanceWithLocationHeadingPitchRollAndFieldOfView(This, location, headingInDegrees, pitchInDegrees, rollInDegrees, fieldOfViewInDegrees, value) \
    ((This)->lpVtbl->CreateInstanceWithLocationHeadingPitchRollAndFieldOfView(This, location, headingInDegrees, pitchInDegrees, rollInDegrees, fieldOfViewInDegrees, value))

#endif /* COBJMACROS */

EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCameraFactory;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCameraFactory_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Interface Windows.UI.Xaml.Controls.Maps.IMapContextRequestedEventArgs
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 4.0
 *
 * Interface is a part of the implementation of type Windows.UI.Xaml.Controls.Maps.MapContextRequestedEventArgs
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x40000
#if !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapContextRequestedEventArgs_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapContextRequestedEventArgs_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_UI_Xaml_Controls_Maps_IMapContextRequestedEventArgs[] = L"Windows.UI.Xaml.Controls.Maps.IMapContextRequestedEventArgs";
typedef struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapContextRequestedEventArgsVtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapContextRequestedEventArgs* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapContextRequestedEventArgs* This);
    ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapContextRequestedEventArgs* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapContextRequestedEventArgs* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapContextRequestedEventArgs* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapContextRequestedEventArgs* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* get_Position)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapContextRequestedEventArgs* This,
        struct __x_ABI_CWindows_CFoundation_CPoint* value);
    HRESULT (STDMETHODCALLTYPE* get_Location)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapContextRequestedEventArgs* This,
        __x_ABI_CWindows_CDevices_CGeolocation_CIGeopoint** value);
    HRESULT (STDMETHODCALLTYPE* get_MapElements)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapContextRequestedEventArgs* This,
        __FIVectorView_1_Windows__CUI__CXaml__CControls__CMaps__CMapElement** value);

    END_INTERFACE
} __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapContextRequestedEventArgsVtbl;

interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapContextRequestedEventArgs
{
    CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapContextRequestedEventArgsVtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapContextRequestedEventArgs_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapContextRequestedEventArgs_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapContextRequestedEventArgs_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapContextRequestedEventArgs_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapContextRequestedEventArgs_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapContextRequestedEventArgs_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapContextRequestedEventArgs_get_Position(This, value) \
    ((This)->lpVtbl->get_Position(This, value))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapContextRequestedEventArgs_get_Location(This, value) \
    ((This)->lpVtbl->get_Location(This, value))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapContextRequestedEventArgs_get_MapElements(This, value) \
    ((This)->lpVtbl->get_MapElements(This, value))

#endif /* COBJMACROS */

EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapContextRequestedEventArgs;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapContextRequestedEventArgs_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x40000

/*
 *
 * Interface Windows.UI.Xaml.Controls.Maps.IMapControl
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Interface is a part of the implementation of type Windows.UI.Xaml.Controls.Maps.MapControl
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_UI_Xaml_Controls_Maps_IMapControl[] = L"Windows.UI.Xaml.Controls.Maps.IMapControl";
typedef struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlVtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl* This);
    ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* get_Center)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl* This,
        __x_ABI_CWindows_CDevices_CGeolocation_CIGeopoint** value);
    HRESULT (STDMETHODCALLTYPE* put_Center)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl* This,
        __x_ABI_CWindows_CDevices_CGeolocation_CIGeopoint* value);
    HRESULT (STDMETHODCALLTYPE* get_Children)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl* This,
        __FIVector_1_Windows__CUI__CXaml__CDependencyObject** value);
    HRESULT (STDMETHODCALLTYPE* get_ColorScheme)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl* This,
        enum __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CMapColorScheme* value);
    HRESULT (STDMETHODCALLTYPE* put_ColorScheme)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl* This,
        enum __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CMapColorScheme value);
    HRESULT (STDMETHODCALLTYPE* get_DesiredPitch)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl* This,
        DOUBLE* value);
    HRESULT (STDMETHODCALLTYPE* put_DesiredPitch)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl* This,
        DOUBLE value);
    HRESULT (STDMETHODCALLTYPE* get_Heading)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl* This,
        DOUBLE* value);
    HRESULT (STDMETHODCALLTYPE* put_Heading)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl* This,
        DOUBLE value);
    HRESULT (STDMETHODCALLTYPE* get_LandmarksVisible)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl* This,
        boolean* value);
    HRESULT (STDMETHODCALLTYPE* put_LandmarksVisible)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl* This,
        boolean value);
    HRESULT (STDMETHODCALLTYPE* get_LoadingStatus)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl* This,
        enum __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CMapLoadingStatus* value);
    HRESULT (STDMETHODCALLTYPE* get_MapServiceToken)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* put_MapServiceToken)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl* This,
        HSTRING value);
    HRESULT (STDMETHODCALLTYPE* get_MaxZoomLevel)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl* This,
        DOUBLE* value);
    HRESULT (STDMETHODCALLTYPE* get_MinZoomLevel)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl* This,
        DOUBLE* value);
    HRESULT (STDMETHODCALLTYPE* get_PedestrianFeaturesVisible)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl* This,
        boolean* value);
    HRESULT (STDMETHODCALLTYPE* put_PedestrianFeaturesVisible)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl* This,
        boolean value);
    HRESULT (STDMETHODCALLTYPE* get_Pitch)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl* This,
        DOUBLE* value);
    HRESULT (STDMETHODCALLTYPE* get_Style)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl* This,
        enum __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CMapStyle* value);
    HRESULT (STDMETHODCALLTYPE* put_Style)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl* This,
        enum __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CMapStyle value);
    HRESULT (STDMETHODCALLTYPE* get_TrafficFlowVisible)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl* This,
        boolean* value);
    HRESULT (STDMETHODCALLTYPE* put_TrafficFlowVisible)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl* This,
        boolean value);
    HRESULT (STDMETHODCALLTYPE* get_TransformOrigin)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl* This,
        struct __x_ABI_CWindows_CFoundation_CPoint* value);
    HRESULT (STDMETHODCALLTYPE* put_TransformOrigin)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl* This,
        struct __x_ABI_CWindows_CFoundation_CPoint value);
    HRESULT (STDMETHODCALLTYPE* get_WatermarkMode)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl* This,
        enum __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CMapWatermarkMode* value);
    HRESULT (STDMETHODCALLTYPE* put_WatermarkMode)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl* This,
        enum __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CMapWatermarkMode value);
    HRESULT (STDMETHODCALLTYPE* get_ZoomLevel)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl* This,
        DOUBLE* value);
    HRESULT (STDMETHODCALLTYPE* put_ZoomLevel)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl* This,
        DOUBLE value);
    HRESULT (STDMETHODCALLTYPE* get_MapElements)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl* This,
        __FIVector_1_Windows__CUI__CXaml__CControls__CMaps__CMapElement** value);
    HRESULT (STDMETHODCALLTYPE* get_Routes)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl* This,
        __FIVector_1_Windows__CUI__CXaml__CControls__CMaps__CMapRouteView** value);
    HRESULT (STDMETHODCALLTYPE* get_TileSources)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl* This,
        __FIVector_1_Windows__CUI__CXaml__CControls__CMaps__CMapTileSource** value);
    HRESULT (STDMETHODCALLTYPE* add_CenterChanged)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl* This,
        __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_IInspectable* handler,
        EventRegistrationToken* token);
    HRESULT (STDMETHODCALLTYPE* remove_CenterChanged)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl* This,
        EventRegistrationToken token);
    HRESULT (STDMETHODCALLTYPE* add_HeadingChanged)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl* This,
        __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_IInspectable* handler,
        EventRegistrationToken* token);
    HRESULT (STDMETHODCALLTYPE* remove_HeadingChanged)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl* This,
        EventRegistrationToken token);
    HRESULT (STDMETHODCALLTYPE* add_LoadingStatusChanged)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl* This,
        __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_IInspectable* handler,
        EventRegistrationToken* token);
    HRESULT (STDMETHODCALLTYPE* remove_LoadingStatusChanged)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl* This,
        EventRegistrationToken token);
    HRESULT (STDMETHODCALLTYPE* add_MapDoubleTapped)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl* This,
        __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapInputEventArgs* handler,
        EventRegistrationToken* token);
    HRESULT (STDMETHODCALLTYPE* remove_MapDoubleTapped)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl* This,
        EventRegistrationToken token);
    HRESULT (STDMETHODCALLTYPE* add_MapHolding)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl* This,
        __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapInputEventArgs* handler,
        EventRegistrationToken* token);
    HRESULT (STDMETHODCALLTYPE* remove_MapHolding)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl* This,
        EventRegistrationToken token);
    HRESULT (STDMETHODCALLTYPE* add_MapTapped)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl* This,
        __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapInputEventArgs* handler,
        EventRegistrationToken* token);
    HRESULT (STDMETHODCALLTYPE* remove_MapTapped)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl* This,
        EventRegistrationToken token);
    HRESULT (STDMETHODCALLTYPE* add_PitchChanged)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl* This,
        __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_IInspectable* handler,
        EventRegistrationToken* token);
    HRESULT (STDMETHODCALLTYPE* remove_PitchChanged)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl* This,
        EventRegistrationToken token);
    HRESULT (STDMETHODCALLTYPE* add_TransformOriginChanged)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl* This,
        __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_IInspectable* handler,
        EventRegistrationToken* token);
    HRESULT (STDMETHODCALLTYPE* remove_TransformOriginChanged)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl* This,
        EventRegistrationToken token);
    HRESULT (STDMETHODCALLTYPE* add_ZoomLevelChanged)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl* This,
        __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_IInspectable* handler,
        EventRegistrationToken* token);
    HRESULT (STDMETHODCALLTYPE* remove_ZoomLevelChanged)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl* This,
        EventRegistrationToken token);
    HRESULT (STDMETHODCALLTYPE* FindMapElementsAtOffset)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl* This,
        struct __x_ABI_CWindows_CFoundation_CPoint offset,
        __FIVectorView_1_Windows__CUI__CXaml__CControls__CMaps__CMapElement** result);
    HRESULT (STDMETHODCALLTYPE* GetLocationFromOffset)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl* This,
        struct __x_ABI_CWindows_CFoundation_CPoint offset,
        __x_ABI_CWindows_CDevices_CGeolocation_CIGeopoint** location);
    HRESULT (STDMETHODCALLTYPE* GetOffsetFromLocation)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl* This,
        __x_ABI_CWindows_CDevices_CGeolocation_CIGeopoint* location,
        struct __x_ABI_CWindows_CFoundation_CPoint* offset);
    HRESULT (STDMETHODCALLTYPE* IsLocationInView)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl* This,
        __x_ABI_CWindows_CDevices_CGeolocation_CIGeopoint* location,
        boolean* isInView);
    HRESULT (STDMETHODCALLTYPE* TrySetViewBoundsAsync)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl* This,
        __x_ABI_CWindows_CDevices_CGeolocation_CIGeoboundingBox* bounds,
        __FIReference_1_Windows__CUI__CXaml__CThickness* margin,
        enum __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CMapAnimationKind animation,
        __FIAsyncOperation_1_boolean** operation);
    HRESULT (STDMETHODCALLTYPE* TrySetViewWithCenterAsync)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl* This,
        __x_ABI_CWindows_CDevices_CGeolocation_CIGeopoint* center,
        __FIAsyncOperation_1_boolean** operation);
    HRESULT (STDMETHODCALLTYPE* TrySetViewWithCenterAndZoomAsync)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl* This,
        __x_ABI_CWindows_CDevices_CGeolocation_CIGeopoint* center,
        __FIReference_1_double* zoomLevel,
        __FIAsyncOperation_1_boolean** operation);
    HRESULT (STDMETHODCALLTYPE* TrySetViewWithCenterZoomHeadingAndPitchAsync)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl* This,
        __x_ABI_CWindows_CDevices_CGeolocation_CIGeopoint* center,
        __FIReference_1_double* zoomLevel,
        __FIReference_1_double* heading,
        __FIReference_1_double* desiredPitch,
        __FIAsyncOperation_1_boolean** operation);
    HRESULT (STDMETHODCALLTYPE* TrySetViewWithCenterZoomHeadingPitchAndAnimationAsync)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl* This,
        __x_ABI_CWindows_CDevices_CGeolocation_CIGeopoint* center,
        __FIReference_1_double* zoomLevel,
        __FIReference_1_double* heading,
        __FIReference_1_double* desiredPitch,
        enum __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CMapAnimationKind animation,
        __FIAsyncOperation_1_boolean** operation);

    END_INTERFACE
} __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlVtbl;

interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl
{
    CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlVtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl_get_Center(This, value) \
    ((This)->lpVtbl->get_Center(This, value))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl_put_Center(This, value) \
    ((This)->lpVtbl->put_Center(This, value))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl_get_Children(This, value) \
    ((This)->lpVtbl->get_Children(This, value))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl_get_ColorScheme(This, value) \
    ((This)->lpVtbl->get_ColorScheme(This, value))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl_put_ColorScheme(This, value) \
    ((This)->lpVtbl->put_ColorScheme(This, value))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl_get_DesiredPitch(This, value) \
    ((This)->lpVtbl->get_DesiredPitch(This, value))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl_put_DesiredPitch(This, value) \
    ((This)->lpVtbl->put_DesiredPitch(This, value))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl_get_Heading(This, value) \
    ((This)->lpVtbl->get_Heading(This, value))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl_put_Heading(This, value) \
    ((This)->lpVtbl->put_Heading(This, value))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl_get_LandmarksVisible(This, value) \
    ((This)->lpVtbl->get_LandmarksVisible(This, value))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl_put_LandmarksVisible(This, value) \
    ((This)->lpVtbl->put_LandmarksVisible(This, value))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl_get_LoadingStatus(This, value) \
    ((This)->lpVtbl->get_LoadingStatus(This, value))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl_get_MapServiceToken(This, value) \
    ((This)->lpVtbl->get_MapServiceToken(This, value))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl_put_MapServiceToken(This, value) \
    ((This)->lpVtbl->put_MapServiceToken(This, value))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl_get_MaxZoomLevel(This, value) \
    ((This)->lpVtbl->get_MaxZoomLevel(This, value))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl_get_MinZoomLevel(This, value) \
    ((This)->lpVtbl->get_MinZoomLevel(This, value))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl_get_PedestrianFeaturesVisible(This, value) \
    ((This)->lpVtbl->get_PedestrianFeaturesVisible(This, value))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl_put_PedestrianFeaturesVisible(This, value) \
    ((This)->lpVtbl->put_PedestrianFeaturesVisible(This, value))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl_get_Pitch(This, value) \
    ((This)->lpVtbl->get_Pitch(This, value))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl_get_Style(This, value) \
    ((This)->lpVtbl->get_Style(This, value))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl_put_Style(This, value) \
    ((This)->lpVtbl->put_Style(This, value))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl_get_TrafficFlowVisible(This, value) \
    ((This)->lpVtbl->get_TrafficFlowVisible(This, value))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl_put_TrafficFlowVisible(This, value) \
    ((This)->lpVtbl->put_TrafficFlowVisible(This, value))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl_get_TransformOrigin(This, value) \
    ((This)->lpVtbl->get_TransformOrigin(This, value))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl_put_TransformOrigin(This, value) \
    ((This)->lpVtbl->put_TransformOrigin(This, value))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl_get_WatermarkMode(This, value) \
    ((This)->lpVtbl->get_WatermarkMode(This, value))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl_put_WatermarkMode(This, value) \
    ((This)->lpVtbl->put_WatermarkMode(This, value))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl_get_ZoomLevel(This, value) \
    ((This)->lpVtbl->get_ZoomLevel(This, value))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl_put_ZoomLevel(This, value) \
    ((This)->lpVtbl->put_ZoomLevel(This, value))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl_get_MapElements(This, value) \
    ((This)->lpVtbl->get_MapElements(This, value))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl_get_Routes(This, value) \
    ((This)->lpVtbl->get_Routes(This, value))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl_get_TileSources(This, value) \
    ((This)->lpVtbl->get_TileSources(This, value))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl_add_CenterChanged(This, handler, token) \
    ((This)->lpVtbl->add_CenterChanged(This, handler, token))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl_remove_CenterChanged(This, token) \
    ((This)->lpVtbl->remove_CenterChanged(This, token))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl_add_HeadingChanged(This, handler, token) \
    ((This)->lpVtbl->add_HeadingChanged(This, handler, token))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl_remove_HeadingChanged(This, token) \
    ((This)->lpVtbl->remove_HeadingChanged(This, token))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl_add_LoadingStatusChanged(This, handler, token) \
    ((This)->lpVtbl->add_LoadingStatusChanged(This, handler, token))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl_remove_LoadingStatusChanged(This, token) \
    ((This)->lpVtbl->remove_LoadingStatusChanged(This, token))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl_add_MapDoubleTapped(This, handler, token) \
    ((This)->lpVtbl->add_MapDoubleTapped(This, handler, token))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl_remove_MapDoubleTapped(This, token) \
    ((This)->lpVtbl->remove_MapDoubleTapped(This, token))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl_add_MapHolding(This, handler, token) \
    ((This)->lpVtbl->add_MapHolding(This, handler, token))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl_remove_MapHolding(This, token) \
    ((This)->lpVtbl->remove_MapHolding(This, token))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl_add_MapTapped(This, handler, token) \
    ((This)->lpVtbl->add_MapTapped(This, handler, token))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl_remove_MapTapped(This, token) \
    ((This)->lpVtbl->remove_MapTapped(This, token))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl_add_PitchChanged(This, handler, token) \
    ((This)->lpVtbl->add_PitchChanged(This, handler, token))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl_remove_PitchChanged(This, token) \
    ((This)->lpVtbl->remove_PitchChanged(This, token))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl_add_TransformOriginChanged(This, handler, token) \
    ((This)->lpVtbl->add_TransformOriginChanged(This, handler, token))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl_remove_TransformOriginChanged(This, token) \
    ((This)->lpVtbl->remove_TransformOriginChanged(This, token))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl_add_ZoomLevelChanged(This, handler, token) \
    ((This)->lpVtbl->add_ZoomLevelChanged(This, handler, token))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl_remove_ZoomLevelChanged(This, token) \
    ((This)->lpVtbl->remove_ZoomLevelChanged(This, token))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl_FindMapElementsAtOffset(This, offset, result) \
    ((This)->lpVtbl->FindMapElementsAtOffset(This, offset, result))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl_GetLocationFromOffset(This, offset, location) \
    ((This)->lpVtbl->GetLocationFromOffset(This, offset, location))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl_GetOffsetFromLocation(This, location, offset) \
    ((This)->lpVtbl->GetOffsetFromLocation(This, location, offset))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl_IsLocationInView(This, location, isInView) \
    ((This)->lpVtbl->IsLocationInView(This, location, isInView))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl_TrySetViewBoundsAsync(This, bounds, margin, animation, operation) \
    ((This)->lpVtbl->TrySetViewBoundsAsync(This, bounds, margin, animation, operation))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl_TrySetViewWithCenterAsync(This, center, operation) \
    ((This)->lpVtbl->TrySetViewWithCenterAsync(This, center, operation))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl_TrySetViewWithCenterAndZoomAsync(This, center, zoomLevel, operation) \
    ((This)->lpVtbl->TrySetViewWithCenterAndZoomAsync(This, center, zoomLevel, operation))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl_TrySetViewWithCenterZoomHeadingAndPitchAsync(This, center, zoomLevel, heading, desiredPitch, operation) \
    ((This)->lpVtbl->TrySetViewWithCenterZoomHeadingAndPitchAsync(This, center, zoomLevel, heading, desiredPitch, operation))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl_TrySetViewWithCenterZoomHeadingPitchAndAnimationAsync(This, center, zoomLevel, heading, desiredPitch, animation, operation) \
    ((This)->lpVtbl->TrySetViewWithCenterZoomHeadingPitchAndAnimationAsync(This, center, zoomLevel, heading, desiredPitch, animation, operation))

#endif /* COBJMACROS */

EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Interface Windows.UI.Xaml.Controls.Maps.IMapControl2
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Interface is a part of the implementation of type Windows.UI.Xaml.Controls.Maps.MapControl
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl2_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl2_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_UI_Xaml_Controls_Maps_IMapControl2[] = L"Windows.UI.Xaml.Controls.Maps.IMapControl2";
typedef struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl2Vtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl2* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl2* This);
    ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl2* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl2* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl2* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl2* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* get_BusinessLandmarksVisible)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl2* This,
        boolean* value);
    HRESULT (STDMETHODCALLTYPE* put_BusinessLandmarksVisible)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl2* This,
        boolean value);
    HRESULT (STDMETHODCALLTYPE* get_TransitFeaturesVisible)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl2* This,
        boolean* value);
    HRESULT (STDMETHODCALLTYPE* put_TransitFeaturesVisible)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl2* This,
        boolean value);
    HRESULT (STDMETHODCALLTYPE* get_PanInteractionMode)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl2* This,
        enum __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CMapPanInteractionMode* value);
    HRESULT (STDMETHODCALLTYPE* put_PanInteractionMode)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl2* This,
        enum __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CMapPanInteractionMode value);
    HRESULT (STDMETHODCALLTYPE* get_RotateInteractionMode)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl2* This,
        enum __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CMapInteractionMode* value);
    HRESULT (STDMETHODCALLTYPE* put_RotateInteractionMode)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl2* This,
        enum __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CMapInteractionMode value);
    HRESULT (STDMETHODCALLTYPE* get_TiltInteractionMode)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl2* This,
        enum __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CMapInteractionMode* value);
    HRESULT (STDMETHODCALLTYPE* put_TiltInteractionMode)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl2* This,
        enum __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CMapInteractionMode value);
    HRESULT (STDMETHODCALLTYPE* get_ZoomInteractionMode)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl2* This,
        enum __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CMapInteractionMode* value);
    HRESULT (STDMETHODCALLTYPE* put_ZoomInteractionMode)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl2* This,
        enum __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CMapInteractionMode value);
    HRESULT (STDMETHODCALLTYPE* get_Is3DSupported)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl2* This,
        boolean* value);
    HRESULT (STDMETHODCALLTYPE* get_IsStreetsideSupported)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl2* This,
        boolean* value);
    HRESULT (STDMETHODCALLTYPE* get_Scene)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl2* This,
        __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapScene** value);
    HRESULT (STDMETHODCALLTYPE* put_Scene)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl2* This,
        __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapScene* value);
    HRESULT (STDMETHODCALLTYPE* get_ActualCamera)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl2* This,
        __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCamera** value);
    HRESULT (STDMETHODCALLTYPE* get_TargetCamera)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl2* This,
        __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCamera** value);
    HRESULT (STDMETHODCALLTYPE* get_CustomExperience)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl2* This,
        __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCustomExperience** value);
    HRESULT (STDMETHODCALLTYPE* put_CustomExperience)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl2* This,
        __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCustomExperience* value);
    HRESULT (STDMETHODCALLTYPE* add_MapElementClick)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl2* This,
        __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapElementClickEventArgs* handler,
        EventRegistrationToken* token);
    HRESULT (STDMETHODCALLTYPE* remove_MapElementClick)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl2* This,
        EventRegistrationToken token);
    HRESULT (STDMETHODCALLTYPE* add_MapElementPointerEntered)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl2* This,
        __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapElementPointerEnteredEventArgs* handler,
        EventRegistrationToken* token);
    HRESULT (STDMETHODCALLTYPE* remove_MapElementPointerEntered)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl2* This,
        EventRegistrationToken token);
    HRESULT (STDMETHODCALLTYPE* add_MapElementPointerExited)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl2* This,
        __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapElementPointerExitedEventArgs* handler,
        EventRegistrationToken* token);
    HRESULT (STDMETHODCALLTYPE* remove_MapElementPointerExited)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl2* This,
        EventRegistrationToken token);
    HRESULT (STDMETHODCALLTYPE* add_ActualCameraChanged)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl2* This,
        __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapActualCameraChangedEventArgs* handler,
        EventRegistrationToken* token);
    HRESULT (STDMETHODCALLTYPE* remove_ActualCameraChanged)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl2* This,
        EventRegistrationToken token);
    HRESULT (STDMETHODCALLTYPE* add_ActualCameraChanging)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl2* This,
        __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapActualCameraChangingEventArgs* handler,
        EventRegistrationToken* token);
    HRESULT (STDMETHODCALLTYPE* remove_ActualCameraChanging)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl2* This,
        EventRegistrationToken token);
    HRESULT (STDMETHODCALLTYPE* add_TargetCameraChanged)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl2* This,
        __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapTargetCameraChangedEventArgs* handler,
        EventRegistrationToken* token);
    HRESULT (STDMETHODCALLTYPE* remove_TargetCameraChanged)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl2* This,
        EventRegistrationToken token);
    HRESULT (STDMETHODCALLTYPE* add_CustomExperienceChanged)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl2* This,
        __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapCustomExperienceChangedEventArgs* handler,
        EventRegistrationToken* token);
    HRESULT (STDMETHODCALLTYPE* remove_CustomExperienceChanged)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl2* This,
        EventRegistrationToken token);
    HRESULT (STDMETHODCALLTYPE* StartContinuousRotate)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl2* This,
        DOUBLE rateInDegreesPerSecond);
    HRESULT (STDMETHODCALLTYPE* StopContinuousRotate)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl2* This);
    HRESULT (STDMETHODCALLTYPE* StartContinuousTilt)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl2* This,
        DOUBLE rateInDegreesPerSecond);
    HRESULT (STDMETHODCALLTYPE* StopContinuousTilt)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl2* This);
    HRESULT (STDMETHODCALLTYPE* StartContinuousZoom)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl2* This,
        DOUBLE rateOfChangePerSecond);
    HRESULT (STDMETHODCALLTYPE* StopContinuousZoom)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl2* This);
    HRESULT (STDMETHODCALLTYPE* TryRotateAsync)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl2* This,
        DOUBLE degrees,
        __FIAsyncOperation_1_boolean** operation);
    HRESULT (STDMETHODCALLTYPE* TryRotateToAsync)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl2* This,
        DOUBLE angleInDegrees,
        __FIAsyncOperation_1_boolean** operation);
    HRESULT (STDMETHODCALLTYPE* TryTiltAsync)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl2* This,
        DOUBLE degrees,
        __FIAsyncOperation_1_boolean** operation);
    HRESULT (STDMETHODCALLTYPE* TryTiltToAsync)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl2* This,
        DOUBLE angleInDegrees,
        __FIAsyncOperation_1_boolean** operation);
    HRESULT (STDMETHODCALLTYPE* TryZoomInAsync)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl2* This,
        __FIAsyncOperation_1_boolean** operation);
    HRESULT (STDMETHODCALLTYPE* TryZoomOutAsync)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl2* This,
        __FIAsyncOperation_1_boolean** operation);
    HRESULT (STDMETHODCALLTYPE* TryZoomToAsync)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl2* This,
        DOUBLE zoomLevel,
        __FIAsyncOperation_1_boolean** operation);
    HRESULT (STDMETHODCALLTYPE* TrySetSceneAsync)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl2* This,
        __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapScene* scene,
        __FIAsyncOperation_1_boolean** operation);
    HRESULT (STDMETHODCALLTYPE* TrySetSceneWithAnimationAsync)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl2* This,
        __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapScene* scene,
        enum __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CMapAnimationKind animationKind,
        __FIAsyncOperation_1_boolean** operation);

    END_INTERFACE
} __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl2Vtbl;

interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl2
{
    CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl2Vtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl2_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl2_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl2_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl2_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl2_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl2_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl2_get_BusinessLandmarksVisible(This, value) \
    ((This)->lpVtbl->get_BusinessLandmarksVisible(This, value))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl2_put_BusinessLandmarksVisible(This, value) \
    ((This)->lpVtbl->put_BusinessLandmarksVisible(This, value))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl2_get_TransitFeaturesVisible(This, value) \
    ((This)->lpVtbl->get_TransitFeaturesVisible(This, value))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl2_put_TransitFeaturesVisible(This, value) \
    ((This)->lpVtbl->put_TransitFeaturesVisible(This, value))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl2_get_PanInteractionMode(This, value) \
    ((This)->lpVtbl->get_PanInteractionMode(This, value))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl2_put_PanInteractionMode(This, value) \
    ((This)->lpVtbl->put_PanInteractionMode(This, value))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl2_get_RotateInteractionMode(This, value) \
    ((This)->lpVtbl->get_RotateInteractionMode(This, value))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl2_put_RotateInteractionMode(This, value) \
    ((This)->lpVtbl->put_RotateInteractionMode(This, value))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl2_get_TiltInteractionMode(This, value) \
    ((This)->lpVtbl->get_TiltInteractionMode(This, value))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl2_put_TiltInteractionMode(This, value) \
    ((This)->lpVtbl->put_TiltInteractionMode(This, value))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl2_get_ZoomInteractionMode(This, value) \
    ((This)->lpVtbl->get_ZoomInteractionMode(This, value))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl2_put_ZoomInteractionMode(This, value) \
    ((This)->lpVtbl->put_ZoomInteractionMode(This, value))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl2_get_Is3DSupported(This, value) \
    ((This)->lpVtbl->get_Is3DSupported(This, value))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl2_get_IsStreetsideSupported(This, value) \
    ((This)->lpVtbl->get_IsStreetsideSupported(This, value))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl2_get_Scene(This, value) \
    ((This)->lpVtbl->get_Scene(This, value))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl2_put_Scene(This, value) \
    ((This)->lpVtbl->put_Scene(This, value))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl2_get_ActualCamera(This, value) \
    ((This)->lpVtbl->get_ActualCamera(This, value))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl2_get_TargetCamera(This, value) \
    ((This)->lpVtbl->get_TargetCamera(This, value))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl2_get_CustomExperience(This, value) \
    ((This)->lpVtbl->get_CustomExperience(This, value))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl2_put_CustomExperience(This, value) \
    ((This)->lpVtbl->put_CustomExperience(This, value))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl2_add_MapElementClick(This, handler, token) \
    ((This)->lpVtbl->add_MapElementClick(This, handler, token))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl2_remove_MapElementClick(This, token) \
    ((This)->lpVtbl->remove_MapElementClick(This, token))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl2_add_MapElementPointerEntered(This, handler, token) \
    ((This)->lpVtbl->add_MapElementPointerEntered(This, handler, token))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl2_remove_MapElementPointerEntered(This, token) \
    ((This)->lpVtbl->remove_MapElementPointerEntered(This, token))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl2_add_MapElementPointerExited(This, handler, token) \
    ((This)->lpVtbl->add_MapElementPointerExited(This, handler, token))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl2_remove_MapElementPointerExited(This, token) \
    ((This)->lpVtbl->remove_MapElementPointerExited(This, token))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl2_add_ActualCameraChanged(This, handler, token) \
    ((This)->lpVtbl->add_ActualCameraChanged(This, handler, token))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl2_remove_ActualCameraChanged(This, token) \
    ((This)->lpVtbl->remove_ActualCameraChanged(This, token))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl2_add_ActualCameraChanging(This, handler, token) \
    ((This)->lpVtbl->add_ActualCameraChanging(This, handler, token))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl2_remove_ActualCameraChanging(This, token) \
    ((This)->lpVtbl->remove_ActualCameraChanging(This, token))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl2_add_TargetCameraChanged(This, handler, token) \
    ((This)->lpVtbl->add_TargetCameraChanged(This, handler, token))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl2_remove_TargetCameraChanged(This, token) \
    ((This)->lpVtbl->remove_TargetCameraChanged(This, token))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl2_add_CustomExperienceChanged(This, handler, token) \
    ((This)->lpVtbl->add_CustomExperienceChanged(This, handler, token))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl2_remove_CustomExperienceChanged(This, token) \
    ((This)->lpVtbl->remove_CustomExperienceChanged(This, token))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl2_StartContinuousRotate(This, rateInDegreesPerSecond) \
    ((This)->lpVtbl->StartContinuousRotate(This, rateInDegreesPerSecond))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl2_StopContinuousRotate(This) \
    ((This)->lpVtbl->StopContinuousRotate(This))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl2_StartContinuousTilt(This, rateInDegreesPerSecond) \
    ((This)->lpVtbl->StartContinuousTilt(This, rateInDegreesPerSecond))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl2_StopContinuousTilt(This) \
    ((This)->lpVtbl->StopContinuousTilt(This))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl2_StartContinuousZoom(This, rateOfChangePerSecond) \
    ((This)->lpVtbl->StartContinuousZoom(This, rateOfChangePerSecond))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl2_StopContinuousZoom(This) \
    ((This)->lpVtbl->StopContinuousZoom(This))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl2_TryRotateAsync(This, degrees, operation) \
    ((This)->lpVtbl->TryRotateAsync(This, degrees, operation))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl2_TryRotateToAsync(This, angleInDegrees, operation) \
    ((This)->lpVtbl->TryRotateToAsync(This, angleInDegrees, operation))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl2_TryTiltAsync(This, degrees, operation) \
    ((This)->lpVtbl->TryTiltAsync(This, degrees, operation))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl2_TryTiltToAsync(This, angleInDegrees, operation) \
    ((This)->lpVtbl->TryTiltToAsync(This, angleInDegrees, operation))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl2_TryZoomInAsync(This, operation) \
    ((This)->lpVtbl->TryZoomInAsync(This, operation))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl2_TryZoomOutAsync(This, operation) \
    ((This)->lpVtbl->TryZoomOutAsync(This, operation))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl2_TryZoomToAsync(This, zoomLevel, operation) \
    ((This)->lpVtbl->TryZoomToAsync(This, zoomLevel, operation))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl2_TrySetSceneAsync(This, scene, operation) \
    ((This)->lpVtbl->TrySetSceneAsync(This, scene, operation))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl2_TrySetSceneWithAnimationAsync(This, scene, animationKind, operation) \
    ((This)->lpVtbl->TrySetSceneWithAnimationAsync(This, scene, animationKind, operation))

#endif /* COBJMACROS */

EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl2;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl2_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Interface Windows.UI.Xaml.Controls.Maps.IMapControl3
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 2.0
 *
 * Interface is a part of the implementation of type Windows.UI.Xaml.Controls.Maps.MapControl
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x20000
#if !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl3_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl3_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_UI_Xaml_Controls_Maps_IMapControl3[] = L"Windows.UI.Xaml.Controls.Maps.IMapControl3";
typedef struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl3Vtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl3* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl3* This);
    ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl3* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl3* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl3* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl3* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* add_MapRightTapped)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl3* This,
        __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapRightTappedEventArgs* handler,
        EventRegistrationToken* token);
    HRESULT (STDMETHODCALLTYPE* remove_MapRightTapped)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl3* This,
        EventRegistrationToken token);

    END_INTERFACE
} __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl3Vtbl;

interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl3
{
    CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl3Vtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl3_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl3_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl3_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl3_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl3_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl3_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl3_add_MapRightTapped(This, handler, token) \
    ((This)->lpVtbl->add_MapRightTapped(This, handler, token))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl3_remove_MapRightTapped(This, token) \
    ((This)->lpVtbl->remove_MapRightTapped(This, token))

#endif /* COBJMACROS */

EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl3;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl3_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x20000

/*
 *
 * Interface Windows.UI.Xaml.Controls.Maps.IMapControl4
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 3.0
 *
 * Interface is a part of the implementation of type Windows.UI.Xaml.Controls.Maps.MapControl
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x30000
#if !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl4_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl4_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_UI_Xaml_Controls_Maps_IMapControl4[] = L"Windows.UI.Xaml.Controls.Maps.IMapControl4";
typedef struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl4Vtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl4* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl4* This);
    ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl4* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl4* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl4* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl4* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* get_BusinessLandmarksEnabled)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl4* This,
        boolean* value);
    HRESULT (STDMETHODCALLTYPE* put_BusinessLandmarksEnabled)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl4* This,
        boolean value);
    HRESULT (STDMETHODCALLTYPE* get_TransitFeaturesEnabled)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl4* This,
        boolean* value);
    HRESULT (STDMETHODCALLTYPE* put_TransitFeaturesEnabled)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl4* This,
        boolean value);
    HRESULT (STDMETHODCALLTYPE* GetVisibleRegion)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl4* This,
        enum __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CMapVisibleRegionKind region,
        __x_ABI_CWindows_CDevices_CGeolocation_CIGeopath** result);

    END_INTERFACE
} __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl4Vtbl;

interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl4
{
    CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl4Vtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl4_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl4_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl4_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl4_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl4_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl4_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl4_get_BusinessLandmarksEnabled(This, value) \
    ((This)->lpVtbl->get_BusinessLandmarksEnabled(This, value))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl4_put_BusinessLandmarksEnabled(This, value) \
    ((This)->lpVtbl->put_BusinessLandmarksEnabled(This, value))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl4_get_TransitFeaturesEnabled(This, value) \
    ((This)->lpVtbl->get_TransitFeaturesEnabled(This, value))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl4_put_TransitFeaturesEnabled(This, value) \
    ((This)->lpVtbl->put_TransitFeaturesEnabled(This, value))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl4_GetVisibleRegion(This, region, result) \
    ((This)->lpVtbl->GetVisibleRegion(This, region, result))

#endif /* COBJMACROS */

EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl4;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl4_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x30000

/*
 *
 * Interface Windows.UI.Xaml.Controls.Maps.IMapControl5
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 4.0
 *
 * Interface is a part of the implementation of type Windows.UI.Xaml.Controls.Maps.MapControl
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x40000
#if !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl5_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl5_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_UI_Xaml_Controls_Maps_IMapControl5[] = L"Windows.UI.Xaml.Controls.Maps.IMapControl5";
typedef struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl5Vtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl5* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl5* This);
    ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl5* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl5* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl5* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl5* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* get_MapProjection)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl5* This,
        enum __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CMapProjection* value);
    HRESULT (STDMETHODCALLTYPE* put_MapProjection)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl5* This,
        enum __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CMapProjection value);
    HRESULT (STDMETHODCALLTYPE* get_StyleSheet)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl5* This,
        __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapStyleSheet** value);
    HRESULT (STDMETHODCALLTYPE* put_StyleSheet)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl5* This,
        __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapStyleSheet* value);
    HRESULT (STDMETHODCALLTYPE* get_ViewPadding)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl5* This,
        struct __x_ABI_CWindows_CUI_CXaml_CThickness* value);
    HRESULT (STDMETHODCALLTYPE* put_ViewPadding)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl5* This,
        struct __x_ABI_CWindows_CUI_CXaml_CThickness value);
    HRESULT (STDMETHODCALLTYPE* add_MapContextRequested)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl5* This,
        __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapContextRequestedEventArgs* handler,
        EventRegistrationToken* token);
    HRESULT (STDMETHODCALLTYPE* remove_MapContextRequested)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl5* This,
        EventRegistrationToken token);
    HRESULT (STDMETHODCALLTYPE* FindMapElementsAtOffsetWithRadius)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl5* This,
        struct __x_ABI_CWindows_CFoundation_CPoint offset,
        DOUBLE radius,
        __FIVectorView_1_Windows__CUI__CXaml__CControls__CMaps__CMapElement** result);
    HRESULT (STDMETHODCALLTYPE* GetLocationFromOffsetWithReferenceSystem)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl5* This,
        struct __x_ABI_CWindows_CFoundation_CPoint offset,
        enum __x_ABI_CWindows_CDevices_CGeolocation_CAltitudeReferenceSystem desiredReferenceSystem,
        __x_ABI_CWindows_CDevices_CGeolocation_CIGeopoint** location);
    HRESULT (STDMETHODCALLTYPE* StartContinuousPan)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl5* This,
        DOUBLE horizontalPixelsPerSecond,
        DOUBLE verticalPixelsPerSecond);
    HRESULT (STDMETHODCALLTYPE* StopContinuousPan)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl5* This);
    HRESULT (STDMETHODCALLTYPE* TryPanAsync)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl5* This,
        DOUBLE horizontalPixels,
        DOUBLE verticalPixels,
        __FIAsyncOperation_1_boolean** operation);
    HRESULT (STDMETHODCALLTYPE* TryPanToAsync)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl5* This,
        __x_ABI_CWindows_CDevices_CGeolocation_CIGeopoint* location,
        __FIAsyncOperation_1_boolean** operation);

    END_INTERFACE
} __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl5Vtbl;

interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl5
{
    CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl5Vtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl5_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl5_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl5_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl5_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl5_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl5_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl5_get_MapProjection(This, value) \
    ((This)->lpVtbl->get_MapProjection(This, value))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl5_put_MapProjection(This, value) \
    ((This)->lpVtbl->put_MapProjection(This, value))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl5_get_StyleSheet(This, value) \
    ((This)->lpVtbl->get_StyleSheet(This, value))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl5_put_StyleSheet(This, value) \
    ((This)->lpVtbl->put_StyleSheet(This, value))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl5_get_ViewPadding(This, value) \
    ((This)->lpVtbl->get_ViewPadding(This, value))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl5_put_ViewPadding(This, value) \
    ((This)->lpVtbl->put_ViewPadding(This, value))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl5_add_MapContextRequested(This, handler, token) \
    ((This)->lpVtbl->add_MapContextRequested(This, handler, token))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl5_remove_MapContextRequested(This, token) \
    ((This)->lpVtbl->remove_MapContextRequested(This, token))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl5_FindMapElementsAtOffsetWithRadius(This, offset, radius, result) \
    ((This)->lpVtbl->FindMapElementsAtOffsetWithRadius(This, offset, radius, result))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl5_GetLocationFromOffsetWithReferenceSystem(This, offset, desiredReferenceSystem, location) \
    ((This)->lpVtbl->GetLocationFromOffsetWithReferenceSystem(This, offset, desiredReferenceSystem, location))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl5_StartContinuousPan(This, horizontalPixelsPerSecond, verticalPixelsPerSecond) \
    ((This)->lpVtbl->StartContinuousPan(This, horizontalPixelsPerSecond, verticalPixelsPerSecond))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl5_StopContinuousPan(This) \
    ((This)->lpVtbl->StopContinuousPan(This))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl5_TryPanAsync(This, horizontalPixels, verticalPixels, operation) \
    ((This)->lpVtbl->TryPanAsync(This, horizontalPixels, verticalPixels, operation))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl5_TryPanToAsync(This, location, operation) \
    ((This)->lpVtbl->TryPanToAsync(This, location, operation))

#endif /* COBJMACROS */

EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl5;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl5_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x40000

/*
 *
 * Interface Windows.UI.Xaml.Controls.Maps.IMapControl6
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 5.0
 *
 * Interface is a part of the implementation of type Windows.UI.Xaml.Controls.Maps.MapControl
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x50000
#if !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl6_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl6_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_UI_Xaml_Controls_Maps_IMapControl6[] = L"Windows.UI.Xaml.Controls.Maps.IMapControl6";
typedef struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl6Vtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl6* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl6* This);
    ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl6* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl6* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl6* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl6* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* get_Layers)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl6* This,
        __FIVector_1_Windows__CUI__CXaml__CControls__CMaps__CMapLayer** value);
    HRESULT (STDMETHODCALLTYPE* put_Layers)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl6* This,
        __FIVector_1_Windows__CUI__CXaml__CControls__CMaps__CMapLayer* value);
    HRESULT (STDMETHODCALLTYPE* TryGetLocationFromOffset)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl6* This,
        struct __x_ABI_CWindows_CFoundation_CPoint offset,
        __x_ABI_CWindows_CDevices_CGeolocation_CIGeopoint** location,
        boolean* returnValue);
    HRESULT (STDMETHODCALLTYPE* TryGetLocationFromOffsetWithReferenceSystem)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl6* This,
        struct __x_ABI_CWindows_CFoundation_CPoint offset,
        enum __x_ABI_CWindows_CDevices_CGeolocation_CAltitudeReferenceSystem desiredReferenceSystem,
        __x_ABI_CWindows_CDevices_CGeolocation_CIGeopoint** location,
        boolean* returnValue);

    END_INTERFACE
} __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl6Vtbl;

interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl6
{
    CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl6Vtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl6_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl6_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl6_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl6_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl6_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl6_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl6_get_Layers(This, value) \
    ((This)->lpVtbl->get_Layers(This, value))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl6_put_Layers(This, value) \
    ((This)->lpVtbl->put_Layers(This, value))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl6_TryGetLocationFromOffset(This, offset, location, returnValue) \
    ((This)->lpVtbl->TryGetLocationFromOffset(This, offset, location, returnValue))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl6_TryGetLocationFromOffsetWithReferenceSystem(This, offset, desiredReferenceSystem, location, returnValue) \
    ((This)->lpVtbl->TryGetLocationFromOffsetWithReferenceSystem(This, offset, desiredReferenceSystem, location, returnValue))

#endif /* COBJMACROS */

EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl6;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl6_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x50000

/*
 *
 * Interface Windows.UI.Xaml.Controls.Maps.IMapControl7
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 6.0
 *
 * Interface is a part of the implementation of type Windows.UI.Xaml.Controls.Maps.MapControl
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x60000
#if !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl7_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl7_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_UI_Xaml_Controls_Maps_IMapControl7[] = L"Windows.UI.Xaml.Controls.Maps.IMapControl7";
typedef struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl7Vtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl7* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl7* This);
    ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl7* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl7* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl7* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl7* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* get_Region)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl7* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* put_Region)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl7* This,
        HSTRING value);

    END_INTERFACE
} __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl7Vtbl;

interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl7
{
    CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl7Vtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl7_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl7_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl7_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl7_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl7_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl7_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl7_get_Region(This, value) \
    ((This)->lpVtbl->get_Region(This, value))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl7_put_Region(This, value) \
    ((This)->lpVtbl->put_Region(This, value))

#endif /* COBJMACROS */

EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl7;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl7_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x60000

/*
 *
 * Interface Windows.UI.Xaml.Controls.Maps.IMapControl8
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 8.0
 *
 * Interface is a part of the implementation of type Windows.UI.Xaml.Controls.Maps.MapControl
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x80000
#if !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl8_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl8_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_UI_Xaml_Controls_Maps_IMapControl8[] = L"Windows.UI.Xaml.Controls.Maps.IMapControl8";
typedef struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl8Vtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl8* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl8* This);
    ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl8* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl8* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl8* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl8* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* get_CanTiltDown)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl8* This,
        boolean* value);
    HRESULT (STDMETHODCALLTYPE* get_CanTiltUp)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl8* This,
        boolean* value);
    HRESULT (STDMETHODCALLTYPE* get_CanZoomIn)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl8* This,
        boolean* value);
    HRESULT (STDMETHODCALLTYPE* get_CanZoomOut)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl8* This,
        boolean* value);

    END_INTERFACE
} __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl8Vtbl;

interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl8
{
    CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl8Vtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl8_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl8_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl8_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl8_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl8_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl8_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl8_get_CanTiltDown(This, value) \
    ((This)->lpVtbl->get_CanTiltDown(This, value))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl8_get_CanTiltUp(This, value) \
    ((This)->lpVtbl->get_CanTiltUp(This, value))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl8_get_CanZoomIn(This, value) \
    ((This)->lpVtbl->get_CanZoomIn(This, value))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl8_get_CanZoomOut(This, value) \
    ((This)->lpVtbl->get_CanZoomOut(This, value))

#endif /* COBJMACROS */

EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl8;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl8_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x80000

/*
 *
 * Interface Windows.UI.Xaml.Controls.Maps.IMapControlBusinessLandmarkClickEventArgs
 *
 * Introduced to Windows.Services.Maps.LocalSearchContract in version 2.0
 *
 * Interface is a part of the implementation of type Windows.UI.Xaml.Controls.Maps.MapControlBusinessLandmarkClickEventArgs
 *
 */
#if WINDOWS_SERVICES_MAPS_LOCALSEARCHCONTRACT_VERSION >= 0x20000
#if !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlBusinessLandmarkClickEventArgs_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlBusinessLandmarkClickEventArgs_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_UI_Xaml_Controls_Maps_IMapControlBusinessLandmarkClickEventArgs[] = L"Windows.UI.Xaml.Controls.Maps.IMapControlBusinessLandmarkClickEventArgs";
typedef struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlBusinessLandmarkClickEventArgsVtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlBusinessLandmarkClickEventArgs* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlBusinessLandmarkClickEventArgs* This);
    ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlBusinessLandmarkClickEventArgs* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlBusinessLandmarkClickEventArgs* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlBusinessLandmarkClickEventArgs* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlBusinessLandmarkClickEventArgs* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* get_LocalLocations)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlBusinessLandmarkClickEventArgs* This,
        __FIVectorView_1_Windows__CServices__CMaps__CLocalSearch__CLocalLocation** value);

    END_INTERFACE
} __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlBusinessLandmarkClickEventArgsVtbl;

interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlBusinessLandmarkClickEventArgs
{
    CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlBusinessLandmarkClickEventArgsVtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlBusinessLandmarkClickEventArgs_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlBusinessLandmarkClickEventArgs_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlBusinessLandmarkClickEventArgs_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlBusinessLandmarkClickEventArgs_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlBusinessLandmarkClickEventArgs_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlBusinessLandmarkClickEventArgs_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlBusinessLandmarkClickEventArgs_get_LocalLocations(This, value) \
    ((This)->lpVtbl->get_LocalLocations(This, value))

#endif /* COBJMACROS */

EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlBusinessLandmarkClickEventArgs;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlBusinessLandmarkClickEventArgs_INTERFACE_DEFINED__) */
#endif // WINDOWS_SERVICES_MAPS_LOCALSEARCHCONTRACT_VERSION >= 0x20000

/*
 *
 * Interface Windows.UI.Xaml.Controls.Maps.IMapControlBusinessLandmarkPointerEnteredEventArgs
 *
 * Introduced to Windows.Services.Maps.LocalSearchContract in version 3.0
 *
 * Interface is a part of the implementation of type Windows.UI.Xaml.Controls.Maps.MapControlBusinessLandmarkPointerEnteredEventArgs
 *
 */
#if WINDOWS_SERVICES_MAPS_LOCALSEARCHCONTRACT_VERSION >= 0x30000
#if !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlBusinessLandmarkPointerEnteredEventArgs_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlBusinessLandmarkPointerEnteredEventArgs_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_UI_Xaml_Controls_Maps_IMapControlBusinessLandmarkPointerEnteredEventArgs[] = L"Windows.UI.Xaml.Controls.Maps.IMapControlBusinessLandmarkPointerEnteredEventArgs";
typedef struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlBusinessLandmarkPointerEnteredEventArgsVtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlBusinessLandmarkPointerEnteredEventArgs* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlBusinessLandmarkPointerEnteredEventArgs* This);
    ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlBusinessLandmarkPointerEnteredEventArgs* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlBusinessLandmarkPointerEnteredEventArgs* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlBusinessLandmarkPointerEnteredEventArgs* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlBusinessLandmarkPointerEnteredEventArgs* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* get_LocalLocations)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlBusinessLandmarkPointerEnteredEventArgs* This,
        __FIVectorView_1_Windows__CServices__CMaps__CLocalSearch__CLocalLocation** value);

    END_INTERFACE
} __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlBusinessLandmarkPointerEnteredEventArgsVtbl;

interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlBusinessLandmarkPointerEnteredEventArgs
{
    CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlBusinessLandmarkPointerEnteredEventArgsVtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlBusinessLandmarkPointerEnteredEventArgs_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlBusinessLandmarkPointerEnteredEventArgs_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlBusinessLandmarkPointerEnteredEventArgs_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlBusinessLandmarkPointerEnteredEventArgs_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlBusinessLandmarkPointerEnteredEventArgs_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlBusinessLandmarkPointerEnteredEventArgs_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlBusinessLandmarkPointerEnteredEventArgs_get_LocalLocations(This, value) \
    ((This)->lpVtbl->get_LocalLocations(This, value))

#endif /* COBJMACROS */

EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlBusinessLandmarkPointerEnteredEventArgs;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlBusinessLandmarkPointerEnteredEventArgs_INTERFACE_DEFINED__) */
#endif // WINDOWS_SERVICES_MAPS_LOCALSEARCHCONTRACT_VERSION >= 0x30000

/*
 *
 * Interface Windows.UI.Xaml.Controls.Maps.IMapControlBusinessLandmarkPointerExitedEventArgs
 *
 * Introduced to Windows.Services.Maps.LocalSearchContract in version 3.0
 *
 * Interface is a part of the implementation of type Windows.UI.Xaml.Controls.Maps.MapControlBusinessLandmarkPointerExitedEventArgs
 *
 */
#if WINDOWS_SERVICES_MAPS_LOCALSEARCHCONTRACT_VERSION >= 0x30000
#if !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlBusinessLandmarkPointerExitedEventArgs_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlBusinessLandmarkPointerExitedEventArgs_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_UI_Xaml_Controls_Maps_IMapControlBusinessLandmarkPointerExitedEventArgs[] = L"Windows.UI.Xaml.Controls.Maps.IMapControlBusinessLandmarkPointerExitedEventArgs";
typedef struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlBusinessLandmarkPointerExitedEventArgsVtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlBusinessLandmarkPointerExitedEventArgs* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlBusinessLandmarkPointerExitedEventArgs* This);
    ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlBusinessLandmarkPointerExitedEventArgs* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlBusinessLandmarkPointerExitedEventArgs* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlBusinessLandmarkPointerExitedEventArgs* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlBusinessLandmarkPointerExitedEventArgs* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* get_LocalLocations)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlBusinessLandmarkPointerExitedEventArgs* This,
        __FIVectorView_1_Windows__CServices__CMaps__CLocalSearch__CLocalLocation** value);

    END_INTERFACE
} __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlBusinessLandmarkPointerExitedEventArgsVtbl;

interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlBusinessLandmarkPointerExitedEventArgs
{
    CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlBusinessLandmarkPointerExitedEventArgsVtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlBusinessLandmarkPointerExitedEventArgs_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlBusinessLandmarkPointerExitedEventArgs_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlBusinessLandmarkPointerExitedEventArgs_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlBusinessLandmarkPointerExitedEventArgs_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlBusinessLandmarkPointerExitedEventArgs_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlBusinessLandmarkPointerExitedEventArgs_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlBusinessLandmarkPointerExitedEventArgs_get_LocalLocations(This, value) \
    ((This)->lpVtbl->get_LocalLocations(This, value))

#endif /* COBJMACROS */

EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlBusinessLandmarkPointerExitedEventArgs;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlBusinessLandmarkPointerExitedEventArgs_INTERFACE_DEFINED__) */
#endif // WINDOWS_SERVICES_MAPS_LOCALSEARCHCONTRACT_VERSION >= 0x30000

/*
 *
 * Interface Windows.UI.Xaml.Controls.Maps.IMapControlBusinessLandmarkRightTappedEventArgs
 *
 * Introduced to Windows.Services.Maps.LocalSearchContract in version 2.0
 *
 * Interface is a part of the implementation of type Windows.UI.Xaml.Controls.Maps.MapControlBusinessLandmarkRightTappedEventArgs
 *
 */
#if WINDOWS_SERVICES_MAPS_LOCALSEARCHCONTRACT_VERSION >= 0x20000
#if !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlBusinessLandmarkRightTappedEventArgs_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlBusinessLandmarkRightTappedEventArgs_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_UI_Xaml_Controls_Maps_IMapControlBusinessLandmarkRightTappedEventArgs[] = L"Windows.UI.Xaml.Controls.Maps.IMapControlBusinessLandmarkRightTappedEventArgs";
typedef struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlBusinessLandmarkRightTappedEventArgsVtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlBusinessLandmarkRightTappedEventArgs* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlBusinessLandmarkRightTappedEventArgs* This);
    ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlBusinessLandmarkRightTappedEventArgs* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlBusinessLandmarkRightTappedEventArgs* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlBusinessLandmarkRightTappedEventArgs* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlBusinessLandmarkRightTappedEventArgs* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* get_LocalLocations)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlBusinessLandmarkRightTappedEventArgs* This,
        __FIVectorView_1_Windows__CServices__CMaps__CLocalSearch__CLocalLocation** value);

    END_INTERFACE
} __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlBusinessLandmarkRightTappedEventArgsVtbl;

interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlBusinessLandmarkRightTappedEventArgs
{
    CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlBusinessLandmarkRightTappedEventArgsVtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlBusinessLandmarkRightTappedEventArgs_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlBusinessLandmarkRightTappedEventArgs_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlBusinessLandmarkRightTappedEventArgs_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlBusinessLandmarkRightTappedEventArgs_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlBusinessLandmarkRightTappedEventArgs_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlBusinessLandmarkRightTappedEventArgs_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlBusinessLandmarkRightTappedEventArgs_get_LocalLocations(This, value) \
    ((This)->lpVtbl->get_LocalLocations(This, value))

#endif /* COBJMACROS */

EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlBusinessLandmarkRightTappedEventArgs;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlBusinessLandmarkRightTappedEventArgs_INTERFACE_DEFINED__) */
#endif // WINDOWS_SERVICES_MAPS_LOCALSEARCHCONTRACT_VERSION >= 0x20000

/*
 *
 * Interface Windows.UI.Xaml.Controls.Maps.IMapControlDataHelper
 *
 * Introduced to Windows.Services.Maps.LocalSearchContract in version 2.0
 *
 * Interface is a part of the implementation of type Windows.UI.Xaml.Controls.Maps.MapControlDataHelper
 *
 */
#if WINDOWS_SERVICES_MAPS_LOCALSEARCHCONTRACT_VERSION >= 0x20000
#if !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlDataHelper_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlDataHelper_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_UI_Xaml_Controls_Maps_IMapControlDataHelper[] = L"Windows.UI.Xaml.Controls.Maps.IMapControlDataHelper";
typedef struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlDataHelperVtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlDataHelper* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlDataHelper* This);
    ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlDataHelper* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlDataHelper* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlDataHelper* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlDataHelper* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* add_BusinessLandmarkClick)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlDataHelper* This,
        __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapControlBusinessLandmarkClickEventArgs* value,
        EventRegistrationToken* token);
    HRESULT (STDMETHODCALLTYPE* remove_BusinessLandmarkClick)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlDataHelper* This,
        EventRegistrationToken token);
    HRESULT (STDMETHODCALLTYPE* add_TransitFeatureClick)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlDataHelper* This,
        __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapControlTransitFeatureClickEventArgs* value,
        EventRegistrationToken* token);
    HRESULT (STDMETHODCALLTYPE* remove_TransitFeatureClick)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlDataHelper* This,
        EventRegistrationToken token);
    HRESULT (STDMETHODCALLTYPE* add_BusinessLandmarkRightTapped)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlDataHelper* This,
        __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapControlBusinessLandmarkRightTappedEventArgs* value,
        EventRegistrationToken* token);
    HRESULT (STDMETHODCALLTYPE* remove_BusinessLandmarkRightTapped)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlDataHelper* This,
        EventRegistrationToken token);
    HRESULT (STDMETHODCALLTYPE* add_TransitFeatureRightTapped)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlDataHelper* This,
        __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapControlTransitFeatureRightTappedEventArgs* value,
        EventRegistrationToken* token);
    HRESULT (STDMETHODCALLTYPE* remove_TransitFeatureRightTapped)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlDataHelper* This,
        EventRegistrationToken token);

    END_INTERFACE
} __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlDataHelperVtbl;

interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlDataHelper
{
    CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlDataHelperVtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlDataHelper_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlDataHelper_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlDataHelper_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlDataHelper_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlDataHelper_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlDataHelper_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlDataHelper_add_BusinessLandmarkClick(This, value, token) \
    ((This)->lpVtbl->add_BusinessLandmarkClick(This, value, token))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlDataHelper_remove_BusinessLandmarkClick(This, token) \
    ((This)->lpVtbl->remove_BusinessLandmarkClick(This, token))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlDataHelper_add_TransitFeatureClick(This, value, token) \
    ((This)->lpVtbl->add_TransitFeatureClick(This, value, token))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlDataHelper_remove_TransitFeatureClick(This, token) \
    ((This)->lpVtbl->remove_TransitFeatureClick(This, token))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlDataHelper_add_BusinessLandmarkRightTapped(This, value, token) \
    ((This)->lpVtbl->add_BusinessLandmarkRightTapped(This, value, token))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlDataHelper_remove_BusinessLandmarkRightTapped(This, token) \
    ((This)->lpVtbl->remove_BusinessLandmarkRightTapped(This, token))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlDataHelper_add_TransitFeatureRightTapped(This, value, token) \
    ((This)->lpVtbl->add_TransitFeatureRightTapped(This, value, token))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlDataHelper_remove_TransitFeatureRightTapped(This, token) \
    ((This)->lpVtbl->remove_TransitFeatureRightTapped(This, token))

#endif /* COBJMACROS */

EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlDataHelper;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlDataHelper_INTERFACE_DEFINED__) */
#endif // WINDOWS_SERVICES_MAPS_LOCALSEARCHCONTRACT_VERSION >= 0x20000

/*
 *
 * Interface Windows.UI.Xaml.Controls.Maps.IMapControlDataHelper2
 *
 * Introduced to Windows.Services.Maps.LocalSearchContract in version 3.0
 *
 * Interface is a part of the implementation of type Windows.UI.Xaml.Controls.Maps.MapControlDataHelper
 *
 */
#if WINDOWS_SERVICES_MAPS_LOCALSEARCHCONTRACT_VERSION >= 0x30000
#if !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlDataHelper2_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlDataHelper2_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_UI_Xaml_Controls_Maps_IMapControlDataHelper2[] = L"Windows.UI.Xaml.Controls.Maps.IMapControlDataHelper2";
typedef struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlDataHelper2Vtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlDataHelper2* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlDataHelper2* This);
    ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlDataHelper2* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlDataHelper2* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlDataHelper2* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlDataHelper2* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* add_BusinessLandmarkPointerEntered)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlDataHelper2* This,
        __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapControlBusinessLandmarkPointerEnteredEventArgs* value,
        EventRegistrationToken* token);
    HRESULT (STDMETHODCALLTYPE* remove_BusinessLandmarkPointerEntered)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlDataHelper2* This,
        EventRegistrationToken token);
    HRESULT (STDMETHODCALLTYPE* add_TransitFeaturePointerEntered)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlDataHelper2* This,
        __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapControlTransitFeaturePointerEnteredEventArgs* value,
        EventRegistrationToken* token);
    HRESULT (STDMETHODCALLTYPE* remove_TransitFeaturePointerEntered)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlDataHelper2* This,
        EventRegistrationToken token);
    HRESULT (STDMETHODCALLTYPE* add_BusinessLandmarkPointerExited)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlDataHelper2* This,
        __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapControlBusinessLandmarkPointerExitedEventArgs* value,
        EventRegistrationToken* token);
    HRESULT (STDMETHODCALLTYPE* remove_BusinessLandmarkPointerExited)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlDataHelper2* This,
        EventRegistrationToken token);
    HRESULT (STDMETHODCALLTYPE* add_TransitFeaturePointerExited)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlDataHelper2* This,
        __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapControl_Windows__CUI__CXaml__CControls__CMaps__CMapControlTransitFeaturePointerExitedEventArgs* value,
        EventRegistrationToken* token);
    HRESULT (STDMETHODCALLTYPE* remove_TransitFeaturePointerExited)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlDataHelper2* This,
        EventRegistrationToken token);

    END_INTERFACE
} __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlDataHelper2Vtbl;

interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlDataHelper2
{
    CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlDataHelper2Vtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlDataHelper2_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlDataHelper2_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlDataHelper2_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlDataHelper2_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlDataHelper2_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlDataHelper2_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlDataHelper2_add_BusinessLandmarkPointerEntered(This, value, token) \
    ((This)->lpVtbl->add_BusinessLandmarkPointerEntered(This, value, token))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlDataHelper2_remove_BusinessLandmarkPointerEntered(This, token) \
    ((This)->lpVtbl->remove_BusinessLandmarkPointerEntered(This, token))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlDataHelper2_add_TransitFeaturePointerEntered(This, value, token) \
    ((This)->lpVtbl->add_TransitFeaturePointerEntered(This, value, token))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlDataHelper2_remove_TransitFeaturePointerEntered(This, token) \
    ((This)->lpVtbl->remove_TransitFeaturePointerEntered(This, token))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlDataHelper2_add_BusinessLandmarkPointerExited(This, value, token) \
    ((This)->lpVtbl->add_BusinessLandmarkPointerExited(This, value, token))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlDataHelper2_remove_BusinessLandmarkPointerExited(This, token) \
    ((This)->lpVtbl->remove_BusinessLandmarkPointerExited(This, token))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlDataHelper2_add_TransitFeaturePointerExited(This, value, token) \
    ((This)->lpVtbl->add_TransitFeaturePointerExited(This, value, token))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlDataHelper2_remove_TransitFeaturePointerExited(This, token) \
    ((This)->lpVtbl->remove_TransitFeaturePointerExited(This, token))

#endif /* COBJMACROS */

EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlDataHelper2;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlDataHelper2_INTERFACE_DEFINED__) */
#endif // WINDOWS_SERVICES_MAPS_LOCALSEARCHCONTRACT_VERSION >= 0x30000

/*
 *
 * Interface Windows.UI.Xaml.Controls.Maps.IMapControlDataHelperFactory
 *
 * Introduced to Windows.Services.Maps.LocalSearchContract in version 2.0
 *
 * Interface is a part of the implementation of type Windows.UI.Xaml.Controls.Maps.MapControlDataHelper
 *
 */
#if WINDOWS_SERVICES_MAPS_LOCALSEARCHCONTRACT_VERSION >= 0x20000
#if !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlDataHelperFactory_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlDataHelperFactory_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_UI_Xaml_Controls_Maps_IMapControlDataHelperFactory[] = L"Windows.UI.Xaml.Controls.Maps.IMapControlDataHelperFactory";
typedef struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlDataHelperFactoryVtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlDataHelperFactory* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlDataHelperFactory* This);
    ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlDataHelperFactory* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlDataHelperFactory* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlDataHelperFactory* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlDataHelperFactory* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* CreateInstance)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlDataHelperFactory* This,
        __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl* map,
        __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlDataHelper** instance);

    END_INTERFACE
} __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlDataHelperFactoryVtbl;

interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlDataHelperFactory
{
    CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlDataHelperFactoryVtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlDataHelperFactory_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlDataHelperFactory_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlDataHelperFactory_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlDataHelperFactory_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlDataHelperFactory_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlDataHelperFactory_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlDataHelperFactory_CreateInstance(This, map, instance) \
    ((This)->lpVtbl->CreateInstance(This, map, instance))

#endif /* COBJMACROS */

EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlDataHelperFactory;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlDataHelperFactory_INTERFACE_DEFINED__) */
#endif // WINDOWS_SERVICES_MAPS_LOCALSEARCHCONTRACT_VERSION >= 0x20000

/*
 *
 * Interface Windows.UI.Xaml.Controls.Maps.IMapControlDataHelperStatics
 *
 * Introduced to Windows.Services.Maps.LocalSearchContract in version 4.0
 *
 * Interface is a part of the implementation of type Windows.UI.Xaml.Controls.Maps.MapControlDataHelper
 *
 */
#if WINDOWS_SERVICES_MAPS_LOCALSEARCHCONTRACT_VERSION >= 0x40000
#if !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlDataHelperStatics_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlDataHelperStatics_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_UI_Xaml_Controls_Maps_IMapControlDataHelperStatics[] = L"Windows.UI.Xaml.Controls.Maps.IMapControlDataHelperStatics";
typedef struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlDataHelperStaticsVtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlDataHelperStatics* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlDataHelperStatics* This);
    ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlDataHelperStatics* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlDataHelperStatics* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlDataHelperStatics* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlDataHelperStatics* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* CreateMapControl)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlDataHelperStatics* This,
        boolean rasterRenderMode,
        __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControl** returnValue);

    END_INTERFACE
} __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlDataHelperStaticsVtbl;

interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlDataHelperStatics
{
    CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlDataHelperStaticsVtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlDataHelperStatics_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlDataHelperStatics_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlDataHelperStatics_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlDataHelperStatics_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlDataHelperStatics_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlDataHelperStatics_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlDataHelperStatics_CreateMapControl(This, rasterRenderMode, returnValue) \
    ((This)->lpVtbl->CreateMapControl(This, rasterRenderMode, returnValue))

#endif /* COBJMACROS */

EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlDataHelperStatics;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlDataHelperStatics_INTERFACE_DEFINED__) */
#endif // WINDOWS_SERVICES_MAPS_LOCALSEARCHCONTRACT_VERSION >= 0x40000

/*
 *
 * Interface Windows.UI.Xaml.Controls.Maps.IMapControlStatics
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Interface is a part of the implementation of type Windows.UI.Xaml.Controls.Maps.MapControl
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_UI_Xaml_Controls_Maps_IMapControlStatics[] = L"Windows.UI.Xaml.Controls.Maps.IMapControlStatics";
typedef struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStaticsVtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics* This);
    ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* get_CenterProperty)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics* This,
        __x_ABI_CWindows_CUI_CXaml_CIDependencyProperty** value);
    HRESULT (STDMETHODCALLTYPE* get_ChildrenProperty)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics* This,
        __x_ABI_CWindows_CUI_CXaml_CIDependencyProperty** value);
    HRESULT (STDMETHODCALLTYPE* get_ColorSchemeProperty)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics* This,
        __x_ABI_CWindows_CUI_CXaml_CIDependencyProperty** value);
    HRESULT (STDMETHODCALLTYPE* get_DesiredPitchProperty)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics* This,
        __x_ABI_CWindows_CUI_CXaml_CIDependencyProperty** value);
    HRESULT (STDMETHODCALLTYPE* get_HeadingProperty)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics* This,
        __x_ABI_CWindows_CUI_CXaml_CIDependencyProperty** value);
    HRESULT (STDMETHODCALLTYPE* get_LandmarksVisibleProperty)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics* This,
        __x_ABI_CWindows_CUI_CXaml_CIDependencyProperty** value);
    HRESULT (STDMETHODCALLTYPE* get_LoadingStatusProperty)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics* This,
        __x_ABI_CWindows_CUI_CXaml_CIDependencyProperty** value);
    HRESULT (STDMETHODCALLTYPE* get_MapServiceTokenProperty)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics* This,
        __x_ABI_CWindows_CUI_CXaml_CIDependencyProperty** value);
    HRESULT (STDMETHODCALLTYPE* get_PedestrianFeaturesVisibleProperty)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics* This,
        __x_ABI_CWindows_CUI_CXaml_CIDependencyProperty** value);
    HRESULT (STDMETHODCALLTYPE* get_PitchProperty)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics* This,
        __x_ABI_CWindows_CUI_CXaml_CIDependencyProperty** value);
    HRESULT (STDMETHODCALLTYPE* get_StyleProperty)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics* This,
        __x_ABI_CWindows_CUI_CXaml_CIDependencyProperty** value);
    HRESULT (STDMETHODCALLTYPE* get_TrafficFlowVisibleProperty)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics* This,
        __x_ABI_CWindows_CUI_CXaml_CIDependencyProperty** value);
    HRESULT (STDMETHODCALLTYPE* get_TransformOriginProperty)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics* This,
        __x_ABI_CWindows_CUI_CXaml_CIDependencyProperty** value);
    HRESULT (STDMETHODCALLTYPE* get_WatermarkModeProperty)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics* This,
        __x_ABI_CWindows_CUI_CXaml_CIDependencyProperty** value);
    HRESULT (STDMETHODCALLTYPE* get_ZoomLevelProperty)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics* This,
        __x_ABI_CWindows_CUI_CXaml_CIDependencyProperty** value);
    HRESULT (STDMETHODCALLTYPE* get_MapElementsProperty)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics* This,
        __x_ABI_CWindows_CUI_CXaml_CIDependencyProperty** value);
    HRESULT (STDMETHODCALLTYPE* get_RoutesProperty)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics* This,
        __x_ABI_CWindows_CUI_CXaml_CIDependencyProperty** value);
    HRESULT (STDMETHODCALLTYPE* get_TileSourcesProperty)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics* This,
        __x_ABI_CWindows_CUI_CXaml_CIDependencyProperty** value);
    HRESULT (STDMETHODCALLTYPE* get_LocationProperty)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics* This,
        __x_ABI_CWindows_CUI_CXaml_CIDependencyProperty** value);
    HRESULT (STDMETHODCALLTYPE* GetLocation)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics* This,
        __x_ABI_CWindows_CUI_CXaml_CIDependencyObject* element,
        __x_ABI_CWindows_CDevices_CGeolocation_CIGeopoint** result);
    HRESULT (STDMETHODCALLTYPE* SetLocation)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics* This,
        __x_ABI_CWindows_CUI_CXaml_CIDependencyObject* element,
        __x_ABI_CWindows_CDevices_CGeolocation_CIGeopoint* value);
    HRESULT (STDMETHODCALLTYPE* get_NormalizedAnchorPointProperty)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics* This,
        __x_ABI_CWindows_CUI_CXaml_CIDependencyProperty** value);
    HRESULT (STDMETHODCALLTYPE* GetNormalizedAnchorPoint)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics* This,
        __x_ABI_CWindows_CUI_CXaml_CIDependencyObject* element,
        struct __x_ABI_CWindows_CFoundation_CPoint* result);
    HRESULT (STDMETHODCALLTYPE* SetNormalizedAnchorPoint)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics* This,
        __x_ABI_CWindows_CUI_CXaml_CIDependencyObject* element,
        struct __x_ABI_CWindows_CFoundation_CPoint value);

    END_INTERFACE
} __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStaticsVtbl;

interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics
{
    CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStaticsVtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics_get_CenterProperty(This, value) \
    ((This)->lpVtbl->get_CenterProperty(This, value))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics_get_ChildrenProperty(This, value) \
    ((This)->lpVtbl->get_ChildrenProperty(This, value))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics_get_ColorSchemeProperty(This, value) \
    ((This)->lpVtbl->get_ColorSchemeProperty(This, value))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics_get_DesiredPitchProperty(This, value) \
    ((This)->lpVtbl->get_DesiredPitchProperty(This, value))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics_get_HeadingProperty(This, value) \
    ((This)->lpVtbl->get_HeadingProperty(This, value))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics_get_LandmarksVisibleProperty(This, value) \
    ((This)->lpVtbl->get_LandmarksVisibleProperty(This, value))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics_get_LoadingStatusProperty(This, value) \
    ((This)->lpVtbl->get_LoadingStatusProperty(This, value))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics_get_MapServiceTokenProperty(This, value) \
    ((This)->lpVtbl->get_MapServiceTokenProperty(This, value))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics_get_PedestrianFeaturesVisibleProperty(This, value) \
    ((This)->lpVtbl->get_PedestrianFeaturesVisibleProperty(This, value))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics_get_PitchProperty(This, value) \
    ((This)->lpVtbl->get_PitchProperty(This, value))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics_get_StyleProperty(This, value) \
    ((This)->lpVtbl->get_StyleProperty(This, value))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics_get_TrafficFlowVisibleProperty(This, value) \
    ((This)->lpVtbl->get_TrafficFlowVisibleProperty(This, value))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics_get_TransformOriginProperty(This, value) \
    ((This)->lpVtbl->get_TransformOriginProperty(This, value))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics_get_WatermarkModeProperty(This, value) \
    ((This)->lpVtbl->get_WatermarkModeProperty(This, value))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics_get_ZoomLevelProperty(This, value) \
    ((This)->lpVtbl->get_ZoomLevelProperty(This, value))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics_get_MapElementsProperty(This, value) \
    ((This)->lpVtbl->get_MapElementsProperty(This, value))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics_get_RoutesProperty(This, value) \
    ((This)->lpVtbl->get_RoutesProperty(This, value))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics_get_TileSourcesProperty(This, value) \
    ((This)->lpVtbl->get_TileSourcesProperty(This, value))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics_get_LocationProperty(This, value) \
    ((This)->lpVtbl->get_LocationProperty(This, value))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics_GetLocation(This, element, result) \
    ((This)->lpVtbl->GetLocation(This, element, result))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics_SetLocation(This, element, value) \
    ((This)->lpVtbl->SetLocation(This, element, value))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics_get_NormalizedAnchorPointProperty(This, value) \
    ((This)->lpVtbl->get_NormalizedAnchorPointProperty(This, value))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics_GetNormalizedAnchorPoint(This, element, result) \
    ((This)->lpVtbl->GetNormalizedAnchorPoint(This, element, result))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics_SetNormalizedAnchorPoint(This, element, value) \
    ((This)->lpVtbl->SetNormalizedAnchorPoint(This, element, value))

#endif /* COBJMACROS */

EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Interface Windows.UI.Xaml.Controls.Maps.IMapControlStatics2
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Interface is a part of the implementation of type Windows.UI.Xaml.Controls.Maps.MapControl
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics2_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics2_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_UI_Xaml_Controls_Maps_IMapControlStatics2[] = L"Windows.UI.Xaml.Controls.Maps.IMapControlStatics2";
typedef struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics2Vtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics2* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics2* This);
    ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics2* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics2* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics2* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics2* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* get_BusinessLandmarksVisibleProperty)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics2* This,
        __x_ABI_CWindows_CUI_CXaml_CIDependencyProperty** value);
    HRESULT (STDMETHODCALLTYPE* get_TransitFeaturesVisibleProperty)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics2* This,
        __x_ABI_CWindows_CUI_CXaml_CIDependencyProperty** value);
    HRESULT (STDMETHODCALLTYPE* get_PanInteractionModeProperty)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics2* This,
        __x_ABI_CWindows_CUI_CXaml_CIDependencyProperty** value);
    HRESULT (STDMETHODCALLTYPE* get_RotateInteractionModeProperty)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics2* This,
        __x_ABI_CWindows_CUI_CXaml_CIDependencyProperty** value);
    HRESULT (STDMETHODCALLTYPE* get_TiltInteractionModeProperty)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics2* This,
        __x_ABI_CWindows_CUI_CXaml_CIDependencyProperty** value);
    HRESULT (STDMETHODCALLTYPE* get_ZoomInteractionModeProperty)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics2* This,
        __x_ABI_CWindows_CUI_CXaml_CIDependencyProperty** value);
    HRESULT (STDMETHODCALLTYPE* get_Is3DSupportedProperty)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics2* This,
        __x_ABI_CWindows_CUI_CXaml_CIDependencyProperty** value);
    HRESULT (STDMETHODCALLTYPE* get_IsStreetsideSupportedProperty)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics2* This,
        __x_ABI_CWindows_CUI_CXaml_CIDependencyProperty** value);
    HRESULT (STDMETHODCALLTYPE* get_SceneProperty)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics2* This,
        __x_ABI_CWindows_CUI_CXaml_CIDependencyProperty** value);

    END_INTERFACE
} __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics2Vtbl;

interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics2
{
    CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics2Vtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics2_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics2_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics2_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics2_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics2_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics2_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics2_get_BusinessLandmarksVisibleProperty(This, value) \
    ((This)->lpVtbl->get_BusinessLandmarksVisibleProperty(This, value))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics2_get_TransitFeaturesVisibleProperty(This, value) \
    ((This)->lpVtbl->get_TransitFeaturesVisibleProperty(This, value))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics2_get_PanInteractionModeProperty(This, value) \
    ((This)->lpVtbl->get_PanInteractionModeProperty(This, value))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics2_get_RotateInteractionModeProperty(This, value) \
    ((This)->lpVtbl->get_RotateInteractionModeProperty(This, value))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics2_get_TiltInteractionModeProperty(This, value) \
    ((This)->lpVtbl->get_TiltInteractionModeProperty(This, value))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics2_get_ZoomInteractionModeProperty(This, value) \
    ((This)->lpVtbl->get_ZoomInteractionModeProperty(This, value))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics2_get_Is3DSupportedProperty(This, value) \
    ((This)->lpVtbl->get_Is3DSupportedProperty(This, value))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics2_get_IsStreetsideSupportedProperty(This, value) \
    ((This)->lpVtbl->get_IsStreetsideSupportedProperty(This, value))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics2_get_SceneProperty(This, value) \
    ((This)->lpVtbl->get_SceneProperty(This, value))

#endif /* COBJMACROS */

EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics2;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics2_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Interface Windows.UI.Xaml.Controls.Maps.IMapControlStatics4
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 3.0
 *
 * Interface is a part of the implementation of type Windows.UI.Xaml.Controls.Maps.MapControl
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x30000
#if !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics4_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics4_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_UI_Xaml_Controls_Maps_IMapControlStatics4[] = L"Windows.UI.Xaml.Controls.Maps.IMapControlStatics4";
typedef struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics4Vtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics4* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics4* This);
    ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics4* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics4* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics4* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics4* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* get_BusinessLandmarksEnabledProperty)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics4* This,
        __x_ABI_CWindows_CUI_CXaml_CIDependencyProperty** value);
    HRESULT (STDMETHODCALLTYPE* get_TransitFeaturesEnabledProperty)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics4* This,
        __x_ABI_CWindows_CUI_CXaml_CIDependencyProperty** value);

    END_INTERFACE
} __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics4Vtbl;

interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics4
{
    CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics4Vtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics4_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics4_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics4_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics4_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics4_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics4_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics4_get_BusinessLandmarksEnabledProperty(This, value) \
    ((This)->lpVtbl->get_BusinessLandmarksEnabledProperty(This, value))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics4_get_TransitFeaturesEnabledProperty(This, value) \
    ((This)->lpVtbl->get_TransitFeaturesEnabledProperty(This, value))

#endif /* COBJMACROS */

EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics4;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics4_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x30000

/*
 *
 * Interface Windows.UI.Xaml.Controls.Maps.IMapControlStatics5
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 4.0
 *
 * Interface is a part of the implementation of type Windows.UI.Xaml.Controls.Maps.MapControl
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x40000
#if !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics5_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics5_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_UI_Xaml_Controls_Maps_IMapControlStatics5[] = L"Windows.UI.Xaml.Controls.Maps.IMapControlStatics5";
typedef struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics5Vtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics5* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics5* This);
    ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics5* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics5* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics5* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics5* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* get_MapProjectionProperty)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics5* This,
        __x_ABI_CWindows_CUI_CXaml_CIDependencyProperty** value);
    HRESULT (STDMETHODCALLTYPE* get_StyleSheetProperty)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics5* This,
        __x_ABI_CWindows_CUI_CXaml_CIDependencyProperty** value);
    HRESULT (STDMETHODCALLTYPE* get_ViewPaddingProperty)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics5* This,
        __x_ABI_CWindows_CUI_CXaml_CIDependencyProperty** value);

    END_INTERFACE
} __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics5Vtbl;

interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics5
{
    CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics5Vtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics5_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics5_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics5_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics5_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics5_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics5_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics5_get_MapProjectionProperty(This, value) \
    ((This)->lpVtbl->get_MapProjectionProperty(This, value))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics5_get_StyleSheetProperty(This, value) \
    ((This)->lpVtbl->get_StyleSheetProperty(This, value))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics5_get_ViewPaddingProperty(This, value) \
    ((This)->lpVtbl->get_ViewPaddingProperty(This, value))

#endif /* COBJMACROS */

EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics5;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics5_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x40000

/*
 *
 * Interface Windows.UI.Xaml.Controls.Maps.IMapControlStatics6
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 5.0
 *
 * Interface is a part of the implementation of type Windows.UI.Xaml.Controls.Maps.MapControl
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x50000
#if !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics6_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics6_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_UI_Xaml_Controls_Maps_IMapControlStatics6[] = L"Windows.UI.Xaml.Controls.Maps.IMapControlStatics6";
typedef struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics6Vtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics6* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics6* This);
    ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics6* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics6* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics6* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics6* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* get_LayersProperty)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics6* This,
        __x_ABI_CWindows_CUI_CXaml_CIDependencyProperty** value);

    END_INTERFACE
} __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics6Vtbl;

interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics6
{
    CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics6Vtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics6_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics6_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics6_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics6_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics6_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics6_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics6_get_LayersProperty(This, value) \
    ((This)->lpVtbl->get_LayersProperty(This, value))

#endif /* COBJMACROS */

EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics6;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics6_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x50000

/*
 *
 * Interface Windows.UI.Xaml.Controls.Maps.IMapControlStatics7
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 6.0
 *
 * Interface is a part of the implementation of type Windows.UI.Xaml.Controls.Maps.MapControl
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x60000
#if !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics7_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics7_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_UI_Xaml_Controls_Maps_IMapControlStatics7[] = L"Windows.UI.Xaml.Controls.Maps.IMapControlStatics7";
typedef struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics7Vtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics7* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics7* This);
    ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics7* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics7* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics7* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics7* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* get_RegionProperty)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics7* This,
        __x_ABI_CWindows_CUI_CXaml_CIDependencyProperty** value);

    END_INTERFACE
} __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics7Vtbl;

interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics7
{
    CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics7Vtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics7_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics7_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics7_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics7_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics7_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics7_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics7_get_RegionProperty(This, value) \
    ((This)->lpVtbl->get_RegionProperty(This, value))

#endif /* COBJMACROS */

EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics7;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics7_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x60000

/*
 *
 * Interface Windows.UI.Xaml.Controls.Maps.IMapControlStatics8
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 8.0
 *
 * Interface is a part of the implementation of type Windows.UI.Xaml.Controls.Maps.MapControl
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x80000
#if !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics8_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics8_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_UI_Xaml_Controls_Maps_IMapControlStatics8[] = L"Windows.UI.Xaml.Controls.Maps.IMapControlStatics8";
typedef struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics8Vtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics8* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics8* This);
    ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics8* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics8* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics8* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics8* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* get_CanTiltDownProperty)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics8* This,
        __x_ABI_CWindows_CUI_CXaml_CIDependencyProperty** value);
    HRESULT (STDMETHODCALLTYPE* get_CanTiltUpProperty)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics8* This,
        __x_ABI_CWindows_CUI_CXaml_CIDependencyProperty** value);
    HRESULT (STDMETHODCALLTYPE* get_CanZoomInProperty)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics8* This,
        __x_ABI_CWindows_CUI_CXaml_CIDependencyProperty** value);
    HRESULT (STDMETHODCALLTYPE* get_CanZoomOutProperty)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics8* This,
        __x_ABI_CWindows_CUI_CXaml_CIDependencyProperty** value);

    END_INTERFACE
} __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics8Vtbl;

interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics8
{
    CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics8Vtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics8_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics8_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics8_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics8_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics8_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics8_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics8_get_CanTiltDownProperty(This, value) \
    ((This)->lpVtbl->get_CanTiltDownProperty(This, value))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics8_get_CanTiltUpProperty(This, value) \
    ((This)->lpVtbl->get_CanTiltUpProperty(This, value))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics8_get_CanZoomInProperty(This, value) \
    ((This)->lpVtbl->get_CanZoomInProperty(This, value))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics8_get_CanZoomOutProperty(This, value) \
    ((This)->lpVtbl->get_CanZoomOutProperty(This, value))

#endif /* COBJMACROS */

EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics8;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlStatics8_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x80000

/*
 *
 * Interface Windows.UI.Xaml.Controls.Maps.IMapControlTransitFeatureClickEventArgs
 *
 * Introduced to Windows.Services.Maps.LocalSearchContract in version 2.0
 *
 * Interface is a part of the implementation of type Windows.UI.Xaml.Controls.Maps.MapControlTransitFeatureClickEventArgs
 *
 */
#if WINDOWS_SERVICES_MAPS_LOCALSEARCHCONTRACT_VERSION >= 0x20000
#if !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlTransitFeatureClickEventArgs_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlTransitFeatureClickEventArgs_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_UI_Xaml_Controls_Maps_IMapControlTransitFeatureClickEventArgs[] = L"Windows.UI.Xaml.Controls.Maps.IMapControlTransitFeatureClickEventArgs";
typedef struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlTransitFeatureClickEventArgsVtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlTransitFeatureClickEventArgs* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlTransitFeatureClickEventArgs* This);
    ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlTransitFeatureClickEventArgs* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlTransitFeatureClickEventArgs* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlTransitFeatureClickEventArgs* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlTransitFeatureClickEventArgs* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* get_DisplayName)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlTransitFeatureClickEventArgs* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_Location)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlTransitFeatureClickEventArgs* This,
        __x_ABI_CWindows_CDevices_CGeolocation_CIGeopoint** value);
    HRESULT (STDMETHODCALLTYPE* get_TransitProperties)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlTransitFeatureClickEventArgs* This,
        __FIMapView_2_HSTRING_IInspectable** value);

    END_INTERFACE
} __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlTransitFeatureClickEventArgsVtbl;

interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlTransitFeatureClickEventArgs
{
    CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlTransitFeatureClickEventArgsVtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlTransitFeatureClickEventArgs_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlTransitFeatureClickEventArgs_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlTransitFeatureClickEventArgs_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlTransitFeatureClickEventArgs_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlTransitFeatureClickEventArgs_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlTransitFeatureClickEventArgs_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlTransitFeatureClickEventArgs_get_DisplayName(This, value) \
    ((This)->lpVtbl->get_DisplayName(This, value))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlTransitFeatureClickEventArgs_get_Location(This, value) \
    ((This)->lpVtbl->get_Location(This, value))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlTransitFeatureClickEventArgs_get_TransitProperties(This, value) \
    ((This)->lpVtbl->get_TransitProperties(This, value))

#endif /* COBJMACROS */

EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlTransitFeatureClickEventArgs;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlTransitFeatureClickEventArgs_INTERFACE_DEFINED__) */
#endif // WINDOWS_SERVICES_MAPS_LOCALSEARCHCONTRACT_VERSION >= 0x20000

/*
 *
 * Interface Windows.UI.Xaml.Controls.Maps.IMapControlTransitFeaturePointerEnteredEventArgs
 *
 * Introduced to Windows.Services.Maps.LocalSearchContract in version 3.0
 *
 * Interface is a part of the implementation of type Windows.UI.Xaml.Controls.Maps.MapControlTransitFeaturePointerEnteredEventArgs
 *
 */
#if WINDOWS_SERVICES_MAPS_LOCALSEARCHCONTRACT_VERSION >= 0x30000
#if !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlTransitFeaturePointerEnteredEventArgs_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlTransitFeaturePointerEnteredEventArgs_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_UI_Xaml_Controls_Maps_IMapControlTransitFeaturePointerEnteredEventArgs[] = L"Windows.UI.Xaml.Controls.Maps.IMapControlTransitFeaturePointerEnteredEventArgs";
typedef struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlTransitFeaturePointerEnteredEventArgsVtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlTransitFeaturePointerEnteredEventArgs* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlTransitFeaturePointerEnteredEventArgs* This);
    ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlTransitFeaturePointerEnteredEventArgs* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlTransitFeaturePointerEnteredEventArgs* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlTransitFeaturePointerEnteredEventArgs* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlTransitFeaturePointerEnteredEventArgs* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* get_DisplayName)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlTransitFeaturePointerEnteredEventArgs* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_Location)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlTransitFeaturePointerEnteredEventArgs* This,
        __x_ABI_CWindows_CDevices_CGeolocation_CIGeopoint** value);
    HRESULT (STDMETHODCALLTYPE* get_TransitProperties)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlTransitFeaturePointerEnteredEventArgs* This,
        __FIMapView_2_HSTRING_IInspectable** value);

    END_INTERFACE
} __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlTransitFeaturePointerEnteredEventArgsVtbl;

interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlTransitFeaturePointerEnteredEventArgs
{
    CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlTransitFeaturePointerEnteredEventArgsVtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlTransitFeaturePointerEnteredEventArgs_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlTransitFeaturePointerEnteredEventArgs_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlTransitFeaturePointerEnteredEventArgs_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlTransitFeaturePointerEnteredEventArgs_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlTransitFeaturePointerEnteredEventArgs_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlTransitFeaturePointerEnteredEventArgs_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlTransitFeaturePointerEnteredEventArgs_get_DisplayName(This, value) \
    ((This)->lpVtbl->get_DisplayName(This, value))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlTransitFeaturePointerEnteredEventArgs_get_Location(This, value) \
    ((This)->lpVtbl->get_Location(This, value))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlTransitFeaturePointerEnteredEventArgs_get_TransitProperties(This, value) \
    ((This)->lpVtbl->get_TransitProperties(This, value))

#endif /* COBJMACROS */

EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlTransitFeaturePointerEnteredEventArgs;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlTransitFeaturePointerEnteredEventArgs_INTERFACE_DEFINED__) */
#endif // WINDOWS_SERVICES_MAPS_LOCALSEARCHCONTRACT_VERSION >= 0x30000

/*
 *
 * Interface Windows.UI.Xaml.Controls.Maps.IMapControlTransitFeaturePointerExitedEventArgs
 *
 * Introduced to Windows.Services.Maps.LocalSearchContract in version 3.0
 *
 * Interface is a part of the implementation of type Windows.UI.Xaml.Controls.Maps.MapControlTransitFeaturePointerExitedEventArgs
 *
 */
#if WINDOWS_SERVICES_MAPS_LOCALSEARCHCONTRACT_VERSION >= 0x30000
#if !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlTransitFeaturePointerExitedEventArgs_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlTransitFeaturePointerExitedEventArgs_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_UI_Xaml_Controls_Maps_IMapControlTransitFeaturePointerExitedEventArgs[] = L"Windows.UI.Xaml.Controls.Maps.IMapControlTransitFeaturePointerExitedEventArgs";
typedef struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlTransitFeaturePointerExitedEventArgsVtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlTransitFeaturePointerExitedEventArgs* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlTransitFeaturePointerExitedEventArgs* This);
    ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlTransitFeaturePointerExitedEventArgs* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlTransitFeaturePointerExitedEventArgs* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlTransitFeaturePointerExitedEventArgs* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlTransitFeaturePointerExitedEventArgs* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* get_DisplayName)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlTransitFeaturePointerExitedEventArgs* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_Location)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlTransitFeaturePointerExitedEventArgs* This,
        __x_ABI_CWindows_CDevices_CGeolocation_CIGeopoint** value);
    HRESULT (STDMETHODCALLTYPE* get_TransitProperties)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlTransitFeaturePointerExitedEventArgs* This,
        __FIMapView_2_HSTRING_IInspectable** value);

    END_INTERFACE
} __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlTransitFeaturePointerExitedEventArgsVtbl;

interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlTransitFeaturePointerExitedEventArgs
{
    CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlTransitFeaturePointerExitedEventArgsVtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlTransitFeaturePointerExitedEventArgs_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlTransitFeaturePointerExitedEventArgs_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlTransitFeaturePointerExitedEventArgs_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlTransitFeaturePointerExitedEventArgs_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlTransitFeaturePointerExitedEventArgs_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlTransitFeaturePointerExitedEventArgs_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlTransitFeaturePointerExitedEventArgs_get_DisplayName(This, value) \
    ((This)->lpVtbl->get_DisplayName(This, value))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlTransitFeaturePointerExitedEventArgs_get_Location(This, value) \
    ((This)->lpVtbl->get_Location(This, value))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlTransitFeaturePointerExitedEventArgs_get_TransitProperties(This, value) \
    ((This)->lpVtbl->get_TransitProperties(This, value))

#endif /* COBJMACROS */

EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlTransitFeaturePointerExitedEventArgs;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlTransitFeaturePointerExitedEventArgs_INTERFACE_DEFINED__) */
#endif // WINDOWS_SERVICES_MAPS_LOCALSEARCHCONTRACT_VERSION >= 0x30000

/*
 *
 * Interface Windows.UI.Xaml.Controls.Maps.IMapControlTransitFeatureRightTappedEventArgs
 *
 * Introduced to Windows.Services.Maps.LocalSearchContract in version 2.0
 *
 * Interface is a part of the implementation of type Windows.UI.Xaml.Controls.Maps.MapControlTransitFeatureRightTappedEventArgs
 *
 */
#if WINDOWS_SERVICES_MAPS_LOCALSEARCHCONTRACT_VERSION >= 0x20000
#if !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlTransitFeatureRightTappedEventArgs_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlTransitFeatureRightTappedEventArgs_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_UI_Xaml_Controls_Maps_IMapControlTransitFeatureRightTappedEventArgs[] = L"Windows.UI.Xaml.Controls.Maps.IMapControlTransitFeatureRightTappedEventArgs";
typedef struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlTransitFeatureRightTappedEventArgsVtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlTransitFeatureRightTappedEventArgs* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlTransitFeatureRightTappedEventArgs* This);
    ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlTransitFeatureRightTappedEventArgs* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlTransitFeatureRightTappedEventArgs* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlTransitFeatureRightTappedEventArgs* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlTransitFeatureRightTappedEventArgs* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* get_DisplayName)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlTransitFeatureRightTappedEventArgs* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_Location)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlTransitFeatureRightTappedEventArgs* This,
        __x_ABI_CWindows_CDevices_CGeolocation_CIGeopoint** value);
    HRESULT (STDMETHODCALLTYPE* get_TransitProperties)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlTransitFeatureRightTappedEventArgs* This,
        __FIMapView_2_HSTRING_IInspectable** value);

    END_INTERFACE
} __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlTransitFeatureRightTappedEventArgsVtbl;

interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlTransitFeatureRightTappedEventArgs
{
    CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlTransitFeatureRightTappedEventArgsVtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlTransitFeatureRightTappedEventArgs_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlTransitFeatureRightTappedEventArgs_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlTransitFeatureRightTappedEventArgs_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlTransitFeatureRightTappedEventArgs_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlTransitFeatureRightTappedEventArgs_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlTransitFeatureRightTappedEventArgs_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlTransitFeatureRightTappedEventArgs_get_DisplayName(This, value) \
    ((This)->lpVtbl->get_DisplayName(This, value))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlTransitFeatureRightTappedEventArgs_get_Location(This, value) \
    ((This)->lpVtbl->get_Location(This, value))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlTransitFeatureRightTappedEventArgs_get_TransitProperties(This, value) \
    ((This)->lpVtbl->get_TransitProperties(This, value))

#endif /* COBJMACROS */

EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlTransitFeatureRightTappedEventArgs;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapControlTransitFeatureRightTappedEventArgs_INTERFACE_DEFINED__) */
#endif // WINDOWS_SERVICES_MAPS_LOCALSEARCHCONTRACT_VERSION >= 0x20000

/*
 *
 * Interface Windows.UI.Xaml.Controls.Maps.IMapCustomExperience
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Interface is a part of the implementation of type Windows.UI.Xaml.Controls.Maps.MapCustomExperience
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCustomExperience_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCustomExperience_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_UI_Xaml_Controls_Maps_IMapCustomExperience[] = L"Windows.UI.Xaml.Controls.Maps.IMapCustomExperience";
typedef struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCustomExperienceVtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCustomExperience* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCustomExperience* This);
    ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCustomExperience* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCustomExperience* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCustomExperience* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCustomExperience* This,
        TrustLevel* trustLevel);

    END_INTERFACE
} __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCustomExperienceVtbl;

interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCustomExperience
{
    CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCustomExperienceVtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCustomExperience_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCustomExperience_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCustomExperience_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCustomExperience_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCustomExperience_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCustomExperience_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#endif /* COBJMACROS */

EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCustomExperience;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCustomExperience_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Interface Windows.UI.Xaml.Controls.Maps.IMapCustomExperienceChangedEventArgs
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Interface is a part of the implementation of type Windows.UI.Xaml.Controls.Maps.MapCustomExperienceChangedEventArgs
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCustomExperienceChangedEventArgs_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCustomExperienceChangedEventArgs_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_UI_Xaml_Controls_Maps_IMapCustomExperienceChangedEventArgs[] = L"Windows.UI.Xaml.Controls.Maps.IMapCustomExperienceChangedEventArgs";
typedef struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCustomExperienceChangedEventArgsVtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCustomExperienceChangedEventArgs* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCustomExperienceChangedEventArgs* This);
    ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCustomExperienceChangedEventArgs* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCustomExperienceChangedEventArgs* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCustomExperienceChangedEventArgs* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCustomExperienceChangedEventArgs* This,
        TrustLevel* trustLevel);

    END_INTERFACE
} __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCustomExperienceChangedEventArgsVtbl;

interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCustomExperienceChangedEventArgs
{
    CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCustomExperienceChangedEventArgsVtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCustomExperienceChangedEventArgs_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCustomExperienceChangedEventArgs_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCustomExperienceChangedEventArgs_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCustomExperienceChangedEventArgs_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCustomExperienceChangedEventArgs_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCustomExperienceChangedEventArgs_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#endif /* COBJMACROS */

EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCustomExperienceChangedEventArgs;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCustomExperienceChangedEventArgs_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Interface Windows.UI.Xaml.Controls.Maps.IMapCustomExperienceFactory
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Interface is a part of the implementation of type Windows.UI.Xaml.Controls.Maps.MapCustomExperience
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCustomExperienceFactory_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCustomExperienceFactory_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_UI_Xaml_Controls_Maps_IMapCustomExperienceFactory[] = L"Windows.UI.Xaml.Controls.Maps.IMapCustomExperienceFactory";
typedef struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCustomExperienceFactoryVtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCustomExperienceFactory* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCustomExperienceFactory* This);
    ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCustomExperienceFactory* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCustomExperienceFactory* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCustomExperienceFactory* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCustomExperienceFactory* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* CreateInstance)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCustomExperienceFactory* This,
        IInspectable* baseInterface,
        IInspectable** innerInterface,
        __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCustomExperience** value);

    END_INTERFACE
} __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCustomExperienceFactoryVtbl;

interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCustomExperienceFactory
{
    CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCustomExperienceFactoryVtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCustomExperienceFactory_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCustomExperienceFactory_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCustomExperienceFactory_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCustomExperienceFactory_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCustomExperienceFactory_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCustomExperienceFactory_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCustomExperienceFactory_CreateInstance(This, baseInterface, innerInterface, value) \
    ((This)->lpVtbl->CreateInstance(This, baseInterface, innerInterface, value))

#endif /* COBJMACROS */

EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCustomExperienceFactory;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCustomExperienceFactory_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Interface Windows.UI.Xaml.Controls.Maps.IMapElement
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Interface is a part of the implementation of type Windows.UI.Xaml.Controls.Maps.MapElement
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_UI_Xaml_Controls_Maps_IMapElement[] = L"Windows.UI.Xaml.Controls.Maps.IMapElement";
typedef struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementVtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement* This);
    ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* get_ZIndex)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement* This,
        INT32* value);
    HRESULT (STDMETHODCALLTYPE* put_ZIndex)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement* This,
        INT32 value);
    HRESULT (STDMETHODCALLTYPE* get_Visible)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement* This,
        boolean* value);
    HRESULT (STDMETHODCALLTYPE* put_Visible)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement* This,
        boolean value);

    END_INTERFACE
} __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementVtbl;

interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement
{
    CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementVtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement_get_ZIndex(This, value) \
    ((This)->lpVtbl->get_ZIndex(This, value))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement_put_ZIndex(This, value) \
    ((This)->lpVtbl->put_ZIndex(This, value))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement_get_Visible(This, value) \
    ((This)->lpVtbl->get_Visible(This, value))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement_put_Visible(This, value) \
    ((This)->lpVtbl->put_Visible(This, value))

#endif /* COBJMACROS */

EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Interface Windows.UI.Xaml.Controls.Maps.IMapElement2
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Interface is a part of the implementation of type Windows.UI.Xaml.Controls.Maps.MapElement
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement2_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement2_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_UI_Xaml_Controls_Maps_IMapElement2[] = L"Windows.UI.Xaml.Controls.Maps.IMapElement2";
typedef struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement2Vtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement2* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement2* This);
    ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement2* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement2* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement2* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement2* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* get_MapTabIndex)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement2* This,
        INT32* value);
    HRESULT (STDMETHODCALLTYPE* put_MapTabIndex)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement2* This,
        INT32 value);

    END_INTERFACE
} __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement2Vtbl;

interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement2
{
    CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement2Vtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement2_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement2_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement2_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement2_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement2_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement2_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement2_get_MapTabIndex(This, value) \
    ((This)->lpVtbl->get_MapTabIndex(This, value))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement2_put_MapTabIndex(This, value) \
    ((This)->lpVtbl->put_MapTabIndex(This, value))

#endif /* COBJMACROS */

EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement2;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement2_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Interface Windows.UI.Xaml.Controls.Maps.IMapElement3
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 5.0
 *
 * Interface is a part of the implementation of type Windows.UI.Xaml.Controls.Maps.MapElement
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x50000
#if !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement3_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement3_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_UI_Xaml_Controls_Maps_IMapElement3[] = L"Windows.UI.Xaml.Controls.Maps.IMapElement3";
typedef struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement3Vtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement3* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement3* This);
    ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement3* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement3* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement3* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement3* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* get_MapStyleSheetEntry)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement3* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* put_MapStyleSheetEntry)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement3* This,
        HSTRING value);
    HRESULT (STDMETHODCALLTYPE* get_MapStyleSheetEntryState)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement3* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* put_MapStyleSheetEntryState)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement3* This,
        HSTRING value);
    HRESULT (STDMETHODCALLTYPE* get_Tag)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement3* This,
        IInspectable** value);
    HRESULT (STDMETHODCALLTYPE* put_Tag)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement3* This,
        IInspectable* value);

    END_INTERFACE
} __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement3Vtbl;

interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement3
{
    CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement3Vtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement3_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement3_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement3_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement3_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement3_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement3_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement3_get_MapStyleSheetEntry(This, value) \
    ((This)->lpVtbl->get_MapStyleSheetEntry(This, value))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement3_put_MapStyleSheetEntry(This, value) \
    ((This)->lpVtbl->put_MapStyleSheetEntry(This, value))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement3_get_MapStyleSheetEntryState(This, value) \
    ((This)->lpVtbl->get_MapStyleSheetEntryState(This, value))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement3_put_MapStyleSheetEntryState(This, value) \
    ((This)->lpVtbl->put_MapStyleSheetEntryState(This, value))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement3_get_Tag(This, value) \
    ((This)->lpVtbl->get_Tag(This, value))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement3_put_Tag(This, value) \
    ((This)->lpVtbl->put_Tag(This, value))

#endif /* COBJMACROS */

EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement3;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement3_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x50000

/*
 *
 * Interface Windows.UI.Xaml.Controls.Maps.IMapElement3D
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 5.0
 *
 * Interface is a part of the implementation of type Windows.UI.Xaml.Controls.Maps.MapElement3D
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x50000
#if !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement3D_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement3D_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_UI_Xaml_Controls_Maps_IMapElement3D[] = L"Windows.UI.Xaml.Controls.Maps.IMapElement3D";
typedef struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement3DVtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement3D* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement3D* This);
    ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement3D* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement3D* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement3D* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement3D* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* get_Location)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement3D* This,
        __x_ABI_CWindows_CDevices_CGeolocation_CIGeopoint** value);
    HRESULT (STDMETHODCALLTYPE* put_Location)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement3D* This,
        __x_ABI_CWindows_CDevices_CGeolocation_CIGeopoint* value);
    HRESULT (STDMETHODCALLTYPE* get_Model)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement3D* This,
        __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapModel3D** value);
    HRESULT (STDMETHODCALLTYPE* put_Model)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement3D* This,
        __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapModel3D* value);
    HRESULT (STDMETHODCALLTYPE* get_Heading)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement3D* This,
        DOUBLE* value);
    HRESULT (STDMETHODCALLTYPE* put_Heading)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement3D* This,
        DOUBLE value);
    HRESULT (STDMETHODCALLTYPE* get_Pitch)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement3D* This,
        DOUBLE* value);
    HRESULT (STDMETHODCALLTYPE* put_Pitch)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement3D* This,
        DOUBLE value);
    HRESULT (STDMETHODCALLTYPE* get_Roll)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement3D* This,
        DOUBLE* value);
    HRESULT (STDMETHODCALLTYPE* put_Roll)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement3D* This,
        DOUBLE value);
    HRESULT (STDMETHODCALLTYPE* get_Scale)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement3D* This,
        struct __x_ABI_CWindows_CFoundation_CNumerics_CVector3* value);
    HRESULT (STDMETHODCALLTYPE* put_Scale)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement3D* This,
        struct __x_ABI_CWindows_CFoundation_CNumerics_CVector3 value);

    END_INTERFACE
} __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement3DVtbl;

interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement3D
{
    CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement3DVtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement3D_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement3D_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement3D_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement3D_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement3D_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement3D_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement3D_get_Location(This, value) \
    ((This)->lpVtbl->get_Location(This, value))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement3D_put_Location(This, value) \
    ((This)->lpVtbl->put_Location(This, value))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement3D_get_Model(This, value) \
    ((This)->lpVtbl->get_Model(This, value))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement3D_put_Model(This, value) \
    ((This)->lpVtbl->put_Model(This, value))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement3D_get_Heading(This, value) \
    ((This)->lpVtbl->get_Heading(This, value))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement3D_put_Heading(This, value) \
    ((This)->lpVtbl->put_Heading(This, value))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement3D_get_Pitch(This, value) \
    ((This)->lpVtbl->get_Pitch(This, value))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement3D_put_Pitch(This, value) \
    ((This)->lpVtbl->put_Pitch(This, value))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement3D_get_Roll(This, value) \
    ((This)->lpVtbl->get_Roll(This, value))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement3D_put_Roll(This, value) \
    ((This)->lpVtbl->put_Roll(This, value))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement3D_get_Scale(This, value) \
    ((This)->lpVtbl->get_Scale(This, value))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement3D_put_Scale(This, value) \
    ((This)->lpVtbl->put_Scale(This, value))

#endif /* COBJMACROS */

EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement3D;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement3D_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x50000

/*
 *
 * Interface Windows.UI.Xaml.Controls.Maps.IMapElement3DStatics
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 5.0
 *
 * Interface is a part of the implementation of type Windows.UI.Xaml.Controls.Maps.MapElement3D
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x50000
#if !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement3DStatics_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement3DStatics_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_UI_Xaml_Controls_Maps_IMapElement3DStatics[] = L"Windows.UI.Xaml.Controls.Maps.IMapElement3DStatics";
typedef struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement3DStaticsVtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement3DStatics* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement3DStatics* This);
    ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement3DStatics* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement3DStatics* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement3DStatics* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement3DStatics* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* get_LocationProperty)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement3DStatics* This,
        __x_ABI_CWindows_CUI_CXaml_CIDependencyProperty** value);
    HRESULT (STDMETHODCALLTYPE* get_HeadingProperty)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement3DStatics* This,
        __x_ABI_CWindows_CUI_CXaml_CIDependencyProperty** value);
    HRESULT (STDMETHODCALLTYPE* get_PitchProperty)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement3DStatics* This,
        __x_ABI_CWindows_CUI_CXaml_CIDependencyProperty** value);
    HRESULT (STDMETHODCALLTYPE* get_RollProperty)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement3DStatics* This,
        __x_ABI_CWindows_CUI_CXaml_CIDependencyProperty** value);
    HRESULT (STDMETHODCALLTYPE* get_ScaleProperty)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement3DStatics* This,
        __x_ABI_CWindows_CUI_CXaml_CIDependencyProperty** value);

    END_INTERFACE
} __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement3DStaticsVtbl;

interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement3DStatics
{
    CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement3DStaticsVtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement3DStatics_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement3DStatics_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement3DStatics_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement3DStatics_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement3DStatics_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement3DStatics_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement3DStatics_get_LocationProperty(This, value) \
    ((This)->lpVtbl->get_LocationProperty(This, value))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement3DStatics_get_HeadingProperty(This, value) \
    ((This)->lpVtbl->get_HeadingProperty(This, value))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement3DStatics_get_PitchProperty(This, value) \
    ((This)->lpVtbl->get_PitchProperty(This, value))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement3DStatics_get_RollProperty(This, value) \
    ((This)->lpVtbl->get_RollProperty(This, value))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement3DStatics_get_ScaleProperty(This, value) \
    ((This)->lpVtbl->get_ScaleProperty(This, value))

#endif /* COBJMACROS */

EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement3DStatics;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement3DStatics_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x50000

/*
 *
 * Interface Windows.UI.Xaml.Controls.Maps.IMapElement4
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 6.0
 *
 * Interface is a part of the implementation of type Windows.UI.Xaml.Controls.Maps.MapElement
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x60000
#if !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement4_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement4_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_UI_Xaml_Controls_Maps_IMapElement4[] = L"Windows.UI.Xaml.Controls.Maps.IMapElement4";
typedef struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement4Vtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement4* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement4* This);
    ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement4* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement4* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement4* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement4* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* get_IsEnabled)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement4* This,
        boolean* value);
    HRESULT (STDMETHODCALLTYPE* put_IsEnabled)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement4* This,
        boolean value);

    END_INTERFACE
} __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement4Vtbl;

interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement4
{
    CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement4Vtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement4_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement4_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement4_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement4_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement4_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement4_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement4_get_IsEnabled(This, value) \
    ((This)->lpVtbl->get_IsEnabled(This, value))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement4_put_IsEnabled(This, value) \
    ((This)->lpVtbl->put_IsEnabled(This, value))

#endif /* COBJMACROS */

EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement4;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement4_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x60000

/*
 *
 * Interface Windows.UI.Xaml.Controls.Maps.IMapElementClickEventArgs
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Interface is a part of the implementation of type Windows.UI.Xaml.Controls.Maps.MapElementClickEventArgs
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementClickEventArgs_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementClickEventArgs_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_UI_Xaml_Controls_Maps_IMapElementClickEventArgs[] = L"Windows.UI.Xaml.Controls.Maps.IMapElementClickEventArgs";
typedef struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementClickEventArgsVtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementClickEventArgs* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementClickEventArgs* This);
    ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementClickEventArgs* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementClickEventArgs* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementClickEventArgs* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementClickEventArgs* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* get_Position)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementClickEventArgs* This,
        struct __x_ABI_CWindows_CFoundation_CPoint* value);
    HRESULT (STDMETHODCALLTYPE* get_Location)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementClickEventArgs* This,
        __x_ABI_CWindows_CDevices_CGeolocation_CIGeopoint** value);
    HRESULT (STDMETHODCALLTYPE* get_MapElements)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementClickEventArgs* This,
        __FIVector_1_Windows__CUI__CXaml__CControls__CMaps__CMapElement** value);

    END_INTERFACE
} __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementClickEventArgsVtbl;

interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementClickEventArgs
{
    CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementClickEventArgsVtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementClickEventArgs_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementClickEventArgs_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementClickEventArgs_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementClickEventArgs_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementClickEventArgs_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementClickEventArgs_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementClickEventArgs_get_Position(This, value) \
    ((This)->lpVtbl->get_Position(This, value))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementClickEventArgs_get_Location(This, value) \
    ((This)->lpVtbl->get_Location(This, value))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementClickEventArgs_get_MapElements(This, value) \
    ((This)->lpVtbl->get_MapElements(This, value))

#endif /* COBJMACROS */

EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementClickEventArgs;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementClickEventArgs_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Interface Windows.UI.Xaml.Controls.Maps.IMapElementFactory
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Interface is a part of the implementation of type Windows.UI.Xaml.Controls.Maps.MapElement
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementFactory_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementFactory_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_UI_Xaml_Controls_Maps_IMapElementFactory[] = L"Windows.UI.Xaml.Controls.Maps.IMapElementFactory";
typedef struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementFactoryVtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementFactory* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementFactory* This);
    ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementFactory* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementFactory* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementFactory* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementFactory* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* CreateInstance)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementFactory* This,
        IInspectable* baseInterface,
        IInspectable** innerInterface,
        __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement** value);

    END_INTERFACE
} __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementFactoryVtbl;

interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementFactory
{
    CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementFactoryVtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementFactory_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementFactory_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementFactory_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementFactory_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementFactory_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementFactory_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementFactory_CreateInstance(This, baseInterface, innerInterface, value) \
    ((This)->lpVtbl->CreateInstance(This, baseInterface, innerInterface, value))

#endif /* COBJMACROS */

EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementFactory;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementFactory_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Interface Windows.UI.Xaml.Controls.Maps.IMapElementPointerEnteredEventArgs
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Interface is a part of the implementation of type Windows.UI.Xaml.Controls.Maps.MapElementPointerEnteredEventArgs
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementPointerEnteredEventArgs_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementPointerEnteredEventArgs_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_UI_Xaml_Controls_Maps_IMapElementPointerEnteredEventArgs[] = L"Windows.UI.Xaml.Controls.Maps.IMapElementPointerEnteredEventArgs";
typedef struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementPointerEnteredEventArgsVtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementPointerEnteredEventArgs* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementPointerEnteredEventArgs* This);
    ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementPointerEnteredEventArgs* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementPointerEnteredEventArgs* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementPointerEnteredEventArgs* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementPointerEnteredEventArgs* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* get_Position)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementPointerEnteredEventArgs* This,
        struct __x_ABI_CWindows_CFoundation_CPoint* value);
    HRESULT (STDMETHODCALLTYPE* get_Location)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementPointerEnteredEventArgs* This,
        __x_ABI_CWindows_CDevices_CGeolocation_CIGeopoint** value);
    HRESULT (STDMETHODCALLTYPE* get_MapElement)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementPointerEnteredEventArgs* This,
        __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement** value);

    END_INTERFACE
} __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementPointerEnteredEventArgsVtbl;

interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementPointerEnteredEventArgs
{
    CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementPointerEnteredEventArgsVtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementPointerEnteredEventArgs_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementPointerEnteredEventArgs_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementPointerEnteredEventArgs_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementPointerEnteredEventArgs_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementPointerEnteredEventArgs_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementPointerEnteredEventArgs_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementPointerEnteredEventArgs_get_Position(This, value) \
    ((This)->lpVtbl->get_Position(This, value))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementPointerEnteredEventArgs_get_Location(This, value) \
    ((This)->lpVtbl->get_Location(This, value))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementPointerEnteredEventArgs_get_MapElement(This, value) \
    ((This)->lpVtbl->get_MapElement(This, value))

#endif /* COBJMACROS */

EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementPointerEnteredEventArgs;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementPointerEnteredEventArgs_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Interface Windows.UI.Xaml.Controls.Maps.IMapElementPointerExitedEventArgs
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Interface is a part of the implementation of type Windows.UI.Xaml.Controls.Maps.MapElementPointerExitedEventArgs
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementPointerExitedEventArgs_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementPointerExitedEventArgs_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_UI_Xaml_Controls_Maps_IMapElementPointerExitedEventArgs[] = L"Windows.UI.Xaml.Controls.Maps.IMapElementPointerExitedEventArgs";
typedef struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementPointerExitedEventArgsVtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementPointerExitedEventArgs* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementPointerExitedEventArgs* This);
    ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementPointerExitedEventArgs* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementPointerExitedEventArgs* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementPointerExitedEventArgs* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementPointerExitedEventArgs* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* get_Position)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementPointerExitedEventArgs* This,
        struct __x_ABI_CWindows_CFoundation_CPoint* value);
    HRESULT (STDMETHODCALLTYPE* get_Location)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementPointerExitedEventArgs* This,
        __x_ABI_CWindows_CDevices_CGeolocation_CIGeopoint** value);
    HRESULT (STDMETHODCALLTYPE* get_MapElement)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementPointerExitedEventArgs* This,
        __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement** value);

    END_INTERFACE
} __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementPointerExitedEventArgsVtbl;

interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementPointerExitedEventArgs
{
    CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementPointerExitedEventArgsVtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementPointerExitedEventArgs_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementPointerExitedEventArgs_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementPointerExitedEventArgs_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementPointerExitedEventArgs_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementPointerExitedEventArgs_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementPointerExitedEventArgs_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementPointerExitedEventArgs_get_Position(This, value) \
    ((This)->lpVtbl->get_Position(This, value))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementPointerExitedEventArgs_get_Location(This, value) \
    ((This)->lpVtbl->get_Location(This, value))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementPointerExitedEventArgs_get_MapElement(This, value) \
    ((This)->lpVtbl->get_MapElement(This, value))

#endif /* COBJMACROS */

EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementPointerExitedEventArgs;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementPointerExitedEventArgs_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Interface Windows.UI.Xaml.Controls.Maps.IMapElementStatics
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Interface is a part of the implementation of type Windows.UI.Xaml.Controls.Maps.MapElement
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementStatics_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementStatics_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_UI_Xaml_Controls_Maps_IMapElementStatics[] = L"Windows.UI.Xaml.Controls.Maps.IMapElementStatics";
typedef struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementStaticsVtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementStatics* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementStatics* This);
    ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementStatics* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementStatics* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementStatics* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementStatics* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* get_ZIndexProperty)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementStatics* This,
        __x_ABI_CWindows_CUI_CXaml_CIDependencyProperty** value);
    HRESULT (STDMETHODCALLTYPE* get_VisibleProperty)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementStatics* This,
        __x_ABI_CWindows_CUI_CXaml_CIDependencyProperty** value);

    END_INTERFACE
} __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementStaticsVtbl;

interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementStatics
{
    CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementStaticsVtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementStatics_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementStatics_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementStatics_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementStatics_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementStatics_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementStatics_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementStatics_get_ZIndexProperty(This, value) \
    ((This)->lpVtbl->get_ZIndexProperty(This, value))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementStatics_get_VisibleProperty(This, value) \
    ((This)->lpVtbl->get_VisibleProperty(This, value))

#endif /* COBJMACROS */

EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementStatics;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementStatics_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Interface Windows.UI.Xaml.Controls.Maps.IMapElementStatics2
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Interface is a part of the implementation of type Windows.UI.Xaml.Controls.Maps.MapElement
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementStatics2_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementStatics2_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_UI_Xaml_Controls_Maps_IMapElementStatics2[] = L"Windows.UI.Xaml.Controls.Maps.IMapElementStatics2";
typedef struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementStatics2Vtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementStatics2* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementStatics2* This);
    ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementStatics2* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementStatics2* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementStatics2* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementStatics2* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* get_MapTabIndexProperty)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementStatics2* This,
        __x_ABI_CWindows_CUI_CXaml_CIDependencyProperty** value);

    END_INTERFACE
} __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementStatics2Vtbl;

interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementStatics2
{
    CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementStatics2Vtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementStatics2_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementStatics2_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementStatics2_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementStatics2_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementStatics2_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementStatics2_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementStatics2_get_MapTabIndexProperty(This, value) \
    ((This)->lpVtbl->get_MapTabIndexProperty(This, value))

#endif /* COBJMACROS */

EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementStatics2;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementStatics2_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Interface Windows.UI.Xaml.Controls.Maps.IMapElementStatics3
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 5.0
 *
 * Interface is a part of the implementation of type Windows.UI.Xaml.Controls.Maps.MapElement
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x50000
#if !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementStatics3_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementStatics3_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_UI_Xaml_Controls_Maps_IMapElementStatics3[] = L"Windows.UI.Xaml.Controls.Maps.IMapElementStatics3";
typedef struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementStatics3Vtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementStatics3* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementStatics3* This);
    ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementStatics3* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementStatics3* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementStatics3* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementStatics3* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* get_MapStyleSheetEntryProperty)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementStatics3* This,
        __x_ABI_CWindows_CUI_CXaml_CIDependencyProperty** value);
    HRESULT (STDMETHODCALLTYPE* get_MapStyleSheetEntryStateProperty)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementStatics3* This,
        __x_ABI_CWindows_CUI_CXaml_CIDependencyProperty** value);
    HRESULT (STDMETHODCALLTYPE* get_TagProperty)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementStatics3* This,
        __x_ABI_CWindows_CUI_CXaml_CIDependencyProperty** value);

    END_INTERFACE
} __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementStatics3Vtbl;

interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementStatics3
{
    CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementStatics3Vtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementStatics3_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementStatics3_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementStatics3_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementStatics3_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementStatics3_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementStatics3_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementStatics3_get_MapStyleSheetEntryProperty(This, value) \
    ((This)->lpVtbl->get_MapStyleSheetEntryProperty(This, value))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementStatics3_get_MapStyleSheetEntryStateProperty(This, value) \
    ((This)->lpVtbl->get_MapStyleSheetEntryStateProperty(This, value))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementStatics3_get_TagProperty(This, value) \
    ((This)->lpVtbl->get_TagProperty(This, value))

#endif /* COBJMACROS */

EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementStatics3;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementStatics3_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x50000

/*
 *
 * Interface Windows.UI.Xaml.Controls.Maps.IMapElementStatics4
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 6.0
 *
 * Interface is a part of the implementation of type Windows.UI.Xaml.Controls.Maps.MapElement
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x60000
#if !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementStatics4_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementStatics4_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_UI_Xaml_Controls_Maps_IMapElementStatics4[] = L"Windows.UI.Xaml.Controls.Maps.IMapElementStatics4";
typedef struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementStatics4Vtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementStatics4* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementStatics4* This);
    ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementStatics4* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementStatics4* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementStatics4* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementStatics4* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* get_IsEnabledProperty)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementStatics4* This,
        __x_ABI_CWindows_CUI_CXaml_CIDependencyProperty** value);

    END_INTERFACE
} __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementStatics4Vtbl;

interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementStatics4
{
    CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementStatics4Vtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementStatics4_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementStatics4_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementStatics4_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementStatics4_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementStatics4_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementStatics4_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementStatics4_get_IsEnabledProperty(This, value) \
    ((This)->lpVtbl->get_IsEnabledProperty(This, value))

#endif /* COBJMACROS */

EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementStatics4;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementStatics4_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x60000

/*
 *
 * Interface Windows.UI.Xaml.Controls.Maps.IMapElementsLayer
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 5.0
 *
 * Interface is a part of the implementation of type Windows.UI.Xaml.Controls.Maps.MapElementsLayer
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x50000
#if !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementsLayer_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementsLayer_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_UI_Xaml_Controls_Maps_IMapElementsLayer[] = L"Windows.UI.Xaml.Controls.Maps.IMapElementsLayer";
typedef struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementsLayerVtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementsLayer* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementsLayer* This);
    ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementsLayer* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementsLayer* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementsLayer* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementsLayer* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* get_MapElements)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementsLayer* This,
        __FIVector_1_Windows__CUI__CXaml__CControls__CMaps__CMapElement** value);
    HRESULT (STDMETHODCALLTYPE* put_MapElements)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementsLayer* This,
        __FIVector_1_Windows__CUI__CXaml__CControls__CMaps__CMapElement* value);
    HRESULT (STDMETHODCALLTYPE* add_MapElementClick)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementsLayer* This,
        __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapElementsLayer_Windows__CUI__CXaml__CControls__CMaps__CMapElementsLayerClickEventArgs* handler,
        EventRegistrationToken* token);
    HRESULT (STDMETHODCALLTYPE* remove_MapElementClick)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementsLayer* This,
        EventRegistrationToken token);
    HRESULT (STDMETHODCALLTYPE* add_MapElementPointerEntered)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementsLayer* This,
        __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapElementsLayer_Windows__CUI__CXaml__CControls__CMaps__CMapElementsLayerPointerEnteredEventArgs* handler,
        EventRegistrationToken* token);
    HRESULT (STDMETHODCALLTYPE* remove_MapElementPointerEntered)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementsLayer* This,
        EventRegistrationToken token);
    HRESULT (STDMETHODCALLTYPE* add_MapElementPointerExited)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementsLayer* This,
        __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapElementsLayer_Windows__CUI__CXaml__CControls__CMaps__CMapElementsLayerPointerExitedEventArgs* handler,
        EventRegistrationToken* token);
    HRESULT (STDMETHODCALLTYPE* remove_MapElementPointerExited)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementsLayer* This,
        EventRegistrationToken token);
    HRESULT (STDMETHODCALLTYPE* add_MapContextRequested)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementsLayer* This,
        __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapElementsLayer_Windows__CUI__CXaml__CControls__CMaps__CMapElementsLayerContextRequestedEventArgs* handler,
        EventRegistrationToken* token);
    HRESULT (STDMETHODCALLTYPE* remove_MapContextRequested)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementsLayer* This,
        EventRegistrationToken token);

    END_INTERFACE
} __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementsLayerVtbl;

interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementsLayer
{
    CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementsLayerVtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementsLayer_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementsLayer_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementsLayer_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementsLayer_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementsLayer_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementsLayer_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementsLayer_get_MapElements(This, value) \
    ((This)->lpVtbl->get_MapElements(This, value))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementsLayer_put_MapElements(This, value) \
    ((This)->lpVtbl->put_MapElements(This, value))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementsLayer_add_MapElementClick(This, handler, token) \
    ((This)->lpVtbl->add_MapElementClick(This, handler, token))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementsLayer_remove_MapElementClick(This, token) \
    ((This)->lpVtbl->remove_MapElementClick(This, token))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementsLayer_add_MapElementPointerEntered(This, handler, token) \
    ((This)->lpVtbl->add_MapElementPointerEntered(This, handler, token))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementsLayer_remove_MapElementPointerEntered(This, token) \
    ((This)->lpVtbl->remove_MapElementPointerEntered(This, token))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementsLayer_add_MapElementPointerExited(This, handler, token) \
    ((This)->lpVtbl->add_MapElementPointerExited(This, handler, token))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementsLayer_remove_MapElementPointerExited(This, token) \
    ((This)->lpVtbl->remove_MapElementPointerExited(This, token))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementsLayer_add_MapContextRequested(This, handler, token) \
    ((This)->lpVtbl->add_MapContextRequested(This, handler, token))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementsLayer_remove_MapContextRequested(This, token) \
    ((This)->lpVtbl->remove_MapContextRequested(This, token))

#endif /* COBJMACROS */

EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementsLayer;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementsLayer_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x50000

/*
 *
 * Interface Windows.UI.Xaml.Controls.Maps.IMapElementsLayerClickEventArgs
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 5.0
 *
 * Interface is a part of the implementation of type Windows.UI.Xaml.Controls.Maps.MapElementsLayerClickEventArgs
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x50000
#if !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementsLayerClickEventArgs_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementsLayerClickEventArgs_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_UI_Xaml_Controls_Maps_IMapElementsLayerClickEventArgs[] = L"Windows.UI.Xaml.Controls.Maps.IMapElementsLayerClickEventArgs";
typedef struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementsLayerClickEventArgsVtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementsLayerClickEventArgs* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementsLayerClickEventArgs* This);
    ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementsLayerClickEventArgs* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementsLayerClickEventArgs* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementsLayerClickEventArgs* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementsLayerClickEventArgs* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* get_Position)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementsLayerClickEventArgs* This,
        struct __x_ABI_CWindows_CFoundation_CPoint* value);
    HRESULT (STDMETHODCALLTYPE* get_Location)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementsLayerClickEventArgs* This,
        __x_ABI_CWindows_CDevices_CGeolocation_CIGeopoint** value);
    HRESULT (STDMETHODCALLTYPE* get_MapElements)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementsLayerClickEventArgs* This,
        __FIVector_1_Windows__CUI__CXaml__CControls__CMaps__CMapElement** value);

    END_INTERFACE
} __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementsLayerClickEventArgsVtbl;

interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementsLayerClickEventArgs
{
    CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementsLayerClickEventArgsVtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementsLayerClickEventArgs_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementsLayerClickEventArgs_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementsLayerClickEventArgs_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementsLayerClickEventArgs_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementsLayerClickEventArgs_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementsLayerClickEventArgs_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementsLayerClickEventArgs_get_Position(This, value) \
    ((This)->lpVtbl->get_Position(This, value))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementsLayerClickEventArgs_get_Location(This, value) \
    ((This)->lpVtbl->get_Location(This, value))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementsLayerClickEventArgs_get_MapElements(This, value) \
    ((This)->lpVtbl->get_MapElements(This, value))

#endif /* COBJMACROS */

EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementsLayerClickEventArgs;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementsLayerClickEventArgs_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x50000

/*
 *
 * Interface Windows.UI.Xaml.Controls.Maps.IMapElementsLayerContextRequestedEventArgs
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 5.0
 *
 * Interface is a part of the implementation of type Windows.UI.Xaml.Controls.Maps.MapElementsLayerContextRequestedEventArgs
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x50000
#if !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementsLayerContextRequestedEventArgs_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementsLayerContextRequestedEventArgs_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_UI_Xaml_Controls_Maps_IMapElementsLayerContextRequestedEventArgs[] = L"Windows.UI.Xaml.Controls.Maps.IMapElementsLayerContextRequestedEventArgs";
typedef struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementsLayerContextRequestedEventArgsVtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementsLayerContextRequestedEventArgs* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementsLayerContextRequestedEventArgs* This);
    ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementsLayerContextRequestedEventArgs* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementsLayerContextRequestedEventArgs* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementsLayerContextRequestedEventArgs* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementsLayerContextRequestedEventArgs* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* get_Position)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementsLayerContextRequestedEventArgs* This,
        struct __x_ABI_CWindows_CFoundation_CPoint* value);
    HRESULT (STDMETHODCALLTYPE* get_Location)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementsLayerContextRequestedEventArgs* This,
        __x_ABI_CWindows_CDevices_CGeolocation_CIGeopoint** value);
    HRESULT (STDMETHODCALLTYPE* get_MapElements)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementsLayerContextRequestedEventArgs* This,
        __FIVectorView_1_Windows__CUI__CXaml__CControls__CMaps__CMapElement** value);

    END_INTERFACE
} __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementsLayerContextRequestedEventArgsVtbl;

interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementsLayerContextRequestedEventArgs
{
    CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementsLayerContextRequestedEventArgsVtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementsLayerContextRequestedEventArgs_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementsLayerContextRequestedEventArgs_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementsLayerContextRequestedEventArgs_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementsLayerContextRequestedEventArgs_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementsLayerContextRequestedEventArgs_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementsLayerContextRequestedEventArgs_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementsLayerContextRequestedEventArgs_get_Position(This, value) \
    ((This)->lpVtbl->get_Position(This, value))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementsLayerContextRequestedEventArgs_get_Location(This, value) \
    ((This)->lpVtbl->get_Location(This, value))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementsLayerContextRequestedEventArgs_get_MapElements(This, value) \
    ((This)->lpVtbl->get_MapElements(This, value))

#endif /* COBJMACROS */

EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementsLayerContextRequestedEventArgs;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementsLayerContextRequestedEventArgs_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x50000

/*
 *
 * Interface Windows.UI.Xaml.Controls.Maps.IMapElementsLayerPointerEnteredEventArgs
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 5.0
 *
 * Interface is a part of the implementation of type Windows.UI.Xaml.Controls.Maps.MapElementsLayerPointerEnteredEventArgs
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x50000
#if !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementsLayerPointerEnteredEventArgs_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementsLayerPointerEnteredEventArgs_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_UI_Xaml_Controls_Maps_IMapElementsLayerPointerEnteredEventArgs[] = L"Windows.UI.Xaml.Controls.Maps.IMapElementsLayerPointerEnteredEventArgs";
typedef struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementsLayerPointerEnteredEventArgsVtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementsLayerPointerEnteredEventArgs* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementsLayerPointerEnteredEventArgs* This);
    ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementsLayerPointerEnteredEventArgs* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementsLayerPointerEnteredEventArgs* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementsLayerPointerEnteredEventArgs* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementsLayerPointerEnteredEventArgs* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* get_Position)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementsLayerPointerEnteredEventArgs* This,
        struct __x_ABI_CWindows_CFoundation_CPoint* value);
    HRESULT (STDMETHODCALLTYPE* get_Location)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementsLayerPointerEnteredEventArgs* This,
        __x_ABI_CWindows_CDevices_CGeolocation_CIGeopoint** value);
    HRESULT (STDMETHODCALLTYPE* get_MapElement)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementsLayerPointerEnteredEventArgs* This,
        __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement** value);

    END_INTERFACE
} __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementsLayerPointerEnteredEventArgsVtbl;

interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementsLayerPointerEnteredEventArgs
{
    CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementsLayerPointerEnteredEventArgsVtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementsLayerPointerEnteredEventArgs_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementsLayerPointerEnteredEventArgs_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementsLayerPointerEnteredEventArgs_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementsLayerPointerEnteredEventArgs_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementsLayerPointerEnteredEventArgs_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementsLayerPointerEnteredEventArgs_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementsLayerPointerEnteredEventArgs_get_Position(This, value) \
    ((This)->lpVtbl->get_Position(This, value))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementsLayerPointerEnteredEventArgs_get_Location(This, value) \
    ((This)->lpVtbl->get_Location(This, value))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementsLayerPointerEnteredEventArgs_get_MapElement(This, value) \
    ((This)->lpVtbl->get_MapElement(This, value))

#endif /* COBJMACROS */

EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementsLayerPointerEnteredEventArgs;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementsLayerPointerEnteredEventArgs_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x50000

/*
 *
 * Interface Windows.UI.Xaml.Controls.Maps.IMapElementsLayerPointerExitedEventArgs
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 5.0
 *
 * Interface is a part of the implementation of type Windows.UI.Xaml.Controls.Maps.MapElementsLayerPointerExitedEventArgs
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x50000
#if !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementsLayerPointerExitedEventArgs_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementsLayerPointerExitedEventArgs_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_UI_Xaml_Controls_Maps_IMapElementsLayerPointerExitedEventArgs[] = L"Windows.UI.Xaml.Controls.Maps.IMapElementsLayerPointerExitedEventArgs";
typedef struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementsLayerPointerExitedEventArgsVtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementsLayerPointerExitedEventArgs* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementsLayerPointerExitedEventArgs* This);
    ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementsLayerPointerExitedEventArgs* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementsLayerPointerExitedEventArgs* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementsLayerPointerExitedEventArgs* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementsLayerPointerExitedEventArgs* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* get_Position)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementsLayerPointerExitedEventArgs* This,
        struct __x_ABI_CWindows_CFoundation_CPoint* value);
    HRESULT (STDMETHODCALLTYPE* get_Location)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementsLayerPointerExitedEventArgs* This,
        __x_ABI_CWindows_CDevices_CGeolocation_CIGeopoint** value);
    HRESULT (STDMETHODCALLTYPE* get_MapElement)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementsLayerPointerExitedEventArgs* This,
        __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElement** value);

    END_INTERFACE
} __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementsLayerPointerExitedEventArgsVtbl;

interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementsLayerPointerExitedEventArgs
{
    CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementsLayerPointerExitedEventArgsVtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementsLayerPointerExitedEventArgs_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementsLayerPointerExitedEventArgs_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementsLayerPointerExitedEventArgs_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementsLayerPointerExitedEventArgs_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementsLayerPointerExitedEventArgs_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementsLayerPointerExitedEventArgs_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementsLayerPointerExitedEventArgs_get_Position(This, value) \
    ((This)->lpVtbl->get_Position(This, value))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementsLayerPointerExitedEventArgs_get_Location(This, value) \
    ((This)->lpVtbl->get_Location(This, value))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementsLayerPointerExitedEventArgs_get_MapElement(This, value) \
    ((This)->lpVtbl->get_MapElement(This, value))

#endif /* COBJMACROS */

EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementsLayerPointerExitedEventArgs;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementsLayerPointerExitedEventArgs_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x50000

/*
 *
 * Interface Windows.UI.Xaml.Controls.Maps.IMapElementsLayerStatics
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 5.0
 *
 * Interface is a part of the implementation of type Windows.UI.Xaml.Controls.Maps.MapElementsLayer
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x50000
#if !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementsLayerStatics_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementsLayerStatics_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_UI_Xaml_Controls_Maps_IMapElementsLayerStatics[] = L"Windows.UI.Xaml.Controls.Maps.IMapElementsLayerStatics";
typedef struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementsLayerStaticsVtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementsLayerStatics* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementsLayerStatics* This);
    ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementsLayerStatics* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementsLayerStatics* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementsLayerStatics* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementsLayerStatics* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* get_MapElementsProperty)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementsLayerStatics* This,
        __x_ABI_CWindows_CUI_CXaml_CIDependencyProperty** value);

    END_INTERFACE
} __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementsLayerStaticsVtbl;

interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementsLayerStatics
{
    CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementsLayerStaticsVtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementsLayerStatics_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementsLayerStatics_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementsLayerStatics_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementsLayerStatics_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementsLayerStatics_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementsLayerStatics_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementsLayerStatics_get_MapElementsProperty(This, value) \
    ((This)->lpVtbl->get_MapElementsProperty(This, value))

#endif /* COBJMACROS */

EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementsLayerStatics;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapElementsLayerStatics_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x50000

/*
 *
 * Interface Windows.UI.Xaml.Controls.Maps.IMapIcon
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Interface is a part of the implementation of type Windows.UI.Xaml.Controls.Maps.MapIcon
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapIcon_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapIcon_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_UI_Xaml_Controls_Maps_IMapIcon[] = L"Windows.UI.Xaml.Controls.Maps.IMapIcon";
typedef struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapIconVtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapIcon* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapIcon* This);
    ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapIcon* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapIcon* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapIcon* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapIcon* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* get_Location)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapIcon* This,
        __x_ABI_CWindows_CDevices_CGeolocation_CIGeopoint** value);
    HRESULT (STDMETHODCALLTYPE* put_Location)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapIcon* This,
        __x_ABI_CWindows_CDevices_CGeolocation_CIGeopoint* value);
    HRESULT (STDMETHODCALLTYPE* get_Title)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapIcon* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* put_Title)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapIcon* This,
        HSTRING value);
    HRESULT (STDMETHODCALLTYPE* get_NormalizedAnchorPoint)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapIcon* This,
        struct __x_ABI_CWindows_CFoundation_CPoint* value);
    HRESULT (STDMETHODCALLTYPE* put_NormalizedAnchorPoint)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapIcon* This,
        struct __x_ABI_CWindows_CFoundation_CPoint value);
    HRESULT (STDMETHODCALLTYPE* get_Image)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapIcon* This,
        __x_ABI_CWindows_CStorage_CStreams_CIRandomAccessStreamReference** value);
    HRESULT (STDMETHODCALLTYPE* put_Image)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapIcon* This,
        __x_ABI_CWindows_CStorage_CStreams_CIRandomAccessStreamReference* value);

    END_INTERFACE
} __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapIconVtbl;

interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapIcon
{
    CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapIconVtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapIcon_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapIcon_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapIcon_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapIcon_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapIcon_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapIcon_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapIcon_get_Location(This, value) \
    ((This)->lpVtbl->get_Location(This, value))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapIcon_put_Location(This, value) \
    ((This)->lpVtbl->put_Location(This, value))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapIcon_get_Title(This, value) \
    ((This)->lpVtbl->get_Title(This, value))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapIcon_put_Title(This, value) \
    ((This)->lpVtbl->put_Title(This, value))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapIcon_get_NormalizedAnchorPoint(This, value) \
    ((This)->lpVtbl->get_NormalizedAnchorPoint(This, value))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapIcon_put_NormalizedAnchorPoint(This, value) \
    ((This)->lpVtbl->put_NormalizedAnchorPoint(This, value))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapIcon_get_Image(This, value) \
    ((This)->lpVtbl->get_Image(This, value))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapIcon_put_Image(This, value) \
    ((This)->lpVtbl->put_Image(This, value))

#endif /* COBJMACROS */

EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapIcon;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapIcon_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Interface Windows.UI.Xaml.Controls.Maps.IMapIcon2
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Interface is a part of the implementation of type Windows.UI.Xaml.Controls.Maps.MapIcon
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapIcon2_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapIcon2_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_UI_Xaml_Controls_Maps_IMapIcon2[] = L"Windows.UI.Xaml.Controls.Maps.IMapIcon2";
typedef struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapIcon2Vtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapIcon2* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapIcon2* This);
    ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapIcon2* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapIcon2* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapIcon2* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapIcon2* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* get_CollisionBehaviorDesired)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapIcon2* This,
        enum __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CMapElementCollisionBehavior* value);
    HRESULT (STDMETHODCALLTYPE* put_CollisionBehaviorDesired)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapIcon2* This,
        enum __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CMapElementCollisionBehavior value);

    END_INTERFACE
} __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapIcon2Vtbl;

interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapIcon2
{
    CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapIcon2Vtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapIcon2_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapIcon2_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapIcon2_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapIcon2_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapIcon2_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapIcon2_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapIcon2_get_CollisionBehaviorDesired(This, value) \
    ((This)->lpVtbl->get_CollisionBehaviorDesired(This, value))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapIcon2_put_CollisionBehaviorDesired(This, value) \
    ((This)->lpVtbl->put_CollisionBehaviorDesired(This, value))

#endif /* COBJMACROS */

EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapIcon2;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapIcon2_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Interface Windows.UI.Xaml.Controls.Maps.IMapIconStatics
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Interface is a part of the implementation of type Windows.UI.Xaml.Controls.Maps.MapIcon
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapIconStatics_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapIconStatics_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_UI_Xaml_Controls_Maps_IMapIconStatics[] = L"Windows.UI.Xaml.Controls.Maps.IMapIconStatics";
typedef struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapIconStaticsVtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapIconStatics* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapIconStatics* This);
    ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapIconStatics* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapIconStatics* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapIconStatics* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapIconStatics* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* get_LocationProperty)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapIconStatics* This,
        __x_ABI_CWindows_CUI_CXaml_CIDependencyProperty** value);
    HRESULT (STDMETHODCALLTYPE* get_TitleProperty)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapIconStatics* This,
        __x_ABI_CWindows_CUI_CXaml_CIDependencyProperty** value);
    HRESULT (STDMETHODCALLTYPE* get_NormalizedAnchorPointProperty)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapIconStatics* This,
        __x_ABI_CWindows_CUI_CXaml_CIDependencyProperty** value);

    END_INTERFACE
} __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapIconStaticsVtbl;

interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapIconStatics
{
    CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapIconStaticsVtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapIconStatics_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapIconStatics_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapIconStatics_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapIconStatics_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapIconStatics_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapIconStatics_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapIconStatics_get_LocationProperty(This, value) \
    ((This)->lpVtbl->get_LocationProperty(This, value))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapIconStatics_get_TitleProperty(This, value) \
    ((This)->lpVtbl->get_TitleProperty(This, value))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapIconStatics_get_NormalizedAnchorPointProperty(This, value) \
    ((This)->lpVtbl->get_NormalizedAnchorPointProperty(This, value))

#endif /* COBJMACROS */

EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapIconStatics;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapIconStatics_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Interface Windows.UI.Xaml.Controls.Maps.IMapIconStatics2
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Interface is a part of the implementation of type Windows.UI.Xaml.Controls.Maps.MapIcon
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapIconStatics2_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapIconStatics2_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_UI_Xaml_Controls_Maps_IMapIconStatics2[] = L"Windows.UI.Xaml.Controls.Maps.IMapIconStatics2";
typedef struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapIconStatics2Vtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapIconStatics2* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapIconStatics2* This);
    ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapIconStatics2* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapIconStatics2* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapIconStatics2* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapIconStatics2* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* get_CollisionBehaviorDesiredProperty)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapIconStatics2* This,
        __x_ABI_CWindows_CUI_CXaml_CIDependencyProperty** value);

    END_INTERFACE
} __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapIconStatics2Vtbl;

interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapIconStatics2
{
    CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapIconStatics2Vtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapIconStatics2_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapIconStatics2_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapIconStatics2_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapIconStatics2_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapIconStatics2_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapIconStatics2_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapIconStatics2_get_CollisionBehaviorDesiredProperty(This, value) \
    ((This)->lpVtbl->get_CollisionBehaviorDesiredProperty(This, value))

#endif /* COBJMACROS */

EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapIconStatics2;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapIconStatics2_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Interface Windows.UI.Xaml.Controls.Maps.IMapInputEventArgs
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Interface is a part of the implementation of type Windows.UI.Xaml.Controls.Maps.MapInputEventArgs
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapInputEventArgs_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapInputEventArgs_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_UI_Xaml_Controls_Maps_IMapInputEventArgs[] = L"Windows.UI.Xaml.Controls.Maps.IMapInputEventArgs";
typedef struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapInputEventArgsVtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapInputEventArgs* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapInputEventArgs* This);
    ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapInputEventArgs* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapInputEventArgs* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapInputEventArgs* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapInputEventArgs* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* get_Position)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapInputEventArgs* This,
        struct __x_ABI_CWindows_CFoundation_CPoint* value);
    HRESULT (STDMETHODCALLTYPE* get_Location)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapInputEventArgs* This,
        __x_ABI_CWindows_CDevices_CGeolocation_CIGeopoint** value);

    END_INTERFACE
} __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapInputEventArgsVtbl;

interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapInputEventArgs
{
    CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapInputEventArgsVtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapInputEventArgs_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapInputEventArgs_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapInputEventArgs_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapInputEventArgs_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapInputEventArgs_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapInputEventArgs_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapInputEventArgs_get_Position(This, value) \
    ((This)->lpVtbl->get_Position(This, value))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapInputEventArgs_get_Location(This, value) \
    ((This)->lpVtbl->get_Location(This, value))

#endif /* COBJMACROS */

EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapInputEventArgs;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapInputEventArgs_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Interface Windows.UI.Xaml.Controls.Maps.IMapItemsControl
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Interface is a part of the implementation of type Windows.UI.Xaml.Controls.Maps.MapItemsControl
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapItemsControl_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapItemsControl_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_UI_Xaml_Controls_Maps_IMapItemsControl[] = L"Windows.UI.Xaml.Controls.Maps.IMapItemsControl";
typedef struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapItemsControlVtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapItemsControl* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapItemsControl* This);
    ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapItemsControl* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapItemsControl* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapItemsControl* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapItemsControl* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* get_ItemsSource)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapItemsControl* This,
        IInspectable** value);
    HRESULT (STDMETHODCALLTYPE* put_ItemsSource)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapItemsControl* This,
        IInspectable* value);
    HRESULT (STDMETHODCALLTYPE* get_Items)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapItemsControl* This,
        __FIVector_1_Windows__CUI__CXaml__CDependencyObject** value);
    HRESULT (STDMETHODCALLTYPE* get_ItemTemplate)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapItemsControl* This,
        __x_ABI_CWindows_CUI_CXaml_CIDataTemplate** value);
    HRESULT (STDMETHODCALLTYPE* put_ItemTemplate)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapItemsControl* This,
        __x_ABI_CWindows_CUI_CXaml_CIDataTemplate* value);

    END_INTERFACE
} __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapItemsControlVtbl;

interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapItemsControl
{
    CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapItemsControlVtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapItemsControl_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapItemsControl_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapItemsControl_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapItemsControl_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapItemsControl_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapItemsControl_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapItemsControl_get_ItemsSource(This, value) \
    ((This)->lpVtbl->get_ItemsSource(This, value))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapItemsControl_put_ItemsSource(This, value) \
    ((This)->lpVtbl->put_ItemsSource(This, value))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapItemsControl_get_Items(This, value) \
    ((This)->lpVtbl->get_Items(This, value))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapItemsControl_get_ItemTemplate(This, value) \
    ((This)->lpVtbl->get_ItemTemplate(This, value))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapItemsControl_put_ItemTemplate(This, value) \
    ((This)->lpVtbl->put_ItemTemplate(This, value))

#endif /* COBJMACROS */

EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapItemsControl;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapItemsControl_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Interface Windows.UI.Xaml.Controls.Maps.IMapItemsControlStatics
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Interface is a part of the implementation of type Windows.UI.Xaml.Controls.Maps.MapItemsControl
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapItemsControlStatics_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapItemsControlStatics_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_UI_Xaml_Controls_Maps_IMapItemsControlStatics[] = L"Windows.UI.Xaml.Controls.Maps.IMapItemsControlStatics";
typedef struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapItemsControlStaticsVtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapItemsControlStatics* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapItemsControlStatics* This);
    ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapItemsControlStatics* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapItemsControlStatics* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapItemsControlStatics* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapItemsControlStatics* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* get_ItemsSourceProperty)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapItemsControlStatics* This,
        __x_ABI_CWindows_CUI_CXaml_CIDependencyProperty** value);
    HRESULT (STDMETHODCALLTYPE* get_ItemsProperty)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapItemsControlStatics* This,
        __x_ABI_CWindows_CUI_CXaml_CIDependencyProperty** value);
    HRESULT (STDMETHODCALLTYPE* get_ItemTemplateProperty)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapItemsControlStatics* This,
        __x_ABI_CWindows_CUI_CXaml_CIDependencyProperty** value);

    END_INTERFACE
} __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapItemsControlStaticsVtbl;

interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapItemsControlStatics
{
    CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapItemsControlStaticsVtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapItemsControlStatics_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapItemsControlStatics_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapItemsControlStatics_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapItemsControlStatics_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapItemsControlStatics_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapItemsControlStatics_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapItemsControlStatics_get_ItemsSourceProperty(This, value) \
    ((This)->lpVtbl->get_ItemsSourceProperty(This, value))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapItemsControlStatics_get_ItemsProperty(This, value) \
    ((This)->lpVtbl->get_ItemsProperty(This, value))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapItemsControlStatics_get_ItemTemplateProperty(This, value) \
    ((This)->lpVtbl->get_ItemTemplateProperty(This, value))

#endif /* COBJMACROS */

EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapItemsControlStatics;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapItemsControlStatics_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Interface Windows.UI.Xaml.Controls.Maps.IMapLayer
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 5.0
 *
 * Interface is a part of the implementation of type Windows.UI.Xaml.Controls.Maps.MapLayer
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x50000
#if !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapLayer_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapLayer_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_UI_Xaml_Controls_Maps_IMapLayer[] = L"Windows.UI.Xaml.Controls.Maps.IMapLayer";
typedef struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapLayerVtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapLayer* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapLayer* This);
    ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapLayer* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapLayer* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapLayer* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapLayer* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* get_MapTabIndex)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapLayer* This,
        INT32* value);
    HRESULT (STDMETHODCALLTYPE* put_MapTabIndex)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapLayer* This,
        INT32 value);
    HRESULT (STDMETHODCALLTYPE* get_Visible)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapLayer* This,
        boolean* value);
    HRESULT (STDMETHODCALLTYPE* put_Visible)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapLayer* This,
        boolean value);
    HRESULT (STDMETHODCALLTYPE* get_ZIndex)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapLayer* This,
        INT32* value);
    HRESULT (STDMETHODCALLTYPE* put_ZIndex)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapLayer* This,
        INT32 value);

    END_INTERFACE
} __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapLayerVtbl;

interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapLayer
{
    CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapLayerVtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapLayer_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapLayer_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapLayer_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapLayer_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapLayer_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapLayer_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapLayer_get_MapTabIndex(This, value) \
    ((This)->lpVtbl->get_MapTabIndex(This, value))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapLayer_put_MapTabIndex(This, value) \
    ((This)->lpVtbl->put_MapTabIndex(This, value))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapLayer_get_Visible(This, value) \
    ((This)->lpVtbl->get_Visible(This, value))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapLayer_put_Visible(This, value) \
    ((This)->lpVtbl->put_Visible(This, value))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapLayer_get_ZIndex(This, value) \
    ((This)->lpVtbl->get_ZIndex(This, value))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapLayer_put_ZIndex(This, value) \
    ((This)->lpVtbl->put_ZIndex(This, value))

#endif /* COBJMACROS */

EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapLayer;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapLayer_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x50000

/*
 *
 * Interface Windows.UI.Xaml.Controls.Maps.IMapLayerFactory
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 5.0
 *
 * Interface is a part of the implementation of type Windows.UI.Xaml.Controls.Maps.MapLayer
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x50000
#if !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapLayerFactory_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapLayerFactory_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_UI_Xaml_Controls_Maps_IMapLayerFactory[] = L"Windows.UI.Xaml.Controls.Maps.IMapLayerFactory";
typedef struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapLayerFactoryVtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapLayerFactory* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapLayerFactory* This);
    ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapLayerFactory* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapLayerFactory* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapLayerFactory* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapLayerFactory* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* CreateInstance)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapLayerFactory* This,
        IInspectable* baseInterface,
        IInspectable** innerInterface,
        __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapLayer** value);

    END_INTERFACE
} __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapLayerFactoryVtbl;

interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapLayerFactory
{
    CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapLayerFactoryVtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapLayerFactory_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapLayerFactory_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapLayerFactory_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapLayerFactory_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapLayerFactory_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapLayerFactory_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapLayerFactory_CreateInstance(This, baseInterface, innerInterface, value) \
    ((This)->lpVtbl->CreateInstance(This, baseInterface, innerInterface, value))

#endif /* COBJMACROS */

EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapLayerFactory;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapLayerFactory_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x50000

/*
 *
 * Interface Windows.UI.Xaml.Controls.Maps.IMapLayerStatics
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 5.0
 *
 * Interface is a part of the implementation of type Windows.UI.Xaml.Controls.Maps.MapLayer
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x50000
#if !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapLayerStatics_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapLayerStatics_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_UI_Xaml_Controls_Maps_IMapLayerStatics[] = L"Windows.UI.Xaml.Controls.Maps.IMapLayerStatics";
typedef struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapLayerStaticsVtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapLayerStatics* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapLayerStatics* This);
    ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapLayerStatics* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapLayerStatics* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapLayerStatics* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapLayerStatics* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* get_MapTabIndexProperty)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapLayerStatics* This,
        __x_ABI_CWindows_CUI_CXaml_CIDependencyProperty** value);
    HRESULT (STDMETHODCALLTYPE* get_VisibleProperty)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapLayerStatics* This,
        __x_ABI_CWindows_CUI_CXaml_CIDependencyProperty** value);
    HRESULT (STDMETHODCALLTYPE* get_ZIndexProperty)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapLayerStatics* This,
        __x_ABI_CWindows_CUI_CXaml_CIDependencyProperty** value);

    END_INTERFACE
} __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapLayerStaticsVtbl;

interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapLayerStatics
{
    CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapLayerStaticsVtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapLayerStatics_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapLayerStatics_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapLayerStatics_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapLayerStatics_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapLayerStatics_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapLayerStatics_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapLayerStatics_get_MapTabIndexProperty(This, value) \
    ((This)->lpVtbl->get_MapTabIndexProperty(This, value))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapLayerStatics_get_VisibleProperty(This, value) \
    ((This)->lpVtbl->get_VisibleProperty(This, value))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapLayerStatics_get_ZIndexProperty(This, value) \
    ((This)->lpVtbl->get_ZIndexProperty(This, value))

#endif /* COBJMACROS */

EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapLayerStatics;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapLayerStatics_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x50000

/*
 *
 * Interface Windows.UI.Xaml.Controls.Maps.IMapModel3D
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 5.0
 *
 * Interface is a part of the implementation of type Windows.UI.Xaml.Controls.Maps.MapModel3D
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x50000
#if !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapModel3D_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapModel3D_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_UI_Xaml_Controls_Maps_IMapModel3D[] = L"Windows.UI.Xaml.Controls.Maps.IMapModel3D";
typedef struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapModel3DVtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapModel3D* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapModel3D* This);
    ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapModel3D* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapModel3D* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapModel3D* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapModel3D* This,
        TrustLevel* trustLevel);

    END_INTERFACE
} __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapModel3DVtbl;

interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapModel3D
{
    CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapModel3DVtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapModel3D_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapModel3D_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapModel3D_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapModel3D_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapModel3D_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapModel3D_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#endif /* COBJMACROS */

EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapModel3D;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapModel3D_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x50000

/*
 *
 * Interface Windows.UI.Xaml.Controls.Maps.IMapModel3DFactory
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 5.0
 *
 * Interface is a part of the implementation of type Windows.UI.Xaml.Controls.Maps.MapModel3D
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x50000
#if !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapModel3DFactory_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapModel3DFactory_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_UI_Xaml_Controls_Maps_IMapModel3DFactory[] = L"Windows.UI.Xaml.Controls.Maps.IMapModel3DFactory";
typedef struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapModel3DFactoryVtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapModel3DFactory* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapModel3DFactory* This);
    ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapModel3DFactory* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapModel3DFactory* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapModel3DFactory* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapModel3DFactory* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* CreateInstance)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapModel3DFactory* This,
        IInspectable* baseInterface,
        IInspectable** innerInterface,
        __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapModel3D** value);

    END_INTERFACE
} __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapModel3DFactoryVtbl;

interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapModel3DFactory
{
    CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapModel3DFactoryVtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapModel3DFactory_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapModel3DFactory_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapModel3DFactory_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapModel3DFactory_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapModel3DFactory_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapModel3DFactory_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapModel3DFactory_CreateInstance(This, baseInterface, innerInterface, value) \
    ((This)->lpVtbl->CreateInstance(This, baseInterface, innerInterface, value))

#endif /* COBJMACROS */

EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapModel3DFactory;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapModel3DFactory_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x50000

/*
 *
 * Interface Windows.UI.Xaml.Controls.Maps.IMapModel3DStatics
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 5.0
 *
 * Interface is a part of the implementation of type Windows.UI.Xaml.Controls.Maps.MapModel3D
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x50000
#if !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapModel3DStatics_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapModel3DStatics_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_UI_Xaml_Controls_Maps_IMapModel3DStatics[] = L"Windows.UI.Xaml.Controls.Maps.IMapModel3DStatics";
typedef struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapModel3DStaticsVtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapModel3DStatics* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapModel3DStatics* This);
    ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapModel3DStatics* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapModel3DStatics* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapModel3DStatics* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapModel3DStatics* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* CreateFrom3MFAsync)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapModel3DStatics* This,
        __x_ABI_CWindows_CStorage_CStreams_CIRandomAccessStreamReference* source,
        __FIAsyncOperation_1_Windows__CUI__CXaml__CControls__CMaps__CMapModel3D** operation);
    HRESULT (STDMETHODCALLTYPE* CreateFrom3MFWithShadingOptionAsync)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapModel3DStatics* This,
        __x_ABI_CWindows_CStorage_CStreams_CIRandomAccessStreamReference* source,
        enum __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CMapModel3DShadingOption shadingOption,
        __FIAsyncOperation_1_Windows__CUI__CXaml__CControls__CMaps__CMapModel3D** operation);

    END_INTERFACE
} __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapModel3DStaticsVtbl;

interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapModel3DStatics
{
    CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapModel3DStaticsVtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapModel3DStatics_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapModel3DStatics_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapModel3DStatics_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapModel3DStatics_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapModel3DStatics_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapModel3DStatics_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapModel3DStatics_CreateFrom3MFAsync(This, source, operation) \
    ((This)->lpVtbl->CreateFrom3MFAsync(This, source, operation))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapModel3DStatics_CreateFrom3MFWithShadingOptionAsync(This, source, shadingOption, operation) \
    ((This)->lpVtbl->CreateFrom3MFWithShadingOptionAsync(This, source, shadingOption, operation))

#endif /* COBJMACROS */

EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapModel3DStatics;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapModel3DStatics_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x50000

/*
 *
 * Interface Windows.UI.Xaml.Controls.Maps.IMapPolygon
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Interface is a part of the implementation of type Windows.UI.Xaml.Controls.Maps.MapPolygon
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolygon_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolygon_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_UI_Xaml_Controls_Maps_IMapPolygon[] = L"Windows.UI.Xaml.Controls.Maps.IMapPolygon";
typedef struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolygonVtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolygon* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolygon* This);
    ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolygon* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolygon* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolygon* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolygon* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* get_Path)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolygon* This,
        __x_ABI_CWindows_CDevices_CGeolocation_CIGeopath** value);
    HRESULT (STDMETHODCALLTYPE* put_Path)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolygon* This,
        __x_ABI_CWindows_CDevices_CGeolocation_CIGeopath* value);
    HRESULT (STDMETHODCALLTYPE* get_StrokeColor)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolygon* This,
        struct __x_ABI_CWindows_CUI_CColor* value);
    HRESULT (STDMETHODCALLTYPE* put_StrokeColor)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolygon* This,
        struct __x_ABI_CWindows_CUI_CColor value);
    HRESULT (STDMETHODCALLTYPE* get_StrokeThickness)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolygon* This,
        DOUBLE* value);
    HRESULT (STDMETHODCALLTYPE* put_StrokeThickness)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolygon* This,
        DOUBLE value);
    HRESULT (STDMETHODCALLTYPE* get_StrokeDashed)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolygon* This,
        boolean* value);
    HRESULT (STDMETHODCALLTYPE* put_StrokeDashed)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolygon* This,
        boolean value);
    HRESULT (STDMETHODCALLTYPE* get_FillColor)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolygon* This,
        struct __x_ABI_CWindows_CUI_CColor* value);
    HRESULT (STDMETHODCALLTYPE* put_FillColor)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolygon* This,
        struct __x_ABI_CWindows_CUI_CColor value);

    END_INTERFACE
} __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolygonVtbl;

interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolygon
{
    CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolygonVtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolygon_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolygon_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolygon_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolygon_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolygon_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolygon_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolygon_get_Path(This, value) \
    ((This)->lpVtbl->get_Path(This, value))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolygon_put_Path(This, value) \
    ((This)->lpVtbl->put_Path(This, value))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolygon_get_StrokeColor(This, value) \
    ((This)->lpVtbl->get_StrokeColor(This, value))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolygon_put_StrokeColor(This, value) \
    ((This)->lpVtbl->put_StrokeColor(This, value))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolygon_get_StrokeThickness(This, value) \
    ((This)->lpVtbl->get_StrokeThickness(This, value))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolygon_put_StrokeThickness(This, value) \
    ((This)->lpVtbl->put_StrokeThickness(This, value))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolygon_get_StrokeDashed(This, value) \
    ((This)->lpVtbl->get_StrokeDashed(This, value))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolygon_put_StrokeDashed(This, value) \
    ((This)->lpVtbl->put_StrokeDashed(This, value))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolygon_get_FillColor(This, value) \
    ((This)->lpVtbl->get_FillColor(This, value))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolygon_put_FillColor(This, value) \
    ((This)->lpVtbl->put_FillColor(This, value))

#endif /* COBJMACROS */

EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolygon;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolygon_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Interface Windows.UI.Xaml.Controls.Maps.IMapPolygon2
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 2.0
 *
 * Interface is a part of the implementation of type Windows.UI.Xaml.Controls.Maps.MapPolygon
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x20000
#if !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolygon2_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolygon2_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_UI_Xaml_Controls_Maps_IMapPolygon2[] = L"Windows.UI.Xaml.Controls.Maps.IMapPolygon2";
typedef struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolygon2Vtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolygon2* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolygon2* This);
    ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolygon2* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolygon2* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolygon2* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolygon2* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* get_Paths)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolygon2* This,
        __FIVector_1_Windows__CDevices__CGeolocation__CGeopath** value);

    END_INTERFACE
} __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolygon2Vtbl;

interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolygon2
{
    CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolygon2Vtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolygon2_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolygon2_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolygon2_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolygon2_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolygon2_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolygon2_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolygon2_get_Paths(This, value) \
    ((This)->lpVtbl->get_Paths(This, value))

#endif /* COBJMACROS */

EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolygon2;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolygon2_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x20000

/*
 *
 * Interface Windows.UI.Xaml.Controls.Maps.IMapPolygonStatics
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Interface is a part of the implementation of type Windows.UI.Xaml.Controls.Maps.MapPolygon
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolygonStatics_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolygonStatics_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_UI_Xaml_Controls_Maps_IMapPolygonStatics[] = L"Windows.UI.Xaml.Controls.Maps.IMapPolygonStatics";
typedef struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolygonStaticsVtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolygonStatics* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolygonStatics* This);
    ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolygonStatics* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolygonStatics* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolygonStatics* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolygonStatics* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* get_PathProperty)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolygonStatics* This,
        __x_ABI_CWindows_CUI_CXaml_CIDependencyProperty** value);
    HRESULT (STDMETHODCALLTYPE* get_StrokeThicknessProperty)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolygonStatics* This,
        __x_ABI_CWindows_CUI_CXaml_CIDependencyProperty** value);
    HRESULT (STDMETHODCALLTYPE* get_StrokeDashedProperty)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolygonStatics* This,
        __x_ABI_CWindows_CUI_CXaml_CIDependencyProperty** value);

    END_INTERFACE
} __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolygonStaticsVtbl;

interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolygonStatics
{
    CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolygonStaticsVtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolygonStatics_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolygonStatics_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolygonStatics_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolygonStatics_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolygonStatics_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolygonStatics_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolygonStatics_get_PathProperty(This, value) \
    ((This)->lpVtbl->get_PathProperty(This, value))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolygonStatics_get_StrokeThicknessProperty(This, value) \
    ((This)->lpVtbl->get_StrokeThicknessProperty(This, value))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolygonStatics_get_StrokeDashedProperty(This, value) \
    ((This)->lpVtbl->get_StrokeDashedProperty(This, value))

#endif /* COBJMACROS */

EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolygonStatics;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolygonStatics_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Interface Windows.UI.Xaml.Controls.Maps.IMapPolyline
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Interface is a part of the implementation of type Windows.UI.Xaml.Controls.Maps.MapPolyline
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolyline_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolyline_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_UI_Xaml_Controls_Maps_IMapPolyline[] = L"Windows.UI.Xaml.Controls.Maps.IMapPolyline";
typedef struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolylineVtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolyline* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolyline* This);
    ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolyline* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolyline* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolyline* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolyline* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* get_Path)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolyline* This,
        __x_ABI_CWindows_CDevices_CGeolocation_CIGeopath** value);
    HRESULT (STDMETHODCALLTYPE* put_Path)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolyline* This,
        __x_ABI_CWindows_CDevices_CGeolocation_CIGeopath* value);
    HRESULT (STDMETHODCALLTYPE* get_StrokeColor)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolyline* This,
        struct __x_ABI_CWindows_CUI_CColor* value);
    HRESULT (STDMETHODCALLTYPE* put_StrokeColor)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolyline* This,
        struct __x_ABI_CWindows_CUI_CColor value);
    HRESULT (STDMETHODCALLTYPE* get_StrokeThickness)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolyline* This,
        DOUBLE* value);
    HRESULT (STDMETHODCALLTYPE* put_StrokeThickness)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolyline* This,
        DOUBLE value);
    HRESULT (STDMETHODCALLTYPE* get_StrokeDashed)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolyline* This,
        boolean* value);
    HRESULT (STDMETHODCALLTYPE* put_StrokeDashed)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolyline* This,
        boolean value);

    END_INTERFACE
} __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolylineVtbl;

interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolyline
{
    CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolylineVtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolyline_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolyline_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolyline_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolyline_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolyline_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolyline_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolyline_get_Path(This, value) \
    ((This)->lpVtbl->get_Path(This, value))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolyline_put_Path(This, value) \
    ((This)->lpVtbl->put_Path(This, value))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolyline_get_StrokeColor(This, value) \
    ((This)->lpVtbl->get_StrokeColor(This, value))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolyline_put_StrokeColor(This, value) \
    ((This)->lpVtbl->put_StrokeColor(This, value))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolyline_get_StrokeThickness(This, value) \
    ((This)->lpVtbl->get_StrokeThickness(This, value))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolyline_put_StrokeThickness(This, value) \
    ((This)->lpVtbl->put_StrokeThickness(This, value))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolyline_get_StrokeDashed(This, value) \
    ((This)->lpVtbl->get_StrokeDashed(This, value))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolyline_put_StrokeDashed(This, value) \
    ((This)->lpVtbl->put_StrokeDashed(This, value))

#endif /* COBJMACROS */

EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolyline;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolyline_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Interface Windows.UI.Xaml.Controls.Maps.IMapPolylineStatics
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Interface is a part of the implementation of type Windows.UI.Xaml.Controls.Maps.MapPolyline
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolylineStatics_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolylineStatics_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_UI_Xaml_Controls_Maps_IMapPolylineStatics[] = L"Windows.UI.Xaml.Controls.Maps.IMapPolylineStatics";
typedef struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolylineStaticsVtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolylineStatics* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolylineStatics* This);
    ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolylineStatics* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolylineStatics* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolylineStatics* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolylineStatics* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* get_PathProperty)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolylineStatics* This,
        __x_ABI_CWindows_CUI_CXaml_CIDependencyProperty** value);
    HRESULT (STDMETHODCALLTYPE* get_StrokeDashedProperty)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolylineStatics* This,
        __x_ABI_CWindows_CUI_CXaml_CIDependencyProperty** value);

    END_INTERFACE
} __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolylineStaticsVtbl;

interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolylineStatics
{
    CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolylineStaticsVtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolylineStatics_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolylineStatics_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolylineStatics_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolylineStatics_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolylineStatics_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolylineStatics_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolylineStatics_get_PathProperty(This, value) \
    ((This)->lpVtbl->get_PathProperty(This, value))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolylineStatics_get_StrokeDashedProperty(This, value) \
    ((This)->lpVtbl->get_StrokeDashedProperty(This, value))

#endif /* COBJMACROS */

EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolylineStatics;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapPolylineStatics_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Interface Windows.UI.Xaml.Controls.Maps.IMapRightTappedEventArgs
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 2.0
 *
 * Interface is a part of the implementation of type Windows.UI.Xaml.Controls.Maps.MapRightTappedEventArgs
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x20000
#if !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapRightTappedEventArgs_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapRightTappedEventArgs_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_UI_Xaml_Controls_Maps_IMapRightTappedEventArgs[] = L"Windows.UI.Xaml.Controls.Maps.IMapRightTappedEventArgs";
typedef struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapRightTappedEventArgsVtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapRightTappedEventArgs* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapRightTappedEventArgs* This);
    ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapRightTappedEventArgs* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapRightTappedEventArgs* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapRightTappedEventArgs* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapRightTappedEventArgs* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* get_Position)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapRightTappedEventArgs* This,
        struct __x_ABI_CWindows_CFoundation_CPoint* value);
    HRESULT (STDMETHODCALLTYPE* get_Location)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapRightTappedEventArgs* This,
        __x_ABI_CWindows_CDevices_CGeolocation_CIGeopoint** value);

    END_INTERFACE
} __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapRightTappedEventArgsVtbl;

interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapRightTappedEventArgs
{
    CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapRightTappedEventArgsVtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapRightTappedEventArgs_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapRightTappedEventArgs_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapRightTappedEventArgs_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapRightTappedEventArgs_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapRightTappedEventArgs_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapRightTappedEventArgs_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapRightTappedEventArgs_get_Position(This, value) \
    ((This)->lpVtbl->get_Position(This, value))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapRightTappedEventArgs_get_Location(This, value) \
    ((This)->lpVtbl->get_Location(This, value))

#endif /* COBJMACROS */

EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapRightTappedEventArgs;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapRightTappedEventArgs_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x20000

/*
 *
 * Interface Windows.UI.Xaml.Controls.Maps.IMapRouteView
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Interface is a part of the implementation of type Windows.UI.Xaml.Controls.Maps.MapRouteView
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapRouteView_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapRouteView_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_UI_Xaml_Controls_Maps_IMapRouteView[] = L"Windows.UI.Xaml.Controls.Maps.IMapRouteView";
typedef struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapRouteViewVtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapRouteView* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapRouteView* This);
    ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapRouteView* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapRouteView* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapRouteView* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapRouteView* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* get_RouteColor)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapRouteView* This,
        struct __x_ABI_CWindows_CUI_CColor* value);
    HRESULT (STDMETHODCALLTYPE* put_RouteColor)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapRouteView* This,
        struct __x_ABI_CWindows_CUI_CColor value);
    HRESULT (STDMETHODCALLTYPE* get_OutlineColor)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapRouteView* This,
        struct __x_ABI_CWindows_CUI_CColor* value);
    HRESULT (STDMETHODCALLTYPE* put_OutlineColor)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapRouteView* This,
        struct __x_ABI_CWindows_CUI_CColor value);
    HRESULT (STDMETHODCALLTYPE* get_Route)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapRouteView* This,
        __x_ABI_CWindows_CServices_CMaps_CIMapRoute** value);

    END_INTERFACE
} __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapRouteViewVtbl;

interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapRouteView
{
    CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapRouteViewVtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapRouteView_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapRouteView_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapRouteView_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapRouteView_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapRouteView_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapRouteView_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapRouteView_get_RouteColor(This, value) \
    ((This)->lpVtbl->get_RouteColor(This, value))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapRouteView_put_RouteColor(This, value) \
    ((This)->lpVtbl->put_RouteColor(This, value))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapRouteView_get_OutlineColor(This, value) \
    ((This)->lpVtbl->get_OutlineColor(This, value))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapRouteView_put_OutlineColor(This, value) \
    ((This)->lpVtbl->put_OutlineColor(This, value))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapRouteView_get_Route(This, value) \
    ((This)->lpVtbl->get_Route(This, value))

#endif /* COBJMACROS */

EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapRouteView;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapRouteView_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Interface Windows.UI.Xaml.Controls.Maps.IMapRouteViewFactory
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Interface is a part of the implementation of type Windows.UI.Xaml.Controls.Maps.MapRouteView
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapRouteViewFactory_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapRouteViewFactory_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_UI_Xaml_Controls_Maps_IMapRouteViewFactory[] = L"Windows.UI.Xaml.Controls.Maps.IMapRouteViewFactory";
typedef struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapRouteViewFactoryVtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapRouteViewFactory* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapRouteViewFactory* This);
    ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapRouteViewFactory* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapRouteViewFactory* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapRouteViewFactory* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapRouteViewFactory* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* CreateInstanceWithMapRoute)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapRouteViewFactory* This,
        __x_ABI_CWindows_CServices_CMaps_CIMapRoute* route,
        IInspectable* baseInterface,
        IInspectable** innerInterface,
        __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapRouteView** value);

    END_INTERFACE
} __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapRouteViewFactoryVtbl;

interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapRouteViewFactory
{
    CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapRouteViewFactoryVtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapRouteViewFactory_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapRouteViewFactory_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapRouteViewFactory_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapRouteViewFactory_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapRouteViewFactory_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapRouteViewFactory_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapRouteViewFactory_CreateInstanceWithMapRoute(This, route, baseInterface, innerInterface, value) \
    ((This)->lpVtbl->CreateInstanceWithMapRoute(This, route, baseInterface, innerInterface, value))

#endif /* COBJMACROS */

EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapRouteViewFactory;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapRouteViewFactory_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Interface Windows.UI.Xaml.Controls.Maps.IMapScene
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Interface is a part of the implementation of type Windows.UI.Xaml.Controls.Maps.MapScene
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapScene_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapScene_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_UI_Xaml_Controls_Maps_IMapScene[] = L"Windows.UI.Xaml.Controls.Maps.IMapScene";
typedef struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapSceneVtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapScene* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapScene* This);
    ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapScene* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapScene* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapScene* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapScene* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* get_TargetCamera)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapScene* This,
        __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCamera** value);
    HRESULT (STDMETHODCALLTYPE* add_TargetCameraChanged)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapScene* This,
        __FITypedEventHandler_2_Windows__CUI__CXaml__CControls__CMaps__CMapScene_Windows__CUI__CXaml__CControls__CMaps__CMapTargetCameraChangedEventArgs* handler,
        EventRegistrationToken* token);
    HRESULT (STDMETHODCALLTYPE* remove_TargetCameraChanged)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapScene* This,
        EventRegistrationToken token);

    END_INTERFACE
} __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapSceneVtbl;

interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapScene
{
    CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapSceneVtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapScene_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapScene_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapScene_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapScene_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapScene_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapScene_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapScene_get_TargetCamera(This, value) \
    ((This)->lpVtbl->get_TargetCamera(This, value))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapScene_add_TargetCameraChanged(This, handler, token) \
    ((This)->lpVtbl->add_TargetCameraChanged(This, handler, token))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapScene_remove_TargetCameraChanged(This, token) \
    ((This)->lpVtbl->remove_TargetCameraChanged(This, token))

#endif /* COBJMACROS */

EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapScene;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapScene_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Interface Windows.UI.Xaml.Controls.Maps.IMapSceneStatics
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Interface is a part of the implementation of type Windows.UI.Xaml.Controls.Maps.MapScene
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapSceneStatics_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapSceneStatics_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_UI_Xaml_Controls_Maps_IMapSceneStatics[] = L"Windows.UI.Xaml.Controls.Maps.IMapSceneStatics";
typedef struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapSceneStaticsVtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapSceneStatics* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapSceneStatics* This);
    ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapSceneStatics* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapSceneStatics* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapSceneStatics* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapSceneStatics* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* CreateFromBoundingBox)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapSceneStatics* This,
        __x_ABI_CWindows_CDevices_CGeolocation_CIGeoboundingBox* bounds,
        __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapScene** result);
    HRESULT (STDMETHODCALLTYPE* CreateFromBoundingBoxWithHeadingAndPitch)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapSceneStatics* This,
        __x_ABI_CWindows_CDevices_CGeolocation_CIGeoboundingBox* bounds,
        DOUBLE headingInDegrees,
        DOUBLE pitchInDegrees,
        __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapScene** result);
    HRESULT (STDMETHODCALLTYPE* CreateFromCamera)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapSceneStatics* This,
        __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCamera* camera,
        __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapScene** result);
    HRESULT (STDMETHODCALLTYPE* CreateFromLocation)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapSceneStatics* This,
        __x_ABI_CWindows_CDevices_CGeolocation_CIGeopoint* location,
        __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapScene** result);
    HRESULT (STDMETHODCALLTYPE* CreateFromLocationWithHeadingAndPitch)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapSceneStatics* This,
        __x_ABI_CWindows_CDevices_CGeolocation_CIGeopoint* location,
        DOUBLE headingInDegrees,
        DOUBLE pitchInDegrees,
        __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapScene** result);
    HRESULT (STDMETHODCALLTYPE* CreateFromLocationAndRadius)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapSceneStatics* This,
        __x_ABI_CWindows_CDevices_CGeolocation_CIGeopoint* location,
        DOUBLE radiusInMeters,
        __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapScene** result);
    HRESULT (STDMETHODCALLTYPE* CreateFromLocationAndRadiusWithHeadingAndPitch)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapSceneStatics* This,
        __x_ABI_CWindows_CDevices_CGeolocation_CIGeopoint* location,
        DOUBLE radiusInMeters,
        DOUBLE headingInDegrees,
        DOUBLE pitchInDegrees,
        __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapScene** result);
    HRESULT (STDMETHODCALLTYPE* CreateFromLocations)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapSceneStatics* This,
        __FIIterable_1_Windows__CDevices__CGeolocation__CGeopoint* locations,
        __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapScene** result);
    HRESULT (STDMETHODCALLTYPE* CreateFromLocationsWithHeadingAndPitch)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapSceneStatics* This,
        __FIIterable_1_Windows__CDevices__CGeolocation__CGeopoint* locations,
        DOUBLE headingInDegrees,
        DOUBLE pitchInDegrees,
        __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapScene** result);

    END_INTERFACE
} __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapSceneStaticsVtbl;

interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapSceneStatics
{
    CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapSceneStaticsVtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapSceneStatics_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapSceneStatics_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapSceneStatics_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapSceneStatics_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapSceneStatics_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapSceneStatics_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapSceneStatics_CreateFromBoundingBox(This, bounds, result) \
    ((This)->lpVtbl->CreateFromBoundingBox(This, bounds, result))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapSceneStatics_CreateFromBoundingBoxWithHeadingAndPitch(This, bounds, headingInDegrees, pitchInDegrees, result) \
    ((This)->lpVtbl->CreateFromBoundingBoxWithHeadingAndPitch(This, bounds, headingInDegrees, pitchInDegrees, result))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapSceneStatics_CreateFromCamera(This, camera, result) \
    ((This)->lpVtbl->CreateFromCamera(This, camera, result))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapSceneStatics_CreateFromLocation(This, location, result) \
    ((This)->lpVtbl->CreateFromLocation(This, location, result))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapSceneStatics_CreateFromLocationWithHeadingAndPitch(This, location, headingInDegrees, pitchInDegrees, result) \
    ((This)->lpVtbl->CreateFromLocationWithHeadingAndPitch(This, location, headingInDegrees, pitchInDegrees, result))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapSceneStatics_CreateFromLocationAndRadius(This, location, radiusInMeters, result) \
    ((This)->lpVtbl->CreateFromLocationAndRadius(This, location, radiusInMeters, result))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapSceneStatics_CreateFromLocationAndRadiusWithHeadingAndPitch(This, location, radiusInMeters, headingInDegrees, pitchInDegrees, result) \
    ((This)->lpVtbl->CreateFromLocationAndRadiusWithHeadingAndPitch(This, location, radiusInMeters, headingInDegrees, pitchInDegrees, result))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapSceneStatics_CreateFromLocations(This, locations, result) \
    ((This)->lpVtbl->CreateFromLocations(This, locations, result))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapSceneStatics_CreateFromLocationsWithHeadingAndPitch(This, locations, headingInDegrees, pitchInDegrees, result) \
    ((This)->lpVtbl->CreateFromLocationsWithHeadingAndPitch(This, locations, headingInDegrees, pitchInDegrees, result))

#endif /* COBJMACROS */

EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapSceneStatics;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapSceneStatics_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Interface Windows.UI.Xaml.Controls.Maps.IMapStyleSheet
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 4.0
 *
 * Interface is a part of the implementation of type Windows.UI.Xaml.Controls.Maps.MapStyleSheet
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x40000
#if !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapStyleSheet_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapStyleSheet_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_UI_Xaml_Controls_Maps_IMapStyleSheet[] = L"Windows.UI.Xaml.Controls.Maps.IMapStyleSheet";
typedef struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapStyleSheetVtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapStyleSheet* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapStyleSheet* This);
    ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapStyleSheet* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapStyleSheet* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapStyleSheet* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapStyleSheet* This,
        TrustLevel* trustLevel);

    END_INTERFACE
} __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapStyleSheetVtbl;

interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapStyleSheet
{
    CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapStyleSheetVtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapStyleSheet_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapStyleSheet_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapStyleSheet_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapStyleSheet_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapStyleSheet_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapStyleSheet_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#endif /* COBJMACROS */

EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapStyleSheet;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapStyleSheet_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x40000

/*
 *
 * Interface Windows.UI.Xaml.Controls.Maps.IMapStyleSheetEntriesStatics
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 5.0
 *
 * Interface is a part of the implementation of type Windows.UI.Xaml.Controls.Maps.MapStyleSheetEntries
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x50000
#if !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapStyleSheetEntriesStatics_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapStyleSheetEntriesStatics_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_UI_Xaml_Controls_Maps_IMapStyleSheetEntriesStatics[] = L"Windows.UI.Xaml.Controls.Maps.IMapStyleSheetEntriesStatics";
typedef struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapStyleSheetEntriesStaticsVtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapStyleSheetEntriesStatics* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapStyleSheetEntriesStatics* This);
    ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapStyleSheetEntriesStatics* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapStyleSheetEntriesStatics* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapStyleSheetEntriesStatics* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapStyleSheetEntriesStatics* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* get_Area)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapStyleSheetEntriesStatics* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_Airport)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapStyleSheetEntriesStatics* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_Cemetery)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapStyleSheetEntriesStatics* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_Continent)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapStyleSheetEntriesStatics* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_Education)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapStyleSheetEntriesStatics* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_IndigenousPeoplesReserve)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapStyleSheetEntriesStatics* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_Island)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapStyleSheetEntriesStatics* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_Medical)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapStyleSheetEntriesStatics* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_Military)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapStyleSheetEntriesStatics* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_Nautical)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapStyleSheetEntriesStatics* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_Neighborhood)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapStyleSheetEntriesStatics* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_Runway)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapStyleSheetEntriesStatics* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_Sand)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapStyleSheetEntriesStatics* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_ShoppingCenter)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapStyleSheetEntriesStatics* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_Stadium)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapStyleSheetEntriesStatics* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_Vegetation)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapStyleSheetEntriesStatics* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_Forest)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapStyleSheetEntriesStatics* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_GolfCourse)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapStyleSheetEntriesStatics* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_Park)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapStyleSheetEntriesStatics* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_PlayingField)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapStyleSheetEntriesStatics* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_Reserve)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapStyleSheetEntriesStatics* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_Point)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapStyleSheetEntriesStatics* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_NaturalPoint)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapStyleSheetEntriesStatics* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_Peak)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapStyleSheetEntriesStatics* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_VolcanicPeak)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapStyleSheetEntriesStatics* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_WaterPoint)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapStyleSheetEntriesStatics* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_PointOfInterest)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapStyleSheetEntriesStatics* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_Business)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapStyleSheetEntriesStatics* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_FoodPoint)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapStyleSheetEntriesStatics* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_PopulatedPlace)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapStyleSheetEntriesStatics* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_Capital)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapStyleSheetEntriesStatics* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_AdminDistrictCapital)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapStyleSheetEntriesStatics* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_CountryRegionCapital)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapStyleSheetEntriesStatics* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_RoadShield)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapStyleSheetEntriesStatics* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_RoadExit)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapStyleSheetEntriesStatics* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_Transit)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapStyleSheetEntriesStatics* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_Political)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapStyleSheetEntriesStatics* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_CountryRegion)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapStyleSheetEntriesStatics* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_AdminDistrict)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapStyleSheetEntriesStatics* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_District)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapStyleSheetEntriesStatics* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_Structure)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapStyleSheetEntriesStatics* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_Building)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapStyleSheetEntriesStatics* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_EducationBuilding)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapStyleSheetEntriesStatics* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_MedicalBuilding)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapStyleSheetEntriesStatics* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_TransitBuilding)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapStyleSheetEntriesStatics* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_Transportation)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapStyleSheetEntriesStatics* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_Road)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapStyleSheetEntriesStatics* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_ControlledAccessHighway)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapStyleSheetEntriesStatics* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_HighSpeedRamp)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapStyleSheetEntriesStatics* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_Highway)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapStyleSheetEntriesStatics* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_MajorRoad)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapStyleSheetEntriesStatics* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_ArterialRoad)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapStyleSheetEntriesStatics* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_Street)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapStyleSheetEntriesStatics* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_Ramp)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapStyleSheetEntriesStatics* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_UnpavedStreet)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapStyleSheetEntriesStatics* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_TollRoad)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapStyleSheetEntriesStatics* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_Railway)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapStyleSheetEntriesStatics* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_Trail)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapStyleSheetEntriesStatics* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_WaterRoute)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapStyleSheetEntriesStatics* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_Water)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapStyleSheetEntriesStatics* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_River)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapStyleSheetEntriesStatics* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_RouteLine)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapStyleSheetEntriesStatics* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_WalkingRoute)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapStyleSheetEntriesStatics* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_DrivingRoute)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapStyleSheetEntriesStatics* This,
        HSTRING* value);

    END_INTERFACE
} __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapStyleSheetEntriesStaticsVtbl;

interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapStyleSheetEntriesStatics
{
    CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapStyleSheetEntriesStaticsVtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapStyleSheetEntriesStatics_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapStyleSheetEntriesStatics_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapStyleSheetEntriesStatics_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapStyleSheetEntriesStatics_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapStyleSheetEntriesStatics_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapStyleSheetEntriesStatics_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapStyleSheetEntriesStatics_get_Area(This, value) \
    ((This)->lpVtbl->get_Area(This, value))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapStyleSheetEntriesStatics_get_Airport(This, value) \
    ((This)->lpVtbl->get_Airport(This, value))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapStyleSheetEntriesStatics_get_Cemetery(This, value) \
    ((This)->lpVtbl->get_Cemetery(This, value))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapStyleSheetEntriesStatics_get_Continent(This, value) \
    ((This)->lpVtbl->get_Continent(This, value))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapStyleSheetEntriesStatics_get_Education(This, value) \
    ((This)->lpVtbl->get_Education(This, value))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapStyleSheetEntriesStatics_get_IndigenousPeoplesReserve(This, value) \
    ((This)->lpVtbl->get_IndigenousPeoplesReserve(This, value))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapStyleSheetEntriesStatics_get_Island(This, value) \
    ((This)->lpVtbl->get_Island(This, value))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapStyleSheetEntriesStatics_get_Medical(This, value) \
    ((This)->lpVtbl->get_Medical(This, value))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapStyleSheetEntriesStatics_get_Military(This, value) \
    ((This)->lpVtbl->get_Military(This, value))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapStyleSheetEntriesStatics_get_Nautical(This, value) \
    ((This)->lpVtbl->get_Nautical(This, value))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapStyleSheetEntriesStatics_get_Neighborhood(This, value) \
    ((This)->lpVtbl->get_Neighborhood(This, value))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapStyleSheetEntriesStatics_get_Runway(This, value) \
    ((This)->lpVtbl->get_Runway(This, value))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapStyleSheetEntriesStatics_get_Sand(This, value) \
    ((This)->lpVtbl->get_Sand(This, value))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapStyleSheetEntriesStatics_get_ShoppingCenter(This, value) \
    ((This)->lpVtbl->get_ShoppingCenter(This, value))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapStyleSheetEntriesStatics_get_Stadium(This, value) \
    ((This)->lpVtbl->get_Stadium(This, value))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapStyleSheetEntriesStatics_get_Vegetation(This, value) \
    ((This)->lpVtbl->get_Vegetation(This, value))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapStyleSheetEntriesStatics_get_Forest(This, value) \
    ((This)->lpVtbl->get_Forest(This, value))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapStyleSheetEntriesStatics_get_GolfCourse(This, value) \
    ((This)->lpVtbl->get_GolfCourse(This, value))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapStyleSheetEntriesStatics_get_Park(This, value) \
    ((This)->lpVtbl->get_Park(This, value))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapStyleSheetEntriesStatics_get_PlayingField(This, value) \
    ((This)->lpVtbl->get_PlayingField(This, value))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapStyleSheetEntriesStatics_get_Reserve(This, value) \
    ((This)->lpVtbl->get_Reserve(This, value))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapStyleSheetEntriesStatics_get_Point(This, value) \
    ((This)->lpVtbl->get_Point(This, value))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapStyleSheetEntriesStatics_get_NaturalPoint(This, value) \
    ((This)->lpVtbl->get_NaturalPoint(This, value))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapStyleSheetEntriesStatics_get_Peak(This, value) \
    ((This)->lpVtbl->get_Peak(This, value))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapStyleSheetEntriesStatics_get_VolcanicPeak(This, value) \
    ((This)->lpVtbl->get_VolcanicPeak(This, value))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapStyleSheetEntriesStatics_get_WaterPoint(This, value) \
    ((This)->lpVtbl->get_WaterPoint(This, value))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapStyleSheetEntriesStatics_get_PointOfInterest(This, value) \
    ((This)->lpVtbl->get_PointOfInterest(This, value))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapStyleSheetEntriesStatics_get_Business(This, value) \
    ((This)->lpVtbl->get_Business(This, value))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapStyleSheetEntriesStatics_get_FoodPoint(This, value) \
    ((This)->lpVtbl->get_FoodPoint(This, value))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapStyleSheetEntriesStatics_get_PopulatedPlace(This, value) \
    ((This)->lpVtbl->get_PopulatedPlace(This, value))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapStyleSheetEntriesStatics_get_Capital(This, value) \
    ((This)->lpVtbl->get_Capital(This, value))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapStyleSheetEntriesStatics_get_AdminDistrictCapital(This, value) \
    ((This)->lpVtbl->get_AdminDistrictCapital(This, value))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapStyleSheetEntriesStatics_get_CountryRegionCapital(This, value) \
    ((This)->lpVtbl->get_CountryRegionCapital(This, value))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapStyleSheetEntriesStatics_get_RoadShield(This, value) \
    ((This)->lpVtbl->get_RoadShield(This, value))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapStyleSheetEntriesStatics_get_RoadExit(This, value) \
    ((This)->lpVtbl->get_RoadExit(This, value))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapStyleSheetEntriesStatics_get_Transit(This, value) \
    ((This)->lpVtbl->get_Transit(This, value))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapStyleSheetEntriesStatics_get_Political(This, value) \
    ((This)->lpVtbl->get_Political(This, value))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapStyleSheetEntriesStatics_get_CountryRegion(This, value) \
    ((This)->lpVtbl->get_CountryRegion(This, value))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapStyleSheetEntriesStatics_get_AdminDistrict(This, value) \
    ((This)->lpVtbl->get_AdminDistrict(This, value))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapStyleSheetEntriesStatics_get_District(This, value) \
    ((This)->lpVtbl->get_District(This, value))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapStyleSheetEntriesStatics_get_Structure(This, value) \
    ((This)->lpVtbl->get_Structure(This, value))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapStyleSheetEntriesStatics_get_Building(This, value) \
    ((This)->lpVtbl->get_Building(This, value))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapStyleSheetEntriesStatics_get_EducationBuilding(This, value) \
    ((This)->lpVtbl->get_EducationBuilding(This, value))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapStyleSheetEntriesStatics_get_MedicalBuilding(This, value) \
    ((This)->lpVtbl->get_MedicalBuilding(This, value))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapStyleSheetEntriesStatics_get_TransitBuilding(This, value) \
    ((This)->lpVtbl->get_TransitBuilding(This, value))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapStyleSheetEntriesStatics_get_Transportation(This, value) \
    ((This)->lpVtbl->get_Transportation(This, value))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapStyleSheetEntriesStatics_get_Road(This, value) \
    ((This)->lpVtbl->get_Road(This, value))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapStyleSheetEntriesStatics_get_ControlledAccessHighway(This, value) \
    ((This)->lpVtbl->get_ControlledAccessHighway(This, value))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapStyleSheetEntriesStatics_get_HighSpeedRamp(This, value) \
    ((This)->lpVtbl->get_HighSpeedRamp(This, value))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapStyleSheetEntriesStatics_get_Highway(This, value) \
    ((This)->lpVtbl->get_Highway(This, value))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapStyleSheetEntriesStatics_get_MajorRoad(This, value) \
    ((This)->lpVtbl->get_MajorRoad(This, value))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapStyleSheetEntriesStatics_get_ArterialRoad(This, value) \
    ((This)->lpVtbl->get_ArterialRoad(This, value))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapStyleSheetEntriesStatics_get_Street(This, value) \
    ((This)->lpVtbl->get_Street(This, value))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapStyleSheetEntriesStatics_get_Ramp(This, value) \
    ((This)->lpVtbl->get_Ramp(This, value))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapStyleSheetEntriesStatics_get_UnpavedStreet(This, value) \
    ((This)->lpVtbl->get_UnpavedStreet(This, value))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapStyleSheetEntriesStatics_get_TollRoad(This, value) \
    ((This)->lpVtbl->get_TollRoad(This, value))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapStyleSheetEntriesStatics_get_Railway(This, value) \
    ((This)->lpVtbl->get_Railway(This, value))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapStyleSheetEntriesStatics_get_Trail(This, value) \
    ((This)->lpVtbl->get_Trail(This, value))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapStyleSheetEntriesStatics_get_WaterRoute(This, value) \
    ((This)->lpVtbl->get_WaterRoute(This, value))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapStyleSheetEntriesStatics_get_Water(This, value) \
    ((This)->lpVtbl->get_Water(This, value))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapStyleSheetEntriesStatics_get_River(This, value) \
    ((This)->lpVtbl->get_River(This, value))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapStyleSheetEntriesStatics_get_RouteLine(This, value) \
    ((This)->lpVtbl->get_RouteLine(This, value))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapStyleSheetEntriesStatics_get_WalkingRoute(This, value) \
    ((This)->lpVtbl->get_WalkingRoute(This, value))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapStyleSheetEntriesStatics_get_DrivingRoute(This, value) \
    ((This)->lpVtbl->get_DrivingRoute(This, value))

#endif /* COBJMACROS */

EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapStyleSheetEntriesStatics;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapStyleSheetEntriesStatics_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x50000

/*
 *
 * Interface Windows.UI.Xaml.Controls.Maps.IMapStyleSheetEntryStatesStatics
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 5.0
 *
 * Interface is a part of the implementation of type Windows.UI.Xaml.Controls.Maps.MapStyleSheetEntryStates
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x50000
#if !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapStyleSheetEntryStatesStatics_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapStyleSheetEntryStatesStatics_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_UI_Xaml_Controls_Maps_IMapStyleSheetEntryStatesStatics[] = L"Windows.UI.Xaml.Controls.Maps.IMapStyleSheetEntryStatesStatics";
typedef struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapStyleSheetEntryStatesStaticsVtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapStyleSheetEntryStatesStatics* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapStyleSheetEntryStatesStatics* This);
    ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapStyleSheetEntryStatesStatics* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapStyleSheetEntryStatesStatics* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapStyleSheetEntryStatesStatics* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapStyleSheetEntryStatesStatics* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* get_Disabled)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapStyleSheetEntryStatesStatics* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_Hover)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapStyleSheetEntryStatesStatics* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_Selected)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapStyleSheetEntryStatesStatics* This,
        HSTRING* value);

    END_INTERFACE
} __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapStyleSheetEntryStatesStaticsVtbl;

interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapStyleSheetEntryStatesStatics
{
    CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapStyleSheetEntryStatesStaticsVtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapStyleSheetEntryStatesStatics_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapStyleSheetEntryStatesStatics_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapStyleSheetEntryStatesStatics_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapStyleSheetEntryStatesStatics_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapStyleSheetEntryStatesStatics_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapStyleSheetEntryStatesStatics_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapStyleSheetEntryStatesStatics_get_Disabled(This, value) \
    ((This)->lpVtbl->get_Disabled(This, value))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapStyleSheetEntryStatesStatics_get_Hover(This, value) \
    ((This)->lpVtbl->get_Hover(This, value))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapStyleSheetEntryStatesStatics_get_Selected(This, value) \
    ((This)->lpVtbl->get_Selected(This, value))

#endif /* COBJMACROS */

EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapStyleSheetEntryStatesStatics;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapStyleSheetEntryStatesStatics_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x50000

/*
 *
 * Interface Windows.UI.Xaml.Controls.Maps.IMapStyleSheetStatics
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 4.0
 *
 * Interface is a part of the implementation of type Windows.UI.Xaml.Controls.Maps.MapStyleSheet
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x40000
#if !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapStyleSheetStatics_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapStyleSheetStatics_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_UI_Xaml_Controls_Maps_IMapStyleSheetStatics[] = L"Windows.UI.Xaml.Controls.Maps.IMapStyleSheetStatics";
typedef struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapStyleSheetStaticsVtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapStyleSheetStatics* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapStyleSheetStatics* This);
    ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapStyleSheetStatics* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapStyleSheetStatics* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapStyleSheetStatics* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapStyleSheetStatics* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* Aerial)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapStyleSheetStatics* This,
        __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapStyleSheet** result);
    HRESULT (STDMETHODCALLTYPE* AerialWithOverlay)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapStyleSheetStatics* This,
        __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapStyleSheet** result);
    HRESULT (STDMETHODCALLTYPE* RoadLight)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapStyleSheetStatics* This,
        __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapStyleSheet** result);
    HRESULT (STDMETHODCALLTYPE* RoadDark)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapStyleSheetStatics* This,
        __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapStyleSheet** result);
    HRESULT (STDMETHODCALLTYPE* RoadHighContrastLight)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapStyleSheetStatics* This,
        __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapStyleSheet** result);
    HRESULT (STDMETHODCALLTYPE* RoadHighContrastDark)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapStyleSheetStatics* This,
        __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapStyleSheet** result);
    HRESULT (STDMETHODCALLTYPE* Combine)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapStyleSheetStatics* This,
        __FIIterable_1_Windows__CUI__CXaml__CControls__CMaps__CMapStyleSheet* styleSheets,
        __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapStyleSheet** result);
    HRESULT (STDMETHODCALLTYPE* ParseFromJson)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapStyleSheetStatics* This,
        HSTRING styleAsJson,
        __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapStyleSheet** result);
    HRESULT (STDMETHODCALLTYPE* TryParseFromJson)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapStyleSheetStatics* This,
        HSTRING styleAsJson,
        __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapStyleSheet** styleSheet,
        boolean* returnValue);

    END_INTERFACE
} __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapStyleSheetStaticsVtbl;

interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapStyleSheetStatics
{
    CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapStyleSheetStaticsVtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapStyleSheetStatics_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapStyleSheetStatics_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapStyleSheetStatics_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapStyleSheetStatics_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapStyleSheetStatics_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapStyleSheetStatics_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapStyleSheetStatics_Aerial(This, result) \
    ((This)->lpVtbl->Aerial(This, result))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapStyleSheetStatics_AerialWithOverlay(This, result) \
    ((This)->lpVtbl->AerialWithOverlay(This, result))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapStyleSheetStatics_RoadLight(This, result) \
    ((This)->lpVtbl->RoadLight(This, result))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapStyleSheetStatics_RoadDark(This, result) \
    ((This)->lpVtbl->RoadDark(This, result))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapStyleSheetStatics_RoadHighContrastLight(This, result) \
    ((This)->lpVtbl->RoadHighContrastLight(This, result))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapStyleSheetStatics_RoadHighContrastDark(This, result) \
    ((This)->lpVtbl->RoadHighContrastDark(This, result))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapStyleSheetStatics_Combine(This, styleSheets, result) \
    ((This)->lpVtbl->Combine(This, styleSheets, result))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapStyleSheetStatics_ParseFromJson(This, styleAsJson, result) \
    ((This)->lpVtbl->ParseFromJson(This, styleAsJson, result))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapStyleSheetStatics_TryParseFromJson(This, styleAsJson, styleSheet, returnValue) \
    ((This)->lpVtbl->TryParseFromJson(This, styleAsJson, styleSheet, returnValue))

#endif /* COBJMACROS */

EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapStyleSheetStatics;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapStyleSheetStatics_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x40000

/*
 *
 * Interface Windows.UI.Xaml.Controls.Maps.IMapTargetCameraChangedEventArgs
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Interface is a part of the implementation of type Windows.UI.Xaml.Controls.Maps.MapTargetCameraChangedEventArgs
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTargetCameraChangedEventArgs_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTargetCameraChangedEventArgs_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_UI_Xaml_Controls_Maps_IMapTargetCameraChangedEventArgs[] = L"Windows.UI.Xaml.Controls.Maps.IMapTargetCameraChangedEventArgs";
typedef struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTargetCameraChangedEventArgsVtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTargetCameraChangedEventArgs* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTargetCameraChangedEventArgs* This);
    ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTargetCameraChangedEventArgs* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTargetCameraChangedEventArgs* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTargetCameraChangedEventArgs* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTargetCameraChangedEventArgs* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* get_Camera)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTargetCameraChangedEventArgs* This,
        __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapCamera** value);

    END_INTERFACE
} __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTargetCameraChangedEventArgsVtbl;

interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTargetCameraChangedEventArgs
{
    CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTargetCameraChangedEventArgsVtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTargetCameraChangedEventArgs_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTargetCameraChangedEventArgs_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTargetCameraChangedEventArgs_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTargetCameraChangedEventArgs_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTargetCameraChangedEventArgs_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTargetCameraChangedEventArgs_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTargetCameraChangedEventArgs_get_Camera(This, value) \
    ((This)->lpVtbl->get_Camera(This, value))

#endif /* COBJMACROS */

EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTargetCameraChangedEventArgs;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTargetCameraChangedEventArgs_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Interface Windows.UI.Xaml.Controls.Maps.IMapTargetCameraChangedEventArgs2
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 2.0
 *
 * Interface is a part of the implementation of type Windows.UI.Xaml.Controls.Maps.MapTargetCameraChangedEventArgs
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x20000
#if !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTargetCameraChangedEventArgs2_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTargetCameraChangedEventArgs2_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_UI_Xaml_Controls_Maps_IMapTargetCameraChangedEventArgs2[] = L"Windows.UI.Xaml.Controls.Maps.IMapTargetCameraChangedEventArgs2";
typedef struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTargetCameraChangedEventArgs2Vtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTargetCameraChangedEventArgs2* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTargetCameraChangedEventArgs2* This);
    ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTargetCameraChangedEventArgs2* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTargetCameraChangedEventArgs2* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTargetCameraChangedEventArgs2* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTargetCameraChangedEventArgs2* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* get_ChangeReason)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTargetCameraChangedEventArgs2* This,
        enum __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CMapCameraChangeReason* value);

    END_INTERFACE
} __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTargetCameraChangedEventArgs2Vtbl;

interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTargetCameraChangedEventArgs2
{
    CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTargetCameraChangedEventArgs2Vtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTargetCameraChangedEventArgs2_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTargetCameraChangedEventArgs2_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTargetCameraChangedEventArgs2_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTargetCameraChangedEventArgs2_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTargetCameraChangedEventArgs2_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTargetCameraChangedEventArgs2_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTargetCameraChangedEventArgs2_get_ChangeReason(This, value) \
    ((This)->lpVtbl->get_ChangeReason(This, value))

#endif /* COBJMACROS */

EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTargetCameraChangedEventArgs2;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTargetCameraChangedEventArgs2_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x20000

/*
 *
 * Interface Windows.UI.Xaml.Controls.Maps.IMapTileBitmapRequest
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Interface is a part of the implementation of type Windows.UI.Xaml.Controls.Maps.MapTileBitmapRequest
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileBitmapRequest_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileBitmapRequest_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_UI_Xaml_Controls_Maps_IMapTileBitmapRequest[] = L"Windows.UI.Xaml.Controls.Maps.IMapTileBitmapRequest";
typedef struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileBitmapRequestVtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileBitmapRequest* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileBitmapRequest* This);
    ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileBitmapRequest* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileBitmapRequest* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileBitmapRequest* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileBitmapRequest* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* get_PixelData)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileBitmapRequest* This,
        __x_ABI_CWindows_CStorage_CStreams_CIRandomAccessStreamReference** value);
    HRESULT (STDMETHODCALLTYPE* put_PixelData)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileBitmapRequest* This,
        __x_ABI_CWindows_CStorage_CStreams_CIRandomAccessStreamReference* value);
    HRESULT (STDMETHODCALLTYPE* GetDeferral)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileBitmapRequest* This,
        __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileBitmapRequestDeferral** result);

    END_INTERFACE
} __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileBitmapRequestVtbl;

interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileBitmapRequest
{
    CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileBitmapRequestVtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileBitmapRequest_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileBitmapRequest_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileBitmapRequest_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileBitmapRequest_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileBitmapRequest_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileBitmapRequest_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileBitmapRequest_get_PixelData(This, value) \
    ((This)->lpVtbl->get_PixelData(This, value))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileBitmapRequest_put_PixelData(This, value) \
    ((This)->lpVtbl->put_PixelData(This, value))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileBitmapRequest_GetDeferral(This, result) \
    ((This)->lpVtbl->GetDeferral(This, result))

#endif /* COBJMACROS */

EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileBitmapRequest;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileBitmapRequest_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Interface Windows.UI.Xaml.Controls.Maps.IMapTileBitmapRequestDeferral
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Interface is a part of the implementation of type Windows.UI.Xaml.Controls.Maps.MapTileBitmapRequestDeferral
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileBitmapRequestDeferral_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileBitmapRequestDeferral_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_UI_Xaml_Controls_Maps_IMapTileBitmapRequestDeferral[] = L"Windows.UI.Xaml.Controls.Maps.IMapTileBitmapRequestDeferral";
typedef struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileBitmapRequestDeferralVtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileBitmapRequestDeferral* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileBitmapRequestDeferral* This);
    ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileBitmapRequestDeferral* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileBitmapRequestDeferral* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileBitmapRequestDeferral* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileBitmapRequestDeferral* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* Complete)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileBitmapRequestDeferral* This);

    END_INTERFACE
} __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileBitmapRequestDeferralVtbl;

interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileBitmapRequestDeferral
{
    CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileBitmapRequestDeferralVtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileBitmapRequestDeferral_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileBitmapRequestDeferral_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileBitmapRequestDeferral_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileBitmapRequestDeferral_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileBitmapRequestDeferral_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileBitmapRequestDeferral_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileBitmapRequestDeferral_Complete(This) \
    ((This)->lpVtbl->Complete(This))

#endif /* COBJMACROS */

EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileBitmapRequestDeferral;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileBitmapRequestDeferral_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Interface Windows.UI.Xaml.Controls.Maps.IMapTileBitmapRequestedEventArgs
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Interface is a part of the implementation of type Windows.UI.Xaml.Controls.Maps.MapTileBitmapRequestedEventArgs
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileBitmapRequestedEventArgs_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileBitmapRequestedEventArgs_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_UI_Xaml_Controls_Maps_IMapTileBitmapRequestedEventArgs[] = L"Windows.UI.Xaml.Controls.Maps.IMapTileBitmapRequestedEventArgs";
typedef struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileBitmapRequestedEventArgsVtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileBitmapRequestedEventArgs* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileBitmapRequestedEventArgs* This);
    ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileBitmapRequestedEventArgs* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileBitmapRequestedEventArgs* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileBitmapRequestedEventArgs* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileBitmapRequestedEventArgs* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* get_X)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileBitmapRequestedEventArgs* This,
        INT32* value);
    HRESULT (STDMETHODCALLTYPE* get_Y)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileBitmapRequestedEventArgs* This,
        INT32* value);
    HRESULT (STDMETHODCALLTYPE* get_ZoomLevel)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileBitmapRequestedEventArgs* This,
        INT32* value);
    HRESULT (STDMETHODCALLTYPE* get_Request)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileBitmapRequestedEventArgs* This,
        __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileBitmapRequest** value);

    END_INTERFACE
} __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileBitmapRequestedEventArgsVtbl;

interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileBitmapRequestedEventArgs
{
    CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileBitmapRequestedEventArgsVtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileBitmapRequestedEventArgs_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileBitmapRequestedEventArgs_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileBitmapRequestedEventArgs_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileBitmapRequestedEventArgs_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileBitmapRequestedEventArgs_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileBitmapRequestedEventArgs_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileBitmapRequestedEventArgs_get_X(This, value) \
    ((This)->lpVtbl->get_X(This, value))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileBitmapRequestedEventArgs_get_Y(This, value) \
    ((This)->lpVtbl->get_Y(This, value))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileBitmapRequestedEventArgs_get_ZoomLevel(This, value) \
    ((This)->lpVtbl->get_ZoomLevel(This, value))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileBitmapRequestedEventArgs_get_Request(This, value) \
    ((This)->lpVtbl->get_Request(This, value))

#endif /* COBJMACROS */

EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileBitmapRequestedEventArgs;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileBitmapRequestedEventArgs_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Interface Windows.UI.Xaml.Controls.Maps.IMapTileBitmapRequestedEventArgs2
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 7.0
 *
 * Interface is a part of the implementation of type Windows.UI.Xaml.Controls.Maps.MapTileBitmapRequestedEventArgs
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x70000
#if !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileBitmapRequestedEventArgs2_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileBitmapRequestedEventArgs2_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_UI_Xaml_Controls_Maps_IMapTileBitmapRequestedEventArgs2[] = L"Windows.UI.Xaml.Controls.Maps.IMapTileBitmapRequestedEventArgs2";
typedef struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileBitmapRequestedEventArgs2Vtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileBitmapRequestedEventArgs2* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileBitmapRequestedEventArgs2* This);
    ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileBitmapRequestedEventArgs2* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileBitmapRequestedEventArgs2* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileBitmapRequestedEventArgs2* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileBitmapRequestedEventArgs2* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* get_FrameIndex)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileBitmapRequestedEventArgs2* This,
        INT32* value);

    END_INTERFACE
} __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileBitmapRequestedEventArgs2Vtbl;

interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileBitmapRequestedEventArgs2
{
    CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileBitmapRequestedEventArgs2Vtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileBitmapRequestedEventArgs2_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileBitmapRequestedEventArgs2_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileBitmapRequestedEventArgs2_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileBitmapRequestedEventArgs2_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileBitmapRequestedEventArgs2_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileBitmapRequestedEventArgs2_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileBitmapRequestedEventArgs2_get_FrameIndex(This, value) \
    ((This)->lpVtbl->get_FrameIndex(This, value))

#endif /* COBJMACROS */

EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileBitmapRequestedEventArgs2;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileBitmapRequestedEventArgs2_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x70000

/*
 *
 * Interface Windows.UI.Xaml.Controls.Maps.IMapTileDataSource
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Interface is a part of the implementation of type Windows.UI.Xaml.Controls.Maps.MapTileDataSource
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileDataSource_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileDataSource_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_UI_Xaml_Controls_Maps_IMapTileDataSource[] = L"Windows.UI.Xaml.Controls.Maps.IMapTileDataSource";
typedef struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileDataSourceVtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileDataSource* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileDataSource* This);
    ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileDataSource* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileDataSource* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileDataSource* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileDataSource* This,
        TrustLevel* trustLevel);

    END_INTERFACE
} __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileDataSourceVtbl;

interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileDataSource
{
    CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileDataSourceVtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileDataSource_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileDataSource_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileDataSource_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileDataSource_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileDataSource_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileDataSource_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#endif /* COBJMACROS */

EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileDataSource;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileDataSource_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Interface Windows.UI.Xaml.Controls.Maps.IMapTileDataSourceFactory
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Interface is a part of the implementation of type Windows.UI.Xaml.Controls.Maps.MapTileDataSource
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileDataSourceFactory_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileDataSourceFactory_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_UI_Xaml_Controls_Maps_IMapTileDataSourceFactory[] = L"Windows.UI.Xaml.Controls.Maps.IMapTileDataSourceFactory";
typedef struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileDataSourceFactoryVtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileDataSourceFactory* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileDataSourceFactory* This);
    ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileDataSourceFactory* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileDataSourceFactory* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileDataSourceFactory* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileDataSourceFactory* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* CreateInstance)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileDataSourceFactory* This,
        IInspectable* baseInterface,
        IInspectable** innerInterface,
        __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileDataSource** value);

    END_INTERFACE
} __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileDataSourceFactoryVtbl;

interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileDataSourceFactory
{
    CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileDataSourceFactoryVtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileDataSourceFactory_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileDataSourceFactory_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileDataSourceFactory_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileDataSourceFactory_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileDataSourceFactory_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileDataSourceFactory_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileDataSourceFactory_CreateInstance(This, baseInterface, innerInterface, value) \
    ((This)->lpVtbl->CreateInstance(This, baseInterface, innerInterface, value))

#endif /* COBJMACROS */

EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileDataSourceFactory;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileDataSourceFactory_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Interface Windows.UI.Xaml.Controls.Maps.IMapTileSource
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Interface is a part of the implementation of type Windows.UI.Xaml.Controls.Maps.MapTileSource
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSource_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSource_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_UI_Xaml_Controls_Maps_IMapTileSource[] = L"Windows.UI.Xaml.Controls.Maps.IMapTileSource";
typedef struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSourceVtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSource* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSource* This);
    ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSource* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSource* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSource* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSource* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* get_DataSource)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSource* This,
        __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileDataSource** value);
    HRESULT (STDMETHODCALLTYPE* put_DataSource)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSource* This,
        __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileDataSource* value);
    HRESULT (STDMETHODCALLTYPE* get_Layer)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSource* This,
        enum __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CMapTileLayer* value);
    HRESULT (STDMETHODCALLTYPE* put_Layer)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSource* This,
        enum __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CMapTileLayer value);
    HRESULT (STDMETHODCALLTYPE* get_ZoomLevelRange)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSource* This,
        struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CMapZoomLevelRange* value);
    HRESULT (STDMETHODCALLTYPE* put_ZoomLevelRange)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSource* This,
        struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CMapZoomLevelRange value);
    HRESULT (STDMETHODCALLTYPE* get_Bounds)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSource* This,
        __x_ABI_CWindows_CDevices_CGeolocation_CIGeoboundingBox** value);
    HRESULT (STDMETHODCALLTYPE* put_Bounds)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSource* This,
        __x_ABI_CWindows_CDevices_CGeolocation_CIGeoboundingBox* value);
    HRESULT (STDMETHODCALLTYPE* get_AllowOverstretch)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSource* This,
        boolean* value);
    HRESULT (STDMETHODCALLTYPE* put_AllowOverstretch)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSource* This,
        boolean value);
    HRESULT (STDMETHODCALLTYPE* get_IsFadingEnabled)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSource* This,
        boolean* value);
    HRESULT (STDMETHODCALLTYPE* put_IsFadingEnabled)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSource* This,
        boolean value);
    HRESULT (STDMETHODCALLTYPE* get_IsTransparencyEnabled)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSource* This,
        boolean* value);
    HRESULT (STDMETHODCALLTYPE* put_IsTransparencyEnabled)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSource* This,
        boolean value);
    HRESULT (STDMETHODCALLTYPE* get_IsRetryEnabled)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSource* This,
        boolean* value);
    HRESULT (STDMETHODCALLTYPE* put_IsRetryEnabled)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSource* This,
        boolean value);
    HRESULT (STDMETHODCALLTYPE* get_ZIndex)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSource* This,
        INT32* value);
    HRESULT (STDMETHODCALLTYPE* put_ZIndex)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSource* This,
        INT32 value);
    HRESULT (STDMETHODCALLTYPE* get_TilePixelSize)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSource* This,
        INT32* value);
    HRESULT (STDMETHODCALLTYPE* put_TilePixelSize)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSource* This,
        INT32 value);
    HRESULT (STDMETHODCALLTYPE* get_Visible)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSource* This,
        boolean* value);
    HRESULT (STDMETHODCALLTYPE* put_Visible)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSource* This,
        boolean value);

    END_INTERFACE
} __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSourceVtbl;

interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSource
{
    CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSourceVtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSource_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSource_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSource_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSource_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSource_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSource_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSource_get_DataSource(This, value) \
    ((This)->lpVtbl->get_DataSource(This, value))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSource_put_DataSource(This, value) \
    ((This)->lpVtbl->put_DataSource(This, value))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSource_get_Layer(This, value) \
    ((This)->lpVtbl->get_Layer(This, value))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSource_put_Layer(This, value) \
    ((This)->lpVtbl->put_Layer(This, value))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSource_get_ZoomLevelRange(This, value) \
    ((This)->lpVtbl->get_ZoomLevelRange(This, value))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSource_put_ZoomLevelRange(This, value) \
    ((This)->lpVtbl->put_ZoomLevelRange(This, value))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSource_get_Bounds(This, value) \
    ((This)->lpVtbl->get_Bounds(This, value))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSource_put_Bounds(This, value) \
    ((This)->lpVtbl->put_Bounds(This, value))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSource_get_AllowOverstretch(This, value) \
    ((This)->lpVtbl->get_AllowOverstretch(This, value))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSource_put_AllowOverstretch(This, value) \
    ((This)->lpVtbl->put_AllowOverstretch(This, value))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSource_get_IsFadingEnabled(This, value) \
    ((This)->lpVtbl->get_IsFadingEnabled(This, value))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSource_put_IsFadingEnabled(This, value) \
    ((This)->lpVtbl->put_IsFadingEnabled(This, value))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSource_get_IsTransparencyEnabled(This, value) \
    ((This)->lpVtbl->get_IsTransparencyEnabled(This, value))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSource_put_IsTransparencyEnabled(This, value) \
    ((This)->lpVtbl->put_IsTransparencyEnabled(This, value))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSource_get_IsRetryEnabled(This, value) \
    ((This)->lpVtbl->get_IsRetryEnabled(This, value))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSource_put_IsRetryEnabled(This, value) \
    ((This)->lpVtbl->put_IsRetryEnabled(This, value))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSource_get_ZIndex(This, value) \
    ((This)->lpVtbl->get_ZIndex(This, value))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSource_put_ZIndex(This, value) \
    ((This)->lpVtbl->put_ZIndex(This, value))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSource_get_TilePixelSize(This, value) \
    ((This)->lpVtbl->get_TilePixelSize(This, value))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSource_put_TilePixelSize(This, value) \
    ((This)->lpVtbl->put_TilePixelSize(This, value))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSource_get_Visible(This, value) \
    ((This)->lpVtbl->get_Visible(This, value))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSource_put_Visible(This, value) \
    ((This)->lpVtbl->put_Visible(This, value))

#endif /* COBJMACROS */

EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSource;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSource_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Interface Windows.UI.Xaml.Controls.Maps.IMapTileSource2
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 7.0
 *
 * Interface is a part of the implementation of type Windows.UI.Xaml.Controls.Maps.MapTileSource
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x70000
#if !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSource2_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSource2_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_UI_Xaml_Controls_Maps_IMapTileSource2[] = L"Windows.UI.Xaml.Controls.Maps.IMapTileSource2";
typedef struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSource2Vtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSource2* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSource2* This);
    ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSource2* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSource2* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSource2* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSource2* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* get_AnimationState)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSource2* This,
        enum __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CMapTileAnimationState* value);
    HRESULT (STDMETHODCALLTYPE* get_AutoPlay)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSource2* This,
        boolean* value);
    HRESULT (STDMETHODCALLTYPE* put_AutoPlay)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSource2* This,
        boolean value);
    HRESULT (STDMETHODCALLTYPE* get_FrameCount)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSource2* This,
        INT32* value);
    HRESULT (STDMETHODCALLTYPE* put_FrameCount)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSource2* This,
        INT32 value);
    HRESULT (STDMETHODCALLTYPE* get_FrameDuration)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSource2* This,
        struct __x_ABI_CWindows_CFoundation_CTimeSpan* value);
    HRESULT (STDMETHODCALLTYPE* put_FrameDuration)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSource2* This,
        struct __x_ABI_CWindows_CFoundation_CTimeSpan value);
    HRESULT (STDMETHODCALLTYPE* Pause)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSource2* This);
    HRESULT (STDMETHODCALLTYPE* Play)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSource2* This);
    HRESULT (STDMETHODCALLTYPE* Stop)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSource2* This);

    END_INTERFACE
} __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSource2Vtbl;

interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSource2
{
    CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSource2Vtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSource2_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSource2_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSource2_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSource2_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSource2_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSource2_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSource2_get_AnimationState(This, value) \
    ((This)->lpVtbl->get_AnimationState(This, value))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSource2_get_AutoPlay(This, value) \
    ((This)->lpVtbl->get_AutoPlay(This, value))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSource2_put_AutoPlay(This, value) \
    ((This)->lpVtbl->put_AutoPlay(This, value))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSource2_get_FrameCount(This, value) \
    ((This)->lpVtbl->get_FrameCount(This, value))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSource2_put_FrameCount(This, value) \
    ((This)->lpVtbl->put_FrameCount(This, value))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSource2_get_FrameDuration(This, value) \
    ((This)->lpVtbl->get_FrameDuration(This, value))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSource2_put_FrameDuration(This, value) \
    ((This)->lpVtbl->put_FrameDuration(This, value))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSource2_Pause(This) \
    ((This)->lpVtbl->Pause(This))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSource2_Play(This) \
    ((This)->lpVtbl->Play(This))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSource2_Stop(This) \
    ((This)->lpVtbl->Stop(This))

#endif /* COBJMACROS */

EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSource2;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSource2_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x70000

/*
 *
 * Interface Windows.UI.Xaml.Controls.Maps.IMapTileSourceFactory
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Interface is a part of the implementation of type Windows.UI.Xaml.Controls.Maps.MapTileSource
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSourceFactory_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSourceFactory_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_UI_Xaml_Controls_Maps_IMapTileSourceFactory[] = L"Windows.UI.Xaml.Controls.Maps.IMapTileSourceFactory";
typedef struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSourceFactoryVtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSourceFactory* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSourceFactory* This);
    ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSourceFactory* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSourceFactory* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSourceFactory* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSourceFactory* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* CreateInstance)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSourceFactory* This,
        IInspectable* baseInterface,
        IInspectable** innerInterface,
        __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSource** value);
    HRESULT (STDMETHODCALLTYPE* CreateInstanceWithDataSource)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSourceFactory* This,
        __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileDataSource* dataSource,
        IInspectable* baseInterface,
        IInspectable** innerInterface,
        __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSource** value);
    HRESULT (STDMETHODCALLTYPE* CreateInstanceWithDataSourceAndZoomRange)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSourceFactory* This,
        __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileDataSource* dataSource,
        struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CMapZoomLevelRange zoomLevelRange,
        IInspectable* baseInterface,
        IInspectable** innerInterface,
        __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSource** value);
    HRESULT (STDMETHODCALLTYPE* CreateInstanceWithDataSourceZoomRangeAndBounds)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSourceFactory* This,
        __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileDataSource* dataSource,
        struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CMapZoomLevelRange zoomLevelRange,
        __x_ABI_CWindows_CDevices_CGeolocation_CIGeoboundingBox* bounds,
        IInspectable* baseInterface,
        IInspectable** innerInterface,
        __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSource** value);
    HRESULT (STDMETHODCALLTYPE* CreateInstanceWithDataSourceZoomRangeBoundsAndTileSize)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSourceFactory* This,
        __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileDataSource* dataSource,
        struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CMapZoomLevelRange zoomLevelRange,
        __x_ABI_CWindows_CDevices_CGeolocation_CIGeoboundingBox* bounds,
        INT32 tileSizeInPixels,
        IInspectable* baseInterface,
        IInspectable** innerInterface,
        __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSource** value);

    END_INTERFACE
} __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSourceFactoryVtbl;

interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSourceFactory
{
    CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSourceFactoryVtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSourceFactory_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSourceFactory_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSourceFactory_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSourceFactory_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSourceFactory_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSourceFactory_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSourceFactory_CreateInstance(This, baseInterface, innerInterface, value) \
    ((This)->lpVtbl->CreateInstance(This, baseInterface, innerInterface, value))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSourceFactory_CreateInstanceWithDataSource(This, dataSource, baseInterface, innerInterface, value) \
    ((This)->lpVtbl->CreateInstanceWithDataSource(This, dataSource, baseInterface, innerInterface, value))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSourceFactory_CreateInstanceWithDataSourceAndZoomRange(This, dataSource, zoomLevelRange, baseInterface, innerInterface, value) \
    ((This)->lpVtbl->CreateInstanceWithDataSourceAndZoomRange(This, dataSource, zoomLevelRange, baseInterface, innerInterface, value))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSourceFactory_CreateInstanceWithDataSourceZoomRangeAndBounds(This, dataSource, zoomLevelRange, bounds, baseInterface, innerInterface, value) \
    ((This)->lpVtbl->CreateInstanceWithDataSourceZoomRangeAndBounds(This, dataSource, zoomLevelRange, bounds, baseInterface, innerInterface, value))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSourceFactory_CreateInstanceWithDataSourceZoomRangeBoundsAndTileSize(This, dataSource, zoomLevelRange, bounds, tileSizeInPixels, baseInterface, innerInterface, value) \
    ((This)->lpVtbl->CreateInstanceWithDataSourceZoomRangeBoundsAndTileSize(This, dataSource, zoomLevelRange, bounds, tileSizeInPixels, baseInterface, innerInterface, value))

#endif /* COBJMACROS */

EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSourceFactory;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSourceFactory_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Interface Windows.UI.Xaml.Controls.Maps.IMapTileSourceStatics
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Interface is a part of the implementation of type Windows.UI.Xaml.Controls.Maps.MapTileSource
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSourceStatics_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSourceStatics_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_UI_Xaml_Controls_Maps_IMapTileSourceStatics[] = L"Windows.UI.Xaml.Controls.Maps.IMapTileSourceStatics";
typedef struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSourceStaticsVtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSourceStatics* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSourceStatics* This);
    ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSourceStatics* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSourceStatics* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSourceStatics* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSourceStatics* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* get_DataSourceProperty)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSourceStatics* This,
        __x_ABI_CWindows_CUI_CXaml_CIDependencyProperty** value);
    HRESULT (STDMETHODCALLTYPE* get_LayerProperty)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSourceStatics* This,
        __x_ABI_CWindows_CUI_CXaml_CIDependencyProperty** value);
    HRESULT (STDMETHODCALLTYPE* get_ZoomLevelRangeProperty)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSourceStatics* This,
        __x_ABI_CWindows_CUI_CXaml_CIDependencyProperty** value);
    HRESULT (STDMETHODCALLTYPE* get_BoundsProperty)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSourceStatics* This,
        __x_ABI_CWindows_CUI_CXaml_CIDependencyProperty** value);
    HRESULT (STDMETHODCALLTYPE* get_AllowOverstretchProperty)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSourceStatics* This,
        __x_ABI_CWindows_CUI_CXaml_CIDependencyProperty** value);
    HRESULT (STDMETHODCALLTYPE* get_IsFadingEnabledProperty)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSourceStatics* This,
        __x_ABI_CWindows_CUI_CXaml_CIDependencyProperty** value);
    HRESULT (STDMETHODCALLTYPE* get_IsTransparencyEnabledProperty)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSourceStatics* This,
        __x_ABI_CWindows_CUI_CXaml_CIDependencyProperty** value);
    HRESULT (STDMETHODCALLTYPE* get_IsRetryEnabledProperty)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSourceStatics* This,
        __x_ABI_CWindows_CUI_CXaml_CIDependencyProperty** value);
    HRESULT (STDMETHODCALLTYPE* get_ZIndexProperty)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSourceStatics* This,
        __x_ABI_CWindows_CUI_CXaml_CIDependencyProperty** value);
    HRESULT (STDMETHODCALLTYPE* get_TilePixelSizeProperty)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSourceStatics* This,
        __x_ABI_CWindows_CUI_CXaml_CIDependencyProperty** value);
    HRESULT (STDMETHODCALLTYPE* get_VisibleProperty)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSourceStatics* This,
        __x_ABI_CWindows_CUI_CXaml_CIDependencyProperty** value);

    END_INTERFACE
} __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSourceStaticsVtbl;

interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSourceStatics
{
    CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSourceStaticsVtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSourceStatics_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSourceStatics_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSourceStatics_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSourceStatics_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSourceStatics_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSourceStatics_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSourceStatics_get_DataSourceProperty(This, value) \
    ((This)->lpVtbl->get_DataSourceProperty(This, value))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSourceStatics_get_LayerProperty(This, value) \
    ((This)->lpVtbl->get_LayerProperty(This, value))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSourceStatics_get_ZoomLevelRangeProperty(This, value) \
    ((This)->lpVtbl->get_ZoomLevelRangeProperty(This, value))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSourceStatics_get_BoundsProperty(This, value) \
    ((This)->lpVtbl->get_BoundsProperty(This, value))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSourceStatics_get_AllowOverstretchProperty(This, value) \
    ((This)->lpVtbl->get_AllowOverstretchProperty(This, value))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSourceStatics_get_IsFadingEnabledProperty(This, value) \
    ((This)->lpVtbl->get_IsFadingEnabledProperty(This, value))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSourceStatics_get_IsTransparencyEnabledProperty(This, value) \
    ((This)->lpVtbl->get_IsTransparencyEnabledProperty(This, value))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSourceStatics_get_IsRetryEnabledProperty(This, value) \
    ((This)->lpVtbl->get_IsRetryEnabledProperty(This, value))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSourceStatics_get_ZIndexProperty(This, value) \
    ((This)->lpVtbl->get_ZIndexProperty(This, value))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSourceStatics_get_TilePixelSizeProperty(This, value) \
    ((This)->lpVtbl->get_TilePixelSizeProperty(This, value))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSourceStatics_get_VisibleProperty(This, value) \
    ((This)->lpVtbl->get_VisibleProperty(This, value))

#endif /* COBJMACROS */

EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSourceStatics;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSourceStatics_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Interface Windows.UI.Xaml.Controls.Maps.IMapTileSourceStatics2
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 7.0
 *
 * Interface is a part of the implementation of type Windows.UI.Xaml.Controls.Maps.MapTileSource
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x70000
#if !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSourceStatics2_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSourceStatics2_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_UI_Xaml_Controls_Maps_IMapTileSourceStatics2[] = L"Windows.UI.Xaml.Controls.Maps.IMapTileSourceStatics2";
typedef struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSourceStatics2Vtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSourceStatics2* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSourceStatics2* This);
    ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSourceStatics2* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSourceStatics2* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSourceStatics2* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSourceStatics2* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* get_AnimationStateProperty)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSourceStatics2* This,
        __x_ABI_CWindows_CUI_CXaml_CIDependencyProperty** value);
    HRESULT (STDMETHODCALLTYPE* get_AutoPlayProperty)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSourceStatics2* This,
        __x_ABI_CWindows_CUI_CXaml_CIDependencyProperty** value);
    HRESULT (STDMETHODCALLTYPE* get_FrameCountProperty)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSourceStatics2* This,
        __x_ABI_CWindows_CUI_CXaml_CIDependencyProperty** value);
    HRESULT (STDMETHODCALLTYPE* get_FrameDurationProperty)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSourceStatics2* This,
        __x_ABI_CWindows_CUI_CXaml_CIDependencyProperty** value);

    END_INTERFACE
} __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSourceStatics2Vtbl;

interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSourceStatics2
{
    CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSourceStatics2Vtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSourceStatics2_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSourceStatics2_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSourceStatics2_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSourceStatics2_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSourceStatics2_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSourceStatics2_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSourceStatics2_get_AnimationStateProperty(This, value) \
    ((This)->lpVtbl->get_AnimationStateProperty(This, value))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSourceStatics2_get_AutoPlayProperty(This, value) \
    ((This)->lpVtbl->get_AutoPlayProperty(This, value))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSourceStatics2_get_FrameCountProperty(This, value) \
    ((This)->lpVtbl->get_FrameCountProperty(This, value))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSourceStatics2_get_FrameDurationProperty(This, value) \
    ((This)->lpVtbl->get_FrameDurationProperty(This, value))

#endif /* COBJMACROS */

EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSourceStatics2;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileSourceStatics2_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x70000

/*
 *
 * Interface Windows.UI.Xaml.Controls.Maps.IMapTileUriRequest
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Interface is a part of the implementation of type Windows.UI.Xaml.Controls.Maps.MapTileUriRequest
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileUriRequest_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileUriRequest_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_UI_Xaml_Controls_Maps_IMapTileUriRequest[] = L"Windows.UI.Xaml.Controls.Maps.IMapTileUriRequest";
typedef struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileUriRequestVtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileUriRequest* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileUriRequest* This);
    ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileUriRequest* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileUriRequest* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileUriRequest* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileUriRequest* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* get_Uri)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileUriRequest* This,
        __x_ABI_CWindows_CFoundation_CIUriRuntimeClass** value);
    HRESULT (STDMETHODCALLTYPE* put_Uri)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileUriRequest* This,
        __x_ABI_CWindows_CFoundation_CIUriRuntimeClass* value);
    HRESULT (STDMETHODCALLTYPE* GetDeferral)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileUriRequest* This,
        __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileUriRequestDeferral** result);

    END_INTERFACE
} __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileUriRequestVtbl;

interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileUriRequest
{
    CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileUriRequestVtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileUriRequest_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileUriRequest_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileUriRequest_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileUriRequest_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileUriRequest_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileUriRequest_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileUriRequest_get_Uri(This, value) \
    ((This)->lpVtbl->get_Uri(This, value))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileUriRequest_put_Uri(This, value) \
    ((This)->lpVtbl->put_Uri(This, value))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileUriRequest_GetDeferral(This, result) \
    ((This)->lpVtbl->GetDeferral(This, result))

#endif /* COBJMACROS */

EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileUriRequest;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileUriRequest_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Interface Windows.UI.Xaml.Controls.Maps.IMapTileUriRequestDeferral
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Interface is a part of the implementation of type Windows.UI.Xaml.Controls.Maps.MapTileUriRequestDeferral
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileUriRequestDeferral_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileUriRequestDeferral_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_UI_Xaml_Controls_Maps_IMapTileUriRequestDeferral[] = L"Windows.UI.Xaml.Controls.Maps.IMapTileUriRequestDeferral";
typedef struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileUriRequestDeferralVtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileUriRequestDeferral* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileUriRequestDeferral* This);
    ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileUriRequestDeferral* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileUriRequestDeferral* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileUriRequestDeferral* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileUriRequestDeferral* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* Complete)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileUriRequestDeferral* This);

    END_INTERFACE
} __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileUriRequestDeferralVtbl;

interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileUriRequestDeferral
{
    CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileUriRequestDeferralVtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileUriRequestDeferral_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileUriRequestDeferral_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileUriRequestDeferral_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileUriRequestDeferral_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileUriRequestDeferral_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileUriRequestDeferral_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileUriRequestDeferral_Complete(This) \
    ((This)->lpVtbl->Complete(This))

#endif /* COBJMACROS */

EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileUriRequestDeferral;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileUriRequestDeferral_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Interface Windows.UI.Xaml.Controls.Maps.IMapTileUriRequestedEventArgs
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Interface is a part of the implementation of type Windows.UI.Xaml.Controls.Maps.MapTileUriRequestedEventArgs
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileUriRequestedEventArgs_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileUriRequestedEventArgs_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_UI_Xaml_Controls_Maps_IMapTileUriRequestedEventArgs[] = L"Windows.UI.Xaml.Controls.Maps.IMapTileUriRequestedEventArgs";
typedef struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileUriRequestedEventArgsVtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileUriRequestedEventArgs* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileUriRequestedEventArgs* This);
    ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileUriRequestedEventArgs* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileUriRequestedEventArgs* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileUriRequestedEventArgs* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileUriRequestedEventArgs* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* get_X)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileUriRequestedEventArgs* This,
        INT32* value);
    HRESULT (STDMETHODCALLTYPE* get_Y)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileUriRequestedEventArgs* This,
        INT32* value);
    HRESULT (STDMETHODCALLTYPE* get_ZoomLevel)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileUriRequestedEventArgs* This,
        INT32* value);
    HRESULT (STDMETHODCALLTYPE* get_Request)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileUriRequestedEventArgs* This,
        __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileUriRequest** value);

    END_INTERFACE
} __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileUriRequestedEventArgsVtbl;

interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileUriRequestedEventArgs
{
    CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileUriRequestedEventArgsVtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileUriRequestedEventArgs_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileUriRequestedEventArgs_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileUriRequestedEventArgs_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileUriRequestedEventArgs_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileUriRequestedEventArgs_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileUriRequestedEventArgs_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileUriRequestedEventArgs_get_X(This, value) \
    ((This)->lpVtbl->get_X(This, value))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileUriRequestedEventArgs_get_Y(This, value) \
    ((This)->lpVtbl->get_Y(This, value))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileUriRequestedEventArgs_get_ZoomLevel(This, value) \
    ((This)->lpVtbl->get_ZoomLevel(This, value))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileUriRequestedEventArgs_get_Request(This, value) \
    ((This)->lpVtbl->get_Request(This, value))

#endif /* COBJMACROS */

EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileUriRequestedEventArgs;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileUriRequestedEventArgs_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Interface Windows.UI.Xaml.Controls.Maps.IMapTileUriRequestedEventArgs2
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 7.0
 *
 * Interface is a part of the implementation of type Windows.UI.Xaml.Controls.Maps.MapTileUriRequestedEventArgs
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x70000
#if !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileUriRequestedEventArgs2_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileUriRequestedEventArgs2_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_UI_Xaml_Controls_Maps_IMapTileUriRequestedEventArgs2[] = L"Windows.UI.Xaml.Controls.Maps.IMapTileUriRequestedEventArgs2";
typedef struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileUriRequestedEventArgs2Vtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileUriRequestedEventArgs2* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileUriRequestedEventArgs2* This);
    ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileUriRequestedEventArgs2* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileUriRequestedEventArgs2* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileUriRequestedEventArgs2* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileUriRequestedEventArgs2* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* get_FrameIndex)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileUriRequestedEventArgs2* This,
        INT32* value);

    END_INTERFACE
} __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileUriRequestedEventArgs2Vtbl;

interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileUriRequestedEventArgs2
{
    CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileUriRequestedEventArgs2Vtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileUriRequestedEventArgs2_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileUriRequestedEventArgs2_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileUriRequestedEventArgs2_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileUriRequestedEventArgs2_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileUriRequestedEventArgs2_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileUriRequestedEventArgs2_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileUriRequestedEventArgs2_get_FrameIndex(This, value) \
    ((This)->lpVtbl->get_FrameIndex(This, value))

#endif /* COBJMACROS */

EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileUriRequestedEventArgs2;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIMapTileUriRequestedEventArgs2_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x70000

/*
 *
 * Interface Windows.UI.Xaml.Controls.Maps.IStreetsideExperience
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Interface is a part of the implementation of type Windows.UI.Xaml.Controls.Maps.StreetsideExperience
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIStreetsideExperience_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIStreetsideExperience_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_UI_Xaml_Controls_Maps_IStreetsideExperience[] = L"Windows.UI.Xaml.Controls.Maps.IStreetsideExperience";
typedef struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIStreetsideExperienceVtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIStreetsideExperience* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIStreetsideExperience* This);
    ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIStreetsideExperience* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIStreetsideExperience* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIStreetsideExperience* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIStreetsideExperience* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* get_AddressTextVisible)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIStreetsideExperience* This,
        boolean* value);
    HRESULT (STDMETHODCALLTYPE* put_AddressTextVisible)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIStreetsideExperience* This,
        boolean value);
    HRESULT (STDMETHODCALLTYPE* get_CursorVisible)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIStreetsideExperience* This,
        boolean* value);
    HRESULT (STDMETHODCALLTYPE* put_CursorVisible)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIStreetsideExperience* This,
        boolean value);
    HRESULT (STDMETHODCALLTYPE* get_OverviewMapVisible)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIStreetsideExperience* This,
        boolean* value);
    HRESULT (STDMETHODCALLTYPE* put_OverviewMapVisible)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIStreetsideExperience* This,
        boolean value);
    HRESULT (STDMETHODCALLTYPE* get_StreetLabelsVisible)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIStreetsideExperience* This,
        boolean* value);
    HRESULT (STDMETHODCALLTYPE* put_StreetLabelsVisible)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIStreetsideExperience* This,
        boolean value);
    HRESULT (STDMETHODCALLTYPE* get_ExitButtonVisible)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIStreetsideExperience* This,
        boolean* value);
    HRESULT (STDMETHODCALLTYPE* put_ExitButtonVisible)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIStreetsideExperience* This,
        boolean value);
    HRESULT (STDMETHODCALLTYPE* get_ZoomButtonsVisible)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIStreetsideExperience* This,
        boolean* value);
    HRESULT (STDMETHODCALLTYPE* put_ZoomButtonsVisible)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIStreetsideExperience* This,
        boolean value);

    END_INTERFACE
} __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIStreetsideExperienceVtbl;

interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIStreetsideExperience
{
    CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIStreetsideExperienceVtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIStreetsideExperience_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIStreetsideExperience_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIStreetsideExperience_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIStreetsideExperience_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIStreetsideExperience_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIStreetsideExperience_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIStreetsideExperience_get_AddressTextVisible(This, value) \
    ((This)->lpVtbl->get_AddressTextVisible(This, value))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIStreetsideExperience_put_AddressTextVisible(This, value) \
    ((This)->lpVtbl->put_AddressTextVisible(This, value))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIStreetsideExperience_get_CursorVisible(This, value) \
    ((This)->lpVtbl->get_CursorVisible(This, value))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIStreetsideExperience_put_CursorVisible(This, value) \
    ((This)->lpVtbl->put_CursorVisible(This, value))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIStreetsideExperience_get_OverviewMapVisible(This, value) \
    ((This)->lpVtbl->get_OverviewMapVisible(This, value))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIStreetsideExperience_put_OverviewMapVisible(This, value) \
    ((This)->lpVtbl->put_OverviewMapVisible(This, value))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIStreetsideExperience_get_StreetLabelsVisible(This, value) \
    ((This)->lpVtbl->get_StreetLabelsVisible(This, value))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIStreetsideExperience_put_StreetLabelsVisible(This, value) \
    ((This)->lpVtbl->put_StreetLabelsVisible(This, value))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIStreetsideExperience_get_ExitButtonVisible(This, value) \
    ((This)->lpVtbl->get_ExitButtonVisible(This, value))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIStreetsideExperience_put_ExitButtonVisible(This, value) \
    ((This)->lpVtbl->put_ExitButtonVisible(This, value))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIStreetsideExperience_get_ZoomButtonsVisible(This, value) \
    ((This)->lpVtbl->get_ZoomButtonsVisible(This, value))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIStreetsideExperience_put_ZoomButtonsVisible(This, value) \
    ((This)->lpVtbl->put_ZoomButtonsVisible(This, value))

#endif /* COBJMACROS */

EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIStreetsideExperience;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIStreetsideExperience_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Interface Windows.UI.Xaml.Controls.Maps.IStreetsideExperienceFactory
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Interface is a part of the implementation of type Windows.UI.Xaml.Controls.Maps.StreetsideExperience
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIStreetsideExperienceFactory_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIStreetsideExperienceFactory_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_UI_Xaml_Controls_Maps_IStreetsideExperienceFactory[] = L"Windows.UI.Xaml.Controls.Maps.IStreetsideExperienceFactory";
typedef struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIStreetsideExperienceFactoryVtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIStreetsideExperienceFactory* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIStreetsideExperienceFactory* This);
    ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIStreetsideExperienceFactory* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIStreetsideExperienceFactory* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIStreetsideExperienceFactory* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIStreetsideExperienceFactory* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* CreateInstanceWithPanorama)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIStreetsideExperienceFactory* This,
        __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIStreetsidePanorama* panorama,
        __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIStreetsideExperience** value);
    HRESULT (STDMETHODCALLTYPE* CreateInstanceWithPanoramaHeadingPitchAndFieldOfView)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIStreetsideExperienceFactory* This,
        __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIStreetsidePanorama* panorama,
        DOUBLE headingInDegrees,
        DOUBLE pitchInDegrees,
        DOUBLE fieldOfViewInDegrees,
        __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIStreetsideExperience** value);

    END_INTERFACE
} __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIStreetsideExperienceFactoryVtbl;

interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIStreetsideExperienceFactory
{
    CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIStreetsideExperienceFactoryVtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIStreetsideExperienceFactory_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIStreetsideExperienceFactory_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIStreetsideExperienceFactory_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIStreetsideExperienceFactory_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIStreetsideExperienceFactory_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIStreetsideExperienceFactory_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIStreetsideExperienceFactory_CreateInstanceWithPanorama(This, panorama, value) \
    ((This)->lpVtbl->CreateInstanceWithPanorama(This, panorama, value))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIStreetsideExperienceFactory_CreateInstanceWithPanoramaHeadingPitchAndFieldOfView(This, panorama, headingInDegrees, pitchInDegrees, fieldOfViewInDegrees, value) \
    ((This)->lpVtbl->CreateInstanceWithPanoramaHeadingPitchAndFieldOfView(This, panorama, headingInDegrees, pitchInDegrees, fieldOfViewInDegrees, value))

#endif /* COBJMACROS */

EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIStreetsideExperienceFactory;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIStreetsideExperienceFactory_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Interface Windows.UI.Xaml.Controls.Maps.IStreetsidePanorama
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Interface is a part of the implementation of type Windows.UI.Xaml.Controls.Maps.StreetsidePanorama
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIStreetsidePanorama_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIStreetsidePanorama_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_UI_Xaml_Controls_Maps_IStreetsidePanorama[] = L"Windows.UI.Xaml.Controls.Maps.IStreetsidePanorama";
typedef struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIStreetsidePanoramaVtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIStreetsidePanorama* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIStreetsidePanorama* This);
    ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIStreetsidePanorama* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIStreetsidePanorama* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIStreetsidePanorama* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIStreetsidePanorama* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* get_Location)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIStreetsidePanorama* This,
        __x_ABI_CWindows_CDevices_CGeolocation_CIGeopoint** value);

    END_INTERFACE
} __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIStreetsidePanoramaVtbl;

interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIStreetsidePanorama
{
    CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIStreetsidePanoramaVtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIStreetsidePanorama_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIStreetsidePanorama_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIStreetsidePanorama_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIStreetsidePanorama_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIStreetsidePanorama_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIStreetsidePanorama_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIStreetsidePanorama_get_Location(This, value) \
    ((This)->lpVtbl->get_Location(This, value))

#endif /* COBJMACROS */

EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIStreetsidePanorama;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIStreetsidePanorama_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Interface Windows.UI.Xaml.Controls.Maps.IStreetsidePanoramaStatics
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Interface is a part of the implementation of type Windows.UI.Xaml.Controls.Maps.StreetsidePanorama
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIStreetsidePanoramaStatics_INTERFACE_DEFINED__)
#define ____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIStreetsidePanoramaStatics_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Windows_UI_Xaml_Controls_Maps_IStreetsidePanoramaStatics[] = L"Windows.UI.Xaml.Controls.Maps.IStreetsidePanoramaStatics";
typedef struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIStreetsidePanoramaStaticsVtbl
{
    BEGIN_INTERFACE

    HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIStreetsidePanoramaStatics* This,
        REFIID riid,
        void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIStreetsidePanoramaStatics* This);
    ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIStreetsidePanoramaStatics* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIStreetsidePanoramaStatics* This,
        ULONG* iidCount,
        IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIStreetsidePanoramaStatics* This,
        HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIStreetsidePanoramaStatics* This,
        TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* FindNearbyWithLocationAsync)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIStreetsidePanoramaStatics* This,
        __x_ABI_CWindows_CDevices_CGeolocation_CIGeopoint* location,
        __FIAsyncOperation_1_Windows__CUI__CXaml__CControls__CMaps__CStreetsidePanorama** operation);
    HRESULT (STDMETHODCALLTYPE* FindNearbyWithLocationAndRadiusAsync)(__x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIStreetsidePanoramaStatics* This,
        __x_ABI_CWindows_CDevices_CGeolocation_CIGeopoint* location,
        DOUBLE radiusInMeters,
        __FIAsyncOperation_1_Windows__CUI__CXaml__CControls__CMaps__CStreetsidePanorama** operation);

    END_INTERFACE
} __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIStreetsidePanoramaStaticsVtbl;

interface __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIStreetsidePanoramaStatics
{
    CONST_VTBL struct __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIStreetsidePanoramaStaticsVtbl* lpVtbl;
};

#ifdef COBJMACROS

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIStreetsidePanoramaStatics_QueryInterface(This, riid, ppvObject) \
    ((This)->lpVtbl->QueryInterface(This, riid, ppvObject))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIStreetsidePanoramaStatics_AddRef(This) \
    ((This)->lpVtbl->AddRef(This))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIStreetsidePanoramaStatics_Release(This) \
    ((This)->lpVtbl->Release(This))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIStreetsidePanoramaStatics_GetIids(This, iidCount, iids) \
    ((This)->lpVtbl->GetIids(This, iidCount, iids))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIStreetsidePanoramaStatics_GetRuntimeClassName(This, className) \
    ((This)->lpVtbl->GetRuntimeClassName(This, className))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIStreetsidePanoramaStatics_GetTrustLevel(This, trustLevel) \
    ((This)->lpVtbl->GetTrustLevel(This, trustLevel))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIStreetsidePanoramaStatics_FindNearbyWithLocationAsync(This, location, operation) \
    ((This)->lpVtbl->FindNearbyWithLocationAsync(This, location, operation))

#define __x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIStreetsidePanoramaStatics_FindNearbyWithLocationAndRadiusAsync(This, location, radiusInMeters, operation) \
    ((This)->lpVtbl->FindNearbyWithLocationAndRadiusAsync(This, location, radiusInMeters, operation))

#endif /* COBJMACROS */

EXTERN_C const IID IID___x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIStreetsidePanoramaStatics;
#endif /* !defined(____x_ABI_CWindows_CUI_CXaml_CControls_CMaps_CIStreetsidePanoramaStatics_INTERFACE_DEFINED__) */
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Class Windows.UI.Xaml.Controls.Maps.CustomMapTileDataSource
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Class implements the following interfaces:
 *    Windows.UI.Xaml.Controls.Maps.ICustomMapTileDataSource ** Default Interface **
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#ifndef RUNTIMECLASS_Windows_UI_Xaml_Controls_Maps_CustomMapTileDataSource_DEFINED
#define RUNTIMECLASS_Windows_UI_Xaml_Controls_Maps_CustomMapTileDataSource_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Windows_UI_Xaml_Controls_Maps_CustomMapTileDataSource[] = L"Windows.UI.Xaml.Controls.Maps.CustomMapTileDataSource";
#endif
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Class Windows.UI.Xaml.Controls.Maps.HttpMapTileDataSource
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Class implements the following interfaces:
 *    Windows.UI.Xaml.Controls.Maps.IHttpMapTileDataSource ** Default Interface **
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#ifndef RUNTIMECLASS_Windows_UI_Xaml_Controls_Maps_HttpMapTileDataSource_DEFINED
#define RUNTIMECLASS_Windows_UI_Xaml_Controls_Maps_HttpMapTileDataSource_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Windows_UI_Xaml_Controls_Maps_HttpMapTileDataSource[] = L"Windows.UI.Xaml.Controls.Maps.HttpMapTileDataSource";
#endif
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Class Windows.UI.Xaml.Controls.Maps.LocalMapTileDataSource
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Class implements the following interfaces:
 *    Windows.UI.Xaml.Controls.Maps.ILocalMapTileDataSource ** Default Interface **
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#ifndef RUNTIMECLASS_Windows_UI_Xaml_Controls_Maps_LocalMapTileDataSource_DEFINED
#define RUNTIMECLASS_Windows_UI_Xaml_Controls_Maps_LocalMapTileDataSource_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Windows_UI_Xaml_Controls_Maps_LocalMapTileDataSource[] = L"Windows.UI.Xaml.Controls.Maps.LocalMapTileDataSource";
#endif
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Class Windows.UI.Xaml.Controls.Maps.MapActualCameraChangedEventArgs
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * RuntimeClass can be activated.
 *   Type can be activated via RoActivateInstance starting with version 1.0 of the Windows.Foundation.UniversalApiContract API contract
 *
 * Class implements the following interfaces:
 *    Windows.UI.Xaml.Controls.Maps.IMapActualCameraChangedEventArgs ** Default Interface **
 *    Windows.UI.Xaml.Controls.Maps.IMapActualCameraChangedEventArgs2
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#ifndef RUNTIMECLASS_Windows_UI_Xaml_Controls_Maps_MapActualCameraChangedEventArgs_DEFINED
#define RUNTIMECLASS_Windows_UI_Xaml_Controls_Maps_MapActualCameraChangedEventArgs_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Windows_UI_Xaml_Controls_Maps_MapActualCameraChangedEventArgs[] = L"Windows.UI.Xaml.Controls.Maps.MapActualCameraChangedEventArgs";
#endif
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Class Windows.UI.Xaml.Controls.Maps.MapActualCameraChangingEventArgs
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * RuntimeClass can be activated.
 *   Type can be activated via RoActivateInstance starting with version 1.0 of the Windows.Foundation.UniversalApiContract API contract
 *
 * Class implements the following interfaces:
 *    Windows.UI.Xaml.Controls.Maps.IMapActualCameraChangingEventArgs ** Default Interface **
 *    Windows.UI.Xaml.Controls.Maps.IMapActualCameraChangingEventArgs2
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#ifndef RUNTIMECLASS_Windows_UI_Xaml_Controls_Maps_MapActualCameraChangingEventArgs_DEFINED
#define RUNTIMECLASS_Windows_UI_Xaml_Controls_Maps_MapActualCameraChangingEventArgs_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Windows_UI_Xaml_Controls_Maps_MapActualCameraChangingEventArgs[] = L"Windows.UI.Xaml.Controls.Maps.MapActualCameraChangingEventArgs";
#endif
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Class Windows.UI.Xaml.Controls.Maps.MapBillboard
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 4.0
 *
 * RuntimeClass can be activated.
 *   Type can be activated via the Windows.UI.Xaml.Controls.Maps.IMapBillboardFactory interface starting with version 4.0 of the Windows.Foundation.UniversalApiContract API contract
 *
 * RuntimeClass contains static methods.
 *   Static Methods exist on the Windows.UI.Xaml.Controls.Maps.IMapBillboardStatics interface starting with version 4.0 of the Windows.Foundation.UniversalApiContract API contract
 *
 * Class implements the following interfaces:
 *    Windows.UI.Xaml.Controls.Maps.IMapBillboard ** Default Interface **
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x40000
#ifndef RUNTIMECLASS_Windows_UI_Xaml_Controls_Maps_MapBillboard_DEFINED
#define RUNTIMECLASS_Windows_UI_Xaml_Controls_Maps_MapBillboard_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Windows_UI_Xaml_Controls_Maps_MapBillboard[] = L"Windows.UI.Xaml.Controls.Maps.MapBillboard";
#endif
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x40000

/*
 *
 * Class Windows.UI.Xaml.Controls.Maps.MapCamera
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * RuntimeClass can be activated.
 *   Type can be activated via the Windows.UI.Xaml.Controls.Maps.IMapCameraFactory interface starting with version 1.0 of the Windows.Foundation.UniversalApiContract API contract
 *
 * Class implements the following interfaces:
 *    Windows.UI.Xaml.Controls.Maps.IMapCamera ** Default Interface **
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#ifndef RUNTIMECLASS_Windows_UI_Xaml_Controls_Maps_MapCamera_DEFINED
#define RUNTIMECLASS_Windows_UI_Xaml_Controls_Maps_MapCamera_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Windows_UI_Xaml_Controls_Maps_MapCamera[] = L"Windows.UI.Xaml.Controls.Maps.MapCamera";
#endif
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Class Windows.UI.Xaml.Controls.Maps.MapContextRequestedEventArgs
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 4.0
 *
 * RuntimeClass can be activated.
 *   Type can be activated via RoActivateInstance starting with version 4.0 of the Windows.Foundation.UniversalApiContract API contract
 *
 * Class implements the following interfaces:
 *    Windows.UI.Xaml.Controls.Maps.IMapContextRequestedEventArgs ** Default Interface **
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x40000
#ifndef RUNTIMECLASS_Windows_UI_Xaml_Controls_Maps_MapContextRequestedEventArgs_DEFINED
#define RUNTIMECLASS_Windows_UI_Xaml_Controls_Maps_MapContextRequestedEventArgs_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Windows_UI_Xaml_Controls_Maps_MapContextRequestedEventArgs[] = L"Windows.UI.Xaml.Controls.Maps.MapContextRequestedEventArgs";
#endif
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x40000

/*
 *
 * Class Windows.UI.Xaml.Controls.Maps.MapControl
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * RuntimeClass can be activated.
 *   Type can be activated via RoActivateInstance starting with version 1.0 of the Windows.Foundation.UniversalApiContract API contract
 *
 * RuntimeClass contains static methods.
 *   Static Methods exist on the Windows.UI.Xaml.Controls.Maps.IMapControlStatics2 interface starting with version 1.0 of the Windows.Foundation.UniversalApiContract API contract
 *   Static Methods exist on the Windows.UI.Xaml.Controls.Maps.IMapControlStatics interface starting with version 1.0 of the Windows.Foundation.UniversalApiContract API contract
 *   Static Methods exist on the Windows.UI.Xaml.Controls.Maps.IMapControlStatics4 interface starting with version 3.0 of the Windows.Foundation.UniversalApiContract API contract
 *   Static Methods exist on the Windows.UI.Xaml.Controls.Maps.IMapControlStatics8 interface starting with version 8.0 of the Windows.Foundation.UniversalApiContract API contract
 *   Static Methods exist on the Windows.UI.Xaml.Controls.Maps.IMapControlStatics5 interface starting with version 4.0 of the Windows.Foundation.UniversalApiContract API contract
 *   Static Methods exist on the Windows.UI.Xaml.Controls.Maps.IMapControlStatics7 interface starting with version 6.0 of the Windows.Foundation.UniversalApiContract API contract
 *   Static Methods exist on the Windows.UI.Xaml.Controls.Maps.IMapControlStatics6 interface starting with version 5.0 of the Windows.Foundation.UniversalApiContract API contract
 *
 * Class implements the following interfaces:
 *    Windows.UI.Xaml.Controls.Maps.IMapControl ** Default Interface **
 *    Windows.UI.Xaml.Controls.Maps.IMapControl2
 *    Windows.UI.Xaml.Controls.Maps.IMapControl3
 *    Windows.UI.Xaml.Controls.Maps.IMapControl4
 *    Windows.UI.Xaml.Controls.Maps.IMapControl5
 *    Windows.UI.Xaml.Controls.Maps.IMapControl6
 *    Windows.UI.Xaml.Controls.Maps.IMapControl7
 *    Windows.UI.Xaml.Controls.Maps.IMapControl8
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#ifndef RUNTIMECLASS_Windows_UI_Xaml_Controls_Maps_MapControl_DEFINED
#define RUNTIMECLASS_Windows_UI_Xaml_Controls_Maps_MapControl_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Windows_UI_Xaml_Controls_Maps_MapControl[] = L"Windows.UI.Xaml.Controls.Maps.MapControl";
#endif
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Class Windows.UI.Xaml.Controls.Maps.MapControlBusinessLandmarkClickEventArgs
 *
 * Introduced to Windows.Services.Maps.LocalSearchContract in version 2.0
 *
 * RuntimeClass can be activated.
 *   Type can be activated via RoActivateInstance starting with version 2.0 of the Windows.Services.Maps.LocalSearchContract API contract
 *
 * Class implements the following interfaces:
 *    Windows.UI.Xaml.Controls.Maps.IMapControlBusinessLandmarkClickEventArgs ** Default Interface **
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */
#if WINDOWS_SERVICES_MAPS_LOCALSEARCHCONTRACT_VERSION >= 0x20000
#ifndef RUNTIMECLASS_Windows_UI_Xaml_Controls_Maps_MapControlBusinessLandmarkClickEventArgs_DEFINED
#define RUNTIMECLASS_Windows_UI_Xaml_Controls_Maps_MapControlBusinessLandmarkClickEventArgs_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Windows_UI_Xaml_Controls_Maps_MapControlBusinessLandmarkClickEventArgs[] = L"Windows.UI.Xaml.Controls.Maps.MapControlBusinessLandmarkClickEventArgs";
#endif
#endif // WINDOWS_SERVICES_MAPS_LOCALSEARCHCONTRACT_VERSION >= 0x20000

/*
 *
 * Class Windows.UI.Xaml.Controls.Maps.MapControlBusinessLandmarkPointerEnteredEventArgs
 *
 * Introduced to Windows.Services.Maps.LocalSearchContract in version 3.0
 *
 * RuntimeClass can be activated.
 *   Type can be activated via RoActivateInstance starting with version 3.0 of the Windows.Services.Maps.LocalSearchContract API contract
 *
 * Class implements the following interfaces:
 *    Windows.UI.Xaml.Controls.Maps.IMapControlBusinessLandmarkPointerEnteredEventArgs ** Default Interface **
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */
#if WINDOWS_SERVICES_MAPS_LOCALSEARCHCONTRACT_VERSION >= 0x30000
#ifndef RUNTIMECLASS_Windows_UI_Xaml_Controls_Maps_MapControlBusinessLandmarkPointerEnteredEventArgs_DEFINED
#define RUNTIMECLASS_Windows_UI_Xaml_Controls_Maps_MapControlBusinessLandmarkPointerEnteredEventArgs_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Windows_UI_Xaml_Controls_Maps_MapControlBusinessLandmarkPointerEnteredEventArgs[] = L"Windows.UI.Xaml.Controls.Maps.MapControlBusinessLandmarkPointerEnteredEventArgs";
#endif
#endif // WINDOWS_SERVICES_MAPS_LOCALSEARCHCONTRACT_VERSION >= 0x30000

/*
 *
 * Class Windows.UI.Xaml.Controls.Maps.MapControlBusinessLandmarkPointerExitedEventArgs
 *
 * Introduced to Windows.Services.Maps.LocalSearchContract in version 3.0
 *
 * RuntimeClass can be activated.
 *   Type can be activated via RoActivateInstance starting with version 3.0 of the Windows.Services.Maps.LocalSearchContract API contract
 *
 * Class implements the following interfaces:
 *    Windows.UI.Xaml.Controls.Maps.IMapControlBusinessLandmarkPointerExitedEventArgs ** Default Interface **
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */
#if WINDOWS_SERVICES_MAPS_LOCALSEARCHCONTRACT_VERSION >= 0x30000
#ifndef RUNTIMECLASS_Windows_UI_Xaml_Controls_Maps_MapControlBusinessLandmarkPointerExitedEventArgs_DEFINED
#define RUNTIMECLASS_Windows_UI_Xaml_Controls_Maps_MapControlBusinessLandmarkPointerExitedEventArgs_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Windows_UI_Xaml_Controls_Maps_MapControlBusinessLandmarkPointerExitedEventArgs[] = L"Windows.UI.Xaml.Controls.Maps.MapControlBusinessLandmarkPointerExitedEventArgs";
#endif
#endif // WINDOWS_SERVICES_MAPS_LOCALSEARCHCONTRACT_VERSION >= 0x30000

/*
 *
 * Class Windows.UI.Xaml.Controls.Maps.MapControlBusinessLandmarkRightTappedEventArgs
 *
 * Introduced to Windows.Services.Maps.LocalSearchContract in version 2.0
 *
 * RuntimeClass can be activated.
 *   Type can be activated via RoActivateInstance starting with version 2.0 of the Windows.Services.Maps.LocalSearchContract API contract
 *
 * Class implements the following interfaces:
 *    Windows.UI.Xaml.Controls.Maps.IMapControlBusinessLandmarkRightTappedEventArgs ** Default Interface **
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */
#if WINDOWS_SERVICES_MAPS_LOCALSEARCHCONTRACT_VERSION >= 0x20000
#ifndef RUNTIMECLASS_Windows_UI_Xaml_Controls_Maps_MapControlBusinessLandmarkRightTappedEventArgs_DEFINED
#define RUNTIMECLASS_Windows_UI_Xaml_Controls_Maps_MapControlBusinessLandmarkRightTappedEventArgs_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Windows_UI_Xaml_Controls_Maps_MapControlBusinessLandmarkRightTappedEventArgs[] = L"Windows.UI.Xaml.Controls.Maps.MapControlBusinessLandmarkRightTappedEventArgs";
#endif
#endif // WINDOWS_SERVICES_MAPS_LOCALSEARCHCONTRACT_VERSION >= 0x20000

/*
 *
 * Class Windows.UI.Xaml.Controls.Maps.MapControlDataHelper
 *
 * Introduced to Windows.Services.Maps.LocalSearchContract in version 2.0
 *
 * RuntimeClass can be activated.
 *   Type can be activated via the Windows.UI.Xaml.Controls.Maps.IMapControlDataHelperFactory interface starting with version 2.0 of the Windows.Services.Maps.LocalSearchContract API contract
 *
 * RuntimeClass contains static methods.
 *   Static Methods exist on the Windows.UI.Xaml.Controls.Maps.IMapControlDataHelperStatics interface starting with version 4.0 of the Windows.Services.Maps.LocalSearchContract API contract
 *
 * Class implements the following interfaces:
 *    Windows.UI.Xaml.Controls.Maps.IMapControlDataHelper ** Default Interface **
 *    Windows.UI.Xaml.Controls.Maps.IMapControlDataHelper2
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */
#if WINDOWS_SERVICES_MAPS_LOCALSEARCHCONTRACT_VERSION >= 0x20000
#ifndef RUNTIMECLASS_Windows_UI_Xaml_Controls_Maps_MapControlDataHelper_DEFINED
#define RUNTIMECLASS_Windows_UI_Xaml_Controls_Maps_MapControlDataHelper_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Windows_UI_Xaml_Controls_Maps_MapControlDataHelper[] = L"Windows.UI.Xaml.Controls.Maps.MapControlDataHelper";
#endif
#endif // WINDOWS_SERVICES_MAPS_LOCALSEARCHCONTRACT_VERSION >= 0x20000

/*
 *
 * Class Windows.UI.Xaml.Controls.Maps.MapControlTransitFeatureClickEventArgs
 *
 * Introduced to Windows.Services.Maps.LocalSearchContract in version 2.0
 *
 * RuntimeClass can be activated.
 *   Type can be activated via RoActivateInstance starting with version 2.0 of the Windows.Services.Maps.LocalSearchContract API contract
 *
 * Class implements the following interfaces:
 *    Windows.UI.Xaml.Controls.Maps.IMapControlTransitFeatureClickEventArgs ** Default Interface **
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */
#if WINDOWS_SERVICES_MAPS_LOCALSEARCHCONTRACT_VERSION >= 0x20000
#ifndef RUNTIMECLASS_Windows_UI_Xaml_Controls_Maps_MapControlTransitFeatureClickEventArgs_DEFINED
#define RUNTIMECLASS_Windows_UI_Xaml_Controls_Maps_MapControlTransitFeatureClickEventArgs_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Windows_UI_Xaml_Controls_Maps_MapControlTransitFeatureClickEventArgs[] = L"Windows.UI.Xaml.Controls.Maps.MapControlTransitFeatureClickEventArgs";
#endif
#endif // WINDOWS_SERVICES_MAPS_LOCALSEARCHCONTRACT_VERSION >= 0x20000

/*
 *
 * Class Windows.UI.Xaml.Controls.Maps.MapControlTransitFeaturePointerEnteredEventArgs
 *
 * Introduced to Windows.Services.Maps.LocalSearchContract in version 3.0
 *
 * RuntimeClass can be activated.
 *   Type can be activated via RoActivateInstance starting with version 3.0 of the Windows.Services.Maps.LocalSearchContract API contract
 *
 * Class implements the following interfaces:
 *    Windows.UI.Xaml.Controls.Maps.IMapControlTransitFeaturePointerEnteredEventArgs ** Default Interface **
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */
#if WINDOWS_SERVICES_MAPS_LOCALSEARCHCONTRACT_VERSION >= 0x30000
#ifndef RUNTIMECLASS_Windows_UI_Xaml_Controls_Maps_MapControlTransitFeaturePointerEnteredEventArgs_DEFINED
#define RUNTIMECLASS_Windows_UI_Xaml_Controls_Maps_MapControlTransitFeaturePointerEnteredEventArgs_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Windows_UI_Xaml_Controls_Maps_MapControlTransitFeaturePointerEnteredEventArgs[] = L"Windows.UI.Xaml.Controls.Maps.MapControlTransitFeaturePointerEnteredEventArgs";
#endif
#endif // WINDOWS_SERVICES_MAPS_LOCALSEARCHCONTRACT_VERSION >= 0x30000

/*
 *
 * Class Windows.UI.Xaml.Controls.Maps.MapControlTransitFeaturePointerExitedEventArgs
 *
 * Introduced to Windows.Services.Maps.LocalSearchContract in version 3.0
 *
 * RuntimeClass can be activated.
 *   Type can be activated via RoActivateInstance starting with version 3.0 of the Windows.Services.Maps.LocalSearchContract API contract
 *
 * Class implements the following interfaces:
 *    Windows.UI.Xaml.Controls.Maps.IMapControlTransitFeaturePointerExitedEventArgs ** Default Interface **
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */
#if WINDOWS_SERVICES_MAPS_LOCALSEARCHCONTRACT_VERSION >= 0x30000
#ifndef RUNTIMECLASS_Windows_UI_Xaml_Controls_Maps_MapControlTransitFeaturePointerExitedEventArgs_DEFINED
#define RUNTIMECLASS_Windows_UI_Xaml_Controls_Maps_MapControlTransitFeaturePointerExitedEventArgs_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Windows_UI_Xaml_Controls_Maps_MapControlTransitFeaturePointerExitedEventArgs[] = L"Windows.UI.Xaml.Controls.Maps.MapControlTransitFeaturePointerExitedEventArgs";
#endif
#endif // WINDOWS_SERVICES_MAPS_LOCALSEARCHCONTRACT_VERSION >= 0x30000

/*
 *
 * Class Windows.UI.Xaml.Controls.Maps.MapControlTransitFeatureRightTappedEventArgs
 *
 * Introduced to Windows.Services.Maps.LocalSearchContract in version 2.0
 *
 * RuntimeClass can be activated.
 *   Type can be activated via RoActivateInstance starting with version 2.0 of the Windows.Services.Maps.LocalSearchContract API contract
 *
 * Class implements the following interfaces:
 *    Windows.UI.Xaml.Controls.Maps.IMapControlTransitFeatureRightTappedEventArgs ** Default Interface **
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */
#if WINDOWS_SERVICES_MAPS_LOCALSEARCHCONTRACT_VERSION >= 0x20000
#ifndef RUNTIMECLASS_Windows_UI_Xaml_Controls_Maps_MapControlTransitFeatureRightTappedEventArgs_DEFINED
#define RUNTIMECLASS_Windows_UI_Xaml_Controls_Maps_MapControlTransitFeatureRightTappedEventArgs_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Windows_UI_Xaml_Controls_Maps_MapControlTransitFeatureRightTappedEventArgs[] = L"Windows.UI.Xaml.Controls.Maps.MapControlTransitFeatureRightTappedEventArgs";
#endif
#endif // WINDOWS_SERVICES_MAPS_LOCALSEARCHCONTRACT_VERSION >= 0x20000

/*
 *
 * Class Windows.UI.Xaml.Controls.Maps.MapCustomExperience
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Class implements the following interfaces:
 *    Windows.UI.Xaml.Controls.Maps.IMapCustomExperience ** Default Interface **
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#ifndef RUNTIMECLASS_Windows_UI_Xaml_Controls_Maps_MapCustomExperience_DEFINED
#define RUNTIMECLASS_Windows_UI_Xaml_Controls_Maps_MapCustomExperience_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Windows_UI_Xaml_Controls_Maps_MapCustomExperience[] = L"Windows.UI.Xaml.Controls.Maps.MapCustomExperience";
#endif
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Class Windows.UI.Xaml.Controls.Maps.MapCustomExperienceChangedEventArgs
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * RuntimeClass can be activated.
 *   Type can be activated via RoActivateInstance starting with version 1.0 of the Windows.Foundation.UniversalApiContract API contract
 *
 * Class implements the following interfaces:
 *    Windows.UI.Xaml.Controls.Maps.IMapCustomExperienceChangedEventArgs ** Default Interface **
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#ifndef RUNTIMECLASS_Windows_UI_Xaml_Controls_Maps_MapCustomExperienceChangedEventArgs_DEFINED
#define RUNTIMECLASS_Windows_UI_Xaml_Controls_Maps_MapCustomExperienceChangedEventArgs_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Windows_UI_Xaml_Controls_Maps_MapCustomExperienceChangedEventArgs[] = L"Windows.UI.Xaml.Controls.Maps.MapCustomExperienceChangedEventArgs";
#endif
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Class Windows.UI.Xaml.Controls.Maps.MapElement
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * RuntimeClass contains static methods.
 *   Static Methods exist on the Windows.UI.Xaml.Controls.Maps.IMapElementStatics3 interface starting with version 5.0 of the Windows.Foundation.UniversalApiContract API contract
 *   Static Methods exist on the Windows.UI.Xaml.Controls.Maps.IMapElementStatics interface starting with version 1.0 of the Windows.Foundation.UniversalApiContract API contract
 *   Static Methods exist on the Windows.UI.Xaml.Controls.Maps.IMapElementStatics4 interface starting with version 6.0 of the Windows.Foundation.UniversalApiContract API contract
 *   Static Methods exist on the Windows.UI.Xaml.Controls.Maps.IMapElementStatics2 interface starting with version 1.0 of the Windows.Foundation.UniversalApiContract API contract
 *
 * Class implements the following interfaces:
 *    Windows.UI.Xaml.Controls.Maps.IMapElement ** Default Interface **
 *    Windows.UI.Xaml.Controls.Maps.IMapElement2
 *    Windows.UI.Xaml.Controls.Maps.IMapElement3
 *    Windows.UI.Xaml.Controls.Maps.IMapElement4
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#ifndef RUNTIMECLASS_Windows_UI_Xaml_Controls_Maps_MapElement_DEFINED
#define RUNTIMECLASS_Windows_UI_Xaml_Controls_Maps_MapElement_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Windows_UI_Xaml_Controls_Maps_MapElement[] = L"Windows.UI.Xaml.Controls.Maps.MapElement";
#endif
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Class Windows.UI.Xaml.Controls.Maps.MapElement3D
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 5.0
 *
 * RuntimeClass can be activated.
 *   Type can be activated via RoActivateInstance starting with version 5.0 of the Windows.Foundation.UniversalApiContract API contract
 *
 * RuntimeClass contains static methods.
 *   Static Methods exist on the Windows.UI.Xaml.Controls.Maps.IMapElement3DStatics interface starting with version 5.0 of the Windows.Foundation.UniversalApiContract API contract
 *
 * Class implements the following interfaces:
 *    Windows.UI.Xaml.Controls.Maps.IMapElement3D ** Default Interface **
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x50000
#ifndef RUNTIMECLASS_Windows_UI_Xaml_Controls_Maps_MapElement3D_DEFINED
#define RUNTIMECLASS_Windows_UI_Xaml_Controls_Maps_MapElement3D_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Windows_UI_Xaml_Controls_Maps_MapElement3D[] = L"Windows.UI.Xaml.Controls.Maps.MapElement3D";
#endif
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x50000

/*
 *
 * Class Windows.UI.Xaml.Controls.Maps.MapElementClickEventArgs
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * RuntimeClass can be activated.
 *   Type can be activated via RoActivateInstance starting with version 1.0 of the Windows.Foundation.UniversalApiContract API contract
 *
 * Class implements the following interfaces:
 *    Windows.UI.Xaml.Controls.Maps.IMapElementClickEventArgs ** Default Interface **
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#ifndef RUNTIMECLASS_Windows_UI_Xaml_Controls_Maps_MapElementClickEventArgs_DEFINED
#define RUNTIMECLASS_Windows_UI_Xaml_Controls_Maps_MapElementClickEventArgs_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Windows_UI_Xaml_Controls_Maps_MapElementClickEventArgs[] = L"Windows.UI.Xaml.Controls.Maps.MapElementClickEventArgs";
#endif
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Class Windows.UI.Xaml.Controls.Maps.MapElementPointerEnteredEventArgs
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * RuntimeClass can be activated.
 *   Type can be activated via RoActivateInstance starting with version 1.0 of the Windows.Foundation.UniversalApiContract API contract
 *
 * Class implements the following interfaces:
 *    Windows.UI.Xaml.Controls.Maps.IMapElementPointerEnteredEventArgs ** Default Interface **
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#ifndef RUNTIMECLASS_Windows_UI_Xaml_Controls_Maps_MapElementPointerEnteredEventArgs_DEFINED
#define RUNTIMECLASS_Windows_UI_Xaml_Controls_Maps_MapElementPointerEnteredEventArgs_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Windows_UI_Xaml_Controls_Maps_MapElementPointerEnteredEventArgs[] = L"Windows.UI.Xaml.Controls.Maps.MapElementPointerEnteredEventArgs";
#endif
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Class Windows.UI.Xaml.Controls.Maps.MapElementPointerExitedEventArgs
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * RuntimeClass can be activated.
 *   Type can be activated via RoActivateInstance starting with version 1.0 of the Windows.Foundation.UniversalApiContract API contract
 *
 * Class implements the following interfaces:
 *    Windows.UI.Xaml.Controls.Maps.IMapElementPointerExitedEventArgs ** Default Interface **
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#ifndef RUNTIMECLASS_Windows_UI_Xaml_Controls_Maps_MapElementPointerExitedEventArgs_DEFINED
#define RUNTIMECLASS_Windows_UI_Xaml_Controls_Maps_MapElementPointerExitedEventArgs_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Windows_UI_Xaml_Controls_Maps_MapElementPointerExitedEventArgs[] = L"Windows.UI.Xaml.Controls.Maps.MapElementPointerExitedEventArgs";
#endif
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Class Windows.UI.Xaml.Controls.Maps.MapElementsLayer
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 5.0
 *
 * RuntimeClass can be activated.
 *   Type can be activated via RoActivateInstance starting with version 5.0 of the Windows.Foundation.UniversalApiContract API contract
 *
 * RuntimeClass contains static methods.
 *   Static Methods exist on the Windows.UI.Xaml.Controls.Maps.IMapElementsLayerStatics interface starting with version 5.0 of the Windows.Foundation.UniversalApiContract API contract
 *
 * Class implements the following interfaces:
 *    Windows.UI.Xaml.Controls.Maps.IMapElementsLayer ** Default Interface **
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x50000
#ifndef RUNTIMECLASS_Windows_UI_Xaml_Controls_Maps_MapElementsLayer_DEFINED
#define RUNTIMECLASS_Windows_UI_Xaml_Controls_Maps_MapElementsLayer_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Windows_UI_Xaml_Controls_Maps_MapElementsLayer[] = L"Windows.UI.Xaml.Controls.Maps.MapElementsLayer";
#endif
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x50000

/*
 *
 * Class Windows.UI.Xaml.Controls.Maps.MapElementsLayerClickEventArgs
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 5.0
 *
 * RuntimeClass can be activated.
 *   Type can be activated via RoActivateInstance starting with version 5.0 of the Windows.Foundation.UniversalApiContract API contract
 *
 * Class implements the following interfaces:
 *    Windows.UI.Xaml.Controls.Maps.IMapElementsLayerClickEventArgs ** Default Interface **
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x50000
#ifndef RUNTIMECLASS_Windows_UI_Xaml_Controls_Maps_MapElementsLayerClickEventArgs_DEFINED
#define RUNTIMECLASS_Windows_UI_Xaml_Controls_Maps_MapElementsLayerClickEventArgs_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Windows_UI_Xaml_Controls_Maps_MapElementsLayerClickEventArgs[] = L"Windows.UI.Xaml.Controls.Maps.MapElementsLayerClickEventArgs";
#endif
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x50000

/*
 *
 * Class Windows.UI.Xaml.Controls.Maps.MapElementsLayerContextRequestedEventArgs
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 5.0
 *
 * RuntimeClass can be activated.
 *   Type can be activated via RoActivateInstance starting with version 5.0 of the Windows.Foundation.UniversalApiContract API contract
 *
 * Class implements the following interfaces:
 *    Windows.UI.Xaml.Controls.Maps.IMapElementsLayerContextRequestedEventArgs ** Default Interface **
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x50000
#ifndef RUNTIMECLASS_Windows_UI_Xaml_Controls_Maps_MapElementsLayerContextRequestedEventArgs_DEFINED
#define RUNTIMECLASS_Windows_UI_Xaml_Controls_Maps_MapElementsLayerContextRequestedEventArgs_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Windows_UI_Xaml_Controls_Maps_MapElementsLayerContextRequestedEventArgs[] = L"Windows.UI.Xaml.Controls.Maps.MapElementsLayerContextRequestedEventArgs";
#endif
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x50000

/*
 *
 * Class Windows.UI.Xaml.Controls.Maps.MapElementsLayerPointerEnteredEventArgs
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 5.0
 *
 * RuntimeClass can be activated.
 *   Type can be activated via RoActivateInstance starting with version 5.0 of the Windows.Foundation.UniversalApiContract API contract
 *
 * Class implements the following interfaces:
 *    Windows.UI.Xaml.Controls.Maps.IMapElementsLayerPointerEnteredEventArgs ** Default Interface **
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x50000
#ifndef RUNTIMECLASS_Windows_UI_Xaml_Controls_Maps_MapElementsLayerPointerEnteredEventArgs_DEFINED
#define RUNTIMECLASS_Windows_UI_Xaml_Controls_Maps_MapElementsLayerPointerEnteredEventArgs_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Windows_UI_Xaml_Controls_Maps_MapElementsLayerPointerEnteredEventArgs[] = L"Windows.UI.Xaml.Controls.Maps.MapElementsLayerPointerEnteredEventArgs";
#endif
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x50000

/*
 *
 * Class Windows.UI.Xaml.Controls.Maps.MapElementsLayerPointerExitedEventArgs
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 5.0
 *
 * RuntimeClass can be activated.
 *   Type can be activated via RoActivateInstance starting with version 5.0 of the Windows.Foundation.UniversalApiContract API contract
 *
 * Class implements the following interfaces:
 *    Windows.UI.Xaml.Controls.Maps.IMapElementsLayerPointerExitedEventArgs ** Default Interface **
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x50000
#ifndef RUNTIMECLASS_Windows_UI_Xaml_Controls_Maps_MapElementsLayerPointerExitedEventArgs_DEFINED
#define RUNTIMECLASS_Windows_UI_Xaml_Controls_Maps_MapElementsLayerPointerExitedEventArgs_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Windows_UI_Xaml_Controls_Maps_MapElementsLayerPointerExitedEventArgs[] = L"Windows.UI.Xaml.Controls.Maps.MapElementsLayerPointerExitedEventArgs";
#endif
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x50000

/*
 *
 * Class Windows.UI.Xaml.Controls.Maps.MapIcon
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * RuntimeClass can be activated.
 *   Type can be activated via RoActivateInstance starting with version 1.0 of the Windows.Foundation.UniversalApiContract API contract
 *
 * RuntimeClass contains static methods.
 *   Static Methods exist on the Windows.UI.Xaml.Controls.Maps.IMapIconStatics interface starting with version 1.0 of the Windows.Foundation.UniversalApiContract API contract
 *   Static Methods exist on the Windows.UI.Xaml.Controls.Maps.IMapIconStatics2 interface starting with version 1.0 of the Windows.Foundation.UniversalApiContract API contract
 *
 * Class implements the following interfaces:
 *    Windows.UI.Xaml.Controls.Maps.IMapIcon ** Default Interface **
 *    Windows.UI.Xaml.Controls.Maps.IMapIcon2
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#ifndef RUNTIMECLASS_Windows_UI_Xaml_Controls_Maps_MapIcon_DEFINED
#define RUNTIMECLASS_Windows_UI_Xaml_Controls_Maps_MapIcon_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Windows_UI_Xaml_Controls_Maps_MapIcon[] = L"Windows.UI.Xaml.Controls.Maps.MapIcon";
#endif
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Class Windows.UI.Xaml.Controls.Maps.MapInputEventArgs
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * RuntimeClass can be activated.
 *   Type can be activated via RoActivateInstance starting with version 1.0 of the Windows.Foundation.UniversalApiContract API contract
 *
 * Class implements the following interfaces:
 *    Windows.UI.Xaml.Controls.Maps.IMapInputEventArgs ** Default Interface **
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#ifndef RUNTIMECLASS_Windows_UI_Xaml_Controls_Maps_MapInputEventArgs_DEFINED
#define RUNTIMECLASS_Windows_UI_Xaml_Controls_Maps_MapInputEventArgs_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Windows_UI_Xaml_Controls_Maps_MapInputEventArgs[] = L"Windows.UI.Xaml.Controls.Maps.MapInputEventArgs";
#endif
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Class Windows.UI.Xaml.Controls.Maps.MapItemsControl
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * RuntimeClass can be activated.
 *   Type can be activated via RoActivateInstance starting with version 1.0 of the Windows.Foundation.UniversalApiContract API contract
 *
 * RuntimeClass contains static methods.
 *   Static Methods exist on the Windows.UI.Xaml.Controls.Maps.IMapItemsControlStatics interface starting with version 1.0 of the Windows.Foundation.UniversalApiContract API contract
 *
 * Class implements the following interfaces:
 *    Windows.UI.Xaml.Controls.Maps.IMapItemsControl ** Default Interface **
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#ifndef RUNTIMECLASS_Windows_UI_Xaml_Controls_Maps_MapItemsControl_DEFINED
#define RUNTIMECLASS_Windows_UI_Xaml_Controls_Maps_MapItemsControl_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Windows_UI_Xaml_Controls_Maps_MapItemsControl[] = L"Windows.UI.Xaml.Controls.Maps.MapItemsControl";
#endif
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Class Windows.UI.Xaml.Controls.Maps.MapLayer
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 5.0
 *
 * RuntimeClass contains static methods.
 *   Static Methods exist on the Windows.UI.Xaml.Controls.Maps.IMapLayerStatics interface starting with version 5.0 of the Windows.Foundation.UniversalApiContract API contract
 *
 * Class implements the following interfaces:
 *    Windows.UI.Xaml.Controls.Maps.IMapLayer ** Default Interface **
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x50000
#ifndef RUNTIMECLASS_Windows_UI_Xaml_Controls_Maps_MapLayer_DEFINED
#define RUNTIMECLASS_Windows_UI_Xaml_Controls_Maps_MapLayer_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Windows_UI_Xaml_Controls_Maps_MapLayer[] = L"Windows.UI.Xaml.Controls.Maps.MapLayer";
#endif
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x50000

/*
 *
 * Class Windows.UI.Xaml.Controls.Maps.MapModel3D
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 5.0
 *
 * RuntimeClass contains static methods.
 *   Static Methods exist on the Windows.UI.Xaml.Controls.Maps.IMapModel3DStatics interface starting with version 5.0 of the Windows.Foundation.UniversalApiContract API contract
 *
 * Class implements the following interfaces:
 *    Windows.UI.Xaml.Controls.Maps.IMapModel3D ** Default Interface **
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x50000
#ifndef RUNTIMECLASS_Windows_UI_Xaml_Controls_Maps_MapModel3D_DEFINED
#define RUNTIMECLASS_Windows_UI_Xaml_Controls_Maps_MapModel3D_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Windows_UI_Xaml_Controls_Maps_MapModel3D[] = L"Windows.UI.Xaml.Controls.Maps.MapModel3D";
#endif
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x50000

/*
 *
 * Class Windows.UI.Xaml.Controls.Maps.MapPolygon
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * RuntimeClass can be activated.
 *   Type can be activated via RoActivateInstance starting with version 1.0 of the Windows.Foundation.UniversalApiContract API contract
 *
 * RuntimeClass contains static methods.
 *   Static Methods exist on the Windows.UI.Xaml.Controls.Maps.IMapPolygonStatics interface starting with version 1.0 of the Windows.Foundation.UniversalApiContract API contract
 *
 * Class implements the following interfaces:
 *    Windows.UI.Xaml.Controls.Maps.IMapPolygon ** Default Interface **
 *    Windows.UI.Xaml.Controls.Maps.IMapPolygon2
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#ifndef RUNTIMECLASS_Windows_UI_Xaml_Controls_Maps_MapPolygon_DEFINED
#define RUNTIMECLASS_Windows_UI_Xaml_Controls_Maps_MapPolygon_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Windows_UI_Xaml_Controls_Maps_MapPolygon[] = L"Windows.UI.Xaml.Controls.Maps.MapPolygon";
#endif
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Class Windows.UI.Xaml.Controls.Maps.MapPolyline
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * RuntimeClass can be activated.
 *   Type can be activated via RoActivateInstance starting with version 1.0 of the Windows.Foundation.UniversalApiContract API contract
 *
 * RuntimeClass contains static methods.
 *   Static Methods exist on the Windows.UI.Xaml.Controls.Maps.IMapPolylineStatics interface starting with version 1.0 of the Windows.Foundation.UniversalApiContract API contract
 *
 * Class implements the following interfaces:
 *    Windows.UI.Xaml.Controls.Maps.IMapPolyline ** Default Interface **
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#ifndef RUNTIMECLASS_Windows_UI_Xaml_Controls_Maps_MapPolyline_DEFINED
#define RUNTIMECLASS_Windows_UI_Xaml_Controls_Maps_MapPolyline_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Windows_UI_Xaml_Controls_Maps_MapPolyline[] = L"Windows.UI.Xaml.Controls.Maps.MapPolyline";
#endif
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Class Windows.UI.Xaml.Controls.Maps.MapRightTappedEventArgs
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 2.0
 *
 * RuntimeClass can be activated.
 *   Type can be activated via RoActivateInstance starting with version 2.0 of the Windows.Foundation.UniversalApiContract API contract
 *
 * Class implements the following interfaces:
 *    Windows.UI.Xaml.Controls.Maps.IMapRightTappedEventArgs ** Default Interface **
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x20000
#ifndef RUNTIMECLASS_Windows_UI_Xaml_Controls_Maps_MapRightTappedEventArgs_DEFINED
#define RUNTIMECLASS_Windows_UI_Xaml_Controls_Maps_MapRightTappedEventArgs_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Windows_UI_Xaml_Controls_Maps_MapRightTappedEventArgs[] = L"Windows.UI.Xaml.Controls.Maps.MapRightTappedEventArgs";
#endif
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x20000

/*
 *
 * Class Windows.UI.Xaml.Controls.Maps.MapRouteView
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Class implements the following interfaces:
 *    Windows.UI.Xaml.Controls.Maps.IMapRouteView ** Default Interface **
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#ifndef RUNTIMECLASS_Windows_UI_Xaml_Controls_Maps_MapRouteView_DEFINED
#define RUNTIMECLASS_Windows_UI_Xaml_Controls_Maps_MapRouteView_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Windows_UI_Xaml_Controls_Maps_MapRouteView[] = L"Windows.UI.Xaml.Controls.Maps.MapRouteView";
#endif
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Class Windows.UI.Xaml.Controls.Maps.MapScene
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * RuntimeClass contains static methods.
 *   Static Methods exist on the Windows.UI.Xaml.Controls.Maps.IMapSceneStatics interface starting with version 1.0 of the Windows.Foundation.UniversalApiContract API contract
 *
 * Class implements the following interfaces:
 *    Windows.UI.Xaml.Controls.Maps.IMapScene ** Default Interface **
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#ifndef RUNTIMECLASS_Windows_UI_Xaml_Controls_Maps_MapScene_DEFINED
#define RUNTIMECLASS_Windows_UI_Xaml_Controls_Maps_MapScene_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Windows_UI_Xaml_Controls_Maps_MapScene[] = L"Windows.UI.Xaml.Controls.Maps.MapScene";
#endif
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Class Windows.UI.Xaml.Controls.Maps.MapStyleSheet
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 4.0
 *
 * RuntimeClass contains static methods.
 *   Static Methods exist on the Windows.UI.Xaml.Controls.Maps.IMapStyleSheetStatics interface starting with version 4.0 of the Windows.Foundation.UniversalApiContract API contract
 *
 * Class implements the following interfaces:
 *    Windows.UI.Xaml.Controls.Maps.IMapStyleSheet ** Default Interface **
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x40000
#ifndef RUNTIMECLASS_Windows_UI_Xaml_Controls_Maps_MapStyleSheet_DEFINED
#define RUNTIMECLASS_Windows_UI_Xaml_Controls_Maps_MapStyleSheet_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Windows_UI_Xaml_Controls_Maps_MapStyleSheet[] = L"Windows.UI.Xaml.Controls.Maps.MapStyleSheet";
#endif
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x40000

/*
 *
 * Class Windows.UI.Xaml.Controls.Maps.MapStyleSheetEntries
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 5.0
 *
 * RuntimeClass contains static methods.
 *   Static Methods exist on the Windows.UI.Xaml.Controls.Maps.IMapStyleSheetEntriesStatics interface starting with version 5.0 of the Windows.Foundation.UniversalApiContract API contract
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x50000
#ifndef RUNTIMECLASS_Windows_UI_Xaml_Controls_Maps_MapStyleSheetEntries_DEFINED
#define RUNTIMECLASS_Windows_UI_Xaml_Controls_Maps_MapStyleSheetEntries_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Windows_UI_Xaml_Controls_Maps_MapStyleSheetEntries[] = L"Windows.UI.Xaml.Controls.Maps.MapStyleSheetEntries";
#endif
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x50000

/*
 *
 * Class Windows.UI.Xaml.Controls.Maps.MapStyleSheetEntryStates
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 5.0
 *
 * RuntimeClass contains static methods.
 *   Static Methods exist on the Windows.UI.Xaml.Controls.Maps.IMapStyleSheetEntryStatesStatics interface starting with version 5.0 of the Windows.Foundation.UniversalApiContract API contract
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x50000
#ifndef RUNTIMECLASS_Windows_UI_Xaml_Controls_Maps_MapStyleSheetEntryStates_DEFINED
#define RUNTIMECLASS_Windows_UI_Xaml_Controls_Maps_MapStyleSheetEntryStates_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Windows_UI_Xaml_Controls_Maps_MapStyleSheetEntryStates[] = L"Windows.UI.Xaml.Controls.Maps.MapStyleSheetEntryStates";
#endif
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x50000

/*
 *
 * Class Windows.UI.Xaml.Controls.Maps.MapTargetCameraChangedEventArgs
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * RuntimeClass can be activated.
 *   Type can be activated via RoActivateInstance starting with version 1.0 of the Windows.Foundation.UniversalApiContract API contract
 *
 * Class implements the following interfaces:
 *    Windows.UI.Xaml.Controls.Maps.IMapTargetCameraChangedEventArgs ** Default Interface **
 *    Windows.UI.Xaml.Controls.Maps.IMapTargetCameraChangedEventArgs2
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#ifndef RUNTIMECLASS_Windows_UI_Xaml_Controls_Maps_MapTargetCameraChangedEventArgs_DEFINED
#define RUNTIMECLASS_Windows_UI_Xaml_Controls_Maps_MapTargetCameraChangedEventArgs_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Windows_UI_Xaml_Controls_Maps_MapTargetCameraChangedEventArgs[] = L"Windows.UI.Xaml.Controls.Maps.MapTargetCameraChangedEventArgs";
#endif
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Class Windows.UI.Xaml.Controls.Maps.MapTileBitmapRequest
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * RuntimeClass can be activated.
 *   Type can be activated via RoActivateInstance starting with version 1.0 of the Windows.Foundation.UniversalApiContract API contract
 *
 * Class implements the following interfaces:
 *    Windows.UI.Xaml.Controls.Maps.IMapTileBitmapRequest ** Default Interface **
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#ifndef RUNTIMECLASS_Windows_UI_Xaml_Controls_Maps_MapTileBitmapRequest_DEFINED
#define RUNTIMECLASS_Windows_UI_Xaml_Controls_Maps_MapTileBitmapRequest_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Windows_UI_Xaml_Controls_Maps_MapTileBitmapRequest[] = L"Windows.UI.Xaml.Controls.Maps.MapTileBitmapRequest";
#endif
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Class Windows.UI.Xaml.Controls.Maps.MapTileBitmapRequestDeferral
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * RuntimeClass can be activated.
 *   Type can be activated via RoActivateInstance starting with version 1.0 of the Windows.Foundation.UniversalApiContract API contract
 *
 * Class implements the following interfaces:
 *    Windows.UI.Xaml.Controls.Maps.IMapTileBitmapRequestDeferral ** Default Interface **
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#ifndef RUNTIMECLASS_Windows_UI_Xaml_Controls_Maps_MapTileBitmapRequestDeferral_DEFINED
#define RUNTIMECLASS_Windows_UI_Xaml_Controls_Maps_MapTileBitmapRequestDeferral_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Windows_UI_Xaml_Controls_Maps_MapTileBitmapRequestDeferral[] = L"Windows.UI.Xaml.Controls.Maps.MapTileBitmapRequestDeferral";
#endif
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Class Windows.UI.Xaml.Controls.Maps.MapTileBitmapRequestedEventArgs
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * RuntimeClass can be activated.
 *   Type can be activated via RoActivateInstance starting with version 1.0 of the Windows.Foundation.UniversalApiContract API contract
 *
 * Class implements the following interfaces:
 *    Windows.UI.Xaml.Controls.Maps.IMapTileBitmapRequestedEventArgs ** Default Interface **
 *    Windows.UI.Xaml.Controls.Maps.IMapTileBitmapRequestedEventArgs2
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#ifndef RUNTIMECLASS_Windows_UI_Xaml_Controls_Maps_MapTileBitmapRequestedEventArgs_DEFINED
#define RUNTIMECLASS_Windows_UI_Xaml_Controls_Maps_MapTileBitmapRequestedEventArgs_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Windows_UI_Xaml_Controls_Maps_MapTileBitmapRequestedEventArgs[] = L"Windows.UI.Xaml.Controls.Maps.MapTileBitmapRequestedEventArgs";
#endif
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Class Windows.UI.Xaml.Controls.Maps.MapTileDataSource
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * Class implements the following interfaces:
 *    Windows.UI.Xaml.Controls.Maps.IMapTileDataSource ** Default Interface **
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#ifndef RUNTIMECLASS_Windows_UI_Xaml_Controls_Maps_MapTileDataSource_DEFINED
#define RUNTIMECLASS_Windows_UI_Xaml_Controls_Maps_MapTileDataSource_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Windows_UI_Xaml_Controls_Maps_MapTileDataSource[] = L"Windows.UI.Xaml.Controls.Maps.MapTileDataSource";
#endif
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Class Windows.UI.Xaml.Controls.Maps.MapTileSource
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * RuntimeClass contains static methods.
 *   Static Methods exist on the Windows.UI.Xaml.Controls.Maps.IMapTileSourceStatics2 interface starting with version 7.0 of the Windows.Foundation.UniversalApiContract API contract
 *   Static Methods exist on the Windows.UI.Xaml.Controls.Maps.IMapTileSourceStatics interface starting with version 1.0 of the Windows.Foundation.UniversalApiContract API contract
 *
 * Class implements the following interfaces:
 *    Windows.UI.Xaml.Controls.Maps.IMapTileSource ** Default Interface **
 *    Windows.UI.Xaml.Controls.Maps.IMapTileSource2
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#ifndef RUNTIMECLASS_Windows_UI_Xaml_Controls_Maps_MapTileSource_DEFINED
#define RUNTIMECLASS_Windows_UI_Xaml_Controls_Maps_MapTileSource_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Windows_UI_Xaml_Controls_Maps_MapTileSource[] = L"Windows.UI.Xaml.Controls.Maps.MapTileSource";
#endif
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Class Windows.UI.Xaml.Controls.Maps.MapTileUriRequest
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * RuntimeClass can be activated.
 *   Type can be activated via RoActivateInstance starting with version 1.0 of the Windows.Foundation.UniversalApiContract API contract
 *
 * Class implements the following interfaces:
 *    Windows.UI.Xaml.Controls.Maps.IMapTileUriRequest ** Default Interface **
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#ifndef RUNTIMECLASS_Windows_UI_Xaml_Controls_Maps_MapTileUriRequest_DEFINED
#define RUNTIMECLASS_Windows_UI_Xaml_Controls_Maps_MapTileUriRequest_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Windows_UI_Xaml_Controls_Maps_MapTileUriRequest[] = L"Windows.UI.Xaml.Controls.Maps.MapTileUriRequest";
#endif
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Class Windows.UI.Xaml.Controls.Maps.MapTileUriRequestDeferral
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * RuntimeClass can be activated.
 *   Type can be activated via RoActivateInstance starting with version 1.0 of the Windows.Foundation.UniversalApiContract API contract
 *
 * Class implements the following interfaces:
 *    Windows.UI.Xaml.Controls.Maps.IMapTileUriRequestDeferral ** Default Interface **
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#ifndef RUNTIMECLASS_Windows_UI_Xaml_Controls_Maps_MapTileUriRequestDeferral_DEFINED
#define RUNTIMECLASS_Windows_UI_Xaml_Controls_Maps_MapTileUriRequestDeferral_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Windows_UI_Xaml_Controls_Maps_MapTileUriRequestDeferral[] = L"Windows.UI.Xaml.Controls.Maps.MapTileUriRequestDeferral";
#endif
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Class Windows.UI.Xaml.Controls.Maps.MapTileUriRequestedEventArgs
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * RuntimeClass can be activated.
 *   Type can be activated via RoActivateInstance starting with version 1.0 of the Windows.Foundation.UniversalApiContract API contract
 *
 * Class implements the following interfaces:
 *    Windows.UI.Xaml.Controls.Maps.IMapTileUriRequestedEventArgs ** Default Interface **
 *    Windows.UI.Xaml.Controls.Maps.IMapTileUriRequestedEventArgs2
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#ifndef RUNTIMECLASS_Windows_UI_Xaml_Controls_Maps_MapTileUriRequestedEventArgs_DEFINED
#define RUNTIMECLASS_Windows_UI_Xaml_Controls_Maps_MapTileUriRequestedEventArgs_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Windows_UI_Xaml_Controls_Maps_MapTileUriRequestedEventArgs[] = L"Windows.UI.Xaml.Controls.Maps.MapTileUriRequestedEventArgs";
#endif
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Class Windows.UI.Xaml.Controls.Maps.StreetsideExperience
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * RuntimeClass can be activated.
 *   Type can be activated via the Windows.UI.Xaml.Controls.Maps.IStreetsideExperienceFactory interface starting with version 1.0 of the Windows.Foundation.UniversalApiContract API contract
 *
 * Class implements the following interfaces:
 *    Windows.UI.Xaml.Controls.Maps.IStreetsideExperience ** Default Interface **
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#ifndef RUNTIMECLASS_Windows_UI_Xaml_Controls_Maps_StreetsideExperience_DEFINED
#define RUNTIMECLASS_Windows_UI_Xaml_Controls_Maps_StreetsideExperience_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Windows_UI_Xaml_Controls_Maps_StreetsideExperience[] = L"Windows.UI.Xaml.Controls.Maps.StreetsideExperience";
#endif
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

/*
 *
 * Class Windows.UI.Xaml.Controls.Maps.StreetsidePanorama
 *
 * Introduced to Windows.Foundation.UniversalApiContract in version 1.0
 *
 * RuntimeClass contains static methods.
 *   Static Methods exist on the Windows.UI.Xaml.Controls.Maps.IStreetsidePanoramaStatics interface starting with version 1.0 of the Windows.Foundation.UniversalApiContract API contract
 *
 * Class implements the following interfaces:
 *    Windows.UI.Xaml.Controls.Maps.IStreetsidePanorama ** Default Interface **
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */
#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#ifndef RUNTIMECLASS_Windows_UI_Xaml_Controls_Maps_StreetsidePanorama_DEFINED
#define RUNTIMECLASS_Windows_UI_Xaml_Controls_Maps_StreetsidePanorama_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Windows_UI_Xaml_Controls_Maps_StreetsidePanorama[] = L"Windows.UI.Xaml.Controls.Maps.StreetsidePanorama";
#endif
#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

#endif // defined(__cplusplus)
#pragma pop_macro("MIDL_CONST_ID")
// Restore the original value of the 'DEPRECATED' macro
#pragma pop_macro("DEPRECATED")

#ifdef __clang__
#pragma clang diagnostic pop // deprecated-declarations
#else
#pragma warning(pop)
#endif
#endif // __windows2Eui2Examl2Econtrols2Emaps_p_h__

#endif // __windows2Eui2Examl2Econtrols2Emaps_h__
